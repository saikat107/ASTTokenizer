<METHOD_START> @ Bean @ ConditionalOnMissingBean ( { org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration.IgnoredPathsWebSecurityConfigurerAdapter .class } ) public org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration.IgnoredPathsWebSecurityConfigurerAdapter org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration.IgnoredPathsWebSecurityConfigurerAdapter ( java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> < IgnoredRequestCustomizer > java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> ) { return new org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration.IgnoredPathsWebSecurityConfigurerAdapter ( java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer ( ServerProperties org.springframework.boot.autoconfigure.security.ServerProperties , SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties , ObjectProvider < ErrorController > org.springframework.boot.autoconfigure.security.ObjectProvider<org.springframework.boot.autoconfigure.security.ErrorController> ) { return new org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration.DefaultIgnoredRequestCustomizer ( org.springframework.boot.autoconfigure.security.ServerProperties , org.springframework.boot.autoconfigure.security.SecurityProperties , org.springframework.boot.autoconfigure.security.ObjectProvider<org.springframework.boot.autoconfigure.security.ErrorController> . getIfAvailable ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( HeadersConfigurer < ? > org.springframework.boot.autoconfigure.security.HeadersConfigurer<?> , SecurityProperties . SecurityProperties SecurityProperties.Headers ) throws java.lang.Exception { if ( SecurityProperties.Headers . getHsts ( ) != Headers . HSTS . NONE ) { boolean boolean = SecurityProperties.Headers . getHsts ( ) == Headers . HSTS . ALL ; HstsHeaderWriter org.springframework.boot.autoconfigure.security.HstsHeaderWriter = new HstsHeaderWriter ( boolean ) ; org.springframework.boot.autoconfigure.security.HstsHeaderWriter . setRequestMatcher ( AnyRequestMatcher . INSTANCE ) ; org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . addHeaderWriter ( org.springframework.boot.autoconfigure.security.HstsHeaderWriter ) ; } if ( ! SecurityProperties.Headers . isContentType ( ) ) { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . contentTypeOptions ( ) . disable ( ) ; } if ( StringUtils . hasText ( SecurityProperties.Headers . getContentSecurityPolicy ( ) ) ) { java.lang.String java.lang.String = SecurityProperties.Headers . getContentSecurityPolicy ( ) ; ContentSecurityPolicyMode org.springframework.boot.autoconfigure.security.ContentSecurityPolicyMode = SecurityProperties.Headers . getContentSecurityPolicyMode ( ) ; if ( org.springframework.boot.autoconfigure.security.ContentSecurityPolicyMode == ContentSecurityPolicyMode . DEFAULT ) { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . contentSecurityPolicy ( java.lang.String ) ; } else { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . contentSecurityPolicy ( java.lang.String ) . reportOnly ( ) ; } } if ( ! SecurityProperties.Headers . isXss ( ) ) { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . xssProtection ( ) . disable ( ) ; } if ( ! SecurityProperties.Headers . isCache ( ) ) { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . cacheControl ( ) . disable ( ) ; } if ( ! SecurityProperties.Headers . isFrame ( ) ) { org.springframework.boot.autoconfigure.security.HeadersConfigurer<> . frameOptions ( ) . disable ( ) ; } }  <METHOD_END>
<METHOD_START> void ( java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> < IgnoredRequestCustomizer > java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> ) { this . java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> = java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSecurity org.springframework.boot.autoconfigure.security.WebSecurity ) throws java.lang.Exception {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSecurity org.springframework.boot.autoconfigure.security.WebSecurity ) throws java.lang.Exception { for ( IgnoredRequestCustomizer org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer> ) { org.springframework.boot.autoconfigure.security.IgnoredRequestCustomizer . customize ( org.springframework.boot.autoconfigure.security.WebSecurity . ignoring ( ) ) ; } }  <METHOD_END>
<METHOD_START> void ( ServerProperties org.springframework.boot.autoconfigure.security.ServerProperties , SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties , ErrorController org.springframework.boot.autoconfigure.security.ErrorController ) { this . org.springframework.boot.autoconfigure.security.ServerProperties = org.springframework.boot.autoconfigure.security.ServerProperties ; this . org.springframework.boot.autoconfigure.security.SecurityProperties = org.springframework.boot.autoconfigure.security.SecurityProperties ; this . org.springframework.boot.autoconfigure.security.ErrorController = org.springframework.boot.autoconfigure.security.ErrorController ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IgnoredRequestConfigurer org.springframework.boot.autoconfigure.security.IgnoredRequestConfigurer ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( this . org.springframework.boot.autoconfigure.security.SecurityProperties ) ; if ( this . org.springframework.boot.autoconfigure.security.ErrorController != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ( this . org.springframework.boot.autoconfigure.security.ErrorController . getErrorPath ( ) ) ) ; } java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.security.ServerProperties . getServlet ( ) . getPathsArray ( java.util.List<java.lang.String> ) ; java.util.List<org.springframework.boot.autoconfigure.security.RequestMatcher> < RequestMatcher > java.util.List<org.springframework.boot.autoconfigure.security.RequestMatcher> = new java.util.ArrayList<org.springframework.boot.autoconfigure.security.RequestMatcher> <> ( ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.boot.autoconfigure.security.RequestMatcher> . add ( new AntPathRequestMatcher ( java.lang.String , null ) ) ; } } if ( ! java.util.List<org.springframework.boot.autoconfigure.security.RequestMatcher> . isEmpty ( ) ) { org.springframework.boot.autoconfigure.security.IgnoredRequestConfigurer . requestMatchers ( new OrRequestMatcher ( java.util.List<org.springframework.boot.autoconfigure.security.RequestMatcher> ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( org.springframework.boot.autoconfigure.security.SecurityProperties . getIgnored ( ) ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; } else if ( java.util.List<java.lang.String> . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( STRING ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.HttpSecurity . requestMatcher ( new RequestMatcher ( ) { @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.boot.autoconfigure.security.HttpServletRequest ) { return false ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.boot.autoconfigure.security.HttpServletRequest ) { return false ; }  <METHOD_END>
<METHOD_START> protected void ( SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties ) { this . org.springframework.boot.autoconfigure.security.SecurityProperties = org.springframework.boot.autoconfigure.security.SecurityProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { if ( this . org.springframework.boot.autoconfigure.security.SecurityProperties . isRequireSsl ( ) ) { org.springframework.boot.autoconfigure.security.HttpSecurity . requiresChannel ( ) . anyRequest ( ) . requiresSecure ( ) ; } if ( ! this . org.springframework.boot.autoconfigure.security.SecurityProperties . isEnableCsrf ( ) ) { org.springframework.boot.autoconfigure.security.HttpSecurity . csrf ( ) . disable ( ) ; } org.springframework.boot.autoconfigure.security.HttpSecurity . sessionManagement ( ) . sessionCreationPolicy ( this . org.springframework.boot.autoconfigure.security.SecurityProperties . getSessions ( ) ) ; org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfiguration . void ( org.springframework.boot.autoconfigure.security.HttpSecurity . headers ( ) , this . org.springframework.boot.autoconfigure.security.SecurityProperties . getHeaders ( ) ) ; java.lang.String [] java.lang.String[] = java.lang.String[] ( ) ; if ( java.lang.String[] . int > NUMBER ) { AuthenticationEntryPoint org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint = org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint ( ) ; org.springframework.boot.autoconfigure.security.HttpSecurity . exceptionHandling ( ) . authenticationEntryPoint ( org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint ) ; org.springframework.boot.autoconfigure.security.HttpSecurity . httpBasic ( ) . authenticationEntryPoint ( org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint ) ; org.springframework.boot.autoconfigure.security.HttpSecurity . requestMatchers ( ) . antMatchers ( java.lang.String[] ) ; java.lang.String [] java.lang.String[] = this . org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) . getRole ( ) . toArray ( new java.lang.String [ NUMBER ] ) ; SecurityAuthorizeMode org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode = this . org.springframework.boot.autoconfigure.security.SecurityProperties . getBasic ( ) . getAuthorizeMode ( ) ; if ( org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode == null || org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode == SecurityAuthorizeMode . ROLE ) { org.springframework.boot.autoconfigure.security.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . hasAnyRole ( java.lang.String[] ) ; } else if ( org.springframework.boot.autoconfigure.security.SecurityAuthorizeMode == SecurityAuthorizeMode . AUTHENTICATED ) { org.springframework.boot.autoconfigure.security.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . authenticated ( ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : this . org.springframework.boot.autoconfigure.security.SecurityProperties . getBasic ( ) . getPath ( ) ) { java.lang.String = ( java.lang.String == null ? STRING : java.lang.String . java.lang.String ( ) ) ; if ( java.lang.String . boolean ( STRING ) ) { return new java.lang.String [] { java.lang.String } ; } if ( ! java.lang.String . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint org.springframework.boot.autoconfigure.security.AuthenticationEntryPoint ( ) { BasicAuthenticationEntryPoint org.springframework.boot.autoconfigure.security.BasicAuthenticationEntryPoint = new BasicAuthenticationEntryPoint ( ) ; org.springframework.boot.autoconfigure.security.BasicAuthenticationEntryPoint . setRealmName ( this . org.springframework.boot.autoconfigure.security.SecurityProperties . getBasic ( ) . getRealm ( ) ) ; return org.springframework.boot.autoconfigure.security.BasicAuthenticationEntryPoint ; }  <METHOD_END>
