<METHOD_START> @ Before public void void ( ) { org.springframework.integration.jdbc.mysql.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setRegion ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { final JdbcTemplate org.springframework.integration.jdbc.mysql.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; new TransactionTemplate ( this . org.springframework.integration.jdbc.mysql.PlatformTransactionManager ) . execute ( status -> { final int deletedGroupToMessageRows = jdbcTemplate . update ( STRING ) ; final int deletedMessages = jdbcTemplate . update ( STRING ) ; final int deletedMessageGroups = jdbcTemplate . update ( STRING ) ; LOG . info ( String . format ( STRING + STRING , deletedMessages , deletedGroupToMessageRows , deletedMessageGroups ) ) ; return null ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( java.util.UUID . java.util.UUID ( ) ) ; assertNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertThat ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , sameExceptIgnorableHeaders ( org.springframework.integration.jdbc.mysql.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; DirectChannel org.springframework.integration.jdbc.mysql.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jdbc.mysql.DirectChannel . setBeanName ( STRING ) ; DirectChannel org.springframework.integration.jdbc.mysql.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.jdbc.mysql.DirectChannel . setBeanName ( STRING ) ; org.springframework.integration.jdbc.mysql.Message<?> = MessageHistory . write ( org.springframework.integration.jdbc.mysql.Message<> , org.springframework.integration.jdbc.mysql.DirectChannel ) ; org.springframework.integration.jdbc.mysql.Message<?> = MessageHistory . write ( org.springframework.integration.jdbc.mysql.Message<> , org.springframework.integration.jdbc.mysql.DirectChannel ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<> ) ; org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) ) ; MessageHistory org.springframework.integration.jdbc.mysql.MessageHistory = MessageHistory . read ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.MessageHistory ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageHistory . size ( ) ) ; java.util.Properties java.util.Properties = org.springframework.integration.jdbc.mysql.MessageHistory . get ( NUMBER ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Properties . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.mysql.JdbcMessageStore . setSerializer ( ( object , outputStream ) -> { outputStream . write ( ( ( Message < ? > ) object ) . getPayload ( ) . toString ( ) . getBytes ( ) ) ; outputStream . flush ( ) ; } ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setDeserializer ( inputStream -> { BufferedReader reader = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; return new GenericMessage < String > ( reader . readLine ( ) ) ; } ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.mysql.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setRegion ( STRING ) ; Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ; assertNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) . setCorrelationId ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( STRING , new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) . getCorrelationId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertSame ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertNotSame ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertThat ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , sameExceptIgnorableHeaders ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> , STRING ) ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.Message<java.lang.String> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.JdbcMessageStore . removeMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> . getHeaders ( ) . getId ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; long long = java.lang.System . long ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; assertTrue ( STRING + org.springframework.integration.jdbc.mysql.MessageGroup . getTimestamp ( ) + STRING + long , org.springframework.integration.jdbc.mysql.MessageGroup . getTimestamp ( ) >= long ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . removeMessagesFromGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { JdbcTemplate org.springframework.integration.jdbc.mysql.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.mysql.JdbcTemplate . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . removeMessageGroup ( java.lang.String ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; java.lang.String java.lang.String = UUIDConverter . getUUID ( java.lang.String ) . toString ( ) ; assertTrue ( org.springframework.integration.jdbc.mysql.JdbcTemplate . queryForList ( STRING + java.lang.String + STRING ) . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . completeGroup ( java.lang.String ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertTrue ( org.springframework.integration.jdbc.mysql.MessageGroup . isComplete ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setLastReleasedSequenceNumberForGroup ( java.lang.String , NUMBER ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . getLastReleasedMessageSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroupCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageCountForAllMessageGroups ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . registerMessageGroupExpiryCallback ( ( messageGroupStore , group ) -> messageGroupStore . removeMessageGroup ( group . getGroupId ( ) ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setTimeoutOnIdle ( true ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . registerMessageGroupExpiryCallback ( ( messageGroupStore , group ) -> messageGroupStore . removeMessageGroup ( group . getGroupId ( ) ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . expireMessageGroups ( NUMBER ) ; org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( STRING , MessageBuilder . withPayload ( STRING ) . setCorrelationId ( java.lang.String ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; MessageGroup org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.mysql.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertEquals ( STRING , org.springframework.integration.jdbc.mysql.Message<> . getPayload ( ) ) ; org.springframework.integration.jdbc.mysql.MessageGroup = org.springframework.integration.jdbc.mysql.JdbcMessageStore . getMessageGroup ( java.lang.String ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.mysql.MessageGroup . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional @ Rollback ( false ) @ Repeat ( NUMBER ) public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . build ( ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<> ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) + STRING + new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) + STRING + new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional @ Rollback ( false ) @ Repeat ( NUMBER ) public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final java.lang.String java.lang.String = STRING ; final JdbcMessageStore org.springframework.integration.jdbc.mysql.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setRegion ( java.lang.String ) ; final JdbcMessageStore org.springframework.integration.jdbc.mysql.JdbcMessageStore = new JdbcMessageStore ( javax.sql.DataSource ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . setRegion ( java.lang.String ) ; final Message < java.lang.String > org.springframework.integration.jdbc.mysql.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; final MessageBuilder < java.lang.String > org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> = MessageBuilder . fromMessage ( org.springframework.integration.jdbc.mysql.Message<java.lang.String> ) ; org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . setSequenceNumber ( NUMBER ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . build ( ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.MessageBuilder<java.lang.String> . build ( ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<> ) ; org.springframework.integration.jdbc.mysql.JdbcMessageStore . addMessageToGroup ( java.lang.String , org.springframework.integration.jdbc.mysql.Message<> ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; final Message < ? > org.springframework.integration.jdbc.mysql.Message<?> = org.springframework.integration.jdbc.mysql.JdbcMessageStore . pollMessageFromGroup ( java.lang.String ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; assertNotNull ( org.springframework.integration.jdbc.mysql.Message<> ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) + STRING + new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ) ; org.springframework.integration.jdbc.mysql.Log . info ( STRING + org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . getId ( ) + STRING + new IntegrationMessageHeaderAccessor ( org.springframework.integration.jdbc.mysql.Message<> ) . getSequenceNumber ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.jdbc.mysql.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER ) ) ; }  <METHOD_END>
