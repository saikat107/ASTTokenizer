<METHOD_START> @ Test public void void ( ) { final java.util.Set<org.springframework.integration.xmpp.inbound.StanzaListener> < StanzaListener > java.util.Set<org.springframework.integration.xmpp.inbound.StanzaListener> = new java.util.HashSet<org.springframework.integration.xmpp.inbound.StanzaListener> <> ( ) ; XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection = mock ( XMPPConnection .class ) ; ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( org.springframework.integration.xmpp.inbound.XMPPConnection ) ; willAnswer ( invocation -> { packetListSet . add ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . given ( org.springframework.integration.xmpp.inbound.XMPPConnection ) . addAsyncStanzaListener ( any ( StanzaListener .class ) , isNull ( ) ) ; willAnswer ( invocation -> { packetListSet . remove ( invocation . getArgument ( NUMBER ) ) ; return null ; } ) . given ( org.springframework.integration.xmpp.inbound.XMPPConnection ) . removeAsyncStanzaListener ( any ( StanzaListener .class ) ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.StanzaListener> . size ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setOutputChannel ( new QueueChannel ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . start ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.StanzaListener> . size ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . stop ( ) ; assertEquals ( NUMBER , java.util.Set<org.springframework.integration.xmpp.inbound.StanzaListener> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( mock ( XMPPConnection .class ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . start ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , mock ( XMPPConnection .class ) ) ; ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setOutputChannel ( new QueueChannel ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.integration.xmpp.inbound.NotConnectedException { DefaultListableBeanFactory org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; XMPPConnection org.springframework.integration.xmpp.inbound.XMPPConnection = mock ( XMPPConnection .class ) ; org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory . registerSingleton ( XmppContextUtils . XMPP_CONNECTION_BEAN_NAME , org.springframework.integration.xmpp.inbound.XMPPConnection ) ; ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( ) ; DirectChannel org.springframework.integration.xmpp.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.xmpp.inbound.DirectChannel . subscribe ( message -> { throw new RuntimeException ( STRING ) ; } ) ; PollableChannel org.springframework.integration.xmpp.inbound.PollableChannel = new QueueChannel ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( org.springframework.integration.xmpp.inbound.DefaultListableBeanFactory ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setOutputChannel ( org.springframework.integration.xmpp.inbound.DirectChannel ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setErrorChannel ( org.springframework.integration.xmpp.inbound.PollableChannel ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; StanzaListener org.springframework.integration.xmpp.inbound.StanzaListener = ( StanzaListener ) TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint , STRING ) ; Message org.springframework.integration.xmpp.inbound.Message = new Message ( STRING ) ; org.springframework.integration.xmpp.inbound.Message . setBody ( STRING ) ; org.springframework.integration.xmpp.inbound.Message . setThread ( STRING ) ; org.springframework.integration.xmpp.inbound.StanzaListener . processPacket ( org.springframework.integration.xmpp.inbound.Message ) ; ErrorMessage org.springframework.integration.xmpp.inbound.ErrorMessage = ( ErrorMessage ) org.springframework.integration.xmpp.inbound.PollableChannel . receive ( ) ; assertEquals ( STRING , ( ( MessagingException ) org.springframework.integration.xmpp.inbound.ErrorMessage . getPayload ( ) ) . getFailedMessage ( ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection = new org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection ( ) ; QueueChannel org.springframework.integration.xmpp.inbound.QueueChannel = new QueueChannel ( ) ; ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection ) ; SpelExpressionParser org.springframework.integration.xmpp.inbound.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setPayloadExpression ( org.springframework.integration.xmpp.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setOutputChannel ( org.springframework.integration.xmpp.inbound.QueueChannel ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . start ( ) ; Message org.springframework.integration.xmpp.inbound.Message = new Message ( ) ; org.springframework.integration.xmpp.inbound.Message . setBody ( STRING ) ; XmlPullParser org.springframework.integration.xmpp.inbound.XmlPullParser = PacketParserUtils . newXmppParser ( new java.io.StringReader ( org.springframework.integration.xmpp.inbound.Message . toString ( ) ) ) ; org.springframework.integration.xmpp.inbound.XmlPullParser . next ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection . void ( org.springframework.integration.xmpp.inbound.XmlPullParser ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > receive = org.springframework.integration.xmpp.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( receive ) ; java.lang.Object java.lang.Object = receive . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( Message .class ) ) ; assertEquals ( org.springframework.integration.xmpp.inbound.Message . getStanzaId ( ) , ( ( Message ) java.lang.Object ) . getStanzaId ( ) ) ; assertEquals ( org.springframework.integration.xmpp.inbound.Message . getBody ( ) , ( ( Message ) java.lang.Object ) . getBody ( ) ) ; Log org.springframework.integration.xmpp.inbound.Log = Mockito . spy ( TestUtils . getPropertyValue ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint , STRING , Log .class ) ) ; given ( org.springframework.integration.xmpp.inbound.Log . isInfoEnabled ( ) ) . willReturn ( true ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; willAnswer ( invocation -> { Object result = invocation . callRealMethod ( ) ; logLatch . countDown ( ) ; return result ; } ) . given ( org.springframework.integration.xmpp.inbound.Log ) . info ( anyString ( ) ) ; new DirectFieldAccessor ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint ) . setPropertyValue ( STRING , org.springframework.integration.xmpp.inbound.Log ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setPayloadExpression ( null ) ; org.springframework.integration.xmpp.inbound.Message = new Message ( ) ; org.springframework.integration.xmpp.inbound.XmlPullParser = PacketParserUtils . newXmppParser ( new java.io.StringReader ( org.springframework.integration.xmpp.inbound.Message . toString ( ) ) ) ; org.springframework.integration.xmpp.inbound.XmlPullParser . next ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection . void ( org.springframework.integration.xmpp.inbound.XmlPullParser ) ; ArgumentCaptor < java.lang.String > org.springframework.integration.xmpp.inbound.ArgumentCaptor<java.lang.String> = ArgumentCaptor . forClass ( java.lang.String .class ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; verify ( org.springframework.integration.xmpp.inbound.Log ) . info ( org.springframework.integration.xmpp.inbound.ArgumentCaptor<java.lang.String> . capture ( ) ) ; assertEquals ( STRING + org.springframework.integration.xmpp.inbound.Message + STRING , org.springframework.integration.xmpp.inbound.ArgumentCaptor<java.lang.String> . getValue ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; GcmPacketExtension org.springframework.integration.xmpp.inbound.GcmPacketExtension = new GcmPacketExtension ( java.lang.String ) ; Message org.springframework.integration.xmpp.inbound.Message = new Message ( ) ; org.springframework.integration.xmpp.inbound.Message . addExtension ( org.springframework.integration.xmpp.inbound.GcmPacketExtension ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection = new org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection ( ) ; QueueChannel org.springframework.integration.xmpp.inbound.QueueChannel = new QueueChannel ( ) ; ChatMessageListeningEndpoint org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint = new ChatMessageListeningEndpoint ( org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection ) ; Expression org.springframework.integration.xmpp.inbound.Expression = new SpelExpressionParser ( ) . parseExpression ( STRING ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setPayloadExpression ( org.springframework.integration.xmpp.inbound.Expression ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setOutputChannel ( org.springframework.integration.xmpp.inbound.QueueChannel ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . afterPropertiesSet ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . start ( ) ; XmlPullParser org.springframework.integration.xmpp.inbound.XmlPullParser = PacketParserUtils . newXmppParser ( new java.io.StringReader ( org.springframework.integration.xmpp.inbound.Message . toString ( ) ) ) ; org.springframework.integration.xmpp.inbound.XmlPullParser . next ( ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpointTests.TestXMPPConnection . void ( org.springframework.integration.xmpp.inbound.XmlPullParser ) ; org . springframework . org.springframework.messaging . org.springframework.messaging < ? > receive = org.springframework.integration.xmpp.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( receive ) ; assertEquals ( java.lang.String , receive . getPayload ( ) ) ; org.springframework.integration.xmpp.inbound.ChatMessageListeningEndpoint . stop ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( XmlPullParser org.springframework.integration.xmpp.inbound.XmlPullParser ) throws java.lang.Exception { super. parseAndProcessStanza ( org.springframework.integration.xmpp.inbound.XmlPullParser ) ; }  <METHOD_END>
