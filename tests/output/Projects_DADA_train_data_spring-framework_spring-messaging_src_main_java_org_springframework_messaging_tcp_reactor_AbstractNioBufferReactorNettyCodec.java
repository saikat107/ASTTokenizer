<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.messaging.tcp.reactor.Message<P>> < Message < P > > java.util.Collection<org.springframework.messaging.tcp.reactor.Message<P>> ( ByteBuf org.springframework.messaging.tcp.reactor.ByteBuf ) { java.nio.ByteBuffer java.nio.ByteBuffer = org.springframework.messaging.tcp.reactor.ByteBuf . nioBuffer ( ) ; int int = java.nio.ByteBuffer . int ( ) ; java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> < Message < P > > java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> = java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> ( java.nio.ByteBuffer ) ; org.springframework.messaging.tcp.reactor.ByteBuf . skipBytes ( java.nio.ByteBuffer . int ( ) - int ) ; return java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < P > org.springframework.messaging.tcp.reactor.Message<P> , ByteBuf org.springframework.messaging.tcp.reactor.ByteBuf ) { org.springframework.messaging.tcp.reactor.ByteBuf . writeBytes ( java.nio.ByteBuffer ( org.springframework.messaging.tcp.reactor.Message<P> ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> < Message < P > > java.util.List<org.springframework.messaging.tcp.reactor.Message<P>> ( java.nio.ByteBuffer java.nio.ByteBuffer );  <METHOD_END>
<METHOD_START> protected abstract java.nio.ByteBuffer java.nio.ByteBuffer ( Message < P > org.springframework.messaging.tcp.reactor.Message<P> );  <METHOD_END>
