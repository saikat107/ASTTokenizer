<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.TransportType org.springframework.web.socket.sockjs.transport.handler.TransportType ( ) { return TransportType . XHR ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.transport.handler.MediaType org.springframework.web.socket.sockjs.transport.handler.MediaType ( ) { return new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat org.springframework.web.socket.sockjs.transport.handler.SockJsFrameFormat ( ServerHttpRequest org.springframework.web.socket.sockjs.transport.handler.ServerHttpRequest ) { return new DefaultSockJsFrameFormat ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( SockJsSession org.springframework.web.socket.sockjs.transport.handler.SockJsSession ) { return org.springframework.web.socket.sockjs.transport.handler.SockJsSession instanceof PollingSockJsSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.handler.PollingSockJsSession org.springframework.web.socket.sockjs.transport.handler.PollingSockJsSession ( java.lang.String java.lang.String , WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return new PollingSockJsSession ( java.lang.String , getServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
