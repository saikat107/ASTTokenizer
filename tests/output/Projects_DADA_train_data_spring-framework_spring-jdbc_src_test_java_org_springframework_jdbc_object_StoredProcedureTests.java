<METHOD_START> @ Before public void void ( ) java.lang.Exception { javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.Connection = mock ( java.sql.Connection .class ) ; java.sql.CallableStatement = mock ( java.sql.CallableStatement .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( java.sql.CallableStatement . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { if ( boolean ) { verify ( java.sql.CallableStatement ) . close ( ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willThrow ( java.sql.SQLException ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.NoSuchStoredProcedure . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.NoSuchStoredProcedure org.springframework.jdbc.object.StoredProcedureTests.NoSuchStoredProcedure = new org.springframework.jdbc.object.StoredProcedureTests.NoSuchStoredProcedure ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( BadSqlGrammarException .class ) ; org.springframework.jdbc.object.StoredProcedureTests.NoSuchStoredProcedure . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( final int int , final int int ) throws java.lang.Exception { org.springframework.jdbc.object.StoredProcedureTests.AddInvoice org.springframework.jdbc.object.StoredProcedureTests.AddInvoice = new org.springframework.jdbc.object.StoredProcedureTests.AddInvoice ( javax.sql.DataSource ) ; int int = org.springframework.jdbc.object.StoredProcedureTests.AddInvoice . int ( int , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( final int int , final int int )			throws java.lang.Exception { org.springframework.jdbc.object.StoredProcedureTests.AddInvoiceUsingObjectArray org.springframework.jdbc.object.StoredProcedureTests.AddInvoiceUsingObjectArray = new org.springframework.jdbc.object.StoredProcedureTests.AddInvoiceUsingObjectArray ( javax.sql.DataSource ) ; int int = org.springframework.jdbc.object.StoredProcedureTests.AddInvoiceUsingObjectArray . int ( int , int ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.AddInvoice . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; void ( NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.AddInvoice . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; void ( NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.AddInvoice . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; TransactionSynchronizationManager . bindResource ( javax.sql.DataSource , new ConnectionHolder ( java.sql.Connection ) ) ; try { void ( NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; verify ( java.sql.Connection , never ( ) ) . close ( ) ; } finally { TransactionSynchronizationManager . unbindResource ( javax.sql.DataSource ) ; java.sql.Connection . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; class TestJdbcTemplate extends JdbcTemplate { int int ; @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( CallableStatementCreator org.springframework.jdbc.object.CallableStatementCreator , java.util.List<org.springframework.jdbc.object.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.object.SqlParameter> ) throws org.springframework.jdbc.object.DataAccessException { int ++ ; return super. call ( org.springframework.jdbc.object.CallableStatementCreator , java.util.List<org.springframework.jdbc.object.SqlParameter> ) ; } } TestJdbcTemplate t = new TestJdbcTemplate ( ) ; t . setDataSource ( javax.sql.DataSource ) ; t . setExceptionTranslator ( new SQLStateSQLExceptionTranslator ( ) ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate ( t ) ; assertEquals ( org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate . int ( NUMBER ) , NUMBER ) ; assertEquals ( NUMBER , t . int ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( CallableStatementCreator org.springframework.jdbc.object.CallableStatementCreator , java.util.List<org.springframework.jdbc.object.SqlParameter> < SqlParameter > java.util.List<org.springframework.jdbc.object.SqlParameter> ) throws org.springframework.jdbc.object.DataAccessException { int ++ ; return super. call ( org.springframework.jdbc.object.CallableStatementCreator , java.util.List<org.springframework.jdbc.object.SqlParameter> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; JdbcTemplate org.springframework.jdbc.object.JdbcTemplate = new JdbcTemplate ( ) ; org.springframework.jdbc.object.JdbcTemplate . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate ( org.springframework.jdbc.object.JdbcTemplate ) ; assertEquals ( org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureConfiguredViaJdbcTemplate . int ( NUMBER ) , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.NullArg . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.NullArg org.springframework.jdbc.object.StoredProcedureTests.NullArg = new org.springframework.jdbc.object.StoredProcedureTests.NullArg ( javax.sql.DataSource ) ; org.springframework.jdbc.object.StoredProcedureTests.NullArg . void ( ( java.lang.String ) null ) ; java.sql.CallableStatement . void ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . boolean = false ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; new org.springframework.jdbc.object.StoredProcedureTests.UnnamedParameterStoredProcedure ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . boolean = false ; org.springframework.jdbc.object.StoredProcedureTests.MissingParameterStoredProcedure org.springframework.jdbc.object.StoredProcedureTests.MissingParameterStoredProcedure = new org.springframework.jdbc.object.StoredProcedureTests.MissingParameterStoredProcedure ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.StoredProcedureTests.MissingParameterStoredProcedure . void ( ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willThrow ( java.sql.SQLException ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureExceptionTranslator . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureExceptionTranslator org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureExceptionTranslator = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureExceptionTranslator ( javax.sql.DataSource ) ; org.springframework.jdbc.object.ExpectedException . expect ( org.springframework.jdbc.object.StoredProcedureTests.CustomDataException .class ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureExceptionTranslator . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet ( javax.sql.DataSource ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet . void ( ) ; assertEquals ( NUMBER , org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSet . int ( ) ) ; verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING , STRING ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.util.Map<java.lang.String,java.lang.Object> ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING , STRING ) ; java.sql.ResultSetMetaData java.sql.ResultSetMetaData = mock ( java.sql.ResultSetMetaData .class ) ; given ( java.sql.ResultSetMetaData . int ( ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet , java.sql.ResultSet ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true , false , false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER , - NUMBER , NUMBER , - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ; assertTrue ( STRING , java.lang.Object instanceof java.util.Map ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) java.lang.Object ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( STRING , NUMBER , java.lang.Number . int ( ) ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; JdbcTemplate org.springframework.jdbc.object.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; org.springframework.jdbc.object.JdbcTemplate . setSkipResultsProcessing ( true ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped ( org.springframework.jdbc.object.JdbcTemplate ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING , STRING ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER , - NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; JdbcTemplate org.springframework.jdbc.object.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; org.springframework.jdbc.object.JdbcTemplate . setSkipUndeclaredResults ( true ) ; org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped = new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped ( org.springframework.jdbc.object.JdbcTemplate ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = ( java.util.List<java.lang.String> < java.lang.String > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure = new org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; verify ( java.sql.CallableStatement ) . setString ( eq ( NUMBER ) , startsWith ( STRING ) ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int [] int[] = new int [] { NUMBER , NUMBER } ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.SqlTypeValueStoredProcedure . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.SqlTypeValueStoredProcedure org.springframework.jdbc.object.StoredProcedureTests.SqlTypeValueStoredProcedure = new org.springframework.jdbc.object.StoredProcedureTests.SqlTypeValueStoredProcedure ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.SqlTypeValueStoredProcedure . java.util.Map<java.lang.String,java.lang.Object> ( int[] ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , int[] , java.sql.Types . int ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( new java.math.BigDecimal ( STRING ) ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + org.springframework.jdbc.object.StoredProcedureTests.NumericWithScaleStoredProcedure . java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; org.springframework.jdbc.object.StoredProcedureTests.NumericWithScaleStoredProcedure org.springframework.jdbc.object.StoredProcedureTests.NumericWithScaleStoredProcedure = new org.springframework.jdbc.object.StoredProcedureTests.NumericWithScaleStoredProcedure ( javax.sql.DataSource ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.object.StoredProcedureTests.NumericWithScaleStoredProcedure . java.util.Map<java.lang.String,java.lang.Object> ( ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , java.sql.Types . int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( JdbcTemplate org.springframework.jdbc.object.JdbcTemplate ) { setJdbcTemplate ( org.springframework.jdbc.object.JdbcTemplate ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( int int ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = int ( java.util.Map<java.lang.String,java.lang.Integer> ) ; return ( ( java.lang.Number ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( int int , int int ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , int ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = int ( java.util.Map<java.lang.String,java.lang.Integer> ) ; return ( ( java.lang.Number ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( int int , int int ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = int ( new java.lang.Object [] { int , int } ) ; return ( ( java.lang.Number ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.lang.String ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource , STRING ); declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( STRING ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlReturnResultSet ( STRING , this . org.springframework.jdbc.object.SimpleRowCountCallbackHandler ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . org.springframework.jdbc.object.SimpleRowCountCallbackHandler . getCount ( ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlReturnResultSet ( STRING , new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped.RowMapperImpl ( ) ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public void ( JdbcTemplate org.springframework.jdbc.object.JdbcTemplate ) { setJdbcTemplate ( org.springframework.jdbc.object.JdbcTemplate ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlReturnResultSet ( STRING , new org.springframework.jdbc.object.StoredProcedureTests.StoredProcedureWithResultSetMapped.RowMapperImpl ( ) ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int ) ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return execute ( new org.springframework.jdbc.object.StoredProcedureTests.ParameterMapperStoredProcedure.TestParameterMapper ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.sql.Connection java.sql.Connection ) throws java.sql.SQLException { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.lang.String java.lang.String = java.sql.Connection . java.lang.String ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlParameter ( STRING , java.sql.Types . int , STRING ) ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( final int [] int[] ) { java.util.Map<java.lang.String,org.springframework.jdbc.object.AbstractSqlTypeValue> < java.lang.String , AbstractSqlTypeValue > java.util.Map<java.lang.String,org.springframework.jdbc.object.AbstractSqlTypeValue> = new java.util.HashMap<java.lang.String,org.springframework.jdbc.object.AbstractSqlTypeValue> <> ( ) ; java.util.Map<java.lang.String,org.springframework.jdbc.object.AbstractSqlTypeValue> . put ( STRING , new AbstractSqlTypeValue ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.Connection java.sql.Connection , int int , java.lang.String java.lang.String ) { return int[] ; } } ) ; return execute ( java.util.Map<java.lang.String,org.springframework.jdbc.object.AbstractSqlTypeValue> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.Connection java.sql.Connection , int int , java.lang.String java.lang.String ) { return int[] ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int , NUMBER ) ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return execute ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { setDataSource ( javax.sql.DataSource ) ; setSql ( java.lang.String ) ; getJdbcTemplate ( ) . setExceptionTranslator ( new SQLExceptionTranslator ( ) { @ java.lang.Override public org.springframework.jdbc.object.DataAccessException org.springframework.jdbc.object.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { return new org.springframework.jdbc.object.StoredProcedureTests.CustomDataException ( java.lang.String , java.sql.SQLException ) ; } } ) ; compile ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jdbc.object.DataAccessException org.springframework.jdbc.object.DataAccessException ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) { return new org.springframework.jdbc.object.StoredProcedureTests.CustomDataException ( java.lang.String , java.sql.SQLException ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( new java.util.HashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Throwable java.lang.Throwable ) { super( java.lang.String , java.lang.Throwable ); }  <METHOD_END>
