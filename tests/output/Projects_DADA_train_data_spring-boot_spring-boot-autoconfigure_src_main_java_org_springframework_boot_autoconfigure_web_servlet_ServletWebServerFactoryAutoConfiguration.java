<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties ) { return new DefaultServletWebServerFactoryCustomizer ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ( ) { return new JettyServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.web.servlet.BeanFactory ) throws org.springframework.boot.autoconfigure.web.servlet.BeansException { if ( org.springframework.boot.autoconfigure.web.servlet.BeanFactory instanceof ConfigurableListableBeanFactory ) { this . org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.boot.autoconfigure.web.servlet.BeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.boot.autoconfigure.web.servlet.AnnotationMetadata , BeanDefinitionRegistry org.springframework.boot.autoconfigure.web.servlet.BeanDefinitionRegistry ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory == null ) { return; } void ( org.springframework.boot.autoconfigure.web.servlet.BeanDefinitionRegistry , STRING , WebServerFactoryCustomizerBeanPostProcessor .class ) ; void ( org.springframework.boot.autoconfigure.web.servlet.BeanDefinitionRegistry , STRING , ErrorPageRegistrarBeanPostProcessor .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.boot.autoconfigure.web.servlet.BeanDefinitionRegistry , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ObjectUtils . isEmpty ( this . org.springframework.boot.autoconfigure.web.servlet.ConfigurableListableBeanFactory . getBeanNamesForType ( java.lang.Class<> , true , false ) ) ) { RootBeanDefinition org.springframework.boot.autoconfigure.web.servlet.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.boot.autoconfigure.web.servlet.RootBeanDefinition . setSynthetic ( true ) ; org.springframework.boot.autoconfigure.web.servlet.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.boot.autoconfigure.web.servlet.RootBeanDefinition ) ; } }  <METHOD_END>
