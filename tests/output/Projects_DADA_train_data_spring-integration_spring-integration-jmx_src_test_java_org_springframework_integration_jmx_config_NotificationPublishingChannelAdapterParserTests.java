<METHOD_START> @ After public void void ( ) { org.springframework.integration.jmx.config.TestListener . lastNotification = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int = NUMBER ; assertNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( JmxHeaders . NOTIFICATION_TYPE , STRING ) . build ( ) ; org.springframework.integration.jmx.config.MessageChannel . send ( org.springframework.integration.jmx.config.Message<> ) ; assertNotNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; javax.management.Notification javax.management.Notification = org.springframework.integration.jmx.config.TestListener . lastNotification ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertNull ( javax.management.Notification . java.lang.Object ( ) ) ; assertEquals ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; org.springframework.integration.jmx.config.NotificationPublishingChannelAdapterParserTests.TestData org.springframework.integration.jmx.config.NotificationPublishingChannelAdapterParserTests.TestData = new org.springframework.integration.jmx.config.NotificationPublishingChannelAdapterParserTests.TestData ( ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.jmx.config.NotificationPublishingChannelAdapterParserTests.TestData ) . setHeader ( JmxHeaders . NOTIFICATION_TYPE , STRING ) . build ( ) ; org.springframework.integration.jmx.config.MessageChannel . send ( org.springframework.integration.jmx.config.Message<> ) ; assertNotNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; javax.management.Notification javax.management.Notification = org.springframework.integration.jmx.config.TestListener . lastNotification ; assertNull ( javax.management.Notification . java.lang.String ( ) ) ; assertEquals ( org.springframework.integration.jmx.config.NotificationPublishingChannelAdapterParserTests.TestData , javax.management.Notification . java.lang.Object ( ) ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jmx.config.MessageChannel . send ( org.springframework.integration.jmx.config.Message<> ) ; assertNotNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; javax.management.Notification javax.management.Notification = org.springframework.integration.jmx.config.TestListener . lastNotification ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( this . org.springframework.integration.jmx.config.BeanFactory . getBean ( STRING + STRING , MessageHandler .class ) ) ; assertNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; Message < ? > org.springframework.integration.jmx.config.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( JmxHeaders . NOTIFICATION_TYPE , STRING ) . build ( ) ; org.springframework.integration.jmx.config.MessageChannel . send ( org.springframework.integration.jmx.config.Message<> ) ; assertNotNull ( org.springframework.integration.jmx.config.TestListener . lastNotification ) ; javax.management.Notification javax.management.Notification = org.springframework.integration.jmx.config.TestListener . lastNotification ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertNull ( javax.management.Notification . java.lang.Object ( ) ) ; java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( new javax.management.ObjectName ( STRING + STRING + STRING ) , null ) ; assertEquals ( NUMBER , java.util.Set<javax.management.ObjectName> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ DirtiesContext public void void ( ) java.lang.Exception { java.util.Set<javax.management.ObjectInstance> < javax.management.ObjectInstance > java.util.Set<javax.management.ObjectInstance> = javax.management.MBeanServer . java.util.Set<javax.management.ObjectInstance> ( null , null ) ; boolean boolean = false ; for ( javax.management.ObjectInstance javax.management.ObjectInstance : java.util.Set<javax.management.ObjectInstance> ) { if ( javax.management.ObjectInstance . java.lang.String ( ) . boolean ( STRING ) ) { javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectInstance . javax.management.ObjectName ( ) ; try { javax.management.MBeanServer . void ( javax.management.ObjectName , new javax.management.Attribute ( STRING , STRING ) ) ; fail ( STRING ) ; } catch ( javax.management.MBeanException javax.management.MBeanException ) { assertThat ( javax.management.MBeanException . java.lang.Exception ( ) , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( javax.management.MBeanException . java.lang.Exception ( ) . java.lang.String ( ) , containsString ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw java.lang.Exception ; } javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING , new java.lang.Object [] {} , new java.lang.String [] {} ) ; javax.management.MBeanServer . void ( javax.management.ObjectName , new javax.management.Attribute ( STRING , STRING ) ) ; assertEquals ( STRING , javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING ) ) ; boolean = true ; break; } } assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.jmx.config.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.jmx.config.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.jmx.config.ExecutionCallback . execute ( ) ; }  <METHOD_END>
