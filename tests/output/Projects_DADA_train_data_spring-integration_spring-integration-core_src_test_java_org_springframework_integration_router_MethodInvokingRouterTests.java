<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , java.lang.reflect.Method ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> , org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , STRING ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> , org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , java.lang.reflect.Method ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( org.springframework.integration.router.Message<java.lang.String> , org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , java.lang.reflect.Method ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean ( ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelNameRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.SingleChannelInstanceRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean ( ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelNameRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean . java.lang.Class<? extends org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean> ( ) . java.lang.reflect.Method ( STRING , Message .class ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , java.lang.reflect.Method ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean = new org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean ( org.springframework.integration.router.TestChannelResolver ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( org.springframework.integration.router.MethodInvokingRouterTests.MultiChannelInstanceRoutingTestBean , STRING ) ; this . void ( org.springframework.integration.router.MethodInvokingRouter , org.springframework.integration.router.TestChannelResolver ) ; }  <METHOD_END>
<METHOD_START> private void void ( MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter , TestChannelResolver org.springframework.integration.router.TestChannelResolver ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; Message < java.lang.String > org.springframework.integration.router.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( STRING , org.springframework.integration.router.Message<> . getPayload ( ) ) ; try { org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<java.lang.String> ) ; fail ( ) ; } catch ( MessageDeliveryException org.springframework.integration.router.MessageDeliveryException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.router.QueueChannel = new QueueChannel ( ) ; TestChannelResolver org.springframework.integration.router.TestChannelResolver = new TestChannelResolver ( ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; org.springframework.integration.router.TestChannelResolver . addChannel ( STRING , org.springframework.integration.router.QueueChannel ) ; MethodInvokingRouter org.springframework.integration.router.MethodInvokingRouter = new MethodInvokingRouter ( new org.springframework.integration.router.MethodInvokingRouterTests.ClassAsKeyTestBean ( ) ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelResolver ( org.springframework.integration.router.TestChannelResolver ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelMapping ( java.lang.String .class . java.lang.String ( ) , STRING ) ; org.springframework.integration.router.MethodInvokingRouter . setChannelMapping ( java.lang.Integer .class . java.lang.String ( ) , STRING ) ; Message < ? > org.springframework.integration.router.Message<?> = new GenericMessage <> ( STRING ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<> ) ; Message < ? > org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( org.springframework.integration.router.Message<> , org.springframework.integration.router.Message<> ) ; org.springframework.integration.router.Message<?> = new GenericMessage <> ( NUMBER ) ; org.springframework.integration.router.MethodInvokingRouter . handleMessage ( org.springframework.integration.router.Message<> ) ; org.springframework.integration.router.Message<?> = org.springframework.integration.router.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.router.Message<> ) ; assertEquals ( org.springframework.integration.router.Message<> , org.springframework.integration.router.Message<> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( @ Header ( STRING ) java.lang.String java.lang.String ) { return java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( Message < ? > org.springframework.integration.router.Message<?> ) { if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { return STRING ; } else if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { return STRING ; } return null ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Message < ? > org.springframework.integration.router.Message<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) || org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( Message < ? > org.springframework.integration.router.Message<?> ) { java.lang.String [] java.lang.String[] = null ; if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) || org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { java.lang.String[] = new java.lang.String [ NUMBER ] ; java.lang.String[] [ NUMBER ] = STRING ; java.lang.String[] [ NUMBER ] = STRING ; } return java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void ( DestinationResolver < MessageChannel > org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> ) { this . org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> = org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.router.MessageChannel org.springframework.integration.router.MessageChannel ( java.lang.String java.lang.String ) { return org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.router.MessageChannel org.springframework.integration.router.MessageChannel ( Message < ? > org.springframework.integration.router.Message<?> ) { if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { return org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ; } else if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { return org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ; } return null ; }  <METHOD_END>
<METHOD_START> public void ( DestinationResolver < MessageChannel > org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> ) { this . org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> = org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> ( java.lang.String java.lang.String ) { java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ) ; } return java.util.List<org.springframework.integration.router.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> ( Message < ? > org.springframework.integration.router.Message<?> ) { java.util.List<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.List<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) || org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ) ; java.util.List<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ) ; } return java.util.List<org.springframework.integration.router.MessageChannel> ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.router.MessageChannel [] org.springframework.integration.router.MessageChannel[] ( Message < ? > org.springframework.integration.router.Message<?> ) { MessageChannel [] org.springframework.integration.router.MessageChannel[] = null ; if ( org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) || org.springframework.integration.router.Message<> . getPayload ( ) . equals ( STRING ) ) { org.springframework.integration.router.MessageChannel[] = new MessageChannel [ NUMBER ] ; org.springframework.integration.router.MessageChannel[] [ NUMBER ] = org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ; org.springframework.integration.router.MessageChannel[] [ NUMBER ] = org.springframework.integration.router.DestinationResolver<org.springframework.integration.router.MessageChannel> . resolveDestination ( STRING ) ; } return org.springframework.integration.router.MessageChannel[] ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
