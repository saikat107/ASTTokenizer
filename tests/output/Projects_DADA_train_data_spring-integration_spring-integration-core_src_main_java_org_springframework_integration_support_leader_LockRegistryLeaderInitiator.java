<METHOD_START> public void ( LockRegistry org.springframework.integration.support.leader.LockRegistry ) { this( org.springframework.integration.support.leader.LockRegistry , new DefaultCandidate ( ) ); }  <METHOD_END>
<METHOD_START> public void ( LockRegistry org.springframework.integration.support.leader.LockRegistry , Candidate org.springframework.integration.support.leader.Candidate ) { Assert . notNull ( org.springframework.integration.support.leader.LockRegistry , STRING ) ; Assert . notNull ( org.springframework.integration.support.leader.Candidate , STRING ) ; this . org.springframework.integration.support.leader.LockRegistry = org.springframework.integration.support.leader.LockRegistry ; this . org.springframework.integration.support.leader.Candidate = org.springframework.integration.support.leader.Candidate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.support.leader.ApplicationEventPublisher ) { this . org.springframework.integration.support.leader.ApplicationEventPublisher = org.springframework.integration.support.leader.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( LeaderEventPublisher org.springframework.integration.support.leader.LeaderEventPublisher ) { this . org.springframework.integration.support.leader.LeaderEventPublisher = org.springframework.integration.support.leader.LeaderEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.support.leader.Context org.springframework.integration.support.leader.Context ( ) { if ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector == null ) { return org.springframework.integration.support.leader.Context ; } return this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LockContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.support.leader.LeaderEventPublisher == null && this . org.springframework.integration.support.leader.ApplicationEventPublisher != null ) { this . org.springframework.integration.support.leader.LeaderEventPublisher = new DefaultLeaderEventPublisher ( this . org.springframework.integration.support.leader.ApplicationEventPublisher ) ; } synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector = new org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector ( java.lang.String ( ) ) ; this . java.util.concurrent.Future<?> = this . java.util.concurrent.ExecutorService . java.util.concurrent.Future<java.lang.Void> ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector ) ; this . boolean = true ; org.springframework.integration.support.leader.Log . debug ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; this . java.util.concurrent.ExecutorService . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { this . boolean = false ; if ( this . java.util.concurrent.Future<> != null ) { this . java.util.concurrent.Future<> . boolean ( true ) ; } this . java.util.concurrent.Future<?> = null ; org.springframework.integration.support.leader.Log . debug ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . org.springframework.integration.support.leader.Candidate . getRole ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.util.concurrent.locks.Lock = org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LockRegistry . obtain ( java.lang.String ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( ) java.lang.Exception { try { while ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . boolean ) { try { boolean boolean = this . java.util.concurrent.locks.Lock . boolean ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( ! this . boolean ) { if ( boolean ) { this . boolean = true ; void ( ) ; } } else if ( boolean ) { this . java.util.concurrent.locks.Lock . void ( ) ; java.lang.Thread . void ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . long ) ; } else { this . boolean = false ; void ( ) ; java.lang.Thread . void ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . long ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { if ( this . boolean ) { this . java.util.concurrent.locks.Lock . void ( ) ; this . boolean = false ; void ( ) ; java.lang.Thread . void ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . long ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; return null ; } } } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; if ( this . boolean ) { void ( ) ; } this . boolean = false ; } return null ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.InterruptedException { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.Candidate . onGranted ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LockContext ) ; if ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LeaderEventPublisher != null ) { try { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LeaderEventPublisher . publishOnGranted ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this , this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LockContext , this . java.lang.String ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.support.leader.Log . warn ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.Candidate . onRevoked ( this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LockContext ) ; if ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LeaderEventPublisher != null ) { try { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LeaderEventPublisher . publishOnRevoked ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this , this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LockContext , org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.Candidate . getRole ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.support.leader.Log . warn ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . java.util.concurrent.Future<> != null ) { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . java.util.concurrent.Future<> . boolean ( true ) ; if ( boolean ( ) ) { org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . java.util.concurrent.Future<?> = org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . java.util.concurrent.ExecutorService . java.util.concurrent.Future<java.lang.Void> ( org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.LockRegistryLeaderInitiator.LeaderSelector ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.Candidate . getRole ( ) + STRING + org.springframework.integration.support.leader.LockRegistryLeaderInitiator .this . org.springframework.integration.support.leader.Candidate . getId ( ) + STRING + boolean ( ) + STRING ; }  <METHOD_END>
