<METHOD_START> public void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) throws java.lang.ClassNotFoundException { setInterfaces ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( AdvisorAdapterRegistry org.springframework.aop.framework.AdvisorAdapterRegistry ) { this . org.springframework.aop.framework.AdvisorAdapterRegistry = org.springframework.aop.framework.AdvisorAdapterRegistry ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; this . boolean = ( java.lang.ClassLoader != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( ! this . boolean ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.aop.framework.BeanFactory ) { this . org.springframework.aop.framework.BeanFactory = org.springframework.aop.framework.BeanFactory ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.aop.framework.BeansException { void ( ) ; if ( boolean ( ) ) { return java.lang.Object ( ) ; } else { if ( this . java.lang.String == null ) { org.springframework.aop.framework.Log . warn ( STRING + STRING ) ; } return java.lang.Object ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { synchronized ( this ) { if ( this . java.lang.Object != null ) { return this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = getProxiedInterfaces ( ) ; if ( java.lang.Class<?>[] . int == NUMBER ) { return java.lang.Class<?>[] [ NUMBER ] ; } else if ( java.lang.Class<?>[] . int > NUMBER ) { return java.lang.Class<?> ( java.lang.Class<?>[] ) ; } else if ( this . java.lang.String != null && this . org.springframework.aop.framework.BeanFactory != null ) { return this . org.springframework.aop.framework.BeanFactory . getType ( this . java.lang.String ) ; } else { return getTargetClass ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { return ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private synchronized java.lang.Object java.lang.Object ( ) { if ( this . java.lang.Object == null ) { this . targetSource = org.springframework.aop.framework.TargetSource ( ) ; if ( this . boolean && getProxiedInterfaces ( ) . length == NUMBER && ! isProxyTargetClass ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = getTargetClass ( ) ; if ( java.lang.Class<> == null ) { throw new FactoryBeanNotInitializedException ( STRING ) ; } setInterfaces ( ClassUtils . getAllInterfacesForClass ( java.lang.Class<> , this . java.lang.ClassLoader ) ) ; } super. setFrozen ( this . boolean ) ; this . java.lang.Object = java.lang.Object ( createAopProxy ( ) ) ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> private synchronized java.lang.Object java.lang.Object ( ) { if ( org.springframework.aop.framework.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.Log . trace ( STRING + this ) ; } ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport = new ProxyCreatorSupport ( getAopProxyFactory ( ) ) ; TargetSource org.springframework.aop.framework.TargetSource = org.springframework.aop.framework.TargetSource ( ) ; org.springframework.aop.framework.ProxyCreatorSupport . copyConfigurationFrom ( this , org.springframework.aop.framework.TargetSource , java.util.List<org.springframework.aop.framework.Advisor> ( ) ) ; if ( this . boolean && getProxiedInterfaces ( ) . length == NUMBER && ! isProxyTargetClass ( ) ) { org.springframework.aop.framework.ProxyCreatorSupport . setInterfaces ( ClassUtils . getAllInterfacesForClass ( org.springframework.aop.framework.TargetSource . getTargetClass ( ) , this . java.lang.ClassLoader ) ) ; } org.springframework.aop.framework.ProxyCreatorSupport . setFrozen ( this . boolean ) ; if ( org.springframework.aop.framework.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.Log . trace ( STRING + org.springframework.aop.framework.ProxyCreatorSupport ) ; } return java.lang.Object ( org.springframework.aop.framework.ProxyCreatorSupport . createAopProxy ( ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( AopProxy org.springframework.aop.framework.AopProxy ) { return org.springframework.aop.framework.AopProxy . getProxy ( this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! ObjectUtils . isEmpty ( this . java.lang.String[] ) ) { java.lang.String java.lang.String = this . java.lang.String[] [ this . java.lang.String[] . int - NUMBER ] ; if ( this . java.lang.String == null && this . targetSource == EMPTY_TARGET_SOURCE ) { if ( ! java.lang.String . boolean ( java.lang.String ) && ! boolean ( java.lang.String ) ) { this . java.lang.String = java.lang.String ; if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.String + STRING + STRING ) ; } java.lang.String [] java.lang.String[] = new java.lang.String [ this . java.lang.String[] . int - NUMBER ] ; java.lang.System . void ( this . java.lang.String[] , NUMBER , java.lang.String[] , NUMBER , java.lang.String[] . int ) ; this . java.lang.String[] = java.lang.String[] ; } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { java.lang.Class<?> < ? > java.lang.Class<?> = this . org.springframework.aop.framework.BeanFactory . getType ( java.lang.String ) ; if ( java.lang.Class<> != null ) { return ( Advisor .class . boolean ( java.lang.Class<> ) || Advice .class . boolean ( java.lang.Class<> ) ) ; } if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + java.lang.String + STRING ) ; } return false ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) org.springframework.aop.framework.AopConfigException , org.springframework.aop.framework.BeansException { if ( this . boolean ) { return; } if ( ! ObjectUtils . isEmpty ( this . java.lang.String[] ) ) { if ( this . org.springframework.aop.framework.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.util.Arrays . java.util.List<java.lang.String> ( this . java.lang.String[] ) ) ; } if ( this . java.lang.String[] [ this . java.lang.String[] . int - NUMBER ] . boolean ( java.lang.String ) && this . java.lang.String == null && this . targetSource == EMPTY_TARGET_SOURCE ) { throw new AopConfigException ( STRING ) ; } for ( java.lang.String java.lang.String : this . java.lang.String[] ) { if ( org.springframework.aop.framework.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.Log . trace ( STRING + java.lang.String + STRING ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { if ( ! ( this . org.springframework.aop.framework.BeanFactory instanceof ListableBeanFactory ) ) { throw new AopConfigException ( STRING ) ; } void ( ( ListableBeanFactory ) this . org.springframework.aop.framework.BeanFactory , java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ) ; } else { java.lang.Object java.lang.Object ; if ( this . boolean || this . org.springframework.aop.framework.BeanFactory . isSingleton ( java.lang.String ) ) { java.lang.Object = this . org.springframework.aop.framework.BeanFactory . getBean ( java.lang.String ) ; } else { java.lang.Object = new org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor ( java.lang.String ) ; } void ( java.lang.Object , java.lang.String ) ; } } } this . boolean = true ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.aop.framework.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.Advisor> ( ) { Advisor [] org.springframework.aop.framework.Advisor[] = getAdvisors ( ) ; java.util.List<org.springframework.aop.framework.Advisor> < Advisor > java.util.List<org.springframework.aop.framework.Advisor> = new java.util.ArrayList <> ( advisors . length ) ; for ( Advisor org.springframework.aop.framework.Advisor : org.springframework.aop.framework.Advisor[] ) { if ( org.springframework.aop.framework.Advisor instanceof org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor ) { org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor = ( org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor ) org.springframework.aop.framework.Advisor ; if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor . java.lang.String ( ) + STRING ) ; } if ( this . org.springframework.aop.framework.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING + org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor . java.lang.String ( ) + STRING ) ; } java.lang.Object java.lang.Object = this . org.springframework.aop.framework.BeanFactory . getBean ( org.springframework.aop.framework.ProxyFactoryBean.PrototypePlaceholderAdvisor . java.lang.String ( ) ) ; Advisor org.springframework.aop.framework.Advisor = org.springframework.aop.framework.Advisor ( java.lang.Object ) ; java.util.List<org.springframework.aop.framework.Advisor> . add ( org.springframework.aop.framework.Advisor ) ; } else { java.util.List<org.springframework.aop.framework.Advisor> . add ( org.springframework.aop.framework.Advisor ) ; } } return java.util.List<org.springframework.aop.framework.Advisor> ; }  <METHOD_END>
<METHOD_START> private void void ( ListableBeanFactory org.springframework.aop.framework.ListableBeanFactory , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.aop.framework.ListableBeanFactory , Advisor .class ) ; java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.aop.framework.ListableBeanFactory , Interceptor .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( java.lang.String[] . int + java.lang.String[] . int ) ; java.util.Map<java.lang.Object,java.lang.String> < java.lang.Object , java.lang.String > java.util.Map<java.lang.Object,java.lang.String> = new java.util.HashMap<java.lang.Object,java.lang.String> <> ( java.util.List<java.lang.Object> . int ( ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.Object java.lang.Object = org.springframework.aop.framework.ListableBeanFactory . getBean ( java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( java.lang.Object , java.lang.String ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.Object java.lang.Object = org.springframework.aop.framework.ListableBeanFactory . getBean ( java.lang.String ) ; java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( java.lang.Object , java.lang.String ) ; } AnnotationAwareOrderComparator . sort ( java.util.List<java.lang.Object> ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { java.lang.String java.lang.String = java.util.Map<java.lang.Object,java.lang.String> . java.lang.String ( java.lang.Object ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { void ( java.lang.Object , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Advisor org.springframework.aop.framework.Advisor = org.springframework.aop.framework.Advisor ( java.lang.Object ) ; if ( org.springframework.aop.framework.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.Log . trace ( STRING + java.lang.String + STRING ) ; } addAdvisor ( org.springframework.aop.framework.Advisor ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.TargetSource org.springframework.aop.framework.TargetSource ( ) { if ( this . java.lang.String == null ) { if ( org.springframework.aop.framework.Log . isTraceEnabled ( ) ) { org.springframework.aop.framework.Log . trace ( STRING ) ; } return this . targetSource ; } else { if ( this . org.springframework.aop.framework.BeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING + this . java.lang.String + STRING ) ; } if ( org.springframework.aop.framework.Log . isDebugEnabled ( ) ) { org.springframework.aop.framework.Log . debug ( STRING + this . java.lang.String + STRING ) ; } java.lang.Object java.lang.Object = this . org.springframework.aop.framework.BeanFactory . getBean ( this . java.lang.String ) ; return ( java.lang.Object instanceof TargetSource ? ( TargetSource ) java.lang.Object : new SingletonTargetSource ( java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.aop.framework.Advisor org.springframework.aop.framework.Advisor ( java.lang.Object java.lang.Object ) { try { return this . org.springframework.aop.framework.AdvisorAdapterRegistry . wrap ( java.lang.Object ) ; } catch ( UnknownAdviceTypeException org.springframework.aop.framework.UnknownAdviceTypeException ) { throw new AopConfigException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING + STRING , org.springframework.aop.framework.UnknownAdviceTypeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. adviceChanged ( ) ; if ( this . boolean ) { org.springframework.aop.framework.Log . debug ( STRING ) ; synchronized ( this ) { this . java.lang.Object = null ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . java.lang.ClassLoader = ClassUtils . getDefaultClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.Advice org.springframework.aop.framework.Advice ( ) { throw new java.lang.UnsupportedOperationException ( STRING + this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { throw new java.lang.UnsupportedOperationException ( STRING + this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
