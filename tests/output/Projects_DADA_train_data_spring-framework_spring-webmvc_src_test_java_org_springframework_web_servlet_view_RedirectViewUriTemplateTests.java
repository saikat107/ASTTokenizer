<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.servlet.view.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.web.servlet.view.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . OUTPUT_FLASH_MAP_ATTRIBUTE , new FlashMap ( ) ) ; this . org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( DispatcherServlet . FLASH_MAP_MANAGER_ATTRIBUTE , new SessionFlashMapManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( java.lang.String + STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String + STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( java.lang.String + STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String + STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Long ( NUMBER ) ) ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; this . org.springframework.web.servlet.view.MockHttpServletRequest . setAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , java.util.Map<java.lang.String,java.lang.String> ) ; java.lang.String java.lang.String = STRING ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( java.lang.String + STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String + STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new RedirectView ( STRING ) . renderMergedOutputModel ( new ModelMap ( ) , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( STRING ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( STRING , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; RedirectView org.springframework.web.servlet.view.RedirectView = new RedirectView ( java.lang.String , true ) ; org.springframework.web.servlet.view.RedirectView . setExpandUriTemplateVariables ( false ) ; org.springframework.web.servlet.view.RedirectView . renderMergedOutputModel ( new ModelMap ( ) , this . org.springframework.web.servlet.view.MockHttpServletRequest , this . org.springframework.web.servlet.view.MockHttpServletResponse ) ; assertEquals ( java.lang.String , this . org.springframework.web.servlet.view.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
