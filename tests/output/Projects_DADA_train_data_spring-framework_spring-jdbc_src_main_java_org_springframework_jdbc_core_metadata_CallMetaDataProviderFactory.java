<METHOD_START> static public org.springframework.jdbc.core.metadata.CallMetaDataProvider org.springframework.jdbc.core.metadata.CallMetaDataProvider ( javax.sql.DataSource javax.sql.DataSource , final CallMetaDataContext org.springframework.jdbc.core.metadata.CallMetaDataContext ) { try { return ( CallMetaDataProvider ) JdbcUtils . extractDatabaseMetaData ( javax.sql.DataSource , new DatabaseMetaDataCallback ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException , org.springframework.jdbc.core.metadata.MetaDataAccessException { java.lang.String java.lang.String = JdbcUtils . commonDatabaseName ( java.sql.DatabaseMetaData . java.lang.String ( ) ) ; boolean boolean = org.springframework.jdbc.core.metadata.CallMetaDataContext . isAccessCallParameterMetaData ( ) ; if ( org.springframework.jdbc.core.metadata.CallMetaDataContext . isFunction ( ) ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.jdbc.core.metadata.Log . isWarnEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . warn ( java.lang.String + STRING + STRING + java.util.List<java.lang.String> ) ; } if ( boolean ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING ) ; boolean = false ; } } } else { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.jdbc.core.metadata.Log . isWarnEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . warn ( java.lang.String + STRING + STRING + java.util.List<java.lang.String> ) ; } if ( boolean ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING ) ; boolean = false ; } } } CallMetaDataProvider org.springframework.jdbc.core.metadata.CallMetaDataProvider ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new OracleCallMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new Db2CallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new DerbyCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new PostgresCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new SybaseCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new SqlServerCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new HanaCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new GenericCallMetaDataProvider ( java.sql.DatabaseMetaData ) ; } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + org.springframework.jdbc.core.metadata.CallMetaDataProvider . getClass ( ) . getName ( ) ) ; } org.springframework.jdbc.core.metadata.CallMetaDataProvider . initializeWithMetaData ( java.sql.DatabaseMetaData ) ; if ( boolean ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider . initializeWithProcedureColumnMetaData ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.CallMetaDataContext . getCatalogName ( ) , org.springframework.jdbc.core.metadata.CallMetaDataContext . getSchemaName ( ) , org.springframework.jdbc.core.metadata.CallMetaDataContext . getProcedureName ( ) ) ; } return org.springframework.jdbc.core.metadata.CallMetaDataProvider ; } } ) ; } catch ( MetaDataAccessException org.springframework.jdbc.core.metadata.MetaDataAccessException ) { throw new DataAccessResourceFailureException ( STRING , org.springframework.jdbc.core.metadata.MetaDataAccessException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.DatabaseMetaData java.sql.DatabaseMetaData ) throws java.sql.SQLException , org.springframework.jdbc.core.metadata.MetaDataAccessException { java.lang.String java.lang.String = JdbcUtils . commonDatabaseName ( java.sql.DatabaseMetaData . java.lang.String ( ) ) ; boolean boolean = org.springframework.jdbc.core.metadata.CallMetaDataContext . isAccessCallParameterMetaData ( ) ; if ( org.springframework.jdbc.core.metadata.CallMetaDataContext . isFunction ( ) ) { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.jdbc.core.metadata.Log . isWarnEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . warn ( java.lang.String + STRING + STRING + java.util.List<java.lang.String> ) ; } if ( boolean ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING ) ; boolean = false ; } } } else { if ( ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.jdbc.core.metadata.Log . isWarnEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . warn ( java.lang.String + STRING + STRING + java.util.List<java.lang.String> ) ; } if ( boolean ) { org.springframework.jdbc.core.metadata.Log . warn ( STRING ) ; boolean = false ; } } } CallMetaDataProvider org.springframework.jdbc.core.metadata.CallMetaDataProvider ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new OracleCallMetaDataProvider ( java.sql.DatabaseMetaData ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new Db2CallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new DerbyCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new PostgresCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new SybaseCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new SqlServerCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new HanaCallMetaDataProvider ( ( java.sql.DatabaseMetaData ) ) ; } else { org.springframework.jdbc.core.metadata.CallMetaDataProvider = new GenericCallMetaDataProvider ( java.sql.DatabaseMetaData ) ; } if ( org.springframework.jdbc.core.metadata.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.core.metadata.Log . debug ( STRING + org.springframework.jdbc.core.metadata.CallMetaDataProvider . getClass ( ) . getName ( ) ) ; } org.springframework.jdbc.core.metadata.CallMetaDataProvider . initializeWithMetaData ( java.sql.DatabaseMetaData ) ; if ( boolean ) { org.springframework.jdbc.core.metadata.CallMetaDataProvider . initializeWithProcedureColumnMetaData ( java.sql.DatabaseMetaData , org.springframework.jdbc.core.metadata.CallMetaDataContext . getCatalogName ( ) , org.springframework.jdbc.core.metadata.CallMetaDataContext . getSchemaName ( ) , org.springframework.jdbc.core.metadata.CallMetaDataContext . getProcedureName ( ) ) ; } return org.springframework.jdbc.core.metadata.CallMetaDataProvider ; }  <METHOD_END>
