<METHOD_START> public void ( java.lang.String java.lang.String , MultiValueMap < java.lang.String , AnnotationAttributes > org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> , java.util.Map<java.lang.String,java.util.Set<java.lang.String>> < java.lang.String , java.util.Set<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.Set<java.lang.String>> , java.lang.ClassLoader java.lang.ClassLoader ) { super( java.lang.String , new AnnotationAttributes ( java.lang.String , java.lang.ClassLoader ) , java.lang.ClassLoader ); this . org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> = org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> ; this . java.util.Map<java.lang.String,java.util.Set<java.lang.String>> = java.util.Map<java.lang.String,java.util.Set<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. visitEnd ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = this . attributes . annotationType ( ) ; if ( java.lang.Class<> != null ) { java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> < AnnotationAttributes > java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> = this . org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . get ( this . annotationType ) ; if ( java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> == null ) { this . org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . add ( this . annotationType , this . attributes ) ; } else { java.util.List<org.springframework.core.type.classreading.AnnotationAttributes> . add ( NUMBER , this . attributes ) ; } java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = new java.util.LinkedHashSet<java.lang.annotation.Annotation> <> ( ) ; java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = AnnotationUtils . getAnnotations ( java.lang.Class<> ) ; if ( ! ObjectUtils . isEmpty ( java.lang.annotation.Annotation[] ) ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.annotation.Annotation ) ) { void ( java.util.Set<java.lang.annotation.Annotation> , java.lang.annotation.Annotation ) ; } } } if ( this . java.util.Map<java.lang.String,java.util.Set<java.lang.String>> != null ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( java.util.Set<java.lang.annotation.Annotation> . int ( ) ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.util.Set<java.lang.annotation.Annotation> ) { java.util.Set<java.lang.String> . boolean ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) ; } this . java.util.Map<java.lang.String,java.util.Set<java.lang.String>> . java.util.Set<java.lang.String> ( java.lang.Class<> . java.lang.String ( ) , java.util.Set<java.lang.String> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) ; if ( ! AnnotationUtils . isInJavaLangAnnotationPackage ( java.lang.String ) && java.util.Set<java.lang.annotation.Annotation> . boolean ( java.lang.annotation.Annotation ) ) { try { if ( java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ) { this . org.springframework.core.type.classreading.MultiValueMap<java.lang.String,org.springframework.core.type.classreading.AnnotationAttributes> . add ( java.lang.String , AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation , false , true ) ) ; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { void ( java.util.Set<java.lang.annotation.Annotation> , java.lang.annotation.Annotation ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.annotation.Annotation + STRING + java.lang.Throwable ) ; } } } }  <METHOD_END>
