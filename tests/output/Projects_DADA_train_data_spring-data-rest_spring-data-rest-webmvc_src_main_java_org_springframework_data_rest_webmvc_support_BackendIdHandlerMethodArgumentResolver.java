<METHOD_START> public void ( Java8PluginRegistry < BackendIdConverter , java.lang.Class<?> < ? > > org.springframework.data.rest.webmvc.support.Java8PluginRegistry<org.springframework.data.rest.webmvc.support.BackendIdConverter,java.lang.Class<?>> , ResourceMetadataHandlerMethodArgumentResolver org.springframework.data.rest.webmvc.support.ResourceMetadataHandlerMethodArgumentResolver , BaseUri org.springframework.data.rest.webmvc.support.BaseUri ) { Assert . notNull ( org.springframework.data.rest.webmvc.support.Java8PluginRegistry<org.springframework.data.rest.webmvc.support.BackendIdConverter,java.lang.Class<?>> , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.support.ResourceMetadataHandlerMethodArgumentResolver , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.support.BaseUri , STRING ) ; this . org.springframework.data.rest.webmvc.support.Java8PluginRegistry<org.springframework.data.rest.webmvc.support.BackendIdConverter,java.lang.Class<?>> = org.springframework.data.rest.webmvc.support.Java8PluginRegistry<org.springframework.data.rest.webmvc.support.BackendIdConverter,java.lang.Class<?>> ; this . org.springframework.data.rest.webmvc.support.ResourceMetadataHandlerMethodArgumentResolver = org.springframework.data.rest.webmvc.support.ResourceMetadataHandlerMethodArgumentResolver ; this . org.springframework.data.rest.webmvc.support.BaseUri = org.springframework.data.rest.webmvc.support.BaseUri ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.rest.webmvc.support.MethodParameter ) { return org.springframework.data.rest.webmvc.support.MethodParameter . hasParameterAnnotation ( BackendId .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.Serializable java.io.Serializable ( MethodParameter org.springframework.data.rest.webmvc.support.MethodParameter , ModelAndViewContainer org.springframework.data.rest.webmvc.support.ModelAndViewContainer , NativeWebRequest org.springframework.data.rest.webmvc.support.NativeWebRequest , WebDataBinderFactory org.springframework.data.rest.webmvc.support.WebDataBinderFactory ) throws java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.support.MethodParameter . getParameterType ( ) ; if ( org.springframework.data.rest.webmvc.support.MethodParameter . getMethodAnnotation ( BackendId .class ) != null && ! java.lang.Class<> . boolean ( java.io.Serializable .class ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , BackendId .class . java.lang.String ( ) , java.io.Serializable .class . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) , org.springframework.data.rest.webmvc.support.MethodParameter . getMethod ( ) ) ) ; } ResourceMetadata org.springframework.data.rest.webmvc.support.ResourceMetadata = org.springframework.data.rest.webmvc.support.ResourceMetadataHandlerMethodArgumentResolver . resolveArgument ( org.springframework.data.rest.webmvc.support.MethodParameter , org.springframework.data.rest.webmvc.support.ModelAndViewContainer , org.springframework.data.rest.webmvc.support.NativeWebRequest , org.springframework.data.rest.webmvc.support.WebDataBinderFactory ) ; if ( org.springframework.data.rest.webmvc.support.ResourceMetadata == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.rest.webmvc.support.NativeWebRequest ) ; } BackendIdConverter org.springframework.data.rest.webmvc.support.BackendIdConverter = org.springframework.data.rest.webmvc.support.Java8PluginRegistry<org.springframework.data.rest.webmvc.support.BackendIdConverter,java.lang.Class<?>> . getPluginFor ( org.springframework.data.rest.webmvc.support.ResourceMetadata . getDomainType ( ) ) . orElse ( DefaultIdConverter . INSTANCE ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.support.BaseUri . getRepositoryLookupPath ( org.springframework.data.rest.webmvc.support.NativeWebRequest ) ; return org.springframework.data.rest.webmvc.support.BackendIdConverter . fromRequestId ( UriUtils . findMappingVariable ( STRING , org.springframework.data.rest.webmvc.support.MethodParameter . getMethod ( ) , java.lang.String ) , org.springframework.data.rest.webmvc.support.ResourceMetadata . getDomainType ( ) ) ; }  <METHOD_END>
