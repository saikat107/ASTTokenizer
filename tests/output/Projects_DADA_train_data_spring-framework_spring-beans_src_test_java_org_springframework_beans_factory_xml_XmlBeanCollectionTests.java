<METHOD_START> @ Before public void void ( ) { new XmlBeanDefinitionReader ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.beans.factory.xml.XmlBeanCollectionTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListFactoryBean org.springframework.beans.factory.xml.ListFactoryBean = new ListFactoryBean ( ) ; org.springframework.beans.factory.xml.ListFactoryBean . setSourceList ( new java.util.LinkedList ( ) ) ; org.springframework.beans.factory.xml.ListFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.beans.factory.xml.ListFactoryBean . getObject ( ) instanceof java.util.ArrayList ) ; SetFactoryBean org.springframework.beans.factory.xml.SetFactoryBean = new SetFactoryBean ( ) ; org.springframework.beans.factory.xml.SetFactoryBean . setSourceSet ( new java.util.TreeSet ( ) ) ; org.springframework.beans.factory.xml.SetFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.beans.factory.xml.SetFactoryBean . getObject ( ) instanceof java.util.LinkedHashSet ) ; MapFactoryBean org.springframework.beans.factory.xml.MapFactoryBean = new MapFactoryBean ( ) ; org.springframework.beans.factory.xml.MapFactoryBean . setSourceMap ( new java.util.TreeMap ( ) ) ; org.springframework.beans.factory.xml.MapFactoryBean . afterPropertiesSet ( ) ; assertTrue ( org.springframework.beans.factory.xml.MapFactoryBean . getObject ( ) instanceof java.util.LinkedHashMap ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getSpouse ( ) == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getName ( ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.factory.xml.TestBean . getFriends ( ) . toArray ( ) ; assertTrue ( java.lang.Object[] . int == NUMBER ) ; assertTrue ( STRING + java.lang.Object[] [ NUMBER ] , java.lang.Object[] [ NUMBER ] == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( java.lang.Object[] [ NUMBER ] == org.springframework.beans.factory.xml.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.factory.xml.TestBean . getFriends ( ) . toArray ( ) ; assertTrue ( java.lang.Object[] . int == NUMBER ) ; assertTrue ( STRING + java.lang.Object[] [ NUMBER ] , java.lang.Object[] [ NUMBER ] . java.lang.String ( ) . boolean ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , java.lang.Object[] [ NUMBER ] != org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( java.lang.Object[] [ NUMBER ] . java.lang.String ( ) . boolean ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , java.lang.Object[] [ NUMBER ] != org.springframework.beans.factory.xml.TestBean ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.TestBean . getSpouse ( ) . getName ( ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.Object [] java.lang.Object[] = org.springframework.beans.factory.xml.TestBean . getFriends ( ) . toArray ( ) ; assertTrue ( java.lang.Object[] . int == NUMBER ) ; assertTrue ( STRING + java.lang.Object[] [ NUMBER ] , java.lang.Object[] [ NUMBER ] . java.lang.String ( ) . boolean ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , java.lang.Object[] [ NUMBER ] != java.lang.Object[] [ NUMBER ] ) ; assertTrue ( java.lang.Object[] [ NUMBER ] . java.lang.String ( ) . boolean ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , java.lang.Object[] [ NUMBER ] != java.lang.Object[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getFriends ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.TestBean . getFriends ( ) . contains ( org.springframework.beans.factory.xml.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MixedCollectionBean org.springframework.beans.factory.xml.MixedCollectionBean = ( MixedCollectionBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING + org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) . size ( ) , org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) . size ( ) == NUMBER ) ; java.util.List java.util.List = ( java.util.List ) org.springframework.beans.factory.xml.MixedCollectionBean . getJumble ( ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( STRING ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( STRING ) ) ; java.lang.Object [] java.lang.Object[] = ( java.lang.Object [] ) java.util.List . java.lang.Object ( NUMBER ) ; assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; assertTrue ( java.lang.Object[] [ NUMBER ] . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.xml.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) instanceof BeanDefinitionStoreException ) ; assertTrue ( org.springframework.beans.factory.xml.BeanCreationException . getCause ( ) . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) == null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( new java.lang.Integer ( NUMBER ) ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) == org.springframework.beans.factory.xml.TestBean ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( new java.lang.Integer ( NUMBER ) ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) instanceof java.lang.Long ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( new java.lang.Long ( NUMBER ) ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) instanceof java.lang.Integer ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . toString ( ) . equals ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) != org.springframework.beans.factory.xml.TestBean ) ; HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . toString ( ) . equals ( org.springframework.beans.factory.xml.TestBean . toString ( ) ) ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) != org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( null ) . equals ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) . equals ( org.springframework.beans.factory.xml.TestBean ) ) ; java.util.List java.util.List = ( java.util.List ) org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) ; assertNotNull ( java.util.List ) ; assertTrue ( java.util.List . int ( ) == NUMBER ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( STRING ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) == null ) ; java.util.Map java.util.Map = ( java.util.Map ) java.util.List . java.lang.Object ( NUMBER ) ; assertNotNull ( java.util.Map ) ; assertTrue ( java.util.Map . int ( ) == NUMBER ) ; assertTrue ( java.util.Map . java.lang.Object ( STRING ) . boolean ( STRING ) ) ; assertTrue ( STRING + java.util.Map . java.lang.Object ( STRING ) , java.util.Map . java.lang.Object ( STRING ) . boolean ( org.springframework.beans.factory.xml.TestBean ) ) ; java.util.List = ( java.util.List ) java.util.List . java.lang.Object ( NUMBER ) ; assertNotNull ( java.util.List ) ; assertTrue ( java.util.List . int ( ) == NUMBER ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( org.springframework.beans.factory.xml.TestBean ) ) ; assertTrue ( java.util.List . java.lang.Object ( NUMBER ) . boolean ( STRING ) ) ; java.util.Map = ( java.util.Map ) org.springframework.beans.factory.xml.HasMap . getMap ( ) . get ( STRING ) ; assertNotNull ( java.util.Map ) ; assertTrue ( java.util.Map . int ( ) == NUMBER ) ; assertTrue ( java.util.Map . java.lang.Object ( STRING ) . boolean ( STRING ) ) ; assertTrue ( STRING + java.util.Map . java.lang.Object ( STRING ) , java.util.Map . java.lang.Object ( STRING ) . boolean ( org.springframework.beans.factory.xml.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getSet ( ) . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getSet ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getSet ( ) . contains ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getSet ( ) . contains ( org.springframework.beans.factory.xml.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getSet ( ) . contains ( null ) ) ; java.util.Iterator java.util.Iterator = org.springframework.beans.factory.xml.HasMap . getSet ( ) . iterator ( ) ; assertEquals ( STRING , java.util.Iterator . java.lang.Object ( ) ) ; assertEquals ( org.springframework.beans.factory.xml.TestBean , java.util.Iterator . java.lang.Object ( ) ) ; assertEquals ( null , java.util.Iterator . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getConcurrentSet ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getConcurrentSet ( ) . contains ( STRING ) ) ; TestBean org.springframework.beans.factory.xml.TestBean = ( TestBean ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getConcurrentSet ( ) . contains ( org.springframework.beans.factory.xml.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getConcurrentSet ( ) . contains ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getIdentityMap ( ) . size ( ) == NUMBER ) ; java.util.HashSet java.util.HashSet = new java.util.HashSet ( org.springframework.beans.factory.xml.HasMap . getIdentityMap ( ) . keySet ( ) ) ; assertTrue ( java.util.HashSet . boolean ( STRING ) ) ; assertTrue ( java.util.HashSet . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getProps ( ) . size ( ) == NUMBER ) ; assertEquals ( org.springframework.beans.factory.xml.HasMap . getProps ( ) . getClass ( ) , java.util.Properties .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getProps ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getProps ( ) . get ( STRING ) . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getProps ( ) . get ( STRING ) . equals ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getObjectArray ( ) . length == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getObjectArray ( ) [ NUMBER ] . equals ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getObjectArray ( ) [ NUMBER ] . equals ( this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getIntegerArray ( ) . length == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getIntegerArray ( ) [ NUMBER ] . intValue ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getIntegerArray ( ) [ NUMBER ] . intValue ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getIntegerArray ( ) [ NUMBER ] . intValue ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassArray ( ) . length == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassArray ( ) [ NUMBER ] . equals ( java.lang.String .class ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassArray ( ) [ NUMBER ] . equals ( java.lang.Exception .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassList ( ) . size ( ) == NUMBER ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassList ( ) . get ( NUMBER ) . equals ( java.lang.String .class ) ) ; assertTrue ( org.springframework.beans.factory.xml.HasMap . getClassList ( ) . get ( NUMBER ) . equals ( java.lang.Exception .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.HasMap . getProps ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.HasMap . getProps ( ) . getProperty ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.HasMap . getProps ( ) . getProperty ( STRING ) ) ; HasMap org.springframework.beans.factory.xml.HasMap = ( HasMap ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.xml.HasMap . getProps ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.HasMap . getProps ( ) . getProperty ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.xml.HasMap . getProps ( ) . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = ( java.util.List ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.List instanceof java.util.LinkedList ) ; assertTrue ( java.util.List . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List java.util.List = ( java.util.List ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.List instanceof java.util.LinkedList ) ; assertTrue ( java.util.List . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set java.util.Set = ( java.util.Set ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.Set instanceof java.util.TreeSet ) ; assertTrue ( java.util.Set . int ( ) == NUMBER ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set java.util.Set = ( java.util.Set ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.Set instanceof java.util.TreeSet ) ; assertTrue ( java.util.Set . int ( ) == NUMBER ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map java.util.Map = ( java.util.Map ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.Map instanceof java.util.TreeMap ) ; assertTrue ( java.util.Map . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map java.util.Map = ( java.util.Map ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.Map instanceof java.util.TreeMap ) ; assertTrue ( java.util.Map . int ( ) == NUMBER ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.xml.XmlBeanCollectionTests.MapAndSet org.springframework.beans.factory.xml.XmlBeanCollectionTests.MapAndSet = ( org.springframework.beans.factory.xml.XmlBeanCollectionTests.MapAndSet ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( STRING , org.springframework.beans.factory.xml.XmlBeanCollectionTests.MapAndSet . java.lang.Object ( ) instanceof java.util.Map ) ; java.util.Map java.util.Map = ( java.util.Map ) org.springframework.beans.factory.xml.XmlBeanCollectionTests.MapAndSet . java.lang.Object ( ) ; assertEquals ( NUMBER , java.util.Map . int ( ) ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , java.util.Map . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set java.util.Set = ( java.util.Set ) this . org.springframework.beans.factory.xml.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( java.util.Set . int ( ) == NUMBER ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; assertTrue ( java.util.Set . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map java.util.Map ) { this . java.lang.Object = java.util.Map ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set java.util.Set ) { this . java.lang.Object = java.util.Set ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
