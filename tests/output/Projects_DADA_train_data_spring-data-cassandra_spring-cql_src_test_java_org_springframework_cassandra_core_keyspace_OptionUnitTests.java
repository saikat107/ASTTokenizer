<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultOption ( null , java.lang.Object .class , true , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new DefaultOption ( STRING , java.lang.Object .class , true , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new DefaultOption ( STRING , null , true , true , true ) ; new DefaultOption ( STRING , null , false , true , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Option org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( STRING , null , true , true , true ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( null ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.String .class ; boolean boolean = true ; boolean boolean = true ; boolean boolean = true ; Option org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( java.lang.String , java.lang.Class<> , boolean , boolean , boolean ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( STRING ) ) . isEqualTo ( STRING ) ; java.lang.Class<?> = java.lang.Long .class ; boolean = false ; boolean = false ; org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( java.lang.String , java.lang.Class<> , boolean , boolean , boolean ) ; java.lang.String java.lang.String = STRING ; for ( java.lang.Object java.lang.Object : new java.lang.Object [] { NUMBER , STRING } ) { assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( java.lang.Object ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( java.lang.Object ) ) . isEqualTo ( java.lang.String ) ; } assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( null ) ) . isTrue ( ) ; java.lang.Class<?> = java.lang.Long .class ; boolean = false ; boolean = true ; org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( java.lang.String , java.lang.Class<> , boolean , boolean , boolean ) ; java.lang.String = STRING ; for ( java.lang.Object java.lang.Object : new java.lang.Object [] { NUMBER , STRING } ) { assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( java.lang.Object ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( java.lang.Object ) ) . isEqualTo ( java.lang.String ) ; } assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( null ) ) . isTrue ( ) ; java.lang.Class<?> = java.lang.Double .class ; boolean = false ; boolean = false ; org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( java.lang.String , java.lang.Class<> , boolean , boolean , boolean ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING , STRING , STRING , STRING , null } ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { NUMBER , NUMBER , NUMBER , STRING , STRING , null } ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( java.lang.Object[] [ int ] ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( java.lang.Object[] [ int ] ) ) . isEqualTo ( java.lang.String[] [ int ] ) ; } assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( null ) ) . isTrue ( ) ; java.lang.Class<?> = java.lang.annotation.RetentionPolicy .class ; boolean = false ; boolean = false ; org.springframework.cassandra.core.keyspace.Option = new DefaultOption ( java.lang.String , java.lang.Class<> , boolean , boolean , boolean ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( null ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( java.lang.annotation.RetentionPolicy . java.lang.annotation.RetentionPolicy ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . isCoerceable ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.cassandra.core.keyspace.Option . toString ( java.lang.annotation.RetentionPolicy . java.lang.annotation.RetentionPolicy ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
