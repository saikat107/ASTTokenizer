<METHOD_START> public void ( ConversionService org.springframework.core.convert.support.ConversionService ) { this . org.springframework.core.convert.support.ConversionService = org.springframework.core.convert.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return boolean ( org.springframework.core.convert.support.TypeDescriptor . getElementTypeDescriptor ( ) , org.springframework.core.convert.support.TypeDescriptor ) ; } if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return boolean ( org.springframework.core.convert.support.TypeDescriptor . getElementTypeDescriptor ( ) , org.springframework.core.convert.support.TypeDescriptor ) ; } return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . collection ( java.util.Collection .class , org.springframework.core.convert.support.TypeDescriptor ) ; return this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . collection ( java.util.Collection .class , org.springframework.core.convert.support.TypeDescriptor ) ; return this . org.springframework.core.convert.support.ConversionService . canConvert ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return java.lang.Object ( ( java.util.stream.Stream<?> < ? > ) java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ) { return java.lang.Object ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.stream.Stream<?> < ? > java.util.stream.Stream<?> , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.stream.Stream<> . java.util.List<java.lang.Object> ( java.util.stream.Collectors .< java.lang.Object > java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . collection ( java.util.List .class , org.springframework.core.convert.support.TypeDescriptor . getElementTypeDescriptor ( ) ) ; return this . org.springframework.core.convert.support.ConversionService . convert ( java.util.List<java.lang.Object> , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { TypeDescriptor org.springframework.core.convert.support.TypeDescriptor = TypeDescriptor . collection ( java.util.List .class , org.springframework.core.convert.support.TypeDescriptor . getElementTypeDescriptor ( ) ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) this . org.springframework.core.convert.support.ConversionService . convert ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; return java.util.List<> . java.util.stream.Stream<> ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> = new java.util.HashSet<org.springframework.core.convert.support.ConvertiblePair> <> ( ) ; java.util.Set<org.springframework.core.convert.support.ConvertiblePair> . add ( new ConvertiblePair ( java.util.stream.Stream .class , java.util.Collection .class ) ) ; java.util.Set<org.springframework.core.convert.support.ConvertiblePair> . add ( new ConvertiblePair ( java.util.stream.Stream .class , java.lang.Object [] .class ) ) ; java.util.Set<org.springframework.core.convert.support.ConvertiblePair> . add ( new ConvertiblePair ( java.util.Collection .class , java.util.stream.Stream .class ) ) ; java.util.Set<org.springframework.core.convert.support.ConvertiblePair> . add ( new ConvertiblePair ( java.lang.Object [] .class , java.util.stream.Stream .class ) ) ; return java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ; }  <METHOD_END>
