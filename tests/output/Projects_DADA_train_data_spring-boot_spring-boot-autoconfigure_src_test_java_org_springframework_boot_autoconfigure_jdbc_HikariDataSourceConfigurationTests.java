<METHOD_START> @ After public void void ( ) { EmbeddedDatabaseConnection . override = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.HikariDataSourceConfigurationTests.HikariDataSourceConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( HikariDataSource .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.HikariDataSourceConfigurationTests.HikariDataSourceConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( HikariDataSource .class ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getJdbcUrl ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getMaxLifetime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.HikariDataSourceConfigurationTests.HikariDataSourceConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String + STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( HikariDataSource .class ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getDataSourceProperties ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.HikariDataSourceConfigurationTests.HikariDataSourceConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( HikariDataSource .class ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getMaxLifetime ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > T T ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Class<> , java.lang.String , null ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( T ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConfigurationProperties ( prefix = STRING ) public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . type ( HikariDataSource .class ) . build ( ) ; }  <METHOD_END>
