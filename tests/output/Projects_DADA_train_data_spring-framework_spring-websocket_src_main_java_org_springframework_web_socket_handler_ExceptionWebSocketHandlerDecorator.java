<METHOD_START> public void ( WebSocketHandler org.springframework.web.socket.handler.WebSocketHandler ) { super( org.springframework.web.socket.handler.WebSocketHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) { try { getDelegate ( ) . afterConnectionEstablished ( org.springframework.web.socket.handler.WebSocketSession ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable , org.springframework.web.socket.handler.Log ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> ) { try { getDelegate ( ) . handleMessage ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.WebSocketMessage<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable , org.springframework.web.socket.handler.Log ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable java.lang.Throwable ) { try { getDelegate ( ) . handleTransportError ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable , org.springframework.web.socket.handler.Log ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , CloseStatus org.springframework.web.socket.handler.CloseStatus ) { try { getDelegate ( ) . afterConnectionClosed ( org.springframework.web.socket.handler.WebSocketSession , org.springframework.web.socket.handler.CloseStatus ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.handler.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.handler.Log . error ( STRING + this , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable java.lang.Throwable , Log org.springframework.web.socket.handler.Log ) { if ( org.springframework.web.socket.handler.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.handler.Log . debug ( STRING + org.springframework.web.socket.handler.WebSocketSession , java.lang.Throwable ) ; } if ( org.springframework.web.socket.handler.WebSocketSession . isOpen ( ) ) { try { org.springframework.web.socket.handler.WebSocketSession . close ( CloseStatus . SERVER_ERROR ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } }  <METHOD_END>
