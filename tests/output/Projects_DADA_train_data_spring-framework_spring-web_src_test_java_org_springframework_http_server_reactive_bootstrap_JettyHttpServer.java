<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.Server = new Server ( ) ; ServletHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter = org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ( ) ; ServletHolder org.springframework.http.server.reactive.bootstrap.ServletHolder = new ServletHolder ( org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ) ; this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler = new ServletContextHandler ( this . org.springframework.http.server.reactive.bootstrap.Server , STRING , false , false ) ; this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler . addServlet ( org.springframework.http.server.reactive.bootstrap.ServletHolder , STRING ) ; this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler . start ( ) ; ServerConnector org.springframework.http.server.reactive.bootstrap.ServerConnector = new ServerConnector ( this . org.springframework.http.server.reactive.bootstrap.Server ) ; org.springframework.http.server.reactive.bootstrap.ServerConnector . setHost ( getHost ( ) ) ; org.springframework.http.server.reactive.bootstrap.ServerConnector . setPort ( getPort ( ) ) ; this . org.springframework.http.server.reactive.bootstrap.Server . addConnector ( org.springframework.http.server.reactive.bootstrap.ServerConnector ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter org.springframework.http.server.reactive.bootstrap.ServletHttpHandlerAdapter ( ) { return new JettyHttpHandlerAdapter ( resolveHttpHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.http.server.reactive.bootstrap.Server . start ( ) ; setPort ( ( ( ServerConnector ) this . org.springframework.http.server.reactive.bootstrap.Server . getConnectors ( ) [ NUMBER ] ) . getLocalPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { try { if ( this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler . isRunning ( ) ) { this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler . stop ( ) ; } } finally { try { if ( this . org.springframework.http.server.reactive.bootstrap.Server . isRunning ( ) ) { this . org.springframework.http.server.reactive.bootstrap.Server . setStopTimeout ( NUMBER ) ; this . org.springframework.http.server.reactive.bootstrap.Server . stop ( ) ; this . org.springframework.http.server.reactive.bootstrap.Server . destroy ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { try { if ( this . org.springframework.http.server.reactive.bootstrap.Server . isRunning ( ) ) { this . org.springframework.http.server.reactive.bootstrap.Server . setStopTimeout ( NUMBER ) ; this . org.springframework.http.server.reactive.bootstrap.Server . stop ( ) ; this . org.springframework.http.server.reactive.bootstrap.Server . destroy ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } finally { this . org.springframework.http.server.reactive.bootstrap.Server = null ; this . org.springframework.http.server.reactive.bootstrap.ServletContextHandler = null ; } }  <METHOD_END>
