<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver = new org.springframework.web.method.annotation.CookieValueMethodArgumentResolverTests.TestCookieValueMethodArgumentResolver ( ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<? extends org.springframework.web.method.annotation.CookieValueMethodArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , Cookie .class , java.lang.String .class , java.lang.String .class ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.method.annotation.ServletWebRequest = new ServletWebRequest ( org.springframework.web.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( STRING , org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertTrue ( STRING , org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; assertFalse ( STRING , org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.ServletWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.lang.String ) ; assertEquals ( STRING , STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ServletRequestBindingException .class ) public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , null , org.springframework.web.method.annotation.ServletWebRequest , null ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MethodParameter org.springframework.web.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.method.annotation.NativeWebRequest ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> public void void ( @ CookieValue ( STRING ) Cookie org.springframework.web.method.annotation.Cookie , @ CookieValue ( name = STRING , defaultValue = STRING ) java.lang.String java.lang.String , java.lang.String java.lang.String ) {	}  <METHOD_END>
