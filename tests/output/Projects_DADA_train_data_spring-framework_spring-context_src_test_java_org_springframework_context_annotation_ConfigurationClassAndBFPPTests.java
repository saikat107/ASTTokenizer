<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.TestBeanConfig .class , org.springframework.context.annotation.ConfigurationClassAndBFPPTests.AutowiredConfigWithBFPPAsInstanceMethod .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.AutowiredConfigWithBFPPAsInstanceMethod .class ) . autowiredTestBean , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.TestBeanConfig .class , org.springframework.context.annotation.ConfigurationClassAndBFPPTests.AutowiredConfigWithBFPPAsStaticMethod .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.AutowiredConfigWithBFPPAsStaticMethod .class ) . autowiredTestBean , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.BeanFactoryPostProcessor org.springframework.context.annotation.BeanFactoryPostProcessor ( ) { return new BeanFactoryPostProcessor ( ) { @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) throws org.springframework.context.annotation.BeansException { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) throws org.springframework.context.annotation.BeansException { }  <METHOD_END>
<METHOD_START> @ Bean public static final org.springframework.context.annotation.BeanFactoryPostProcessor org.springframework.context.annotation.BeanFactoryPostProcessor ( ) { return new BeanFactoryPostProcessor ( ) { @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) throws org.springframework.context.annotation.BeansException { } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.context.annotation.ConfigurableListableBeanFactory ) throws org.springframework.context.annotation.BeansException { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.ConfigWithStaticBeanMethod .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.ConfigWithStaticBeanMethod . org.springframework.context.annotation.TestBean ( ) , not ( sameInstance ( org.springframework.context.annotation.ConfigurationClassAndBFPPTests.ConfigWithStaticBeanMethod . org.springframework.context.annotation.TestBean ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
