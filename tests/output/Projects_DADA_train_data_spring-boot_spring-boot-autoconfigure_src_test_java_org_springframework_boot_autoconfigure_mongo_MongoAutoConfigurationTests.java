<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBeanNamesForType ( Mongo .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.MongoAutoConfigurationTests.OptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) . getMongoClientOptions ( ) . getSocketTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.MongoAutoConfigurationTests.OptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) . getMongoClientOptions ( ) . getSocketTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.mongo.MongoAutoConfigurationTests.SslOptionsConfig .class , PropertyPlaceholderAutoConfiguration .class , MongoAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . refresh ( ) ; MongoClient org.springframework.boot.autoconfigure.mongo.MongoClient = this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( MongoClient .class ) ; MongoClientOptions org.springframework.boot.autoconfigure.mongo.MongoClientOptions = org.springframework.boot.autoconfigure.mongo.MongoClient . getMongoClientOptions ( ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoClientOptions . isSslEnabled ( ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.mongo.MongoClientOptions . getSocketFactory ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.mongo.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.MongoClientOptions org.springframework.boot.autoconfigure.mongo.MongoClientOptions ( ) { return MongoClientOptions . builder ( ) . socketTimeout ( NUMBER ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.MongoClientOptions org.springframework.boot.autoconfigure.mongo.MongoClientOptions ( ) { return MongoClientOptions . builder ( ) . sslEnabled ( true ) . socketFactory ( javax.net.SocketFactory ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.net.SocketFactory javax.net.SocketFactory ( ) { return mock ( javax.net.SocketFactory .class ) ; }  <METHOD_END>
