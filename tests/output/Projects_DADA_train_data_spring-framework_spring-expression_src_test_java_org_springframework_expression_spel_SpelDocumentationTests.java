<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.expression.spel.Inventor ) ; java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( org.springframework.expression.spel.Inventor ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List ) ; java.util.List . boolean ( org.springframework.expression.spel.Inventor ) ; java.util.List . boolean ( org.springframework.expression.spel.Inventor ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . boolean ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , NUMBER , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.GregorianCalendar java.util.GregorianCalendar = new java.util.GregorianCalendar ( ) ; java.util.GregorianCalendar . void ( NUMBER , NUMBER , NUMBER ) ; Inventor org.springframework.expression.spel.Inventor = new Inventor ( STRING , java.util.GregorianCalendar . java.util.Date ( ) , STRING ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.Inventor ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.Inventor ) ; Expression org.springframework.expression.spel.Expression = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) ; boolean boolean = org.springframework.expression.spel.Expression . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { evaluate ( STRING , true , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( ) ; assertEquals ( STRING , java.lang.String ) ; double double = ( java.lang.Double ) org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( ) ; assertEquals ( NUMBER , double , NUMBER ) ; int int = ( java.lang.Integer ) org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( ) ; assertEquals ( java.lang.Integer . int , int ) ; boolean boolean = ( java.lang.Boolean ) org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( ) ; assertTrue ( boolean ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EvaluationContext org.springframework.expression.spel.EvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; int int = ( java.lang.Integer ) parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( NUMBER , int ) ; java.lang.String java.lang.String = ( java.lang.String ) parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; java.lang.String java.lang.String = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.SpelDocumentationTests.IEEE org.springframework.expression.spel.SpelDocumentationTests.IEEE = new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ; org.springframework.expression.spel.SpelDocumentationTests.IEEE . org.springframework.expression.spel.Inventor[] [ NUMBER ] = org.springframework.expression.spel.Inventor ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.SpelDocumentationTests.IEEE ) ; java.lang.String java.lang.String = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; Inventor org.springframework.expression.spel.Inventor = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , Inventor .class ) ; assertNotNull ( org.springframework.expression.spel.Inventor ) ; java.lang.String java.lang.String = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertNotNull ( java.lang.String ) ; Inventor org.springframework.expression.spel.Inventor = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , Inventor .class ) ; assertEquals ( STRING , org.springframework.expression.spel.Inventor . getName ( ) ) ; parser . parseExpression ( STRING ) . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; Inventor org.springframework.expression.spel.Inventor = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , Inventor .class ) ; assertEquals ( STRING , org.springframework.expression.spel.Inventor . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = parser . parseExpression ( STRING ) . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; boolean boolean = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { boolean boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertTrue ( boolean ) ; boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertFalse ( boolean ) ; boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { boolean boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertFalse ( boolean ) ; boolean boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertTrue ( boolean ) ; boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertFalse ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; boolean boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertFalse ( boolean ) ; java.lang.String java.lang.String = STRING ; boolean boolean = parser . parseExpression ( java.lang.String ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertTrue ( boolean ) ; java.lang.String = STRING ; boolean = parser . parseExpression ( java.lang.String ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertTrue ( boolean ) ; boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertFalse ( boolean ) ; java.lang.String = STRING ; boolean = parser . parseExpression ( java.lang.String ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.Boolean .class ) ; assertFalse ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; java.lang.String java.lang.String = parser . parseExpression ( STRING ) . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; double double = parser . parseExpression ( STRING ) . getValue ( java.lang.Double .class ) ; assertEquals ( - NUMBER , double , NUMBER ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; double double = parser . parseExpression ( STRING ) . getValue ( java.lang.Double .class ) ; assertEquals ( NUMBER , double , NUMBER ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( - NUMBER , int ) ; double double = parser . parseExpression ( STRING ) . getValue ( java.lang.Double .class ) ; assertEquals ( NUMBER , double , NUMBER ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( NUMBER , int ) ; int int = parser . parseExpression ( STRING ) . getValue ( java.lang.Integer .class ) ; assertEquals ( - NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Inventor org.springframework.expression.spel.Inventor = new Inventor ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.Inventor ) ; parser . parseExpression ( STRING ) . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; assertEquals ( STRING , parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; java.lang.String java.lang.String = parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = parser . parseExpression ( STRING ) . getValue ( java.lang.Class .class ) ; assertEquals ( java.util.Date .class , java.lang.Class<> ) ; boolean boolean = parser . parseExpression ( STRING ) . getValue ( java.lang.Boolean .class ) ; assertTrue ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; Inventor org.springframework.expression.spel.Inventor = parser . parseExpression ( STRING ) . getValue ( Inventor .class ) ; assertEquals ( STRING , org.springframework.expression.spel.Inventor . getName ( ) ) ; parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Inventor org.springframework.expression.spel.Inventor = new Inventor ( STRING , STRING ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( org.springframework.expression.spel.Inventor ) ; parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , org.springframework.expression.spel.Inventor . getFoo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = new java.util.ArrayList<java.lang.Integer> <> ( ) ; java.util.List<java.lang.Integer> . boolean ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , java.util.List<java.lang.Integer> ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = ( java.util.List<java.lang.Integer> < java.lang.Integer > ) org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( STRING , java.util.List<java.lang.Integer> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionParser org.springframework.expression.spel.ExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . registerFunction ( STRING , org.springframework.expression.spel.SpelDocumentationTests.StringUtils .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ) ; java.lang.String java.lang.String = org.springframework.expression.spel.ExpressionParser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = parser . parseExpression ( STRING ) . getValue ( java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; parser . parseExpression ( STRING ) . setValue ( org.springframework.expression.spel.StandardEvaluationContext , STRING ) ; org.springframework.expression.spel.StandardEvaluationContext . setVariable ( STRING , STRING ) ; java.lang.String java.lang.String = STRING + STRING ; java.lang.String java.lang.String = parser . parseExpression ( java.lang.String ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setRootObject ( new org.springframework.expression.spel.SpelDocumentationTests.IEEE ( ) ) ; java.util.List<org.springframework.expression.spel.Inventor> < Inventor > java.util.List<org.springframework.expression.spel.Inventor> = ( java.util.List<org.springframework.expression.spel.Inventor> < Inventor > ) parser . parseExpression ( STRING ) . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ; assertEquals ( NUMBER , java.util.List<org.springframework.expression.spel.Inventor> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.expression.spel.Inventor> . get ( NUMBER ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = parser . parseExpression ( STRING , new org.springframework.expression.spel.SpelDocumentationTests.TemplatedParserContext ( ) ) . getValue ( java.lang.String .class ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . char ( java.lang.String . int ( ) - NUMBER - int ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
