<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new GenericBeanDefinition ( ) ) ; try { org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.annotation.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.annotation.BeanCreationException . getRootCause ( ) instanceof java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.BeanFactory ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.BeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean .class ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.BeanFactory ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new RequiredAnnotationBeanPostProcessor ( ) ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.TypedExtendedResourceInjectionBean . org.springframework.beans.factory.annotation.BeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.NestedTestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean .class ) ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.NestedTestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ( ) . size ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ( ) . get ( NUMBER ) ) ; assertSame ( org.springframework.beans.factory.annotation.NestedTestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsCollectionResourceInjectionBean . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ( ) . get ( NUMBER ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean .class ) ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; assertNull ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ConstructorsResourceInjectionBean . org.springframework.beans.factory.annotation.ITestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapConstructorInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapFieldInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; TestBean org.springframework.beans.factory.annotation.TestBean = new TestBean ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.beans.factory.annotation.TestBean ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; try { org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.annotation.BeanCreationException ) { } org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setAutowireCandidate ( false ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.annotation.TestBean = ( TestBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . keySet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) . values ( ) . contains ( org.springframework.beans.factory.annotation.TestBean ) ) ; assertSame ( org.springframework.beans.factory.annotation.TestBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.MapMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new QualifierAnnotationAutowireCandidateResolver ( ) ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean .class ) ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean .class ) ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new QualifierAnnotationAutowireCandidateResolver ( ) ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new QualifierAnnotationAutowireCandidateResolver ( ) ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryQualifierMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryListMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ObjectFactoryMapMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean ( ) ) ; final org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; final org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( STRING , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean ) ; assertNotNull ( STRING , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean ) ; assertEquals ( STRING , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.StringFactoryBean , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.FactoryBeanDependentBean . org.springframework.beans.factory.annotation.FactoryBean<?> ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableFieldInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.NullableMethodInjectionBean . org.springframework.beans.factory.annotation.TestBean ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . get ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . get ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . get ( ) . get ( NUMBER ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListFieldInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . get ( ) . get ( NUMBER ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.OptionalListMethodInjectionBean . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . get ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalFieldInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . get ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean .class ) ) ; org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean = ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.ProviderOfOptionalMethodInjectionBean . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) . isPresent ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new AutowiredAnnotationBeanPostProcessor ( ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.AnnotatedDefaultConstructorBean .class ) ) ; assertNotNull ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( TestBean org.springframework.beans.factory.annotation.TestBean ) { if ( this . org.springframework.beans.factory.annotation.TestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Inject @ Required public void void ( TestBean org.springframework.beans.factory.annotation.TestBean ) { super. void ( org.springframework.beans.factory.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Inject private void void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , T T ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . T = T ; }  <METHOD_END>
<METHOD_START> @ Inject protected void void ( BeanFactory org.springframework.beans.factory.annotation.BeanFactory ) { this . org.springframework.beans.factory.annotation.BeanFactory = org.springframework.beans.factory.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.BeanFactory org.springframework.beans.factory.annotation.BeanFactory ( ) { return this . org.springframework.beans.factory.annotation.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Inject public void void ( TestBean org.springframework.beans.factory.annotation.TestBean ) { super. void ( org.springframework.beans.factory.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Inject private void void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean [] org.springframework.beans.factory.annotation.NestedTestBean[] , IndexedTestBean org.springframework.beans.factory.annotation.IndexedTestBean ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . org.springframework.beans.factory.annotation.IndexedTestBean = org.springframework.beans.factory.annotation.IndexedTestBean ; this . org.springframework.beans.factory.annotation.NestedTestBean[] = org.springframework.beans.factory.annotation.NestedTestBean[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.IndexedTestBean org.springframework.beans.factory.annotation.IndexedTestBean ( ) { return this . org.springframework.beans.factory.annotation.IndexedTestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.NestedTestBean [] org.springframework.beans.factory.annotation.NestedTestBean[] ( ) { return this . org.springframework.beans.factory.annotation.NestedTestBean[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Inject public void void ( TestBean org.springframework.beans.factory.annotation.TestBean ) { super. void ( org.springframework.beans.factory.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Inject private void void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> < NestedTestBean > java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> , IndexedTestBean org.springframework.beans.factory.annotation.IndexedTestBean ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . org.springframework.beans.factory.annotation.IndexedTestBean = org.springframework.beans.factory.annotation.IndexedTestBean ; this . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> = java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> < NestedTestBean > java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ) { this . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> = java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.IndexedTestBean org.springframework.beans.factory.annotation.IndexedTestBean ( ) { return this . org.springframework.beans.factory.annotation.IndexedTestBean ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> < NestedTestBean > java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ( ) { return this . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ; }  <METHOD_END>
<METHOD_START> public void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean , ConfigurableListableBeanFactory org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . org.springframework.beans.factory.annotation.NestedTestBean = org.springframework.beans.factory.annotation.NestedTestBean ; this . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory = org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public void ( NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Inject public void void ( TestBean org.springframework.beans.factory.annotation.TestBean ) { super. void ( org.springframework.beans.factory.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ( ) { return this . org.springframework.beans.factory.annotation.NestedTestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ( ) { return this . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ Inject public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean [] org.springframework.beans.factory.annotation.NestedTestBean[] ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . org.springframework.beans.factory.annotation.NestedTestBean[] = org.springframework.beans.factory.annotation.NestedTestBean[] ; }  <METHOD_END>
<METHOD_START> public void ( NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.NestedTestBean [] org.springframework.beans.factory.annotation.NestedTestBean[] ( ) { return this . org.springframework.beans.factory.annotation.NestedTestBean[] ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> @ Inject public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> < NestedTestBean > java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ) { this . org.springframework.beans.factory.annotation.ITestBean = org.springframework.beans.factory.annotation.ITestBean ; this . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> = java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ; }  <METHOD_END>
<METHOD_START> public void ( NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.beans.factory.annotation.ITestBean , ITestBean org.springframework.beans.factory.annotation.ITestBean , NestedTestBean org.springframework.beans.factory.annotation.NestedTestBean ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.ITestBean org.springframework.beans.factory.annotation.ITestBean ( ) { return this . org.springframework.beans.factory.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> < NestedTestBean > java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ( ) { return this . java.util.List<org.springframework.beans.factory.annotation.NestedTestBean> ; }  <METHOD_END>
<METHOD_START> @ Inject public void ( java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> = java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) { return this . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) { return this . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( TestBean org.springframework.beans.factory.annotation.TestBean , java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ) { this . org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.TestBean ; this . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> = java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ( ) { return this . java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<org.springframework.beans.factory.annotation.TestBean> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( Provider < TestBean > org.springframework.beans.factory.annotation.Provider<org.springframework.beans.factory.annotation.TestBean> ) { this . org.springframework.beans.factory.annotation.Provider<org.springframework.beans.factory.annotation.TestBean> = org.springframework.beans.factory.annotation.Provider<org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<org.springframework.beans.factory.annotation.TestBean> . get ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return ( TestBean ) this . org.springframework.beans.factory.annotation.Provider<> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject @ Named ( STRING ) public void void ( Provider < ? > org.springframework.beans.factory.annotation.Provider<?> ) { this . org.springframework.beans.factory.annotation.Provider<?> = org.springframework.beans.factory.annotation.Provider<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return ( TestBean ) this . org.springframework.beans.factory.annotation.Provider<> . get ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( Provider < java.util.List<org.springframework.beans.factory.annotation.TestBean> < TestBean > > org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ) { this . org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> = org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> . get ( ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( Provider < java.util.List<org.springframework.beans.factory.annotation.TestBean> < TestBean > > org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ) { this . org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> = org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.List<org.springframework.beans.factory.annotation.TestBean>> . get ( ) . get ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( Provider < java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > > org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> ) { this . org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> = org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> . get ( ) . values ( ) . iterator ( ) . next ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( Provider < java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean> < java.lang.String , TestBean > > org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> ) { this . org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> = org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.Map<java.lang.String,org.springframework.beans.factory.annotation.TestBean>> . get ( ) . values ( ) . iterator ( ) . next ( ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.beans.factory.annotation.FactoryBean<?> < ? > org.springframework.beans.factory.annotation.FactoryBean<?> ( ) { return this . org.springframework.beans.factory.annotation.FactoryBean<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) java.lang.Exception { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<java.lang.String> < java.lang.String > java.lang.Class<java.lang.String> ( ) { return java.lang.String .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( @ org.springframework.beans.factory.annotation.InjectAnnotationBeanPostProcessorTests.Nullable TestBean org.springframework.beans.factory.annotation.TestBean ) { this . org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( ) { return this . org.springframework.beans.factory.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) { return this . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ) { this . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> = java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) { return this . java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> < java.util.List<org.springframework.beans.factory.annotation.TestBean> < TestBean > > java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) { return this . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> < java.util.List<org.springframework.beans.factory.annotation.TestBean> < TestBean > > java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ) { this . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> = java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> < java.util.List<org.springframework.beans.factory.annotation.TestBean> < TestBean > > java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ( ) { return this . java.util.Optional<java.util.List<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.Optional<org.springframework.beans.factory.annotation.TestBean>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void void ( Provider < java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > > org.springframework.beans.factory.annotation.Provider<java.util.Optional<org.springframework.beans.factory.annotation.TestBean>> ) { this . org.springframework.beans.factory.annotation.Provider<java.util.Optional<org.springframework.beans.factory.annotation.TestBean>> = org.springframework.beans.factory.annotation.Provider<java.util.Optional<org.springframework.beans.factory.annotation.TestBean>> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.beans.factory.annotation.TestBean> < TestBean > java.util.Optional<org.springframework.beans.factory.annotation.TestBean> ( ) { return this . org.springframework.beans.factory.annotation.Provider<java.util.Optional<org.springframework.beans.factory.annotation.TestBean>> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ Inject public void ( ) {		}  <METHOD_END>
