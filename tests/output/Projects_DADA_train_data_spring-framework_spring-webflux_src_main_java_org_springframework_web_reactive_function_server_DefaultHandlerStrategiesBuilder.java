<METHOD_START> public void void ( ) { ServerCodecConfigurer org.springframework.web.reactive.function.server.ServerCodecConfigurer = new ServerCodecConfigurer ( ) ; org.springframework.web.reactive.function.server.ServerCodecConfigurer . getReaders ( ) . forEach ( this :: HandlerStrategies.Builder ) ; org.springframework.web.reactive.function.server.ServerCodecConfigurer . getWriters ( ) . forEach ( this :: HandlerStrategies.Builder ) ; HandlerStrategies.Builder ( java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.web.reactive.function.server.ApplicationContext ) { org.springframework.web.reactive.function.server.ApplicationContext . getBeansOfType ( HttpMessageReader .class ) . values ( ) . forEach ( this :: HandlerStrategies.Builder ) ; org.springframework.web.reactive.function.server.ApplicationContext . getBeansOfType ( HttpMessageWriter .class ) . values ( ) . forEach ( this :: HandlerStrategies.Builder ) ; org.springframework.web.reactive.function.server.ApplicationContext . getBeansOfType ( ViewResolver .class ) . values ( ) . forEach ( this :: HandlerStrategies.Builder ) ; HandlerStrategies.Builder ( java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public HandlerStrategies . HandlerStrategies.Builder HandlerStrategies.Builder ( HttpMessageReader < ? > org.springframework.web.reactive.function.server.HttpMessageReader<?> ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpMessageReader<> , STRING ) ; this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> . add ( org.springframework.web.reactive.function.server.HttpMessageReader<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public HandlerStrategies . HandlerStrategies.Builder HandlerStrategies.Builder ( HttpMessageWriter < ? > org.springframework.web.reactive.function.server.HttpMessageWriter<?> ) { Assert . notNull ( org.springframework.web.reactive.function.server.HttpMessageWriter<> , STRING ) ; this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> . add ( org.springframework.web.reactive.function.server.HttpMessageWriter<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public HandlerStrategies . HandlerStrategies.Builder HandlerStrategies.Builder ( ViewResolver org.springframework.web.reactive.function.server.ViewResolver ) { Assert . notNull ( org.springframework.web.reactive.function.server.ViewResolver , STRING ) ; this . java.util.List<org.springframework.web.reactive.function.server.ViewResolver> . add ( org.springframework.web.reactive.function.server.ViewResolver ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public HandlerStrategies . HandlerStrategies.Builder HandlerStrategies.Builder ( java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ) { Assert . notNull ( java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> , STRING ) ; this . java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> = java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ( ) { return new org.springframework.web.reactive.function.server.DefaultHandlerStrategiesBuilder.DefaultHandlerStrategies ( this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> , this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> , this . java.util.List<org.springframework.web.reactive.function.server.ViewResolver> , java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> , java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> , java.util.List<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.function.server.ViewResolver> , java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ) { this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> = java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> ( java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> ) ; this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> = java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> ( java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> ) ; this . java.util.List<org.springframework.web.reactive.function.server.ViewResolver> = java.util.List<org.springframework.web.reactive.function.server.ViewResolver> ( java.util.List<org.springframework.web.reactive.function.server.ViewResolver> ) ; this . java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> = java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<? extends T> < ? extends T > java.util.List<? extends T> ) { return java.util.Collections . java.util.List<T> ( new java.util.ArrayList<> <> ( java.util.List<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( ) { return this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageReader<?>> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return this . java.util.List<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> ( ) { return this . java.util.List<org.springframework.web.reactive.function.server.ViewResolver> :: stream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ( ) { return this . java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ; }  <METHOD_END>
