<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.integration.ip.tcp.connection.ApplicationEvent ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {		}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; doAnswer ( invocation -> { if ( ! failedOnce . get ( ) ) { failedOnce . set ( true ) ; throw new IOException ( STRING ) ; } return null ; } ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , times ( NUMBER ) ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenThrow ( new java.io.IOException ( STRING ) ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenThrow ( new java.io.IOException ( STRING ) ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; doAnswer ( invocation -> null ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenThrow ( new java.io.IOException ( STRING ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenThrow ( new java.io.IOException ( STRING ) ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = mock ( AbstractClientConnectionFactory .class ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; when ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isActive ( ) ) . thenReturn ( true ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; doAnswer ( invocation -> { if ( failCount . incrementAndGet ( ) < NUMBER ) { throw new IOException ( STRING ) ; } return null ; } ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; doThrow ( new java.io.IOException ( STRING ) ) . when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( Mockito . any ( Message .class ) ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.io.IOException java.io.IOException ) { } org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; Mockito . verify ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport , times ( NUMBER ) ) . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.connection.TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ( ) { TcpConnectionSupport org.springframework.integration.ip.tcp.connection.TcpConnectionSupport = mock ( TcpConnectionSupport .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnectionSupport . isOpen ( ) ) . thenReturn ( true ) ; return org.springframework.integration.ip.tcp.connection.TcpConnectionSupport ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSingleUse ( true ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = new TcpNioServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . getPort ( ) ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setSingleUse ( true ) ; void ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch1 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch2 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setBeanName ( STRING ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setBeanName ( STRING ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; assertSame ( ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) , ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; assertNotSame ( ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) , ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; TestingUtilities . waitStopListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; TestingUtilities . waitUntilFactoryHasThisNumberOfConnections ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; SimplePool < ? > org.springframework.integration.ip.tcp.connection.SimplePool<?> = TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory , STRING , SimplePool .class ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.SimplePool<> . getIdleCount ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { final TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . afterPropertiesSet ( ) ; DirectChannel org.springframework.integration.ip.tcp.connection.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.ip.tcp.connection.DirectChannel . setBeanName ( STRING ) ; TcpInboundGateway org.springframework.integration.ip.tcp.connection.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.connection.DirectChannel ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.DirectChannel . subscribe ( new BridgeHandler ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . afterPropertiesSet ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . setSingleUse ( true ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . afterPropertiesSet ( ) ; TcpOutboundGateway org.springframework.integration.ip.tcp.connection.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory ) ; QueueChannel org.springframework.integration.ip.tcp.connection.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.connection.QueueChannel . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setReplyChannel ( org.springframework.integration.ip.tcp.connection.QueueChannel ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . start ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < byte [] > org.springframework.integration.ip.tcp.connection.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<byte[]> ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.integration.ip.tcp.connection.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.ip.tcp.connection.Message<byte[]> = ( Message < byte [] > ) org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<byte[]> ) ; assertEquals ( STRING , new java.lang.String ( org.springframework.integration.ip.tcp.connection.Message<byte[]> . getPayload ( ) ) ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch1 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; TcpNetServerConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . setBeanName ( STRING ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . registerListener ( message -> { latch2 . countDown ( ) ; return false ; } ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory , NUMBER ) ; int int = org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . getPort ( ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory = new TcpNetClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . registerListener ( message -> false ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setBeanName ( STRING ) ; CachingClientConnectionFactory org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory = new CachingClientConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory . setBeanName ( STRING ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.CachingClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . start ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; GenericMessage < java.lang.String > org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; assertSame ( ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) , ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . getConnection ( ) ; assertNotSame ( ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) , ( TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.TcpConnection , STRING , TcpConnectionInterceptorSupport .class ) ) . getTheConnection ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( org.springframework.integration.ip.tcp.connection.GenericMessage<java.lang.String> ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . close ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpNetServerConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ) throws java.lang.Exception { int int = NUMBER ; int int = NUMBER ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setTaskExecutor ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.Executor ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setTaskExecutor ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.Executor ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> = new java.util.ArrayList<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> < AbstractClientConnectionFactory > ( ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> . add ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; FailoverClientConnectionFactory org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory = new FailoverClientConnectionFactory ( java.util.List<org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory> ) ; boolean boolean = org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . isSingleUse ( ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . setSingleUse ( boolean ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory . afterPropertiesSet ( ) ; TcpOutboundGateway org.springframework.integration.ip.tcp.connection.TcpOutboundGateway = new TcpOutboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . start ( ) ; QueueChannel org.springframework.integration.ip.tcp.connection.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setReplyChannel ( org.springframework.integration.ip.tcp.connection.QueueChannel ) ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . setRemoteTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; java.net.Socket java.net.Socket = null ; if ( ! boolean ) { java.net.Socket = java.net.Socket ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; int = java.net.Socket . int ( ) ; } assertTrue ( boolean | org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) . boolean ( java.lang.Integer . java.lang.String ( int ) ) ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . stop ( ) ; TestingUtilities . waitStopListening ( org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , NUMBER ) ; TestingUtilities . waitUntilFactoryHasThisNumberOfConnections ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory , NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . handleMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; if ( ! boolean ) { java.net.Socket = java.net.Socket ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) ; int = java.net.Socket . int ( ) ; } assertTrue ( boolean | org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) . boolean ( java.lang.Integer . java.lang.String ( int ) ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . org.springframework.integration.ip.tcp.connection.TcpInboundGateway . stop ( ) ; org.springframework.integration.ip.tcp.connection.TcpOutboundGateway . stop ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , AbstractServerConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) throws java.lang.Exception { java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setTaskExecutor ( java.util.concurrent.Executor ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setTaskExecutor ( java.util.concurrent.Executor ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setBeanName ( STRING ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory . setApplicationEventPublisher ( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) ; TcpInboundGateway org.springframework.integration.ip.tcp.connection.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; SubscribableChannel org.springframework.integration.ip.tcp.connection.SubscribableChannel = new DirectChannel ( ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > java.util.concurrent.atomic.AtomicReference<java.lang.String> = new java.util.concurrent.atomic.AtomicReference<java.lang.String> < java.lang.String > ( ) ; org.springframework.integration.ip.tcp.connection.SubscribableChannel . subscribe ( message -> { connectionId . set ( ( String ) message . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; ( ( MessageChannel ) message . getHeaders ( ) . getReplyChannel ( ) ) . send ( message ) ; } ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.connection.SubscribableChannel ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . start ( ) ; TcpInboundGateway org.springframework.integration.ip.tcp.connection.TcpInboundGateway = new TcpInboundGateway ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setConnectionFactory ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setRequestChannel ( org.springframework.integration.ip.tcp.connection.SubscribableChannel ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . afterPropertiesSet ( ) ; org.springframework.integration.ip.tcp.connection.TcpInboundGateway . start ( ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; TestingUtilities . waitListening ( org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory , null ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder = new org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ( ) ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.Executor = java.util.concurrent.Executor ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . java.util.concurrent.atomic.AtomicReference<java.lang.String> = java.util.concurrent.atomic.AtomicReference<java.lang.String> ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractServerConnectionFactory ; org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder . org.springframework.integration.ip.tcp.connection.TcpInboundGateway = org.springframework.integration.ip.tcp.connection.TcpInboundGateway ; return org.springframework.integration.ip.tcp.connection.FailoverClientConnectionFactoryTests.Holder ; }  <METHOD_END>
<METHOD_START> private java.net.Socket java.net.Socket ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory ) throws java.lang.Exception { if ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory instanceof TcpNetClientConnectionFactory ) { return TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) , STRING , java.net.Socket .class ) ; } else { return TestUtils . getPropertyValue ( org.springframework.integration.ip.tcp.connection.AbstractClientConnectionFactory . getConnection ( ) , STRING , java.nio.channels.SocketChannel .class ) . socket ( ) ; } }  <METHOD_END>
