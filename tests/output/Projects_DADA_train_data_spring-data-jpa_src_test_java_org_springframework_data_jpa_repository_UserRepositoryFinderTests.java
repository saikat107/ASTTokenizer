<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.Role = org.springframework.data.jpa.repository.RoleRepository . save ( new Role ( STRING ) ) ; org.springframework.data.jpa.repository.Role = org.springframework.data.jpa.repository.RoleRepository . save ( new Role ( STRING ) ) ; org.springframework.data.jpa.repository.Role = org.springframework.data.jpa.repository.RoleRepository . save ( new Role ( STRING ) ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( new User ( STRING , STRING , STRING , org.springframework.data.jpa.repository.Role ) ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( new User ( STRING , STRING , STRING , org.springframework.data.jpa.repository.Role , org.springframework.data.jpa.repository.Role ) ) ; org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . save ( new User ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.jpa.repository.UserRepository . deleteAll ( ) ; org.springframework.data.jpa.repository.RoleRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findByEmailAddressAndLastname ( STRING , STRING ) ; assertEquals ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { User org.springframework.data.jpa.repository.User = org.springframework.data.jpa.repository.UserRepository . findByEmailAddress ( STRING ) ; assertEquals ( null , org.springframework.data.jpa.repository.User ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByEmailAddressAndLastnameOrFirstname ( STRING , STRING , STRING ) ; assertNotNull ( java.util.List<org.springframework.data.jpa.repository.User> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.data.jpa.repository.User> . size ( ) ) ; assertTrue ( java.util.List<org.springframework.data.jpa.repository.User> . contains ( org.springframework.data.jpa.repository.User ) ) ; assertTrue ( java.util.List<org.springframework.data.jpa.repository.User> . contains ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastname ( PageRequest . of ( NUMBER , NUMBER ) , STRING ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstname ( STRING , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameIn ( PageRequest . of ( NUMBER , NUMBER ) , STRING , STRING ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getNumberOfElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalPages ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByFirstnameNotIn ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameIgnoringCase ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameIgnoringCaseLike ( STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameAndFirstnameAllIgnoringCase ( STRING , STRING ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . get ( NUMBER ) , is ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameIgnoringCase ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( ASC , STRING ) ) , STRING ) ; Page < User > org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByLastnameIgnoringCase ( PageRequest . of ( NUMBER , NUMBER , Sort . by ( DESC , STRING ) ) , STRING ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getTotalElements ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) , is ( not ( equalTo ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) ) ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) , is ( equalTo ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) ) ) ) ; assertThat ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) , is ( equalTo ( org.springframework.data.jpa.repository.Page<org.springframework.data.jpa.repository.User> . getContent ( ) . get ( NUMBER ) . getFirstname ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Slice < User > org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findSliceByLastname ( STRING , PageRequest . of ( NUMBER , NUMBER , ASC , STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . getContent ( ) , hasItem ( org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.Slice<org.springframework.data.jpa.repository.User> . hasNext ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.UserRepository . findByLastnameNotContaining ( STRING ) , containsInAnyOrder ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.UserRepository . findByRolesContaining ( org.springframework.data.jpa.repository.Role ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; assertThat ( org.springframework.data.jpa.repository.UserRepository . findByRolesContaining ( org.springframework.data.jpa.repository.Role ) , contains ( org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.UserRepository . findByRolesNotContaining ( org.springframework.data.jpa.repository.Role ) , hasItems ( org.springframework.data.jpa.repository.User , org.springframework.data.jpa.repository.User ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.UserRepository . findRolesAndFirstnameBy ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) @ Transactional ( propagation = Propagation . NOT_SUPPORTED ) public void void ( ) { org.springframework.data.jpa.repository.UserRepository . findAllByCustomQueryAndStream ( ) ; }  <METHOD_END>
