<METHOD_START> @ Test @ Transactional public void void ( ) { assertNotNull ( STRING , this . org.springframework.data.neo4j.template.Session ) ; Actor org.springframework.data.neo4j.template.Actor = new Actor ( ) ; org.springframework.data.neo4j.template.Actor . setName ( STRING ) ; assertFalse ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPreSaveEvent ( ) ) ; assertFalse ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPostSaveEvent ( ) ) ; this . org.springframework.data.neo4j.template.Session . save ( org.springframework.data.neo4j.template.Actor ) ; assertTrue ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPreSaveEvent ( ) ) ; assertSame ( org.springframework.data.neo4j.template.Actor , this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . getPreSaveEvent ( ) . getSource ( ) . getObject ( ) ) ; assertTrue ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPostSaveEvent ( ) ) ; assertSame ( org.springframework.data.neo4j.template.Actor , this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . getPostSaveEvent ( ) . getSource ( ) . getObject ( ) ) ; assertFalse ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPreDeleteEvent ( ) ) ; assertFalse ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPostDeleteEvent ( ) ) ; this . org.springframework.data.neo4j.template.Session . delete ( org.springframework.data.neo4j.template.Actor ) ; assertTrue ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPreDeleteEvent ( ) ) ; assertSame ( org.springframework.data.neo4j.template.Actor , this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . getPreDeleteEvent ( ) . getSource ( ) . getObject ( ) ) ; assertTrue ( this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . receivedPostDeleteEvent ( ) ) ; assertSame ( org.springframework.data.neo4j.template.Actor , this . org.springframework.data.neo4j.template.Neo4jModificationEventListener . getPostDeleteEvent ( ) . getSource ( ) . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.template.PlatformTransactionManager org.springframework.data.neo4j.template.PlatformTransactionManager ( ) { return new Neo4jTransactionManager ( org.springframework.data.neo4j.template.SessionFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.template.SessionFactory org.springframework.data.neo4j.template.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) { @ java.lang.Override public org.springframework.data.neo4j.template.Session org.springframework.data.neo4j.template.Session ( ) { Session org.springframework.data.neo4j.template.Session = super. openSession ( ) ; org.springframework.data.neo4j.template.Session . register ( org.springframework.data.neo4j.template.EventPublisher ( ) ) ; return org.springframework.data.neo4j.template.Session ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.neo4j.template.Session org.springframework.data.neo4j.template.Session ( ) { Session org.springframework.data.neo4j.template.Session = super. openSession ( ) ; org.springframework.data.neo4j.template.Session . register ( org.springframework.data.neo4j.template.EventPublisher ( ) ) ; return org.springframework.data.neo4j.template.Session ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.template.EventPublisher org.springframework.data.neo4j.template.EventPublisher ( ) { return new EventPublisher ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.template.Neo4jModificationEventListener org.springframework.data.neo4j.template.Neo4jModificationEventListener ( ) { return new Neo4jModificationEventListener ( ) ; }  <METHOD_END>
