<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Set<java.lang.reflect.Type> < java.lang.reflect.Type > java.util.Set<java.lang.reflect.Type> = java.util.Collections . java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) EntityManager .class ) ; org.springframework.data.jpa.repository.cdi.Bean = mock ( Bean .class ) ; when ( org.springframework.data.jpa.repository.cdi.Bean . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ) ; org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> = mock ( Bean .class ) ; when ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ) ; when ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> . isAlternative ( ) ) . thenReturn ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaRepositoryExtension org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension = new JpaRepositoryExtension ( ) ; org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension . processBean ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( org.springframework.data.jpa.repository.cdi.Bean ) ) ; void ( org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension , org.springframework.data.jpa.repository.cdi.Bean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaRepositoryExtension org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension = new JpaRepositoryExtension ( ) ; org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension . processBean ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( org.springframework.data.jpa.repository.cdi.Bean ) ) ; org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension . processBean ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ) ; void ( org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension , org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JpaRepositoryExtension org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension = new JpaRepositoryExtension ( ) ; org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension . processBean ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ) ; org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension . processBean ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( org.springframework.data.jpa.repository.cdi.Bean ) ) ; void ( org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension , org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( JpaRepositoryExtension org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension , Bean < EntityManager > org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) { java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> < java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > , Bean < EntityManager > > java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> = ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> < java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > , Bean < EntityManager > > ) ReflectionTestUtils . getField ( org.springframework.data.jpa.repository.cdi.JpaRepositoryExtension , STRING ) ; assertThat ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> . size ( ) , is ( NUMBER ) ) ; assertThat ( java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager>> . values ( ) , hasItem ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> < EntityManager > org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ( Bean < EntityManager > org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) { ProcessBean < EntityManager > org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> = mock ( ProcessBean .class ) ; when ( org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> . getBean ( ) ) . thenReturn ( org.springframework.data.jpa.repository.cdi.Bean<org.springframework.data.jpa.repository.cdi.EntityManager> ) ; return org.springframework.data.jpa.repository.cdi.ProcessBean<org.springframework.data.jpa.repository.cdi.EntityManager> ; }  <METHOD_END>
