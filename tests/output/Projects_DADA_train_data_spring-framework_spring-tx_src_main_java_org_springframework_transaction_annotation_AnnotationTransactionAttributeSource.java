<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> = new java.util.LinkedHashSet <> ( NUMBER ) ; this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> . add ( new SpringTransactionAnnotationParser ( ) ) ; if ( boolean ) { this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> . add ( new JtaTransactionAnnotationParser ( ) ) ; } if ( boolean ) { this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> . add ( new Ejb3TransactionAnnotationParser ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( TransactionAnnotationParser org.springframework.transaction.annotation.TransactionAnnotationParser ) { this . boolean = true ; Assert . notNull ( org.springframework.transaction.annotation.TransactionAnnotationParser , STRING ) ; this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> = java.util.Collections . java.util.Set ( org.springframework.transaction.annotation.TransactionAnnotationParser ) ; }  <METHOD_END>
<METHOD_START> public void ( TransactionAnnotationParser ... org.springframework.transaction.annotation.TransactionAnnotationParser[] ) { this . boolean = true ; Assert . notEmpty ( org.springframework.transaction.annotation.TransactionAnnotationParser[] , STRING ) ; java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> < TransactionAnnotationParser > java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> = new java.util.LinkedHashSet <> ( annotationParsers . length ) ; java.util.Collections . boolean ( java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> , org.springframework.transaction.annotation.TransactionAnnotationParser[] ) ; this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> = java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> < TransactionAnnotationParser > java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> ) { this . boolean = true ; Assert . notEmpty ( java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> , STRING ) ; this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> = java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method ) { return org.springframework.transaction.annotation.TransactionAttribute ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.transaction.annotation.TransactionAttribute ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.annotation.TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute ( java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement ) { if ( java.lang.reflect.AnnotatedElement . java.lang.annotation.Annotation[] ( ) . int > NUMBER ) { for ( TransactionAnnotationParser org.springframework.transaction.annotation.TransactionAnnotationParser : this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> ) { TransactionAttribute org.springframework.transaction.annotation.TransactionAttribute = org.springframework.transaction.annotation.TransactionAnnotationParser . parseTransactionAnnotation ( java.lang.reflect.AnnotatedElement ) ; if ( org.springframework.transaction.annotation.TransactionAttribute != null ) { return org.springframework.transaction.annotation.TransactionAttribute ; } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.transaction.annotation.AnnotationTransactionAttributeSource ) ) { return false ; } org.springframework.transaction.annotation.AnnotationTransactionAttributeSource org.springframework.transaction.annotation.AnnotationTransactionAttributeSource = ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSource ) java.lang.Object ; return ( this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> . equals ( org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> ) && this . boolean == org.springframework.transaction.annotation.AnnotationTransactionAttributeSource . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.Set<org.springframework.transaction.annotation.TransactionAnnotationParser> . hashCode ( ) ; }  <METHOD_END>
