<METHOD_START> protected void ( java.lang.String java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this . java.lang.String = java.lang.String ; this . java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ; this . java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ; this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher = org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( this . java.lang.String , this . java.util.Collection<java.lang.String> ) ; this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher = org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( this . java.lang.String , this . java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher = org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher = org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( java.lang.String java.lang.String , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { return new org.springframework.integration.mapping.AbstractHeaderMapper.ContentBasedHeaderMatcher ( true , java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> < org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher > java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> = new java.util.ArrayList<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> < org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher > ( ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> . boolean ( new org.springframework.integration.mapping.AbstractHeaderMapper.ContentBasedHeaderMatcher ( true , this . java.util.Collection<java.lang.String> ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> . boolean ( new org.springframework.integration.mapping.AbstractHeaderMapper.ContentBasedHeaderMatcher ( true , this . java.util.Collection<java.lang.String> ) ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> . boolean ( new org.springframework.integration.mapping.AbstractHeaderMapper.PrefixBasedMatcher ( false , this . java.lang.String ) ) ; } else { java.lang.String java.lang.String = java.lang.String ; boolean boolean = false ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; boolean = true ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } if ( boolean ) { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> . void ( NUMBER , new org.springframework.integration.mapping.AbstractHeaderMapper.SinglePatternBasedHeaderMatcher ( java.lang.String , boolean ) ) ; } else { java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> . boolean ( new org.springframework.integration.mapping.AbstractHeaderMapper.SinglePatternBasedHeaderMatcher ( java.lang.String , boolean ) ) ; } } } return new org.springframework.integration.mapping.AbstractHeaderMapper.CompositeHeaderMatcher ( java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.mapping.MessageHeaders , T T ) { this . void ( org.springframework.integration.mapping.MessageHeaders , T , this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.mapping.MessageHeaders , T T ) { this . void ( org.springframework.integration.mapping.MessageHeaders , T , this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T ) { return this . java.util.Map<java.lang.String,java.lang.Object> ( T , this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T ) { return this . java.util.Map<java.lang.String,java.lang.Object> ( T , this . org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; }  <METHOD_END>
<METHOD_START> private void void ( MessageHeaders org.springframework.integration.mapping.MessageHeaders , T T , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) { try { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.mapping.MessageHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; if ( this . boolean ( java.lang.String , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } this . void ( java.util.Map<java.lang.String,java.lang.Object> , T ) ; this . void ( java.util.Map<java.lang.String,java.lang.Object> , T ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.mapping.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.mapping.Log . warn ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , T T ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object != null && ! boolean ( java.lang.String , java.lang.Object ) ) { try { if ( ! java.lang.String . boolean ( this . java.lang.String ) ) { java.lang.String java.lang.String = this . java.lang.String ( java.lang.String , true ) ; this . void ( java.lang.String , java.lang.Object , T ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.mapping.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.mapping.Log . warn ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof MessageChannel ) { if ( this . org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.mapping.Log . debug ( STRING + java.lang.String ) ; } return true ; } return false ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( T ) ; this . void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( T ) ; this . void ( java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private < V > void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) { if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object> ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { try { java.lang.String java.lang.String = this . java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , false ) ; if ( this . boolean ( java.lang.String , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( this . org.springframework.integration.mapping.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.mapping.Log . warn ( STRING + java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ) { return ! ( ! StringUtils . hasText ( java.lang.String ) || java.util.Collection<java.lang.String> ( ) . boolean ( java.lang.String ) ) && org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < V > V V ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.lang.Class<V> < V > java.lang.Class<V> ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { return null ; } if ( ! java.lang.Class<V> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { if ( this . org.springframework.integration.mapping.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.mapping.Log . warn ( STRING + java.lang.String + STRING + java.lang.Class<V> + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } return null ; } else { return ( V ) java.lang.Object ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , boolean boolean ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T );  <METHOD_END>
<METHOD_START> protected abstract java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( T T );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , T T );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , T T );  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> public void ( boolean boolean , java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this . boolean = boolean ; Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; this . java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { boolean boolean = ( this . boolean == boolean ( java.lang.String ) ) ; if ( boolean && org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; if ( ! this . boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; org.springframework.integration.mapping.Log . debug ( java.text.MessageFormat . java.lang.String ( java.lang.StringBuilder . java.lang.String ( ) , java.lang.String , this . java.util.Collection<java.lang.String> ) ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : this . java.util.Collection<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; Assert . notEmpty ( java.util.Collection<java.lang.String> , STRING ) ; for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { this . java.util.Collection<java.lang.String> . boolean ( java.lang.String . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; for ( java.lang.String java.lang.String : this . java.util.Collection<java.lang.String> ) { if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { if ( org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { org.springframework.integration.mapping.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String . java.lang.String ( ) ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; if ( PatternMatchUtils . simpleMatch ( this . java.lang.String , java.lang.String ) ) { if ( org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { org.springframework.integration.mapping.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , this . java.lang.String ) ) ; } return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void ( boolean boolean , java.lang.String java.lang.String ) { this . boolean = boolean ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { boolean boolean = ( this . boolean == java.lang.String . boolean ( this . java.lang.String ) ) ; if ( boolean && org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; if ( ! this . boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; org.springframework.integration.mapping.Log . debug ( java.text.MessageFormat . java.lang.String ( java.lang.StringBuilder . java.lang.String ( ) , java.lang.String , this . java.lang.String ) ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> void ( java.util.Collection<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> < org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher > java.util.Collection<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> ) { this . java.util.Collection<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> = java.util.Collection<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher ... org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher[] ) { this( java.util.Arrays . java.util.List<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> ( org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher[] ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { for ( org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher : this . java.util.Collection<org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher> ) { if ( org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher . boolean ( java.lang.String ) ) { if ( org.springframework.integration.mapping.AbstractHeaderMapper.HeaderMatcher . boolean ( ) ) { break; } return true ; } } if ( org.springframework.integration.mapping.Log . isDebugEnabled ( ) ) { org.springframework.integration.mapping.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
