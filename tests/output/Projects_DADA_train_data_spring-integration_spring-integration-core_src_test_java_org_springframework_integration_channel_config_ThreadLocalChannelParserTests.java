<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executor . void ( ( ) { org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( null , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ; final java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executor . void ( ( ) { java.util.List<java.lang.Object> . boolean ( org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; java.util.concurrent.Executor . void ( ( ) { java.util.List<java.lang.Object> . boolean ( org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; assertNull ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertNull ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.channel.config.PollableChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = org.springframework.integration.channel.config.TestChannelInterceptor . getSendCount ( ) ; org.springframework.integration.channel.config.PollableChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( int + NUMBER , org.springframework.integration.channel.config.TestChannelInterceptor . getSendCount ( ) ) ; }  <METHOD_END>
