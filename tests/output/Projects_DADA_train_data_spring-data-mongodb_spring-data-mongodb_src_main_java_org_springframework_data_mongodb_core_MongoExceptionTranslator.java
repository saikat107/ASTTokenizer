<METHOD_START> public org.springframework.data.mongodb.core.DataAccessException org.springframework.data.mongodb.core.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof BsonInvalidOperationException ) { throw new InvalidDataAccessApiUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } java.lang.String java.lang.String = ClassUtils . getShortName ( ClassUtils . getUserClass ( java.lang.RuntimeException . java.lang.Class<? extends java.lang.RuntimeException> ( ) ) ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new DuplicateKeyException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new DataAccessResourceFailureException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return new InvalidDataAccessResourceUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( java.lang.RuntimeException instanceof MongoServerException ) { if ( ( ( MongoServerException ) java.lang.RuntimeException ) . getCode ( ) == NUMBER ) { return new DuplicateKeyException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof MongoBulkWriteException ) { for ( BulkWriteError org.springframework.data.mongodb.core.BulkWriteError : ( ( MongoBulkWriteException ) java.lang.RuntimeException ) . getWriteErrors ( ) ) { if ( org.springframework.data.mongodb.core.BulkWriteError . getCode ( ) == NUMBER ) { return new DuplicateKeyException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } } } } return new DataIntegrityViolationException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof BulkWriteException ) { return new BulkOperationException ( java.lang.RuntimeException . java.lang.String ( ) , ( BulkWriteException ) java.lang.RuntimeException ) ; } if ( java.lang.RuntimeException instanceof MongoException ) { int int = ( ( MongoException ) java.lang.RuntimeException ) . getCode ( ) ; if ( MongoDbErrorCodes . isDuplicateKeyCode ( int ) ) { throw new DuplicateKeyException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } else if ( MongoDbErrorCodes . isDataAccessResourceFailureCode ( int ) ) { throw new DataAccessResourceFailureException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } else if ( MongoDbErrorCodes . isInvalidDataAccessApiUsageCode ( int ) || int == NUMBER || int == NUMBER || int == NUMBER || int == NUMBER || int == NUMBER ) { throw new InvalidDataAccessApiUsageException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } else if ( MongoDbErrorCodes . isPermissionDeniedCode ( int ) ) { throw new PermissionDeniedDataAccessException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } return new UncategorizedMongoDbException ( java.lang.RuntimeException . java.lang.String ( ) , java.lang.RuntimeException ) ; } return null ; }  <METHOD_END>
