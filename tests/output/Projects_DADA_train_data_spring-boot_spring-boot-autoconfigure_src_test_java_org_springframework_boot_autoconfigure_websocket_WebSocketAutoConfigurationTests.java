<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfigurationTests.TomcatConfiguration .class , WebSocketAutoConfiguration . WebSocketAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfigurationTests.JettyConfiguration .class , WebSocketAutoConfiguration . WebSocketAutoConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.autoconfigure.websocket.AnnotationConfigServletWebServerApplicationContext . getServletContext ( ) . getAttribute ( STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( ServerContainer .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.websocket.WebServerFactoryCustomizerBeanPostProcessor org.springframework.boot.autoconfigure.websocket.WebServerFactoryCustomizerBeanPostProcessor ( ) { return new WebServerFactoryCustomizerBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.websocket.ServletWebServerFactory org.springframework.boot.autoconfigure.websocket.ServletWebServerFactory ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.websocket.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; org.springframework.boot.autoconfigure.websocket.TomcatServletWebServerFactory . setPort ( NUMBER ) ; return org.springframework.boot.autoconfigure.websocket.TomcatServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.websocket.ServletWebServerFactory org.springframework.boot.autoconfigure.websocket.ServletWebServerFactory ( ) { JettyServletWebServerFactory org.springframework.boot.autoconfigure.websocket.JettyServletWebServerFactory = new JettyServletWebServerFactory ( ) ; org.springframework.boot.autoconfigure.websocket.JettyServletWebServerFactory . setPort ( NUMBER ) ; return org.springframework.boot.autoconfigure.websocket.JettyServletWebServerFactory ; }  <METHOD_END>
