<METHOD_START> public void ( TemporaryFolder org.springframework.context.index.test.TemporaryFolder ) throws java.io.IOException { this( javax.tools.ToolProvider . javax.tools.JavaCompiler ( ) , org.springframework.context.index.test.TemporaryFolder ); }  <METHOD_END>
<METHOD_START> public void ( javax.tools.JavaCompiler javax.tools.JavaCompiler , TemporaryFolder org.springframework.context.index.test.TemporaryFolder ) throws java.io.IOException { this . javax.tools.JavaCompiler = javax.tools.JavaCompiler ; this . javax.tools.StandardJavaFileManager = javax.tools.JavaCompiler . javax.tools.StandardJavaFileManager ( null , null , null ) ; this . java.io.File = org.springframework.context.index.test.TemporaryFolder . newFolder ( ) ; java.lang.Iterable<? extends java.io.File> < ? extends java.io.File > java.lang.Iterable<? extends java.io.File> = java.util.Collections . java.util.List<java.io.File> ( this . java.io.File ) ; this . javax.tools.StandardJavaFileManager . void ( javax.tools.StandardLocation . javax.tools.StandardLocation , java.lang.Iterable<> ) ; this . javax.tools.StandardJavaFileManager . void ( javax.tools.StandardLocation . javax.tools.StandardLocation , java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.index.test.TestCompiler.TestCompilationTask org.springframework.context.index.test.TestCompiler.TestCompilationTask ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.Class<?>[] ) . java.util.stream.Stream<java.lang.String> ( java.lang.Class :: java.lang.String ) . java.util.List<java.lang.String> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.String,?,java.util.List<java.lang.String>> ( ) ) ; return org.springframework.context.index.test.TestCompiler.TestCompilationTask ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.index.test.TestCompiler.TestCompilationTask org.springframework.context.index.test.TestCompiler.TestCompilationTask ( java.lang.String ... java.lang.String[] ) { java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> = java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.lang.String[] ) ; return org.springframework.context.index.test.TestCompiler.TestCompilationTask ( java.lang.Iterable<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.index.test.TestCompiler.TestCompilationTask org.springframework.context.index.test.TestCompiler.TestCompilationTask ( java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> ) { return new org.springframework.context.index.test.TestCompiler.TestCompilationTask ( this . javax.tools.JavaCompiler . javax.tools.JavaCompiler.CompilationTask ( null , this . javax.tools.StandardJavaFileManager , null , null , null , java.lang.Iterable<> ) ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> private java.lang.Iterable<? extends javax.tools.JavaFileObject> < ? extends javax.tools.JavaFileObject > java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.lang.String ... java.lang.String[] ) { java.io.File [] java.io.File[] = new java.io.File [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.io.File[] [ int ] = java.io.File ( java.lang.String[] [ int ] ) ; } return this . javax.tools.StandardJavaFileManager . java.lang.Iterable<? extends javax.tools.JavaFileObject> ( java.io.File[] ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) { return new java.io.File ( java.io.File ( ) , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING , STRING ) + STRING ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) { return java.io.File ; }  <METHOD_END>
<METHOD_START> public void ( javax.tools.JavaCompiler . javax.tools.JavaCompiler.CompilationTask javax.tools.JavaCompiler.CompilationTask ) { this . javax.tools.JavaCompiler.CompilationTask = javax.tools.JavaCompiler.CompilationTask ; }  <METHOD_END>
<METHOD_START> public void void ( javax.annotation.processing.Processor ... javax.annotation.processing.Processor[] ) { this . javax.tools.JavaCompiler.CompilationTask . void ( java.util.Arrays . java.util.List<javax.annotation.processing.Processor> ( javax.annotation.processing.Processor[] ) ) ; if ( ! this . javax.tools.JavaCompiler.CompilationTask . java.lang.Boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
