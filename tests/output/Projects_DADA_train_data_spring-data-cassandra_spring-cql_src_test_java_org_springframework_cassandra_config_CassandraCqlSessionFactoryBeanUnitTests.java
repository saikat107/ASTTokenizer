<METHOD_START> @ Before public void void ( ) { org.springframework.cassandra.config.CassandraCqlSessionFactoryBean = spy ( new CassandraCqlSessionFactoryBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . isSingleton ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean .< Session > getObjectType ( ) ) . isEqualTo ( Session .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; CqlOperations org.springframework.cassandra.config.CqlOperations = mock ( CqlOperations .class ) ; doReturn ( org.springframework.cassandra.config.Session ) . when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean ) . connect ( eq ( STRING ) ) ; doReturn ( org.springframework.cassandra.config.CqlOperations ) . when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean ) . newCqlOperations ( eq ( org.springframework.cassandra.config.Session ) ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setKeyspaceName ( STRING ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setStartupScripts ( java.util.List<java.lang.String> ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getKeyspaceName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ) . isEqualTo ( java.util.List<java.lang.String> ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObjectType ( ) ) . isEqualTo ( org.springframework.cassandra.config.Session . getClass ( ) ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . isEqualTo ( org.springframework.cassandra.config.Session ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getSession ( ) ) . isEqualTo ( org.springframework.cassandra.config.Session ) ; InOrder org.springframework.cassandra.config.InOrder = inOrder ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean ) ; org.springframework.cassandra.config.InOrder . verify ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean , times ( NUMBER ) ) . connect ( eq ( STRING ) ) ; org.springframework.cassandra.config.InOrder . verify ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean , times ( NUMBER ) ) . executeScripts ( eq ( java.util.List<java.lang.String> ) ) ; org.springframework.cassandra.config.InOrder . verify ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean , times ( NUMBER ) ) . newCqlOperations ( eq ( org.springframework.cassandra.config.Session ) ) ; verify ( org.springframework.cassandra.config.CqlOperations , times ( NUMBER ) ) . execute ( eq ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; verify ( org.springframework.cassandra.config.CqlOperations , times ( NUMBER ) ) . execute ( eq ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.config.Cluster . connect ( ) ) . thenReturn ( org.springframework.cassandra.config.Session ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setCluster ( org.springframework.cassandra.config.Cluster ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . connect ( null ) ) . isEqualTo ( org.springframework.cassandra.config.Session ) ; verify ( org.springframework.cassandra.config.Cluster , times ( NUMBER ) ) . connect ( ) ; verify ( org.springframework.cassandra.config.Cluster , never ( ) ) . connect ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.config.Cluster . connect ( eq ( STRING ) ) ) . thenReturn ( org.springframework.cassandra.config.Session ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setCluster ( org.springframework.cassandra.config.Cluster ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . connect ( STRING ) ) . isEqualTo ( org.springframework.cassandra.config.Session ) ; verify ( org.springframework.cassandra.config.Cluster , never ( ) ) . connect ( ) ; verify ( org.springframework.cassandra.config.Cluster , times ( NUMBER ) ) . connect ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; CqlOperations org.springframework.cassandra.config.CqlOperations = mock ( CqlOperations .class ) ; doReturn ( org.springframework.cassandra.config.Session ) . when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean ) . getSession ( ) ; doReturn ( org.springframework.cassandra.config.CqlOperations ) . when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean ) . newCqlOperations ( eq ( org.springframework.cassandra.config.Session ) ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setShutdownScripts ( java.util.List<java.lang.String> ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . destroy ( ) ; InOrder org.springframework.cassandra.config.InOrder = inOrder ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean , org.springframework.cassandra.config.Session ) ; org.springframework.cassandra.config.InOrder . verify ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean , times ( NUMBER ) ) . executeScripts ( eq ( java.util.List<java.lang.String> ) ) ; verify ( org.springframework.cassandra.config.CqlOperations , times ( NUMBER ) ) . execute ( eq ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) ; org.springframework.cassandra.config.InOrder . verify ( org.springframework.cassandra.config.Session , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . isNull ( ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . isConnected ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . thenReturn ( org.springframework.cassandra.config.Session ) ; when ( org.springframework.cassandra.config.Session . isClosed ( ) ) . thenReturn ( true ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . isConnected ( ) ) . isFalse ( ) ; verify ( org.springframework.cassandra.config.Session , times ( NUMBER ) ) . isClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . thenReturn ( org.springframework.cassandra.config.Session ) ; when ( org.springframework.cassandra.config.Session . isClosed ( ) ) . thenReturn ( false ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . isConnected ( ) ) . isTrue ( ) ; verify ( org.springframework.cassandra.config.Session , times ( NUMBER ) ) . isClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setCluster ( org.springframework.cassandra.config.Cluster ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getCluster ( ) ) . isEqualTo ( org.springframework.cassandra.config.Cluster ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setCluster ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getCluster ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getKeyspaceName ( ) ) . isNull ( ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setKeyspaceName ( STRING ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getKeyspaceName ( ) ) . isEqualTo ( STRING ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setKeyspaceName ( null ) ; assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getKeyspaceName ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getObject ( ) ) . isNull ( ) ; try { org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getSession ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setStartupScripts ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isNotSameAs ( java.util.List<java.lang.String> ) . isEqualTo ( java.util.List<java.lang.String> ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setStartupScripts ( null ) ; void ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setStartupScripts ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isEqualTo ( java.util.List<java.lang.String> ) . isNotSameAs ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getStartupScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isNotEqualTo ( java.util.List<java.lang.String> ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) . isEqualTo ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; try { org.springframework.cassandra.config.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; } finally { assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getShutdownScripts ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setShutdownScripts ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getShutdownScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isEqualTo ( java.util.List<java.lang.String> ) . isNotSameAs ( java.util.List<java.lang.String> ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setShutdownScripts ( null ) ; void ( org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getShutdownScripts ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . setShutdownScripts ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getShutdownScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isEqualTo ( java.util.List<java.lang.String> ) . isNotSameAs ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> = org.springframework.cassandra.config.CassandraCqlSessionFactoryBean . getShutdownScripts ( ) ; assertThat ( java.util.List<java.lang.String> ) . isNotEqualTo ( java.util.List<java.lang.String> ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; try { org.springframework.cassandra.config.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; } finally { assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { assertThat ( java.util.Collection<> ) . isNotNull ( ) ; assertThat ( java.util.Collection<> . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
