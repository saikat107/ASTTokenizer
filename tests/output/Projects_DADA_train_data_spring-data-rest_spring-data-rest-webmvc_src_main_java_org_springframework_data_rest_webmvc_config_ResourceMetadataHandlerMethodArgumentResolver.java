<METHOD_START> public void ( Repositories org.springframework.data.rest.webmvc.config.Repositories , ResourceMappings org.springframework.data.rest.webmvc.config.ResourceMappings , BaseUri org.springframework.data.rest.webmvc.config.BaseUri ) { Assert . notNull ( org.springframework.data.rest.webmvc.config.Repositories , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.ResourceMappings , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.config.BaseUri , STRING ) ; this . org.springframework.data.rest.webmvc.config.Repositories = org.springframework.data.rest.webmvc.config.Repositories ; this . org.springframework.data.rest.webmvc.config.ResourceMappings = org.springframework.data.rest.webmvc.config.ResourceMappings ; this . org.springframework.data.rest.webmvc.config.BaseUri = org.springframework.data.rest.webmvc.config.BaseUri ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.rest.webmvc.config.MethodParameter ) { return isAssignable ( org.springframework.data.rest.webmvc.config.MethodParameter . getParameterType ( ) , RepositoryInformation .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.webmvc.config.ResourceMetadata org.springframework.data.rest.webmvc.config.ResourceMetadata ( MethodParameter org.springframework.data.rest.webmvc.config.MethodParameter , ModelAndViewContainer org.springframework.data.rest.webmvc.config.ModelAndViewContainer , NativeWebRequest org.springframework.data.rest.webmvc.config.NativeWebRequest , WebDataBinderFactory org.springframework.data.rest.webmvc.config.WebDataBinderFactory ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.data.rest.webmvc.config.BaseUri . getRepositoryLookupPath ( org.springframework.data.rest.webmvc.config.NativeWebRequest ) ; java.lang.String java.lang.String = UriUtils . findMappingVariable ( STRING , org.springframework.data.rest.webmvc.config.MethodParameter . getMethod ( ) , java.lang.String ) ; if ( ! hasText ( java.lang.String ) ) { return null ; } for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.data.rest.webmvc.config.Repositories ) { ResourceMetadata org.springframework.data.rest.webmvc.config.ResourceMetadata = org.springframework.data.rest.webmvc.config.ResourceMappings . getMetadataFor ( java.lang.Class<> ) ; if ( org.springframework.data.rest.webmvc.config.ResourceMetadata . getPath ( ) . matches ( java.lang.String ) && org.springframework.data.rest.webmvc.config.ResourceMetadata . isExported ( ) ) { return org.springframework.data.rest.webmvc.config.ResourceMetadata ; } } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
