<METHOD_START> protected void ( ObjectMapper org.springframework.http.converter.json.ObjectMapper ) { void ( org.springframework.http.converter.json.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> protected void ( ObjectMapper org.springframework.http.converter.json.ObjectMapper , MediaType org.springframework.http.converter.json.MediaType ) { super( org.springframework.http.converter.json.MediaType ); void ( org.springframework.http.converter.json.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> protected void ( ObjectMapper org.springframework.http.converter.json.ObjectMapper , MediaType ... org.springframework.http.converter.json.MediaType[] ) { super( org.springframework.http.converter.json.MediaType[] ); void ( org.springframework.http.converter.json.ObjectMapper ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ObjectMapper org.springframework.http.converter.json.ObjectMapper ) { this . org.springframework.http.converter.json.ObjectMapper = org.springframework.http.converter.json.ObjectMapper ; setDefaultCharset ( java.nio.charset.Charset ) ; DefaultPrettyPrinter org.springframework.http.converter.json.DefaultPrettyPrinter = new DefaultPrettyPrinter ( ) ; org.springframework.http.converter.json.DefaultPrettyPrinter . indentObjectsWith ( new DefaultIndenter ( STRING , STRING ) ) ; this . org.springframework.http.converter.json.PrettyPrinter = org.springframework.http.converter.json.DefaultPrettyPrinter ; }  <METHOD_END>
<METHOD_START> public void void ( ObjectMapper org.springframework.http.converter.json.ObjectMapper ) { Assert . notNull ( org.springframework.http.converter.json.ObjectMapper , STRING ) ; this . org.springframework.http.converter.json.ObjectMapper = org.springframework.http.converter.json.ObjectMapper ; void ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.converter.json.ObjectMapper org.springframework.http.converter.json.ObjectMapper ( ) { return this . org.springframework.http.converter.json.ObjectMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.lang.Boolean != null ) { this . org.springframework.http.converter.json.ObjectMapper . configure ( SerializationFeature . INDENT_OUTPUT , this . java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.json.MediaType ) { return boolean ( java.lang.Class<> , null , org.springframework.http.converter.json.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.json.MediaType ) { if ( ! boolean ( org.springframework.http.converter.json.MediaType ) ) { return false ; } JavaType org.springframework.http.converter.json.JavaType = org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type , java.lang.Class<> ) ; if ( ! logger . isWarnEnabled ( ) ) { return this . org.springframework.http.converter.json.ObjectMapper . canDeserialize ( org.springframework.http.converter.json.JavaType ) ; } java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> <> ( ) ; if ( this . org.springframework.http.converter.json.ObjectMapper . canDeserialize ( org.springframework.http.converter.json.JavaType , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> ) ) { return true ; } void ( org.springframework.http.converter.json.JavaType , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) ) ; return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.json.MediaType ) { if ( ! boolean ( org.springframework.http.converter.json.MediaType ) ) { return false ; } if ( ! logger . isWarnEnabled ( ) ) { return this . org.springframework.http.converter.json.ObjectMapper . canSerialize ( java.lang.Class<> ) ; } java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> < java.lang.Throwable > java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> = new java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> <> ( ) ; if ( this . org.springframework.http.converter.json.ObjectMapper . canSerialize ( java.lang.Class<> , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> ) ) { return true ; } void ( java.lang.Class<> , java.util.concurrent.atomic.AtomicReference<java.lang.Throwable> . java.lang.Throwable ( ) ) ; return false ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null && ! ( java.lang.Throwable instanceof JsonMappingException && java.lang.Throwable . java.lang.String ( ) . boolean ( STRING ) ) ) { java.lang.String java.lang.String = STRING + ( java.lang.reflect.Type instanceof JavaType ? STRING : STRING ) + STRING + java.lang.reflect.Type + STRING ; if ( logger . isDebugEnabled ( ) ) { logger . warn ( java.lang.String , java.lang.Throwable ) ; } else { logger . warn ( java.lang.String + STRING + java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotReadableException { JavaType org.springframework.http.converter.json.JavaType = org.springframework.http.converter.json.JavaType ( java.lang.Class<> , null ) ; return java.lang.Object ( org.springframework.http.converter.json.JavaType , org.springframework.http.converter.json.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotReadableException { JavaType org.springframework.http.converter.json.JavaType = org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type , java.lang.Class<> ) ; return java.lang.Object ( org.springframework.http.converter.json.JavaType , org.springframework.http.converter.json.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( JavaType org.springframework.http.converter.json.JavaType , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage ) { try { if ( org.springframework.http.converter.json.HttpInputMessage instanceof MappingJacksonInputMessage ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( MappingJacksonInputMessage ) org.springframework.http.converter.json.HttpInputMessage ) . getDeserializationView ( ) ; if ( java.lang.Class<> != null ) { return this . org.springframework.http.converter.json.ObjectMapper . readerWithView ( java.lang.Class<> ) . forType ( org.springframework.http.converter.json.JavaType ) . readValue ( org.springframework.http.converter.json.HttpInputMessage . getBody ( ) ) ; } } return this . org.springframework.http.converter.json.ObjectMapper . readValue ( org.springframework.http.converter.json.HttpInputMessage . getBody ( ) , org.springframework.http.converter.json.JavaType ) ; } catch ( InvalidDefinitionException org.springframework.http.converter.json.InvalidDefinitionException ) { throw new HttpMessageNotReadableException ( STRING + org.springframework.http.converter.json.JavaType , org.springframework.http.converter.json.InvalidDefinitionException , HttpStatus . INTERNAL_SERVER_ERROR ) ; } catch ( java.io.IOException java.io.IOException ) { throw new HttpMessageNotReadableException ( STRING + java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type , HttpOutputMessage org.springframework.http.converter.json.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotWritableException { MediaType org.springframework.http.converter.json.MediaType = org.springframework.http.converter.json.HttpOutputMessage . getHeaders ( ) . getContentType ( ) ; JsonEncoding org.springframework.http.converter.json.JsonEncoding = org.springframework.http.converter.json.JsonEncoding ( org.springframework.http.converter.json.MediaType ) ; JsonGenerator org.springframework.http.converter.json.JsonGenerator = this . org.springframework.http.converter.json.ObjectMapper . getFactory ( ) . createGenerator ( org.springframework.http.converter.json.HttpOutputMessage . getBody ( ) , org.springframework.http.converter.json.JsonEncoding ) ; try { void ( org.springframework.http.converter.json.JsonGenerator , java.lang.Object ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; FilterProvider org.springframework.http.converter.json.FilterProvider = null ; java.lang.Object java.lang.Object = java.lang.Object ; JavaType org.springframework.http.converter.json.JavaType = null ; if ( java.lang.Object instanceof MappingJacksonValue ) { MappingJacksonValue org.springframework.http.converter.json.MappingJacksonValue = ( MappingJacksonValue ) java.lang.Object ; java.lang.Object = org.springframework.http.converter.json.MappingJacksonValue . getValue ( ) ; java.lang.Class<?> = org.springframework.http.converter.json.MappingJacksonValue . getSerializationView ( ) ; org.springframework.http.converter.json.FilterProvider = org.springframework.http.converter.json.MappingJacksonValue . getFilters ( ) ; } if ( java.lang.reflect.Type != null && java.lang.Object != null && TypeUtils . isAssignable ( java.lang.reflect.Type , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { org.springframework.http.converter.json.JavaType = org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type , null ) ; } ObjectWriter org.springframework.http.converter.json.ObjectWriter ; if ( java.lang.Class<> != null ) { org.springframework.http.converter.json.ObjectWriter = this . org.springframework.http.converter.json.ObjectMapper . writerWithView ( java.lang.Class<> ) ; } else if ( org.springframework.http.converter.json.FilterProvider != null ) { org.springframework.http.converter.json.ObjectWriter = this . org.springframework.http.converter.json.ObjectMapper . writer ( org.springframework.http.converter.json.FilterProvider ) ; } else { org.springframework.http.converter.json.ObjectWriter = this . org.springframework.http.converter.json.ObjectMapper . writer ( ) ; } if ( org.springframework.http.converter.json.JavaType != null && org.springframework.http.converter.json.JavaType . isContainerType ( ) ) { org.springframework.http.converter.json.ObjectWriter = org.springframework.http.converter.json.ObjectWriter . forType ( org.springframework.http.converter.json.JavaType ) ; } SerializationConfig org.springframework.http.converter.json.SerializationConfig = org.springframework.http.converter.json.ObjectWriter . getConfig ( ) ; if ( org.springframework.http.converter.json.MediaType != null && org.springframework.http.converter.json.MediaType . isCompatibleWith ( MediaType . TEXT_EVENT_STREAM ) && org.springframework.http.converter.json.SerializationConfig . isEnabled ( SerializationFeature . INDENT_OUTPUT ) ) { org.springframework.http.converter.json.ObjectWriter = org.springframework.http.converter.json.ObjectWriter . with ( this . org.springframework.http.converter.json.PrettyPrinter ) ; } org.springframework.http.converter.json.ObjectWriter . writeValue ( org.springframework.http.converter.json.JsonGenerator , java.lang.Object ) ; void ( org.springframework.http.converter.json.JsonGenerator , java.lang.Object ) ; org.springframework.http.converter.json.JsonGenerator . flush ( ) ; } catch ( JsonProcessingException org.springframework.http.converter.json.JsonProcessingException ) { throw new HttpMessageNotWritableException ( STRING + org.springframework.http.converter.json.JsonProcessingException . getMessage ( ) , org.springframework.http.converter.json.JsonProcessingException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( JsonGenerator org.springframework.http.converter.json.JsonGenerator , java.lang.Object java.lang.Object ) throws java.io.IOException {	}  <METHOD_END>
<METHOD_START> protected void void ( JsonGenerator org.springframework.http.converter.json.JsonGenerator , java.lang.Object java.lang.Object ) throws java.io.IOException {	}  <METHOD_END>
<METHOD_START> protected org.springframework.http.converter.json.JavaType org.springframework.http.converter.json.JavaType ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> ) { TypeFactory org.springframework.http.converter.json.TypeFactory = this . org.springframework.http.converter.json.ObjectMapper . getTypeFactory ( ) ; return org.springframework.http.converter.json.TypeFactory . constructType ( GenericTypeResolver . resolveType ( java.lang.reflect.Type , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.converter.json.JsonEncoding org.springframework.http.converter.json.JsonEncoding ( MediaType org.springframework.http.converter.json.MediaType ) { if ( org.springframework.http.converter.json.MediaType != null && org.springframework.http.converter.json.MediaType . getCharset ( ) != null ) { java.nio.charset.Charset java.nio.charset.Charset = org.springframework.http.converter.json.MediaType . getCharset ( ) ; for ( JsonEncoding org.springframework.http.converter.json.JsonEncoding : JsonEncoding . values ( ) ) { if ( java.nio.charset.Charset . java.lang.String ( ) . boolean ( org.springframework.http.converter.json.JsonEncoding . getJavaName ( ) ) ) { return org.springframework.http.converter.json.JsonEncoding ; } } } return JsonEncoding . UTF8 ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.converter.json.MediaType org.springframework.http.converter.json.MediaType ( java.lang.Object java.lang.Object ) throws java.io.IOException { if ( java.lang.Object instanceof MappingJacksonValue ) { java.lang.Object = ( ( MappingJacksonValue ) java.lang.Object ) . getValue ( ) ; } return super. getDefaultContentType ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Long java.lang.Long ( java.lang.Object java.lang.Object , MediaType org.springframework.http.converter.json.MediaType ) throws java.io.IOException { if ( java.lang.Object instanceof MappingJacksonValue ) { java.lang.Object = ( ( MappingJacksonValue ) java.lang.Object ) . getValue ( ) ; } return super. getContentLength ( java.lang.Object , org.springframework.http.converter.json.MediaType ) ; }  <METHOD_END>
