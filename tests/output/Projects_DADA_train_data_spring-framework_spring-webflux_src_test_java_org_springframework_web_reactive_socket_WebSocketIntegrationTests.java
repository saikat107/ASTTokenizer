<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.web.reactive.socket.WebSocketIntegrationTests.WebConfig .class ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; Flux < java.lang.String > org.springframework.web.reactive.socket.Flux<java.lang.String> = Flux . range ( NUMBER , int ) . map ( index -> STRING + index ) ; ReplayProcessor < java.lang.Object > org.springframework.web.reactive.socket.ReplayProcessor<java.lang.Object> = ReplayProcessor . create ( int ) ; client . execute ( getUrl ( STRING ) , session -> session . send ( input . map ( session :: textMessage ) ) . thenMany ( session . receive ( ) . take ( count ) . map ( WebSocketMessage :: getPayloadAsText ) ) . subscribeWith ( output ) . then ( ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( org.springframework.web.reactive.socket.Flux<java.lang.String> . collectList ( ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) , org.springframework.web.reactive.socket.ReplayProcessor<java.lang.Object> . collectList ( ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> < HandshakeInfo > java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> = new java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> <> ( ) ; MonoProcessor < java.lang.Object > org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> = MonoProcessor . create ( ) ; client . execute ( getUrl ( STRING ) , new WebSocketHandler ( ) { @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { java.lang.String } ; } @ java.lang.Override public org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession ) { java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> . set ( org.springframework.web.reactive.socket.WebSocketSession . getHandshakeInfo ( ) ) ; return org.springframework.web.reactive.socket.WebSocketSession . receive ( ) . map ( WebSocketMessage :: getPayloadAsText ) . subscribeWith ( org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> ) . then ( ) ; } } ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; HandshakeInfo org.springframework.web.reactive.socket.HandshakeInfo = java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> . get ( ) ; assertThat ( org.springframework.web.reactive.socket.HandshakeInfo . getHeaders ( ) . getFirst ( STRING ) , Matchers . equalToIgnoringCase ( STRING ) ) ; assertEquals ( java.lang.String , org.springframework.web.reactive.socket.HandshakeInfo . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.reactive.socket.HandshakeInfo . getSubProtocol ( ) . orElse ( STRING ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { java.lang.String } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession ) { java.util.concurrent.atomic.AtomicReference<org.springframework.web.reactive.socket.HandshakeInfo> . set ( org.springframework.web.reactive.socket.WebSocketSession . getHandshakeInfo ( ) ) ; return org.springframework.web.reactive.socket.WebSocketSession . receive ( ) . map ( WebSocketMessage :: getPayloadAsText ) . subscribeWith ( org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> ) . then ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.socket.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.socket.HttpHeaders . add ( STRING , STRING ) ; MonoProcessor < java.lang.Object > org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> = MonoProcessor . create ( ) ; client . execute ( getUrl ( STRING ) , org.springframework.web.reactive.socket.HttpHeaders , session -> session . receive ( ) . map ( WebSocketMessage :: getPayloadAsText ) . subscribeWith ( output ) . then ( ) ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.web.reactive.socket.MonoProcessor<java.lang.Object> . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.socket.HandlerMapping org.springframework.web.reactive.socket.HandlerMapping ( ) { java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> < java.lang.String , WebSocketHandler > java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> <> ( ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> . put ( STRING , new org.springframework.web.reactive.socket.WebSocketIntegrationTests.EchoWebSocketHandler ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> . put ( STRING , new org.springframework.web.reactive.socket.WebSocketIntegrationTests.SubProtocolWebSocketHandler ( ) ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> . put ( STRING , new org.springframework.web.reactive.socket.WebSocketIntegrationTests.CustomHeaderHandler ( ) ) ; SimpleUrlHandlerMapping org.springframework.web.reactive.socket.SimpleUrlHandlerMapping = new SimpleUrlHandlerMapping ( ) ; org.springframework.web.reactive.socket.SimpleUrlHandlerMapping . setUrlMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.socket.WebSocketHandler> ) ; return org.springframework.web.reactive.socket.SimpleUrlHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession ) { return org.springframework.web.reactive.socket.WebSocketSession . send ( org.springframework.web.reactive.socket.WebSocketSession . receive ( ) . doOnNext ( WebSocketMessage :: retain ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession ) { java.lang.String java.lang.String = org.springframework.web.reactive.socket.WebSocketSession . getHandshakeInfo ( ) . getSubProtocol ( ) . orElse ( STRING ) ; WebSocketMessage org.springframework.web.reactive.socket.WebSocketMessage = org.springframework.web.reactive.socket.WebSocketSession . textMessage ( java.lang.String ) ; return org.springframework.web.reactive.socket.Mono<java.lang.Void> ( org.springframework.web.reactive.socket.WebSocketSession , Mono . just ( org.springframework.web.reactive.socket.WebSocketMessage ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession ) { HttpHeaders org.springframework.web.reactive.socket.HttpHeaders = org.springframework.web.reactive.socket.WebSocketSession . getHandshakeInfo ( ) . getHeaders ( ) ; java.lang.String java.lang.String = STRING + org.springframework.web.reactive.socket.HttpHeaders . getFirst ( STRING ) ; WebSocketMessage org.springframework.web.reactive.socket.WebSocketMessage = org.springframework.web.reactive.socket.WebSocketSession . textMessage ( java.lang.String ) ; return org.springframework.web.reactive.socket.Mono<java.lang.Void> ( org.springframework.web.reactive.socket.WebSocketSession , Mono . just ( org.springframework.web.reactive.socket.WebSocketMessage ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.socket.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.Mono<java.lang.Void> ( WebSocketSession org.springframework.web.reactive.socket.WebSocketSession , Publisher < WebSocketMessage > org.springframework.web.reactive.socket.Publisher<org.springframework.web.reactive.socket.WebSocketMessage> ) { return org.springframework.web.reactive.socket.WebSocketSession . send ( Mono . delay ( java.time.Duration . java.time.Duration ( NUMBER ) ) . thenMany ( org.springframework.web.reactive.socket.Publisher<org.springframework.web.reactive.socket.WebSocketMessage> ) ) ; }  <METHOD_END>
