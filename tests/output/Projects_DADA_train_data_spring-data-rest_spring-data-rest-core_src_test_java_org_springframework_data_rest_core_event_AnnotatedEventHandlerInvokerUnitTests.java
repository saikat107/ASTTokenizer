<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ProxyFactory org.springframework.data.rest.core.event.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.rest.core.event.ProxyFactory . setTarget ( new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.Sample ( ) ) ; org.springframework.data.rest.core.event.ProxyFactory . setProxyTargetClass ( true ) ; AnnotatedEventHandlerInvoker org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker = new AnnotatedEventHandlerInvoker ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.ProxyFactory . getProxy ( ) , STRING ) ; MultiValueMap < java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> < ? extends RepositoryEvent > , EventHandlerMethod > org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.EventHandlerMethod> = ( MultiValueMap < java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> < ? extends RepositoryEvent > , EventHandlerMethod > ) ReflectionTestUtils . getField ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker , STRING ) ; assertThat ( org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.EventHandlerMethod> . get ( BeforeCreateEvent .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleWithPrivateHandler org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleWithPrivateHandler = new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleWithPrivateHandler ( ) ; AnnotatedEventHandlerInvoker org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker = new AnnotatedEventHandlerInvoker ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleWithPrivateHandler , STRING ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . onApplicationEvent ( new BeforeCreateEvent ( new Person ( STRING , STRING ) ) ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleWithPrivateHandler . boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 = new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 = new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 ( ) ; AnnotatedEventHandlerInvoker org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker = new AnnotatedEventHandlerInvoker ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 , STRING ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 , STRING ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . onApplicationEvent ( new BeforeCreateEvent ( new Person ( STRING , STRING ) ) ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 . boolean ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 . boolean ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler1 . long ) . isGreaterThan ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SampleOrderEventHandler2 . long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEventHandler org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEventHandler = new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEventHandler ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEventHandler org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEventHandler = new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEventHandler ( ) ; AnnotatedEventHandlerInvoker org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker = new AnnotatedEventHandlerInvoker ( ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEventHandler , STRING ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . postProcessAfterInitialization ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEventHandler , STRING ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . onApplicationEvent ( new BeforeCreateEvent ( new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEntity ( ) ) ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker . onApplicationEvent ( new BeforeCreateEvent ( new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEntity ( ) ) ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.AbstractBaseEntityEventHandler<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.FirstEntity> . int ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.AbstractBaseEntityEventHandler<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.SecondEntity> . int ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ HandleBeforeCreate public void void ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.Sample org.springframework.data.rest.core.event.AnnotatedEventHandlerInvokerUnitTests.Sample ) {}  <METHOD_END>
<METHOD_START> @ HandleBeforeCreate private void void ( Person org.springframework.data.rest.core.event.Person ) { boolean = true ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) @ HandleBeforeCreate private void void ( Person org.springframework.data.rest.core.event.Person ) { boolean = true ; long = java.lang.System . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Order ( NUMBER ) @ HandleBeforeCreate private void void ( Person org.springframework.data.rest.core.event.Person ) { boolean = true ; long = java.lang.System . long ( ) ; }  <METHOD_END>
<METHOD_START> @ HandleBeforeCreate private void void ( T T ) { int += NUMBER ; }  <METHOD_END>
