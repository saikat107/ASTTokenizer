<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; this . org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator = new ExceptionWebSocketHandlerDecorator ( this . org.springframework.web.socket.handler.WebSocketHandler ) ; this . org.springframework.web.socket.handler.TestWebSocketSession = new TestWebSocketSession ( ) ; this . org.springframework.web.socket.handler.TestWebSocketSession . setOpen ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.handler.WebSocketHandler ) . afterConnectionEstablished ( this . org.springframework.web.socket.handler.TestWebSocketSession ) ; this . org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator . afterConnectionEstablished ( this . org.springframework.web.socket.handler.TestWebSocketSession ) ; assertEquals ( CloseStatus . SERVER_ERROR , this . org.springframework.web.socket.handler.TestWebSocketSession . getCloseStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TextMessage org.springframework.web.socket.handler.TextMessage = new TextMessage ( STRING ) ; willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.handler.WebSocketHandler ) . handleMessage ( this . org.springframework.web.socket.handler.TestWebSocketSession , org.springframework.web.socket.handler.TextMessage ) ; this . org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator . handleMessage ( this . org.springframework.web.socket.handler.TestWebSocketSession , org.springframework.web.socket.handler.TextMessage ) ; assertEquals ( CloseStatus . SERVER_ERROR , this . org.springframework.web.socket.handler.TestWebSocketSession . getCloseStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.handler.WebSocketHandler ) . handleTransportError ( this . org.springframework.web.socket.handler.TestWebSocketSession , java.lang.Exception ) ; this . org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator . handleTransportError ( this . org.springframework.web.socket.handler.TestWebSocketSession , java.lang.Exception ) ; assertEquals ( CloseStatus . SERVER_ERROR , this . org.springframework.web.socket.handler.TestWebSocketSession . getCloseStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CloseStatus org.springframework.web.socket.handler.CloseStatus = CloseStatus . NORMAL ; willThrow ( new java.lang.IllegalStateException ( STRING ) ) . given ( this . org.springframework.web.socket.handler.WebSocketHandler ) . afterConnectionClosed ( this . org.springframework.web.socket.handler.TestWebSocketSession , org.springframework.web.socket.handler.CloseStatus ) ; this . org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator . afterConnectionClosed ( this . org.springframework.web.socket.handler.TestWebSocketSession , org.springframework.web.socket.handler.CloseStatus ) ; assertNull ( this . org.springframework.web.socket.handler.TestWebSocketSession . getCloseStatus ( ) ) ; }  <METHOD_END>
