<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.restart.Statement org.springframework.boot.devtools.restart.Statement ( final Statement org.springframework.boot.devtools.restart.Statement , Description org.springframework.boot.devtools.restart.Description ) { return new Statement ( ) { @ java.lang.Override public void void ( ) java.lang.Throwable { void ( ) ; org.springframework.boot.devtools.restart.Statement . evaluate ( ) ; void ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { void ( ) ; org.springframework.boot.devtools.restart.Statement . evaluate ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) { Restarter . setInstance ( this . org.springframework.boot.devtools.restart.Restarter ) ; given ( this . org.springframework.boot.devtools.restart.Restarter . getInitialUrls ( ) ) . willReturn ( new java.net.URL [] {} ) ; given ( this . org.springframework.boot.devtools.restart.Restarter . getOrAddAttribute ( anyString ( ) , ( ObjectFactory ) any ( ) ) ) . willAnswer ( new Answer < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.devtools.restart.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.devtools.restart.InvocationOnMock . getArguments ( ) [ NUMBER ] ; ObjectFactory org.springframework.boot.devtools.restart.ObjectFactory = ( ObjectFactory ) org.springframework.boot.devtools.restart.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.Object java.lang.Object = org.springframework.boot.devtools.restart.MockRestarter .this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.boot.devtools.restart.ObjectFactory . getObject ( ) ; org.springframework.boot.devtools.restart.MockRestarter .this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } return java.lang.Object ; } } ) ; given ( this . org.springframework.boot.devtools.restart.Restarter . getThreadFactory ( ) ) . willReturn ( new java.util.concurrent.ThreadFactory ( ) { @ java.lang.Override public java.lang.Thread java.lang.Thread ( java.lang.Runnable java.lang.Runnable ) { return new java.lang.Thread ( java.lang.Runnable ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( InvocationOnMock org.springframework.boot.devtools.restart.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.boot.devtools.restart.InvocationOnMock . getArguments ( ) [ NUMBER ] ; ObjectFactory org.springframework.boot.devtools.restart.ObjectFactory = ( ObjectFactory ) org.springframework.boot.devtools.restart.InvocationOnMock . getArguments ( ) [ NUMBER ] ; java.lang.Object java.lang.Object = org.springframework.boot.devtools.restart.MockRestarter .this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.boot.devtools.restart.ObjectFactory . getObject ( ) ; org.springframework.boot.devtools.restart.MockRestarter .this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( java.lang.Runnable java.lang.Runnable ) { return new java.lang.Thread ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( ) ; Restarter . clearInstance ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.restart.Restarter org.springframework.boot.devtools.restart.Restarter ( ) { return this . org.springframework.boot.devtools.restart.Restarter ; }  <METHOD_END>
