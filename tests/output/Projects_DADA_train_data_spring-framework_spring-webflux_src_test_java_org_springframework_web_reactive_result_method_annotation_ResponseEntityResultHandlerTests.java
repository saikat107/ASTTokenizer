<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler = org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler ( org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?> < ? > ... org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>[] ) { java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> ; if ( ObjectUtils . isEmpty ( org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>[] ) ) { java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> = new java.util.ArrayList <> ( ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new ByteBufferEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . textPlainOnly ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new ResourceHttpMessageWriter ( ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new Jaxb2XmlEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( new Jackson2JsonEncoder ( ) ) ) ; java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> . add ( new EncoderHttpMessageWriter <> ( CharSequenceEncoder . allMimeTypes ( ) ) ) ; } else { java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> = java.util.Arrays . java.util.List ( org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>[] ) ; } RequestedContentTypeResolver org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver = new RequestedContentTypeResolverBuilder ( ) . build ( ) ; return new ResponseEntityResultHandler ( java.util.List<org.springframework.web.reactive.result.method.annotation.HttpMessageWriter<?>> , org.springframework.web.reactive.result.method.annotation.RequestedContentTypeResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = null ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Mono .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Single .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( java.util.concurrent.CompletableFuture .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; assertTrue ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.NoSuchMethodException { java.lang.Object java.lang.Object = null ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( java.lang.String .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Completable .class ) ; assertFalse ( this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . supports ( org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = ResponseEntity . noContent ( ) . build ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.Void .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . NO_CONTENT , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . size ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = ResponseEntity . created ( java.net.URI ) . build ( ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.Void .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . CREATED , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . size ( ) ) ; assertEquals ( java.net.URI , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLocation ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = Mono . just ( notFound ( ) . build ( ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Mono .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = ok ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; void ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.lang.Object = Mono . just ( ok ( STRING ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Mono .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; void ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.lang.Object = Mono . just ( ok ( STRING ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Single .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; void ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; java.lang.Object = Mono . just ( ok ( STRING ) ) ; org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( java.util.concurrent.CompletableFuture .class , org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; void ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( ) . java.time.Instant ( java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit ) ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = ok ( ) . lastModified ( java.time.Instant . long ( ) ) . body ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , HttpStatus . NOT_MODIFIED , null , null , java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . toExchange ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = ok ( ) . eTag ( java.lang.String ) . body ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , HttpStatus . NOT_MODIFIED , null , java.lang.String , java.time.Instant . java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( STRING ) . toExchange ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = ok ( ) . eTag ( STRING ) . body ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( ) . java.time.Instant ( java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit ) ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = ok ( ) . eTag ( java.lang.String ) . lastModified ( java.time.Instant . long ( ) ) . body ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , HttpStatus . NOT_MODIFIED , null , java.lang.String , java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( ) . java.time.Instant ( java.time.temporal.ChronoUnit . java.time.temporal.ChronoUnit ) ; java.time.Instant java.time.Instant = java.time.Instant . java.time.Instant ( NUMBER ) ; MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . ifNoneMatch ( java.lang.String ) . ifModifiedSince ( java.time.Instant . long ( ) ) . toExchange ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = ok ( ) . eTag ( java.lang.String ) . lastModified ( java.time.Instant . long ( ) ) . body ( STRING ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.String .class ) ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , HttpStatus . OK , STRING , java.lang.String , java.time.Instant ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getAttributes ( ) . put ( PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( APPLICATION_JSON ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Mono .class , ResponseEntity .class ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = new HandlerResult ( new org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController ( ) , Mono . just ( ok ( ) . body ( STRING ) ) , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getAttributes ( ) . put ( PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE , java.util.Collections . java.util.Set ( APPLICATION_JSON ) ) ; MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter = on ( org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController .class ) . resolveReturnType ( Mono .class , ResponseEntity .class ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = new HandlerResult ( new org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController ( ) , Mono . just ( notFound ( ) . build ( ) ) , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange = get ( STRING ) . toExchange ( ) ; HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult = org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; this . org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandler . handleResult ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , org.springframework.web.reactive.result.method.annotation.HandlerResult ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getFirst ( STRING ) ) ; void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return forClassWithGenerics ( ResponseEntity .class , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.HandlerResult org.springframework.web.reactive.result.method.annotation.HandlerResult ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return new HandlerResult ( new org.springframework.web.reactive.result.method.annotation.ResponseEntityResultHandlerTests.TestController ( ) , java.lang.Object , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , java.lang.String java.lang.String ) { StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . consumeNextWith ( buf -> assertEquals ( responseBody , DataBufferTestUtils . dumpString ( buf , StandardCharsets . UTF_8 ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) { StepVerifier . create ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( MockServerWebExchange org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , HttpStatus org.springframework.web.reactive.result.method.annotation.HttpStatus , java.lang.String java.lang.String , java.lang.String java.lang.String , java.time.Instant java.time.Instant ) throws java.lang.Exception { assertEquals ( org.springframework.web.reactive.result.method.annotation.HttpStatus , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getStatusCode ( ) ) ; if ( java.lang.String != null ) { void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange , java.lang.String ) ; } else { void ( org.springframework.web.reactive.result.method.annotation.MockServerWebExchange ) ; } if ( java.lang.String != null ) { assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( HttpHeaders . ETAG ) . size ( ) ) ; assertEquals ( java.lang.String , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getETag ( ) ) ; } if ( java.time.Instant . boolean ( java.time.Instant . java.time.Instant ) ) { assertEquals ( NUMBER , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . get ( HttpHeaders . LAST_MODIFIED ) . size ( ) ) ; assertEquals ( java.time.Instant . long ( ) , org.springframework.web.reactive.result.method.annotation.MockServerWebExchange . getResponse ( ) . getHeaders ( ) . getLastModified ( ) ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > org.springframework.web.reactive.result.method.annotation.Single<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> < ResponseEntity < java.lang.String > > java.util.concurrent.CompletableFuture<org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String>> ( ) { return null ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.Completable org.springframework.web.reactive.result.method.annotation.Completable ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ResponseEntity<?>> < ResponseEntity < ? > > org.springframework.web.reactive.result.method.annotation.Mono<org.springframework.web.reactive.result.method.annotation.ResponseEntity<?>> ( ) { return null ; }  <METHOD_END>
