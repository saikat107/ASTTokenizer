<METHOD_START> @ Test public void void ( ) { org.springframework.integration.file.remote.session.CachingSessionFactoryTests.TestSessionFactory org.springframework.integration.file.remote.session.CachingSessionFactoryTests.TestSessionFactory = new org.springframework.integration.file.remote.session.CachingSessionFactoryTests.TestSessionFactory ( ) ; CachingSessionFactory < java.lang.String > org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> = new CachingSessionFactory < java.lang.String > ( org.springframework.integration.file.remote.session.CachingSessionFactoryTests.TestSessionFactory ) ; Session < java.lang.String > org.springframework.integration.file.remote.session.Session<java.lang.String> = org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . getSession ( ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.remote.session.Session<java.lang.String> , STRING ) ) ; Session < java.lang.String > org.springframework.integration.file.remote.session.Session<java.lang.String> = org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . getSession ( ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.remote.session.Session<java.lang.String> , STRING ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> . close ( ) ; assertTrue ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> = org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . getSession ( ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.remote.session.Session<java.lang.String> , STRING ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> . close ( ) ; assertTrue ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . resetCache ( ) ; assertFalse ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> = org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . getSession ( ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( org.springframework.integration.file.remote.session.Session<java.lang.String> , STRING ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> . close ( ) ; assertTrue ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; org.springframework.integration.file.remote.session.Session<java.lang.String> . close ( ) ; assertFalse ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.String> . resetCache ( ) ; assertFalse ( org.springframework.integration.file.remote.session.Session<java.lang.String> . isOpen ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) SessionFactory < java.lang.Object > org.springframework.integration.file.remote.session.SessionFactory<java.lang.Object> = mock ( SessionFactory .class ) ; @ java.lang.SuppressWarnings ( STRING ) Session < java.lang.Object > org.springframework.integration.file.remote.session.Session<java.lang.Object> = mock ( Session .class ) ; when ( org.springframework.integration.file.remote.session.SessionFactory<java.lang.Object> . getSession ( ) ) . thenReturn ( org.springframework.integration.file.remote.session.Session<java.lang.Object> ) ; when ( org.springframework.integration.file.remote.session.Session<java.lang.Object> . readRaw ( STRING ) ) . thenReturn ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; when ( org.springframework.integration.file.remote.session.Session<java.lang.Object> . finalizeRaw ( ) ) . thenReturn ( true ) ; CachingSessionFactory < java.lang.Object > org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.Object> = new CachingSessionFactory < java.lang.Object > ( org.springframework.integration.file.remote.session.SessionFactory<java.lang.Object> ) ; RemoteFileTemplate < java.lang.Object > org.springframework.integration.file.remote.session.RemoteFileTemplate<java.lang.Object> = new RemoteFileTemplate < java.lang.Object > ( org.springframework.integration.file.remote.session.CachingSessionFactory<java.lang.Object> ) ; org.springframework.integration.file.remote.session.RemoteFileTemplate<java.lang.Object> . setFileNameExpression ( new LiteralExpression ( STRING ) ) ; org.springframework.integration.file.remote.session.RemoteFileTemplate<java.lang.Object> . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.file.remote.session.RemoteFileTemplate<java.lang.Object> . afterPropertiesSet ( ) ; try { org.springframework.integration.file.remote.session.RemoteFileTemplate<java.lang.Object> . get ( new GenericMessage < java.lang.String > ( STRING ) , ( InputStreamCallback ) stream -> { throw new RuntimeException ( STRING ) ; } ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.Throwable ( ) , instanceOf ( java.lang.RuntimeException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) , equalTo ( STRING ) ) ; } verify ( org.springframework.integration.file.remote.session.Session<java.lang.Object> ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.file.remote.session.Session<java.lang.String> < java.lang.String > org.springframework.integration.file.remote.session.Session<java.lang.String> ( ) { return new org.springframework.integration.file.remote.session.CachingSessionFactoryTests.TestSession ( STRING + ++ int ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) java.io.IOException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
