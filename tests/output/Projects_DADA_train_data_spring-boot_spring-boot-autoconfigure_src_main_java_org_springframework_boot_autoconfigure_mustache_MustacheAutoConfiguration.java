<METHOD_START> public void ( MustacheProperties org.springframework.boot.autoconfigure.mustache.MustacheProperties , Environment org.springframework.boot.autoconfigure.mustache.Environment , ApplicationContext org.springframework.boot.autoconfigure.mustache.ApplicationContext ) { this . org.springframework.boot.autoconfigure.mustache.MustacheProperties = org.springframework.boot.autoconfigure.mustache.MustacheProperties ; this . org.springframework.boot.autoconfigure.mustache.Environment = org.springframework.boot.autoconfigure.mustache.Environment ; this . org.springframework.boot.autoconfigure.mustache.ApplicationContext = org.springframework.boot.autoconfigure.mustache.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . isCheckTemplateLocation ( ) ) { TemplateLocation org.springframework.boot.autoconfigure.mustache.TemplateLocation = new TemplateLocation ( this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . getPrefix ( ) ) ; if ( ! org.springframework.boot.autoconfigure.mustache.TemplateLocation . exists ( this . org.springframework.boot.autoconfigure.mustache.ApplicationContext ) ) { org.springframework.boot.autoconfigure.mustache.Log . warn ( STRING + org.springframework.boot.autoconfigure.mustache.TemplateLocation + STRING + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( Mustache . Mustache .class ) public Mustache . Mustache.Compiler Mustache.Compiler ( TemplateLoader org.springframework.boot.autoconfigure.mustache.TemplateLoader ) { return Mustache . compiler ( ) . withLoader ( org.springframework.boot.autoconfigure.mustache.TemplateLoader ) . withCollector ( org.springframework.boot.autoconfigure.mustache.Collector ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mustache.Collector org.springframework.boot.autoconfigure.mustache.Collector ( ) { MustacheEnvironmentCollector org.springframework.boot.autoconfigure.mustache.MustacheEnvironmentCollector = new MustacheEnvironmentCollector ( ) ; org.springframework.boot.autoconfigure.mustache.MustacheEnvironmentCollector . setEnvironment ( this . org.springframework.boot.autoconfigure.mustache.Environment ) ; return org.springframework.boot.autoconfigure.mustache.MustacheEnvironmentCollector ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( TemplateLoader .class ) public org.springframework.boot.autoconfigure.mustache.MustacheResourceTemplateLoader org.springframework.boot.autoconfigure.mustache.MustacheResourceTemplateLoader ( ) { MustacheResourceTemplateLoader org.springframework.boot.autoconfigure.mustache.MustacheResourceTemplateLoader = new MustacheResourceTemplateLoader ( this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . getPrefix ( ) , this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . getSuffix ( ) ) ; org.springframework.boot.autoconfigure.mustache.MustacheResourceTemplateLoader . setCharset ( this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . getCharsetName ( ) ) ; return org.springframework.boot.autoconfigure.mustache.MustacheResourceTemplateLoader ; }  <METHOD_END>
<METHOD_START> protected void ( MustacheProperties org.springframework.boot.autoconfigure.mustache.MustacheProperties ) { this . org.springframework.boot.autoconfigure.mustache.MustacheProperties = org.springframework.boot.autoconfigure.mustache.MustacheProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( MustacheViewResolver .class ) public org.springframework.boot.autoconfigure.mustache.MustacheViewResolver org.springframework.boot.autoconfigure.mustache.MustacheViewResolver ( java.lang.Compiler java.lang.Compiler ) { MustacheViewResolver org.springframework.boot.autoconfigure.mustache.MustacheViewResolver = new MustacheViewResolver ( ) ; this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . applyToViewResolver ( org.springframework.boot.autoconfigure.mustache.MustacheViewResolver ) ; org.springframework.boot.autoconfigure.mustache.MustacheViewResolver . setCharset ( this . org.springframework.boot.autoconfigure.mustache.MustacheProperties . getCharsetName ( ) ) ; org.springframework.boot.autoconfigure.mustache.MustacheViewResolver . setCompiler ( java.lang.Compiler ) ; org.springframework.boot.autoconfigure.mustache.MustacheViewResolver . setOrder ( Ordered . LOWEST_PRECEDENCE - NUMBER ) ; return org.springframework.boot.autoconfigure.mustache.MustacheViewResolver ; }  <METHOD_END>
