<METHOD_START> void ( GroovyCompilerConfiguration org.springframework.boot.cli.command.install.GroovyCompilerConfiguration ) { this . org.springframework.boot.cli.command.install.GroovyCompilerConfiguration = org.springframework.boot.cli.command.install.GroovyCompilerConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> )			throws org.springframework.boot.cli.command.install.CompilationFailedException , java.io.IOException { GroovyCompiler org.springframework.boot.cli.command.install.GroovyCompiler = new GroovyCompiler ( this . org.springframework.boot.cli.command.install.GroovyCompilerConfiguration ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> <> ( ) ; if ( ! java.util.List<java.lang.String> . boolean ( ) ) { java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = java.util.List<java.net.URL> ( org.springframework.boot.cli.command.install.GroovyCompiler ) ; org.springframework.boot.cli.command.install.GroovyCompiler . compile ( java.lang.String ( java.util.List<java.lang.String> ) ) ; java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> = java.util.List<java.net.URL> ( org.springframework.boot.cli.command.install.GroovyCompiler ) ; java.util.List<java.net.URL> . boolean ( java.util.List<java.net.URL> ) ; for ( java.net.URL java.net.URL : java.util.List<java.net.URL> ) { java.util.List<java.io.File> . boolean ( java.io.File ( java.net.URL ) ) ; } } return java.util.List<java.io.File> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.net.URL> < java.net.URL > java.util.List<java.net.URL> ( GroovyCompiler org.springframework.boot.cli.command.install.GroovyCompiler ) { return new java.util.ArrayList <> ( java.util.Arrays . java.util.List ( org.springframework.boot.cli.command.install.GroovyCompiler . getLoader ( ) . getURLs ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) throws java.io.IOException { java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING ) ; java.io.File . void ( ) ; java.io.OutputStreamWriter java.io.OutputStreamWriter = new java.io.OutputStreamWriter ( new java.io.FileOutputStream ( java.io.File ) , STRING ) ; try { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.io.OutputStreamWriter . void ( STRING + java.lang.String + STRING ) ; } java.io.OutputStreamWriter . void ( STRING ) ; } finally { java.io.OutputStreamWriter . void ( ) ; } return java.io.File . java.io.File ( ) . java.net.URI ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.net.URL java.net.URL ) { try { return new java.io.File ( java.net.URL . java.net.URI ( ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { return new java.io.File ( java.net.URL . java.lang.String ( ) ) ; } }  <METHOD_END>
