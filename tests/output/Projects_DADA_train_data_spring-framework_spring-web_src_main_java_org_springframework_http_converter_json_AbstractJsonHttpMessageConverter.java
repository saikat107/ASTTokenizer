<METHOD_START> public void ( ) { super( MediaType . APPLICATION_JSON , new MediaType ( STRING , STRING ) ); setDefaultCharset ( java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.String = ( boolean ? STRING : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotReadableException { return java.lang.Object ( GenericTypeResolver . resolveType ( java.lang.reflect.Type , java.lang.Class<> ) , org.springframework.http.converter.json.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotReadableException { return java.lang.Object ( java.lang.Class<> , org.springframework.http.converter.json.HttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , HttpInputMessage org.springframework.http.converter.json.HttpInputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotReadableException { java.io.Reader java.io.Reader = java.io.Reader ( org.springframework.http.converter.json.HttpInputMessage ) ; try { return java.lang.Object ( java.lang.reflect.Type , java.io.Reader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotReadableException ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type , HttpOutputMessage org.springframework.http.converter.json.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.json.HttpMessageNotWritableException { java.io.Writer java.io.Writer = java.io.Writer ( org.springframework.http.converter.json.HttpOutputMessage ) ; if ( this . java.lang.String != null ) { java.io.Writer . java.io.Writer ( this . java.lang.String ) ; } try { void ( java.lang.Object , java.lang.reflect.Type , java.io.Writer ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new HttpMessageNotWritableException ( STRING + java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } java.io.Writer . void ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.io.Reader java.io.Reader ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type , java.io.Writer java.io.Writer ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> private static java.io.Reader java.io.Reader ( HttpInputMessage org.springframework.http.converter.json.HttpInputMessage ) throws java.io.IOException { return new java.io.InputStreamReader ( org.springframework.http.converter.json.HttpInputMessage . getBody ( ) , java.nio.charset.Charset ( org.springframework.http.converter.json.HttpInputMessage . getHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.io.Writer java.io.Writer ( HttpOutputMessage org.springframework.http.converter.json.HttpOutputMessage ) throws java.io.IOException { return new java.io.OutputStreamWriter ( org.springframework.http.converter.json.HttpOutputMessage . getBody ( ) , java.nio.charset.Charset ( org.springframework.http.converter.json.HttpOutputMessage . getHeaders ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.nio.charset.Charset java.nio.charset.Charset ( HttpHeaders org.springframework.http.converter.json.HttpHeaders ) { java.nio.charset.Charset java.nio.charset.Charset = ( org.springframework.http.converter.json.HttpHeaders . getContentType ( ) != null ? org.springframework.http.converter.json.HttpHeaders . getContentType ( ) . getCharset ( ) : null ) ; return ( java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.Charset ) ; }  <METHOD_END>
