<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestResultPolicy . KEYS , InterestResultPolicyType . getInterestResultPolicy ( InterestResultPolicyType . KEYS ) ) ; assertEquals ( InterestResultPolicy . KEYS_VALUES , InterestResultPolicyType . getInterestResultPolicy ( InterestResultPolicyType . KEYS_VALUES ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestResultPolicyType . getInterestResultPolicy ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestResultPolicyType . DEFAULT , InterestResultPolicyType . valueOf ( InterestResultPolicy . DEFAULT ) ) ; assertEquals ( InterestResultPolicy . DEFAULT , InterestResultPolicyType . DEFAULT . getInterestResultPolicy ( ) ) ; assertSame ( InterestResultPolicyType . KEYS_VALUES , InterestResultPolicyType . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { for ( byte byte = NUMBER ; byte < java.lang.Byte . byte ; byte ++ ) { InterestResultPolicy org.springframework.data.gemfire.client.InterestResultPolicy = InterestResultPolicy . fromOrdinal ( byte ) ; InterestResultPolicyType org.springframework.data.gemfire.client.InterestResultPolicyType = InterestResultPolicyType . valueOf ( org.springframework.data.gemfire.client.InterestResultPolicy ) ; assertNotNull ( org.springframework.data.gemfire.client.InterestResultPolicyType ) ; assertEquals ( org.springframework.data.gemfire.client.InterestResultPolicy , org.springframework.data.gemfire.client.InterestResultPolicyType . getInterestResultPolicy ( ) ) ; } } catch ( java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestResultPolicyType . valueOf ( ( InterestResultPolicy ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestResultPolicyType . KEYS , InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestResultPolicyType . KEYS_VALUES , InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestResultPolicyType . NONE , InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestResultPolicyType . NONE , InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestResultPolicyType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
