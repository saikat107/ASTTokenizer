<METHOD_START> @ Test public void void ( ) java.lang.Exception { Unmarshaller org.springframework.http.converter.xml.Unmarshaller = mock ( Unmarshaller .class ) ; given ( org.springframework.http.converter.xml.Unmarshaller . supports ( java.lang.Integer .class ) ) . willReturn ( false ) ; given ( org.springframework.http.converter.xml.Unmarshaller . supports ( java.lang.String .class ) ) . willReturn ( true ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . setUnmarshaller ( org.springframework.http.converter.xml.Unmarshaller ) ; assertFalse ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canRead ( java.lang.Boolean .class , MediaType . TEXT_PLAIN ) ) ; assertFalse ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canRead ( java.lang.Integer .class , MediaType . TEXT_XML ) ) ; assertTrue ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canRead ( java.lang.String .class , MediaType . TEXT_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Marshaller org.springframework.http.converter.xml.Marshaller = mock ( Marshaller .class ) ; given ( org.springframework.http.converter.xml.Marshaller . supports ( java.lang.Integer .class ) ) . willReturn ( false ) ; given ( org.springframework.http.converter.xml.Marshaller . supports ( java.lang.String .class ) ) . willReturn ( true ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . setMarshaller ( org.springframework.http.converter.xml.Marshaller ) ; assertFalse ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canWrite ( java.lang.Boolean .class , MediaType . TEXT_PLAIN ) ) ; assertFalse ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canWrite ( java.lang.Integer .class , MediaType . TEXT_XML ) ) ; assertTrue ( org.springframework.http.converter.xml.MarshallingHttpMessageConverter . canWrite ( java.lang.String .class , MediaType . TEXT_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( java.lang.String . byte[] ( STRING ) ) ; Unmarshaller org.springframework.http.converter.xml.Unmarshaller = mock ( Unmarshaller .class ) ; given ( org.springframework.http.converter.xml.Unmarshaller . unmarshal ( isA ( javax.xml.transform.stream.StreamSource .class ) ) ) . willReturn ( java.lang.String ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . setUnmarshaller ( org.springframework.http.converter.xml.Unmarshaller ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.http.converter.xml.MarshallingHttpMessageConverter . read ( java.lang.Object .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; assertEquals ( STRING , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = TypeMismatchException .class ) public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( new byte [ NUMBER ] ) ; Marshaller org.springframework.http.converter.xml.Marshaller = mock ( Marshaller .class ) ; Unmarshaller org.springframework.http.converter.xml.Unmarshaller = mock ( Unmarshaller .class ) ; given ( org.springframework.http.converter.xml.Unmarshaller . unmarshal ( isA ( javax.xml.transform.stream.StreamSource .class ) ) ) . willReturn ( java.lang.Integer . java.lang.Integer ( NUMBER ) ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( org.springframework.http.converter.xml.Marshaller , org.springframework.http.converter.xml.Unmarshaller ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . read ( java.lang.String .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpInputMessage org.springframework.http.converter.xml.MockHttpInputMessage = new MockHttpInputMessage ( new byte [ NUMBER ] ) ; UnmarshallingFailureException org.springframework.http.converter.xml.UnmarshallingFailureException = new UnmarshallingFailureException ( STRING ) ; Unmarshaller org.springframework.http.converter.xml.Unmarshaller = mock ( Unmarshaller .class ) ; given ( org.springframework.http.converter.xml.Unmarshaller . unmarshal ( isA ( javax.xml.transform.stream.StreamSource .class ) ) ) . willThrow ( org.springframework.http.converter.xml.UnmarshallingFailureException ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . setUnmarshaller ( org.springframework.http.converter.xml.Unmarshaller ) ; try { org.springframework.http.converter.xml.MarshallingHttpMessageConverter . read ( java.lang.Object .class , org.springframework.http.converter.xml.MockHttpInputMessage ) ; fail ( STRING ) ; } catch ( HttpMessageNotReadableException org.springframework.http.converter.xml.HttpMessageNotReadableException ) { assertTrue ( STRING , org.springframework.http.converter.xml.HttpMessageNotReadableException . getCause ( ) == org.springframework.http.converter.xml.UnmarshallingFailureException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; Marshaller org.springframework.http.converter.xml.Marshaller = mock ( Marshaller .class ) ; willDoNothing ( ) . given ( org.springframework.http.converter.xml.Marshaller ) . marshal ( eq ( java.lang.String ) , isA ( javax.xml.transform.Result .class ) ) ; MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( org.springframework.http.converter.xml.Marshaller ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . write ( java.lang.String , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; assertEquals ( STRING , new MediaType ( STRING , STRING ) , org.springframework.http.converter.xml.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MockHttpOutputMessage org.springframework.http.converter.xml.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; MarshallingFailureException org.springframework.http.converter.xml.MarshallingFailureException = new MarshallingFailureException ( STRING ) ; Marshaller org.springframework.http.converter.xml.Marshaller = mock ( Marshaller .class ) ; willThrow ( org.springframework.http.converter.xml.MarshallingFailureException ) . given ( org.springframework.http.converter.xml.Marshaller ) . marshal ( eq ( java.lang.String ) , isA ( javax.xml.transform.Result .class ) ) ; try { MarshallingHttpMessageConverter org.springframework.http.converter.xml.MarshallingHttpMessageConverter = new MarshallingHttpMessageConverter ( org.springframework.http.converter.xml.Marshaller ) ; org.springframework.http.converter.xml.MarshallingHttpMessageConverter . write ( java.lang.String , null , org.springframework.http.converter.xml.MockHttpOutputMessage ) ; fail ( STRING ) ; } catch ( HttpMessageNotWritableException org.springframework.http.converter.xml.HttpMessageNotWritableException ) { assertTrue ( STRING , org.springframework.http.converter.xml.HttpMessageNotWritableException . getCause ( ) == org.springframework.http.converter.xml.MarshallingFailureException ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) java.lang.Exception { new MarshallingHttpMessageConverter ( ) . supports ( java.lang.Object .class ) ; }  <METHOD_END>
