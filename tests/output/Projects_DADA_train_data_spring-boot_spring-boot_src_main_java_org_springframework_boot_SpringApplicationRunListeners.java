<METHOD_START> void ( Log org.springframework.boot.Log , java.util.Collection<? extends org.springframework.boot.SpringApplicationRunListener> < ? extends SpringApplicationRunListener > java.util.Collection<? extends org.springframework.boot.SpringApplicationRunListener> ) { this . org.springframework.boot.Log = org.springframework.boot.Log ; this . java.util.List<org.springframework.boot.SpringApplicationRunListener> = new java.util.ArrayList <> ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { for ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener : this . java.util.List<org.springframework.boot.SpringApplicationRunListener> ) { org.springframework.boot.SpringApplicationRunListener . starting ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { for ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener : this . java.util.List<org.springframework.boot.SpringApplicationRunListener> ) { org.springframework.boot.SpringApplicationRunListener . environmentPrepared ( org.springframework.boot.ConfigurableEnvironment ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { for ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener : this . java.util.List<org.springframework.boot.SpringApplicationRunListener> ) { org.springframework.boot.SpringApplicationRunListener . contextPrepared ( org.springframework.boot.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { for ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener : this . java.util.List<org.springframework.boot.SpringApplicationRunListener> ) { org.springframework.boot.SpringApplicationRunListener . contextLoaded ( org.springframework.boot.ConfigurableApplicationContext ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable java.lang.Throwable ) { for ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener : this . java.util.List<org.springframework.boot.SpringApplicationRunListener> ) { void ( org.springframework.boot.SpringApplicationRunListener , org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( SpringApplicationRunListener org.springframework.boot.SpringApplicationRunListener , ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable java.lang.Throwable ) { try { org.springframework.boot.SpringApplicationRunListener . finished ( org.springframework.boot.ConfigurableApplicationContext , java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable == null ) { ReflectionUtils . rethrowRuntimeException ( java.lang.Throwable ) ; } if ( this . org.springframework.boot.Log . isDebugEnabled ( ) ) { this . org.springframework.boot.Log . error ( STRING , java.lang.Throwable ) ; } else { java.lang.String java.lang.String = java.lang.Throwable . java.lang.String ( ) ; java.lang.String = ( java.lang.String == null ? STRING : java.lang.String ) ; this . org.springframework.boot.Log . warn ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
