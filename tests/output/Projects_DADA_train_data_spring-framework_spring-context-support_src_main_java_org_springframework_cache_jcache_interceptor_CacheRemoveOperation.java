<METHOD_START> public void ( CacheMethodDetails < CacheRemove > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ) { super( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> , org.springframework.cache.jcache.interceptor.CacheResolver , org.springframework.cache.jcache.interceptor.KeyGenerator ); CacheRemove org.springframework.cache.jcache.interceptor.CacheRemove = org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheRemove> . getCacheAnnotation ( ) ; this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter = createExceptionTypeFilter ( org.springframework.cache.jcache.interceptor.CacheRemove . evictFor ( ) , org.springframework.cache.jcache.interceptor.CacheRemove . noEvictFor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.jcache.interceptor.ExceptionTypeFilter org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ( ) { return this . org.springframework.cache.jcache.interceptor.ExceptionTypeFilter ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! getCacheAnnotation ( ) . afterInvocation ( ) ; }  <METHOD_END>
