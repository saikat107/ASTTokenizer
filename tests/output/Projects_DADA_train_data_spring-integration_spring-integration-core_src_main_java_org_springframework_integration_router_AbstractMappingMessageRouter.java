<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.router.MessageChannel> < java.lang.String , MessageChannel > java.util.Map.Entry<java.lang.String,org.springframework.integration.router.MessageChannel> ) { return this . int ( ) > org.springframework.integration.router.AbstractMappingMessageRouter .this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( java.util.Map<java.lang.String,java.lang.String> ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { return new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( this . java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedOperation public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( this . java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedOperation public void void ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( this . java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set ( this . java.util.Map<java.lang.String,org.springframework.integration.router.MessageChannel> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.router.Message<?> );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> ( Message < ? > org.springframework.integration.router.Message<?> ) { java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> = new java.util.ArrayList<org.springframework.integration.router.MessageChannel> < MessageChannel > ( ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = this . java.util.List<java.lang.Object> ( org.springframework.integration.router.Message<> ) ; void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , java.util.Collection<java.lang.Object> , org.springframework.integration.router.Message<> ) ; return java.util.Collection<org.springframework.integration.router.MessageChannel> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedOperation public void void ( java.util.Properties java.util.Properties ) { Assert . notNull ( java.util.Properties , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Properties . java.util.Set<java.lang.String> ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String . java.lang.String ( ) , java.util.Properties . java.lang.String ( java.lang.String ) . java.lang.String ( ) ) ; } this . void ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . java.util.Map<java.lang.String,java.lang.String> ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Map<java.lang.String,java.lang.String> + STRING + java.util.Map<java.lang.String,java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.router.MessageChannel org.springframework.integration.router.MessageChannel ( java.lang.String java.lang.String , Message < ? > org.springframework.integration.router.Message<?> ) { MessageChannel org.springframework.integration.router.MessageChannel = null ; try { org.springframework.integration.router.MessageChannel = getChannelResolver ( ) . resolveDestination ( java.lang.String ) ; } catch ( DestinationResolutionException org.springframework.integration.router.DestinationResolutionException ) { if ( this . boolean ) { throw new MessagingException ( org.springframework.integration.router.Message<> , STRING + java.lang.String + STRING , org.springframework.integration.router.DestinationResolutionException ) ; } } if ( org.springframework.integration.router.MessageChannel == null && this . boolean ) { throw new MessagingException ( org.springframework.integration.router.Message<> , STRING + java.lang.String + STRING ) ; } return org.springframework.integration.router.MessageChannel ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> , java.lang.String java.lang.String , Message < ? > org.springframework.integration.router.Message<?> ) { if ( java.lang.String . int ( ',' ) != - NUMBER ) { for ( java.lang.String java.lang.String : StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , java.lang.String , org.springframework.integration.router.Message<> ) ; } return; } java.lang.String java.lang.String = java.lang.String ; boolean boolean = false ; if ( this . java.util.Map<java.lang.String,java.lang.String> . boolean ( java.lang.String ) ) { java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; boolean = true ; } if ( this . java.lang.String != null ) { java.lang.String = this . java.lang.String + java.lang.String ; } if ( this . java.lang.String != null ) { java.lang.String = java.lang.String + this . java.lang.String ; } MessageChannel org.springframework.integration.router.MessageChannel = org.springframework.integration.router.MessageChannel ( java.lang.String , org.springframework.integration.router.Message<> ) ; if ( org.springframework.integration.router.MessageChannel != null ) { java.util.Collection<org.springframework.integration.router.MessageChannel> . add ( org.springframework.integration.router.MessageChannel ) ; if ( ! boolean && ! ( this . java.util.Map<java.lang.String,org.springframework.integration.router.MessageChannel> . get ( java.lang.String ) != null ) ) { this . java.util.Map<java.lang.String,org.springframework.integration.router.MessageChannel> . put ( java.lang.String , org.springframework.integration.router.MessageChannel ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.integration.router.MessageChannel> < MessageChannel > java.util.Collection<org.springframework.integration.router.MessageChannel> , java.util.Collection<?> < ? > java.util.Collection<?> , Message < ? > org.springframework.integration.router.Message<?> ) { if ( java.util.Collection<> == null ) { return; } for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object == null ) { continue; } else if ( java.lang.Object instanceof MessageChannel ) { java.util.Collection<org.springframework.integration.router.MessageChannel> . add ( ( MessageChannel ) java.lang.Object ) ; } else if ( java.lang.Object instanceof MessageChannel [] ) { java.util.Collection<org.springframework.integration.router.MessageChannel> . addAll ( java.util.Arrays . java.util.List<T> ( ( MessageChannel [] ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , ( java.lang.String ) java.lang.Object , org.springframework.integration.router.Message<> ) ; } else if ( java.lang.Object instanceof java.lang.Class ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) , org.springframework.integration.router.Message<> ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { for ( java.lang.String java.lang.String : ( java.lang.String [] ) java.lang.Object ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , java.lang.String , org.springframework.integration.router.Message<> ) ; } } else if ( java.lang.Object instanceof java.util.Collection ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , ( java.util.Collection<?> < ? > ) java.lang.Object , org.springframework.integration.router.Message<> ) ; } else if ( getRequiredConversionService ( ) . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { void ( java.util.Collection<org.springframework.integration.router.MessageChannel> , getConversionService ( ) . convert ( java.lang.Object , java.lang.String .class ) , org.springframework.integration.router.Message<> ) ; } else { throw new MessagingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } } }  <METHOD_END>
