<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.cassandra.config.Cluster . connect ( ) ) . thenReturn ( org.springframework.data.cassandra.config.Session ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean = spy ( new CassandraSessionFactoryBean ( ) ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setCluster ( org.springframework.data.cassandra.config.Cluster ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.config.CqlIdentifier org.springframework.data.cassandra.config.CqlIdentifier ( java.lang.String java.lang.String ) { return new CqlIdentifier ( java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { doAnswer ( invocationOnMock -> { assertThat ( factoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . RECREATE ) ; return null ; } ) . when ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean ) . performSchemaAction ( ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setConverter ( org.springframework.data.cassandra.config.CassandraConverter ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( SchemaAction . RECREATE ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getConverter ( ) ) . isEqualTo ( org.springframework.data.cassandra.config.CassandraConverter ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . RECREATE ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getCassandraAdminOperations ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getObject ( ) ) . isEqualTo ( org.springframework.data.cassandra.config.Session ) ; verify ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean , times ( NUMBER ) ) . performSchemaAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setCluster ( org.springframework.data.cassandra.config.Cluster ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( SchemaAction org.springframework.data.cassandra.config.SchemaAction , final boolean boolean , final boolean boolean , final boolean boolean ) { doAnswer ( invocationOnMock -> { assertThat ( invocationOnMock .< Boolean > getArgument ( NUMBER ) ) . isEqualTo ( dropTables ) ; assertThat ( invocationOnMock .< Boolean > getArgument ( NUMBER ) ) . isEqualTo ( dropUnused ) ; assertThat ( invocationOnMock .< Boolean > getArgument ( NUMBER ) ) . isEqualTo ( ifNotExists ) ; return null ; } ) . when ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean ) . createTables ( anyBoolean ( ) , anyBoolean ( ) , anyBoolean ( ) ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( org.springframework.data.cassandra.config.SchemaAction ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( org.springframework.data.cassandra.config.SchemaAction ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . performSchemaAction ( ) ; verify ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean , times ( NUMBER ) ) . createTables ( eq ( boolean ) , eq ( boolean ) , eq ( boolean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( SchemaAction . CREATE , DEFAULT_DROP_TABLES , DEFAULT_DROP_UNUSED_TABLES , DEFAULT_CREATE_IF_NOT_EXISTS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( SchemaAction . CREATE_IF_NOT_EXISTS , DEFAULT_DROP_TABLES , DEFAULT_DROP_UNUSED_TABLES , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( SchemaAction . RECREATE , true , DEFAULT_DROP_UNUSED_TABLES , DEFAULT_CREATE_IF_NOT_EXISTS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( SchemaAction . RECREATE_DROP_UNUSED , true , true , DEFAULT_CREATE_IF_NOT_EXISTS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( SchemaAction . NONE ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . NONE ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . performSchemaAction ( ) ; verify ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean , never ( ) ) . createTables ( anyBoolean ( ) , anyBoolean ( ) , anyBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getConverter ( ) ) . isNull ( ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setConverter ( org.springframework.data.cassandra.config.CassandraConverter ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getConverter ( ) ) . isEqualTo ( org.springframework.data.cassandra.config.CassandraConverter ) ; verifyZeroInteractions ( org.springframework.data.cassandra.config.CassandraConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setConverter ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . NONE ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( SchemaAction . CREATE ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . CREATE ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( SchemaAction . NONE ) ; assertThat ( org.springframework.data.cassandra.config.CassandraSessionFactoryBean . getSchemaAction ( ) ) . isEqualTo ( SchemaAction . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.config.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.cassandra.config.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.cassandra.config.CassandraSessionFactoryBean . setSchemaAction ( null ) ; }  <METHOD_END>
