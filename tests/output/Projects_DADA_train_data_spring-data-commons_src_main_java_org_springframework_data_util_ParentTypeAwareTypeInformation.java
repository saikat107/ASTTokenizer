<METHOD_START> protected void ( java.lang.reflect.Type java.lang.reflect.Type , TypeDiscoverer < ? > org.springframework.data.util.TypeDiscoverer<?> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) { super( java.lang.reflect.Type , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( org.springframework.data.util.TypeDiscoverer<> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ); this . org.springframework.data.util.TypeDiscoverer<?> = org.springframework.data.util.TypeDiscoverer<> ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ( TypeDiscoverer < ? > org.springframework.data.util.TypeDiscoverer<?> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) { java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> = new java.util.HashMap<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> <> ( ) ; java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . void ( java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) ; java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> . void ( org.springframework.data.util.TypeDiscoverer<> . getTypeVariableMap ( ) ) ; return java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( java.lang.reflect.Type java.lang.reflect.Type ) { if ( org.springframework.data.util.TypeDiscoverer<> . getType ( ) . equals ( java.lang.reflect.Type ) ) { return org.springframework.data.util.TypeDiscoverer<> ; } return super. createInfo ( java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! super. boolean ( java.lang.Object ) ) { return false ; } if ( ! this . java.lang.Class<? extends org.springframework.data.util.ParentTypeAwareTypeInformation> ( ) . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return false ; } org.springframework.data.util.ParentTypeAwareTypeInformation<?> < ? > org.springframework.data.util.ParentTypeAwareTypeInformation<?> = ( org.springframework.data.util.ParentTypeAwareTypeInformation<?> < ? > ) java.lang.Object ; return this . org.springframework.data.util.TypeDiscoverer<> == null ? org.springframework.data.util.ParentTypeAwareTypeInformation<> . org.springframework.data.util.TypeDiscoverer<> == null : this . org.springframework.data.util.TypeDiscoverer<> . equals ( org.springframework.data.util.ParentTypeAwareTypeInformation<> . org.springframework.data.util.TypeDiscoverer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { if ( this . int == NUMBER ) { this . int = super. int ( ) + NUMBER * org.springframework.data.util.TypeDiscoverer<> . hashCode ( ) ; } return this . int ; }  <METHOD_END>
