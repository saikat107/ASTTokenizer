<METHOD_START> @ After public void void ( ) { org.springframework.data.couchbase.repository.auditing.AuditedRepository . getCouchbaseOperations ( ) . getCouchbaseBucket ( ) . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.data.couchbase.repository.auditing.AuditedRepository . exists ( java.lang.String ) ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; AuditedItem org.springframework.data.couchbase.repository.auditing.AuditedItem = new AuditedItem ( java.lang.String , STRING ) ; org.springframework.data.couchbase.repository.auditing.AuditedAuditorAware . setAuditor ( STRING ) ; org.springframework.data.couchbase.repository.auditing.AuditedRepository . save ( org.springframework.data.couchbase.repository.auditing.AuditedItem ) ; java.util.Optional<org.springframework.data.couchbase.repository.auditing.AuditedItem> < AuditedItem > java.util.Optional<org.springframework.data.couchbase.repository.auditing.AuditedItem> = org.springframework.data.couchbase.repository.auditing.AuditedRepository . findOne ( java.lang.String ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.auditing.AuditedItem> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.auditing.AuditedItem> . ifPresent ( actual -> { assertNotNull ( STRING , actual . getCreationDate ( ) ) ; assertEquals ( STRING , STRING , actual . getCreator ( ) ) ; assertTrue ( STRING , actual . getCreationDate ( ) . after ( start ) ) ; assertTrue ( STRING , actual . getCreationDate ( ) . before ( new Date ( ) ) ) ; assertNull ( STRING , actual . getLastModification ( ) ) ; assertNull ( STRING , actual . getLastModifiedBy ( ) ) ; assertNotNull ( STRING , actual . getVersion ( ) ) ; assertTrue ( STRING , actual . getVersion ( ) > NUMBER ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( org.springframework.data.couchbase.repository.auditing.AuditedRepository . exists ( java.lang.String ) ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; AuditedItem org.springframework.data.couchbase.repository.auditing.AuditedItem = new AuditedItem ( java.lang.String , STRING ) ; org.springframework.data.couchbase.repository.auditing.AuditedAuditorAware . setAuditor ( java.lang.String ) ; org.springframework.data.couchbase.repository.auditing.AuditedRepository . save ( org.springframework.data.couchbase.repository.auditing.AuditedItem ) ; AuditedItem org.springframework.data.couchbase.repository.auditing.AuditedItem = org.springframework.data.couchbase.repository.auditing.AuditedRepository . findOne ( java.lang.String ) . orElse ( null ) ; org.springframework.data.couchbase.repository.auditing.AuditedAuditorAware . setAuditor ( java.lang.String ) ; org.springframework.data.couchbase.repository.auditing.AuditedRepository . save ( org.springframework.data.couchbase.repository.auditing.AuditedItem ) ; AuditedItem org.springframework.data.couchbase.repository.auditing.AuditedItem = org.springframework.data.couchbase.repository.auditing.AuditedRepository . findOne ( java.lang.String ) . orElse ( null ) ; assertNotNull ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem ) ; assertNotNull ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getCreationDate ( ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.data.couchbase.repository.auditing.AuditedItem . getCreator ( ) ) ; assertNotNull ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getLastModification ( ) ) ; assertTrue ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getCreationDate ( ) . before ( org.springframework.data.couchbase.repository.auditing.AuditedItem . getLastModification ( ) ) ) ; assertEquals ( STRING , java.lang.String , org.springframework.data.couchbase.repository.auditing.AuditedItem . getLastModifiedBy ( ) ) ; assertNotNull ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getVersion ( ) ) ; assertTrue ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getVersion ( ) > NUMBER ) ; assertTrue ( STRING , org.springframework.data.couchbase.repository.auditing.AuditedItem . getVersion ( ) != org.springframework.data.couchbase.repository.auditing.AuditedItem . getVersion ( ) ) ; }  <METHOD_END>
