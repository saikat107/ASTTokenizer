<METHOD_START> public void ( java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> < CallableProcessingInterceptor > java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ) { this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> = java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ) throws java.lang.Exception { for ( CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ) { org.springframework.web.context.request.async.CallableProcessingInterceptor . beforeConcurrentHandling ( org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<> ) ; } }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ) throws java.lang.Exception { for ( CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ) { org.springframework.web.context.request.async.CallableProcessingInterceptor . preProcess ( org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<> ) ; this . int ++ ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> , java.lang.Object java.lang.Object ) { java.lang.Throwable java.lang.Throwable = null ; for ( int int = this . int ; int >= NUMBER ; int -- ) { try { this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . get ( int ) . postProcess ( org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<> , java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable != null ) { org.springframework.web.context.request.async.Log . error ( STRING , java.lang.Throwable ) ; } else { java.lang.Throwable = java.lang.Throwable ; } } } return ( java.lang.Throwable != null ) ? java.lang.Throwable : java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ) { for ( CallableProcessingInterceptor org.springframework.web.context.request.async.CallableProcessingInterceptor : this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> ) { try { java.lang.Object java.lang.Object = org.springframework.web.context.request.async.CallableProcessingInterceptor . handleTimeout ( org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<> ) ; if ( java.lang.Object == CallableProcessingInterceptor . RESPONSE_HANDLED ) { break; } else if ( java.lang.Object != CallableProcessingInterceptor . RESULT_NONE ) { return java.lang.Object ; } } catch ( java.lang.Throwable java.lang.Throwable ) { return java.lang.Throwable ; } } return CallableProcessingInterceptor . RESULT_NONE ; }  <METHOD_END>
<METHOD_START> public void void ( NativeWebRequest org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<?> < ? > java.util.concurrent.Callable<?> ) { for ( int int = this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . size ( ) - NUMBER ; int >= NUMBER ; int -- ) { try { this . java.util.List<org.springframework.web.context.request.async.CallableProcessingInterceptor> . get ( int ) . afterCompletion ( org.springframework.web.context.request.async.NativeWebRequest , java.util.concurrent.Callable<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.context.request.async.Log . error ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
