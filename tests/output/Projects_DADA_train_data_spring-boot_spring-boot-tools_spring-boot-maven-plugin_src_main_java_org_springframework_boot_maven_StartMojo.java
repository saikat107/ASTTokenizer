<METHOD_START> @ java.lang.Override protected void void ( java.io.File java.io.File , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> )			throws org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { RunProcess org.springframework.boot.maven.RunProcess = org.springframework.boot.maven.RunProcess ( java.io.File , java.util.List<java.lang.String> ) ; try { void ( ) ; } catch ( MojoExecutionException org.springframework.boot.maven.MojoExecutionException ) { org.springframework.boot.maven.RunProcess . kill ( ) ; throw org.springframework.boot.maven.MojoExecutionException ; } catch ( MojoFailureException org.springframework.boot.maven.MojoFailureException ) { org.springframework.boot.maven.RunProcess . kill ( ) ; throw org.springframework.boot.maven.MojoFailureException ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.maven.RunProcess org.springframework.boot.maven.RunProcess ( java.io.File java.io.File , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> )			throws org.springframework.boot.maven.MojoExecutionException { try { RunProcess org.springframework.boot.maven.RunProcess = new RunProcess ( java.io.File , new JavaExecutable ( ) . toString ( ) ) ; org.springframework.boot.maven.RunProcess . run ( false , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; return org.springframework.boot.maven.RunProcess ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MojoExecutionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.maven.RunArguments org.springframework.boot.maven.RunArguments ( ) { RunArguments org.springframework.boot.maven.RunArguments = super. resolveApplicationArguments ( ) ; org.springframework.boot.maven.RunArguments . getArgs ( ) . addLast ( java.lang.String ) ; if ( isFork ( ) ) { org.springframework.boot.maven.RunArguments . getArgs ( ) . addLast ( java.lang.String + this . java.lang.String ) ; } return org.springframework.boot.maven.RunArguments ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.maven.RunArguments org.springframework.boot.maven.RunArguments ( ) { RunArguments org.springframework.boot.maven.RunArguments = super. resolveJvmArguments ( ) ; if ( isFork ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING + this . int ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.boot.maven.RunArguments . getArgs ( ) . addAll ( java.util.List<java.lang.String> ) ; } return org.springframework.boot.maven.RunArguments ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] )			throws org.springframework.boot.maven.MojoExecutionException { IsolatedThreadGroup org.springframework.boot.maven.IsolatedThreadGroup = new IsolatedThreadGroup ( java.lang.String ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( org.springframework.boot.maven.IsolatedThreadGroup , new LaunchRunner ( java.lang.String , java.lang.String[] ) , java.lang.String + STRING ) ; java.lang.Thread . void ( new java.net.URLClassLoader ( getClassPathUrls ( ) ) ) ; java.lang.Thread . void ( ) ; void ( this . long , this . int ) ; }  <METHOD_END>
<METHOD_START> private void void ( long long , int int )			throws org.springframework.boot.maven.MojoExecutionException { SpringApplicationAdminClient org.springframework.boot.maven.SpringApplicationAdminClient = new SpringApplicationAdminClient ( java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) , this . java.lang.String ) ; getLog ( ) . debug ( STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( org.springframework.boot.maven.SpringApplicationAdminClient . isReady ( ) ) { return; } java.lang.String java.lang.String = STRING + long + STRING + ( int + NUMBER ) + STRING ; getLog ( ) . debug ( java.lang.String ) ; synchronized ( this . java.lang.Object ) { try { this . java.lang.Object . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } } throw new MojoExecutionException ( STRING + ( long * int ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.maven.MojoFailureException , org.springframework.boot.maven.MojoExecutionException { try { if ( isFork ( ) ) { void ( ) ; } else { void ( java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MojoFailureException ( STRING , java.io.IOException ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MojoExecutionException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException , org.springframework.boot.maven.MojoFailureException , org.springframework.boot.maven.MojoExecutionException { try { getLog ( ) . debug ( STRING + this . int ) ; javax.management.remote.JMXConnector javax.management.remote.JMXConnector = javax.management.remote.JMXConnector ( this . long , this . int , new org.springframework.boot.maven.StartMojo.CreateJmxConnector ( this . int ) ) ; if ( javax.management.remote.JMXConnector == null ) { throw new MojoExecutionException ( STRING + STRING + ( this . long * this . int ) + STRING ) ; } getLog ( ) . debug ( STRING + this . int ) ; try { javax.management.MBeanServerConnection javax.management.MBeanServerConnection = javax.management.remote.JMXConnector . javax.management.MBeanServerConnection ( ) ; void ( javax.management.MBeanServerConnection ) ; } finally { javax.management.remote.JMXConnector . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { throw java.io.IOException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MojoExecutionException ( STRING + this . int , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.management.MBeanServerConnection javax.management.MBeanServerConnection )			throws java.io.IOException , org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { final SpringApplicationAdminClient org.springframework.boot.maven.SpringApplicationAdminClient = new SpringApplicationAdminClient ( javax.management.MBeanServerConnection , this . java.lang.String ) ; try { java.lang.Boolean ( this . long , this . int , new java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.Exception { return ( org.springframework.boot.maven.SpringApplicationAdminClient . isReady ( ) ? true : null ) ; } } ) ; } catch ( javax.management.ReflectionException javax.management.ReflectionException ) { throw new MojoExecutionException ( STRING , javax.management.ReflectionException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MojoFailureException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.Exception { return ( org.springframework.boot.maven.SpringApplicationAdminClient . isReady ( ) ? true : null ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( long long , int int , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> )			throws java.lang.Exception { getLog ( ) . debug ( STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { T T = java.util.concurrent.Callable<T> . T ( ) ; if ( T != null ) { return T ; } java.lang.String java.lang.String = STRING + long + STRING + ( int + NUMBER ) + STRING ; getLog ( ) . debug ( java.lang.String ) ; synchronized ( this . java.lang.Object ) { try { this . java.lang.Object . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } } throw new MojoExecutionException ( STRING + STRING + ( long * int ) + STRING ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.management.remote.JMXConnector javax.management.remote.JMXConnector ( ) java.lang.Exception { try { return SpringApplicationAdminClient . connect ( this . int ) ; } catch ( java.io.IOException java.io.IOException ) { if ( boolean ( java.io.IOException , java.net.ConnectException .class ) ) { java.lang.String java.lang.String = STRING + this . int + STRING ; getLog ( ) . debug ( java.lang.String ) ; return null ; } throw java.io.IOException ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Throwable java.lang.Throwable , java.lang.Class<? extends java.lang.Exception> < ? extends java.lang.Exception > java.lang.Class<? extends java.lang.Exception> ) { return java.lang.Class<> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) || java.lang.Throwable . java.lang.Throwable ( ) != null && boolean ( java.lang.Throwable . java.lang.Throwable ( ) , java.lang.Class<> ) ; }  <METHOD_END>
