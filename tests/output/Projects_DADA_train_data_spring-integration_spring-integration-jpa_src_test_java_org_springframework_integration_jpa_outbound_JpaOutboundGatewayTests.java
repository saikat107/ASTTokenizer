<METHOD_START> @ After public void void ( ) { this . org.springframework.integration.jpa.outbound.JdbcTemplate . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . getStudent ( NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.jpa.outbound.StudentService . getAllStudentsFromGivenRecord ( NUMBER ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.jpa.outbound.StudentService . getStudents ( NUMBER ) ; Assert . assertNotNull ( java.util.List<> ) ; Assert . assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; org.springframework.integration.jpa.outbound.StudentDomain . setRollNumber ( NUMBER ) ; try { org.springframework.integration.jpa.outbound.StudentService . deleteStudent ( org.springframework.integration.jpa.outbound.StudentDomain ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { org.springframework.integration.jpa.outbound.StudentService . getStudentWithException ( NUMBER ) ; } catch ( MessagingException org.springframework.integration.jpa.outbound.MessagingException ) { Assert . assertEquals ( STRING , org.springframework.integration.jpa.outbound.MessagingException . getMessage ( ) ) ; return; } Assert . fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . getStudentWithParameters ( STRING ) ; Assert . assertEquals ( STRING , org.springframework.integration.jpa.outbound.StudentDomain . getFirstName ( ) ) ; Assert . assertEquals ( STRING , org.springframework.integration.jpa.outbound.StudentDomain . getLastName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> < StudentDomain > java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> = org.springframework.integration.jpa.outbound.StudentService . getAllStudents ( ) ; Assert . assertNotNull ( java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> ) ; Assert . assertTrue ( java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> . size ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . persistStudent ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . persistStudentUsingMerge ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . getStudent2 ( NUMBER ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = JpaTestUtils . getTestStudent ( ) ; Assert . assertNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; final StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = org.springframework.integration.jpa.outbound.StudentService . persistStudent2 ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain ) ; Assert . assertNotNull ( org.springframework.integration.jpa.outbound.StudentDomain . getRollNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> < StudentDomain > java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> = this . org.springframework.integration.jpa.outbound.StudentService . getStudentsUsingJpaRepository ( STRING ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.integration.jpa.outbound.StudentDomain> . size ( ) ) ; }  <METHOD_END>
