<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING , java.lang.Integer .class ) ; byte [] byte[] = STRING . byte[] ( STRING ) ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int , new java.net.InetSocketAddress ( STRING , int ) ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( ) ; java.lang.Thread . void ( NUMBER ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( ) ; Message < ? > org.springframework.integration.syslog.config.Message<?> = org.springframework.integration.syslog.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.syslog.config.Message<> ) ; org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertFalse ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter . getPhase ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests.PassThruConverter , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractServerConnectionFactory org.springframework.integration.syslog.config.AbstractServerConnectionFactory = TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING , AbstractServerConnectionFactory .class ) ; int int = org.springframework.integration.syslog.config.AbstractServerConnectionFactory . getPort ( ) ; void ( org.springframework.integration.syslog.config.AbstractServerConnectionFactory , NUMBER ) ; byte [] byte[] = STRING . byte[] ( STRING ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( STRING , int ) ; java.lang.Thread . void ( NUMBER ) ; java.net.Socket . java.io.OutputStream ( ) . void ( byte[] ) ; java.net.Socket . void ( ) ; Message < ? > org.springframework.integration.syslog.config.Message<?> = org.springframework.integration.syslog.config.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.syslog.config.Message<> ) ; org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter . stop ( ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING ) ) ; assertFalse ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter . isAutoStartup ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter . getPhase ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.UdpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.RFC5424MessageConverter , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.PollableChannel , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING ) ) ; assertSame ( org.springframework.integration.syslog.config.AbstractServerConnectionFactory , TestUtils . getPropertyValue ( org.springframework.integration.syslog.config.TcpSyslogReceivingChannelAdapter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.syslog.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.syslog.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.syslog.config.BeanCreationException ) { assertEquals ( STRING , org.springframework.integration.syslog.config.BeanCreationException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.syslog.config.BeanCreationException ) { org.springframework.integration.syslog.config.BeanCreationException . printStackTrace ( ) ; assertEquals ( STRING , org.springframework.integration.syslog.config.BeanCreationException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) . java.lang.String ( ) + STRING , this . java.lang.Class<? extends org.springframework.integration.syslog.config.SyslogReceivingChannelAdapterParserTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.integration.syslog.config.BeanCreationException ) { assertEquals ( STRING , org.springframework.integration.syslog.config.BeanCreationException . getCause ( ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.syslog.config.Message<?> < ? > org.springframework.integration.syslog.config.Message<?> ( Message < ? > org.springframework.integration.syslog.config.Message<?> ) throws java.lang.Exception { return org.springframework.integration.syslog.config.Message<> ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.syslog.config.AbstractServerConnectionFactory , java.lang.Long java.lang.Long )		throws java.lang.IllegalStateException { if ( java.lang.Long == null ) { java.lang.Long = NUMBER ; } else { java.lang.Long = java.lang.Long / NUMBER ; } int int = NUMBER ; while ( ! org.springframework.integration.syslog.config.AbstractServerConnectionFactory . isListening ( ) ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } if ( int ++ > java.lang.Long ) { throw new java.lang.IllegalStateException ( STRING ) ; } } }  <METHOD_END>
