<METHOD_START> void ( WebClient . WebClient WebClient.Builder , ClientHttpConnector org.springframework.test.web.reactive.server.ClientHttpConnector , ExchangeMutatorWebFilter org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter , java.time.Duration java.time.Duration ) { Assert . notNull ( WebClient.Builder , STRING ) ; this . org.springframework.test.web.reactive.server.WiretapConnector = new WiretapConnector ( org.springframework.test.web.reactive.server.ClientHttpConnector ) ; this . org.springframework.test.web.reactive.server.WebClient = WebClient.Builder . clientConnector ( this . org.springframework.test.web.reactive.server.WiretapConnector ) . build ( ) ; this . org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter = org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter ; this . java.time.Duration = ( java.time.Duration != null ? java.time.Duration : java.time.Duration . java.time.Duration ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private void ( org.springframework.test.web.reactive.server.DefaultWebTestClient org.springframework.test.web.reactive.server.DefaultWebTestClient , ExchangeFilterFunction org.springframework.test.web.reactive.server.ExchangeFilterFunction ) { this . org.springframework.test.web.reactive.server.WebClient = org.springframework.test.web.reactive.server.DefaultWebTestClient . org.springframework.test.web.reactive.server.WebClient . filter ( org.springframework.test.web.reactive.server.ExchangeFilterFunction ) ; this . org.springframework.test.web.reactive.server.WiretapConnector = org.springframework.test.web.reactive.server.DefaultWebTestClient . org.springframework.test.web.reactive.server.WiretapConnector ; this . org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter = org.springframework.test.web.reactive.server.DefaultWebTestClient . org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter ; this . java.time.Duration = org.springframework.test.web.reactive.server.DefaultWebTestClient . java.time.Duration ; }  <METHOD_END>
<METHOD_START> private java.time.Duration java.time.Duration ( ) { return this . java.time.Duration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . GET ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . HEAD ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> < RequestBodySpec > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> < RequestBodySpec > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . PUT ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> < RequestBodySpec > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestBodySpec> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . PATCH ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . DELETE ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> < RequestHeadersSpec < ? > > org.springframework.test.web.reactive.server.UriSpec<org.springframework.test.web.reactive.server.RequestHeadersSpec<?>> ( ) { return toUriSpec ( wc -> wc . method ( HttpMethod . OPTIONS ) ) ; }  <METHOD_END>
<METHOD_START> private < S extends org.springframework.test.web.reactive.server.RequestHeadersSpec<?> < ? > > UriSpec < S > toUriSpec ( java.util.function.Function < WebClient , WebClient . WebClient < WebClient . WebClient > > function ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultUriSpec <> ( function . apply ( this . org.springframework.test.web.reactive.server.WebClient ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.WebTestClient org.springframework.test.web.reactive.server.WebTestClient ( ExchangeFilterFunction org.springframework.test.web.reactive.server.ExchangeFilterFunction ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient ( this , org.springframework.test.web.reactive.server.ExchangeFilterFunction ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.WebTestClient org.springframework.test.web.reactive.server.WebTestClient ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> < ServerWebExchange > java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> ) { Assert . notNull ( this . org.springframework.test.web.reactive.server.ExchangeMutatorWebFilter , STRING ) ; return org.springframework.test.web.reactive.server.WebTestClient ( ( request , next ) -> { String requestId = request . headers ( ) . getFirst ( WiretapConnector . REQUEST_ID_HEADER_NAME ) ; Assert . notNull ( requestId , STRING ) ; this . exchangeMutatorWebFilter . register ( requestId , mutator ) ; return next . exchange ( request ) ; } ) ; }  <METHOD_END>
<METHOD_START> DefaultUriSpec ( WebClient . WebClient < WebClient . WebClient > spec ) { this . uriSpec = spec ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.net.URI java.net.URI ) { return ( S ) new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultRequestBodySpec ( this . uriSpec . uri ( java.net.URI ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { return ( S ) new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultRequestBodySpec ( this . uriSpec . uri ( java.lang.String , java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return ( S ) new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultRequestBodySpec ( this . uriSpec . uri ( java.lang.String , java.util.Map<java.lang.String,> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public S S ( java.util.function.Function<org.springframework.test.web.reactive.server.UriBuilder,java.net.URI> < UriBuilder , java.net.URI > java.util.function.Function<org.springframework.test.web.reactive.server.UriBuilder,java.net.URI> ) { return ( S ) new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultRequestBodySpec ( this . uriSpec . uri ( java.util.function.Function<org.springframework.test.web.reactive.server.UriBuilder,java.net.URI> ) ) ; }  <METHOD_END>
<METHOD_START> void ( WebClient . WebClient WebClient.RequestBodySpec ) { this . WebClient.RequestBodySpec = WebClient.RequestBodySpec ; this . java.lang.String = java.lang.String . java.lang.String ( java.util.concurrent.atomic.AtomicLong . long ( ) ) ; this . WebClient.RequestBodySpec . header ( WiretapConnector . REQUEST_ID_HEADER_NAME , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { this . WebClient.RequestBodySpec . header ( java.lang.String , java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( HttpHeaders org.springframework.test.web.reactive.server.HttpHeaders ) { this . WebClient.RequestBodySpec . headers ( org.springframework.test.web.reactive.server.HttpHeaders ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( MediaType ... org.springframework.test.web.reactive.server.MediaType[] ) { this . WebClient.RequestBodySpec . accept ( org.springframework.test.web.reactive.server.MediaType[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( java.nio.charset.Charset ... java.nio.charset.Charset[] ) { this . WebClient.RequestBodySpec . acceptCharset ( java.nio.charset.Charset[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( MediaType org.springframework.test.web.reactive.server.MediaType ) { this . WebClient.RequestBodySpec . contentType ( org.springframework.test.web.reactive.server.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( long long ) { this . WebClient.RequestBodySpec . contentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . WebClient.RequestBodySpec . cookie ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.reactive.server.MultiValueMap<java.lang.String,java.lang.String> ) { this . WebClient.RequestBodySpec . cookies ( org.springframework.test.web.reactive.server.MultiValueMap<java.lang.String,java.lang.String> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( java.time.ZonedDateTime java.time.ZonedDateTime ) { this . WebClient.RequestBodySpec . ifModifiedSince ( java.time.ZonedDateTime ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.RequestBodySpec org.springframework.test.web.reactive.server.RequestBodySpec ( java.lang.String ... java.lang.String[] ) { this . WebClient.RequestBodySpec . ifNoneMatch ( java.lang.String[] ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ResponseSpec org.springframework.test.web.reactive.server.ResponseSpec ( ) { return org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultResponseSpec ( this . WebClient.RequestBodySpec . exchange ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> < ? > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> ( BodyInserter < T , ? super ClientHttpRequest > org.springframework.test.web.reactive.server.BodyInserter<T,? super org.springframework.test.web.reactive.server.ClientHttpRequest> ) { this . WebClient.RequestBodySpec . body ( org.springframework.test.web.reactive.server.BodyInserter<T,> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , S extends org.springframework.test.web.reactive.server.Publisher<T> < T > > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> < ? > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> ( S S , java.lang.Class<T> < T > java.lang.Class<T> ) { this . WebClient.RequestBodySpec . body ( S , java.lang.Class<T> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> < ? > org.springframework.test.web.reactive.server.RequestHeadersSpec<?> ( T T ) { this . WebClient.RequestBodySpec . body ( T ) ; return this ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultResponseSpec org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultResponseSpec ( Mono < ClientResponse > org.springframework.test.web.reactive.server.Mono<org.springframework.test.web.reactive.server.ClientResponse> ) { ClientResponse org.springframework.test.web.reactive.server.ClientResponse = org.springframework.test.web.reactive.server.Mono<org.springframework.test.web.reactive.server.ClientResponse> . block ( java.time.Duration ( ) ) ; ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult = org.springframework.test.web.reactive.server.WiretapConnector . claimRequest ( this . java.lang.String ) ; return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultResponseSpec ( org.springframework.test.web.reactive.server.ExchangeResult , org.springframework.test.web.reactive.server.ClientResponse ) ; }  <METHOD_END>
<METHOD_START> public void ( ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult , ClientResponse org.springframework.test.web.reactive.server.ClientResponse ) { super( org.springframework.test.web.reactive.server.ExchangeResult ); this . org.springframework.test.web.reactive.server.ClientResponse = org.springframework.test.web.reactive.server.ClientResponse ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.EntityExchangeResult<?> < ? > org.springframework.test.web.reactive.server.EntityExchangeResult<?> ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { java.lang.Object java.lang.Object = this . org.springframework.test.web.reactive.server.ClientResponse . body ( toMono ( org.springframework.test.web.reactive.server.ResolvableType ) ) . block ( java.time.Duration ( ) ) ; return new EntityExchangeResult <> ( this , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> < java.util.List<?> < ? > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType , int int ) { Flux < ? > org.springframework.test.web.reactive.server.Flux<?> = this . org.springframework.test.web.reactive.server.ClientResponse . body ( toFlux ( org.springframework.test.web.reactive.server.ResolvableType ) ) ; if ( int >= NUMBER ) { org.springframework.test.web.reactive.server.Flux<?> = org.springframework.test.web.reactive.server.Flux<> . take ( int ) ; } java.util.List<?> < ? > java.util.List<?> = org.springframework.test.web.reactive.server.Flux<> . collectList ( ) . block ( java.time.Duration ( ) ) ; return new EntityExchangeResult <> ( this , java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.reactive.server.FluxExchangeResult<T> < T > org.springframework.test.web.reactive.server.FluxExchangeResult<T> ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { Flux < T > org.springframework.test.web.reactive.server.Flux<T> = this . org.springframework.test.web.reactive.server.ClientResponse . body ( toFlux ( org.springframework.test.web.reactive.server.ResolvableType ) ) ; return new FluxExchangeResult <> ( this , org.springframework.test.web.reactive.server.Flux<T> , java.time.Duration ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> < java.util.Map<?,?> < ? , ? > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType , ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { ResolvableType org.springframework.test.web.reactive.server.ResolvableType = ResolvableType . forClassWithGenerics ( java.util.Map .class , org.springframework.test.web.reactive.server.ResolvableType , org.springframework.test.web.reactive.server.ResolvableType ) ; return ( EntityExchangeResult < java.util.Map<?,?> < ? , ? > > ) org.springframework.test.web.reactive.server.EntityExchangeResult<?> ( org.springframework.test.web.reactive.server.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> < java.lang.Void > org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> ( ) { DataBuffer org.springframework.test.web.reactive.server.DataBuffer = this . org.springframework.test.web.reactive.server.ClientResponse . body ( toDataBuffers ( ) ) . blockFirst ( java.time.Duration ( ) ) ; assertWithDiagnostics ( ( ) assertTrue ( STRING , buffer == null ) ) ; return new EntityExchangeResult <> ( this , null ) ; }  <METHOD_END>
<METHOD_START> public void ( ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult , ClientResponse org.springframework.test.web.reactive.server.ClientResponse ) { this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult = new org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult ( org.springframework.test.web.reactive.server.ExchangeResult , org.springframework.test.web.reactive.server.ClientResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.StatusAssertions org.springframework.test.web.reactive.server.StatusAssertions ( ) { return new StatusAssertions ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.HeaderAssertions org.springframework.test.web.reactive.server.HeaderAssertions ( ) { return new HeaderAssertions ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.TypeBodySpec org.springframework.test.web.reactive.server.TypeBodySpec ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.test.web.reactive.server.TypeBodySpec ( ResolvableType . forClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.TypeBodySpec org.springframework.test.web.reactive.server.TypeBodySpec ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultTypeBodySpec ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult , org.springframework.test.web.reactive.server.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.BodySpec org.springframework.test.web.reactive.server.BodySpec ( ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultBodySpec ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult , ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult = org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult ; this . org.springframework.test.web.reactive.server.ResolvableType = org.springframework.test.web.reactive.server.ResolvableType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.SingleValueBodySpec org.springframework.test.web.reactive.server.SingleValueBodySpec ( ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultSingleValueBodySpec ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult . org.springframework.test.web.reactive.server.EntityExchangeResult<?> ( this . org.springframework.test.web.reactive.server.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ListBodySpec org.springframework.test.web.reactive.server.ListBodySpec ( ) { return org.springframework.test.web.reactive.server.ListBodySpec ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ListBodySpec org.springframework.test.web.reactive.server.ListBodySpec ( int int ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultListBodySpec ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> ( this . org.springframework.test.web.reactive.server.ResolvableType , int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.test.web.reactive.server.FluxExchangeResult<T> < T > org.springframework.test.web.reactive.server.FluxExchangeResult<T> ( ) { return this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult . org.springframework.test.web.reactive.server.FluxExchangeResult ( this . org.springframework.test.web.reactive.server.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityExchangeResult < ? > org.springframework.test.web.reactive.server.EntityExchangeResult<?> ) { this . org.springframework.test.web.reactive.server.EntityExchangeResult<?> = org.springframework.test.web.reactive.server.EntityExchangeResult<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.test.web.reactive.server.EntityExchangeResult<T> < T > org.springframework.test.web.reactive.server.EntityExchangeResult<T> ( T T ) { java.lang.Object java.lang.Object = this . org.springframework.test.web.reactive.server.EntityExchangeResult<> . getResponseBody ( ) ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<> . assertWithDiagnostics ( ( ) assertEquals ( STRING , expected , actual ) ) ; return org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > org.springframework.test.web.reactive.server.EntityExchangeResult<T> < T > org.springframework.test.web.reactive.server.EntityExchangeResult<T> ( ) { return new EntityExchangeResult <> ( this . org.springframework.test.web.reactive.server.EntityExchangeResult<> , ( T ) this . org.springframework.test.web.reactive.server.EntityExchangeResult<> . getResponseBody ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityExchangeResult < java.util.List<?> < ? > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> ) { this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> = org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<T>> < java.util.List<T> < T > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<T>> ( java.util.List<T> < T > java.util.List<T> ) { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . getResponseBody ( ) ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . assertWithDiagnostics ( ( ) assertEquals ( STRING , expected , actual ) ) ; return org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<java.lang.Object>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ListBodySpec org.springframework.test.web.reactive.server.ListBodySpec ( int int ) { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . getResponseBody ( ) ; java.lang.String java.lang.String = STRING + int + STRING ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . assertWithDiagnostics ( ( ) assertEquals ( message , size , actual . size ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ListBodySpec org.springframework.test.web.reactive.server.ListBodySpec ( java.lang.Object ... java.lang.Object[] ) { java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . getResponseBody ( ) ; java.lang.String java.lang.String = STRING + java.util.List<> ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . assertWithDiagnostics ( ( ) assertTrue ( message , actual . containsAll ( expected ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.ListBodySpec org.springframework.test.web.reactive.server.ListBodySpec ( java.lang.Object ... java.lang.Object[] ) { java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; java.util.List<?> < ? > java.util.List<?> = this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . getResponseBody ( ) ; java.lang.String java.lang.String = STRING + java.util.List<> ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . assertWithDiagnostics ( ( ) assertTrue ( message , ! actual . containsAll ( expected ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<T>> < java.util.List<T> < T > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<T>> ( ) { return new EntityExchangeResult <> ( this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> , ( java.util.List<T> < T > ) this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.List<?>> . getResponseBody ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult ) { this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult = org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> < java.lang.Void > org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> ( ) { return this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult . org.springframework.test.web.reactive.server.EntityExchangeResult<java.lang.Void> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.test.web.reactive.server.MapBodySpec ( ResolvableType . forClass ( java.lang.Class<> ) , ResolvableType . forClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( ResolvableType org.springframework.test.web.reactive.server.ResolvableType , ResolvableType org.springframework.test.web.reactive.server.ResolvableType ) { return new org.springframework.test.web.reactive.server.DefaultWebTestClient.DefaultMapBodySpec ( this . org.springframework.test.web.reactive.server.DefaultWebTestClient.UndecodedExchangeResult . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> ( org.springframework.test.web.reactive.server.ResolvableType , org.springframework.test.web.reactive.server.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityExchangeResult < java.util.Map<?,?> < ? , ? > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> ) { this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> = org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> ; }  <METHOD_END>
<METHOD_START> private java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( ) { return this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . getResponseBody ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < K , V > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<K,V>> < java.util.Map<K,V> < K , V > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<K,V>> ( java.util.Map<K,V> < K , V > java.util.Map<K,V> ) { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . assertWithDiagnostics ( ( ) assertEquals ( message , expected , getBody ( ) ) ) ; return org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<java.lang.Object,java.lang.Object>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( int int ) { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . assertWithDiagnostics ( ( ) assertEquals ( message , size , getBody ( ) . size ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = STRING + java.lang.Object ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . assertWithDiagnostics ( ( ) assertEquals ( message , value , getBody ( ) . get ( key ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( java.lang.Object ... java.lang.Object[] ) { java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.stream.Stream<java.lang.Object> ( java.lang.Object[] ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> ! java.util.Map<?,?> ( ) . boolean ( java.lang.Object ) ) . java.util.List<java.lang.Object> ( java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; java.lang.String java.lang.String = STRING + java.util.List<> ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . assertWithDiagnostics ( ( ) assertTrue ( message , missing . isEmpty ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.MapBodySpec org.springframework.test.web.reactive.server.MapBodySpec ( java.lang.Object ... java.lang.Object[] ) { java.util.List<?> < ? > java.util.List<?> = java.util.Arrays . java.util.stream.Stream<java.lang.Object> ( java.lang.Object[] ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> ! java.util.Map<?,?> ( ) . boolean ( java.lang.Object ) ) . java.util.List<java.lang.Object> ( java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; java.lang.String java.lang.String = STRING + java.util.List<> ; this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> . assertWithDiagnostics ( ( ) assertTrue ( message , missing . isEmpty ( ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < K , V > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<K,V>> < java.util.Map<K,V> < K , V > > org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<K,V>> ( ) { return new EntityExchangeResult <> ( this . org.springframework.test.web.reactive.server.EntityExchangeResult<java.util.Map<?,?>> , ( java.util.Map<K,V> < K , V > ) java.util.Map<?,?> ( ) ) ; }  <METHOD_END>
