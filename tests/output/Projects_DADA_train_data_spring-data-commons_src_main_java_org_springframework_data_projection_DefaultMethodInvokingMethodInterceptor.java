<METHOD_START> public void ( ) { try { this . java.lang.reflect.Constructor<java.lang.invoke.MethodHandles.Lookup> = java.lang.invoke.MethodHandles . java.lang.invoke.MethodHandles.Lookup .class . java.lang.reflect.Constructor<java.lang.invoke.MethodHandles.Lookup> ( java.lang.Class .class ) ; if ( ! java.lang.reflect.Constructor<java.lang.invoke.MethodHandles.Lookup> . boolean ( ) ) { java.lang.reflect.Constructor<java.lang.invoke.MethodHandles.Lookup> . void ( true ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.projection.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.projection.MethodInvocation . getMethod ( ) ; if ( ! java.lang.reflect.Method . boolean ( ) ) { return org.springframework.data.projection.MethodInvocation . proceed ( ) ; } java.lang.Object [] java.lang.Object[] = org.springframework.data.projection.MethodInvocation . getArguments ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; java.lang.Object java.lang.Object = ( ( ProxyMethodInvocation ) org.springframework.data.projection.MethodInvocation ) . getProxy ( ) ; return java.lang.reflect.Constructor<java.lang.invoke.MethodHandles.Lookup> . java.lang.invoke.MethodHandles.Lookup ( java.lang.Class<> ) . java.lang.invoke.MethodHandle ( java.lang.reflect.Method , java.lang.Class<> ) . java.lang.invoke.MethodHandle ( java.lang.Object ) . java.lang.Object ( java.lang.Object[] ) ; }  <METHOD_END>
