<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) void ( BeanManager org.springframework.data.gemfire.repository.cdi.BeanManager , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , CustomRepositoryImplementationDetector org.springframework.data.gemfire.repository.cdi.CustomRepositoryImplementationDetector , Bean < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> < Bean < Region > > java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) { super( java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , org.springframework.data.gemfire.repository.cdi.BeanManager , java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.repository.cdi.CustomRepositoryImplementationDetector ) ); this . org.springframework.data.gemfire.repository.cdi.BeanManager = org.springframework.data.gemfire.repository.cdi.BeanManager ; this . org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ; this . java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> = java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < S > S S ( Bean < S > org.springframework.data.gemfire.repository.cdi.Bean<S> , java.lang.reflect.Type java.lang.reflect.Type ) { return ( S ) org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( org.springframework.data.gemfire.repository.cdi.Bean<S> , java.lang.reflect.Type , org.springframework.data.gemfire.repository.cdi.BeanManager . createCreationalContext ( org.springframework.data.gemfire.repository.cdi.Bean<S> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < S > java.lang.reflect.Type java.lang.reflect.Type ( Bean < S > org.springframework.data.gemfire.repository.cdi.Bean<S> , java.lang.Class<S> < S > java.lang.Class<S> ) { for ( java.lang.reflect.Type java.lang.reflect.Type : org.springframework.data.gemfire.repository.cdi.Bean<S> . getTypes ( ) ) { java.lang.reflect.Type java.lang.reflect.Type = ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ? ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) : java.lang.reflect.Type ) ; if ( java.lang.reflect.Type instanceof java.lang.Class && java.lang.Class<S> . boolean ( ( java.lang.Class ) java.lang.reflect.Type ) ) { return java.lang.reflect.Type ; } } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<S> , org.springframework.data.gemfire.repository.cdi.Bean<S> ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region<?,?>> ( ) { java.util.Set<org.springframework.data.gemfire.repository.cdi.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.repository.cdi.Region<?,?>> = new java.util.HashSet<org.springframework.data.gemfire.repository.cdi.Region<?,?>> < Region < ? , ? > > ( java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> . size ( ) ) ; for ( Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> : java.util.Set<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) { java.util.Set<org.springframework.data.gemfire.repository.cdi.Region<?,?>> . add ( java.lang.Object ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , java.lang.reflect.Type ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , Region .class ) ) ) ; } return java.util.Set<org.springframework.data.gemfire.repository.cdi.Region<?,?>> ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.repository.cdi.GemfireMappingContext org.springframework.data.gemfire.repository.cdi.GemfireMappingContext ( ) { return ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> != null ? java.lang.Object ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , GemfireMappingContext .class ) : org.springframework.data.gemfire.repository.cdi.GemfireMappingContext ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ( ) { return new GemfireRepositoryFactory ( java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region<?,?>> ( ) , org.springframework.data.gemfire.repository.cdi.GemfireMappingContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected T T ( CreationalContext < T > org.springframework.data.gemfire.repository.cdi.CreationalContext<T> , java.lang.Class<T> < T > java.lang.Class<T> , java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ) { return ( java.util.Optional<java.lang.Object> . boolean ( ) ? org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ( ) . getRepository ( java.lang.Class<T> , java.util.Optional<java.lang.Object> . java.lang.Object ( ) ) : org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ( ) . getRepository ( java.lang.Class<T> ) ) ; }  <METHOD_END>
