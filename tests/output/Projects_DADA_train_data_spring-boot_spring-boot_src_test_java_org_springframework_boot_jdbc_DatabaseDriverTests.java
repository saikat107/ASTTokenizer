<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = DatabaseDriver . fromJdbcUrl ( STRING ) . getDriverClassName ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = DatabaseDriver . fromJdbcUrl ( STRING ) . getDriverClassName ( ) ; assertThat ( java.lang.String ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DatabaseDriver org.springframework.boot.jdbc.DatabaseDriver = DatabaseDriver . fromJdbcUrl ( null ) ; assertThat ( org.springframework.boot.jdbc.DatabaseDriver ) . isEqualTo ( DatabaseDriver . UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.jdbc.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.jdbc.ExpectedException . expectMessage ( STRING ) ; DatabaseDriver . fromJdbcUrl ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DatabaseDriver org.springframework.boot.jdbc.DatabaseDriver = DatabaseDriver . fromProductName ( null ) ; assertThat ( org.springframework.boot.jdbc.DatabaseDriver ) . isEqualTo ( DatabaseDriver . UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . UNKNOWN ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . DERBY ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . H2 ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . HSQLDB ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . SQLITE ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . MYSQL ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . ORACLE ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . POSTGRESQL ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . SQLSERVER ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . SQLSERVER ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2 ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . FIREBIRD ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . FIREBIRD ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2 ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2_AS400 ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2_AS400 ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . TERADATA ) ; assertThat ( DatabaseDriver . fromProductName ( STRING ) ) . isEqualTo ( DatabaseDriver . INFORMIX ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . UNKNOWN ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . DERBY ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . H2 ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . HSQLDB ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . SQLITE ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . MYSQL ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . ORACLE ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . POSTGRESQL ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . JTDS ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . SQLSERVER ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . FIREBIRD ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2 ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . DB2_AS400 ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . TERADATA ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . INFORMIX ) ; assertThat ( DatabaseDriver . fromJdbcUrl ( STRING ) ) . isEqualTo ( DatabaseDriver . INFORMIX ) ; }  <METHOD_END>
