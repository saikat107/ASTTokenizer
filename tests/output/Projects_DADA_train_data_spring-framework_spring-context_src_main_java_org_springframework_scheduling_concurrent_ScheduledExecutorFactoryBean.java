<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( ScheduledExecutorTask ... org.springframework.scheduling.concurrent.ScheduledExecutorTask[] ) { this . org.springframework.scheduling.concurrent.ScheduledExecutorTask[] = org.springframework.scheduling.concurrent.ScheduledExecutorTask[] ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService ( java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService = java.util.concurrent.ScheduledExecutorService ( this . int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; if ( this . boolean ) { if ( java.util.concurrent.ScheduledExecutorService instanceof java.util.concurrent.ScheduledThreadPoolExecutor ) { ( ( java.util.concurrent.ScheduledThreadPoolExecutor ) java.util.concurrent.ScheduledExecutorService ) . void ( true ) ; } else { logger . info ( STRING ) ; } } if ( ! ObjectUtils . isEmpty ( this . org.springframework.scheduling.concurrent.ScheduledExecutorTask[] ) ) { void ( this . org.springframework.scheduling.concurrent.ScheduledExecutorTask[] , java.util.concurrent.ScheduledExecutorService ) ; } this . java.util.concurrent.ScheduledExecutorService = ( this . boolean ? java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( java.util.concurrent.ScheduledExecutorService ) : java.util.concurrent.ScheduledExecutorService ) ; return java.util.concurrent.ScheduledExecutorService ; }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { return new java.util.concurrent.ScheduledThreadPoolExecutor ( int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ScheduledExecutorTask [] org.springframework.scheduling.concurrent.ScheduledExecutorTask[] , java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ) { for ( ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask : org.springframework.scheduling.concurrent.ScheduledExecutorTask[] ) { java.lang.Runnable java.lang.Runnable = java.lang.Runnable ( org.springframework.scheduling.concurrent.ScheduledExecutorTask ) ; if ( org.springframework.scheduling.concurrent.ScheduledExecutorTask . isOneTimeTask ( ) ) { java.util.concurrent.ScheduledExecutorService . java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getDelay ( ) , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getTimeUnit ( ) ) ; } else { if ( org.springframework.scheduling.concurrent.ScheduledExecutorTask . isFixedRate ( ) ) { java.util.concurrent.ScheduledExecutorService . java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getDelay ( ) , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getPeriod ( ) , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getTimeUnit ( ) ) ; } else { java.util.concurrent.ScheduledExecutorService . java.util.concurrent.ScheduledFuture<?> ( java.lang.Runnable , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getDelay ( ) , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getPeriod ( ) , org.springframework.scheduling.concurrent.ScheduledExecutorTask . getTimeUnit ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> protected java.lang.Runnable java.lang.Runnable ( ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask ) { return ( this . boolean ? new DelegatingErrorHandlingRunnable ( org.springframework.scheduling.concurrent.ScheduledExecutorTask . getRunnable ( ) , TaskUtils . LOG_AND_SUPPRESS_ERROR_HANDLER ) : new DelegatingErrorHandlingRunnable ( org.springframework.scheduling.concurrent.ScheduledExecutorTask . getRunnable ( ) , TaskUtils . LOG_AND_PROPAGATE_ERROR_HANDLER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( ) { return this . java.util.concurrent.ScheduledExecutorService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends java.util.concurrent.ScheduledExecutorService> < ? extends java.util.concurrent.ScheduledExecutorService > java.lang.Class<? extends java.util.concurrent.ScheduledExecutorService> ( ) { return ( this . java.util.concurrent.ScheduledExecutorService != null ? this . java.util.concurrent.ScheduledExecutorService . java.lang.Class<? extends java.util.concurrent.ScheduledExecutorService> ( ) : java.util.concurrent.ScheduledExecutorService .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
