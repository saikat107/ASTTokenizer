<METHOD_START> public void void ( StompSubProtocolErrorHandler org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ) { this . org.springframework.web.socket.messaging.StompSubProtocolErrorHandler = org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.messaging.StompSubProtocolErrorHandler org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ( ) { return this . org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( StompEncoder org.springframework.web.socket.messaging.StompEncoder ) { this . org.springframework.web.socket.messaging.StompEncoder = org.springframework.web.socket.messaging.StompEncoder ; }  <METHOD_END>
<METHOD_START> public void void ( StompDecoder org.springframework.web.socket.messaging.StompDecoder ) { this . org.springframework.web.socket.messaging.StompDecoder = org.springframework.web.socket.messaging.StompDecoder ; }  <METHOD_END>
<METHOD_START> public void void ( MessageHeaderInitializer org.springframework.web.socket.messaging.MessageHeaderInitializer ) { this . org.springframework.web.socket.messaging.MessageHeaderInitializer = org.springframework.web.socket.messaging.MessageHeaderInitializer ; this . org.springframework.web.socket.messaging.StompDecoder . setHeaderInitializer ( org.springframework.web.socket.messaging.MessageHeaderInitializer ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.messaging.MessageHeaderInitializer org.springframework.web.socket.messaging.MessageHeaderInitializer ( ) { return this . org.springframework.web.socket.messaging.MessageHeaderInitializer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.web.socket.messaging.ApplicationEventPublisher ) { this . org.springframework.web.socket.messaging.ApplicationEventPublisher = org.springframework.web.socket.messaging.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.messaging.StompSubProtocolHandler.Stats . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.messaging.WebSocketMessage<?> , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { java.util.List<org.springframework.web.socket.messaging.Message<byte[]>> < Message < byte [] > > java.util.List<org.springframework.web.socket.messaging.Message<byte[]>> ; try { java.nio.ByteBuffer java.nio.ByteBuffer ; if ( org.springframework.web.socket.messaging.WebSocketMessage<> instanceof TextMessage ) { java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( ( ( TextMessage ) org.springframework.web.socket.messaging.WebSocketMessage<> ) . asBytes ( ) ) ; } else if ( org.springframework.web.socket.messaging.WebSocketMessage<> instanceof BinaryMessage ) { java.nio.ByteBuffer = ( ( BinaryMessage ) org.springframework.web.socket.messaging.WebSocketMessage<> ) . getPayload ( ) ; } else { return; } BufferingStompDecoder org.springframework.web.socket.messaging.BufferingStompDecoder = this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.BufferingStompDecoder> . get ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; if ( org.springframework.web.socket.messaging.BufferingStompDecoder == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.messaging.WebSocketSession . getId ( ) + STRING ) ; } java.util.List<org.springframework.web.socket.messaging.Message<byte[]>> = org.springframework.web.socket.messaging.BufferingStompDecoder . decode ( java.nio.ByteBuffer ) ; if ( java.util.List<org.springframework.web.socket.messaging.Message<byte[]>> . isEmpty ( ) ) { if ( org.springframework.web.socket.messaging.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.messaging.Log . trace ( STRING + org.springframework.web.socket.messaging.WebSocketSession + STRING + org.springframework.web.socket.messaging.BufferingStompDecoder . getBufferSize ( ) + STRING + org.springframework.web.socket.messaging.BufferingStompDecoder . getBufferSizeLimit ( ) + STRING ) ; } return; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.messaging.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.messaging.Log . error ( STRING + org.springframework.web.socket.messaging.WebSocketMessage<> + STRING + org.springframework.web.socket.messaging.WebSocketSession . getId ( ) + STRING , java.lang.Throwable ) ; } void ( org.springframework.web.socket.messaging.WebSocketSession , java.lang.Throwable , null ) ; return; } for ( Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> : java.util.List<org.springframework.web.socket.messaging.Message<byte[]>> ) { try { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<byte[]> , StompHeaderAccessor .class ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setSessionId ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setSessionAttributes ( org.springframework.web.socket.messaging.WebSocketSession . getAttributes ( ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setUser ( java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setHeader ( SimpMessageHeaderAccessor . HEART_BEAT_HEADER , org.springframework.web.socket.messaging.StompHeaderAccessor . getHeartbeat ( ) ) ; if ( ! boolean ( org.springframework.web.socket.messaging.MessageChannel ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor . setImmutable ( ) ; } if ( org.springframework.web.socket.messaging.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.messaging.Log . trace ( STRING + org.springframework.web.socket.messaging.StompHeaderAccessor . getShortLogMessage ( org.springframework.web.socket.messaging.Message<byte[]> . getPayload ( ) ) ) ; } boolean boolean = StompCommand . CONNECT . equals ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ; if ( boolean ) { this . org.springframework.web.socket.messaging.StompSubProtocolHandler.Stats . void ( ) ; } else if ( StompCommand . DISCONNECT . equals ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ) { this . org.springframework.web.socket.messaging.StompSubProtocolHandler.Stats . void ( ) ; } try { SimpAttributesContextHolder . setAttributesFromMessage ( org.springframework.web.socket.messaging.Message<byte[]> ) ; boolean boolean = org.springframework.web.socket.messaging.MessageChannel . send ( org.springframework.web.socket.messaging.Message<byte[]> ) ; if ( boolean ) { if ( boolean ) { java.security.Principal java.security.Principal = org.springframework.web.socket.messaging.StompHeaderAccessor . getUser ( ) ; if ( java.security.Principal != null && java.security.Principal != org.springframework.web.socket.messaging.WebSocketSession . getPrincipal ( ) ) { this . java.util.Map<java.lang.String,java.security.Principal> . java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) , java.security.Principal ) ; } } if ( this . org.springframework.web.socket.messaging.ApplicationEventPublisher != null ) { if ( boolean ) { void ( new SessionConnectEvent ( this , org.springframework.web.socket.messaging.Message<byte[]> , java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ) ) ; } else if ( StompCommand . SUBSCRIBE . equals ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ) { void ( new SessionSubscribeEvent ( this , org.springframework.web.socket.messaging.Message<byte[]> , java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ) ) ; } else if ( StompCommand . UNSUBSCRIBE . equals ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ) { void ( new SessionUnsubscribeEvent ( this , org.springframework.web.socket.messaging.Message<byte[]> , java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ) ) ; } } } } finally { SimpAttributesContextHolder . resetAttributes ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.messaging.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.messaging.Log . error ( STRING + STRING + org.springframework.web.socket.messaging.WebSocketSession . getId ( ) + STRING , java.lang.Throwable ) ; } void ( org.springframework.web.socket.messaging.WebSocketSession , java.lang.Throwable , org.springframework.web.socket.messaging.Message<byte[]> ) ; } } }  <METHOD_END>
<METHOD_START> private java.security.Principal java.security.Principal ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession ) { java.security.Principal java.security.Principal = this . java.util.Map<java.lang.String,java.security.Principal> . java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; return java.security.Principal != null ? java.security.Principal : org.springframework.web.socket.messaging.WebSocketSession . getPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , java.lang.Throwable java.lang.Throwable , Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ) { if ( org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ( ) == null ) { void ( org.springframework.web.socket.messaging.WebSocketSession , java.lang.Throwable ) ; return; } Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ( ) . handleClientMessageProcessingError ( org.springframework.web.socket.messaging.Message<byte[]> , java.lang.Throwable ) ; if ( org.springframework.web.socket.messaging.Message<byte[]> == null ) { return; } StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<byte[]> , StompHeaderAccessor .class ) ; Assert . state ( org.springframework.web.socket.messaging.StompHeaderAccessor != null , STRING ) ; void ( org.springframework.web.socket.messaging.WebSocketSession , org.springframework.web.socket.messaging.StompHeaderAccessor , org.springframework.web.socket.messaging.Message<byte[]> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , java.lang.Throwable java.lang.Throwable ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . ERROR ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setMessage ( java.lang.Throwable . java.lang.String ( ) ) ; byte [] byte[] = this . org.springframework.web.socket.messaging.StompEncoder . encode ( org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) , byte[] ) ; try { org.springframework.web.socket.messaging.WebSocketSession . sendMessage ( new TextMessage ( byte[] ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.messaging.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { if ( this . java.lang.Boolean != null ) { return this . java.lang.Boolean ; } if ( org.springframework.web.socket.messaging.MessageChannel instanceof AbstractMessageChannel ) { for ( ChannelInterceptor org.springframework.web.socket.messaging.ChannelInterceptor : ( ( AbstractMessageChannel ) org.springframework.web.socket.messaging.MessageChannel ) . getInterceptors ( ) ) { if ( org.springframework.web.socket.messaging.ChannelInterceptor instanceof ImmutableMessageChannelInterceptor ) { this . java.lang.Boolean = true ; return true ; } } } this . java.lang.Boolean = false ; return false ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationEvent org.springframework.web.socket.messaging.ApplicationEvent ) { try { this . org.springframework.web.socket.messaging.ApplicationEventPublisher . publishEvent ( org.springframework.web.socket.messaging.ApplicationEvent ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.messaging.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.messaging.Log . error ( STRING + org.springframework.web.socket.messaging.ApplicationEvent , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , Message < ? > org.springframework.web.socket.messaging.Message<?> ) { if ( ! ( org.springframework.web.socket.messaging.Message<> . getPayload ( ) instanceof byte [] ) ) { if ( org.springframework.web.socket.messaging.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.messaging.Log . error ( STRING + org.springframework.web.socket.messaging.Message<> + STRING ) ; } return; } StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = org.springframework.web.socket.messaging.StompHeaderAccessor ( org.springframework.web.socket.messaging.Message<> ) ; StompCommand org.springframework.web.socket.messaging.StompCommand = org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ; if ( StompCommand . MESSAGE . equals ( org.springframework.web.socket.messaging.StompCommand ) ) { if ( org.springframework.web.socket.messaging.StompHeaderAccessor . getSubscriptionId ( ) == null && org.springframework.web.socket.messaging.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.messaging.Log . warn ( STRING + org.springframework.web.socket.messaging.Message<> ) ; } java.lang.String java.lang.String = org.springframework.web.socket.messaging.StompHeaderAccessor . getFirstNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION ) ; if ( java.lang.String != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor = org.springframework.web.socket.messaging.StompHeaderAccessor ( org.springframework.web.socket.messaging.StompHeaderAccessor , org.springframework.web.socket.messaging.Message<> ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . removeNativeHeader ( SimpMessageHeaderAccessor . ORIGINAL_DESTINATION ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setDestination ( java.lang.String ) ; } } else if ( StompCommand . CONNECTED . equals ( org.springframework.web.socket.messaging.StompCommand ) ) { this . org.springframework.web.socket.messaging.StompSubProtocolHandler.Stats . void ( ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = org.springframework.web.socket.messaging.StompHeaderAccessor ( org.springframework.web.socket.messaging.Message<> , org.springframework.web.socket.messaging.StompHeaderAccessor , org.springframework.web.socket.messaging.WebSocketSession ) ; if ( this . org.springframework.web.socket.messaging.ApplicationEventPublisher != null && StompCommand . CONNECTED . equals ( org.springframework.web.socket.messaging.StompCommand ) ) { try { SimpAttributes org.springframework.web.socket.messaging.SimpAttributes = new SimpAttributes ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) , org.springframework.web.socket.messaging.WebSocketSession . getAttributes ( ) ) ; SimpAttributesContextHolder . setAttributes ( org.springframework.web.socket.messaging.SimpAttributes ) ; java.security.Principal java.security.Principal = java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ; void ( new SessionConnectedEvent ( this , ( Message < byte [] > ) org.springframework.web.socket.messaging.Message<> , java.security.Principal ) ) ; } finally { SimpAttributesContextHolder . resetAttributes ( ) ; } } } byte [] byte[] = ( byte [] ) org.springframework.web.socket.messaging.Message<> . getPayload ( ) ; if ( StompCommand . ERROR . equals ( org.springframework.web.socket.messaging.StompCommand ) && org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ( ) != null ) { Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = org.springframework.web.socket.messaging.StompSubProtocolErrorHandler ( ) . handleErrorMessageToClient ( ( Message < byte [] > ) org.springframework.web.socket.messaging.Message<> ) ; org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<byte[]> , StompHeaderAccessor .class ) ; Assert . state ( org.springframework.web.socket.messaging.StompHeaderAccessor != null , STRING ) ; byte[] = org.springframework.web.socket.messaging.Message<byte[]> . getPayload ( ) ; } void ( org.springframework.web.socket.messaging.WebSocketSession , org.springframework.web.socket.messaging.StompHeaderAccessor , byte[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor , byte [] byte[] ) { StompCommand org.springframework.web.socket.messaging.StompCommand = org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ; try { byte [] byte[] = this . org.springframework.web.socket.messaging.StompEncoder . encode ( org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) , byte[] ) ; boolean boolean = ( byte[] . int > NUMBER && ! ( org.springframework.web.socket.messaging.WebSocketSession instanceof SockJsSession ) && MimeTypeUtils . APPLICATION_OCTET_STREAM . isCompatibleWith ( org.springframework.web.socket.messaging.StompHeaderAccessor . getContentType ( ) ) ) ; if ( boolean ) { org.springframework.web.socket.messaging.WebSocketSession . sendMessage ( new BinaryMessage ( byte[] ) ) ; } else { org.springframework.web.socket.messaging.WebSocketSession . sendMessage ( new TextMessage ( byte[] ) ) ; } } catch ( SessionLimitExceededException org.springframework.web.socket.messaging.SessionLimitExceededException ) { throw org.springframework.web.socket.messaging.SessionLimitExceededException ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.messaging.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.messaging.Log . debug ( STRING + org.springframework.web.socket.messaging.WebSocketSession . getId ( ) , java.lang.Throwable ) ; } org.springframework.web.socket.messaging.StompCommand = StompCommand . ERROR ; } finally { if ( StompCommand . ERROR . equals ( org.springframework.web.socket.messaging.StompCommand ) ) { try { org.springframework.web.socket.messaging.WebSocketSession . close ( CloseStatus . PROTOCOL_ERROR ) ; } catch ( java.io.IOException java.io.IOException ) { } } } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.messaging.StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ( Message < ? > org.springframework.web.socket.messaging.Message<?> ) { MessageHeaderAccessor org.springframework.web.socket.messaging.MessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , MessageHeaderAccessor .class ) ; if ( org.springframework.web.socket.messaging.MessageHeaderAccessor instanceof StompHeaderAccessor ) { return ( StompHeaderAccessor ) org.springframework.web.socket.messaging.MessageHeaderAccessor ; } else { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<> ) ; SimpMessageType org.springframework.web.socket.messaging.SimpMessageType = SimpMessageHeaderAccessor . getMessageType ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ; if ( SimpMessageType . CONNECT_ACK . equals ( org.springframework.web.socket.messaging.SimpMessageType ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor = org.springframework.web.socket.messaging.StompHeaderAccessor ( org.springframework.web.socket.messaging.StompHeaderAccessor ) ; } else if ( SimpMessageType . DISCONNECT_ACK . equals ( org.springframework.web.socket.messaging.SimpMessageType ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.socket.messaging.StompHeaderAccessor ) ; if ( java.lang.String != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . RECEIPT ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setReceiptId ( java.lang.String ) ; } else { org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . ERROR ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setMessage ( STRING ) ; } } else if ( SimpMessageType . HEARTBEAT . equals ( org.springframework.web.socket.messaging.SimpMessageType ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . createForHeartbeat ( ) ; } else if ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) == null || StompCommand . SEND . equals ( org.springframework.web.socket.messaging.StompHeaderAccessor . getCommand ( ) ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor . updateStompCommandAsServerMessage ( ) ; } return org.springframework.web.socket.messaging.StompHeaderAccessor ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.messaging.StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ( StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ) { java.lang.String java.lang.String = StompHeaderAccessor . CONNECT_MESSAGE_HEADER ; Message < ? > org.springframework.web.socket.messaging.Message<?> = ( Message < ? > ) org.springframework.web.socket.messaging.StompHeaderAccessor . getHeader ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.Message<> == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.web.socket.messaging.StompHeaderAccessor ) ; } StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , StompHeaderAccessor .class ) ; StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . CONNECTED ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.web.socket.messaging.StompHeaderAccessor . getAcceptVersion ( ) ; if ( java.util.Set<java.lang.String> . boolean ( STRING ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor . setVersion ( STRING ) ; } else if ( java.util.Set<java.lang.String> . boolean ( STRING ) ) { org.springframework.web.socket.messaging.StompHeaderAccessor . setVersion ( STRING ) ; } else if ( ! java.util.Set<java.lang.String> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.util.Set<java.lang.String> + STRING ) ; } long [] long[] = ( long [] ) org.springframework.web.socket.messaging.StompHeaderAccessor . getHeader ( SimpMessageHeaderAccessor . HEART_BEAT_HEADER ) ; if ( long[] != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( long[] [ NUMBER ] , long[] [ NUMBER ] ) ; } else { org.springframework.web.socket.messaging.StompHeaderAccessor . setHeartbeat ( NUMBER , NUMBER ) ; } return org.springframework.web.socket.messaging.StompHeaderAccessor ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor ) { java.lang.String java.lang.String = StompHeaderAccessor . DISCONNECT_MESSAGE_HEADER ; Message < ? > org.springframework.web.socket.messaging.Message<?> = ( Message < ? > ) org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . getHeader ( java.lang.String ) ; if ( org.springframework.web.socket.messaging.Message<> != null ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.web.socket.messaging.Message<> , StompHeaderAccessor .class ) ; return org.springframework.web.socket.messaging.StompHeaderAccessor . getReceipt ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.messaging.StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ( StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor , Message < ? > org.springframework.web.socket.messaging.Message<?> ) { return ( org.springframework.web.socket.messaging.StompHeaderAccessor . isMutable ( ) ? org.springframework.web.socket.messaging.StompHeaderAccessor : StompHeaderAccessor . wrap ( org.springframework.web.socket.messaging.Message<> ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.messaging.StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor ( Message < ? > org.springframework.web.socket.messaging.Message<?> , StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor , WebSocketSession org.springframework.web.socket.messaging.WebSocketSession ) { java.security.Principal java.security.Principal = java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ; if ( java.security.Principal != null ) { org.springframework.web.socket.messaging.StompHeaderAccessor = org.springframework.web.socket.messaging.StompHeaderAccessor ( org.springframework.web.socket.messaging.StompHeaderAccessor , org.springframework.web.socket.messaging.Message<> ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setNativeHeader ( java.lang.String , java.security.Principal . java.lang.String ( ) ) ; } long [] long[] = org.springframework.web.socket.messaging.StompHeaderAccessor . getHeartbeat ( ) ; if ( long[] [ NUMBER ] > NUMBER ) { org.springframework.web.socket.messaging.WebSocketSession = WebSocketSessionDecorator . unwrap ( org.springframework.web.socket.messaging.WebSocketSession ) ; if ( org.springframework.web.socket.messaging.WebSocketSession instanceof SockJsSession ) { ( ( SockJsSession ) org.springframework.web.socket.messaging.WebSocketSession ) . disableHeartbeat ( ) ; } } return org.springframework.web.socket.messaging.StompHeaderAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Message < ? > org.springframework.web.socket.messaging.Message<?> ) { return SimpMessageHeaderAccessor . getSessionId ( org.springframework.web.socket.messaging.Message<> . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { if ( org.springframework.web.socket.messaging.WebSocketSession . getTextMessageSizeLimit ( ) < int ) { org.springframework.web.socket.messaging.WebSocketSession . setTextMessageSizeLimit ( int ) ; } this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.BufferingStompDecoder> . put ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) , new BufferingStompDecoder ( this . org.springframework.web.socket.messaging.StompDecoder , int ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession , CloseStatus org.springframework.web.socket.messaging.CloseStatus , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { this . java.util.Map<java.lang.String,org.springframework.web.socket.messaging.BufferingStompDecoder> . remove ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; Message < byte [] > org.springframework.web.socket.messaging.Message<byte[]> = org.springframework.web.socket.messaging.Message<byte[]> ( org.springframework.web.socket.messaging.WebSocketSession ) ; SimpAttributes org.springframework.web.socket.messaging.SimpAttributes = SimpAttributes . fromMessage ( org.springframework.web.socket.messaging.Message<byte[]> ) ; try { SimpAttributesContextHolder . setAttributes ( org.springframework.web.socket.messaging.SimpAttributes ) ; if ( this . org.springframework.web.socket.messaging.ApplicationEventPublisher != null ) { java.security.Principal java.security.Principal = java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ; void ( new SessionDisconnectEvent ( this , org.springframework.web.socket.messaging.Message<byte[]> , org.springframework.web.socket.messaging.WebSocketSession . getId ( ) , org.springframework.web.socket.messaging.CloseStatus , java.security.Principal ) ) ; } org.springframework.web.socket.messaging.MessageChannel . send ( org.springframework.web.socket.messaging.Message<byte[]> ) ; } finally { this . java.util.Map<java.lang.String,java.security.Principal> . java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; SimpAttributesContextHolder . resetAttributes ( ) ; org.springframework.web.socket.messaging.SimpAttributes . sessionCompleted ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.socket.messaging.Message<byte[]> < byte [] > org.springframework.web.socket.messaging.Message<byte[]> ( WebSocketSession org.springframework.web.socket.messaging.WebSocketSession ) { StompHeaderAccessor org.springframework.web.socket.messaging.StompHeaderAccessor = StompHeaderAccessor . create ( StompCommand . DISCONNECT ) ; if ( org.springframework.web.socket.messaging.MessageHeaderInitializer ( ) != null ) { org.springframework.web.socket.messaging.MessageHeaderInitializer ( ) . initHeaders ( org.springframework.web.socket.messaging.StompHeaderAccessor ) ; } org.springframework.web.socket.messaging.StompHeaderAccessor . setSessionId ( org.springframework.web.socket.messaging.WebSocketSession . getId ( ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setSessionAttributes ( org.springframework.web.socket.messaging.WebSocketSession . getAttributes ( ) ) ; org.springframework.web.socket.messaging.StompHeaderAccessor . setUser ( java.security.Principal ( org.springframework.web.socket.messaging.WebSocketSession ) ) ; return MessageBuilder . createMessage ( byte[] , org.springframework.web.socket.messaging.StompHeaderAccessor . getMessageHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.List<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING + this . java.util.concurrent.atomic.AtomicInteger . int ( ) + STRING + this . java.util.concurrent.atomic.AtomicInteger . int ( ) + STRING + this . java.util.concurrent.atomic.AtomicInteger . int ( ) + STRING ; }  <METHOD_END>
