<METHOD_START> public void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession , int int , int int ) { super( org.springframework.web.socket.handler.WebSocketSession ); this . int = int ; this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { long long = this . long ; return ( long > NUMBER ? ( java.lang.System . long ( ) - long ) : NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> ) throws java.io.IOException { if ( boolean ( ) ) { return; } this . java.util.Queue<org.springframework.web.socket.handler.WebSocketMessage<?>> . add ( org.springframework.web.socket.handler.WebSocketMessage<> ) ; this . java.util.concurrent.atomic.AtomicInteger . int ( org.springframework.web.socket.handler.WebSocketMessage<> . getPayloadLength ( ) ) ; do { if ( ! boolean ( ) ) { if ( org.springframework.web.socket.handler.Log . isTraceEnabled ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , getId ( ) , long ( ) , this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.web.socket.handler.Log . trace ( java.lang.String ) ; } void ( ) ; break; } } while ( ! this . java.util.Queue<org.springframework.web.socket.handler.WebSocketMessage<?>> . isEmpty ( ) && ! boolean ( ) ); }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ( this . boolean || this . boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) java.io.IOException { if ( this . java.util.concurrent.locks.Lock . boolean ( ) ) { try { while ( true ) { WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> = this . java.util.Queue<org.springframework.web.socket.handler.WebSocketMessage<?>> . poll ( ) ; if ( org.springframework.web.socket.handler.WebSocketMessage<> == null || boolean ( ) ) { break; } this . java.util.concurrent.atomic.AtomicInteger . int ( org.springframework.web.socket.handler.WebSocketMessage<> . getPayloadLength ( ) * - NUMBER ) ; this . long = java.lang.System . long ( ) ; getDelegate ( ) . sendMessage ( org.springframework.web.socket.handler.WebSocketMessage<> ) ; this . long = NUMBER ; } } finally { this . long = NUMBER ; java.util.concurrent.locks.Lock . void ( ) ; } return true ; } return false ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { if ( ! boolean ( ) && this . java.util.concurrent.locks.Lock . boolean ( ) ) { try { if ( long ( ) > this . int ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String , long ( ) , getId ( ) , this . int ) ; void ( java.lang.String ) ; } else if ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) > this . int ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String , this . java.util.concurrent.atomic.AtomicInteger . int ( ) , getId ( ) , this . int ) ; void ( java.lang.String ) ; } } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { this . boolean = true ; throw new SessionLimitExceededException ( java.lang.String , CloseStatus . SESSION_NOT_RELIABLE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CloseStatus org.springframework.web.socket.handler.CloseStatus ) throws java.io.IOException { this . java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . boolean ) { return; } if ( ! CloseStatus . SESSION_NOT_RELIABLE . equals ( org.springframework.web.socket.handler.CloseStatus ) ) { try { void ( ) ; } catch ( SessionLimitExceededException org.springframework.web.socket.handler.SessionLimitExceededException ) { } if ( this . boolean ) { if ( org.springframework.web.socket.handler.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.handler.Log . debug ( STRING + org.springframework.web.socket.handler.CloseStatus + STRING ) ; } org.springframework.web.socket.handler.CloseStatus = CloseStatus . SESSION_NOT_RELIABLE ; } } this . boolean = true ; super. close ( org.springframework.web.socket.handler.CloseStatus ) ; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return getDelegate ( ) . toString ( ) ; }  <METHOD_END>
