<METHOD_START> public void ( SessionFactory < FTPFile > org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> ) { super( org.springframework.integration.ftp.session.SessionFactory<org.springframework.integration.ftp.session.FTPFile> ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T , C > T T ( final ClientCallback < C , T > org.springframework.integration.ftp.session.ClientCallback<C,T> ) { return T ( ( ClientCallback < FTPClient , T > ) org.springframework.integration.ftp.session.ClientCallback<C,T> ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.ftp.session.FtpRemoteFileTemplate.ExistsMode org.springframework.integration.ftp.session.FtpRemoteFileTemplate.ExistsMode ) { Assert . notNull ( org.springframework.integration.ftp.session.FtpRemoteFileTemplate.ExistsMode , STRING ) ; this . org.springframework.integration.ftp.session.FtpRemoteFileTemplate.ExistsMode = org.springframework.integration.ftp.session.FtpRemoteFileTemplate.ExistsMode ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( final ClientCallback < FTPClient , T > org.springframework.integration.ftp.session.ClientCallback<org.springframework.integration.ftp.session.FTPClient,T> ) { return execute ( session -> callback . doWithClient ( ( FTPClient ) session . getClientInstance ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( final java.lang.String java.lang.String ) { return T ( client -> { try { switch ( FtpRemoteFileTemplate .this . existsMode ) { case STAT : return client . getStatus ( path ) != null ; case NLST : String [] names = client . listNames ( path ) ; return ! ObjectUtils . isEmpty ( names ) ; case NLST_AND_DIRS : return getSession ( ) . exists ( path ) ; default: throw new IllegalStateException ( STRING + FtpRemoteFileTemplate .this . existsMode ) ; } } catch ( IOException e ) { throw new MessagingException ( STRING + path , e ) ; } } ) ; }  <METHOD_END>
