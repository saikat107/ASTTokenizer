<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( ) { this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( Qualifier .class ) ; try { this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) ClassUtils . forName ( STRING , org.springframework.beans.factory.annotation.QualifierAnnotationAutowireCandidateResolver .class . java.lang.ClassLoader ( ) ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { Assert . notNull ( java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> , STRING ) ; this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( BeanDefinitionHolder org.springframework.beans.factory.annotation.BeanDefinitionHolder , DependencyDescriptor org.springframework.beans.factory.annotation.DependencyDescriptor ) { boolean boolean = super. isAutowireCandidate ( org.springframework.beans.factory.annotation.BeanDefinitionHolder , org.springframework.beans.factory.annotation.DependencyDescriptor ) ; if ( boolean && org.springframework.beans.factory.annotation.DependencyDescriptor != null ) { boolean = boolean ( org.springframework.beans.factory.annotation.BeanDefinitionHolder , org.springframework.beans.factory.annotation.DependencyDescriptor . getAnnotations ( ) ) ; if ( boolean ) { MethodParameter org.springframework.beans.factory.annotation.MethodParameter = org.springframework.beans.factory.annotation.DependencyDescriptor . getMethodParameter ( ) ; if ( org.springframework.beans.factory.annotation.MethodParameter != null ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.factory.annotation.MethodParameter . getMethod ( ) ; if ( java.lang.reflect.Method == null || void .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { boolean = boolean ( org.springframework.beans.factory.annotation.BeanDefinitionHolder , org.springframework.beans.factory.annotation.MethodParameter . getMethodAnnotations ( ) ) ; } } } } return boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanDefinitionHolder org.springframework.beans.factory.annotation.BeanDefinitionHolder , java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { if ( ObjectUtils . isEmpty ( java.lang.annotation.Annotation[] ) ) { return true ; } SimpleTypeConverter org.springframework.beans.factory.annotation.SimpleTypeConverter = new SimpleTypeConverter ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; boolean boolean = true ; boolean boolean = false ; if ( boolean ( java.lang.Class<> ) ) { if ( ! boolean ( org.springframework.beans.factory.annotation.BeanDefinitionHolder , java.lang.annotation.Annotation , org.springframework.beans.factory.annotation.SimpleTypeConverter ) ) { boolean = true ; } else { boolean = false ; } } if ( boolean ) { boolean boolean = false ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.Class<> . java.lang.annotation.Annotation[] ( ) ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; if ( boolean ( java.lang.Class<> ) ) { boolean = true ; if ( ( boolean && StringUtils . isEmpty ( AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ) ) || ! boolean ( org.springframework.beans.factory.annotation.BeanDefinitionHolder , java.lang.annotation.Annotation , org.springframework.beans.factory.annotation.SimpleTypeConverter ) ) { return false ; } } } if ( boolean && ! boolean ) { return false ; } } } return true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : this . java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) || java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BeanDefinitionHolder org.springframework.beans.factory.annotation.BeanDefinitionHolder , java.lang.annotation.Annotation java.lang.annotation.Annotation , TypeConverter org.springframework.beans.factory.annotation.TypeConverter ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = ( RootBeanDefinition ) org.springframework.beans.factory.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ; AutowireCandidateQualifier org.springframework.beans.factory.annotation.AutowireCandidateQualifier = org.springframework.beans.factory.annotation.RootBeanDefinition . getQualifier ( java.lang.Class<> . java.lang.String ( ) ) ; if ( org.springframework.beans.factory.annotation.AutowireCandidateQualifier == null ) { org.springframework.beans.factory.annotation.AutowireCandidateQualifier = org.springframework.beans.factory.annotation.RootBeanDefinition . getQualifier ( ClassUtils . getShortName ( java.lang.Class<> ) ) ; } if ( org.springframework.beans.factory.annotation.AutowireCandidateQualifier == null ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = java.lang.annotation.Annotation ( org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<> ) ; if ( java.lang.annotation.Annotation == null ) { java.lang.annotation.Annotation = java.lang.annotation.Annotation ( org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<> ) ; } if ( java.lang.annotation.Annotation == null ) { RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = getResolvedDecoratedDefinition ( org.springframework.beans.factory.annotation.RootBeanDefinition ) ; if ( org.springframework.beans.factory.annotation.RootBeanDefinition != null ) { java.lang.annotation.Annotation = java.lang.annotation.Annotation ( org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<> ) ; } } if ( java.lang.annotation.Annotation == null ) { if ( getBeanFactory ( ) != null ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = getBeanFactory ( ) . getType ( org.springframework.beans.factory.annotation.BeanDefinitionHolder . getBeanName ( ) ) ; if ( java.lang.Class<> != null ) { java.lang.annotation.Annotation = AnnotationUtils . getAnnotation ( ClassUtils . getUserClass ( java.lang.Class<> ) , java.lang.Class<> ) ; } } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.annotation.NoSuchBeanDefinitionException ) { } } if ( java.lang.annotation.Annotation == null && org.springframework.beans.factory.annotation.RootBeanDefinition . hasBeanClass ( ) ) { java.lang.annotation.Annotation = AnnotationUtils . getAnnotation ( ClassUtils . getUserClass ( org.springframework.beans.factory.annotation.RootBeanDefinition . getBeanClass ( ) ) , java.lang.Class<> ) ; } } if ( java.lang.annotation.Annotation != null && java.lang.annotation.Annotation . boolean ( java.lang.annotation.Annotation ) ) { return true ; } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) && org.springframework.beans.factory.annotation.AutowireCandidateQualifier == null ) { return false ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.beans.factory.annotation.AutowireCandidateQualifier != null ) { java.lang.Object = org.springframework.beans.factory.annotation.AutowireCandidateQualifier . getAttribute ( java.lang.String ) ; } if ( java.lang.Object == null ) { java.lang.Object = org.springframework.beans.factory.annotation.RootBeanDefinition . getAttribute ( java.lang.String ) ; } if ( java.lang.Object == null && java.lang.String . boolean ( AutowireCandidateQualifier . VALUE_KEY ) && java.lang.Object instanceof java.lang.String && org.springframework.beans.factory.annotation.BeanDefinitionHolder . matchesName ( ( java.lang.String ) java.lang.Object ) ) { continue; } if ( java.lang.Object == null && org.springframework.beans.factory.annotation.AutowireCandidateQualifier != null ) { java.lang.Object = AnnotationUtils . getDefaultValue ( java.lang.annotation.Annotation , java.lang.String ) ; } if ( java.lang.Object != null ) { java.lang.Object = org.springframework.beans.factory.annotation.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } if ( ! java.lang.Object . boolean ( java.lang.Object ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.annotation.Annotation java.lang.annotation.Annotation ( RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.reflect.AnnotatedElement java.lang.reflect.AnnotatedElement = org.springframework.beans.factory.annotation.RootBeanDefinition . getQualifiedElement ( ) ; return ( java.lang.reflect.AnnotatedElement != null ? AnnotationUtils . getAnnotation ( java.lang.reflect.AnnotatedElement , java.lang.Class<> ) : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.annotation.Annotation java.lang.annotation.Annotation ( RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.beans.factory.annotation.RootBeanDefinition . getResolvedFactoryMethod ( ) ; return ( java.lang.reflect.Method != null ? AnnotationUtils . getAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.beans.factory.annotation.DependencyDescriptor ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.annotation.DependencyDescriptor . getAnnotations ( ) ) ; if ( java.lang.Object == null ) { MethodParameter org.springframework.beans.factory.annotation.MethodParameter = org.springframework.beans.factory.annotation.DependencyDescriptor . getMethodParameter ( ) ; if ( org.springframework.beans.factory.annotation.MethodParameter != null ) { java.lang.Object = java.lang.Object ( org.springframework.beans.factory.annotation.MethodParameter . getMethodAnnotations ( ) ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { AnnotationAttributes org.springframework.beans.factory.annotation.AnnotationAttributes = AnnotatedElementUtils . getMergedAnnotationAttributes ( AnnotatedElementUtils . forAnnotations ( java.lang.annotation.Annotation[] ) , this . java.lang.Class<> ) ; if ( org.springframework.beans.factory.annotation.AnnotationAttributes != null ) { return java.lang.Object ( org.springframework.beans.factory.annotation.AnnotationAttributes ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( AnnotationAttributes org.springframework.beans.factory.annotation.AnnotationAttributes ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.annotation.AnnotationAttributes . get ( AnnotationUtils . VALUE ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return java.lang.Object ; }  <METHOD_END>
