<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; assertTrue ( org.springframework.validation.DataBinder . isIgnoreUnknownFields ( ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.validation.DataBinder . getBindingResult ( ) . getModel ( ) ; assertTrue ( STRING , java.util.Map<,> . int ( ) == NUMBER ) ; TestBean org.springframework.validation.TestBean = ( TestBean ) java.util.Map<,> . get ( STRING ) ; assertTrue ( STRING , org.springframework.validation.TestBean . equals ( org.springframework.validation.TestBean ) ) ; BindingResult org.springframework.validation.BindingResult = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; assertEquals ( org.springframework.validation.BindingResult , org.springframework.validation.DataBinder . getBindingResult ( ) ) ; assertEquals ( org.springframework.validation.DataBinder . getBindingResult ( ) , org.springframework.validation.BindingResult ) ; BindException org.springframework.validation.BindException = new BindException ( org.springframework.validation.BindingResult ) ; assertEquals ( org.springframework.validation.BindException , org.springframework.validation.BindingResult ) ; assertEquals ( org.springframework.validation.BindingResult , org.springframework.validation.BindException ) ; assertEquals ( org.springframework.validation.BindException , org.springframework.validation.DataBinder . getBindingResult ( ) ) ; assertEquals ( org.springframework.validation.DataBinder . getBindingResult ( ) , org.springframework.validation.BindException ) ; org.springframework.validation.BindingResult . reject ( STRING ) ; assertTrue ( ! org.springframework.validation.BindingResult . equals ( org.springframework.validation.DataBinder . getBindingResult ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; assertTrue ( org.springframework.validation.DataBinder . isIgnoreUnknownFields ( ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; assertTrue ( org.springframework.validation.TestBean . isJedi ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( new TestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; assertTrue ( org.springframework.validation.DataBinder . isIgnoreUnknownFields ( ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getSpouse ( ) . getName ( ) ) ; assertTrue ( ( ( TestBean ) org.springframework.validation.TestBean . getSpouse ( ) ) . isJedi ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setIgnoreUnknownFields ( false ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , NUMBER ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.validation.NotWritablePropertyException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , NUMBER ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( NullValueInNestedPathException org.springframework.validation.NullValueInNestedPathException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setIgnoreInvalidFields ( true ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , NUMBER ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; try { org.springframework.validation.DataBinder . close ( ) ; fail ( STRING ) ; } catch ( BindException org.springframework.validation.BindException ) { assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.validation.DataBinder . getBindingResult ( ) . getModel ( ) ; TestBean org.springframework.validation.TestBean = ( TestBean ) java.util.Map<,> . get ( STRING ) ; assertTrue ( STRING , org.springframework.validation.TestBean . equals ( org.springframework.validation.TestBean ) ) ; BindingResult org.springframework.validation.BindingResult = ( BindingResult ) java.util.Map<,> . get ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; assertSame ( org.springframework.validation.BindingResult , BindingResultUtils . getBindingResult ( java.util.Map<,> , STRING ) ) ; assertSame ( org.springframework.validation.BindingResult , BindingResultUtils . getRequiredBindingResult ( java.util.Map<,> , STRING ) ) ; assertNull ( BindingResultUtils . getBindingResult ( java.util.Map<,> , STRING ) ) ; try { BindingResultUtils . getRequiredBindingResult ( java.util.Map<,> , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {			} assertTrue ( STRING , org.springframework.validation.BindingResult == org.springframework.validation.DataBinder . getBindingResult ( ) ) ; assertTrue ( org.springframework.validation.BindingResult . hasErrors ( ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getErrorCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . hasFieldErrors ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getFieldErrorCount ( STRING ) == NUMBER ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . hasFieldErrors ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getFieldErrorCount ( STRING ) == NUMBER ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertNull ( org.springframework.validation.TestBean . getTouchy ( ) ) ; org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( org.springframework.validation.DataBinder . getBindingResult ( ) , org.springframework.validation.BindException . getBindingResult ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . setIgnoreUnknownFields ( false ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( NotWritablePropertyException org.springframework.validation.NotWritablePropertyException ) { assertTrue ( org.springframework.validation.NotWritablePropertyException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Object ( ) . java.lang.String ( ) . java.lang.String ( NUMBER ) ; } } ) ; org.springframework.validation.DataBinder . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( java.lang.String , NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; try { org.springframework.validation.DataBinder . close ( ) ; fail ( STRING ) ; } catch ( BindException org.springframework.validation.BindException ) { assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.validation.DataBinder . getBindingResult ( ) . getModel ( ) ; TestBean org.springframework.validation.TestBean = ( TestBean ) java.util.Map<,> . get ( STRING ) ; assertTrue ( STRING , org.springframework.validation.TestBean . equals ( org.springframework.validation.TestBean ) ) ; BindingResult org.springframework.validation.BindingResult = ( BindingResult ) java.util.Map<,> . get ( BindingResult . MODEL_KEY_PREFIX + STRING ) ; assertTrue ( STRING , org.springframework.validation.BindingResult == org.springframework.validation.DataBinder . getBindingResult ( ) ) ; assertTrue ( org.springframework.validation.BindingResult . hasErrors ( ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getErrorCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . hasFieldErrors ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getFieldErrorCount ( STRING ) == NUMBER ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getAge ( ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . hasFieldErrors ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.BindingResult . getFieldErrorCount ( STRING ) == NUMBER ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertNull ( org.springframework.validation.TestBean . getTouchy ( ) ) ; assertTrue ( STRING , ! org.springframework.validation.BindingResult . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertNotNull ( org.springframework.validation.TestBean . getSpouse ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Object ( ) . java.lang.String ( ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( java.lang.String , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanWithObjectProperty org.springframework.validation.BeanWithObjectProperty = new BeanWithObjectProperty ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.BeanWithObjectProperty ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.Integer .class , STRING , new CustomNumberEditor ( java.lang.Integer .class , true ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.validation.BeanWithObjectProperty . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; java.beans.PropertyEditor java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , java.lang.Float .class ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( new java.lang.Float ( NUMBER ) ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , null ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( new java.lang.Float ( NUMBER ) , java.beans.PropertyEditor . java.lang.Object ( ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.text.ParseException ( java.lang.String , NUMBER ) ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; } } ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.text.ParseException ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.lang.RuntimeException ( java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; } } ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.lang.RuntimeException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.BeanWithIntegerList org.springframework.validation.DataBinderTests.BeanWithIntegerList = new org.springframework.validation.DataBinderTests.BeanWithIntegerList ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.BeanWithIntegerList ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.validation.DataBinderTests.BeanWithIntegerList . java.util.List<java.lang.Integer> ( ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.BeanWithIntegerList org.springframework.validation.DataBinderTests.BeanWithIntegerList = new org.springframework.validation.DataBinderTests.BeanWithIntegerList ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.BeanWithIntegerList ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.DataBinderTests.BeanWithIntegerList . java.util.List<java.lang.Integer> ( ) . boolean ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; java.beans.PropertyEditor java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , java.lang.Float .class ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( new java.lang.Float ( NUMBER ) ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , null ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( STRING ) ; assertEquals ( new java.lang.Float ( NUMBER ) , java.beans.PropertyEditor . java.lang.Object ( ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . initDirectFieldAccess ( ) ; FormattingConversionService org.springframework.validation.FormattingConversionService = new FormattingConversionService ( ) ; DefaultConversionService . addDefaultConverters ( org.springframework.validation.FormattingConversionService ) ; org.springframework.validation.FormattingConversionService . addFormatterForFieldType ( java.lang.Float .class , new NumberStyleFormatter ( ) ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.FormattingConversionService ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new NumberStyleFormatter ( ) , java.lang.Float .class ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; java.beans.PropertyEditor java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , java.lang.Float .class ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( new java.lang.Float ( NUMBER ) ) ; assertEquals ( STRING , java.beans.PropertyEditor . java.lang.String ( ) ) ; java.beans.PropertyEditor = org.springframework.validation.DataBinder . getBindingResult ( ) . findEditor ( STRING , null ) ; assertNotNull ( java.beans.PropertyEditor ) ; java.beans.PropertyEditor . void ( STRING ) ; assertTrue ( ( ( java.lang.Number ) java.beans.PropertyEditor . java.lang.Object ( ) ) . float ( ) == NUMBER ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new NumberStyleFormatter ( ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( new java.lang.Float ( NUMBER ) , org.springframework.validation.TestBean . getMyFloat ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; } finally { LocaleContextHolder . resetLocaleContext ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.text.ParseException ( java.lang.String , NUMBER ) ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.text.ParseException ( java.lang.String , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.lang.RuntimeException ( java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { throw new java.lang.RuntimeException ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DataBinder org.springframework.validation.DataBinder = new DataBinder ( null ) ; DefaultFormattingConversionService org.springframework.validation.DefaultFormattingConversionService = new DefaultFormattingConversionService ( ) ; org.springframework.validation.DataBinder . setConversionService ( org.springframework.validation.DefaultFormattingConversionService ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( true ) ) ; org.springframework.validation.DataBinderTests.NameBean org.springframework.validation.DataBinderTests.NameBean = new org.springframework.validation.DataBinderTests.NameBean ( STRING ) ; assertEquals ( STRING , STRING , org.springframework.validation.DataBinder . convertIfNecessary ( org.springframework.validation.DataBinderTests.NameBean , java.lang.String .class ) ) ; org.springframework.validation.DefaultFormattingConversionService . addConverter ( new org.springframework.validation.DataBinderTests.NameBeanConverter ( ) ) ; assertEquals ( STRING , STRING , org.springframework.validation.DataBinder . convertIfNecessary ( org.springframework.validation.DataBinderTests.NameBean , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . setDisallowedFields ( STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; org.springframework.validation.DataBinder . setDisallowedFields ( STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; org.springframework.validation.DataBinder . setDisallowedFields ( STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.validation.TestBean . getName ( ) ) ) ; assertTrue ( STRING , STRING . boolean ( org.springframework.validation.TestBean . getTouchy ( ) ) ) ; assertTrue ( STRING , org.springframework.validation.TestBean . getAge ( ) == NUMBER ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.validation.DataBinder . getBindingResult ( ) . getModel ( ) ; assertTrue ( STRING , java.util.Map<,> . int ( ) == NUMBER ) ; TestBean org.springframework.validation.TestBean = ( TestBean ) java.util.Map<,> . get ( STRING ) ; assertTrue ( STRING , org.springframework.validation.TestBean . equals ( org.springframework.validation.TestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; org.springframework.validation.DataBinder . setDisallowedFields ( STRING , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . close ( ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertNull ( org.springframework.validation.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertNull ( org.springframework.validation.TestBean . getSomeMap ( ) . get ( STRING ) ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setRequiredFields ( STRING , STRING , STRING , STRING , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , null ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , null ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; BindingResult org.springframework.validation.BindingResult = org.springframework.validation.DataBinder . getBindingResult ( ) ; assertEquals ( STRING , NUMBER , org.springframework.validation.BindingResult . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setRequiredFields ( STRING , STRING , STRING , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; BindingResult org.springframework.validation.BindingResult = org.springframework.validation.DataBinder . getBindingResult ( ) ; assertEquals ( STRING , NUMBER , org.springframework.validation.BindingResult . getErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindingResult . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( ITestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertNotNull ( org.springframework.validation.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , null , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.Object ( ) == null || ! java.lang.String . boolean ( java.lang.Object ( ) . java.lang.String ( ) ) ) { void ( java.lang.String ) ; } } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.Object ( ) == null || ! java.lang.String . boolean ( java.lang.Object ( ) . java.lang.String ( ) ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getNestedPath ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getTouchy ( ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( int .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new java.lang.Integer ( NUMBER ) ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new java.lang.Integer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , null , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return STRING + java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String . java.lang.String ( NUMBER ) ; } } , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getNestedPath ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getTouchy ( ) ) ; assertTrue ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new Formatter < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return NUMBER ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.util.Locale java.util.Locale ) { return STRING ; } } , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Integer java.lang.Integer , java.util.Locale java.util.Locale ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . addCustomFormatter ( new Formatter < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return STRING + java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.DataBinder . getBindingResult ( ) . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getRejectedValue ( ) ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.Book org.springframework.validation.DataBinderTests.Book = new org.springframework.validation.DataBinderTests.Book ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.Book ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.Book . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.Book . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.DataBinderTests.Book . int ( ) ) ; org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.Book . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.Book . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.DataBinderTests.Book . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.OptionalHolder org.springframework.validation.DataBinderTests.OptionalHolder = new org.springframework.validation.DataBinderTests.OptionalHolder ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.OptionalHolder ) ; org.springframework.validation.DataBinder . setConversionService ( new DefaultConversionService ( ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , null ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.OptionalHolder . java.lang.String ( ) ) ; assertFalse ( org.springframework.validation.DataBinderTests.OptionalHolder . java.util.Optional<java.lang.String> ( ) . boolean ( ) ) ; org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.OptionalHolder . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinderTests.OptionalHolder . java.util.Optional<java.lang.String> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setAge ( NUMBER ) ; org.springframework.validation.TestBean . setName ( STRING ) ; try { org.springframework.validation.TestBean . setTouchy ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( STRING ) ; } TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setAge ( NUMBER ) ; org.springframework.validation.TestBean . setSpouse ( org.springframework.validation.TestBean ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.TestBeanValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldValue ( STRING ) ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.SpouseValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean . getSpouse ( ) , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; org.springframework.validation.Errors . pushNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; org.springframework.validation.Errors . pushNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; org.springframework.validation.Errors . popNestedPath ( ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; org.springframework.validation.Errors . popNestedPath ( ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; try { org.springframework.validation.Errors . popNestedPath ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.validation.Errors . pushNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; try { org.springframework.validation.Errors . popNestedPath ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.validation.Errors . pushNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getErrorCount ( ) ) ; assertTrue ( ! org.springframework.validation.Errors . hasGlobalErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertTrue ( ! org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.TestBeanValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.SpouseValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean . getSpouse ( ) , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertTrue ( org.springframework.validation.Errors . hasErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getErrorCount ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getGlobalErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getGlobalError ( ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getDefaultMessage ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getArguments ( ) [ NUMBER ] ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getCode ( ) ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( null , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setSpouse ( new TestBean ( ) ) ; BeanPropertyBindingResult org.springframework.validation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; DefaultMessageCodesResolver org.springframework.validation.DefaultMessageCodesResolver = new DefaultMessageCodesResolver ( ) ; org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; org.springframework.validation.BeanPropertyBindingResult . setMessageCodesResolver ( org.springframework.validation.DefaultMessageCodesResolver ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.TestBeanValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.BeanPropertyBindingResult ) ; org.springframework.validation.BeanPropertyBindingResult . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getNestedPath ( ) ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.SpouseValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean . getSpouse ( ) , org.springframework.validation.BeanPropertyBindingResult ) ; org.springframework.validation.BeanPropertyBindingResult . setNestedPath ( STRING ) ; assertTrue ( org.springframework.validation.BeanPropertyBindingResult . hasErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getErrorCount ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getGlobalErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getGlobalError ( ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getDefaultMessage ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getGlobalErrors ( ) . get ( NUMBER ) ) . getArguments ( ) [ NUMBER ] ) ; assertTrue ( org.springframework.validation.BeanPropertyBindingResult . hasFieldErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getFieldErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( ) . get ( NUMBER ) ) . getField ( ) ) ; assertTrue ( org.springframework.validation.BeanPropertyBindingResult . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getCode ( ) ) ; assertTrue ( org.springframework.validation.BeanPropertyBindingResult . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getField ( ) ) ; assertEquals ( null , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; assertTrue ( org.springframework.validation.BeanPropertyBindingResult . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , ( org.springframework.validation.BeanPropertyBindingResult . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.TestBeanValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getNestedPath ( ) ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.SpouseValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean . getSpouse ( ) , org.springframework.validation.Errors ) ; org.springframework.validation.Errors . setNestedPath ( STRING ) ; assertTrue ( org.springframework.validation.Errors . hasFieldErrors ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getObjectName ( ) ) ; assertEquals ( null , ( org.springframework.validation.Errors . getFieldErrors ( STRING ) . get ( NUMBER ) ) . getRejectedValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setName ( STRING ) ; Errors org.springframework.validation.Errors = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; Validator org.springframework.validation.Validator = new org.springframework.validation.DataBinderTests.SpouseValidator ( ) ; org.springframework.validation.Validator . validate ( org.springframework.validation.TestBean , org.springframework.validation.Errors ) ; assertTrue ( org.springframework.validation.Errors . hasGlobalErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getGlobalErrorCount ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getGlobalError ( ) . getCode ( ) ) ; assertEquals ( STRING , ( org.springframework.validation.Errors . getGlobalErrors ( ) . get ( NUMBER ) ) . getObjectName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.util.Set .class , new CustomCollectionEditor ( java.util.TreeSet .class ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return new java.lang.Integer ( java.lang.Object . java.lang.String ( ) ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( org.springframework.validation.IndexedTestBean . getSet ( ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) instanceof java.util.TreeSet ) ; assertEquals ( NUMBER , org.springframework.validation.IndexedTestBean . getSet ( ) . size ( ) ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , null ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertNull ( org.springframework.validation.IndexedTestBean . getSet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return new java.lang.Integer ( java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.util.Set .class , new CustomCollectionEditor ( java.util.TreeSet .class , true ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , null ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) instanceof java.util.TreeSet ) ; assertTrue ( org.springframework.validation.IndexedTestBean . getSet ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . setNestedIndexedBean ( new IndexedTestBean ( ) ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.validation.IndexedTestBean . getArray ( ) [ NUMBER ] . getNestedIndexedBean ( ) . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( java.lang.String ) java.lang.Object ( ) ) . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( TestBean .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( TestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldValue ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.validation.Errors . getFieldErrorCount ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldError ( STRING ) . getCodes ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.Errors . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { DerivedTestBean org.springframework.validation.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.validation.DerivedTestBean . setName ( STRING + java.lang.String ) ; void ( org.springframework.validation.DerivedTestBean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( ( TestBean ) java.lang.Object ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String [] .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( ! org.springframework.validation.DataBinder . getBindingResult ( ) . hasErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getStringArray ( ) . length ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getStringArray ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getStringArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( StringUtils . delimitedListToStringArray ( java.lang.String , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , STRING , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; } } ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING , STRING } ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertTrue ( ! org.springframework.validation.DataBinder . getBindingResult ( ) . hasErrors ( ) ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getStringArray ( ) . length ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getStringArray ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.validation.TestBean . getStringArray ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; FieldError org.springframework.validation.FieldError = org.springframework.validation.Errors . getFieldError ( STRING ) ; assertEquals ( STRING , org.springframework.validation.FieldError . getCode ( ) ) ; ResourceBundleMessageSource org.springframework.validation.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.validation.ResourceBundleMessageSource . setBasename ( STRING ) ; java.lang.String java.lang.String = org.springframework.validation.ResourceBundleMessageSource . getMessage ( org.springframework.validation.FieldError , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.validation.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.validation.ResourceBundleMessageSource . setBasename ( STRING ) ; java.lang.String = org.springframework.validation.ResourceBundleMessageSource . getMessage ( org.springframework.validation.FieldError , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.validation.ResourceBundleMessageSource = new ResourceBundleMessageSource ( ) ; org.springframework.validation.ResourceBundleMessageSource . setBasename ( STRING ) ; java.lang.String = org.springframework.validation.ResourceBundleMessageSource . getMessage ( org.springframework.validation.FieldError , java.util.Locale . java.util.Locale ( ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; Errors org.springframework.validation.Errors = org.springframework.validation.DataBinder . getBindingResult ( ) ; BeanPropertyBindingResult org.springframework.validation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.Errors . rejectValue ( STRING , STRING ) ; org.springframework.validation.Errors . addAllErrors ( org.springframework.validation.BeanPropertyBindingResult ) ; FieldError org.springframework.validation.FieldError = org.springframework.validation.Errors . getFieldError ( STRING ) ; assertEquals ( STRING , org.springframework.validation.FieldError . getCode ( ) ) ; FieldError org.springframework.validation.FieldError = org.springframework.validation.Errors . getFieldError ( STRING ) ; assertEquals ( STRING , org.springframework.validation.FieldError . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedTestBean org.springframework.validation.IndexedTestBean = new IndexedTestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.IndexedTestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; TestBean org.springframework.validation.TestBean = new TestBean ( STRING , NUMBER ) ; TestBean org.springframework.validation.TestBean = new TestBean ( STRING , NUMBER ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , org.springframework.validation.TestBean ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , org.springframework.validation.TestBean ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( org.springframework.validation.TestBean . getName ( ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( org.springframework.validation.TestBean . getName ( ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; org.springframework.validation.IndexedTestBean . getList ( ) . set ( NUMBER , org.springframework.validation.TestBean ) ; org.springframework.validation.IndexedTestBean . getList ( ) . set ( NUMBER , org.springframework.validation.TestBean ) ; assertEquals ( org.springframework.validation.TestBean . getName ( ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; assertEquals ( org.springframework.validation.TestBean . getName ( ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; org.springframework.validation.TestBean . setName ( STRING ) ; org.springframework.validation.TestBean . setAge ( NUMBER ) ; BeanPropertyBindingResult org.springframework.validation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.BeanPropertyBindingResult . reject ( STRING ) ; org.springframework.validation.BeanPropertyBindingResult . rejectValue ( STRING , STRING ) ; StaticMessageSource org.springframework.validation.StaticMessageSource = new StaticMessageSource ( ) ; org.springframework.validation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.validation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; assertEquals ( STRING , org.springframework.validation.StaticMessageSource . getMessage ( org.springframework.validation.BeanPropertyBindingResult . getGlobalError ( ) , java.util.Locale . java.util.Locale ) ) ; assertEquals ( STRING , org.springframework.validation.StaticMessageSource . getMessage ( org.springframework.validation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializablePerson org.springframework.validation.SerializablePerson = new SerializablePerson ( ) ; org.springframework.validation.SerializablePerson . setName ( STRING ) ; org.springframework.validation.SerializablePerson . setAge ( NUMBER ) ; BindException org.springframework.validation.BindException = new BindException ( org.springframework.validation.SerializablePerson , STRING ) ; org.springframework.validation.BindException . reject ( STRING , STRING ) ; org.springframework.validation.BindException . rejectValue ( STRING , STRING , STRING ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.validation.BindException ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( java.io.ByteArrayInputStream ) ; BindException org.springframework.validation.BindException = ( BindException ) java.io.ObjectInputStream . java.lang.Object ( ) ; assertTrue ( org.springframework.validation.BindException . hasGlobalErrors ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindException . getGlobalError ( ) . getCode ( ) ) ; assertTrue ( org.springframework.validation.BindException . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindException . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.validation.BindException . getFieldValue ( STRING ) ) ; org.springframework.validation.BindException . rejectValue ( STRING , STRING , STRING ) ; assertTrue ( org.springframework.validation.BindException . hasFieldErrors ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.BindException . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( STRING , org.springframework.validation.BindException . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setAllowedFields ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , java.lang.String ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , java.lang.String ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( java.lang.String , org.springframework.validation.TestBean . getName ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.validation.DataBinder . getBindingResult ( ) . getSuppressedFields ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getFriends ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( InvalidPropertyException org.springframework.validation.InvalidPropertyException ) { assertTrue ( org.springframework.validation.InvalidPropertyException . getRootCause ( ) instanceof java.lang.IndexOutOfBoundsException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setAutoGrowCollectionLimit ( NUMBER ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.validation.TestBean . getFriends ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setAutoGrowCollectionLimit ( NUMBER ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; try { org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; fail ( STRING ) ; } catch ( InvalidPropertyException org.springframework.validation.InvalidPropertyException ) { assertTrue ( org.springframework.validation.InvalidPropertyException . getRootCause ( ) instanceof java.lang.IndexOutOfBoundsException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.Form org.springframework.validation.DataBinderTests.Form = new org.springframework.validation.DataBinderTests.Form ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.Form , STRING ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertFalse ( org.springframework.validation.DataBinder . getBindingResult ( ) . hasErrors ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.validation.DataBinderTests.Form . java.util.Map<java.lang.String,java.lang.Object> ( ) . java.lang.Object ( STRING ) ; assertEquals ( STRING , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getGlobalError ( ) ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( ) ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getGlobalError ( ) ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) ) ; assertNull ( org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( ) . getField ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getField ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.DataBinderTests.BeanWithIntegerList org.springframework.validation.DataBinderTests.BeanWithIntegerList = new org.springframework.validation.DataBinderTests.BeanWithIntegerList ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.DataBinderTests.BeanWithIntegerList ) ; org.springframework.validation.DataBinder . setAutoGrowCollectionLimit ( NUMBER ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( NUMBER , org.springframework.validation.DataBinderTests.BeanWithIntegerList . java.util.List<java.lang.Integer> ( ) . int ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.validation.DataBinderTests.BeanWithIntegerList . java.util.List<java.lang.Integer> ( ) . java.lang.Integer ( NUMBER ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.validation.ExpectedException . expectMessage ( STRING ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( new org.springframework.validation.DataBinderTests.BeanWithIntegerList ( ) ) ; org.springframework.validation.DataBinder . registerCustomEditor ( java.lang.String .class , new StringTrimmerEditor ( true ) ) ; org.springframework.validation.DataBinder . setAutoGrowCollectionLimit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; DefaultMessageCodesResolver org.springframework.validation.DefaultMessageCodesResolver = new DefaultMessageCodesResolver ( ) ; org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( org.springframework.validation.DefaultMessageCodesResolver ) ; org.springframework.validation.DataBinder . setAutoGrowCollectionLimit ( NUMBER ) ; org.springframework.validation.DataBinder . initBeanPropertyAccess ( ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; assertEquals ( NUMBER , BeanWrapper .class . org.springframework.validation.BeanWrapper ( org.springframework.validation.DataBinder . getInternalBindingResult ( ) . getPropertyAccessor ( ) ) . getAutoGrowCollectionLimit ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; DefaultMessageCodesResolver org.springframework.validation.DefaultMessageCodesResolver = new DefaultMessageCodesResolver ( ) ; org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( org.springframework.validation.DefaultMessageCodesResolver ) ; org.springframework.validation.DataBinder . initDirectFieldAccess ( ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . initBeanPropertyAccess ( ) ; DefaultMessageCodesResolver org.springframework.validation.DefaultMessageCodesResolver = new DefaultMessageCodesResolver ( ) ; org.springframework.validation.DefaultMessageCodesResolver . setPrefix ( STRING ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( org.springframework.validation.DefaultMessageCodesResolver ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . initBeanPropertyAccess ( ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( null ) ; MutablePropertyValues org.springframework.validation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.validation.DataBinder . bind ( org.springframework.validation.MutablePropertyValues ) ; assertEquals ( STRING , org.springframework.validation.DataBinder . getBindingResult ( ) . getFieldError ( STRING ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.validation.ExpectedException . expectMessage ( STRING ) ; TestBean org.springframework.validation.TestBean = new TestBean ( ) ; DataBinder org.springframework.validation.DataBinder = new DataBinder ( org.springframework.validation.TestBean , STRING ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( new DefaultMessageCodesResolver ( ) ) ; org.springframework.validation.DataBinder . setMessageCodesResolver ( new DefaultMessageCodesResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( ) { return java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { this . java.util.List<java.lang.Integer> = java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . java.util.Optional<java.lang.String> = java.util.Optional<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return TestBean .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors ) { TestBean org.springframework.validation.TestBean = ( TestBean ) java.lang.Object ; if ( org.springframework.validation.TestBean . getAge ( ) < NUMBER ) { org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; } if ( org.springframework.validation.TestBean . getAge ( ) % NUMBER == NUMBER ) { org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; } if ( org.springframework.validation.TestBean . getName ( ) == null || ! org.springframework.validation.TestBean . getName ( ) . equals ( STRING ) ) { org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; } if ( org.springframework.validation.TestBean . getTouchy ( ) == null || ! org.springframework.validation.TestBean . getTouchy ( ) . equals ( org.springframework.validation.TestBean . getName ( ) ) ) { org.springframework.validation.Errors . reject ( STRING , STRING ) ; } if ( org.springframework.validation.TestBean . getAge ( ) == NUMBER ) { org.springframework.validation.Errors . reject ( STRING , new java.lang.String [] { STRING } , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return TestBean .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.validation.Errors ) { TestBean org.springframework.validation.TestBean = ( TestBean ) java.lang.Object ; if ( org.springframework.validation.TestBean == null || STRING . boolean ( org.springframework.validation.TestBean . getName ( ) ) ) { org.springframework.validation.Errors . rejectValue ( STRING , STRING ) ; return; } if ( org.springframework.validation.TestBean . getAge ( ) < NUMBER ) { org.springframework.validation.Errors . rejectValue ( STRING , STRING , STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.List<E> = new java.util.ArrayList<E> <> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<E> < E > java.util.List<E> ( ) { return java.util.List<E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public E E ( int int ) { if ( int >= java.util.List<E> . int ( ) ) { for ( int int = java.util.List<E> . int ( ) ; int < int ; int ++ ) { java.util.List<E> . boolean ( null ) ; } java.util.List<E> . boolean ( null ) ; return null ; } else { return java.util.List<E> . E ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.List<E> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( E E ) { return java.util.List<E> . boolean ( E ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , E E ) { java.util.List<E> . void ( int , E ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( int int , java.util.Collection<? extends E> < ? extends E > java.util.Collection<? extends E> ) { return java.util.List<E> . boolean ( int , java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.List<E> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return java.util.List<E> . int ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<E> < E > java.util.Iterator<E> ( ) { return java.util.List<E> . java.util.Iterator<E> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Object java.lang.Object ) { return java.util.List<E> . int ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ListIterator<E> < E > java.util.ListIterator<E> ( ) { return java.util.List<E> . java.util.ListIterator<E> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.ListIterator<E> < E > java.util.ListIterator<E> ( int int ) { return java.util.List<E> . java.util.ListIterator<E> ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public E E ( int int ) { return java.util.List<E> . E ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public E E ( int int , E E ) { return java.util.List<E> . E ( int , E ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.validation.DataBinderTests.GrowingList<java.lang.Object> <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.validation.DataBinderTests.NameBean org.springframework.validation.DataBinderTests.NameBean ) { return STRING + org.springframework.validation.DataBinderTests.NameBean . java.lang.String ( ) + STRING ; }  <METHOD_END>
