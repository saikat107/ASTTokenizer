<METHOD_START> @ Test public void void ( ) { HtmlCharacterEntityReferences org.springframework.web.util.HtmlCharacterEntityReferences = new HtmlCharacterEntityReferences ( ) ; java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = java.util.Map<java.lang.Integer,java.lang.String> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.lang.String java.lang.String = java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( int ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = HtmlCharacterEntityReferences . REFERENCE_START + java.lang.String + HtmlCharacterEntityReferences . REFERENCE_END ; assertTrue ( STRING + int + STRING , org.springframework.web.util.HtmlCharacterEntityReferences . isMappedToReference ( ( char ) int ) ) ; assertEquals ( STRING + int + STRING + java.lang.String , java.lang.String , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( ( char ) int ) ) ; assertEquals ( STRING + java.lang.String + STRING + int , ( char ) int , org.springframework.web.util.HtmlCharacterEntityReferences . convertToCharacter ( java.lang.String ) ) ; } else if ( int == NUMBER ) { assertTrue ( org.springframework.web.util.HtmlCharacterEntityReferences . isMappedToReference ( ( char ) int ) ) ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( ( char ) int ) ) ; } else { assertFalse ( STRING + int + STRING , org.springframework.web.util.HtmlCharacterEntityReferences . isMappedToReference ( ( char ) int ) ) ; assertNull ( STRING + int + STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( ( char ) int ) ) ; } } assertEquals ( STRING , java.util.Map<java.lang.Integer,java.lang.String> . int ( ) + NUMBER , org.springframework.web.util.HtmlCharacterEntityReferences . getSupportedReferenceCount ( ) ) ; assertEquals ( STRING , NUMBER + NUMBER , org.springframework.web.util.HtmlCharacterEntityReferences . getSupportedReferenceCount ( ) ) ; assertEquals ( STRING , ( char ) - NUMBER , org.springframework.web.util.HtmlCharacterEntityReferences . convertToCharacter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HtmlCharacterEntityReferences org.springframework.web.util.HtmlCharacterEntityReferences = new HtmlCharacterEntityReferences ( ) ; java.lang.String java.lang.String = STRING ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( '<' , java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( '>' , java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( '&' , java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( '"' , java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( '\'' , java.lang.String ) ) ; assertNull ( org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( ( char ) NUMBER , java.lang.String ) ) ; assertNull ( org.springframework.web.util.HtmlCharacterEntityReferences . convertToReference ( ( char ) NUMBER , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> ( ) { org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator = new org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator ( ) ; java.util.Map<java.lang.Integer,java.lang.String> < java.lang.Integer , java.lang.String > java.util.Map<java.lang.Integer,java.lang.String> = new java.util.HashMap<java.lang.Integer,java.lang.String> <> ( ) ; while ( org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator . boolean ( ) ) { int int = org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator . int ( ) ; java.lang.String java.lang.String = org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator . java.lang.String ( ) ; java.util.Map<java.lang.Integer,java.lang.String> . java.lang.String ( new java.lang.Integer ( int ) , java.lang.String ) ; } return java.util.Map<java.lang.Integer,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( ) { try { java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.web.util.HtmlCharacterEntityReferencesTests.CharacterEntityResourceIterator> ( ) . java.io.InputStream ( java.lang.String ) ; if ( java.io.InputStream == null ) { throw new java.io.IOException ( STRING + java.lang.String + STRING ) ; } java.io.StreamTokenizer = new java.io.StreamTokenizer ( new java.io.BufferedReader ( new java.io.InputStreamReader ( java.io.InputStream , STRING ) ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( java.lang.String != null || boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { java.lang.String java.lang.String = java.lang.String ; java.lang.String = null ; return java.lang.String ; } return null ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { while ( boolean ( ) ) { java.lang.String java.lang.String = java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ( ) ) ) { int int = int ( ) ; if ( java.lang.String != null && int != - NUMBER ) { this . java.lang.String = java.lang.String ; this . int = int ; return true ; } } } return false ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + java.io.IOException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) java.io.IOException { while ( java.io.StreamTokenizer . int ( ) != java.io.StreamTokenizer . int || ! STRING . boolean ( java.io.StreamTokenizer . java.lang.String ) ) { if ( java.io.StreamTokenizer . int == java.io.StreamTokenizer . int ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> private int int ( ) java.io.IOException { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String != null && java.lang.String . boolean ( STRING ) && java.lang.String . boolean ( STRING ) ) { return java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ) ; } return - NUMBER ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) java.io.IOException { java.io.StreamTokenizer . int ( ) ; return java.io.StreamTokenizer . java.lang.String ; }  <METHOD_END>
