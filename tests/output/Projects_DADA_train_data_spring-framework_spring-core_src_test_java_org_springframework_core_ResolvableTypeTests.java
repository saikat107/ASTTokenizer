<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . NONE ; assertThat ( org.springframework.core.ResolvableType . as ( java.lang.Object .class ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . asMap ( ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . getGenerics ( ) . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType . getInterfaces ( ) . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType . getSuperType ( ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . hasGenerics ( ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( java.lang.String .class ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGenerics ( ) . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.ResolvableType . isAssignableFrom ( ResolvableType . forClass ( java.lang.Object .class ) ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( ( java.lang.reflect.Type ) org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getRawClass ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertFalse ( org.springframework.core.ResolvableType . isAssignableFrom ( java.util.ArrayList .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( null ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.Object .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getRawClass ( ) , equalTo ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forRawClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( ( java.lang.reflect.Type ) org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getRawClass ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertFalse ( org.springframework.core.ResolvableType . isAssignableFrom ( java.util.ArrayList .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forRawClass ( null ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.Object .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getRawClass ( ) , equalTo ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forInstance ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forInstance ( new java.lang.Object ( ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.Object .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forInstance ( new org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType <> ( java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getRawClass ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forInstance ( new org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType<java.lang.String> < java.lang.String > ( null ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Field . java.lang.reflect.Type ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Field . java.lang.reflect.Type ( ) ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Field . java.lang.reflect.Type ( ) ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertEquals ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) ; assertEquals ( org.springframework.core.ResolvableType . hashCode ( ) , org.springframework.core.ResolvableType . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forField ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> < org.springframework.core.ResolvableTypeTests.Constructors > java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> = org.springframework.core.ResolvableTypeTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> ( java.util.List .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forConstructorParameter ( java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> , NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> . java.lang.reflect.Type[] ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forConstructorParameter ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Method . java.lang.reflect.Type[] ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forMethodParameter ( null , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Method . java.lang.reflect.Type[] ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.Map .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; org.springframework.core.MethodParameter . increaseNestingLevel ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Byte .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.Map .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; org.springframework.core.MethodParameter . increaseNestingLevel ( ) ; org.springframework.core.MethodParameter . setTypeIndexForCurrentLevel ( NUMBER ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forMethodParameter ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( java.lang.reflect.Method ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( java.lang.reflect.Method . java.lang.reflect.Type ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forMethodReturnType ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . getClass ( ) , equalTo ( ( java.lang.Class ) java.lang.Class .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.reflect.ParameterizedType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.Class .class ) ) ; assertThat ( ( ( java.lang.Class ) org.springframework.core.ResolvableType . getType ( ) ) . boolean ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.reflect.GenericArrayType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.reflect.ParameterizedType .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . getType ( ) , instanceOf ( java.lang.reflect.WildcardType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.reflect.TypeVariable .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) ( ( java.lang.Class ) java.lang.reflect.Field . java.lang.reflect.Type ( ) ) . java.lang.Class ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . getType ( ) , equalTo ( ( ( java.lang.reflect.GenericArrayType ) org.springframework.core.ResolvableType . getType ( ) ) . java.lang.reflect.Type ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ListOfGenericArray .class ) . asCollection ( ) . getGeneric ( ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , instanceOf ( java.lang.reflect.TypeVariable .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.String .class ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) , equalTo ( ResolvableType . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . asCollection ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Collection .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsMap .class ) . asMap ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . as ( java.util.List .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . as ( java.util.Collection .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . as ( java.util.ArrayList .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . as ( java.util.List .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . as ( java.util.Map .class ) ; assertThat ( org.springframework.core.ResolvableType , sameInstance ( ResolvableType . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . as ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) , equalTo ( org.springframework.core.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) . getSuperType ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.ArrayList .class ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getSuperType ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.AbstractList .class ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getSuperType ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.AbstractCollection .class ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getSuperType ( ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . getInterfaces ( ) . length , equalTo ( NUMBER ) ) ; java.util.SortedSet<java.lang.String> < java.lang.String > java.util.SortedSet<java.lang.String> = new java.util.TreeSet<java.lang.String> <> ( ) ; for ( ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType . getSuperType ( ) . getInterfaces ( ) ) { java.util.SortedSet<java.lang.String> . boolean ( org.springframework.core.ResolvableType . toString ( ) ) ; } assertThat ( java.util.SortedSet<java.lang.String> . java.lang.String ( ) , equalTo ( STRING + STRING + STRING + STRING + STRING + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ResolvableType . forClass ( java.lang.Object .class ) . getSuperType ( ) , equalTo ( ResolvableType . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ResolvableType . forClass ( java.lang.Object .class ) . getInterfaces ( ) . length , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getNested ( NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Byte .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getNested ( NUMBER , java.util.Collections . java.util.Map<java.lang.Integer,java.lang.Integer> ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . getNested ( NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . getGeneric ( ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . asCollection ( ) ; assertThat ( org.springframework.core.ResolvableType . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . asCollection ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER , NUMBER ) . getType ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class , org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) , not ( equalTo ( ResolvableType . NONE ) ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) , equalTo ( ResolvableType . NONE ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER , NUMBER ) , equalTo ( ResolvableType . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . hasGenerics ( ) , equalTo ( false ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . hasGenerics ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class , org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType . getGenerics ( ) ; assertThat ( generics . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType[] [ NUMBER ] . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class ) ; ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType . getGenerics ( ) ; assertThat ( generics . length , equalTo ( NUMBER ) ) ; assertThat ( org.springframework.core.ResolvableType[] [ NUMBER ] . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; ResolvableType [] org.springframework.core.ResolvableType[] = org.springframework.core.ResolvableType . getGenerics ( ) ; assertThat ( generics . length , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class , org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.core.ResolvableType . resolveGenerics ( ) ; assertThat ( java.lang.Class<?>[] . int , equalTo ( NUMBER ) ) ; assertThat ( java.lang.Class<?>[] [ NUMBER ] , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List [] .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List [] [] [] .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getComponentType ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List [] [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType . asCollection ( ) . getGeneric ( ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.TypedFields .class ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . isArray ( ) , equalTo ( true ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( java.lang.Object .class ) , equalTo ( ( java.lang.Class ) java.lang.Object .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Number .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Number .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . as ( java.util.Map .class ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER , NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . as ( java.util.Map .class ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER , NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . as ( java.util.Collection .class ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . as ( java.util.Collection .class ) . getGeneric ( NUMBER ) . as ( java.util.Collection .class ) . resolve ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) , org.springframework.core.ResolvableTypeTests.TypedMethods .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MySimpleInterfaceType .class ) . as ( org.springframework.core.ResolvableTypeTests.MyInterfaceType .class ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MyCollectionInterfaceType .class ) . as ( org.springframework.core.ResolvableTypeTests.MyInterfaceType .class ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.util.Collection .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER , NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MySimpleSuperclassType .class ) . as ( org.springframework.core.ResolvableTypeTests.MySuperclassType .class ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MyCollectionSuperclassType .class ) . as ( org.springframework.core.ResolvableTypeTests.MySuperclassType .class ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.util.Collection .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER , NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.TypedFields .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( org.springframework.core.ResolvableTypeTests.Fields .class , java.lang.Integer .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableType ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) org.springframework.core.ResolvableTypeTests.ExtendsList .class ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MySuperclassType .class , org.springframework.core.ResolvableTypeTests.MyCollectionSuperclassType .class ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.util.Collection .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER , NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = org.springframework.core.ResolvableTypeTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> ( java.util.List .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forConstructorParameter ( java.lang.reflect.Constructor<> , NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.CharSequence .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = org.springframework.core.ResolvableTypeTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> ( java.util.Map .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forConstructorParameter ( java.lang.reflect.Constructor<> , NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = org.springframework.core.ResolvableTypeTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> ( java.util.Map .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forConstructorParameter ( java.lang.reflect.Constructor<> , NUMBER , org.springframework.core.ResolvableTypeTests.TypedConstructors .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.Map .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( java.lang.reflect.Method , NUMBER , org.springframework.core.ResolvableTypeTests.TypedMethods .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; org.springframework.core.MethodParameter . setContainingClass ( org.springframework.core.ResolvableTypeTests.TypedMethods .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.lang.Object .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( org.springframework.core.ResolvableTypeTests.Methods .class , java.lang.Integer .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter , org.springframework.core.ResolvableType ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( java.lang.reflect.Method ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( java.lang.reflect.Method , org.springframework.core.ResolvableTypeTests.TypedMethods .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) . java.lang.reflect.Type ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( java.lang.reflect.Type ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Type java.lang.reflect.Type = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) . java.lang.reflect.Type ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( java.lang.reflect.Type , ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.TypedMethods .class ) . as ( org.springframework.core.ResolvableTypeTests.Methods .class ) . asVariableResolver ( ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { VariableResolver org.springframework.core.VariableResolver = mock ( VariableResolver .class ) ; given ( org.springframework.core.VariableResolver . getSource ( ) ) . willReturn ( this ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Long .class ) ; given ( org.springframework.core.VariableResolver . resolveVariable ( any ( ) ) ) . willReturn ( org.springframework.core.ResolvableType ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) . java.lang.reflect.Type ( ) , org.springframework.core.VariableResolver ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) . java.lang.reflect.Type ( ) , org.springframework.core.VariableResolver ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Long .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( ) , equalTo ( ( java.lang.Class ) java.lang.Long .class ) ) ; verify ( org.springframework.core.VariableResolver , atLeastOnce ( ) ) . resolveVariable ( this . org.springframework.core.ArgumentCaptor<java.lang.reflect.TypeVariable<?>> . capture ( ) ) ; assertThat ( this . org.springframework.core.ArgumentCaptor<java.lang.reflect.TypeVariable<?>> . getValue ( ) . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( ResolvableType . NONE . toString ( ) , equalTo ( STRING ) ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , org.springframework.core.ResolvableTypeTests.VariableNameSwitch .class . java.lang.String ( ) + STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; assertThat ( ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ListOfGenericArray .class ) . toString ( ) , equalTo ( org.springframework.core.ResolvableTypeTests.ListOfGenericArray .class . java.lang.String ( ) ) ) ; assertThat ( ResolvableType . forClass ( java.util.List .class , org.springframework.core.ResolvableTypeTests.ListOfGenericArray .class ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.ResolvableTypeTests.MySimpleInterfaceType .class ; java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; MethodParameter org.springframework.core.MethodParameter = MethodParameter . forExecutable ( java.lang.reflect.Method , NUMBER ) ; assertThat ( ResolvableType . forField ( java.lang.reflect.Field ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.reflect.Field ) ) ; assertThat ( ResolvableType . forField ( java.lang.reflect.Field ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.reflect.Field ) ) ; assertThat ( ResolvableType . forMethodParameter ( org.springframework.core.MethodParameter ) . getSource ( ) , equalTo ( ( java.lang.Object ) org.springframework.core.MethodParameter ) ) ; assertThat ( ResolvableType . forMethodParameter ( java.lang.reflect.Method , NUMBER ) . getSource ( ) , equalTo ( ( java.lang.Object ) org.springframework.core.MethodParameter ) ) ; assertThat ( ResolvableType . forClass ( java.lang.Class<> ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.Class<> ) ) ; assertThat ( ResolvableType . forClass ( java.lang.Class<> ) . getSuperType ( ) . getSource ( ) , equalTo ( ( java.lang.Object ) java.lang.Class<> . java.lang.reflect.Type ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( java.lang.String ) ) ; assertThat ( STRING + java.lang.String + STRING , org.springframework.core.ResolvableType . toString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( java.lang.String ) , org.springframework.core.ResolvableTypeTests.TypedFields .class ) ; assertThat ( STRING + java.lang.String + STRING , org.springframework.core.ResolvableType . toString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = org.springframework.core.ResolvableTypeTests.EnclosedInParameterizedType . org.springframework.core.ResolvableTypeTests.EnclosedInParameterizedType.InnerTyped .class . java.lang.reflect.Field ( STRING ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field , org.springframework.core.ResolvableTypeTests.TypedEnclosedInParameterizedType . org.springframework.core.ResolvableTypeTests.TypedEnclosedInParameterizedType.TypedInnerTyped .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( java.util.List .class , ResolvableType . forClassWithGenerics ( java.util.List .class , java.lang.String .class ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . getGeneric ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . getGeneric ( ) . asCollection ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . asCollection ( ) . getGeneric ( ) . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.reflect.Type ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forClass ( java.lang.Object .class ) . isAssignableFrom ( ( ResolvableType ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Object .class ) ; assertThat ( org.springframework.core.ResolvableType . isAssignableFrom ( ResolvableType . NONE ) , equalTo ( false ) ) ; assertThat ( ResolvableType . NONE . isAssignableFrom ( org.springframework.core.ResolvableType ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.CharSequence .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.String .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.String .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.StringBuilder .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.String .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.StringBuilder .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.String .class ) ) ; assertFalse ( org.springframework.core.ResolvableType . isAssignableFrom ( java.lang.StringBuilder .class ) ) ; assertTrue ( org.springframework.core.ResolvableType . isInstance ( STRING ) ) ; assertTrue ( org.springframework.core.ResolvableType . isInstance ( new java.lang.StringBuilder ( STRING ) ) ) ; assertTrue ( org.springframework.core.ResolvableType . isInstance ( STRING ) ) ; assertTrue ( org.springframework.core.ResolvableType . isInstance ( new java.lang.StringBuilder ( STRING ) ) ) ; assertTrue ( org.springframework.core.ResolvableType . isInstance ( STRING ) ) ; assertFalse ( org.springframework.core.ResolvableType . isInstance ( new java.lang.StringBuilder ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , nullValue ( ) ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.CharSequence .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.String .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.Object .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.CharSequence .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.lang.String .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.Assignment .class ) . getGeneric ( ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true , true , false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false , false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.AssignmentBase .class . java.lang.reflect.Field ( STRING ) ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( true ) ; org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( org.springframework.core.ResolvableType , org.springframework.core.ResolvableType ) . equalTo ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) . java.lang.reflect.Type ( ) , ( VariableResolver ) null ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.TypedFields .class ) ; assertThat ( org.springframework.core.ResolvableType , equalTo ( org.springframework.core.ResolvableType ) ) ; assertThat ( org.springframework.core.ResolvableType . hashCode ( ) , equalTo ( org.springframework.core.ResolvableType . hashCode ( ) ) ) ; assertThat ( org.springframework.core.ResolvableType , not ( equalTo ( org.springframework.core.ResolvableType ) ) ) ; assertThat ( org.springframework.core.ResolvableType , not ( equalTo ( org.springframework.core.ResolvableType ) ) ) ; assertThat ( org.springframework.core.ResolvableType , equalTo ( org.springframework.core.ResolvableType ) ) ; assertThat ( org.springframework.core.ResolvableType , not ( equalTo ( org.springframework.core.ResolvableType ) ) ) ; assertThat ( org.springframework.core.ResolvableType , not ( equalTo ( org.springframework.core.ResolvableType ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( java.lang.Class<? extends org.springframework.core.ResolvableTypeTests> ( ) . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getSuperType ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . asMap ( ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.Integer .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List .class ) ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( NUMBER ) . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolveGeneric ( NUMBER , NUMBER ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( java.util.Map .class , java.lang.Integer .class , java.lang.String .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( java.util.List .class , org.springframework.core.ResolvableType ) ; assertThat ( org.springframework.core.ResolvableType . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( MultiValueMap .class , java.lang.Integer .class , java.lang.String .class ) ; assertThat ( org.springframework.core.ResolvableType . asMap ( ) . toString ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.core.ExpectedException . expectMessage ( STRING ) ; ResolvableType . forClassWithGenerics ( java.util.Map .class , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forArrayComponent ( org.springframework.core.ResolvableType ) ; assertThat ( org.springframework.core.ResolvableType . toString ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) java.util.List [] .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.core.ResolvableType ( ResolvableType . forClass ( java.util.List .class ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forMethodParameter ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING , java.util.List .class ) , NUMBER ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forConstructorParameter ( org.springframework.core.ResolvableTypeTests.Constructors .class . java.lang.reflect.Constructor<org.springframework.core.ResolvableTypeTests.Constructors> ( java.util.List .class ) , NUMBER ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . getGeneric ( ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) . asCollection ( ) ) ; org.springframework.core.ResolvableType ( ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsMap .class ) . getSuperType ( ) ) ; ResolvableType org.springframework.core.ResolvableType = org.springframework.core.ResolvableType ( ResolvableType . NONE ) ; assertThat ( org.springframework.core.ResolvableType , sameInstance ( ResolvableType . NONE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( void .class ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) void .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forType ( java.util.ArrayList .class , org.springframework.core.ResolvableType ) ; assertThat ( org.springframework.core.ResolvableType . getGeneric ( ) . resolve ( ) , equalTo ( ( java.lang.Class ) java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.Fields .class . java.lang.reflect.Field ( STRING ) ) ; assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class ) ; assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( java.util.List .class ) . getGeneric ( ) ; assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.MySimpleInterfaceTypeWithImplementsRaw .class ) ; for ( ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType . getGenerics ( ) ) { assertThat ( org.springframework.core.ResolvableType . resolve ( ) , not ( nullValue ( ) ) ) ; } assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.ExtendsMySimpleInterfaceTypeWithImplementsRaw .class ) ; for ( ResolvableType org.springframework.core.ResolvableType : org.springframework.core.ResolvableType . getGenerics ( ) ) { assertThat ( org.springframework.core.ResolvableType . resolve ( ) , not ( nullValue ( ) ) ) ; } assertThat ( org.springframework.core.ResolvableType . hasUnresolvableGenerics ( ) , equalTo ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forField ( org.springframework.core.ResolvableTypeTests.BaseProvider .class . java.lang.reflect.Field ( STRING ) , org.springframework.core.ResolvableTypeTests.BaseProvider .class ) ; assertTrue ( org.springframework.core.ResolvableType . getNested ( NUMBER ) . isAssignableFrom ( ResolvableType . forClass ( org.springframework.core.ResolvableTypeTests.BaseImplementation .class ) ) ) ; assertEquals ( STRING , org.springframework.core.ResolvableType . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forClassWithGenerics ( java.util.concurrent.Callable .class , java.lang.String .class ) ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.core.ResolvableType . getType ( ) ; assertThat ( java.lang.reflect.Type , is ( instanceOf ( java.lang.reflect.ParameterizedType .class ) ) ) ; assertThat ( ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) , is ( equalTo ( java.util.concurrent.Callable .class ) ) ) ; assertThat ( ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) . int , is ( equalTo ( NUMBER ) ) ) ; assertThat ( ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) [ NUMBER ] , is ( equalTo ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.core.ResolvableType = ResolvableType . forRawClass ( java.util.Collection .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forRawClass ( java.util.Set .class ) ; ResolvableType org.springframework.core.ResolvableType = ResolvableType . forMethodReturnType ( org.springframework.core.ResolvableTypeTests.Methods .class . java.lang.reflect.Method ( STRING ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableType ) ) ; assertTrue ( org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableType ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ResolvableType org.springframework.core.ResolvableType ) throws java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( org.springframework.core.ResolvableType ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; ResolvableType org.springframework.core.ResolvableType = ( ResolvableType ) java.io.ObjectInputStream . java.lang.Object ( ) ; assertThat ( org.springframework.core.ResolvableType , equalTo ( org.springframework.core.ResolvableType ) ) ; assertThat ( org.springframework.core.ResolvableType . getType ( ) , equalTo ( org.springframework.core.ResolvableType . getType ( ) ) ) ; assertThat ( org.springframework.core.ResolvableType . resolve ( ) , equalTo ( ( java.lang.Class ) org.springframework.core.ResolvableType . resolve ( ) ) ) ; return org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> private static org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( final ResolvableType org.springframework.core.ResolvableType , final ResolvableType ... org.springframework.core.ResolvableType[] ) { return new org.springframework.core.ResolvableTypeTests.AssertAssignbleMatcher ( ) { @ java.lang.Override public void void ( boolean ... boolean[] ) { for ( int int = NUMBER ; int < fromTypes . length ; int ++ ) { assertThat ( java.lang.String ( org.springframework.core.ResolvableType ) + STRING + java.lang.String ( org.springframework.core.ResolvableType[] [ int ] ) , org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableType[] [ int ] ) , Matchers . equalTo ( boolean[] [ int ] ) ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean ... boolean[] ) { for ( int int = NUMBER ; int < fromTypes . length ; int ++ ) { assertThat ( java.lang.String ( org.springframework.core.ResolvableType ) + STRING + java.lang.String ( org.springframework.core.ResolvableType[] [ int ] ) , org.springframework.core.ResolvableType . isAssignableFrom ( org.springframework.core.ResolvableType[] [ int ] ) , Matchers . equalTo ( boolean[] [ int ] ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ResolvableType org.springframework.core.ResolvableType ) { if ( org.springframework.core.ResolvableType == ResolvableType . NONE ) { return STRING ; } if ( org.springframework.core.ResolvableType . getType ( ) . getClass ( ) . equals ( java.lang.Class .class ) ) { return org.springframework.core.ResolvableType . toString ( ) ; } return org.springframework.core.ResolvableType . getType ( ) + STRING + org.springframework.core.ResolvableType ; }  <METHOD_END>
<METHOD_START> void void ( boolean ... boolean[] );  <METHOD_END>
<METHOD_START> java.util.List<java.lang.CharSequence> < java.lang.CharSequence > java.util.List<java.lang.CharSequence> ( )  <METHOD_END>
<METHOD_START> void void ( java.util.List<java.lang.CharSequence> < java.lang.CharSequence > java.util.List<java.lang.CharSequence> );  <METHOD_END>
<METHOD_START> < R extends java.lang.CharSequence & java.io.Serializable > R R ( )  <METHOD_END>
<METHOD_START> void void ( java.util.Map<java.util.Map<java.lang.String,java.lang.Integer>,java.util.Map<java.lang.Byte,java.lang.Long>> < java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > , java.util.Map<java.lang.Byte,java.lang.Long> < java.lang.Byte , java.lang.Long > > java.util.Map<java.util.Map<java.lang.String,java.lang.Integer>,java.util.Map<java.lang.Byte,java.lang.Long>> );  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> T T ( )  <METHOD_END>
<METHOD_START> java.util.Set<?> < ? > java.util.Set<?> ( )  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.CharSequence> < java.lang.CharSequence > java.util.List<java.lang.CharSequence> ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.Map<T,java.lang.Long> < T , java.lang.Long > java.util.Map<T,java.lang.Long> ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.List<java.lang.CharSequence> < java.lang.CharSequence > java.util.List<java.lang.CharSequence> ) { super( java.util.List<java.lang.CharSequence> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.Long> < java.lang.String , java.lang.Long > java.util.Map<java.lang.String,java.lang.Long> ) { super( java.util.Map<java.lang.String,java.lang.Long> ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.ResolvableType org.springframework.core.ResolvableType ( ) { if ( this . java.lang.Class<T> == null ) { return null ; } return ResolvableType . forClassWithGenerics ( java.lang.Class<? extends org.springframework.core.ResolvableTypeTests.MyGenericInterfaceType> ( ) , this . java.lang.Class<T> ) ; }  <METHOD_END>
