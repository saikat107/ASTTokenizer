<METHOD_START> @ Test public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; ExpressionState org.springframework.expression.spel.ExpressionState = new ExpressionState ( org.springframework.expression.spel.EvaluationContext ) ; assertEquals ( org.springframework.expression.spel.EvaluationContext , org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ; assertNull ( java.lang.Object ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , NUMBER ) ; java.lang.Object = org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ; assertEquals ( NUMBER , java.lang.Object ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , null ) ; java.lang.Object = org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ; assertEquals ( null , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; TypedValue org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . lookupVariable ( STRING ) ; assertEquals ( TypedValue . NULL , org.springframework.expression.spel.TypedValue ) ; org.springframework.expression.spel.ExpressionState . setVariable ( STRING , NUMBER ) ; org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . lookupVariable ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.TypedValue . getValue ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; org.springframework.expression.spel.ExpressionState . setVariable ( STRING , STRING ) ; org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . lookupVariable ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.TypedValue . getValue ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; TypedValue org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . lookupVariable ( STRING ) ; assertEquals ( TypedValue . NULL , org.springframework.expression.spel.TypedValue ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , NUMBER ) ; org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . lookupVariable ( STRING ) ; assertEquals ( TypedValue . NULL , org.springframework.expression.spel.TypedValue ) ; org.springframework.expression.spel.ExpressionState . setVariable ( STRING , STRING ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertEquals ( null , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . enterScope ( null ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . exitScope ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertEquals ( Inventor .class , org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) . getValue ( ) . getClass ( ) ) ; ( ( StandardEvaluationContext ) org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) ) . setRootObject ( null ) ; assertEquals ( Inventor .class , org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) . getValue ( ) . getClass ( ) ) ; org.springframework.expression.spel.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; assertEquals ( TypedValue . NULL , org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) ) ; ( ( StandardEvaluationContext ) org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) ) . setRootObject ( null ) ; assertEquals ( null , org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertEquals ( org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) . getValue ( ) , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) . getValue ( ) ) ; try { org.springframework.expression.spel.ExpressionState . popActiveContextObject ( ) ; fail ( STRING ) ; } catch ( java.util.EmptyStackException java.util.EmptyStackException ) { } org.springframework.expression.spel.ExpressionState . pushActiveContextObject ( new TypedValue ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) . getValue ( ) ) ; org.springframework.expression.spel.ExpressionState . pushActiveContextObject ( new TypedValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) . getValue ( ) ) ; org.springframework.expression.spel.ExpressionState . popActiveContextObject ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) . getValue ( ) ) ; org.springframework.expression.spel.ExpressionState . popActiveContextObject ( ) ; assertEquals ( org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) . getValue ( ) , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) . getValue ( ) ) ; org.springframework.expression.spel.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; assertEquals ( TypedValue . NULL , org.springframework.expression.spel.ExpressionState . getActiveContextObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . enterScope ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . enterScope ( null ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . exitScope ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . exitScope ( ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = org.springframework.expression.spel.EvaluationContext ( ) ; ExpressionState org.springframework.expression.spel.ExpressionState = new ExpressionState ( org.springframework.expression.spel.EvaluationContext , new TypedValue ( STRING ) ) ; TypedValue org.springframework.expression.spel.TypedValue = org.springframework.expression.spel.ExpressionState . getRootContextObject ( ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.expression.spel.ExpressionState . enterScope ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . enterScope ( null ) ; org.springframework.expression.spel.ExpressionState . setLocalVariable ( STRING , NUMBER ) ; assertEquals ( NUMBER , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; org.springframework.expression.spel.ExpressionState . exitScope ( ) ; org.springframework.expression.spel.ExpressionState . exitScope ( ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; assertNull ( org.springframework.expression.spel.ExpressionState . lookupLocalVariable ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; try { org.springframework.expression.spel.ExpressionState . operate ( Operation . ADD , NUMBER , NUMBER ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException = ( SpelEvaluationException ) org.springframework.expression.spel.EvaluationException ; assertEquals ( SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } try { org.springframework.expression.spel.ExpressionState . operate ( Operation . ADD , null , null ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException = ( SpelEvaluationException ) org.springframework.expression.spel.EvaluationException ; assertEquals ( SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertEquals ( org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) . getTypeComparator ( ) , org.springframework.expression.spel.ExpressionState . getTypeComparator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertNotNull ( org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) . getTypeLocator ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.ExpressionState . findType ( STRING ) ) ; try { org.springframework.expression.spel.ExpressionState . findType ( STRING ) ; fail ( STRING ) ; } catch ( EvaluationException org.springframework.expression.spel.EvaluationException ) { SpelEvaluationException org.springframework.expression.spel.SpelEvaluationException = ( SpelEvaluationException ) org.springframework.expression.spel.EvaluationException ; assertEquals ( SpelMessage . TYPE_NOT_FOUND , org.springframework.expression.spel.SpelEvaluationException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.expression.spel.EvaluationException { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.expression.spel.ExpressionState . convertValue ( NUMBER , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.String ) ; java.lang.String = ( java.lang.String ) org.springframework.expression.spel.ExpressionState . convertValue ( new TypedValue ( NUMBER ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ExpressionState = org.springframework.expression.spel.ExpressionState ( ) ; assertEquals ( org.springframework.expression.spel.ExpressionState . getEvaluationContext ( ) . getPropertyAccessors ( ) , org.springframework.expression.spel.ExpressionState . getPropertyAccessors ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.ExpressionState org.springframework.expression.spel.ExpressionState ( ) { EvaluationContext org.springframework.expression.spel.EvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; ExpressionState org.springframework.expression.spel.ExpressionState = new ExpressionState ( org.springframework.expression.spel.EvaluationContext ) ; return org.springframework.expression.spel.ExpressionState ; }  <METHOD_END>
<METHOD_START> private org.springframework.expression.spel.EvaluationContext org.springframework.expression.spel.EvaluationContext ( ) { return TestScenarioCreator . getTestEvaluationContext ( ) ; }  <METHOD_END>
