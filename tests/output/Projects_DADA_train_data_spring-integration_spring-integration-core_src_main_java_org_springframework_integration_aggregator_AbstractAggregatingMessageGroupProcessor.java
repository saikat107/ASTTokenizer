<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.aggregator.BeanFactory ) throws org.springframework.integration.aggregator.BeansException { this . org.springframework.integration.aggregator.BeanFactory = org.springframework.integration.aggregator.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aggregator.MessageBuilderFactory org.springframework.integration.aggregator.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.aggregator.BeanFactory != null ) { this . org.springframework.integration.aggregator.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.aggregator.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.aggregator.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { Assert . notNull ( org.springframework.integration.aggregator.MessageGroup , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.aggregator.MessageGroup ) ; java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.aggregator.MessageGroup , java.util.Map<java.lang.String,java.lang.Object> ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.aggregator.AbstractIntegrationMessageBuilder<?> ; if ( java.lang.Object instanceof Message < ? > ) { org.springframework.integration.aggregator.AbstractIntegrationMessageBuilder<?> = org.springframework.integration.aggregator.MessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) ; } else if ( java.lang.Object instanceof AbstractIntegrationMessageBuilder ) { org.springframework.integration.aggregator.AbstractIntegrationMessageBuilder<?> = ( AbstractIntegrationMessageBuilder < ? > ) java.lang.Object ; } else { org.springframework.integration.aggregator.AbstractIntegrationMessageBuilder<?> = org.springframework.integration.aggregator.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; } return org.springframework.integration.aggregator.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) . popSequenceDetails ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( Message < ? > org.springframework.integration.aggregator.Message<?> : org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.aggregator.Message<> . getHeaders ( ) . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; if ( MessageHeaders . ID . equals ( java.lang.String ) || MessageHeaders . TIMESTAMP . equals ( java.lang.String ) || IntegrationMessageHeaderAccessor . SEQUENCE_SIZE . equals ( java.lang.String ) || IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER . equals ( java.lang.String ) ) { continue; } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } else { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object != java.lang.Object && ( java.lang.Object == null || ! java.lang.Object . boolean ( java.lang.Object ) ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( this . org.springframework.integration.aggregator.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.aggregator.Log . debug ( STRING + java.lang.String + STRING + STRING + org.springframework.integration.aggregator.MessageGroup . getGroupId ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( MessageGroup org.springframework.integration.aggregator.MessageGroup , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> );  <METHOD_END>
