<METHOD_START> public void ( JpaEntityInformation < T , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,?> , EntityManager org.springframework.data.jpa.repository.support.EntityManager ) { Assert . notNull ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.support.EntityManager , STRING ) ; this . org.springframework.data.jpa.repository.support.JpaEntityInformation<T,?> = org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> ; this . org.springframework.data.jpa.repository.support.EntityManager = org.springframework.data.jpa.repository.support.EntityManager ; this . org.springframework.data.jpa.repository.support.PersistenceProvider = PersistenceProvider . fromEntityManager ( org.springframework.data.jpa.repository.support.EntityManager ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> , EntityManager org.springframework.data.jpa.repository.support.EntityManager ) { this( JpaEntityInformationSupport . getEntityInformation ( java.lang.Class<T> , org.springframework.data.jpa.repository.support.EntityManager ) , org.springframework.data.jpa.repository.support.EntityManager ); }  <METHOD_END>
<METHOD_START> public void void ( CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata ) { this . org.springframework.data.jpa.repository.support.CrudMethodMetadata = org.springframework.data.jpa.repository.support.CrudMethodMetadata ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.support.CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata ( ) { return org.springframework.data.jpa.repository.support.CrudMethodMetadata ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<T> < T > java.lang.Class<T> ( ) { return org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getJavaType ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return getQueryString ( DELETE_ALL_QUERY_STRING , org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getEntityName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( COUNT_QUERY_STRING , org.springframework.data.jpa.repository.support.PersistenceProvider . getCountQueryPlaceholder ( ) , STRING ) ; return getQueryString ( java.lang.String , org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getEntityName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ID ID ) { Assert . notNull ( ID , java.lang.String ) ; void ( java.util.Optional<T> ( ID ) . T ( ( ) new EmptyResultDataAccessException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getJavaType ( ) , ID ) , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( T T ) { Assert . notNull ( T , STRING ) ; org.springframework.data.jpa.repository.support.EntityManager . remove ( org.springframework.data.jpa.repository.support.EntityManager . contains ( T ) ? T : org.springframework.data.jpa.repository.support.EntityManager . merge ( T ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { Assert . notNull ( java.lang.Iterable<> , STRING ) ; for ( T T : java.lang.Iterable<> ) { void ( T ) ; } }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { Assert . notNull ( java.lang.Iterable<T> , STRING ) ; if ( ! java.lang.Iterable<T> . java.util.Iterator<T> ( ) . boolean ( ) ) { return; } applyAndBind ( getQueryString ( DELETE_ALL_QUERY_STRING , org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getEntityName ( ) ) , java.lang.Iterable<T> , org.springframework.data.jpa.repository.support.EntityManager ) . executeUpdate ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { for ( T T : java.util.List<T> ( ) ) { void ( T ) ; } }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { org.springframework.data.jpa.repository.support.EntityManager . createQuery ( java.lang.String ( ) ) . executeUpdate ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { Assert . notNull ( ID , java.lang.String ) ; java.lang.Class<T> < T > java.lang.Class<T> = java.lang.Class<T> ( ) ; if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata == null ) { return java.util.Optional . java.util.Optional ( org.springframework.data.jpa.repository.support.EntityManager . find ( java.lang.Class<T> , ID ) ) ; } LockModeType org.springframework.data.jpa.repository.support.LockModeType = org.springframework.data.jpa.repository.support.CrudMethodMetadata . getLockModeType ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.jpa.repository.support.LockModeType == null ? org.springframework.data.jpa.repository.support.EntityManager . find ( java.lang.Class<T> , ID , java.util.Map<java.lang.String,java.lang.Object> ) : org.springframework.data.jpa.repository.support.EntityManager . find ( java.lang.Class<T> , ID , org.springframework.data.jpa.repository.support.LockModeType , java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata . getEntityGraph ( ) == null ) { return org.springframework.data.jpa.repository.support.CrudMethodMetadata . getQueryHints ( ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( org.springframework.data.jpa.repository.support.CrudMethodMetadata . getQueryHints ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( Jpa21Utils . tryGetFetchGraphHints ( org.springframework.data.jpa.repository.support.EntityManager , org.springframework.data.jpa.repository.support.JpaEntityGraph ( ) , java.lang.Class<T> ( ) ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.support.JpaEntityGraph org.springframework.data.jpa.repository.support.JpaEntityGraph ( ) { java.lang.String java.lang.String = this . org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getEntityName ( ) + STRING + org.springframework.data.jpa.repository.support.CrudMethodMetadata . getMethod ( ) . getName ( ) ; return new JpaEntityGraph ( org.springframework.data.jpa.repository.support.CrudMethodMetadata . getEntityGraph ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ID ID ) { Assert . notNull ( ID , java.lang.String ) ; return org.springframework.data.jpa.repository.support.EntityManager . getReference ( java.lang.Class<T> ( ) , ID ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ID ID ) { Assert . notNull ( ID , java.lang.String ) ; if ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getIdAttribute ( ) == null ) { return java.util.Optional<T> ( ID ) != null ; } java.lang.String java.lang.String = org.springframework.data.jpa.repository.support.PersistenceProvider . getCountQueryPlaceholder ( ) ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getEntityName ( ) ; java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> = org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getIdAttributeNames ( ) ; java.lang.String java.lang.String = QueryUtils . getExistsQueryString ( java.lang.String , java.lang.String , java.lang.Iterable<java.lang.String> ) ; TypedQuery < java.lang.Long > org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> = org.springframework.data.jpa.repository.support.EntityManager . createQuery ( java.lang.String , java.lang.Long .class ) ; if ( ! org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . hasCompositeId ( ) ) { org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . setParameter ( java.lang.Iterable<java.lang.String> . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) , ID ) ; return org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . getSingleResult ( ) == NUMBER ; } for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ) { java.lang.Object java.lang.Object = org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getCompositeIdAttributeValue ( ID , java.lang.String ) ; boolean boolean = java.lang.Object != null && ! org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . getParameter ( java.lang.String ) . getParameterType ( ) . isAssignableFrom ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( boolean ) { return java.util.Optional<T> ( ID ) != null ; } org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . setParameter ( java.lang.String , java.lang.Object ) ; } return org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . getSingleResult ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( ) { return org.springframework.data.jpa.repository.support.TypedQuery<T> ( null , ( Sort ) null ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { if ( java.lang.Iterable<ID> == null || ! java.lang.Iterable<ID> . java.util.Iterator<ID> ( ) . boolean ( ) ) { return java.util.Collections . java.util.List<T> ( ) ; } if ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . hasCompositeId ( ) ) { java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; for ( ID ID : java.lang.Iterable<ID> ) { java.util.Optional<T> ( ID ) . void ( java.util.List<T> :: boolean ) ; } return java.util.List<T> ; } org.springframework.data.jpa.repository.support.SimpleJpaRepository.ByIdsSpecification<T> < T > org.springframework.data.jpa.repository.support.SimpleJpaRepository.ByIdsSpecification<T> = new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ByIdsSpecification<T> < T > ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> ) ; TypedQuery < T > org.springframework.data.jpa.repository.support.TypedQuery<T> = org.springframework.data.jpa.repository.support.TypedQuery<T> ( org.springframework.data.jpa.repository.support.SimpleJpaRepository.ByIdsSpecification<T> , ( Sort ) null ) ; return org.springframework.data.jpa.repository.support.TypedQuery<T> . setParameter ( org.springframework.data.jpa.repository.support.SimpleJpaRepository.ByIdsSpecification<T> . org.springframework.data.jpa.repository.support.ParameterExpression<java.lang.Iterable> , java.lang.Iterable<ID> ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( Sort org.springframework.data.jpa.repository.support.Sort ) { return org.springframework.data.jpa.repository.support.TypedQuery<T> ( null , org.springframework.data.jpa.repository.support.Sort ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.Page<T> < T > org.springframework.data.jpa.repository.support.Page<T> ( Pageable org.springframework.data.jpa.repository.support.Pageable ) { if ( null == org.springframework.data.jpa.repository.support.Pageable ) { return new PageImpl < T > ( java.util.List<T> ( ) ) ; } return org.springframework.data.jpa.repository.support.Page<T> ( ( Specification < T > ) null , org.springframework.data.jpa.repository.support.Pageable ) ; }  <METHOD_END>
<METHOD_START> public T T ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> ) { try { return org.springframework.data.jpa.repository.support.TypedQuery<T> ( org.springframework.data.jpa.repository.support.Specification<T> , ( Sort ) null ) . getSingleResult ( ) ; } catch ( NoResultException org.springframework.data.jpa.repository.support.NoResultException ) { return null ; } }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> ) { return org.springframework.data.jpa.repository.support.TypedQuery<T> ( org.springframework.data.jpa.repository.support.Specification<T> , ( Sort ) null ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.Page<T> < T > org.springframework.data.jpa.repository.support.Page<T> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> , Pageable org.springframework.data.jpa.repository.support.Pageable ) { TypedQuery < T > org.springframework.data.jpa.repository.support.TypedQuery<T> = org.springframework.data.jpa.repository.support.TypedQuery<T> ( org.springframework.data.jpa.repository.support.Specification<T> , org.springframework.data.jpa.repository.support.Pageable ) ; return org.springframework.data.jpa.repository.support.Pageable == null ? new PageImpl < T > ( org.springframework.data.jpa.repository.support.TypedQuery<T> . getResultList ( ) ) : org.springframework.data.jpa.repository.support.Page ( org.springframework.data.jpa.repository.support.TypedQuery<T> , java.lang.Class<T> ( ) , org.springframework.data.jpa.repository.support.Pageable , org.springframework.data.jpa.repository.support.Specification<T> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> , Sort org.springframework.data.jpa.repository.support.Sort ) { return org.springframework.data.jpa.repository.support.TypedQuery<T> ( org.springframework.data.jpa.repository.support.Specification<T> , org.springframework.data.jpa.repository.support.Sort ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( Example < S > org.springframework.data.jpa.repository.support.Example<S> ) { try { return org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) , ( Sort ) null ) . getSingleResult ( ) ; } catch ( NoResultException org.springframework.data.jpa.repository.support.NoResultException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > long long ( Example < S > org.springframework.data.jpa.repository.support.Example<S> ) { return java.lang.Long ( org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > boolean boolean ( Example < S > org.springframework.data.jpa.repository.support.Example<S> ) { return ! org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) , ( Sort ) null ) . getResultList ( ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( Example < S > org.springframework.data.jpa.repository.support.Example<S> ) { return org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) , ( Sort ) null ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( Example < S > org.springframework.data.jpa.repository.support.Example<S> , Sort org.springframework.data.jpa.repository.support.Sort ) { return org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.jpa.repository.support.Sort ) . getResultList ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.jpa.repository.support.Page<S> < S > org.springframework.data.jpa.repository.support.Page<S> ( Example < S > org.springframework.data.jpa.repository.support.Example<S> , Pageable org.springframework.data.jpa.repository.support.Pageable ) { org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> = new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) ; java.lang.Class<S> < S > java.lang.Class<S> = org.springframework.data.jpa.repository.support.Example<S> . getProbeType ( ) ; TypedQuery < S > org.springframework.data.jpa.repository.support.TypedQuery<S> = org.springframework.data.jpa.repository.support.TypedQuery ( new org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> < S > ( org.springframework.data.jpa.repository.support.Example<S> ) , java.lang.Class<S> , org.springframework.data.jpa.repository.support.Pageable ) ; return org.springframework.data.jpa.repository.support.Pageable == null ? new PageImpl < S > ( org.springframework.data.jpa.repository.support.TypedQuery<S> . getResultList ( ) ) : org.springframework.data.jpa.repository.support.Page ( org.springframework.data.jpa.repository.support.TypedQuery<S> , java.lang.Class<S> , org.springframework.data.jpa.repository.support.Pageable , org.springframework.data.jpa.repository.support.SimpleJpaRepository.ExampleSpecification<S> ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return org.springframework.data.jpa.repository.support.EntityManager . createQuery ( java.lang.String ( ) , java.lang.Long .class ) . getSingleResult ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> ) { return java.lang.Long ( org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.Specification<T> , java.lang.Class<T> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public < S extends T > S S ( S S ) { if ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . isNew ( S ) ) { org.springframework.data.jpa.repository.support.EntityManager . persist ( S ) ; return S ; } else { return org.springframework.data.jpa.repository.support.EntityManager . merge ( S ) ; } }  <METHOD_END>
<METHOD_START> @ Transactional public < S extends T > S S ( S S ) { S S = S ( S ) ; void ( ) ; return S ; }  <METHOD_END>
<METHOD_START> @ Transactional public < S extends T > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { java.util.List<S> < S > java.util.List<S> = new java.util.ArrayList<S> < S > ( ) ; if ( java.lang.Iterable<S> == null ) { return java.util.List<S> ; } for ( S S : java.lang.Iterable<S> ) { java.util.List<S> . boolean ( S ( S ) ) ; } return java.util.List<S> ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { org.springframework.data.jpa.repository.support.EntityManager . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected org.springframework.data.jpa.repository.support.Page<T> < T > org.springframework.data.jpa.repository.support.Page<T> ( TypedQuery < T > org.springframework.data.jpa.repository.support.TypedQuery<T> , Pageable org.springframework.data.jpa.repository.support.Pageable , Specification < T > org.springframework.data.jpa.repository.support.Specification<T> ) { return org.springframework.data.jpa.repository.support.Page ( org.springframework.data.jpa.repository.support.TypedQuery<T> , java.lang.Class<T> ( ) , org.springframework.data.jpa.repository.support.Pageable , org.springframework.data.jpa.repository.support.Specification<T> ) ; }  <METHOD_END>
<METHOD_START> protected < S extends T > org.springframework.data.jpa.repository.support.Page<S> < S > org.springframework.data.jpa.repository.support.Page<S> ( TypedQuery < S > org.springframework.data.jpa.repository.support.TypedQuery<S> , final java.lang.Class<S> < S > java.lang.Class<S> , Pageable org.springframework.data.jpa.repository.support.Pageable , final Specification < S > org.springframework.data.jpa.repository.support.Specification<S> ) { if ( org.springframework.data.jpa.repository.support.Pageable . isPaged ( ) ) { org.springframework.data.jpa.repository.support.TypedQuery<S> . setFirstResult ( ( int ) org.springframework.data.jpa.repository.support.Pageable . getOffset ( ) ) ; org.springframework.data.jpa.repository.support.TypedQuery<S> . setMaxResults ( org.springframework.data.jpa.repository.support.Pageable . getPageSize ( ) ) ; } return PageableExecutionUtils . getPage ( org.springframework.data.jpa.repository.support.TypedQuery<S> . getResultList ( ) , org.springframework.data.jpa.repository.support.Pageable , ( ) executeCountQuery ( getCountQuery ( spec , domainClass ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.support.TypedQuery<T> < T > org.springframework.data.jpa.repository.support.TypedQuery<T> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> , Pageable org.springframework.data.jpa.repository.support.Pageable ) { Sort org.springframework.data.jpa.repository.support.Sort = org.springframework.data.jpa.repository.support.Pageable == null ? null : org.springframework.data.jpa.repository.support.Pageable . getSort ( ) ; return org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.Specification<T> , java.lang.Class<T> ( ) , org.springframework.data.jpa.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> protected < S extends T > org.springframework.data.jpa.repository.support.TypedQuery<S> < S > org.springframework.data.jpa.repository.support.TypedQuery<S> ( Specification < S > org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> < S > java.lang.Class<S> , Pageable org.springframework.data.jpa.repository.support.Pageable ) { Sort org.springframework.data.jpa.repository.support.Sort = org.springframework.data.jpa.repository.support.Pageable == null ? null : org.springframework.data.jpa.repository.support.Pageable . getSort ( ) ; return org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> , org.springframework.data.jpa.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.support.TypedQuery<T> < T > org.springframework.data.jpa.repository.support.TypedQuery<T> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> , Sort org.springframework.data.jpa.repository.support.Sort ) { return org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.Specification<T> , java.lang.Class<T> ( ) , org.springframework.data.jpa.repository.support.Sort ) ; }  <METHOD_END>
<METHOD_START> protected < S extends T > org.springframework.data.jpa.repository.support.TypedQuery<S> < S > org.springframework.data.jpa.repository.support.TypedQuery<S> ( Specification < S > org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> < S > java.lang.Class<S> , Sort org.springframework.data.jpa.repository.support.Sort ) { CriteriaBuilder org.springframework.data.jpa.repository.support.CriteriaBuilder = org.springframework.data.jpa.repository.support.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < S > org.springframework.data.jpa.repository.support.CriteriaQuery<S> = org.springframework.data.jpa.repository.support.CriteriaBuilder . createQuery ( java.lang.Class<S> ) ; Root < S > org.springframework.data.jpa.repository.support.Root<S> = org.springframework.data.jpa.repository.support.Root ( org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> , org.springframework.data.jpa.repository.support.CriteriaQuery<S> ) ; org.springframework.data.jpa.repository.support.CriteriaQuery<S> . select ( org.springframework.data.jpa.repository.support.Root<S> ) ; if ( org.springframework.data.jpa.repository.support.Sort != null && ! ObjectUtils . nullSafeEquals ( org.springframework.data.jpa.repository.support.Sort , Sort . unsorted ( ) ) ) { org.springframework.data.jpa.repository.support.CriteriaQuery<S> . orderBy ( toOrders ( org.springframework.data.jpa.repository.support.Sort , org.springframework.data.jpa.repository.support.Root<S> , org.springframework.data.jpa.repository.support.CriteriaBuilder ) ) ; } return org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.EntityManager . createQuery ( org.springframework.data.jpa.repository.support.CriteriaQuery<S> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> ( Specification < T > org.springframework.data.jpa.repository.support.Specification<T> ) { return org.springframework.data.jpa.repository.support.TypedQuery ( org.springframework.data.jpa.repository.support.Specification<T> , java.lang.Class<T> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected < S extends T > org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> < java.lang.Long > org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> ( Specification < S > org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> < S > java.lang.Class<S> ) { CriteriaBuilder org.springframework.data.jpa.repository.support.CriteriaBuilder = org.springframework.data.jpa.repository.support.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < java.lang.Long > org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> = org.springframework.data.jpa.repository.support.CriteriaBuilder . createQuery ( java.lang.Long .class ) ; Root < S > org.springframework.data.jpa.repository.support.Root<S> = org.springframework.data.jpa.repository.support.Root ( org.springframework.data.jpa.repository.support.Specification<S> , java.lang.Class<S> , org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> ) ; if ( org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> . isDistinct ( ) ) { org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> . select ( org.springframework.data.jpa.repository.support.CriteriaBuilder . countDistinct ( org.springframework.data.jpa.repository.support.Root<S> ) ) ; } else { org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> . select ( org.springframework.data.jpa.repository.support.CriteriaBuilder . count ( org.springframework.data.jpa.repository.support.Root<S> ) ) ; } org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> . orderBy ( java.util.Collections .< Order > java.util.List<org.springframework.data.jpa.repository.support.Order> ( ) ) ; return org.springframework.data.jpa.repository.support.EntityManager . createQuery ( org.springframework.data.jpa.repository.support.CriteriaQuery<java.lang.Long> ) ; }  <METHOD_END>
<METHOD_START> private < S , U extends T > org.springframework.data.jpa.repository.support.Root<U> < U > org.springframework.data.jpa.repository.support.Root<U> ( Specification < U > org.springframework.data.jpa.repository.support.Specification<U> , java.lang.Class<U> < U > java.lang.Class<U> , CriteriaQuery < S > org.springframework.data.jpa.repository.support.CriteriaQuery<S> ) { Assert . notNull ( java.lang.Class<U> , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.support.CriteriaQuery<S> , STRING ) ; Root < U > org.springframework.data.jpa.repository.support.Root<U> = org.springframework.data.jpa.repository.support.CriteriaQuery<S> . from ( java.lang.Class<U> ) ; if ( org.springframework.data.jpa.repository.support.Specification<U> == null ) { return org.springframework.data.jpa.repository.support.Root<U> ; } CriteriaBuilder org.springframework.data.jpa.repository.support.CriteriaBuilder = org.springframework.data.jpa.repository.support.EntityManager . getCriteriaBuilder ( ) ; Predicate org.springframework.data.jpa.repository.support.Predicate = org.springframework.data.jpa.repository.support.Specification<U> . toPredicate ( org.springframework.data.jpa.repository.support.Root<U> , org.springframework.data.jpa.repository.support.CriteriaQuery<S> , org.springframework.data.jpa.repository.support.CriteriaBuilder ) ; if ( org.springframework.data.jpa.repository.support.Predicate != null ) { org.springframework.data.jpa.repository.support.CriteriaQuery<S> . where ( org.springframework.data.jpa.repository.support.Predicate ) ; } return org.springframework.data.jpa.repository.support.Root<U> ; }  <METHOD_END>
<METHOD_START> private < S > org.springframework.data.jpa.repository.support.TypedQuery<S> < S > org.springframework.data.jpa.repository.support.TypedQuery<S> ( TypedQuery < S > org.springframework.data.jpa.repository.support.TypedQuery<S> ) { if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata == null ) { return org.springframework.data.jpa.repository.support.TypedQuery<S> ; } LockModeType org.springframework.data.jpa.repository.support.LockModeType = org.springframework.data.jpa.repository.support.CrudMethodMetadata . getLockModeType ( ) ; TypedQuery < S > org.springframework.data.jpa.repository.support.TypedQuery<S> = org.springframework.data.jpa.repository.support.LockModeType == null ? org.springframework.data.jpa.repository.support.TypedQuery<S> : org.springframework.data.jpa.repository.support.TypedQuery<S> . setLockMode ( org.springframework.data.jpa.repository.support.LockModeType ) ; void ( org.springframework.data.jpa.repository.support.TypedQuery<S> ) ; return org.springframework.data.jpa.repository.support.TypedQuery<S> ; }  <METHOD_END>
<METHOD_START> private void void ( Query org.springframework.data.jpa.repository.support.Query ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> ( ) . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { org.springframework.data.jpa.repository.support.Query . setHint ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static java.lang.Long java.lang.Long ( TypedQuery < java.lang.Long > org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> ) { Assert . notNull ( org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> , STRING ) ; java.util.List<java.lang.Long> < java.lang.Long > java.util.List<java.lang.Long> = org.springframework.data.jpa.repository.support.TypedQuery<java.lang.Long> . getResultList ( ) ; java.lang.Long java.lang.Long = NUMBER ; for ( java.lang.Long java.lang.Long : java.util.List<java.lang.Long> ) { java.lang.Long += java.lang.Long == null ? NUMBER : java.lang.Long ; } return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void ( JpaEntityInformation < T , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,?> ) { this . org.springframework.data.jpa.repository.support.JpaEntityInformation<T,?> = org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.Predicate org.springframework.data.jpa.repository.support.Predicate ( Root < T > org.springframework.data.jpa.repository.support.Root<T> , CriteriaQuery < ? > org.springframework.data.jpa.repository.support.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.support.CriteriaBuilder ) { Path < ? > org.springframework.data.jpa.repository.support.Path<?> = org.springframework.data.jpa.repository.support.Root<T> . get ( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> . getIdAttribute ( ) ) ; org.springframework.data.jpa.repository.support.ParameterExpression<java.lang.Iterable> = org.springframework.data.jpa.repository.support.CriteriaBuilder . parameter ( java.lang.Iterable .class ) ; return org.springframework.data.jpa.repository.support.Path<> . in ( org.springframework.data.jpa.repository.support.ParameterExpression<java.lang.Iterable> ) ; }  <METHOD_END>
<METHOD_START> public void ( Example < T > org.springframework.data.jpa.repository.support.Example<T> ) { Assert . notNull ( org.springframework.data.jpa.repository.support.Example<T> , STRING ) ; this . org.springframework.data.jpa.repository.support.Example<T> = org.springframework.data.jpa.repository.support.Example<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.support.Predicate org.springframework.data.jpa.repository.support.Predicate ( Root < T > org.springframework.data.jpa.repository.support.Root<T> , CriteriaQuery < ? > org.springframework.data.jpa.repository.support.CriteriaQuery<?> , CriteriaBuilder org.springframework.data.jpa.repository.support.CriteriaBuilder ) { return QueryByExamplePredicateBuilder . getPredicate ( org.springframework.data.jpa.repository.support.Root<T> , org.springframework.data.jpa.repository.support.CriteriaBuilder , org.springframework.data.jpa.repository.support.Example<T> ) ; }  <METHOD_END>
