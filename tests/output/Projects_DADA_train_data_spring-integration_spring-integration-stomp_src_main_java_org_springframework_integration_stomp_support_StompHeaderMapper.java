<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; Assert . noNullElements ( java.lang.String[] , STRING ) ; java.util.Arrays . void ( java.lang.String[] ) ; if ( ! java.util.Arrays . boolean ( java.lang.String[] , java.lang.String[] ) ) { this . java.lang.String[] = java.lang.String[] ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; Assert . noNullElements ( java.lang.String[] , STRING ) ; java.util.Arrays . void ( java.lang.String[] ) ; if ( ! java.util.Arrays . boolean ( java.lang.String[] , java.lang.String[] ) ) { this . java.lang.String[] = java.lang.String[] ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MessageHeaders org.springframework.integration.stomp.support.MessageHeaders , StompHeaders org.springframework.integration.stomp.support.StompHeaders ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.stomp.support.MessageHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; if ( boolean ( java.lang.String , this . java.lang.String[] ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object != null ) { void ( org.springframework.integration.stomp.support.StompHeaders , java.lang.String , java.lang.Object ) ; } } else if ( StompHeaderAccessor . NATIVE_HEADERS . equals ( java.lang.String ) ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.stomp.support.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.integration.stomp.support.MessageHeaders . get ( StompHeaderAccessor . NATIVE_HEADERS , MultiValueMap .class ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.integration.stomp.support.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) ) { java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; if ( boolean ( java.lang.String , this . java.lang.String[] ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) . java.lang.String ( NUMBER ) ; if ( StringUtils . hasText ( java.lang.String ) ) { void ( org.springframework.integration.stomp.support.StompHeaders , java.lang.String , java.lang.String ) ; } } } } } }  <METHOD_END>
<METHOD_START> private void void ( StompHeaders org.springframework.integration.stomp.support.StompHeaders , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( StompHeaders . CONTENT_LENGTH . equals ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.stomp.support.StompHeaders . setContentLength ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.stomp.support.StompHeaders . setContentLength ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( StompHeaders . CONTENT_TYPE . equals ( java.lang.String ) || MessageHeaders . CONTENT_TYPE . equals ( java.lang.String ) ) { MimeType org.springframework.integration.stomp.support.MimeType = org.springframework.integration.stomp.support.StompHeaders . getContentType ( ) ; if ( org.springframework.integration.stomp.support.MimeType == null || StompHeaders . CONTENT_TYPE . equals ( java.lang.String ) ) { if ( java.lang.Object instanceof MediaType ) { org.springframework.integration.stomp.support.StompHeaders . setContentType ( ( MediaType ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.stomp.support.StompHeaders . setContentType ( MediaType . parseMediaType ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } } else if ( StompHeaders . DESTINATION . equals ( java.lang.String ) || IntegrationStompHeaders . DESTINATION . equals ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.stomp.support.StompHeaders . setDestination ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( StompHeaders . RECEIPT . equals ( java.lang.String ) || IntegrationStompHeaders . RECEIPT . equals ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.stomp.support.StompHeaders . setReceipt ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.stomp.support.StompHeaders . set ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( StompHeaders org.springframework.integration.stomp.support.StompHeaders ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.lang.String java.lang.String : org.springframework.integration.stomp.support.StompHeaders . keySet ( ) ) { if ( boolean ( java.lang.String , this . java.lang.String[] ) ) { if ( StompHeaders . CONTENT_TYPE . equals ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , org.springframework.integration.stomp.support.StompHeaders . getContentType ( ) ) ; } else { java.lang.String java.lang.String = java.lang.String ; if ( IntegrationStompHeaders . HEADERS . contains ( java.lang.String ) ) { java.lang.String = IntegrationStompHeaders . PREFIX + java.lang.String ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.integration.stomp.support.StompHeaders . getFirst ( java.lang.String ) ) ; } } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { if ( org.springframework.integration.stomp.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } else if ( java.lang.String . boolean ( java.lang.String ) && java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.integration.stomp.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } else if ( java.lang.String . boolean ( java.lang.String ) && ( java.util.List<java.lang.String> . boolean ( java.lang.String ) || MessageHeaders . CONTENT_TYPE . equals ( java.lang.String ) ) ) { if ( org.springframework.integration.stomp.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } } } if ( org.springframework.integration.stomp.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String ) ) ; } return false ; }  <METHOD_END>
