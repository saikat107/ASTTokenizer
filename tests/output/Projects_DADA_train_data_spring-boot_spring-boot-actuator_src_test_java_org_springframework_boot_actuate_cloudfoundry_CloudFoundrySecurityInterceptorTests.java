<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor = new CloudFoundrySecurityInterceptor ( this . org.springframework.boot.actuate.cloudfoundry.TokenValidator , this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint = new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint ( new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint ( STRING ) ) ; this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod = new HandlerMethod ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . setMethod ( STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , STRING ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( Reason . MISSING_AUTHORIZATION . getStatus ( ) . value ( ) ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getContentAsString ( ) ) . contains ( STRING ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( MediaType . APPLICATION_JSON . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , java.lang.String ( ) ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( Reason . MISSING_AUTHORIZATION . getStatus ( ) . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor = new CloudFoundrySecurityInterceptor ( this . org.springframework.boot.actuate.cloudfoundry.TokenValidator , this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService , null ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ( ) ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( Reason . SERVICE_UNAVAILABLE . getStatus ( ) . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor = new CloudFoundrySecurityInterceptor ( this . org.springframework.boot.actuate.cloudfoundry.TokenValidator , null , STRING ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ( ) ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( Reason . SERVICE_UNAVAILABLE . getStatus ( ) . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint = new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint ( new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint ( STRING ) ) ; this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod = new HandlerMethod ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint , STRING ) ; java.lang.String java.lang.String = java.lang.String ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ) ; BDDMockito . given ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( java.lang.String , STRING ) ) . willReturn ( AccessLevel . RESTRICTED ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; assertThat ( boolean ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( Reason . ACCESS_DENIED . getStatus ( ) . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = java.lang.String ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ) ; BDDMockito . given ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( java.lang.String , STRING ) ) . willReturn ( AccessLevel . FULL ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; ArgumentCaptor < Token > org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> = ArgumentCaptor . forClass ( Token .class ) ; verify ( this . org.springframework.boot.actuate.cloudfoundry.TokenValidator ) . validate ( org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> . capture ( ) ) ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> . getValue ( ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . toString ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( boolean ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . OK . value ( ) ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . getAttribute ( STRING ) ) . isEqualTo ( AccessLevel . FULL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint = new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint ( new org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint ( STRING ) ) ; this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod = new HandlerMethod ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestMvcEndpoint , STRING ) ; java.lang.String java.lang.String = java.lang.String ( ) ; this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ) ; BDDMockito . given ( this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityService . getAccessLevel ( java.lang.String , STRING ) ) . willReturn ( AccessLevel . RESTRICTED ) ; boolean boolean = this . org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptor . preHandle ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest , this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse , this . org.springframework.boot.actuate.cloudfoundry.HandlerMethod ) ; ArgumentCaptor < Token > org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> = ArgumentCaptor . forClass ( Token .class ) ; verify ( this . org.springframework.boot.actuate.cloudfoundry.TokenValidator ) . validate ( org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> . capture ( ) ) ; Token org.springframework.boot.actuate.cloudfoundry.Token = org.springframework.boot.actuate.cloudfoundry.ArgumentCaptor<org.springframework.boot.actuate.cloudfoundry.Token> . getValue ( ) ; assertThat ( org.springframework.boot.actuate.cloudfoundry.Token . toString ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( boolean ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( HttpStatus . OK . value ( ) ) ; assertThat ( this . org.springframework.boot.actuate.cloudfoundry.MockHttpServletRequest . getAttribute ( STRING ) ) . isEqualTo ( AccessLevel . RESTRICTED ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return STRING + STRING + Base64Utils . encodeToString ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint ) { super( org.springframework.boot.actuate.cloudfoundry.CloudFoundrySecurityInterceptorTests.TestEndpoint ); }  <METHOD_END>
