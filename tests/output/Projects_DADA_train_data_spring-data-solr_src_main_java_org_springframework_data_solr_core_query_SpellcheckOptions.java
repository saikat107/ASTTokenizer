<METHOD_START> private void ( Query org.springframework.data.solr.core.query.Query , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . org.springframework.data.solr.core.query.Query = org.springframework.data.solr.core.query.Query ; this . java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return new org.springframework.data.solr.core.query.SpellcheckOptions ( null , new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( Query org.springframework.data.solr.core.query.Query ) { return new org.springframework.data.solr.core.query.SpellcheckOptions ( org.springframework.data.solr.core.query.Query , new java.util.LinkedHashMap <> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.Query org.springframework.data.solr.core.query.Query ( ) { return org.springframework.data.solr.core.query.Query ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_BUILD , true ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( SpellingParams . SPELLCHECK_BUILD ) ? ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_BUILD ) : false ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_COLLATE , true ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( SpellingParams . SPELLCHECK_COLLATE ) ? ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_COLLATE ) : false ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_MAX_COLLATIONS , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_MAX_COLLATIONS ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_MAX_COLLATION_TRIES , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_MAX_COLLATION_TRIES ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_MAX_COLLATION_EVALUATIONS , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_MAX_COLLATION_EVALUATIONS ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_EXTENDED_RESULTS , true ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Boolean java.lang.Boolean ( ) { return ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_EXTENDED_RESULTS ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_COLLATE_EXTENDED_RESULTS , true ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( SpellingParams . SPELLCHECK_COLLATE_EXTENDED_RESULTS ) ? ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_COLLATE_EXTENDED_RESULTS ) : false ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_COLLATE_MAX_COLLECT_DOCS , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_COLLATE_MAX_COLLECT_DOCS ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( ) . org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_COLLATE_PARAM_OVERRIDE + java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) . boolean ( SpellingParams . SPELLCHECK_COLLATE_PARAM_OVERRIDE ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) . java.lang.String ( SpellingParams . SPELLCHECK_COLLATE_PARAM_OVERRIDE . length ( ) ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_COUNT , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_COUNT ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( java.lang.String ... java.lang.String[] ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_DICT , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String [] java.lang.String[] ( ) { return ( java.lang.String [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_DICT ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_ONLY_MORE_POPULAR , true ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Map<java.lang.String,java.lang.Object> . boolean ( SpellingParams . SPELLCHECK_ONLY_MORE_POPULAR ) ? ( java.lang.Boolean ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_ONLY_MORE_POPULAR ) : false ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_MAX_RESULTS_FOR_SUGGEST , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_MAX_RESULTS_FOR_SUGGEST ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( long long ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_ALTERNATIVE_TERM_COUNT , long ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return ( java.lang.Long ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_ALTERNATIVE_TERM_COUNT ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( float float ) { return org.springframework.data.solr.core.query.SpellcheckOptions ( SpellingParams . SPELLCHECK_ACCURACY , float ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Float java.lang.Float ( ) { return ( java.lang.Float ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SpellingParams . SPELLCHECK_ACCURACY ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( ) { if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( SpellingParams . SPELLCHECK_COLLATE ) ) { return this ; } return org.springframework.data.solr.core.query.SpellcheckOptions ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { org.springframework.data.solr.core.query.SpellcheckOptions org.springframework.data.solr.core.query.SpellcheckOptions = new org.springframework.data.solr.core.query.SpellcheckOptions ( org.springframework.data.solr.core.query.Query , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.data.solr.core.query.SpellcheckOptions . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return org.springframework.data.solr.core.query.SpellcheckOptions ; }  <METHOD_END>
