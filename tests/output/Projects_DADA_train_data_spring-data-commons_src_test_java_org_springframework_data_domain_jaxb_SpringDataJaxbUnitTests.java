<METHOD_START> @ Before public void void ( ) java.lang.Exception { javax.xml.bind.JAXBContext javax.xml.bind.JAXBContext = javax.xml.bind.JAXBContext . javax.xml.bind.JAXBContext ( STRING ) ; javax.xml.bind.Marshaller = javax.xml.bind.JAXBContext . javax.xml.bind.Marshaller ( ) ; javax.xml.bind.Marshaller . void ( javax.xml.bind.Marshaller . java.lang.String , true ) ; javax.xml.bind.Unmarshaller = javax.xml.bind.JAXBContext . javax.xml.bind.Unmarshaller ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper = new org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper ( ) ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper . org.springframework.data.domain.jaxb.Pageable = org.springframework.data.domain.jaxb.Pageable ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper . org.springframework.data.domain.jaxb.Sort = org.springframework.data.domain.jaxb.Sort ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper . org.springframework.data.domain.jaxb.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; javax.xml.bind.Marshaller . void ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper , java.io.StringWriter ) ; assertThat ( new Diff ( java.lang.String , java.io.StringWriter . java.lang.String ( ) ) . similar ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = javax.xml.bind.Unmarshaller . java.lang.Object ( org.springframework.data.domain.jaxb.Resource . getFile ( ) ) ; assertThat ( java.lang.Object ) . isInstanceOf ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper .class ) ; assertThat ( ( ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper ) java.lang.Object ) . org.springframework.data.domain.jaxb.Pageable ) . isEqualTo ( org.springframework.data.domain.jaxb.Pageable ) ; assertThat ( ( ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Wrapper ) java.lang.Object ) . org.springframework.data.domain.jaxb.Sort ) . isEqualTo ( org.springframework.data.domain.jaxb.Sort ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper = new org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper ( ) ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content = new org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content ( ) ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content . java.lang.String = STRING ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper . org.springframework.data.domain.jaxb.Page<org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content> = new PageImpl <> ( java.util.Collections . java.util.List<org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content> ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content ) ) ; org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper . org.springframework.data.domain.jaxb.Page<org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content> = new PageImpl <> ( java.util.Collections . java.util.List<org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content> ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.Content ) ) ; javax.xml.bind.Marshaller . void ( org.springframework.data.domain.jaxb.SpringDataJaxbUnitTests.PageWrapper , new java.io.StringWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Resource org.springframework.data.domain.jaxb.Resource ) { try { java.util.Scanner java.util.Scanner = new java.util.Scanner ( org.springframework.data.domain.jaxb.Resource . getInputStream ( ) ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; while ( java.util.Scanner . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.util.Scanner . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } java.util.Scanner . void ( ) ; return java.lang.StringBuilder . java.lang.String ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.RuntimeException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.data.domain.jaxb.Link> < Link > java.util.List<org.springframework.data.domain.jaxb.Link> ( Page < ? > org.springframework.data.domain.jaxb.Page<?> ) { return java.util.Arrays . java.util.List<T> ( new Link ( Link . REL_NEXT , STRING ) , new Link ( Link . REL_PREVIOUS , STRING ) ) ; }  <METHOD_END>
