<METHOD_START> public void ( KafkaProperties org.springframework.boot.autoconfigure.kafka.KafkaProperties ) { this . org.springframework.boot.autoconfigure.kafka.KafkaProperties = org.springframework.boot.autoconfigure.kafka.KafkaProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( KafkaTemplate .class ) public org.springframework.boot.autoconfigure.kafka.KafkaTemplate<?,?> < ? , ? > org.springframework.boot.autoconfigure.kafka.KafkaTemplate<?,?> ( ProducerFactory < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.kafka.ProducerFactory<java.lang.Object,java.lang.Object> , ProducerListener < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.kafka.ProducerListener<java.lang.Object,java.lang.Object> ) { KafkaTemplate < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.Object,java.lang.Object> = new KafkaTemplate <> ( org.springframework.boot.autoconfigure.kafka.ProducerFactory<java.lang.Object,java.lang.Object> ) ; org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.Object,java.lang.Object> . setProducerListener ( org.springframework.boot.autoconfigure.kafka.ProducerListener<java.lang.Object,java.lang.Object> ) ; org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.Object,java.lang.Object> . setDefaultTopic ( this . org.springframework.boot.autoconfigure.kafka.KafkaProperties . getTemplate ( ) . getDefaultTopic ( ) ) ; return org.springframework.boot.autoconfigure.kafka.KafkaTemplate<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ProducerListener .class ) public org.springframework.boot.autoconfigure.kafka.ProducerListener<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.boot.autoconfigure.kafka.ProducerListener<java.lang.Object,java.lang.Object> ( ) { return new LoggingProducerListener <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ConsumerFactory .class ) public org.springframework.boot.autoconfigure.kafka.ConsumerFactory<?,?> < ? , ? > org.springframework.boot.autoconfigure.kafka.ConsumerFactory<?,?> ( ) { return new DefaultKafkaConsumerFactory <> ( this . org.springframework.boot.autoconfigure.kafka.KafkaProperties . buildConsumerProperties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ProducerFactory .class ) public org.springframework.boot.autoconfigure.kafka.ProducerFactory<?,?> < ? , ? > org.springframework.boot.autoconfigure.kafka.ProducerFactory<?,?> ( ) { return new DefaultKafkaProducerFactory <> ( this . org.springframework.boot.autoconfigure.kafka.KafkaProperties . buildProducerProperties ( ) ) ; }  <METHOD_END>
