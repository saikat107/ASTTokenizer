<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.support.Cache org.springframework.data.gemfire.support.Cache ( java.util.Properties java.util.Properties , ServerLauncher org.springframework.data.gemfire.support.ServerLauncher ) { Cache org.springframework.data.gemfire.support.Cache = null ; if ( org.springframework.data.gemfire.support.ServerLauncher . isSpringXmlLocationSpecified ( ) ) { java.lang.System . java.lang.String ( java.lang.String ( ) , org.springframework.data.gemfire.support.ServerLauncher . getMemberName ( ) ) ; org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ( ) . init ( java.util.Properties ( org.springframework.data.gemfire.support.ServerLauncher ) ) ; org.springframework.data.gemfire.support.Cache = SpringContextBootstrappingInitializer . getApplicationContext ( ) . getBean ( Cache .class ) ; } return org.springframework.data.gemfire.support.Cache ; }  <METHOD_END>
<METHOD_START> java.util.Properties java.util.Properties ( ServerLauncher org.springframework.data.gemfire.support.ServerLauncher ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( SpringContextBootstrappingInitializer . CONTEXT_CONFIG_LOCATIONS_PARAMETER , org.springframework.data.gemfire.support.ServerLauncher . getSpringXmlLocation ( ) ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return ( GemfireUtils . GEMFIRE_PREFIX + GemfireUtils . NAME_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer ( ) { return new SpringContextBootstrappingInitializer ( ) ; }  <METHOD_END>
