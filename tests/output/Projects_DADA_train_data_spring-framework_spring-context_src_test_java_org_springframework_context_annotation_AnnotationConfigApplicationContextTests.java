<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class ) ; org.springframework.context.annotation.ApplicationContext . getBean ( ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . scan ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( uncapitalize ( ConfigForScanning .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( uncapitalize ( ComponentForScanning .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( uncapitalize ( Jsr330NamedForScanning .class . java.lang.String ( ) ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Configuration .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.NameConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Configuration .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.NameConfig .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.UntypedFactoryBean .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeansWithAnnotation ( Configuration .class ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class ) ; org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean = org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.TestBean .class ) ; assertNotNull ( org.springframework.context.annotation.TestBean ) ; assertThat ( org.springframework.context.annotation.TestBean . java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config = ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config ) org.springframework.context.annotation.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.ConfigWithCustomName .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.ConfigWithCustomName org.springframework.context.annotation.AnnotationConfigApplicationContextTests.ConfigWithCustomName = ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.ConfigWithCustomName ) org.springframework.context.annotation.ApplicationContext . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.ConfigWithCustomName ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , ( ) new BeanA ( context . getBean ( BeanB .class ) , context . getBean ( BeanC .class ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . getDependentBeans ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.context.annotation.AnnotationConfigApplicationContext . getDefaultListableBeanFactory ( ) . getDependentBeans ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , ( ) new BeanA ( context . getBean ( BeanB .class ) , context . getBean ( BeanC .class ) ) , bd -> bd . setLazyInit ( true ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , ( ) new BeanA ( context . getBean ( BeanB .class ) , context . getBean ( BeanC .class ) ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , ( ) new BeanA ( context . getBean ( BeanB .class ) , context . getBean ( BeanC .class ) ) , bd -> bd . setLazyInit ( true ) ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ::new ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertNull ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB . org.springframework.context.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertNull ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB . org.springframework.context.annotation.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC = new org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . b ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanA .class ) . c ) ; assertSame ( org.springframework.context.annotation.AnnotationConfigApplicationContext , org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB .class ) . applicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.Config .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.regex.Pattern .class ; try { org.springframework.context.annotation.ApplicationContext . getBean ( java.lang.Class<> ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { assertThat ( org.springframework.context.annotation.NoSuchBeanDefinitionException . getMessage ( ) , containsString ( java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.TwoTestBeanConfig .class ) ; try { org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.TestBean .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { assertThat ( org.springframework.context.annotation.NoSuchBeanDefinitionException . getMessage ( ) , allOf ( containsString ( STRING + org.springframework.context.annotation.TestBean .class . java.lang.String ( ) + STRING ) , containsString ( STRING ) , containsString ( STRING ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.AutowiredConfig .class ) ; assertThat ( org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.TestBean .class ) . name , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.AutowiredConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return ( java.lang.Object instanceof org.springframework.context.annotation.TestBean ? null : java.lang.Object ) ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; } } ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( new BeanPostProcessor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; return java.lang.Object ; } @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; return java.lang.Object ; } } ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return ( java.lang.Object instanceof org.springframework.context.annotation.TestBean ? null : java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean = new org.springframework.context.annotation.TestBean ( ) ; org.springframework.context.annotation.TestBean . java.lang.String = STRING ; return org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new org.springframework.context.annotation.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new org.springframework.context.annotation.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new org.springframework.context.annotation.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new org.springframework.context.annotation.TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean = new org.springframework.context.annotation.TestBean ( ) ; org.springframework.context.annotation.TestBean . java.lang.String = java.lang.String ; return org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB , org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ) { this . org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB = org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanB ; this . org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC = org.springframework.context.annotation.AnnotationConfigApplicationContextTests.BeanC ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ( java.lang.String == null ? NUMBER : java.lang.String . int ( ) ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null ) return false ; if ( java.lang.Class<? extends org.springframework.context.annotation.TestBean> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean = ( org.springframework.context.annotation.TestBean ) java.lang.Object ; if ( java.lang.String == null ) { if ( org.springframework.context.annotation.TestBean . java.lang.String != null ) return false ; } else if ( ! java.lang.String . boolean ( org.springframework.context.annotation.TestBean . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
