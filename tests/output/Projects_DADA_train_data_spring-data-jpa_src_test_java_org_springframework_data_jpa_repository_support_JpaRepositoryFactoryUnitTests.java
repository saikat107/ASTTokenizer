<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.jpa.repository.support.EntityManager . getMetamodel ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.Metamodel ) ; when ( org.springframework.data.jpa.repository.support.EntityManager . getEntityManagerFactory ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.EntityManagerFactory ) ; when ( org.springframework.data.jpa.repository.support.EntityManager . getDelegate ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.EntityManager ) ; when ( org.springframework.data.jpa.repository.support.EntityManagerFactory . createEntityManager ( ) ) . thenReturn ( org.springframework.data.jpa.repository.support.EntityManager ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactory = new JpaRepositoryFactory ( org.springframework.data.jpa.repository.support.EntityManager ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , ID extends java.io.Serializable > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> < T , ID > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.jpa.repository.support.JpaEntityInformation ; } ;		} ; org.springframework.data.jpa.repository.support.JpaRepositoryFactory . setQueryLookupStrategyKey ( Key . CREATE_IF_NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , ID extends java.io.Serializable > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> < T , ID > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.jpa.repository.support.JpaEntityInformation ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository .class ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository . int ( ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository . java.lang.String ( ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository . boolean ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SimpleSampleRepository ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository .class ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository .class , new org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleCustomRepositoryImpl ( ) ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.io.IOException .class ) public void void ( ) java.lang.Exception { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository .class , new org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleCustomRepositoryImpl ( ) ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { JpaRepositoryFactory org.springframework.data.jpa.repository.support.JpaRepositoryFactory = new CustomGenericJpaRepositoryFactory ( org.springframework.data.jpa.repository.support.EntityManager ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactory . setQueryLookupStrategyKey ( Key . CREATE_IF_NOT_FOUND ) ; UserCustomExtendedRepository org.springframework.data.jpa.repository.support.UserCustomExtendedRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( UserCustomExtendedRepository .class ) ; org.springframework.data.jpa.repository.support.UserCustomExtendedRepository . customMethod ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.jpa.repository.support.JpaEntityInformation . getJavaType ( ) ) . thenReturn ( User .class ) ; assertEquals ( QuerydslJpaRepository .class , org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepositoryBaseClass ( new DefaultRepositoryMetadata ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.QueryDslSampleRepository .class ) ) ) ; try { org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.QueryDslSampleRepository org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.QueryDslSampleRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.QueryDslSampleRepository .class ) ; assertEquals ( QuerydslJpaRepository .class , ( ( Advised ) org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.QueryDslSampleRepository ) . getTargetClass ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.StackTraceElement[] ( ) [ NUMBER ] . java.lang.String ( ) , is ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.jpa.repository.support.JpaRepositoryFactory . setRepositoryBaseClass ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.CustomJpaRepository .class ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository = org.springframework.data.jpa.repository.support.JpaRepositoryFactory . getRepository ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository .class ) ; assertEquals ( org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.CustomJpaRepository .class , ( ( Advised ) org.springframework.data.jpa.repository.support.JpaRepositoryFactoryUnitTests.SampleRepository ) . getTargetClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.ClassLoader java.lang.ClassLoader = new OverridingClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; org.springframework.data.jpa.repository.support.JpaRepositoryFactory . setBeanClassLoader ( java.lang.ClassLoader ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.data.jpa.repository.support.JpaRepositoryFactory , STRING ) ; assertThat ( ReflectionTestUtils . getField ( java.lang.Object , STRING ) , is ( ( java.lang.Object ) java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional java.util.Optional<org.springframework.data.jpa.repository.support.User> < User > java.util.Optional<org.springframework.data.jpa.repository.support.User> ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( ) java.io.IOException ;  <METHOD_END>
<METHOD_START> public void void ( ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( JpaEntityInformation < T , ? > org.springframework.data.jpa.repository.support.JpaEntityInformation<T,?> , EntityManager org.springframework.data.jpa.repository.support.EntityManager ) { super( org.springframework.data.jpa.repository.support.JpaEntityInformation<T,> , org.springframework.data.jpa.repository.support.EntityManager ); }  <METHOD_END>
