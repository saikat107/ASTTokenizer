<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> = new GenericMessage < java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > > ( java.util.Arrays . java.util.List<java.util.List<java.lang.String>> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.integration.aggregator.scenarios.DirectChannel , NUMBER , org.springframework.integration.aggregator.scenarios.Message<> ) ; assertNotNull ( STRING , java.util.List<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> = new GenericMessage < java.util.List<java.lang.String> < java.lang.String > > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.integration.aggregator.scenarios.DirectChannel , NUMBER , org.springframework.integration.aggregator.scenarios.Message<> ) ; assertNotNull ( STRING , java.util.List<java.lang.String> ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( DirectChannel org.springframework.integration.aggregator.scenarios.DirectChannel , int int , Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> ) { MessagingTemplate org.springframework.integration.aggregator.scenarios.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.aggregator.scenarios.MessagingTemplate . setReceiveTimeout ( int ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.aggregator.scenarios.Message<java.util.List<java.lang.String>> = ( Message < java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.integration.aggregator.scenarios.MessagingTemplate . sendAndReceive ( org.springframework.integration.aggregator.scenarios.DirectChannel , org.springframework.integration.aggregator.scenarios.Message<> ) ; return org.springframework.integration.aggregator.scenarios.Message<java.util.List<java.lang.String>> == null ? null : org.springframework.integration.aggregator.scenarios.Message<java.util.List<java.lang.String>> . getPayload ( ) ; }  <METHOD_END>
