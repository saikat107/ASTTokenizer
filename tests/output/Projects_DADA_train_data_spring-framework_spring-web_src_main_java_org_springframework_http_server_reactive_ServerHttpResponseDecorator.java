<METHOD_START> public void ( ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { Assert . notNull ( org.springframework.http.server.reactive.ServerHttpResponse , STRING ) ; this . org.springframework.http.server.reactive.ServerHttpResponse = org.springframework.http.server.reactive.ServerHttpResponse ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ( ) { return this . org.springframework.http.server.reactive.ServerHttpResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpStatus org.springframework.http.server.reactive.HttpStatus ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . setStatusCode ( org.springframework.http.server.reactive.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpStatus org.springframework.http.server.reactive.HttpStatus ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . getStatusCode ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . getHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.ResponseCookie> ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . getCookies ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . encodeUrl ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.function.Function<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.function.Function<java.lang.String,java.lang.String> ) { org.springframework.http.server.reactive.ServerHttpResponse ( ) . registerUrlEncoder ( java.util.function.Function<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . bufferFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> < ? extends Mono < java.lang.Void > > java.util.function.Supplier<? extends org.springframework.http.server.reactive.Mono<java.lang.Void>> ) { org.springframework.http.server.reactive.ServerHttpResponse ( ) . beforeCommit ( java.util.function.Supplier<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . isCommitted ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer> ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . writeWith ( org.springframework.http.server.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.Publisher<? extends org.springframework.http.server.reactive.DataBuffer>> ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . writeAndFlushWith ( org.springframework.http.server.reactive.Publisher<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ) { return org.springframework.http.server.reactive.ServerHttpResponse ( ) . setComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.http.server.reactive.ServerHttpResponseDecorator> ( ) . java.lang.String ( ) + STRING + org.springframework.http.server.reactive.ServerHttpResponse ( ) + STRING ; }  <METHOD_END>
