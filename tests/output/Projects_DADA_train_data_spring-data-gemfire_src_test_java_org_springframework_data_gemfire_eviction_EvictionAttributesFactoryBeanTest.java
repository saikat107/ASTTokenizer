<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean = new EvictionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.eviction.ObjectSizer = mock ( ObjectSizer .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean = null ; org.springframework.data.gemfire.eviction.ObjectSizer = null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( new EvictionAttributesFactoryBean ( ) . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( NUMBER ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . ENTRY_COUNT ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . DEFAULT_EVICTION_ACTION , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . LOCAL_DESTROY ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( NUMBER ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . ENTRY_COUNT ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . NONE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . ENTRY_COUNT ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . NONE , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAttributesFactoryBean . DEFAULT_LRU_MAXIMUM_ENTRIES , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . OVERFLOW_TO_DISK ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . ENTRY_COUNT ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAttributesFactoryBean . DEFAULT_LRU_MAXIMUM_ENTRIES , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_ENTRY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . DEFAULT_EVICTION_ACTION , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertSame ( org.springframework.data.gemfire.eviction.ObjectSizer , org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . LOCAL_DESTROY ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . NONE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . NONE , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertSame ( org.springframework.data.gemfire.eviction.ObjectSizer , org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . OVERFLOW_TO_DISK ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertSame ( org.springframework.data.gemfire.eviction.ObjectSizer , org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_HEAP , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { EvictionAttributesFactoryBean org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean = new EvictionAttributesFactoryBean ( ) ; try { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . HEAP_PERCENTAGE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( NUMBER ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getThreshold ( ) . intValue ( ) ) ; assertEquals ( EvictionPolicyType . HEAP_PERCENTAGE , org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getType ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . MEMORY_SIZE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . DEFAULT_EVICTION_ACTION , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertSame ( org.springframework.data.gemfire.eviction.ObjectSizer , org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAttributesFactoryBean . DEFAULT_MEMORY_MAXIMUM_SIZE , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . LOCAL_DESTROY ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( org.springframework.data.gemfire.eviction.ObjectSizer ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( NUMBER ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . MEMORY_SIZE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertSame ( org.springframework.data.gemfire.eviction.ObjectSizer , org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . NONE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( NUMBER ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . MEMORY_SIZE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . NONE , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setAction ( EvictionAction . OVERFLOW_TO_DISK ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setObjectSizer ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setThreshold ( null ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . setType ( EvictionPolicyType . MEMORY_SIZE ) ; org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; EvictionAttributes org.springframework.data.gemfire.eviction.EvictionAttributes = org.springframework.data.gemfire.eviction.EvictionAttributesFactoryBean . getObject ( ) ; assertNotNull ( org.springframework.data.gemfire.eviction.EvictionAttributes ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.eviction.EvictionAttributes . getAction ( ) ) ; assertNull ( org.springframework.data.gemfire.eviction.EvictionAttributes . getObjectSizer ( ) ) ; assertEquals ( EvictionAttributesFactoryBean . DEFAULT_MEMORY_MAXIMUM_SIZE , org.springframework.data.gemfire.eviction.EvictionAttributes . getMaximum ( ) ) ; assertEquals ( EvictionAlgorithm . LRU_MEMORY , org.springframework.data.gemfire.eviction.EvictionAttributes . getAlgorithm ( ) ) ; }  <METHOD_END>
