<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { Pointcut org.springframework.aop.support.Pointcut = new ComposablePointcut ( ) ; assertTrue ( org.springframework.aop.support.Pointcut . getClassFilter ( ) . matches ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.aop.support.Pointcut . getMethodMatcher ( ) . matches ( java.lang.Object .class . java.lang.reflect.Method ( STRING ) , java.lang.Exception .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { ComposablePointcut org.springframework.aop.support.ComposablePointcut = new ComposablePointcut ( ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.Object .class ) ) ; ClassFilter org.springframework.aop.support.ClassFilter = new RootClassFilter ( java.lang.Exception .class ) ; org.springframework.aop.support.ComposablePointcut . intersection ( org.springframework.aop.support.ClassFilter ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.Object .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.Exception .class ) ) ; org.springframework.aop.support.ComposablePointcut . intersection ( new RootClassFilter ( NestedRuntimeException .class ) ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.Exception .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( NestedRuntimeException .class ) ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.String .class ) ) ; org.springframework.aop.support.ComposablePointcut . union ( new RootClassFilter ( java.lang.String .class ) ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.Exception .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( java.lang.String .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getClassFilter ( ) . matches ( NestedRuntimeException .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ComposablePointcut org.springframework.aop.support.ComposablePointcut = new ComposablePointcut ( ClassFilter . TRUE , org.springframework.aop.support.MethodMatcher ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; org.springframework.aop.support.ComposablePointcut . union ( org.springframework.aop.support.MethodMatcher ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; org.springframework.aop.support.ComposablePointcut . union ( org.springframework.aop.support.MethodMatcher ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_SET_AGE , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ComposablePointcut org.springframework.aop.support.ComposablePointcut = new ComposablePointcut ( ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; org.springframework.aop.support.ComposablePointcut . intersection ( org.springframework.aop.support.MethodMatcher ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertTrue ( org.springframework.aop.support.ComposablePointcut . getMethodMatcher ( ) . matches ( PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; org.springframework.aop.support.ComposablePointcut . intersection ( org.springframework.aop.support.MethodMatcher ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_ABSQUATULATE , TestBean .class ) ) ; assertTrue ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_AGE , TestBean .class ) ) ; assertFalse ( Pointcuts . matches ( org.springframework.aop.support.ComposablePointcut , PointcutsTests . TEST_BEAN_GET_NAME , TestBean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ComposablePointcut org.springframework.aop.support.ComposablePointcut = new ComposablePointcut ( ) ; ComposablePointcut org.springframework.aop.support.ComposablePointcut = new ComposablePointcut ( ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut , org.springframework.aop.support.ComposablePointcut ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut . hashCode ( ) , org.springframework.aop.support.ComposablePointcut . hashCode ( ) ) ; org.springframework.aop.support.ComposablePointcut . intersection ( org.springframework.aop.support.MethodMatcher ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . equals ( org.springframework.aop.support.ComposablePointcut ) ) ; assertFalse ( org.springframework.aop.support.ComposablePointcut . hashCode ( ) == org.springframework.aop.support.ComposablePointcut . hashCode ( ) ) ; org.springframework.aop.support.ComposablePointcut . intersection ( org.springframework.aop.support.MethodMatcher ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut , org.springframework.aop.support.ComposablePointcut ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut . hashCode ( ) , org.springframework.aop.support.ComposablePointcut . hashCode ( ) ) ; org.springframework.aop.support.ComposablePointcut . union ( org.springframework.aop.support.MethodMatcher ) ; org.springframework.aop.support.ComposablePointcut . union ( org.springframework.aop.support.MethodMatcher ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut , org.springframework.aop.support.ComposablePointcut ) ; assertEquals ( org.springframework.aop.support.ComposablePointcut . hashCode ( ) , org.springframework.aop.support.ComposablePointcut . hashCode ( ) ) ; }  <METHOD_END>
