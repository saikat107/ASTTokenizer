<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerViewResolver .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerConfigurer .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING + STRING ) ; this . org.springframework.boot.autoconfigure.freemarker.OutputCapture . expect ( containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new java.io.File ( STRING ) . boolean ( ) ; void ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { new java.io.File ( STRING ) . boolean ( ) ; void ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentType ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse . getContentAsString ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerViewResolver .class ) . getCacheLimit ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; AbstractTemplateViewResolver org.springframework.boot.autoconfigure.freemarker.AbstractTemplateViewResolver = this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerViewResolver .class ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.freemarker.AbstractTemplateViewResolver , STRING ) ) . isEqualTo ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerConfigurer .class ) . getConfiguration ( ) . getSetting ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; FreeMarkerConfigurer org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer = this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerConfigurer .class ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; org.springframework.boot.autoconfigure.freemarker.FreeMarkerConfigurer . getConfiguration ( ) . getTemplate ( STRING ) . process ( this , java.io.StringWriter ) ; assertThat ( java.io.StringWriter . java.lang.String ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.freemarker.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( FreeMarkerAutoConfiguration .class ) ; try { freemarker . freemarker . freemarker freemarker.template.Configuration = org.springframework.boot.autoconfigure.freemarker.AnnotationConfigApplicationContext . getBean ( freemarker . freemarker . freemarker .class ) ; java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; freemarker.template.Configuration . getTemplate ( STRING ) . process ( this , java.io.StringWriter ) ; assertThat ( java.io.StringWriter . java.lang.String ( ) ) . contains ( STRING ) ; } finally { org.springframework.boot.autoconfigure.freemarker.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBeansOfType ( ResourceUrlEncodingFilter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( ResourceUrlEncodingFilter .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . register ( FreeMarkerAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ( java.lang.String java.lang.String ) throws java.lang.Exception { FreeMarkerViewResolver org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver = this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext . getBean ( FreeMarkerViewResolver .class ) ; View org.springframework.boot.autoconfigure.freemarker.View = org.springframework.boot.autoconfigure.freemarker.FreeMarkerViewResolver . resolveViewName ( java.lang.String , java.util.Locale . java.util.Locale ) ; assertThat ( org.springframework.boot.autoconfigure.freemarker.View ) . isNotNull ( ) ; HttpServletRequest org.springframework.boot.autoconfigure.freemarker.HttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.boot.autoconfigure.freemarker.HttpServletRequest . setAttribute ( RequestContext . WEB_APPLICATION_CONTEXT_ATTRIBUTE , this . org.springframework.boot.autoconfigure.freemarker.AnnotationConfigWebApplicationContext ) ; MockHttpServletResponse org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.boot.autoconfigure.freemarker.View . render ( null , org.springframework.boot.autoconfigure.freemarker.HttpServletRequest , org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ) ; return org.springframework.boot.autoconfigure.freemarker.MockHttpServletResponse ; }  <METHOD_END>
