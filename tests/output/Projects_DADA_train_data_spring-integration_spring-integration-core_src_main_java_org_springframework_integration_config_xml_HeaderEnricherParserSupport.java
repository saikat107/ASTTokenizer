<METHOD_START> @ java.lang.Override protected final java.lang.String java.lang.String ( ) { return HeaderEnricher .class . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . void ( java.lang.String , java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; if ( java.lang.Class<> != null ) { this . java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ) { ManagedMap org.springframework.integration.config.xml.ManagedMap = new ManagedMap ( ) ; this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ManagedMap , org.springframework.integration.config.xml.ParserContext ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.ManagedMap ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; this . void ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ManagedMap < java.lang.String , java.lang.Object > org.springframework.integration.config.xml.ManagedMap<java.lang.String,java.lang.Object> , ParserContext org.springframework.integration.config.xml.ParserContext ) { org.w3c.dom.NodeList org.w3c.dom.NodeList = org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ; for ( int int = NUMBER ; int < org.w3c.dom.NodeList . int ( ) ; int ++ ) { org.w3c.dom.Node org.w3c.dom.Node = org.w3c.dom.NodeList . org.w3c.dom.Node ( int ) ; if ( org.w3c.dom.Node . short ( ) == org.w3c.dom.Node . short ) { java.lang.String java.lang.String = null ; org.w3c.dom.Element org.w3c.dom.Element = ( org.w3c.dom.Element ) org.w3c.dom.Node ; java.lang.String java.lang.String = org.w3c.dom.Node . java.lang.String ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( NAME_ATTRIBUTE ) ; } else { java.lang.String = this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; java.lang.Class<?> = this . java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( java.lang.String ) ; if ( java.lang.Class<> != null && StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING , org.w3c.dom.Element ) ; } } if ( java.lang.Class<> == null ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.ClassLoader java.lang.ClassLoader = org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . getBeanClassLoader ( ) ; if ( java.lang.ClassLoader == null ) { java.lang.ClassLoader = java.lang.Class<? extends org.springframework.integration.config.xml.HeaderEnricherParserSupport> ( ) . java.lang.ClassLoader ( ) ; } try { java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING + java.lang.String + STRING + java.lang.String + STRING , org.w3c.dom.Element , java.lang.Exception ) ; } } } if ( java.lang.String == null ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( java.util.Map<java.lang.String,java.lang.String[][]> . boolean ( java.lang.String ) ) { for ( int int = NUMBER ; int < java.util.Map<java.lang.String,java.lang.String[][]> . java.lang.String[][] ( java.lang.String ) . int ; int ++ ) { java.lang.String = java.util.Map<java.lang.String,java.lang.String[][]> . java.lang.String[][] ( java.lang.String ) [ int ] [ NUMBER ] ; java.lang.String = java.util.Map<java.lang.String,java.lang.String[][]> . java.lang.String[][] ( java.lang.String ) [ int ] [ NUMBER ] ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; } else { java.lang.String = java.lang.String . java.lang.String ( STRING , STRING ) ; } java.lang.String = STRING ; this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ManagedMap<java.lang.String,java.lang.Object> , org.springframework.integration.config.xml.ParserContext , java.lang.String , org.w3c.dom.Element , java.lang.Class<> , java.lang.String , java.lang.String ) ; } } } else { this . void ( org.w3c.dom.Element , org.springframework.integration.config.xml.ManagedMap<java.lang.String,java.lang.Object> , org.springframework.integration.config.xml.ParserContext , java.lang.String , org.w3c.dom.Element , java.lang.Class<> , null , java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( org.w3c.dom.Element org.w3c.dom.Element , ManagedMap < java.lang.String , java.lang.Object > org.springframework.integration.config.xml.ManagedMap<java.lang.String,java.lang.Object> , ParserContext org.springframework.integration.config.xml.ParserContext , java.lang.String java.lang.String , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( REF_ATTRIBUTE ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( METHOD_ATTRIBUTE ) ; if ( java.lang.String == null ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( EXPRESSION_ATTRIBUTE ) ; } org.w3c.dom.Element org.w3c.dom.Element = null ; org.w3c.dom.Element org.w3c.dom.Element = null ; org.w3c.dom.Element org.w3c.dom.Element = null ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElements ( org.w3c.dom.Element ) ; if ( ! java.util.List<org.w3c.dom.Element> . boolean ( ) ) { org.w3c.dom.Element org.w3c.dom.Element = java.util.List<org.w3c.dom.Element> . org.w3c.dom.Element ( NUMBER ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { org.w3c.dom.Element = org.w3c.dom.Element ; } else if ( STRING . boolean ( java.lang.String ) ) { org.w3c.dom.Element = org.w3c.dom.Element ; } else if ( STRING . boolean ( java.lang.String ) ) { org.w3c.dom.Element = org.w3c.dom.Element ; } if ( org.w3c.dom.Element == null && org.w3c.dom.Element == null && org.w3c.dom.Element == null ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } } if ( StringUtils . hasText ( java.lang.String ) && org.w3c.dom.Element != null ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) || org.w3c.dom.Element != null ; boolean boolean = org.w3c.dom.Element != null ; BeanDefinition org.springframework.integration.config.xml.BeanDefinition = null ; if ( org.w3c.dom.Element != null ) { org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) . parseBeanDefinitionElement ( org.w3c.dom.Element ) . getBeanDefinition ( ) ; } else if ( boolean ) { org.springframework.integration.config.xml.BeanDefinition = org.springframework.integration.config.xml.ParserContext . getDelegate ( ) . parseCustomElement ( org.w3c.dom.Element ) ; } boolean boolean = org.springframework.integration.config.xml.BeanDefinition != null ; if ( boolean && boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( boolean == ( boolean ^ ( boolean ^ boolean ) ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = null ; if ( boolean ) { if ( boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( IntegrationMessageHeaderAccessor . ROUTING_SLIP . equals ( java.lang.String ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new ManagedList < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( RoutingSlipHeaderValueMessageProcessor .class ) . addConstructorArgValue ( java.util.List<java.lang.String> ) ; } else { java.lang.Object java.lang.Object = ( java.lang.Class<> != null ) ? new TypedStringValue ( java.lang.String , java.lang.Class<> ) : java.lang.String ; org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( StaticHeaderValueMessageProcessor .class ) . addConstructorArgValue ( java.lang.Object ) ; } } else if ( boolean ) { if ( boolean ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ExpressionEvaluatingHeaderValueMessageProcessor .class ) ; if ( org.w3c.dom.Element != null ) { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DynamicExpression .class ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } else { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.Class<> ) ; } else if ( boolean ) { if ( StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( boolean || boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MessageProcessingHeaderValueMessageProcessor .class ) . addConstructorArgValue ( org.springframework.integration.config.xml.BeanDefinition ) ; if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; } } else { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( StaticHeaderValueMessageProcessor .class ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.integration.config.xml.BeanDefinition ) ; } } else { if ( StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( boolean ) { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( MessageProcessingHeaderValueMessageProcessor .class ) . addConstructorArgReference ( java.lang.String ) . addConstructorArgValue ( java.lang.String ) ; } else { org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( StaticHeaderValueMessageProcessor .class ) . addConstructorArgReference ( java.lang.String ) ; } } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } org.springframework.integration.config.xml.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) {	}  <METHOD_END>
