<METHOD_START> public static void void ( final Resource org.springframework.data.gemfire.test.support.Resource , final java.io.File java.io.File ) throws java.io.IOException { Assert . notNull ( org.springframework.data.gemfire.test.support.Resource , STRING ) ; Assert . isTrue ( java.io.File != null && java.io.File . boolean ( ) , java.lang.String . java.lang.String ( STRING , java.io.File ) ) ; java.util.zip.ZipFile java.util.zip.ZipFile = new java.util.zip.ZipFile ( org.springframework.data.gemfire.test.support.Resource . getFile ( ) , java.util.zip.ZipFile . int ) ; for ( java.util.zip.ZipEntry java.util.zip.ZipEntry : CollectionUtils . iterable ( java.util.zip.ZipFile . java.util.Enumeration<? extends java.util.zip.ZipEntry> ( ) ) ) { if ( java.util.zip.ZipEntry . boolean ( ) ) { new java.io.File ( java.io.File , java.util.zip.ZipEntry . java.lang.String ( ) ) . boolean ( ) ; } else { java.io.DataInputStream java.io.DataInputStream = new java.io.DataInputStream ( java.util.zip.ZipFile . java.io.InputStream ( java.util.zip.ZipEntry ) ) ; java.io.DataOutputStream java.io.DataOutputStream = new java.io.DataOutputStream ( new java.io.FileOutputStream ( new java.io.File ( java.io.File , java.util.zip.ZipEntry . java.lang.String ( ) ) ) ) ; try { FileCopyUtils . copy ( java.io.DataInputStream , java.io.DataOutputStream ) ; } finally { IOUtils . close ( java.io.DataInputStream ) ; IOUtils . close ( java.io.DataOutputStream ) ; } } } }  <METHOD_END>
