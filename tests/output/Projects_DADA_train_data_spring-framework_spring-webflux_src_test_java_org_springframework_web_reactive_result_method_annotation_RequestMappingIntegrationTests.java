<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.WebConfig .class , org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.TestRestController .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , new HttpHeaders ( ) , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING , STRING , STRING } ; assertArrayEquals ( java.lang.String[] , performGet ( STRING , new HttpHeaders ( ) , java.lang.String [] .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , MediaType . ALL , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.String> < java.lang.String > org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.String> ( @ RequestParam java.lang.String java.lang.String ) { return Flux . just ( STRING , java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.Long> < java.lang.Long > org.springframework.web.reactive.result.method.annotation.Publisher<java.lang.Long> ( ) { return Flux . interval ( java.time.Duration . java.time.Duration ( NUMBER ) ) . take ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.Foo> < org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.Foo > org.springframework.web.reactive.result.method.annotation.Publisher<org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.Foo> ( ) { return Flux . just ( new org.springframework.web.reactive.result.method.annotation.RequestMappingIntegrationTests.Foo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
