<METHOD_START> @ Before public void void ( ) { org.springframework.data.rest.tests.mongodb.ObjectMapper . setSerializationInclusion ( Include . NON_NULL ) ; Profile org.springframework.data.rest.tests.mongodb.Profile = new Profile ( ) ; org.springframework.data.rest.tests.mongodb.Profile . setPerson ( NUMBER ) ; org.springframework.data.rest.tests.mongodb.Profile . setType ( STRING ) ; Profile org.springframework.data.rest.tests.mongodb.Profile = new Profile ( ) ; org.springframework.data.rest.tests.mongodb.Profile . setPerson ( NUMBER ) ; org.springframework.data.rest.tests.mongodb.Profile . setType ( STRING ) ; org.springframework.data.rest.tests.mongodb.ProfileRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.rest.tests.mongodb.Profile , org.springframework.data.rest.tests.mongodb.Profile ) ) ; Address org.springframework.data.rest.tests.mongodb.Address = new Address ( ) ; address . street = STRING ; address . zipCode = STRING ; User org.springframework.data.rest.tests.mongodb.User = new User ( ) ; thomas . firstname = STRING ; thomas . lastname = STRING ; thomas . address = org.springframework.data.rest.tests.mongodb.Address ; org.springframework.data.rest.tests.mongodb.UserRepository . save ( org.springframework.data.rest.tests.mongodb.User ) ; User org.springframework.data.rest.tests.mongodb.User = new User ( ) ; oliver . firstname = STRING ; oliver . lastname = STRING ; oliver . address = org.springframework.data.rest.tests.mongodb.Address ; oliver . colleagues = java.util.Arrays . java.util.List ( org.springframework.data.rest.tests.mongodb.User ) ; org.springframework.data.rest.tests.mongodb.UserRepository . save ( org.springframework.data.rest.tests.mongodb.User ) ; thomas . colleagues = java.util.Arrays . java.util.List ( org.springframework.data.rest.tests.mongodb.User ) ; org.springframework.data.rest.tests.mongodb.UserRepository . save ( org.springframework.data.rest.tests.mongodb.User ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.rest.tests.mongodb.ProfileRepository . deleteAll ( ) ; org.springframework.data.rest.tests.mongodb.UserRepository . deleteAll ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( jsonPath ( STRING ) . value ( hasSize ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( jsonPath ( STRING ) . value ( is ( notNullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( org.springframework.data.rest.tests.mongodb.Link , STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( org.springframework.data.rest.tests.mongodb.Link , STRING ) ; assertThat ( org.springframework.data.rest.tests.mongodb.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.tests.mongodb.Link . getVariableNames ( ) ) . contains ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.tests.mongodb.MockHttpServletResponse = client . request ( org.springframework.data.rest.tests.mongodb.Link . expand ( STRING ) ) ; assertThat ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; MockHttpServletResponse org.springframework.data.rest.tests.mongodb.MockHttpServletResponse = patchAndGet ( org.springframework.data.rest.tests.mongodb.Link , STRING , org . springframework . http . MediaType . APPLICATION_JSON ) ; assertThat ( JsonPath .< java.lang.String > read ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isNull ( ) ; assertThat ( JsonPath .< java.lang.String > read ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; MockHttpServletResponse org.springframework.data.rest.tests.mongodb.MockHttpServletResponse = patchAndGet ( org.springframework.data.rest.tests.mongodb.Link , STRING + STRING , RestMediaTypes . JSON_PATCH_JSON ) ; assertThat ( JsonPath .< java.lang.String > read ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isNull ( ) ; assertThat ( JsonPath .< java.lang.String > read ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Receipt org.springframework.data.rest.tests.mongodb.Receipt = new Receipt ( ) ; receipt . amount = new java.math.BigDecimal ( NUMBER ) ; receipt . saleItem = STRING ; java.lang.String java.lang.String = org.springframework.data.rest.tests.mongodb.ObjectMapper . writeValueAsString ( org.springframework.data.rest.tests.mongodb.Receipt ) ; MockHttpServletResponse org.springframework.data.rest.tests.mongodb.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.tests.mongodb.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.tests.mongodb.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.tests.mongodb.MockHttpServletResponse ) ; UriComponentsBuilder org.springframework.data.rest.tests.mongodb.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.tests.mongodb.Link . getHref ( ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getHeader ( STRING ) ; mvc . perform ( patch ( org.springframework.data.rest.tests.mongodb.UriComponentsBuilder . build ( ) . toUriString ( ) ) . content ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . header ( IF_MATCH , java.lang.String ) ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; mvc . perform ( patch ( org.springframework.data.rest.tests.mongodb.UriComponentsBuilder . build ( ) . toUriString ( ) ) . content ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . header ( IF_MATCH , java.lang.String ) ) . andExpect ( status ( ) . isPreconditionFailed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Profile org.springframework.data.rest.tests.mongodb.Profile = org.springframework.data.rest.tests.mongodb.ProfileRepository . findAll ( ) . iterator ( ) . next ( ) ; java.lang.String java.lang.String = mvc . perform ( get ( STRING , org.springframework.data.rest.tests.mongodb.Profile . getId ( ) ) ) . andReturn ( ) . getResponse ( ) . getHeader ( STRING ) ; assertThat ( java.lang.String ) . isNot ( new Condition < java.lang.String > ( it -> it == null || it . isEmpty ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . assertHasLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; User org.springframework.data.rest.tests.mongodb.User = new User ( ) ; oliver . firstname = STRING ; oliver . lastname = STRING ; putAndGet ( org.springframework.data.rest.tests.mongodb.Link , org.springframework.data.rest.tests.mongodb.ObjectMapper . writeValueAsString ( org.springframework.data.rest.tests.mongodb.User ) , MediaType . APPLICATION_JSON ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) . andExpect ( jsonPath ( STRING ) . doesNotExist ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . assertHasLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; putAndGet ( org.springframework.data.rest.tests.mongodb.Link , STRING , MediaType . parseMediaType ( STRING ) ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.tests.mongodb.Link = assertHasContentLinkWithRel ( STRING , client . request ( org.springframework.data.rest.tests.mongodb.Link ) ) ; Profile org.springframework.data.rest.tests.mongodb.Profile = new Profile ( ) ; org.springframework.data.rest.tests.mongodb.Profile . setMetadata ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; putAndGet ( org.springframework.data.rest.tests.mongodb.Link , org.springframework.data.rest.tests.mongodb.ObjectMapper . writeValueAsString ( org.springframework.data.rest.tests.mongodb.Profile ) , MediaType . APPLICATION_JSON ) ; client . follow ( org.springframework.data.rest.tests.mongodb.Link ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Receipt org.springframework.data.rest.tests.mongodb.Receipt = new Receipt ( ) ; receipt . amount = new java.math.BigDecimal ( NUMBER ) ; receipt . saleItem = STRING ; Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.tests.mongodb.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.tests.mongodb.Link , org.springframework.data.rest.tests.mongodb.ObjectMapper . writeValueAsString ( org.springframework.data.rest.tests.mongodb.Receipt ) , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . getDiscoverer ( org.springframework.data.rest.tests.mongodb.MockHttpServletResponse ) . findLinkWithRel ( STRING , org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getContentAsString ( ) ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . getHref ( ) ) . header ( IF_MODIFIED_SINCE , org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getHeader ( LAST_MODIFIED ) ) ) . andExpect ( status ( ) . isNotModified ( ) ) . andExpect ( header ( ) . string ( ETAG , is ( notNullValue ( ) ) ) ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . getHref ( ) ) . header ( IF_NONE_MATCH , org.springframework.data.rest.tests.mongodb.MockHttpServletResponse . getHeader ( ETAG ) ) ) . andExpect ( status ( ) . isNotModified ( ) ) . andExpect ( header ( ) . string ( ETAG , is ( notNullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Profile org.springframework.data.rest.tests.mongodb.Profile = org.springframework.data.rest.tests.mongodb.ProfileRepository . findAll ( ) . iterator ( ) . next ( ) ; Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING , STRING , STRING ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . expand ( org.springframework.data.rest.tests.mongodb.Profile . getId ( ) ) . getHref ( ) ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING , STRING , STRING ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . expand ( STRING ) . getHref ( ) ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING , STRING , STRING ) ; User org.springframework.data.rest.tests.mongodb.User = org.springframework.data.rest.tests.mongodb.UserRepository . findAll ( QUser . user . firstname . eq ( STRING ) ) . iterator ( ) . next ( ) ; Link org.springframework.data.rest.tests.mongodb.Link = org.springframework.data.rest.tests.mongodb.RepositoryEntityLinks . linkToSingleResource ( User .class , thomas . id ) . expand ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.tests.mongodb.Link . expand ( org.springframework.data.rest.tests.mongodb.Link . getHref ( ) ) . getHref ( ) ; mvc . perform ( get ( java.lang.String ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING , STRING , STRING ) ; Profile org.springframework.data.rest.tests.mongodb.Profile = org.springframework.data.rest.tests.mongodb.ProfileRepository . findAll ( ) . iterator ( ) . next ( ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . expand ( org.springframework.data.rest.tests.mongodb.Profile . getId ( ) ) . getHref ( ) ) ) . andExpect ( header ( ) . string ( STRING , is ( STRING ) ) ) . andExpect ( header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.tests.mongodb.Link = client . discoverUnique ( STRING , STRING , STRING ) ; Profile org.springframework.data.rest.tests.mongodb.Profile = org.springframework.data.rest.tests.mongodb.ProfileRepository . findAll ( ) . iterator ( ) . next ( ) ; mvc . perform ( get ( org.springframework.data.rest.tests.mongodb.Link . expand ( org.springframework.data.rest.tests.mongodb.Profile . getType ( ) ) . getHref ( ) ) ) . andExpect ( header ( ) . string ( STRING , is ( nullValue ( ) ) ) ) . andExpect ( header ( ) . string ( STRING , is ( nullValue ( ) ) ) ) ; }  <METHOD_END>
