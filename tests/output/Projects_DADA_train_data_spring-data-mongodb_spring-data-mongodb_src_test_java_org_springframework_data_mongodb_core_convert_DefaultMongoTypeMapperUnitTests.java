<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.convert.ConfigurableTypeInformationMapper = new ConfigurableTypeInformationMapper ( java.util.Collections . java.util.Map<java.lang.Class<java.lang.String>,java.lang.String> ( java.lang.String .class , STRING ) ) ; org.springframework.data.mongodb.core.convert.SimpleTypeInformationMapper = new SimpleTypeInformationMapper ( ) ; org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new Document ( ) , java.lang.String .class , java.lang.String .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.lang.String .class . java.lang.String ( ) ) ; void ( org.springframework.data.mongodb.core.convert.Document , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.ConfigurableTypeInformationMapper ) ) ; void ( new Document ( ) , java.lang.String .class , STRING ) ; void ( new Document ( ) , java.lang.Object .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.ConfigurableTypeInformationMapper , org.springframework.data.mongodb.core.convert.SimpleTypeInformationMapper ) ) ; void ( new Document ( ) , java.lang.String .class , STRING ) ; void ( new Document ( ) , java.lang.Object .class , java.lang.Object .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.ConfigurableTypeInformationMapper ) ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , STRING ) , java.lang.String .class ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.convert.ConfigurableTypeInformationMapper , org.springframework.data.mongodb.core.convert.SimpleTypeInformationMapper ) ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , STRING ) , java.lang.String .class ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.lang.Object .class . java.lang.String ( ) ) , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( ) ; org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . writeTypeRestrictions ( org.springframework.data.mongodb.core.convert.Document , java.util.Collections .< java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( java.lang.String .class ) ) ; Document org.springframework.data.mongodb.core.convert.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.convert.Document , DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = DocumentTestUtils . getAsDBList ( org.springframework.data.mongodb.core.convert.Document , STRING ) ; assertThat ( java.util.List<java.lang.Object> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , is ( ( java.lang.Object ) java.lang.String .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , new Document ( ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( STRING ) ; void ( STRING , new Document ( ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( null ) ; void ( null , new Document ( ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.lang.String .class . java.lang.String ( ) ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( STRING ) ; void ( new Document ( STRING , java.lang.String .class . java.lang.String ( ) ) , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new Document ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new Document ( ) , null ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , STRING ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( null ) ; void ( new Document ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , java.lang.String .class ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . isTypeKey ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( true ) ) ; org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . isTypeKey ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . isTypeKey ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( false ) ) ; org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper = new DefaultMongoTypeMapper ( null ) ; assertThat ( org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . isTypeKey ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . isTypeKey ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Document org.springframework.data.mongodb.core.convert.Document , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> = org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . readType ( org.springframework.data.mongodb.core.convert.Document ) ; if ( java.lang.Class<> != null ) { assertThat ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . get ( ) . getType ( ) , is ( typeCompatibleWith ( java.lang.Class<> ) ) ) ; } else { assertThat ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , Document org.springframework.data.mongodb.core.convert.Document , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . writeType ( java.lang.Class<> , org.springframework.data.mongodb.core.convert.Document ) ; if ( java.lang.String == null ) { assertThat ( org.springframework.data.mongodb.core.convert.Document . keySet ( ) . isEmpty ( ) , is ( true ) ) ; } else { assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) , is ( ( java.lang.Object ) java.lang.Class<> . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Document org.springframework.data.mongodb.core.convert.Document , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object ) { org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper . writeType ( java.lang.Class<> , org.springframework.data.mongodb.core.convert.Document ) ; if ( java.lang.Object == null ) { assertThat ( org.springframework.data.mongodb.core.convert.Document . keySet ( ) . isEmpty ( ) , is ( true ) ) ; } else { assertThat ( org.springframework.data.mongodb.core.convert.Document . containsKey ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( true ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.Document . get ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY ) , is ( java.lang.Object ) ) ; } }  <METHOD_END>
