<METHOD_START> @ BeforeClass public static void void ( ) { ClusterInfo org.springframework.data.couchbase.repository.extending.base.ClusterInfo = mock ( ClusterInfo .class ) ; when ( org.springframework.data.couchbase.repository.extending.base.ClusterInfo . checkAvailable ( any ( CouchbaseFeature .class ) ) ) . thenReturn ( true ) ; org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations = mock ( CouchbaseOperations .class ) ; when ( org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations . getCouchbaseClusterInfo ( ) ) . thenReturn ( org.springframework.data.couchbase.repository.extending.base.ClusterInfo ) ; when ( org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations . exists ( any ( java.lang.String .class ) ) ) . thenReturn ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations ( ) { return org.springframework.data.couchbase.repository.extending.base.CouchbaseOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.couchbase.repository.extending.base.IndexManager org.springframework.data.couchbase.repository.extending.base.IndexManager ( ) { return new IndexManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.ItemRepository ) ; assertNotNull ( org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.UserRepository ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.ItemRepository . sharedCustomMethod ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.ItemRepository . sharedCustomMethod ( STRING ) ) ; assertEquals ( org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.ItemRepository . sharedCustomMethod ( STRING ) , org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.UserRepository . sharedCustomMethod ( STRING ) ) ; assertEquals ( org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.ItemRepository . sharedCustomMethod ( STRING ) , org.springframework.data.couchbase.repository.extending.base.RepositoryBaseTest.UserRepository . sharedCustomMethod ( STRING ) ) ; }  <METHOD_END>
