<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { Assert . notNull ( java.util.concurrent.Executor , STRING ) ; this . org.springframework.integration.core.AsyncTaskExecutor = ( java.util.concurrent.Executor instanceof AsyncTaskExecutor ) ? ( AsyncTaskExecutor ) java.util.concurrent.Executor : new TaskExecutorAdapter ( java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) send ( message ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final MessageChannel org.springframework.integration.core.MessageChannel , final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) send ( channel , message ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final java.lang.String java.lang.String , final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) send ( channelName , message ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) convertAndSend ( object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final MessageChannel org.springframework.integration.core.MessageChannel , final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) convertAndSend ( channel , object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<?> < ? > java.util.concurrent.Future<?> ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) convertAndSend ( channelName , object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) receive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( final PollableChannel org.springframework.integration.core.PollableChannel ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) receive ( channel ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( final java.lang.String java.lang.String ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) receive ( channelName ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) receiveAndConvert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final PollableChannel org.springframework.integration.core.PollableChannel ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) receiveAndConvert ( channel , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final java.lang.String java.lang.String ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) receiveAndConvert ( channelName , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) sendAndReceive ( requestMessage ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( final MessageChannel org.springframework.integration.core.MessageChannel , final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) sendAndReceive ( channel , requestMessage ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.Future<org.springframework.integration.core.Message<?>> < Message < ? > > java.util.concurrent.Future<org.springframework.integration.core.Message<?>> ( final java.lang.String java.lang.String , final Message < ? > org.springframework.integration.core.Message<?> ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) sendAndReceive ( channelName , requestMessage ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( request , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final MessageChannel org.springframework.integration.core.MessageChannel , final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( channel , request , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( channelName , request , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final java.lang.Object java.lang.Object , final MessagePostProcessor org.springframework.integration.core.MessagePostProcessor ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( request , null , requestPostProcessor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final MessageChannel org.springframework.integration.core.MessageChannel , final java.lang.Object java.lang.Object , final MessagePostProcessor org.springframework.integration.core.MessagePostProcessor ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( channel , request , null , requestPostProcessor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < R > java.util.concurrent.Future<R> < R > java.util.concurrent.Future<R> ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object , final MessagePostProcessor org.springframework.integration.core.MessagePostProcessor ) { return this . org.springframework.integration.core.AsyncTaskExecutor . submit ( ( ) ( R ) convertSendAndReceive ( channelName , request , null , requestPostProcessor ) ) ; }  <METHOD_END>
