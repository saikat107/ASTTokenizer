<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.config.xml.BeanDefinition org.springframework.integration.config.xml.BeanDefinition ( final org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { boolean boolean = org.springframework.integration.config.xml.ParserContext . isNested ( ) ; final java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( AbstractBeanDefinitionParser . ID_ATTRIBUTE ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( boolean ? STRING : STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( boolean ? STRING : STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! org.w3c.dom.Element . boolean ( STRING ) || StringUtils . hasLength ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , null ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( boolean ? STRING : STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( boolean ? STRING : STRING ) ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.w3c.dom.Element> ) ) { java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > ( java.util.List<org.w3c.dom.Element> . int ( ) ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . boolean ( java.util.Map<java.lang.String,java.lang.Object> ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map[] ( new java.util.Map [ java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ] ) ) ; } java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.w3c.dom.Element> ) ) { java.util.Map<java.lang.String,org.springframework.integration.config.xml.BeanDefinition> < java.lang.String , BeanDefinition > java.util.Map<java.lang.String,org.springframework.integration.config.xml.BeanDefinition> = new ManagedMap < java.lang.String , BeanDefinition > ( ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GatewayMethodMetadata .class ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; boolean boolean = StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; Assert . state ( ! boolean || ! StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.config.xml.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.w3c.dom.Element> ) ) { Assert . state ( ! boolean , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new ManagedMap < java.lang.String , java.lang.Object > ( ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : java.util.List<org.w3c.dom.Element> ) { BeanDefinition org.springframework.integration.config.xml.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefinitionFromValueOrExpression ( STRING , STRING , org.springframework.integration.config.xml.ParserContext , org.w3c.dom.Element , true ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.w3c.dom.Element . java.lang.String ( STRING ) , org.springframework.integration.config.xml.BeanDefinition ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; } java.util.Map<java.lang.String,org.springframework.integration.config.xml.BeanDefinition> . put ( java.lang.String , org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,org.springframework.integration.config.xml.BeanDefinition> ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; BeanDefinitionHolder org.springframework.integration.config.xml.BeanDefinitionHolder = this . org.springframework.integration.config.xml.MessagingGatewayRegistrar . parse ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( boolean ) { return org.springframework.integration.config.xml.BeanDefinitionHolder . getBeanDefinition ( ) ; } else { BeanDefinitionReaderUtils . registerBeanDefinition ( org.springframework.integration.config.xml.BeanDefinitionHolder , org.springframework.integration.config.xml.ParserContext . getRegistry ( ) ) ; return null ; } }  <METHOD_END>
