<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new EntityInstantiators ( ( EntityInstantiator ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EntityInstantiators org.springframework.data.convert.EntityInstantiators = new EntityInstantiators ( ) ; assertThat ( org.springframework.data.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.convert.PersistentEntity<,> ) ) . isInstanceOf ( ClassGeneratingEntityInstantiator .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.lang.String .class ) . when ( org.springframework.data.convert.PersistentEntity<,> ) . getType ( ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> < java.lang.Class<?> < ? > , EntityInstantiator > java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> = java.util.Collections . java.util.Map ( java.lang.String .class , org.springframework.data.convert.EntityInstantiator ) ; EntityInstantiators org.springframework.data.convert.EntityInstantiators = new EntityInstantiators ( java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> ) ; assertThat ( org.springframework.data.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.convert.PersistentEntity<,> ) ) . isEqualTo ( org.springframework.data.convert.EntityInstantiator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( java.lang.Object .class ) . when ( org.springframework.data.convert.PersistentEntity<,> ) . getType ( ) ; java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> < java.lang.Class<?> < ? > , EntityInstantiator > java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> = java.util.Collections . java.util.Map ( java.lang.String .class , ReflectionEntityInstantiator . INSTANCE ) ; EntityInstantiators org.springframework.data.convert.EntityInstantiators = new EntityInstantiators ( org.springframework.data.convert.EntityInstantiator , java.util.Map<java.lang.Class<?>,org.springframework.data.convert.EntityInstantiator> ) ; org.springframework.data.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.convert.PersistentEntity<,> ) ; assertThat ( org.springframework.data.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.convert.PersistentEntity<,> ) ) . isEqualTo ( org.springframework.data.convert.EntityInstantiator ) ; doReturn ( java.lang.String .class ) . when ( org.springframework.data.convert.PersistentEntity<,> ) . getType ( ) ; assertThat ( org.springframework.data.convert.EntityInstantiators . getInstantiatorFor ( org.springframework.data.convert.PersistentEntity<,> ) ) . isEqualTo ( ( EntityInstantiator ) ReflectionEntityInstantiator . INSTANCE ) ; }  <METHOD_END>
