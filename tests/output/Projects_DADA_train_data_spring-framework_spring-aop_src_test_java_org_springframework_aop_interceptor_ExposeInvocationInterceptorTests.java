<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.aop.interceptor.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( org.springframework.aop.interceptor.DefaultListableBeanFactory ) . loadBeanDefinitions ( org.springframework.aop.interceptor.Resource ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) org.springframework.aop.interceptor.DefaultListableBeanFactory . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.interceptor.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.interceptor.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; void ( org.springframework.aop.interceptor.MethodInvocation ) ; return super. getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; void ( org.springframework.aop.interceptor.MethodInvocation ) ; super. absquatulate ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) { assertTrue ( org.springframework.aop.interceptor.MethodInvocation . getThis ( ) == this ) ; assertTrue ( STRING + org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) , ITestBean .class . boolean ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ) ) ; }  <METHOD_END>
