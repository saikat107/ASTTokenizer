<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ISO org.springframework.format.datetime.ISO ) { this . org.springframework.format.datetime.ISO = org.springframework.format.datetime.ISO ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.TimeZone java.util.TimeZone ) { this . java.util.TimeZone = java.util.TimeZone ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.util.Date java.util.Date , java.util.Locale java.util.Locale ) { return java.text.DateFormat ( java.util.Locale ) . java.lang.String ( java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.text.ParseException { return java.text.DateFormat ( java.util.Locale ) . java.util.Date ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.text.DateFormat java.text.DateFormat ( java.util.Locale java.util.Locale ) { java.text.DateFormat java.text.DateFormat = java.text.DateFormat ( java.util.Locale ) ; if ( this . java.util.TimeZone != null ) { java.text.DateFormat . void ( this . java.util.TimeZone ) ; } java.text.DateFormat . void ( this . boolean ) ; return java.text.DateFormat ; }  <METHOD_END>
<METHOD_START> private java.text.DateFormat java.text.DateFormat ( java.util.Locale java.util.Locale ) { if ( StringUtils . hasLength ( this . java.lang.String ) ) { return new java.text.SimpleDateFormat ( this . java.lang.String , java.util.Locale ) ; } if ( this . org.springframework.format.datetime.ISO != null && this . org.springframework.format.datetime.ISO != ISO . NONE ) { java.lang.String java.lang.String = java.util.Map<org.springframework.format.datetime.ISO,java.lang.String> . get ( this . org.springframework.format.datetime.ISO ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + this . org.springframework.format.datetime.ISO ) ; } java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone ) ; return java.text.SimpleDateFormat ; } if ( StringUtils . hasLength ( this . java.lang.String ) ) { int int = int ( NUMBER ) ; int int = int ( NUMBER ) ; if ( int != - NUMBER && int != - NUMBER ) { return java.text.DateFormat . java.text.DateFormat ( int , int , java.util.Locale ) ; } if ( int != - NUMBER ) { return java.text.DateFormat . java.text.DateFormat ( int , java.util.Locale ) ; } if ( int != - NUMBER ) { return java.text.DateFormat . java.text.DateFormat ( int , java.util.Locale ) ; } throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING ) ; } return java.text.DateFormat . java.text.DateFormat ( this . int , java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> private int int ( int int ) { if ( this . java.lang.String != null && this . java.lang.String . int ( ) > int ) { switch ( this . java.lang.String . char ( int ) ) { case 'S' : return java.text.DateFormat . int ; case 'M' : return java.text.DateFormat . int ; case 'L' : return java.text.DateFormat . int ; case 'F' : return java.text.DateFormat . int ; case '-' : return - NUMBER ; } } throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING ) ; }  <METHOD_END>
