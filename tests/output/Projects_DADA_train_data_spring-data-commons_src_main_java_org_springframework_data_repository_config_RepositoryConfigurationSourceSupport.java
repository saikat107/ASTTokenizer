<METHOD_START> public void ( Environment org.springframework.data.repository.config.Environment ) { Assert . notNull ( org.springframework.data.repository.config.Environment , STRING ) ; this . org.springframework.data.repository.config.Environment = org.springframework.data.repository.config.Environment ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Collection<org.springframework.data.repository.config.BeanDefinition> ( ResourceLoader org.springframework.data.repository.config.ResourceLoader ) { RepositoryComponentProvider org.springframework.data.repository.config.RepositoryComponentProvider = new RepositoryComponentProvider ( java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) ) ; org.springframework.data.repository.config.RepositoryComponentProvider . setConsiderNestedRepositoryInterfaces ( boolean ( ) ) ; org.springframework.data.repository.config.RepositoryComponentProvider . setResourceLoader ( org.springframework.data.repository.config.ResourceLoader ) ; org.springframework.data.repository.config.RepositoryComponentProvider . setEnvironment ( org.springframework.data.repository.config.Environment ) ; for ( TypeFilter org.springframework.data.repository.config.TypeFilter : java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) ) { org.springframework.data.repository.config.RepositoryComponentProvider . addExcludeFilter ( org.springframework.data.repository.config.TypeFilter ) ; } java.util.Set<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.repository.config.BeanDefinition> = new java.util.HashSet<org.springframework.data.repository.config.BeanDefinition> <> ( ) ; for ( java.lang.String java.lang.String : getBasePackages ( ) ) { java.util.Set<org.springframework.data.repository.config.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.data.repository.config.BeanDefinition> = org.springframework.data.repository.config.RepositoryComponentProvider . findCandidateComponents ( java.lang.String ) ; java.util.Set<org.springframework.data.repository.config.BeanDefinition> . addAll ( java.util.Set<org.springframework.data.repository.config.BeanDefinition> ) ; } return java.util.Set<org.springframework.data.repository.config.BeanDefinition> ; }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) { return java.util.Collections . java.util.Set<org.springframework.data.repository.config.TypeFilter> ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) { return java.util.Collections . java.util.Set<org.springframework.data.repository.config.TypeFilter> ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
