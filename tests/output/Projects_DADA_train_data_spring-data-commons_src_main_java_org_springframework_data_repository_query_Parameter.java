<METHOD_START> protected void ( MethodParameter org.springframework.data.repository.query.MethodParameter ) { Assert . notNull ( org.springframework.data.repository.query.MethodParameter , STRING ) ; this . org.springframework.data.repository.query.MethodParameter = org.springframework.data.repository.query.MethodParameter ; this . java.lang.Class<?> = java.lang.Class<?> ( org.springframework.data.repository.query.MethodParameter ) ; this . boolean = boolean ( org.springframework.data.repository.query.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean || java.util.List<java.lang.Class<?>> . boolean ( org.springframework.data.repository.query.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( java.lang.String , java.util.Optional<java.lang.String> ( ) . java.lang.String ( ) ) ; } else { return java.lang.String ( java.lang.String , int ( ) ) ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return org.springframework.data.repository.query.MethodParameter . getParameterIndex ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! boolean ( ) && java.util.Optional<java.lang.String> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { Param org.springframework.data.repository.query.Param = org.springframework.data.repository.query.MethodParameter . getParameterAnnotation ( Param .class ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.repository.query.Param == null ? org.springframework.data.repository.query.MethodParameter . getParameterName ( ) : org.springframework.data.repository.query.Param . value ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.repository.query.MethodParameter . hasParameterAnnotation ( Param .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( STRING , boolean ( ) ? java.util.Optional<java.lang.String> ( ) : STRING + int ( ) , java.lang.Class<?> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return Pageable .class . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return Sort .class . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( MethodParameter org.springframework.data.repository.query.MethodParameter ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.repository.query.MethodParameter . getMethod ( ) ; ClassTypeInformation < ? > org.springframework.data.repository.query.ClassTypeInformation<?> = ClassTypeInformation . from ( org.springframework.data.repository.query.MethodParameter . getDeclaringClass ( ) ) ; TypeInformation < ? > org.springframework.data.repository.query.TypeInformation<?> = org.springframework.data.repository.query.ClassTypeInformation<> . getParameterTypes ( java.lang.reflect.Method ) . get ( org.springframework.data.repository.query.MethodParameter . getParameterIndex ( ) ) ; if ( ! org.springframework.data.repository.query.TypeInformation<> . getType ( ) . equals ( java.lang.Class .class ) ) { return false ; } TypeInformation < ? > org.springframework.data.repository.query.TypeInformation<?> = org.springframework.data.repository.query.TypeInformation<> . getTypeArguments ( ) . get ( NUMBER ) ; TypeInformation < java.lang.Object > org.springframework.data.repository.query.TypeInformation<java.lang.Object> = ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; return org.springframework.data.repository.query.TypeInformation<> . equals ( org.springframework.data.repository.query.TypeInformation<java.lang.Object> . getActualType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( MethodParameter org.springframework.data.repository.query.MethodParameter ) { return QueryExecutionConverters . supports ( org.springframework.data.repository.query.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( MethodParameter org.springframework.data.repository.query.MethodParameter ) { return QueryExecutionConverters . supportsUnwrapping ( org.springframework.data.repository.query.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Class<?> < ? > java.lang.Class<?> ( MethodParameter org.springframework.data.repository.query.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.query.MethodParameter . getParameterType ( ) ; if ( boolean ( org.springframework.data.repository.query.MethodParameter ) && boolean ( org.springframework.data.repository.query.MethodParameter ) ) { return ResolvableType . forMethodParameter ( org.springframework.data.repository.query.MethodParameter ) . getGeneric ( NUMBER ) . getRawClass ( ) ; } return java.lang.Class<> ; }  <METHOD_END>
