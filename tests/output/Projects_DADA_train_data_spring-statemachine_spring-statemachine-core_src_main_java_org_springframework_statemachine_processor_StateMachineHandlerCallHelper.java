<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public void void ( ) java.lang.Exception { if ( ! ( org.springframework.statemachine.processor.ListableBeanFactory instanceof ListableBeanFactory ) ) { org.springframework.statemachine.processor.Log . info ( STRING + org.springframework.statemachine.processor.ListableBeanFactory + STRING ) ; return; } if ( org.springframework.statemachine.processor.ListableBeanFactory . containsBean ( StateMachineHandlerApplicationListener . BEAN_NAME ) ) { this . org.springframework.statemachine.processor.StateMachineHandlerApplicationListener = org.springframework.statemachine.processor.ListableBeanFactory . getBean ( StateMachineHandlerApplicationListener . BEAN_NAME , StateMachineHandlerApplicationListener .class ) ; } for ( StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E> : org.springframework.statemachine.processor.ListableBeanFactory . getBeansOfType ( StateMachineHandler .class ) . values ( ) ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = org.springframework.statemachine.processor.StateMachineHandler<,S,E> . getAnnotation ( ) ; java.lang.annotation.Annotation java.lang.annotation.Annotation = org.springframework.statemachine.processor.StateMachineHandler<,S,E> . getMetaAnnotation ( ) ; WithStateMachine org.springframework.statemachine.processor.WithStateMachine = AnnotationUtils . findAnnotation ( org.springframework.statemachine.processor.StateMachineHandler<,S,E> . getBeanClass ( ) , WithStateMachine .class ) ; if ( StringUtils . hasText ( org.springframework.statemachine.processor.WithStateMachine . name ( ) ) ) { void ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + org.springframework.statemachine.processor.WithStateMachine . name ( ) , new org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry ( org.springframework.statemachine.processor.StateMachineHandler<,S,E> , java.lang.annotation.Annotation , java.lang.annotation.Annotation ) ) ; } if ( StringUtils . hasText ( org.springframework.statemachine.processor.WithStateMachine . id ( ) ) ) { void ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) + org.springframework.statemachine.processor.WithStateMachine . id ( ) , new org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry ( org.springframework.statemachine.processor.StateMachineHandler<,S,E> , java.lang.annotation.Annotation , java.lang.annotation.Annotation ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.processor.BeanFactory ) throws org.springframework.statemachine.processor.BeansException { Assert . state ( org.springframework.statemachine.processor.BeanFactory instanceof ListableBeanFactory , STRING + org.springframework.statemachine.processor.BeanFactory ) ; this . org.springframework.statemachine.processor.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.statemachine.processor.BeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateChanged .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateEntry .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateExit .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnEventNotAccepted .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { E E = org.springframework.statemachine.processor.StateContext<S,E> . getEvent ( ) ; if ( E != null ) { if ( boolean ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , new java.lang.String [] { E . java.lang.String ( ) } ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } else { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnTransitionStart .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnTransition .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnTransitionEnd .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , ( java.lang.String [] ) AnnotationUtils . getValue ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , STRING ) , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getSource ( ) , org.springframework.statemachine.processor.StateContext<S,E> . getTransition ( ) . getTarget ( ) ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateMachineStart .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateMachineStop .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnStateMachineError .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return; } java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > ( ) ; java.lang.String java.lang.String = OnExtendedStateChanged .class . java.lang.String ( ) + java.lang.String ; java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { return; } for ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry : java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) { if ( boolean ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . java.lang.annotation.Annotation , java.lang.Object ) ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> . add ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry . org.springframework.statemachine.processor.StateMachineHandler<,S,E> ) ; } } java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , org.springframework.statemachine.processor.StateContext<S,E> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = java.util.Map<java.lang.String,java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry>> . java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; if ( java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> == null ) { java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> = new java.util.ArrayList<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> <> ( ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry>> . java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String , java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ) ; } java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> . boolean ( org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry ) ; }  <METHOD_END>
<METHOD_START> private synchronized java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> < org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry > java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String java.lang.String ) { if ( org.springframework.statemachine.processor.StateMachineHandlerApplicationListener != null ) { java.lang.Long java.lang.Long = org.springframework.statemachine.processor.StateMachineHandlerApplicationListener . getLastRefreshTime ( ) ; if ( java.lang.Long != null && java.lang.Long < java.lang.System . long ( ) ) { if ( long != java.lang.Long ) { java.util.Map<java.lang.String,java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry>> . void ( ) ; try { void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.processor.Log . error ( STRING , java.lang.Exception ) ; } long = java.lang.Long ; } } } return java.util.Map<java.lang.String,java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry>> . java.util.List<org.springframework.statemachine.processor.StateMachineHandlerCallHelper<S,E>.CacheEntry> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.Object java.lang.Object ) { boolean boolean = false ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = StateMachineUtils . toStringCollection ( java.lang.Object ) ; if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( java.lang.Object ) ) ) { boolean = true ; } } else { boolean = true ; } return boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.Object java.lang.Object ) { boolean boolean = false ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = StateMachineUtils . toStringCollection ( java.lang.Object ) ; if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( java.lang.Object ) ) ) { boolean = true ; } } else { boolean = true ; } return boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] , java.lang.annotation.Annotation java.lang.annotation.Annotation , State < S , E > org.springframework.statemachine.processor.State<S,E> , State < S , E > org.springframework.statemachine.processor.State<S,E> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = StateMachineUtils . toStringCollection ( java.lang.Object ) ; if ( java.util.Collection<java.lang.String> . boolean ( ) && java.lang.String[] != null ) { java.util.Collection<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; } java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = StateMachineUtils . toStringCollection ( java.lang.Object ) ; if ( java.util.Collection<java.lang.String> . boolean ( ) && java.lang.String[] != null ) { java.util.Collection<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ; } boolean boolean = false ; if ( ! java.util.Collection<java.lang.String> . boolean ( ) && ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( org.springframework.statemachine.processor.State<S,E> != null && org.springframework.statemachine.processor.State<S,E> != null && StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( org.springframework.statemachine.processor.State<S,E> . getIds ( ) ) ) && StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( org.springframework.statemachine.processor.State<S,E> . getIds ( ) ) ) ) { boolean = true ; } } else if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( org.springframework.statemachine.processor.State<S,E> != null && StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( org.springframework.statemachine.processor.State<S,E> . getIds ( ) ) ) ) { boolean = true ; } } else if ( ! java.util.Collection<java.lang.String> . boolean ( ) ) { if ( org.springframework.statemachine.processor.State<S,E> != null && StateMachineUtils . containsAtleastOne ( java.util.Collection<java.lang.String> , StateMachineUtils . toStringCollection ( org.springframework.statemachine.processor.State<S,E> . getIds ( ) ) ) ) { boolean = true ; } } else if ( java.util.Collection<java.lang.String> . boolean ( ) && java.util.Collection<java.lang.String> . boolean ( ) ) { boolean = true ; } return boolean ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> < StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > > java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> , final StateContext < S , E > org.springframework.statemachine.processor.StateContext<S,E> ) { StateMachineRuntime < S , E > org.springframework.statemachine.processor.StateMachineRuntime<S,E> = new StateMachineRuntime < S , E > ( ) { @ java.lang.Override public org.springframework.statemachine.processor.StateContext<S,E> < S , E > org.springframework.statemachine.processor.StateContext<S,E> ( ) { return org.springframework.statemachine.processor.StateContext<S,E> ; } } ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E> : java.util.List<org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E>> ) { try { java.util.List<java.lang.Object> . boolean ( org.springframework.statemachine.processor.StateMachineHandler<,S,E> . handle ( org.springframework.statemachine.processor.StateMachineRuntime<S,E> ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.processor.Log . error ( STRING + org.springframework.statemachine.processor.StateMachineHandler<,S,E> , java.lang.Throwable ) ; } } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.processor.StateContext<S,E> < S , E > org.springframework.statemachine.processor.StateContext<S,E> ( ) { return org.springframework.statemachine.processor.StateContext<S,E> ; }  <METHOD_END>
<METHOD_START> public void ( StateMachineHandler < ? extends java.lang.annotation.Annotation , S , E > org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E> , java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { this . org.springframework.statemachine.processor.StateMachineHandler<? extends java.lang.annotation.Annotation,S,E> = org.springframework.statemachine.processor.StateMachineHandler<,S,E> ; this . java.lang.annotation.Annotation = java.lang.annotation.Annotation ; this . java.lang.annotation.Annotation = java.lang.annotation.Annotation ; }  <METHOD_END>
