<METHOD_START> public void ( ApplicationContext org.springframework.web.reactive.config.ApplicationContext ) { Assert . notNull ( org.springframework.web.reactive.config.ApplicationContext , STRING ) ; this . org.springframework.web.reactive.config.ApplicationContext = org.springframework.web.reactive.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.config.UrlBasedViewResolverRegistration org.springframework.web.reactive.config.UrlBasedViewResolverRegistration ( ) { if ( this . org.springframework.web.reactive.config.ApplicationContext != null && ! boolean ( FreeMarkerConfigurer .class ) ) { throw new BeanInitializationException ( STRING + STRING + STRING + STRING ) ; } org.springframework.web.reactive.config.ViewResolverRegistry.FreeMarkerRegistration org.springframework.web.reactive.config.ViewResolverRegistry.FreeMarkerRegistration = new org.springframework.web.reactive.config.ViewResolverRegistry.FreeMarkerRegistration ( ) ; UrlBasedViewResolver org.springframework.web.reactive.config.UrlBasedViewResolver = org.springframework.web.reactive.config.ViewResolverRegistry.FreeMarkerRegistration . getViewResolver ( ) ; org.springframework.web.reactive.config.UrlBasedViewResolver . setApplicationContext ( this . org.springframework.web.reactive.config.ApplicationContext ) ; this . java.util.List<org.springframework.web.reactive.config.ViewResolver> . add ( org.springframework.web.reactive.config.UrlBasedViewResolver ) ; return org.springframework.web.reactive.config.ViewResolverRegistry.FreeMarkerRegistration ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ! ObjectUtils . isEmpty ( BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( this . org.springframework.web.reactive.config.ApplicationContext , java.lang.Class<> , false , false ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ViewResolver org.springframework.web.reactive.config.ViewResolver ) { this . java.util.List<org.springframework.web.reactive.config.ViewResolver> . add ( org.springframework.web.reactive.config.ViewResolver ) ; }  <METHOD_END>
<METHOD_START> public void void ( View ... org.springframework.web.reactive.config.View[] ) { this . java.util.List<org.springframework.web.reactive.config.View> . addAll ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.config.View[] ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( ! this . java.util.List<org.springframework.web.reactive.config.ViewResolver> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return ( this . java.lang.Integer != null ? this . java.lang.Integer : Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.reactive.config.ViewResolver> < ViewResolver > java.util.List<org.springframework.web.reactive.config.ViewResolver> ( ) { return this . java.util.List<org.springframework.web.reactive.config.ViewResolver> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.reactive.config.View> < View > java.util.List<org.springframework.web.reactive.config.View> ( ) { return this . java.util.List<org.springframework.web.reactive.config.View> ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new FreeMarkerViewResolver ( ) ); getViewResolver ( ) . setSuffix ( STRING ) ; }  <METHOD_END>
