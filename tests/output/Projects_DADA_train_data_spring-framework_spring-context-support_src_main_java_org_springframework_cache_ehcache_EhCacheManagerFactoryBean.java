<METHOD_START> public void void ( Resource org.springframework.cache.ehcache.Resource ) { this . org.springframework.cache.ehcache.Resource = org.springframework.cache.ehcache.Resource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.cache.ehcache.CacheException { if ( org.springframework.cache.ehcache.Log . isInfoEnabled ( ) ) { org.springframework.cache.ehcache.Log . info ( STRING + ( this . java.lang.String != null ? STRING + this . java.lang.String + STRING : STRING ) ) ; } Configuration org.springframework.cache.ehcache.Configuration = ( this . org.springframework.cache.ehcache.Resource != null ? EhCacheManagerUtils . parseConfiguration ( this . org.springframework.cache.ehcache.Resource ) : ConfigurationFactory . parseConfiguration ( ) ) ; if ( this . java.lang.String != null ) { org.springframework.cache.ehcache.Configuration . setName ( this . java.lang.String ) ; } if ( this . boolean ) { this . org.springframework.cache.ehcache.CacheManager = CacheManager . create ( org.springframework.cache.ehcache.Configuration ) ; } else if ( this . boolean ) { synchronized ( CacheManager .class ) { this . org.springframework.cache.ehcache.CacheManager = CacheManager . getCacheManager ( this . java.lang.String ) ; if ( this . org.springframework.cache.ehcache.CacheManager == null ) { this . org.springframework.cache.ehcache.CacheManager = new CacheManager ( org.springframework.cache.ehcache.Configuration ) ; } else { this . boolean = false ; } } } else { this . org.springframework.cache.ehcache.CacheManager = new CacheManager ( org.springframework.cache.ehcache.Configuration ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.ehcache.CacheManager org.springframework.cache.ehcache.CacheManager ( ) { return this . org.springframework.cache.ehcache.CacheManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.cache.ehcache.CacheManager> < ? extends CacheManager > java.lang.Class<? extends org.springframework.cache.ehcache.CacheManager> ( ) { return ( this . org.springframework.cache.ehcache.CacheManager != null ? this . org.springframework.cache.ehcache.CacheManager . getClass ( ) : CacheManager .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { if ( org.springframework.cache.ehcache.Log . isInfoEnabled ( ) ) { org.springframework.cache.ehcache.Log . info ( STRING + ( this . java.lang.String != null ? STRING + this . java.lang.String + STRING : STRING ) ) ; } this . org.springframework.cache.ehcache.CacheManager . shutdown ( ) ; } }  <METHOD_END>
