<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new OpPlus ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = SpelEvaluationException .class ) public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.StringLiteral ) ; org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; { RealLiteral org.springframework.expression.spel.ast.RealLiteral = new RealLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.RealLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Double .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Double .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( org.springframework.expression.spel.ast.RealLiteral . getLiteralValue ( ) . getValue ( ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } { IntLiteral org.springframework.expression.spel.ast.IntLiteral = new IntLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.IntLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( org.springframework.expression.spel.ast.IntLiteral . getLiteralValue ( ) . getValue ( ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } { LongLiteral org.springframework.expression.spel.ast.LongLiteral = new LongLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.LongLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Long .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( org.springframework.expression.spel.ast.LongLiteral . getLiteralValue ( ) . getValue ( ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; { RealLiteral org.springframework.expression.spel.ast.RealLiteral = new RealLiteral ( STRING , - NUMBER , NUMBER ) ; RealLiteral org.springframework.expression.spel.ast.RealLiteral = new RealLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.RealLiteral , org.springframework.expression.spel.ast.RealLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Double .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Double .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Double . java.lang.Double ( NUMBER + NUMBER ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } { LongLiteral org.springframework.expression.spel.ast.LongLiteral = new LongLiteral ( STRING , - NUMBER , NUMBER ) ; LongLiteral org.springframework.expression.spel.ast.LongLiteral = new LongLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.LongLiteral , org.springframework.expression.spel.ast.LongLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Long .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Long .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER + NUMBER ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } { IntLiteral org.springframework.expression.spel.ast.IntLiteral = new IntLiteral ( STRING , - NUMBER , NUMBER ) ; IntLiteral org.springframework.expression.spel.ast.IntLiteral = new IntLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.IntLiteral , org.springframework.expression.spel.ast.IntLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER + NUMBER ) , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.StringLiteral , org.springframework.expression.spel.ast.StringLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; LongLiteral org.springframework.expression.spel.ast.LongLiteral = new LongLiteral ( STRING , - NUMBER , NUMBER ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.StringLiteral , org.springframework.expression.spel.ast.LongLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; LongLiteral org.springframework.expression.spel.ast.LongLiteral = new LongLiteral ( STRING , - NUMBER , NUMBER ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.LongLiteral , org.springframework.expression.spel.ast.StringLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( new StandardEvaluationContext ( ) ) ; java.sql.Time java.sql.Time = new java.sql.Time ( new java.util.Date ( ) . long ( ) ) ; VariableReference org.springframework.expression.spel.ast.VariableReference = new VariableReference ( STRING , - NUMBER ) ; org.springframework.expression.spel.ast.VariableReference . setValue ( org.springframework.expression.spel.ast.ExpressionState , java.sql.Time ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.VariableReference , org.springframework.expression.spel.ast.StringLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.sql.Time + STRING , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; GenericConversionService org.springframework.expression.spel.ast.GenericConversionService = new GenericConversionService ( ) ; org.springframework.expression.spel.ast.GenericConversionService . addConverter ( new Converter < java.sql.Time , java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.sql.Time java.sql.Time ) { return java.text.SimpleDateFormat . java.lang.String ( java.sql.Time ) ; } } ) ; StandardEvaluationContext org.springframework.expression.spel.ast.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.expression.spel.ast.StandardEvaluationContext . setTypeConverter ( new StandardTypeConverter ( org.springframework.expression.spel.ast.GenericConversionService ) ) ; ExpressionState org.springframework.expression.spel.ast.ExpressionState = new ExpressionState ( org.springframework.expression.spel.ast.StandardEvaluationContext ) ; java.sql.Time java.sql.Time = new java.sql.Time ( new java.util.Date ( ) . long ( ) ) ; VariableReference org.springframework.expression.spel.ast.VariableReference = new VariableReference ( STRING , - NUMBER ) ; org.springframework.expression.spel.ast.VariableReference . setValue ( org.springframework.expression.spel.ast.ExpressionState , java.sql.Time ) ; StringLiteral org.springframework.expression.spel.ast.StringLiteral = new StringLiteral ( STRING , - NUMBER , STRING ) ; OpPlus org.springframework.expression.spel.ast.OpPlus = new OpPlus ( - NUMBER , org.springframework.expression.spel.ast.VariableReference , org.springframework.expression.spel.ast.StringLiteral ) ; TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.OpPlus . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getObjectType ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getType ( ) ) ; assertEquals ( java.text.SimpleDateFormat . java.lang.String ( java.sql.Time ) + STRING , org.springframework.expression.spel.ast.TypedValue . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.sql.Time java.sql.Time ) { return java.text.SimpleDateFormat . java.lang.String ( java.sql.Time ) ; }  <METHOD_END>
