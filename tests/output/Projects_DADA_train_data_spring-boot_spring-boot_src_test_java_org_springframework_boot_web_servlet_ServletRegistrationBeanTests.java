<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.web.servlet.ServletContext . addServlet ( anyString ( ) , ( Servlet ) any ( ) ) ) . willReturn ( this . ServletRegistration.Dynamic ) ; given ( this . org.springframework.boot.web.servlet.ServletContext . addFilter ( anyString ( ) , ( Filter ) any ( ) ) ) . willReturn ( this . FilterRegistration.Dynamic ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; verify ( this . ServletRegistration.Dynamic ) . setAsyncSupported ( true ) ; verify ( this . ServletRegistration.Dynamic ) . addMapping ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet ) ; given ( this . org.springframework.boot.web.servlet.ServletContext . addServlet ( anyString ( ) , ( Servlet ) any ( ) ) ) . willReturn ( null ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; verify ( this . ServletRegistration.Dynamic , never ( ) ) . setAsyncSupported ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setName ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setServlet ( this . org.springframework.boot.web.servlet.MockServlet ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setAsyncSupported ( false ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setInitParameters ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . addInitParameter ( STRING , STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setUrlMappings ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . addUrlMappings ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setLoadOnStartup ( NUMBER ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; verify ( this . ServletRegistration.Dynamic ) . setAsyncSupported ( false ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; verify ( this . ServletRegistration.Dynamic ) . setInitParameters ( java.util.Map<java.lang.String,java.lang.String> ) ; verify ( this . ServletRegistration.Dynamic ) . addMapping ( STRING , STRING , STRING ) ; verify ( this . ServletRegistration.Dynamic ) . setLoadOnStartup ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setName ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setServlet ( this . org.springframework.boot.web.servlet.MockServlet ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setServlet ( this . org.springframework.boot.web.servlet.MockServlet ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setServlet ( this . org.springframework.boot.web.servlet.MockServlet ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setEnabled ( false ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . org.springframework.boot.web.servlet.ServletContext , times ( NUMBER ) ) . addServlet ( STRING , this . org.springframework.boot.web.servlet.MockServlet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( ) ; this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; new ServletRegistrationBean < MockServlet > ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet ) ; this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setUrlMappings ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet ) ; this . org.springframework.boot.web.servlet.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.web.servlet.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . addUrlMappings ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet , STRING , STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . setUrlMappings ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . ServletRegistration.Dynamic ) . addMapping ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet , STRING , STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . addInitParameter ( STRING , STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . getInitParameters ( ) . put ( STRING , STRING ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . ServletRegistration.Dynamic ) . setInitParameters ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServletRegistrationBean < MockServlet > org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> = new ServletRegistrationBean <> ( this . org.springframework.boot.web.servlet.MockServlet , false ) ; org.springframework.boot.web.servlet.ServletRegistrationBean<org.springframework.boot.web.servlet.MockServlet> . onStartup ( this . org.springframework.boot.web.servlet.ServletContext ) ; verify ( this . ServletRegistration.Dynamic , never ( ) ) . addMapping ( ( java.lang.String [] ) any ( ) ) ; }  <METHOD_END>
