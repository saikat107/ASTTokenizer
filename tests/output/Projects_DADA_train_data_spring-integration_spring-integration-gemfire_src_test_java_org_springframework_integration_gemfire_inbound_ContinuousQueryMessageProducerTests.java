<METHOD_START> @ Before public void void ( ) { org.springframework.integration.gemfire.inbound.ContinuousQueryListenerContainer = mock ( ContinuousQueryListenerContainer .class ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer = new ContinuousQueryMessageProducer ( org.springframework.integration.gemfire.inbound.ContinuousQueryListenerContainer , STRING ) ; DirectChannel org.springframework.integration.gemfire.inbound.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . setOutputChannel ( org.springframework.integration.gemfire.inbound.DirectChannel ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler = new org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler ( ) ; org.springframework.integration.gemfire.inbound.DirectChannel . subscribe ( org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CqEvent org.springframework.integration.gemfire.inbound.CqEvent = org.springframework.integration.gemfire.inbound.CqEvent ( Operation . CREATE , STRING ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . onEvent ( org.springframework.integration.gemfire.inbound.CqEvent ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . int ) ; assertEquals ( org.springframework.integration.gemfire.inbound.CqEvent , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CqEvent org.springframework.integration.gemfire.inbound.CqEvent = org.springframework.integration.gemfire.inbound.CqEvent ( Operation . DESTROY , STRING ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . onEvent ( org.springframework.integration.gemfire.inbound.CqEvent ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CqEvent org.springframework.integration.gemfire.inbound.CqEvent = org.springframework.integration.gemfire.inbound.CqEvent ( Operation . DESTROY , null ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . setSupportedEventTypes ( CqEventType . DESTROYED ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . onEvent ( org.springframework.integration.gemfire.inbound.CqEvent ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . int ) ; assertEquals ( org.springframework.integration.gemfire.inbound.CqEvent , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CqEvent org.springframework.integration.gemfire.inbound.CqEvent = org.springframework.integration.gemfire.inbound.CqEvent ( Operation . CREATE , STRING ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . setPayloadExpression ( org.springframework.integration.gemfire.inbound.SpelExpressionParser . parseExpression ( STRING ) ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducer . onEvent ( org.springframework.integration.gemfire.inbound.CqEvent ) ; assertEquals ( NUMBER , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . int ) ; assertEquals ( STRING , org.springframework.integration.gemfire.inbound.ContinuousQueryMessageProducerTests.CqMessageHandler . java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> org.springframework.integration.gemfire.inbound.CqEvent org.springframework.integration.gemfire.inbound.CqEvent ( final Operation org.springframework.integration.gemfire.inbound.Operation , final java.lang.Object java.lang.Object ) { return new CqEvent ( ) { final org.springframework.integration.gemfire.inbound.CqQuery org.springframework.integration.gemfire.inbound.CqQuery = new ServerCQImpl ( ) ; final byte [] byte[] = new byte [ NUMBER ] ; final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; public org.springframework.integration.gemfire.inbound.Operation org.springframework.integration.gemfire.inbound.Operation ( ) { return org.springframework.integration.gemfire.inbound.Operation ; } public org.springframework.integration.gemfire.inbound.CqQuery org.springframework.integration.gemfire.inbound.CqQuery ( ) { return org.springframework.integration.gemfire.inbound.CqQuery ; } public byte [] byte[] ( ) { return byte[] ; } public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; } public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; } public org.springframework.integration.gemfire.inbound.Operation org.springframework.integration.gemfire.inbound.Operation ( ) { return org.springframework.integration.gemfire.inbound.Operation ; } public java.lang.Throwable java.lang.Throwable ( ) { return java.lang.Exception ; } } ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gemfire.inbound.Operation org.springframework.integration.gemfire.inbound.Operation ( ) { return org.springframework.integration.gemfire.inbound.Operation ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gemfire.inbound.CqQuery org.springframework.integration.gemfire.inbound.CqQuery ( ) { return org.springframework.integration.gemfire.inbound.CqQuery ; }  <METHOD_END>
<METHOD_START> public byte [] byte[] ( ) { return byte[] ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.gemfire.inbound.Operation org.springframework.integration.gemfire.inbound.Operation ( ) { return org.springframework.integration.gemfire.inbound.Operation ; }  <METHOD_END>
<METHOD_START> public java.lang.Throwable java.lang.Throwable ( ) { return java.lang.Exception ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.gemfire.inbound.Message<?> ) throws org.springframework.integration.gemfire.inbound.MessagingException { int ++ ; java.lang.Object = org.springframework.integration.gemfire.inbound.Message<> . getPayload ( ) ; }  <METHOD_END>
