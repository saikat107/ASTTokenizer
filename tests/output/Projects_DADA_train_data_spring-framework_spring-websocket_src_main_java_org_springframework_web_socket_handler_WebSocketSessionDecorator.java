<METHOD_START> public void ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) { Assert . notNull ( org.springframework.web.socket.handler.WebSocketSession , STRING ) ; this . org.springframework.web.socket.handler.WebSocketSession = org.springframework.web.socket.handler.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.handler.WebSocketSession org.springframework.web.socket.handler.WebSocketSession ( ) { return this . org.springframework.web.socket.handler.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.handler.WebSocketSession org.springframework.web.socket.handler.WebSocketSession ( ) { WebSocketSession org.springframework.web.socket.handler.WebSocketSession = this . org.springframework.web.socket.handler.WebSocketSession ; while ( org.springframework.web.socket.handler.WebSocketSession instanceof org.springframework.web.socket.handler.WebSocketSessionDecorator ) { org.springframework.web.socket.handler.WebSocketSession = ( ( org.springframework.web.socket.handler.WebSocketSessionDecorator ) org.springframework.web.socket.handler.WebSocketSession ) . org.springframework.web.socket.handler.WebSocketSession ( ) ; } return org.springframework.web.socket.handler.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.socket.handler.WebSocketSession org.springframework.web.socket.handler.WebSocketSession ( WebSocketSession org.springframework.web.socket.handler.WebSocketSession ) { if ( org.springframework.web.socket.handler.WebSocketSession instanceof org.springframework.web.socket.handler.WebSocketSessionDecorator ) { return ( ( org.springframework.web.socket.handler.WebSocketSessionDecorator ) org.springframework.web.socket.handler.WebSocketSession ) . org.springframework.web.socket.handler.WebSocketSession ( ) ; } else { return org.springframework.web.socket.handler.WebSocketSession ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getId ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getUri ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.handler.HttpHeaders org.springframework.web.socket.handler.HttpHeaders ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getHandshakeHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getLocalAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getRemoteAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getAcceptedProtocol ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.handler.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.handler.WebSocketExtension> ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getExtensions ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.web.socket.handler.WebSocketSession . setTextMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getTextMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . org.springframework.web.socket.handler.WebSocketSession . setBinaryMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . getBinaryMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.socket.handler.WebSocketSession . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketMessage < ? > org.springframework.web.socket.handler.WebSocketMessage<?> ) throws java.io.IOException { this . org.springframework.web.socket.handler.WebSocketSession . sendMessage ( org.springframework.web.socket.handler.WebSocketMessage<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { this . org.springframework.web.socket.handler.WebSocketSession . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CloseStatus org.springframework.web.socket.handler.CloseStatus ) throws java.io.IOException { this . org.springframework.web.socket.handler.WebSocketSession . close ( org.springframework.web.socket.handler.CloseStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.socket.handler.WebSocketSessionDecorator> ( ) . java.lang.String ( ) + STRING + this . org.springframework.web.socket.handler.WebSocketSession + STRING ; }  <METHOD_END>
