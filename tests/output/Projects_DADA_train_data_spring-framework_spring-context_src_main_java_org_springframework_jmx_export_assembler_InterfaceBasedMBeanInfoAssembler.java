<METHOD_START> public void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { if ( java.lang.Class<?>[] != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( ! java.lang.Class<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } } this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.Properties != null ) { this . java.util.Map<java.lang.String,java.lang.Class<?>[]> = java.util.Map<java.lang.String,java.lang.Class<?>[]> ( this . java.util.Properties ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Class<?>[]> < java.lang.String , java.lang.Class<?> < ? > [] > java.util.Map<java.lang.String,java.lang.Class<?>[]> ( java.util.Properties java.util.Properties ) { java.util.Map<java.lang.String,java.lang.Class<?>[]> < java.lang.String , java.lang.Class<?> < ? > [] > java.util.Map<java.lang.String,java.lang.Class<?>[]> = new java.util.HashMap<java.lang.String,java.lang.Class<?>[]> <> ( java.util.Properties . int ( ) ) ; for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = java.util.Properties . java.util.Enumeration<?> ( ) ; java.util.Enumeration<> . boolean ( ) ;) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.util.Properties . java.lang.String ( java.lang.String ) ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( java.lang.String[] , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Class<?>[]> . java.lang.Class<?>[] ( java.lang.String , java.lang.Class<?>[] ) ; } return java.util.Map<java.lang.String,java.lang.Class<?>[]> ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.Class<?>[] . int ; int ++ ) { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String[] [ int ] . java.lang.String ( ) , this . java.lang.ClassLoader ) ; if ( ! java.lang.Class<> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String[] [ int ] + STRING + java.lang.String + STRING ) ; } java.lang.Class<?>[] [ int ] = java.lang.Class<> ; } return java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return boolean ( java.lang.reflect.Method , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return boolean ( java.lang.reflect.Method , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return boolean ( java.lang.reflect.Method , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { return ( ( java.lang.reflect.Method . int ( ) & java.lang.reflect.Modifier . int ) > NUMBER ) && boolean ( java.lang.reflect.Method , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = null ; if ( this . java.util.Map<java.lang.String,java.lang.Class<?>[]> != null ) { java.lang.Class<?>[] = this . java.util.Map<java.lang.String,java.lang.Class<?>[]> . java.lang.Class<?>[] ( java.lang.String ) ; } if ( java.lang.Class<?>[] == null ) { java.lang.Class<?>[] = this . java.lang.Class<?>[] ; if ( java.lang.Class<?>[] == null ) { java.lang.Class<?>[] = ClassUtils . getAllInterfacesForClass ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; } } if ( java.lang.Class<?>[] != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.Class<> . java.lang.reflect.Method[] ( ) ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) && java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) { return true ; } } } } return false ; }  <METHOD_END>
