<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<?,?,?> = new KeyValueRepositoryFactoryBean < Repository < java.lang.Object , java.io.Serializable > , java.lang.Object , java.io.Serializable > ( org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBeanUnitTests.SampleRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setKeyValueOperations ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setQueryCreator ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> = ( java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > ) mock ( AbstractQueryCreator .class ) . getClass ( ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setQueryCreator ( java.lang.Class<> ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setKeyValueOperations ( mock ( KeyValueOperations .class ) ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> = ( java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > ) mock ( AbstractQueryCreator .class ) . getClass ( ) ; java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.RepositoryQuery> < ? extends RepositoryQuery > java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.RepositoryQuery> = ( java.lang.Class<? extends org.springframework.data.keyvalue.repository.support.RepositoryQuery> < ? extends RepositoryQuery > ) mock ( KeyValuePartTreeQuery .class ) . getClass ( ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setQueryCreator ( java.lang.Class<> ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setKeyValueOperations ( mock ( KeyValueOperations .class ) ) ; org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setQueryType ( java.lang.Class<> ) ; assertThat ( org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . createRepositoryFactory ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.repository.support.KeyValueRepositoryFactoryBean<,,> . setQueryType ( null ) ; }  <METHOD_END>
