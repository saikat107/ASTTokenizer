<METHOD_START> public void ( HealthMvcEndpointProperties org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties , ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties , EndpointCorsProperties org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties , ObjectProvider < java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> < EndpointHandlerMappingCustomizer > > org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer>> ) { this . org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties = org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties ; this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ; this . org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties = org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties ; java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> < EndpointHandlerMappingCustomizer > java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> = org.springframework.boot.actuate.autoconfigure.ObjectProvider<java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> = java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> == null ? java.util.Collections .< EndpointHandlerMappingCustomizer > java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> ( ) : java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ( ) { java.util.Set<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> < MvcEndpoint > java.util.Set<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> = org.springframework.boot.actuate.autoconfigure.MvcEndpoints ( ) . getEndpoints ( ) ; CorsConfiguration org.springframework.boot.actuate.autoconfigure.CorsConfiguration = org.springframework.boot.actuate.autoconfigure.CorsConfiguration ( this . org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties ) ; EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping = new EndpointHandlerMapping ( java.util.Set<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> , org.springframework.boot.actuate.autoconfigure.CorsConfiguration ) ; org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . setPrefix ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ) ; MvcEndpointSecurityInterceptor org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor = new MvcEndpointSecurityInterceptor ( this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . isEnabled ( ) , this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getRoles ( ) ) ; org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . setSecurityInterceptor ( org.springframework.boot.actuate.autoconfigure.MvcEndpointSecurityInterceptor ) ; for ( EndpointHandlerMappingCustomizer org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer : this . java.util.List<org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer> ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer . customize ( org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) ; } return org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.CorsConfiguration org.springframework.boot.actuate.autoconfigure.CorsConfiguration ( EndpointCorsProperties org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties ) { if ( CollectionUtils . isEmpty ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedOrigins ( ) ) ) { return null ; } CorsConfiguration org.springframework.boot.actuate.autoconfigure.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setAllowedOrigins ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedOrigins ( ) ) ; if ( ! CollectionUtils . isEmpty ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedHeaders ( ) ) ) { org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setAllowedHeaders ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedHeaders ( ) ) ; } if ( ! CollectionUtils . isEmpty ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedMethods ( ) ) ) { org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setAllowedMethods ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowedMethods ( ) ) ; } if ( ! CollectionUtils . isEmpty ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getExposedHeaders ( ) ) ) { org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setExposedHeaders ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getExposedHeaders ( ) ) ; } if ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getMaxAge ( ) != null ) { org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setMaxAge ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getMaxAge ( ) ) ; } if ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowCredentials ( ) != null ) { org.springframework.boot.actuate.autoconfigure.CorsConfiguration . setAllowCredentials ( org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties . getAllowCredentials ( ) ) ; } return org.springframework.boot.actuate.autoconfigure.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.actuate.autoconfigure.MvcEndpoints org.springframework.boot.actuate.autoconfigure.MvcEndpoints ( ) { return new MvcEndpoints ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( EnvironmentEndpoint .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.EnvironmentMvcEndpoint org.springframework.boot.actuate.autoconfigure.EnvironmentMvcEndpoint ( EnvironmentEndpoint org.springframework.boot.actuate.autoconfigure.EnvironmentEndpoint ) { return new EnvironmentMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.EnvironmentEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.HeapdumpMvcEndpoint org.springframework.boot.actuate.autoconfigure.HeapdumpMvcEndpoint ( ) { return new HeapdumpMvcEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( HealthEndpoint .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint ( HealthEndpoint org.springframework.boot.actuate.autoconfigure.HealthEndpoint , ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ) { HealthMvcEndpoint org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint = new HealthMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.HealthEndpoint , this . org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . isEnabled ( ) , org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getRoles ( ) ) ; if ( this . org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties . getMapping ( ) != null ) { org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint . addStatusMapping ( this . org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties . getMapping ( ) ) ; } return org.springframework.boot.actuate.autoconfigure.HealthMvcEndpoint ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( LoggersEndpoint .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.LoggersMvcEndpoint org.springframework.boot.actuate.autoconfigure.LoggersMvcEndpoint ( LoggersEndpoint org.springframework.boot.actuate.autoconfigure.LoggersEndpoint ) { return new LoggersMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.LoggersEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( MetricsEndpoint .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.MetricsMvcEndpoint org.springframework.boot.actuate.autoconfigure.MetricsMvcEndpoint ( MetricsEndpoint org.springframework.boot.actuate.autoconfigure.MetricsEndpoint ) { return new MetricsMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.MetricsEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnEnabledEndpoint ( STRING ) @ Conditional ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcManagementContextConfiguration.LogFileCondition .class ) public org.springframework.boot.actuate.autoconfigure.LogFileMvcEndpoint org.springframework.boot.actuate.autoconfigure.LogFileMvcEndpoint ( ) { return new LogFileMvcEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( ShutdownEndpoint .class ) @ ConditionalOnEnabledEndpoint ( value = STRING , enabledByDefault = false ) public org.springframework.boot.actuate.autoconfigure.ShutdownMvcEndpoint org.springframework.boot.actuate.autoconfigure.ShutdownMvcEndpoint ( ShutdownEndpoint org.springframework.boot.actuate.autoconfigure.ShutdownEndpoint ) { return new ShutdownMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.ShutdownEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( AuditEventRepository .class ) @ ConditionalOnEnabledEndpoint ( STRING ) public org.springframework.boot.actuate.autoconfigure.AuditEventsMvcEndpoint org.springframework.boot.actuate.autoconfigure.AuditEventsMvcEndpoint ( AuditEventRepository org.springframework.boot.actuate.autoconfigure.AuditEventRepository ) { return new AuditEventsMvcEndpoint ( org.springframework.boot.actuate.autoconfigure.AuditEventRepository ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.actuate.autoconfigure.ConditionOutcome org.springframework.boot.actuate.autoconfigure.ConditionOutcome ( ConditionContext org.springframework.boot.actuate.autoconfigure.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.actuate.autoconfigure.AnnotatedTypeMetadata ) { Environment org.springframework.boot.actuate.autoconfigure.Environment = org.springframework.boot.actuate.autoconfigure.ConditionContext . getEnvironment ( ) ; java.lang.String java.lang.String = org.springframework.boot.actuate.autoconfigure.Environment . resolvePlaceholders ( STRING ) ; ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } java.lang.String = org.springframework.boot.actuate.autoconfigure.Environment . resolvePlaceholders ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } java.lang.String = new RelaxedPropertyResolver ( org.springframework.boot.actuate.autoconfigure.Environment , STRING ) . getProperty ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( java.lang.String ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
