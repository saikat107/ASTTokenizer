<METHOD_START> @ java.lang.Override public org.springframework.boot.test.context.ApplicationContext org.springframework.boot.test.context.ApplicationContext ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration )			throws java.lang.Exception { SpringApplication org.springframework.boot.test.context.SpringApplication = org.springframework.boot.test.context.SpringApplication ( ) ; org.springframework.boot.test.context.SpringApplication . setMainApplicationClass ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) ) ; org.springframework.boot.test.context.SpringApplication . setSources ( java.util.Set<java.lang.Object> ( org.springframework.boot.test.context.MergedContextConfiguration ) ) ; ConfigurableEnvironment org.springframework.boot.test.context.ConfigurableEnvironment = new StandardEnvironment ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.boot.test.context.MergedContextConfiguration . getActiveProfiles ( ) ) ) { void ( org.springframework.boot.test.context.ConfigurableEnvironment , org.springframework.boot.test.context.MergedContextConfiguration . getActiveProfiles ( ) ) ; } TestPropertySourceUtils . addPropertiesFilesToEnvironment ( org.springframework.boot.test.context.ConfigurableEnvironment , org.springframework.boot.test.context.SpringApplication . getResourceLoader ( ) == null ? new DefaultResourceLoader ( java.lang.Class<? extends org.springframework.boot.test.context.SpringBootContextLoader> ( ) . java.lang.ClassLoader ( ) ) : org.springframework.boot.test.context.SpringApplication . getResourceLoader ( ) , org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceLocations ( ) ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.test.context.ConfigurableEnvironment , java.lang.String[] ( org.springframework.boot.test.context.MergedContextConfiguration ) ) ; org.springframework.boot.test.context.SpringApplication . setEnvironment ( org.springframework.boot.test.context.ConfigurableEnvironment ) ; java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> = java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ( org.springframework.boot.test.context.MergedContextConfiguration , org.springframework.boot.test.context.SpringApplication ) ; if ( org.springframework.boot.test.context.MergedContextConfiguration instanceof WebMergedContextConfiguration ) { org.springframework.boot.test.context.SpringApplication . setWebApplicationType ( WebApplicationType . SERVLET ) ; if ( ! boolean ( org.springframework.boot.test.context.MergedContextConfiguration ) ) { new org.springframework.boot.test.context.SpringBootContextLoader.WebConfigurer ( ) . void ( org.springframework.boot.test.context.MergedContextConfiguration , org.springframework.boot.test.context.SpringApplication , java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ) ; } } else if ( org.springframework.boot.test.context.MergedContextConfiguration instanceof ReactiveWebMergedContextConfiguration ) { org.springframework.boot.test.context.SpringApplication . setWebApplicationType ( WebApplicationType . REACTIVE ) ; if ( ! boolean ( org.springframework.boot.test.context.MergedContextConfiguration ) ) { new org.springframework.boot.test.context.SpringBootContextLoader.ReactiveWebConfigurer ( ) . void ( org.springframework.boot.test.context.SpringApplication ) ; } } else { org.springframework.boot.test.context.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; } org.springframework.boot.test.context.SpringApplication . setInitializers ( java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ) ; ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext = org.springframework.boot.test.context.SpringApplication . run ( ) ; return org.springframework.boot.test.context.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.test.context.SpringApplication org.springframework.boot.test.context.SpringApplication ( ) { return new SpringApplication ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new java.util.LinkedHashSet<java.lang.Object> <> ( ) ; java.util.Set<java.lang.Object> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.test.context.MergedContextConfiguration . getClasses ( ) ) ) ; java.util.Set<java.lang.Object> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.test.context.MergedContextConfiguration . getLocations ( ) ) ) ; Assert . state ( ! java.util.Set<java.lang.Object> . boolean ( ) , STRING + STRING + STRING + STRING + SpringVersion . getVersion ( ) + STRING ) ; return java.util.Set<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.test.context.ConfigurableEnvironment , java.lang.String [] java.lang.String[] ) { EnvironmentTestUtils . addEnvironment ( org.springframework.boot.test.context.ConfigurableEnvironment , STRING + StringUtils . arrayToCommaDelimitedString ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String [] java.lang.String[] ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { java.util.ArrayList<java.lang.String> < java.lang.String > java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; void ( java.util.ArrayList<java.lang.String> ) ; java.util.ArrayList<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.test.context.MergedContextConfiguration . getPropertySourceProperties ( ) ) ) ; if ( ! boolean ( org.springframework.boot.test.context.MergedContextConfiguration ) && ! boolean ( java.util.ArrayList<java.lang.String> ) ) { java.util.ArrayList<java.lang.String> . boolean ( STRING ) ; } return java.util.ArrayList<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.ArrayList<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.util.List<java.lang.String> . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { PropertySources org.springframework.boot.test.context.PropertySources = org.springframework.boot.test.context.PropertySources ( java.util.List<java.lang.String> ) ; RelaxedPropertyResolver org.springframework.boot.test.context.RelaxedPropertyResolver = new RelaxedPropertyResolver ( new PropertySourcesPropertyResolver ( org.springframework.boot.test.context.PropertySources ) , STRING ) ; return org.springframework.boot.test.context.RelaxedPropertyResolver . containsProperty ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.context.PropertySources org.springframework.boot.test.context.PropertySources ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = TestPropertySourceUtils . convertInlinedPropertiesToMap ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; MutablePropertySources org.springframework.boot.test.context.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.test.context.MutablePropertySources . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; return org.springframework.boot.test.context.MutablePropertySources ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration , SpringApplication org.springframework.boot.test.context.SpringApplication ) { java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> = new java.util.ArrayList<org.springframework.boot.test.context.ApplicationContextInitializer<?>> <> ( ) ; for ( ContextCustomizer org.springframework.boot.test.context.ContextCustomizer : org.springframework.boot.test.context.MergedContextConfiguration . getContextCustomizers ( ) ) { java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> . add ( new org.springframework.boot.test.context.SpringBootContextLoader.ContextCustomizerAdapter ( org.springframework.boot.test.context.ContextCustomizer , org.springframework.boot.test.context.MergedContextConfiguration ) ) ; } java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> . addAll ( org.springframework.boot.test.context.SpringApplication . getInitializers ( ) ) ; for ( java.lang.Class<? extends org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ? extends ApplicationContextInitializer < ? > > java.lang.Class<? extends org.springframework.boot.test.context.ApplicationContextInitializer<?>> : org.springframework.boot.test.context.MergedContextConfiguration . getContextInitializerClasses ( ) ) { java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> . add ( BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } if ( org.springframework.boot.test.context.MergedContextConfiguration . getParent ( ) != null ) { java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> . add ( new org.springframework.boot.test.context.SpringBootContextLoader.ParentContextApplicationContextInitializer ( org.springframework.boot.test.context.MergedContextConfiguration . getParentApplicationContext ( ) ) ) ; } return java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( AnnotatedElementUtils . isAnnotated ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) , java.lang.String ) ) { return true ; } } SpringBootTest org.springframework.boot.test.context.SpringBootTest = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.boot.test.context.MergedContextConfiguration . getTestClass ( ) , SpringBootTest .class ) ; if ( org.springframework.boot.test.context.SpringBootTest != null && org.springframework.boot.test.context.SpringBootTest . webEnvironment ( ) . isEmbedded ( ) ) { return true ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextConfigurationAttributes org.springframework.boot.test.context.ContextConfigurationAttributes ) { super. processContextConfiguration ( org.springframework.boot.test.context.ContextConfigurationAttributes ) ; if ( ! org.springframework.boot.test.context.ContextConfigurationAttributes . hasResources ( ) ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( org.springframework.boot.test.context.ContextConfigurationAttributes . getDeclaringClass ( ) ) ; org.springframework.boot.test.context.ContextConfigurationAttributes . setClasses ( java.lang.Class<?>[] ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotationConfigContextLoaderUtils . detectDefaultConfigurationClasses ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.context.ApplicationContext org.springframework.boot.test.context.ApplicationContext ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.UnsupportedOperationException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING , STRING } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> void void ( MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration , SpringApplication org.springframework.boot.test.context.SpringApplication , java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> ) { WebMergedContextConfiguration org.springframework.boot.test.context.WebMergedContextConfiguration = ( WebMergedContextConfiguration ) org.springframework.boot.test.context.MergedContextConfiguration ; void ( java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> , org.springframework.boot.test.context.WebMergedContextConfiguration ) ; org.springframework.boot.test.context.SpringApplication . setApplicationContextClass ( java.lang.Class<org.springframework.boot.test.context.GenericWebApplicationContext> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> < ApplicationContextInitializer < ? > > java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> , WebMergedContextConfiguration org.springframework.boot.test.context.WebMergedContextConfiguration ) { SpringBootMockServletContext org.springframework.boot.test.context.SpringBootMockServletContext = new SpringBootMockServletContext ( org.springframework.boot.test.context.WebMergedContextConfiguration . getResourceBasePath ( ) ) ; java.util.List<org.springframework.boot.test.context.ApplicationContextInitializer<?>> . add ( NUMBER , new ServletContextApplicationContextInitializer ( org.springframework.boot.test.context.SpringBootMockServletContext , true ) ) ; }  <METHOD_END>
<METHOD_START> void void ( SpringApplication org.springframework.boot.test.context.SpringApplication ) { org.springframework.boot.test.context.SpringApplication . setApplicationContextClass ( java.lang.Class<org.springframework.boot.test.context.GenericReactiveWebApplicationContext> ) ; }  <METHOD_END>
<METHOD_START> void ( ContextCustomizer org.springframework.boot.test.context.ContextCustomizer , MergedContextConfiguration org.springframework.boot.test.context.MergedContextConfiguration ) { this . org.springframework.boot.test.context.ContextCustomizer = org.springframework.boot.test.context.ContextCustomizer ; this . org.springframework.boot.test.context.MergedContextConfiguration = org.springframework.boot.test.context.MergedContextConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext ) { this . org.springframework.boot.test.context.ContextCustomizer . customizeContext ( org.springframework.boot.test.context.ConfigurableApplicationContext , this . org.springframework.boot.test.context.MergedContextConfiguration ) ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.test.context.ApplicationContext ) { this . org.springframework.boot.test.context.ApplicationContext = org.springframework.boot.test.context.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.test.context.ConfigurableApplicationContext ) { org.springframework.boot.test.context.ConfigurableApplicationContext . setParent ( this . org.springframework.boot.test.context.ApplicationContext ) ; }  <METHOD_END>
