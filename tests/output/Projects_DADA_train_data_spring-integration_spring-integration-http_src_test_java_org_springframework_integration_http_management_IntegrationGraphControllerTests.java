<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.http.management.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.integration.http.management.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.http.management.MockMvc . perform ( get ( STRING ) . header ( HttpHeaders . ORIGIN , STRING ) . accept ( MediaType . parseMediaType ( STRING ) ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( STRING ) ) . andExpect ( handler ( ) . handlerType ( IntegrationGraphController .class ) ) . andExpect ( handler ( ) . methodName ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( Matchers . containsInAnyOrder ( STRING , STRING , STRING ) ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . exists ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.http.management.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.http.management.IntegrationGraphControllerTests> ( ) ) ; HandlerMapping org.springframework.integration.http.management.HandlerMapping = org.springframework.integration.http.management.ConfigurableApplicationContext . getBean ( RequestMappingHandlerMapping .class . java.lang.String ( ) , HandlerMapping .class ) ; HandlerAdapter org.springframework.integration.http.management.HandlerAdapter = org.springframework.integration.http.management.ConfigurableApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; MockHttpServletRequest org.springframework.integration.http.management.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.management.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.management.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.integration.http.management.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; MockHttpServletResponse org.springframework.integration.http.management.MockHttpServletResponse = new MockHttpServletResponse ( ) ; HandlerExecutionChain org.springframework.integration.http.management.HandlerExecutionChain = org.springframework.integration.http.management.HandlerMapping . getHandler ( org.springframework.integration.http.management.MockHttpServletRequest ) ; assertNotNull ( org.springframework.integration.http.management.HandlerExecutionChain ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.management.HandlerExecutionChain . getHandler ( ) ; for ( HandlerInterceptor org.springframework.integration.http.management.HandlerInterceptor : org.springframework.integration.http.management.HandlerExecutionChain . getInterceptors ( ) ) { assertTrue ( org.springframework.integration.http.management.HandlerInterceptor . preHandle ( org.springframework.integration.http.management.MockHttpServletRequest , org.springframework.integration.http.management.MockHttpServletResponse , java.lang.Object ) ) ; } org.springframework.integration.http.management.HandlerAdapter . handle ( org.springframework.integration.http.management.MockHttpServletRequest , org.springframework.integration.http.management.MockHttpServletResponse , java.lang.Object ) ; assertEquals ( HttpStatus . OK . value ( ) , org.springframework.integration.http.management.MockHttpServletResponse . getStatus ( ) ) ; assertThat ( org.springframework.integration.http.management.MockHttpServletResponse . getContentAsString ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.http.management.MockHttpServletResponse . getContentAsString ( ) , not ( containsString ( STRING ) ) ) ; org.springframework.integration.http.management.ConfigurableApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DirectChannel ( ) ) ; org.springframework.integration.http.management.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.integration.http.management.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.integration.http.management.MockHttpServletRequest . setRequestURI ( STRING ) ; org.springframework.integration.http.management.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.integration.http.management.HandlerExecutionChain = org.springframework.integration.http.management.HandlerMapping . getHandler ( org.springframework.integration.http.management.MockHttpServletRequest ) ; assertNotNull ( org.springframework.integration.http.management.HandlerExecutionChain ) ; java.lang.Object = org.springframework.integration.http.management.HandlerExecutionChain . getHandler ( ) ; for ( HandlerInterceptor org.springframework.integration.http.management.HandlerInterceptor : org.springframework.integration.http.management.HandlerExecutionChain . getInterceptors ( ) ) { assertTrue ( org.springframework.integration.http.management.HandlerInterceptor . preHandle ( org.springframework.integration.http.management.MockHttpServletRequest , org.springframework.integration.http.management.MockHttpServletResponse , java.lang.Object ) ) ; } org.springframework.integration.http.management.HandlerAdapter . handle ( org.springframework.integration.http.management.MockHttpServletRequest , org.springframework.integration.http.management.MockHttpServletResponse , java.lang.Object ) ; assertEquals ( HttpStatus . OK . value ( ) , org.springframework.integration.http.management.MockHttpServletResponse . getStatus ( ) ) ; assertThat ( org.springframework.integration.http.management.MockHttpServletResponse . getContentAsString ( ) , containsString ( STRING ) ) ; org.springframework.integration.http.management.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
