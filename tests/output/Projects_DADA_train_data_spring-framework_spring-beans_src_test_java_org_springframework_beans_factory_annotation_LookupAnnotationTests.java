<METHOD_START> @ Before public void void ( ) { org.springframework.beans.factory.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; AutowiredAnnotationBeanPostProcessor org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.beans.factory.annotation.DefaultListableBeanFactory ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean .class ) ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) ) ; RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.beans.factory.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( ) ; assertEquals ( TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; TestBean org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.annotation.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.annotation.TestBean . getName ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; TestBean org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( STRING ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.annotation.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.annotation.TestBean . getName ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; TestBean org.springframework.beans.factory.annotation.TestBean = org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( STRING , NUMBER ) ; assertEquals ( TestBean .class , org.springframework.beans.factory.annotation.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.annotation.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.annotation.TestBean . getAge ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; try { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( STRING , NUMBER , NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.AbstractMethodError java.lang.AbstractMethodError ) {		} assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean = org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ; assertNotNull ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean . org.springframework.beans.factory.annotation.TestBean ( ) ; assertEquals ( TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertSame ( org.springframework.beans.factory.annotation.LookupAnnotationTests.AbstractBean , org.springframework.beans.factory.annotation.DefaultListableBeanFactory . getBean ( org.springframework.beans.factory.annotation.LookupAnnotationTests.BeanConsumer .class ) . abstractBean ) ; }  <METHOD_END>
<METHOD_START> @ Lookup public abstract org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( )  <METHOD_END>
<METHOD_START> @ Lookup public abstract org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Lookup public abstract org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Lookup public abstract org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( java.lang.String java.lang.String , int int );  <METHOD_END>
<METHOD_START> public abstract org.springframework.beans.factory.annotation.TestBean org.springframework.beans.factory.annotation.TestBean ( java.lang.String java.lang.String , int int , int int );  <METHOD_END>
