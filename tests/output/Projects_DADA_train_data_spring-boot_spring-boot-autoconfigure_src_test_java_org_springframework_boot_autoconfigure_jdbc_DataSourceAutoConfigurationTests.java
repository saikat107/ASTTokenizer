<METHOD_START> @ Before public void void ( ) { EmbeddedDatabaseConnection . override = null ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING + new java.util.Random ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { EmbeddedDatabaseConnection . override = null ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getUrl ( ) ) . isNotNull ( ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getDriverClassName ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING ) ; EmbeddedDatabaseConnection . override = EmbeddedDatabaseConnection . NONE ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING ) ; EmbeddedDatabaseConnection . override = EmbeddedDatabaseConnection . NONE ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = T ( org . org.apache . org.apache . org.apache . org.apache . org.apache .class ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . isTestOnBorrow ( ) ) . isTrue ( ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getValidationQuery ( ) ) . isEqualTo ( DatabaseDriver . HSQLDB . getValidationQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource = T ( HikariDataSource .class , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getJdbcUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HikariDataSource org.springframework.boot.autoconfigure.jdbc.HikariDataSource = T ( HikariDataSource .class , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.HikariDataSource . getConnectionTestQuery ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BasicDataSource org.springframework.boot.autoconfigure.jdbc.BasicDataSource = T ( BasicDataSource .class , STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.BasicDataSource . getUrl ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org . org.apache . org.apache . org.apache . org.apache org.apache.commons.dbcp2.BasicDataSource = T ( org . org.apache . org.apache . org.apache . org.apache .class , STRING , STRING ) ; assertThat ( org.apache.commons.dbcp2.BasicDataSource . getTestOnBorrow ( ) ) . isEqualTo ( true ) ; assertThat ( org.apache.commons.dbcp2.BasicDataSource . getValidationQuery ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = ( org . org.apache . org.apache . org.apache . org.apache . org.apache ) javax.sql.DataSource ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getDriverClassName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getUsername ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING , STRING + SimpleDriverDataSource .class . java.lang.String ( ) ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . setClassLoader ( new org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests.HidePackagesClassLoader ( STRING , STRING , STRING , STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING , STRING + SimpleDriverDataSource .class . java.lang.String ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeansOfType ( javax.sql.DataSource .class ) ) . hasSize ( NUMBER ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; assertThat ( javax.sql.DataSource . java.lang.Class<? extends javax.sql.DataSource> ( ) ) . isEqualTo ( SimpleDriverDataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING + STRING + STRING , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; org . org.apache . org.apache . org.apache . org.apache . org.apache org.apache.tomcat.jdbc.pool.DataSource = ( org . org.apache . org.apache . org.apache . org.apache . org.apache ) javax.sql.DataSource ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getDriverClassName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.apache.tomcat.jdbc.pool.DataSource . getUsername ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests.TestDataSourceConfiguration .class , DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource ) . isInstanceOf ( BasicDataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends javax.sql.DataSource > T T ( java.lang.Class<T> < T > java.lang.Class<T> , final java.lang.String ... java.lang.String[] ) { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . setClassLoader ( new org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests.HidePackagesClassLoader ( java.lang.String[] ) ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource ) . isInstanceOf ( java.lang.Class<T> ) ; return ( T ) javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { this . org.springframework.boot.autoconfigure.jdbc.BasicDataSource = new BasicDataSource ( ) ; this . org.springframework.boot.autoconfigure.jdbc.BasicDataSource . setDriverClassName ( STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.BasicDataSource . setUrl ( STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.BasicDataSource . setUsername ( STRING ) ; return this . org.springframework.boot.autoconfigure.jdbc.BasicDataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.util.Properties java.util.Properties ) throws java.sql.SQLException { return mock ( java.sql.Connection .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws java.sql.SQLException { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.DriverPropertyInfo [] java.sql.DriverPropertyInfo[] ( java.lang.String java.lang.String , java.util.Properties java.util.Properties )				throws java.sql.SQLException { return new java.sql.DriverPropertyInfo [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Logger java.util.logging.Logger ( ) java.sql.SQLFeatureNotSupportedException { return mock ( java.util.logging.Logger .class ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.String ... java.lang.String[] ) { super( new java.net.URL [ NUMBER ] , org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfigurationTests .class . java.lang.ClassLoader ( ) ); this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )				throws java.lang.ClassNotFoundException { for ( java.lang.String java.lang.String : this . java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.ClassNotFoundException ( ) ; } } return super. java.lang.Class<?> ( java.lang.String , boolean ) ; }  <METHOD_END>
