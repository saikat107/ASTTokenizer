<METHOD_START> @ Before public void void ( ) { org.springframework.web.filter.HttpPutFormContentFilter = new HttpPutFormContentFilter ( ) ; org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.filter.MockFilterChain = new MockFilterChain ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; for ( HttpMethod org.springframework.web.filter.HttpMethod : HttpMethod . values ( ) ) { org.springframework.web.filter.MockHttpServletRequest . setMethod ( org.springframework.web.filter.HttpMethod . name ( ) ) ; org.springframework.web.filter.MockFilterChain = new MockFilterChain ( ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; if ( org.springframework.web.filter.HttpMethod . equals ( HttpMethod . PUT ) || org.springframework.web.filter.HttpMethod . equals ( HttpMethod . PATCH ) ) { assertNotSame ( STRING + org.springframework.web.filter.HttpMethod , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; } else { assertSame ( STRING + org.springframework.web.filter.HttpMethod , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.filter.MockHttpServletRequest . setContentType ( java.lang.String ) ; org.springframework.web.filter.MockFilterChain = new MockFilterChain ( ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; assertSame ( STRING + java.lang.String , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.filter.MockFilterChain = new MockFilterChain ( ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; assertSame ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; assertEquals ( STRING , org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertNull ( org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameter ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.ArrayList ( org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterNames ( ) ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.lang.String [] java.lang.String[] = org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterValues ( STRING ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING , STRING } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.lang.String [] java.lang.String[] = org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterValues ( STRING ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.lang.String [] java.lang.String[] = org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterValues ( STRING ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.lang.String [] java.lang.String[] = org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterValues ( STRING ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertNull ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . setContent ( STRING . byte[] ( STRING ) ) ; org.springframework.web.filter.HttpPutFormContentFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.MockFilterChain ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.web.filter.MockFilterChain . getRequest ( ) . getParameterMap ( ) ; assertNotSame ( STRING , org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockFilterChain . getRequest ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
