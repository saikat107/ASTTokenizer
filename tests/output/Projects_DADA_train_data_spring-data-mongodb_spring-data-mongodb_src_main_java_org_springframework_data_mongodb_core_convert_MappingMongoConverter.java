<METHOD_START> public void ( DbRefResolver org.springframework.data.mongodb.core.convert.DbRefResolver , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { super( new DefaultConversionService ( ) ); Assert . notNull ( org.springframework.data.mongodb.core.convert.DbRefResolver , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , STRING ) ; this . org.springframework.data.mongodb.core.convert.DbRefResolver = org.springframework.data.mongodb.core.convert.DbRefResolver ; this . org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; this . org.springframework.data.mongodb.core.convert.MongoTypeMapper = new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) ; this . org.springframework.data.mongodb.core.convert.QueryMapper = new QueryMapper ( this ) ; this . org.springframework.data.mongodb.core.convert.SpELContext = new SpELContext ( DocumentPropertyAccessor . INSTANCE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void ( MongoDbFactory org.springframework.data.mongodb.core.convert.MongoDbFactory , MappingContext < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { this( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ); }  <METHOD_END>
<METHOD_START> public void void ( MongoTypeMapper org.springframework.data.mongodb.core.convert.MongoTypeMapper ) { this . org.springframework.data.mongodb.core.convert.MongoTypeMapper = org.springframework.data.mongodb.core.convert.MongoTypeMapper == null ? new DefaultMongoTypeMapper ( DefaultMongoTypeMapper . DEFAULT_TYPE_KEY , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) : org.springframework.data.mongodb.core.convert.MongoTypeMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.MongoTypeMapper org.springframework.data.mongodb.core.convert.MongoTypeMapper ( ) { return this . org.springframework.data.mongodb.core.convert.MongoTypeMapper ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < ? extends MongoPersistentEntity < ? > , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.MappingContext<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( ) { return org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ; }  <METHOD_END>
<METHOD_START> public void void ( ApplicationContext org.springframework.data.mongodb.core.convert.ApplicationContext ) throws org.springframework.data.mongodb.core.convert.BeansException { this . org.springframework.data.mongodb.core.convert.ApplicationContext = org.springframework.data.mongodb.core.convert.ApplicationContext ; this . org.springframework.data.mongodb.core.convert.SpELContext = new SpELContext ( this . org.springframework.data.mongodb.core.convert.SpELContext , org.springframework.data.mongodb.core.convert.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public < S extends java.lang.Object > S S ( java.lang.Class<S> < S > java.lang.Class<S> , final Bson org.springframework.data.mongodb.core.convert.Bson ) { return java.lang.Object ( ClassTypeInformation . from ( java.lang.Class<S> ) , org.springframework.data.mongodb.core.convert.Bson ) ; }  <METHOD_END>
<METHOD_START> protected < S extends java.lang.Object > S S ( TypeInformation < S > org.springframework.data.mongodb.core.convert.TypeInformation<S> , Bson org.springframework.data.mongodb.core.convert.Bson ) { return java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<S> , org.springframework.data.mongodb.core.convert.Bson , ObjectPath . ROOT ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < S extends java.lang.Object > S S ( TypeInformation < S > org.springframework.data.mongodb.core.convert.TypeInformation<S> , Bson org.springframework.data.mongodb.core.convert.Bson , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { if ( null == org.springframework.data.mongodb.core.convert.Bson ) { return null ; } TypeInformation < ? extends S > org.springframework.data.mongodb.core.convert.TypeInformation<? extends S> = org.springframework.data.mongodb.core.convert.MongoTypeMapper . readType ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.TypeInformation<S> ) ; java.lang.Class<? extends S> < ? extends S > java.lang.Class<? extends S> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ; if ( conversions . hasCustomReadTarget ( org.springframework.data.mongodb.core.convert.Bson . getClass ( ) , java.lang.Class<> ) ) { return conversionService . convert ( org.springframework.data.mongodb.core.convert.Bson , java.lang.Class<> ) ; } if ( DBObject .class . boolean ( java.lang.Class<> ) ) { return ( S ) org.springframework.data.mongodb.core.convert.Bson ; } if ( Document .class . boolean ( java.lang.Class<> ) ) { return ( S ) org.springframework.data.mongodb.core.convert.Bson ; } if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . isCollectionLike ( ) && org.springframework.data.mongodb.core.convert.Bson instanceof java.util.List ) { return ( S ) java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( java.util.List<?> < ? > ) org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.ObjectPath ) ; } if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . isMap ( ) ) { return ( S ) java.util.Map<java.lang.Object,java.lang.Object> ( org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.ObjectPath ) ; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof java.util.Collection ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.mongodb.core.convert.Bson , BasicDBList .class , org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . equals ( ClassTypeInformation . OBJECT ) ) { return ( S ) org.springframework.data.mongodb.core.convert.Bson ; } Document org.springframework.data.mongodb.core.convert.Document = org.springframework.data.mongodb.core.convert.Bson instanceof BasicDBObject ? new Document ( ( BasicDBObject ) org.springframework.data.mongodb.core.convert.Bson ) : ( Document ) org.springframework.data.mongodb.core.convert.Bson ; return java.lang.Object ( ( MongoPersistentEntity < S > ) org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.TypeInformation<> ) , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.ObjectPath ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> , Bson org.springframework.data.mongodb.core.convert.Bson , DefaultSpELExpressionEvaluator org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { org.springframework.data.mongodb.core.convert.MappingMongoConverter.MongoDbPropertyValueProvider org.springframework.data.mongodb.core.convert.MappingMongoConverter.MongoDbPropertyValueProvider = new org.springframework.data.mongodb.core.convert.MappingMongoConverter.MongoDbPropertyValueProvider ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ObjectPath ) ; PersistentEntityParameterValueProvider < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.PersistentEntityParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = new PersistentEntityParameterValueProvider < MongoPersistentProperty > ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> , org.springframework.data.mongodb.core.convert.MappingMongoConverter.MongoDbPropertyValueProvider , org.springframework.data.mongodb.core.convert.ObjectPath . getCurrentObject ( ) ) ; return new org.springframework.data.mongodb.core.convert.MappingMongoConverter.ConverterAwareSpELExpressionParameterValueProvider ( org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , conversionService , org.springframework.data.mongodb.core.convert.PersistentEntityParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , org.springframework.data.mongodb.core.convert.ObjectPath ) ; }  <METHOD_END>
<METHOD_START> private < S extends java.lang.Object > S S ( final MongoPersistentEntity < S > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> , final Document org.springframework.data.mongodb.core.convert.Document , final ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { final DefaultSpELExpressionEvaluator org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator = new DefaultSpELExpressionEvaluator ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.SpELContext ) ; ParameterValueProvider < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ObjectPath ) ; EntityInstantiator org.springframework.data.mongodb.core.convert.EntityInstantiator = instantiators . getInstantiatorFor ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> ) ; S S = org.springframework.data.mongodb.core.convert.EntityInstantiator . createInstance ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> , org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) ; final PersistentPropertyAccessor org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor = new ConvertingPropertyAccessor ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . getPropertyAccessor ( S ) , conversionService ) ; final java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . getIdProperty ( ) ; final S S = S ; DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Document ) ; java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> = java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . filter ( it -> documentAccessor . hasValue ( it ) ) . map ( it -> { Optional < Object > value = getValueInternal ( it , bson , evaluator , path ) ; accessor . setProperty ( it , value ) ; return value ; } ) ; final ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath = org.springframework.data.mongodb.core.convert.ObjectPath . push ( S , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> , java.util.Optional<java.lang.Object> . boolean ( ) ? java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . map ( it -> bson . get ( it . getFieldName ( ) ) ) . orElse ( null ) : null ) ; org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . doWithProperties ( new PropertyHandler < MongoPersistentProperty > ( ) { public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> != null && java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . equals ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . isConstructorArgument ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) || ! org.springframework.data.mongodb.core.convert.DocumentAccessor . hasValue ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.util.Optional<java.lang.Object> ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } } ) ; org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . doWithAssociations ( new AssociationHandler < MongoPersistentProperty > ( ) { public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { final MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.DocumentAccessor . get ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; if ( java.lang.Object == null || org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . isConstructorArgument ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } DBRef org.springframework.data.mongodb.core.convert.DBRef = java.lang.Object instanceof DBRef ? ( DBRef ) java.lang.Object : null ; DbRefProxyHandler org.springframework.data.mongodb.core.convert.DbRefProxyHandler = new DefaultDbRefProxyHandler ( org.springframework.data.mongodb.core.convert.SpELContext , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , org.springframework.data.mongodb.core.convert.MappingMongoConverter .this ) ; DbRefResolverCallback org.springframework.data.mongodb.core.convert.DbRefResolverCallback = new DefaultDbRefResolverCallback ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.ObjectPath , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.MappingMongoConverter .this ) ; org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DbRefResolver . resolveDbRef ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DbRefResolverCallback , org.springframework.data.mongodb.core.convert.DbRefProxyHandler ) ) ; } } ) ; return S ; }  <METHOD_END>
<METHOD_START> public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> != null && java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . equals ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . isConstructorArgument ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) || ! org.springframework.data.mongodb.core.convert.DocumentAccessor . hasValue ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.util.Optional<java.lang.Object> ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { final MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.DocumentAccessor . get ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; if ( java.lang.Object == null || org.springframework.data.mongodb.core.convert.MongoPersistentEntity<S> . isConstructorArgument ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } DBRef org.springframework.data.mongodb.core.convert.DBRef = java.lang.Object instanceof DBRef ? ( DBRef ) java.lang.Object : null ; DbRefProxyHandler org.springframework.data.mongodb.core.convert.DbRefProxyHandler = new DefaultDbRefProxyHandler ( org.springframework.data.mongodb.core.convert.SpELContext , org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , org.springframework.data.mongodb.core.convert.MappingMongoConverter .this ) ; DbRefResolverCallback org.springframework.data.mongodb.core.convert.DbRefResolverCallback = new DefaultDbRefResolverCallback ( org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.ObjectPath , org.springframework.data.mongodb.core.convert.DefaultSpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.MappingMongoConverter .this ) ; org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . setProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DbRefResolver . resolveDbRef ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.DbRefResolverCallback , org.springframework.data.mongodb.core.convert.DbRefProxyHandler ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.DBRef org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object java.lang.Object , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { org . springframework . data . mongodb . core . org.springframework.data.mongodb.core.mapping . org.springframework.data.mongodb.core.mapping org.springframework.data.mongodb.core.mapping.DBRef = null ; if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty != null ) { org.springframework.data.mongodb.core.mapping.DBRef = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getDBRef ( ) ; Assert . isTrue ( org.springframework.data.mongodb.core.mapping.DBRef != null , STRING ) ; } if ( java.lang.Object instanceof LazyLoadingProxy ) { return ( ( LazyLoadingProxy ) java.lang.Object ) . toDBRef ( ) ; } return org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> public void void ( final java.lang.Object java.lang.Object , final Bson org.springframework.data.mongodb.core.convert.Bson ) { if ( null == java.lang.Object ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeInformation < ? extends java.lang.Object > org.springframework.data.mongodb.core.convert.TypeInformation<? extends java.lang.Object> = ClassTypeInformation . from ( java.lang.Class<> ) ; java.lang.Object java.lang.Object = java.lang.Object instanceof LazyLoadingProxy ? ( ( LazyLoadingProxy ) java.lang.Object ) . getTarget ( ) : java.lang.Object ; void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Bson , java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.core.convert.TypeInformation<> ) ) ; if ( java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.Bson ) . containsKey ( STRING ) && java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.Bson ) . get ( STRING ) == null ) { void ( org.springframework.data.mongodb.core.convert.Bson , STRING ) ; } boolean boolean = conversions . getCustomWriteTarget ( java.lang.Class<> , Document .class ) != null ; if ( ! boolean && ! ( org.springframework.data.mongodb.core.convert.Bson instanceof java.util.Collection ) ) { org.springframework.data.mongodb.core.convert.MongoTypeMapper . writeType ( org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.Bson ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( final java.lang.Object java.lang.Object , final Bson org.springframework.data.mongodb.core.convert.Bson , final java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> ) { if ( null == java.lang.Object ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Class<> , Document .class ) ; if ( java.lang.Class<> != null ) { Document org.springframework.data.mongodb.core.convert.Document = conversionService . convert ( java.lang.Object , Document .class ) ; void ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.Document ) ; return; } if ( java.util.Map .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.mongodb.core.convert.Bson ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object , org.springframework.data.mongodb.core.convert.Bson , ClassTypeInformation . MAP ) ; return; } if ( java.util.Collection .class . boolean ( java.lang.Class<> ) ) { org.springframework.data.mongodb.core.convert.BasicDBList ( ( java.util.Collection<?> < ? > ) java.lang.Object , java.util.Optional . java.util.Optional ( ClassTypeInformation . LIST ) , ( BasicDBList ) org.springframework.data.mongodb.core.convert.Bson ) ; return; } MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Class<> ) ; void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; void ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , java.lang.Object , org.springframework.data.mongodb.core.convert.Bson ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , final Bson org.springframework.data.mongodb.core.convert.Bson , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> ) { if ( java.lang.Object == null ) { return; } if ( null == org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) { throw new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; } final PersistentPropertyAccessor org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getPropertyAccessor ( java.lang.Object ) ; DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Bson ) ; java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) ; java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . ifPresent ( prop -> dbObjectAccessor . computeIfAbsent ( prop , ( ) idMapper . convertId ( accessor . getProperty ( prop ) ) ) ) ; org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . doWithProperties ( new PropertyHandler < MongoPersistentProperty > ( ) { public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . map ( it -> it . equals ( prop ) ) . orElse ( false ) || ! org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isWritable ( ) ) { return; } org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) . ifPresent ( it -> { if ( ! conversions . isSimpleType ( it . getClass ( ) ) ) { writePropertyInternal ( it , bson , prop ) ; } else { writeSimpleInternal ( it , bson , prop ) ; } } ) ; } } ) ; org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . doWithAssociations ( new AssociationHandler < MongoPersistentProperty > ( ) { public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) . ifPresent ( it -> writePropertyInternal ( it , bson , inverseProp ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . map ( it -> it . equals ( prop ) ) . orElse ( false ) || ! org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isWritable ( ) ) { return; } org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) . ifPresent ( it -> { if ( ! conversions . isSimpleType ( it . getClass ( ) ) ) { writePropertyInternal ( it , bson , prop ) ; } else { writeSimpleInternal ( it , bson , prop ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty = org.springframework.data.mongodb.core.convert.Association<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getInverse ( ) ; org.springframework.data.mongodb.core.convert.PersistentPropertyAccessor . getProperty ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) . ifPresent ( it -> writePropertyInternal ( it , bson , inverseProp ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) protected void void ( java.lang.Object java.lang.Object , Bson org.springframework.data.mongodb.core.convert.Bson , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( java.lang.Object == null ) { return; } DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Bson ) ; TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = ClassTypeInformation . from ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getTypeInformation ( ) ; if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . isCollectionLike ( ) ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.util.Collection<?> ( java.lang.Object ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.util.List<java.lang.Object> ) ; return; } if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . isMap ( ) ) { Bson org.springframework.data.mongodb.core.convert.Bson = org.springframework.data.mongodb.core.convert.Bson ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.Bson ) ; return; } if ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isDbReference ( ) ) { DBRef org.springframework.data.mongodb.core.convert.DBRef = null ; if ( java.lang.Object instanceof LazyLoadingProxy ) { org.springframework.data.mongodb.core.convert.DBRef = ( ( LazyLoadingProxy ) java.lang.Object ) . toDBRef ( ) ; } org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.DBRef != null ? org.springframework.data.mongodb.core.convert.DBRef : org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; if ( null != org.springframework.data.mongodb.core.convert.DBRef ) { org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.DBRef ) ; return; } } if ( java.lang.Object instanceof LazyLoadingProxy ) { java.lang.Object = ( ( LazyLoadingProxy ) java.lang.Object ) . getTarget ( ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , null ) ; if ( java.lang.Class<> != null ) { org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , conversionService . convert ( java.lang.Object , java.lang.Class<> ) ) ; return; } java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.DocumentAccessor . get ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; Document org.springframework.data.mongodb.core.convert.Document = java.lang.Object instanceof Document ? ( Document ) java.lang.Object : new Document ( ) ; MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = boolean ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getType ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) : org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.TypeInformation<> ) ; void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> ) ; void ( java.util.Optional . java.util.Optional ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getRawType ( ) ) ) , java.lang.Object , org.springframework.data.mongodb.core.convert.Document ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , org.springframework.data.mongodb.core.convert.Document ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Class<> . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<?> < ? > ) java.lang.Object ; } return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ? CollectionUtils . arrayToList ( java.lang.Object ) : java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.util.Collection<?> < ? > java.util.Collection<?> , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { if ( ! org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isDbReference ( ) ) { return org.springframework.data.mongodb.core.convert.BasicDBList ( java.util.Collection<> , java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getTypeInformation ( ) ) , new BasicDBList ( ) ) ; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object == null ) { continue; } DBRef org.springframework.data.mongodb.core.convert.DBRef = org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.DBRef ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Bson org.springframework.data.mongodb.core.convert.Bson ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { Assert . notNull ( java.util.Map<java.lang.Object,java.lang.Object> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; if ( ! org.springframework.data.mongodb.core.convert.MongoPersistentProperty . isDbReference ( ) ) { return org.springframework.data.mongodb.core.convert.Bson ( java.util.Map<java.lang.Object,java.lang.Object> , new Document ( ) , org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getTypeInformation ( ) ) ; } Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Object . java.lang.String ( ) ) ; org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , java.lang.Object != null ? org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object , org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) : null ) ; } else { throw new MappingException ( STRING ) ; } } return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.convert.BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList ( java.util.Collection<?> < ? > java.util.Collection<?> , java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , BasicDBList org.springframework.data.mongodb.core.convert.BasicDBList ) { java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> = java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . flatMap ( it -> it . getComponentType ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object == null ? null : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Class<> == null || conversions . isSimpleType ( java.lang.Class<> ) ) { org.springframework.data.mongodb.core.convert.BasicDBList . add ( java.lang.Object ( java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.util.Collection || java.lang.Class<> . boolean ( ) ) { org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.springframework.data.mongodb.core.convert.BasicDBList ( java.util.Collection<?> ( java.lang.Object ) , java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , new BasicDBList ( ) ) ) ; } else { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Document , java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> ) ; org.springframework.data.mongodb.core.convert.BasicDBList . add ( org.springframework.data.mongodb.core.convert.Document ) ; } } return org.springframework.data.mongodb.core.convert.BasicDBList ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.Bson org.springframework.data.mongodb.core.convert.Bson ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> , Bson org.springframework.data.mongodb.core.convert.Bson , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ; if ( conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; if ( java.lang.Object == null || conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Bson , java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { void ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , org.springframework.data.mongodb.core.convert.BasicDBList ( java.util.Collection<?> ( java.lang.Object ) , org.springframework.data.mongodb.core.convert.TypeInformation<> . getMapValueType ( ) , new BasicDBList ( ) ) ) ; } else { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> = org.springframework.data.mongodb.core.convert.TypeInformation<> . isMap ( ) ? org.springframework.data.mongodb.core.convert.TypeInformation<> . getMapValueType ( ) : java.util.Optional . java.util.Optional ( ClassTypeInformation . OBJECT ) ; void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Document , java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> ) ; void ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , org.springframework.data.mongodb.core.convert.Document ) ; } } else { throw new MappingException ( STRING ) ; } } return org.springframework.data.mongodb.core.convert.Bson ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.Object ) ; return java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! java.lang.String . boolean ( STRING ) ) { return java.lang.String ; } if ( java.lang.String == null ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String ) ) ; } return java.lang.String . java.lang.String ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof java.lang.String ) { return ( java.lang.String ) java.lang.Object ; } return conversions . hasCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ? ( java.lang.String ) java.lang.Object ( java.lang.Object ) : java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String == null ? java.lang.String : java.lang.String . java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> , java.lang.Object java.lang.Object , Bson org.springframework.data.mongodb.core.convert.Bson ) { java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> = java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . map ( it -> it . getActualType ( ) ) . map ( it -> it . getType ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Optional<java.lang.Class<?>> . java.lang.Class<?> ( java.lang.Object .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; boolean boolean = ! java.lang.Class<> . boolean ( java.lang.Class<> ) ; if ( boolean ) { org.springframework.data.mongodb.core.convert.MongoTypeMapper . writeType ( java.lang.Class<> , org.springframework.data.mongodb.core.convert.Bson ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , Bson org.springframework.data.mongodb.core.convert.Bson , java.lang.String java.lang.String ) { void ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , java.lang.Object ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , Bson org.springframework.data.mongodb.core.convert.Bson , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { DocumentAccessor org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Bson ) ; org.springframework.data.mongodb.core.convert.DocumentAccessor . put ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.lang.Object ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , null ) ; if ( java.lang.Class<> != null ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } else if ( ObjectUtils . isArray ( java.lang.Object ) ) { if ( java.lang.Object instanceof byte [] ) { return java.lang.Object ; } return java.util.Collection<?> ( java.lang.Object ) ; } else { return java.lang.Enum .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? ( ( java.lang.Enum<?> < ? > ) java.lang.Object ) . java.lang.String ( ) : java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Object == null || java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.lang.Object ; } if ( conversions . hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } if ( java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { return java.lang.Enum . java.lang.Enum ( ( java.lang.Class<java.lang.Enum> < java.lang.Enum > ) java.lang.Class<> , java.lang.Object . java.lang.String ( ) ) ; } return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.convert.DBRef org.springframework.data.mongodb.core.convert.DBRef ( java.lang.Object java.lang.Object , MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof DBRef ) { return ( DBRef ) java.lang.Object ; } java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> = org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getPersistentEntity ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.util.Optional<? extends org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?>> = java.util.Optional<> . boolean ( ) ? java.util.Optional<> : org.springframework.data.mongodb.core.convert.MappingContext<,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; if ( null == java.util.Optional<> ) { throw new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } MongoPersistentEntity < ? > org.springframework.data.mongodb.core.convert.MongoPersistentEntity<?> = java.util.Optional<> . orElseThrow ( ( ) new MappingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> < MongoPersistentProperty > java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> = org.springframework.data.mongodb.core.convert.MongoPersistentEntity<> . getIdProperty ( ) ; return java.util.Optional<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . map ( it -> { Object id = target . getClass ( ) . equals ( it . getType ( ) ) ? target : entity . getPropertyAccessor ( target ) . getProperty ( it ) ; if ( null == id ) { throw new MappingException ( STRING ) ; } return dbRefResolver . createDbRef ( property == null ? null : property . getDBRef ( ) , entity , idMapper . convertId ( id instanceof Optional ? ( Optional ) id : Optional . ofNullable ( id ) ) . orElse ( null ) ) ; } ) . orElseThrow ( ( ) new MappingException ( STRING + entity . getType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , Bson org.springframework.data.mongodb.core.convert.Bson , SpELExpressionEvaluator org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { return new org.springframework.data.mongodb.core.convert.MappingMongoConverter.MongoDbPropertyValueProvider ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ObjectPath ) . java.util.Optional ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , java.util.List java.util.List , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.TypeInformation<> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.ObjectPath , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ; TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getComponentType ( ) . orElse ( ClassTypeInformation . OBJECT ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ; java.lang.Class<?> = java.util.Collection .class . boolean ( java.lang.Class<> ) ? java.lang.Class<> : java.util.List .class ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) . isArray ( ) ? new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) : CollectionFactory . createCollection ( java.lang.Class<> , java.lang.Class<> , java.util.List . int ( ) ) ; if ( java.util.List . boolean ( ) ) { return java.lang.Object ( java.util.Collection<java.lang.Object> , java.lang.Class<> ) ; } if ( ! DBRef .class . boolean ( java.lang.Class<> ) && boolean ( java.util.List ) ) { return java.util.List ( ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> < DBRef > ) ( java.util.List ) ( java.util.List ) , org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<> ) ; } for ( java.lang.Object java.lang.Object : java.util.List ) { if ( java.lang.Object instanceof DBRef ) { java.util.Collection<java.lang.Object> . boolean ( DBRef .class . boolean ( java.lang.Class<> ) ? java.lang.Object : java.lang.Object ( ( DBRef ) java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<> ) ) ; } else if ( java.lang.Object instanceof Document ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else if ( java.lang.Object instanceof BasicDBObject ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( BasicDBObject ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else { if ( java.lang.Object instanceof java.util.Collection ) { if ( ! java.lang.Class<> . boolean ( ) && ! ClassUtils . isAssignable ( java.lang.Iterable .class , java.lang.Class<> ) ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.Object , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } } if ( java.lang.Object instanceof java.util.List ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( ClassTypeInformation . OBJECT , ( java.util.List ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , java.lang.Class<> ) ) ; } } } return java.lang.Object ( java.util.Collection<java.lang.Object> , org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , Bson org.springframework.data.mongodb.core.convert.Bson , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Bson , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.ObjectPath , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.MongoTypeMapper . readType ( org.springframework.data.mongodb.core.convert.Bson , org.springframework.data.mongodb.core.convert.TypeInformation<> ) . getType ( ) ; java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getMapValueType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getComponentType ( ) . map ( it -> it . getType ( ) ) . orElse ( null ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getMapValueType ( ) . map ( it -> it . getType ( ) ) . orElse ( null ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.data.mongodb.core.convert.Bson ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = CollectionFactory . createMap ( java.lang.Class<> , java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) . int ( ) ) ; if ( ! DBRef .class . boolean ( java.lang.Class<> ) && boolean ( java.util.Map<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) ) ) { void ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . orElse ( null ) , java.lang.Class<> , java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.Object,java.lang.Object> ) ; return java.util.Map<java.lang.Object,java.lang.Object> ; } for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( org.springframework.data.mongodb.core.convert.MongoTypeMapper . isTypeKey ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ) { continue; } java.lang.Object java.lang.Object = java.lang.String ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; if ( java.lang.Class<> != null ) { java.lang.Object = conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . orElse ( ClassTypeInformation . OBJECT ) ; if ( java.lang.Object instanceof Document ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else if ( java.lang.Object instanceof BasicDBObject ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( BasicDBObject ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else if ( java.lang.Object instanceof DBRef ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , DBRef .class . boolean ( java.lang.Class<> ) ? java.lang.Object : java.lang.Object ( ( DBRef ) java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> , ObjectPath . ROOT , java.lang.Class<> ) ) ; } else if ( java.lang.Object instanceof java.util.List ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( java.util.Optional<org.springframework.data.mongodb.core.convert.TypeInformation<?>> . orElse ( ClassTypeInformation . LIST ) , ( java.util.List ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ) ; } else { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ( java.lang.Object , java.lang.Class<> ) ) ; } } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Bson org.springframework.data.mongodb.core.convert.Bson ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { return ( Document ) org.springframework.data.mongodb.core.convert.Bson ; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { return ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . toMap ( ) ; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.convert.Bson . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Bson org.springframework.data.mongodb.core.convert.Bson , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { ( ( Document ) org.springframework.data.mongodb.core.convert.Bson ) . put ( java.lang.String , java.lang.Object ) ; return; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . put ( java.lang.String , java.lang.Object ) ; return; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.convert.Bson . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( Bson org.springframework.data.mongodb.core.convert.Bson , java.util.Map java.util.Map ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { ( ( Document ) org.springframework.data.mongodb.core.convert.Bson ) . putAll ( java.util.Map ) ; return; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . putAll ( java.util.Map ) ; return; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.convert.Bson . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Bson org.springframework.data.mongodb.core.convert.Bson , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { ( ( Document ) org.springframework.data.mongodb.core.convert.Bson ) . remove ( java.lang.String ) ; return; } if ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { ( ( DBObject ) org.springframework.data.mongodb.core.convert.Bson ) . removeField ( java.lang.String ) ; return; } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.convert.Bson . getClass ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ) { if ( java.lang.Object == null ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = conversions . getCustomWriteTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; if ( java.lang.Class<> != null ) { return conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } if ( conversions . isSimpleType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return java.lang.Object ( java.lang.Object ) ; } TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> ; if ( java.lang.Object instanceof java.util.List ) { return java.util.List<java.lang.Object> ( ( java.util.List<java.lang.Object> < java.lang.Object > ) java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ; } if ( java.lang.Object instanceof Document ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( java.lang.String java.lang.String : ( ( Document ) java.lang.Object ) . keySet ( ) ) { java.lang.Object java.lang.Object = ( ( Document ) java.lang.Object ) . get ( java.lang.String ) ; org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } if ( java.lang.Object instanceof DBObject ) { Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( java.lang.String java.lang.String : ( ( DBObject ) java.lang.Object ) . keySet ( ) ) { java.lang.Object java.lang.Object = ( ( DBObject ) java.lang.Object ) . get ( java.lang.String ) ; org.springframework.data.mongodb.core.convert.Document . put ( java.lang.String , java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : ( ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) java.lang.Object ) . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { org.springframework.data.mongodb.core.convert.Document . put ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) , java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ) ; } return org.springframework.data.mongodb.core.convert.Document ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.util.List<java.lang.Object> ( java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ; } if ( java.lang.Object instanceof java.util.Collection ) { return java.util.List<java.lang.Object> ( ( java.util.Collection<?> < ? > ) java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ; } Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; this . void ( java.lang.Object , org.springframework.data.mongodb.core.convert.Document ) ; if ( org.springframework.data.mongodb.core.convert.TypeInformation<> == null ) { return java.lang.Object ( org.springframework.data.mongodb.core.convert.Document , true ) ; } if ( org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) . equals ( org.springframework.data.mongodb.core.convert.MappingMongoConverter.NestedDocument .class ) ) { return java.lang.Object ( org.springframework.data.mongodb.core.convert.Document , false ) ; } return ! java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ) ? org.springframework.data.mongodb.core.convert.Document : java.lang.Object ( org.springframework.data.mongodb.core.convert.Document , true ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> ) ) ; } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , boolean boolean ) { if ( ! ( java.lang.Object instanceof Document ) ) { return java.lang.Object ; } Document org.springframework.data.mongodb.core.convert.Document = ( Document ) java.lang.Object ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : org.springframework.data.mongodb.core.convert.Document . keySet ( ) ) { if ( boolean ) { java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.Document . get ( java.lang.String ) ; if ( java.lang.Object instanceof BasicDBList ) { for ( java.lang.Object java.lang.Object : ( BasicDBList ) java.lang.Object ) { java.lang.Object ( java.lang.Object , boolean ) ; } } else if ( java.lang.Object instanceof java.util.List ) { for ( java.lang.Object java.lang.Object : ( java.util.List ) java.lang.Object ) { java.lang.Object ( java.lang.Object , boolean ) ; } } else { java.lang.Object ( java.lang.Object , boolean ) ; } } if ( org.springframework.data.mongodb.core.convert.MongoTypeMapper . isTypeKey ( java.lang.String ) ) { java.lang.String = java.lang.String ; if ( ! boolean ) { break; } } } if ( java.lang.String != null ) { org.springframework.data.mongodb.core.convert.Document . remove ( java.lang.String ) ; } return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> public void ( Bson org.springframework.data.mongodb.core.convert.Bson , SpELExpressionEvaluator org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Bson , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.core.convert.ObjectPath , STRING ) ; this . org.springframework.data.mongodb.core.convert.DocumentAccessor = new DocumentAccessor ( org.springframework.data.mongodb.core.convert.Bson ) ; this . org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator = org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator ; this . org.springframework.data.mongodb.core.convert.ObjectPath = org.springframework.data.mongodb.core.convert.ObjectPath ; }  <METHOD_END>
<METHOD_START> public < T > java.util.Optional<T> < T > java.util.Optional<T> ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { return java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getSpelExpression ( ) . map ( it -> evaluator . evaluate ( it ) ) . orElseGet ( ( ) source . get ( property ) ) ) . map ( it -> readValue ( it , property . getTypeInformation ( ) , path ) ) ; }  <METHOD_END>
<METHOD_START> public void ( SpELExpressionEvaluator org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , ConversionService org.springframework.data.mongodb.core.convert.ConversionService , ParameterValueProvider < MongoPersistentProperty > org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { super( org.springframework.data.mongodb.core.convert.SpELExpressionEvaluator , org.springframework.data.mongodb.core.convert.ConversionService , org.springframework.data.mongodb.core.convert.ParameterValueProvider<org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ); this . org.springframework.data.mongodb.core.convert.ObjectPath = org.springframework.data.mongodb.core.convert.ObjectPath ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.Object java.lang.Object , Parameter < T , MongoPersistentProperty > org.springframework.data.mongodb.core.convert.Parameter<T,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> ) { return java.lang.Object ( java.lang.Object , org.springframework.data.mongodb.core.convert.Parameter<T,org.springframework.data.mongodb.core.convert.MongoPersistentProperty> . getType ( ) , org.springframework.data.mongodb.core.convert.ObjectPath ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.Object java.lang.Object , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.mongodb.core.convert.TypeInformation<> . getType ( ) ; if ( conversions . hasCustomReadTarget ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ) { return ( T ) conversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } else if ( java.lang.Object instanceof DBRef ) { return java.lang.Object ( ( DBRef ) java.lang.Object , org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<> ) ; } else if ( java.lang.Object instanceof java.util.List ) { return ( T ) java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( java.util.List ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ; } else if ( java.lang.Object instanceof Document ) { return ( T ) java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( Document ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ; } else if ( java.lang.Object instanceof DBObject ) { return ( T ) java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , ( BasicDBObject ) java.lang.Object , org.springframework.data.mongodb.core.convert.ObjectPath ) ; } else { return ( T ) java.lang.Object ( java.lang.Object , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( DBRef org.springframework.data.mongodb.core.convert.DBRef , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> . boolean ( DBRef .class ) ) { return ( T ) org.springframework.data.mongodb.core.convert.DBRef ; } java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.DBRef == null ? null : org.springframework.data.mongodb.core.convert.ObjectPath . getPathItem ( org.springframework.data.mongodb.core.convert.DBRef . getId ( ) , org.springframework.data.mongodb.core.convert.DBRef . getCollectionName ( ) ) ; return ( T ) ( java.lang.Object != null ? java.lang.Object : java.lang.Object ( org.springframework.data.mongodb.core.convert.DBRef , org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private < T > T T ( DBRef org.springframework.data.mongodb.core.convert.DBRef , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath , final java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<T> < T > java.util.List<T> = java.util.List ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.convert.DBRef ) , org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.ObjectPath , java.lang.Class<> ) ; return CollectionUtils . isEmpty ( java.util.List<T> ) ? null : java.util.List<T> . java.util.Iterator<T> ( ) . T ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private void void ( TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.LinkedHashMap<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List ( ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> < DBRef > ) new java.util.ArrayList ( java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.util.Collection<java.lang.Object> ( ) ) , org.springframework.data.mongodb.core.convert.TypeInformation<> , ObjectPath . ROOT , java.lang.Class<> ) ; int int = NUMBER ; for ( java.lang.String java.lang.String : java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.util.Set<java.lang.String> ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.core.convert.DBRef> , TypeInformation < ? > org.springframework.data.mongodb.core.convert.TypeInformation<?> , ObjectPath org.springframework.data.mongodb.core.convert.ObjectPath , final java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) ) { return java.util.Collections . java.util.List<T> ( ) ; } java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> = java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . size ( ) == NUMBER ? java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.convert.Document ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . iterator ( ) . next ( ) ) ) : java.util.List<org.springframework.data.mongodb.core.convert.Document> ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) ; java.lang.String java.lang.String = java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . iterator ( ) . next ( ) . getCollectionName ( ) ; java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> . size ( ) ) ; for ( Document org.springframework.data.mongodb.core.convert.Document : java.util.List<org.springframework.data.mongodb.core.convert.Document> ) { if ( org.springframework.data.mongodb.core.convert.Document != null ) { void ( new AfterLoadEvent < T > ( org.springframework.data.mongodb.core.convert.Document , ( java.lang.Class<T> < T > ) java.lang.Class<> , java.lang.String ) ) ; } final T T = ( T ) java.lang.Object ( org.springframework.data.mongodb.core.convert.TypeInformation<> , org.springframework.data.mongodb.core.convert.Document , org.springframework.data.mongodb.core.convert.ObjectPath ) ; java.util.List<T> . boolean ( T ) ; if ( T != null ) { void ( new AfterConvertEvent < T > ( org.springframework.data.mongodb.core.convert.Document , T , java.lang.String ) ) ; } } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private void void ( MongoMappingEvent < ? > org.springframework.data.mongodb.core.convert.MongoMappingEvent<?> ) { if ( boolean ( ) ) { this . org.springframework.data.mongodb.core.convert.ApplicationContext . publishEvent ( org.springframework.data.mongodb.core.convert.MongoMappingEvent<> ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return this . org.springframework.data.mongodb.core.convert.ApplicationContext != null ; }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( DBRef org.springframework.data.mongodb.core.convert.DBRef ) { return org.springframework.data.mongodb.core.convert.DbRefResolver . fetch ( org.springframework.data.mongodb.core.convert.DBRef ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.mongodb.core.convert.Document> < Document > java.util.List<org.springframework.data.mongodb.core.convert.Document> ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> < DBRef > java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) { return org.springframework.data.mongodb.core.convert.DbRefResolver . bulkFetch ( java.util.List<org.springframework.data.mongodb.core.convert.DBRef> ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Iterable<java.lang.Object> < java.lang.Object > java.lang.Iterable<java.lang.Object> ) { Assert . notNull ( java.lang.Iterable<java.lang.Object> , STRING ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<java.lang.Object> ) { if ( ! ( java.lang.Object instanceof DBRef ) ) { return false ; } java.util.Set<java.lang.String> . boolean ( ( ( DBRef ) java.lang.Object ) . getCollectionName ( ) ) ; if ( java.util.Set<java.lang.String> . int ( ) > NUMBER ) { return false ; } } return true ; }  <METHOD_END>
