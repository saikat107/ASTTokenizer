<METHOD_START> public void ( StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> ) { Assert . notNull ( org.springframework.statemachine.state.StateHolder<S,E> , STRING ) ; this . org.springframework.statemachine.state.StateHolder<S,E> = org.springframework.statemachine.state.StateHolder<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override final public org.springframework.statemachine.state.PseudoStateKind org.springframework.statemachine.state.PseudoStateKind ( ) { return PseudoStateKind . EXIT ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PseudoStateListener < S , E > org.springframework.statemachine.state.PseudoStateListener<S,E> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.statemachine.state.PseudoStateListener<S,E>> < PseudoStateListener < S , E > > java.util.List<org.springframework.statemachine.state.PseudoStateListener<S,E>> ) {	}  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.StateHolder<S,E> < S , E > org.springframework.statemachine.state.StateHolder<S,E> ( ) { return org.springframework.statemachine.state.StateHolder<S,E> ; }  <METHOD_END>
