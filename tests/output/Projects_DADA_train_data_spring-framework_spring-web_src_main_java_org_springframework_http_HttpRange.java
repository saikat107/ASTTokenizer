<METHOD_START> public org.springframework.http.ResourceRegion org.springframework.http.ResourceRegion ( Resource org.springframework.http.Resource ) { Assert . isTrue ( org.springframework.http.Resource . getClass ( ) != InputStreamResource .class , STRING ) ; try { long long = org.springframework.http.Resource . contentLength ( ) ; Assert . isTrue ( long > NUMBER , STRING ) ; long long = long ( long ) ; long long = long ( long ) ; return new ResourceRegion ( org.springframework.http.Resource , long , long - long + NUMBER ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalArgumentException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> public abstract long long ( long long );  <METHOD_END>
<METHOD_START> public abstract long long ( long long );  <METHOD_END>
<METHOD_START> public static org.springframework.http.HttpRange org.springframework.http.HttpRange ( long long ) { return new org.springframework.http.HttpRange.ByteRange ( long , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.HttpRange org.springframework.http.HttpRange ( long long , long long ) { return new org.springframework.http.HttpRange.ByteRange ( long , long ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.http.HttpRange org.springframework.http.HttpRange ( long long ) { return new org.springframework.http.HttpRange.SuffixByteRange ( long ) ; }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.HttpRange> < org.springframework.http.HttpRange > java.util.List<org.springframework.http.HttpRange> ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasLength ( java.lang.String ) ) { return java.util.Collections . java.util.List<org.springframework.http.HttpRange> ( ) ; } if ( ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; java.util.List<org.springframework.http.HttpRange> < org.springframework.http.HttpRange > java.util.List<org.springframework.http.HttpRange> = new java.util.ArrayList<org.springframework.http.HttpRange> <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.http.HttpRange> . boolean ( org.springframework.http.HttpRange ( java.lang.String ) ) ; } return java.util.List<org.springframework.http.HttpRange> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.HttpRange org.springframework.http.HttpRange ( java.lang.String java.lang.String ) { Assert . hasLength ( java.lang.String , STRING ) ; int int = java.lang.String . int ( '-' ) ; if ( int > NUMBER ) { long long = java.lang.Long . long ( java.lang.String . java.lang.String ( NUMBER , int ) ) ; if ( int < java.lang.String . int ( ) - NUMBER ) { java.lang.Long java.lang.Long = java.lang.Long . long ( java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ) ; return new org.springframework.http.HttpRange.ByteRange ( long , java.lang.Long ) ; } else { return new org.springframework.http.HttpRange.ByteRange ( long , null ) ; } } else if ( int == NUMBER ) { long long = java.lang.Long . long ( java.lang.String . java.lang.String ( NUMBER ) ) ; return new org.springframework.http.HttpRange.SuffixByteRange ( long ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.http.ResourceRegion> < ResourceRegion > java.util.List<org.springframework.http.ResourceRegion> ( java.util.List<org.springframework.http.HttpRange> < org.springframework.http.HttpRange > java.util.List<org.springframework.http.HttpRange> , Resource org.springframework.http.Resource ) { if ( CollectionUtils . isEmpty ( java.util.List<org.springframework.http.HttpRange> ) ) { return java.util.Collections . java.util.List<org.springframework.http.ResourceRegion> ( ) ; } java.util.List<org.springframework.http.ResourceRegion> < ResourceRegion > java.util.List<org.springframework.http.ResourceRegion> = new java.util.ArrayList<org.springframework.http.ResourceRegion> <> ( java.util.List<org.springframework.http.HttpRange> . int ( ) ) ; for ( org.springframework.http.HttpRange org.springframework.http.HttpRange : java.util.List<org.springframework.http.HttpRange> ) { java.util.List<org.springframework.http.ResourceRegion> . add ( org.springframework.http.HttpRange . org.springframework.http.ResourceRegion ( org.springframework.http.Resource ) ) ; } return java.util.List<org.springframework.http.ResourceRegion> ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.util.Collection<org.springframework.http.HttpRange> < org.springframework.http.HttpRange > java.util.Collection<org.springframework.http.HttpRange> ) { Assert . notEmpty ( java.util.Collection<org.springframework.http.HttpRange> , STRING ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; for ( java.util.Iterator<org.springframework.http.HttpRange> < org.springframework.http.HttpRange > java.util.Iterator<org.springframework.http.HttpRange> = java.util.Collection<org.springframework.http.HttpRange> . java.util.Iterator<org.springframework.http.HttpRange> ( ) ; java.util.Iterator<org.springframework.http.HttpRange> . boolean ( ) ; ) { org.springframework.http.HttpRange org.springframework.http.HttpRange = java.util.Iterator<org.springframework.http.HttpRange> . org.springframework.http.HttpRange ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.http.HttpRange ) ; if ( java.util.Iterator<org.springframework.http.HttpRange> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( long long , java.lang.Long java.lang.Long ) { void ( long , java.lang.Long ) ; this . long = long ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> private void void ( long long , java.lang.Long java.lang.Long ) { if ( long < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + long ) ; } if ( java.lang.Long != null && java.lang.Long < long ) { throw new java.lang.IllegalArgumentException ( STRING + long + STRING + java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( long long ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( long long ) { if ( this . java.lang.Long != null && this . java.lang.Long < long ) { return this . java.lang.Long ; } else { return long - NUMBER ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.http.HttpRange.ByteRange ) ) { return false ; } org.springframework.http.HttpRange.ByteRange org.springframework.http.HttpRange.ByteRange = ( org.springframework.http.HttpRange.ByteRange ) java.lang.Object ; return ( this . long == org.springframework.http.HttpRange.ByteRange . long && ObjectUtils . nullSafeEquals ( this . java.lang.Long , org.springframework.http.HttpRange.ByteRange . java.lang.Long ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( ObjectUtils . nullSafeHashCode ( this . long ) * NUMBER + ObjectUtils . nullSafeHashCode ( this . java.lang.Long ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( this . long ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '-' ) ; if ( this . java.lang.Long != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( this . java.lang.Long ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( long long ) { if ( long < NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + long ) ; } this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( long long ) { if ( this . long < long ) { return long - this . long ; } else { return NUMBER ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( long long ) { return long - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.http.HttpRange.SuffixByteRange ) ) { return false ; } org.springframework.http.HttpRange.SuffixByteRange org.springframework.http.HttpRange.SuffixByteRange = ( org.springframework.http.HttpRange.SuffixByteRange ) java.lang.Object ; return ( this . long == org.springframework.http.HttpRange.SuffixByteRange . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Long . int ( this . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . long ; }  <METHOD_END>
