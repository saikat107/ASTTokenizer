<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { IntegrationFlow org.springframework.integration.dsl.manualflow.IntegrationFlow = f -> f .< String , String > transform ( String :: toUpperCase ) . channel ( MessageChannels . queue ( ) ) . transform ( STRING :: concat , e -> e . poller ( p -> p . fixedDelay ( NUMBER ) . maxMessagesPerPoll ( NUMBER ) . receiveTimeout ( NUMBER ) ) ) . handle ( new BeanFactoryHandler ( ) ) ; org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler = new org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler ( ) ; IntegrationFlowRegistration org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration = this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( org.springframework.integration.dsl.manualflow.IntegrationFlow ) . addBean ( org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler ) . register ( ) ; org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler = this . org.springframework.integration.dsl.manualflow.BeanFactory . getBean ( org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getId ( ) + org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler .class . java.lang.String ( ) + STRING , org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler .class ) ; assertSame ( org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler , org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler ) ; assertSame ( this . org.springframework.integration.dsl.manualflow.BeanFactory , org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler . org.springframework.integration.dsl.manualflow.BeanFactory ) ; MessagingTemplate org.springframework.integration.dsl.manualflow.MessagingTemplate = org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getMessagingTemplate ( ) ; org.springframework.integration.dsl.manualflow.MessagingTemplate . setReceiveTimeout ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.dsl.manualflow.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.integration.dsl.manualflow.MessagingTemplate . convertSendAndReceive ( STRING , java.lang.String .class ) ) ; try { org.springframework.integration.dsl.manualflow.MessagingTemplate . receive ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.UnsupportedOperationException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . destroy ( ) ; assertFalse ( this . org.springframework.integration.dsl.manualflow.BeanFactory . containsBean ( org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getId ( ) ) ) ; assertFalse ( this . org.springframework.integration.dsl.manualflow.BeanFactory . containsBean ( org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getId ( ) + STRING ) ) ; assertFalse ( this . org.springframework.integration.dsl.manualflow.BeanFactory . containsBean ( org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getId ( ) + org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler .class . java.lang.String ( ) + STRING ) ) ; ThreadPoolTaskScheduler org.springframework.integration.dsl.manualflow.ThreadPoolTaskScheduler = this . org.springframework.integration.dsl.manualflow.BeanFactory . getBean ( ThreadPoolTaskScheduler .class ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.dsl.manualflow.ThreadPoolTaskScheduler . getActiveCount ( ) ) ; assertTrue ( org.springframework.integration.dsl.manualflow.ManualFlowTests.BeanFactoryHandler . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class MyIntegrationFlow implements IntegrationFlow { @ java.lang.Override public void void ( IntegrationFlowDefinition < ? > org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<?> ) { org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<> . bridge ( ) ; } } IntegrationFlow org.springframework.integration.dsl.manualflow.IntegrationFlow = new MyIntegrationFlow ( ) ; assertNotNull ( this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( org.springframework.integration.dsl.manualflow.IntegrationFlow ) . autoStartup ( false ) . register ( ) ) ; try { this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( org.springframework.integration.dsl.manualflow.IntegrationFlow ) . register ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING + org.springframework.integration.dsl.manualflow.IntegrationFlow + STRING ) ) ; } try { this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . remove ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( java.lang.IllegalStateException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING + STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IntegrationFlowDefinition < ? > org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<?> ) { org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<> . bridge ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PollableChannel org.springframework.integration.dsl.manualflow.PollableChannel = new QueueChannel ( ) ; this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( flow -> flow . publishSubscribeChannel ( p -> p . minSubscribers ( NUMBER ) . subscribe ( f -> f . channel ( resultChannel ) ) ) ) . id ( STRING ) . register ( ) ; this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . messagingTemplateFor ( STRING ) . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.manualflow.Message<?> = org.springframework.integration.dsl.manualflow.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.manualflow.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.manualflow.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( new org.springframework.integration.dsl.manualflow.ManualFlowTests.MyFlowAdapter ( ) ) . register ( ) ; PollableChannel org.springframework.integration.dsl.manualflow.PollableChannel = this . org.springframework.integration.dsl.manualflow.BeanFactory . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.dsl.manualflow.Message<?> = org.springframework.integration.dsl.manualflow.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.manualflow.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.manualflow.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new AnnotationConfigApplicationContext ( org.springframework.integration.dsl.manualflow.ManualFlowTests.InvalidIntegrationFlowScopeConfiguration .class ) . close ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( BeanCreationNotAllowedException .class ) ) ; assertThat ( java.lang.Exception . java.lang.String ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class MessageProducingHandler implements MessageHandler , MessageProducer { private org.springframework.integration.dsl.manualflow.MessageChannel org.springframework.integration.dsl.manualflow.MessageChannel ; @ java.lang.Override public void void ( MessageChannel org.springframework.integration.dsl.manualflow.MessageChannel ) { this . org.springframework.integration.dsl.manualflow.MessageChannel = org.springframework.integration.dsl.manualflow.MessageChannel ; } @ java.lang.Override public org.springframework.integration.dsl.manualflow.MessageChannel org.springframework.integration.dsl.manualflow.MessageChannel ( ) { return this . org.springframework.integration.dsl.manualflow.MessageChannel ; } @ java.lang.Override public void void ( Message < ? > org.springframework.integration.dsl.manualflow.Message<?> ) throws org.springframework.integration.dsl.manualflow.MessagingException { this . org.springframework.integration.dsl.manualflow.MessageChannel . send ( org.springframework.integration.dsl.manualflow.Message<> ) ; } } PollableChannel org.springframework.integration.dsl.manualflow.PollableChannel = new QueueChannel ( ) ; IntegrationFlowRegistration org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration = this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . registration ( flow -> flow . handle ( new MessageProducingHandler ( ) ) . channel ( resultChannel ) ) . register ( ) ; this . org.springframework.integration.dsl.manualflow.IntegrationFlowContext . messagingTemplateFor ( org.springframework.integration.dsl.manualflow.IntegrationFlowRegistration . getId ( ) ) . send ( new GenericMessage <> ( STRING ) ) ; Message < ? > org.springframework.integration.dsl.manualflow.Message<?> = org.springframework.integration.dsl.manualflow.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.manualflow.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.manualflow.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageChannel org.springframework.integration.dsl.manualflow.MessageChannel ) { this . org.springframework.integration.dsl.manualflow.MessageChannel = org.springframework.integration.dsl.manualflow.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.dsl.manualflow.MessageChannel org.springframework.integration.dsl.manualflow.MessageChannel ( ) { return this . org.springframework.integration.dsl.manualflow.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.dsl.manualflow.Message<?> ) throws org.springframework.integration.dsl.manualflow.MessagingException { this . org.springframework.integration.dsl.manualflow.MessageChannel . send ( org.springframework.integration.dsl.manualflow.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( ConfigurableBeanFactory . SCOPE_PROTOTYPE ) public java.util.Date java.util.Date ( ) { return new java.util.Date ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<?> < ? > org.springframework.integration.dsl.manualflow.IntegrationFlowDefinition<?> ( ) { return from ( ( ) new GenericMessage <> ( STRING ) , e -> e . poller ( p -> p . trigger ( ctx -> this . nextExecutionTime . getAndSet ( null ) ) ) ) . channel ( MessageChannels . queue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( ConfigurableBeanFactory . SCOPE_PROTOTYPE ) public org.springframework.integration.dsl.manualflow.IntegrationFlow org.springframework.integration.dsl.manualflow.IntegrationFlow ( ) { return IntegrationFlowDefinition :: bridge ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.dsl.manualflow.Message<?> ) { java.util.Objects . java.lang.Object ( this . org.springframework.integration.dsl.manualflow.BeanFactory ) ; return org.springframework.integration.dsl.manualflow.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.dsl.manualflow.BeanFactory . getClass ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { this . boolean = true ; }  <METHOD_END>
