<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Set<javax.management.ObjectName> < javax.management.ObjectName > java.util.Set<javax.management.ObjectName> = this . javax.management.MBeanServer . java.util.Set<javax.management.ObjectName> ( new javax.management.ObjectName ( STRING ) , null ) ; for ( javax.management.ObjectName javax.management.ObjectName : java.util.Set<javax.management.ObjectName> ) { assertThat ( this . javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING ) , equalTo ( NUMBER ) ) ; this . javax.management.MBeanServer . void ( javax.management.ObjectName , new javax.management.Attribute ( STRING , NUMBER ) ) ; assertThat ( this . javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING ) , equalTo ( NUMBER ) ) ; } assertThat ( this . org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource . getMaxFetchSize ( ) , equalTo ( NUMBER ) ) ; assertThat ( this . org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource . getMaxFetchSize ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MBeanServerFactoryBean org.springframework.integration.monitor.MBeanServerFactoryBean ( ) { MBeanServerFactoryBean org.springframework.integration.monitor.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.integration.monitor.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; return org.springframework.integration.monitor.MBeanServerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ InboundChannelAdapter ( channel = STRING ) public org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource ( ) { return new org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource ( ) { return new org.springframework.integration.monitor.MessageSourceTests.MaxFetchSource ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.PollableChannel org.springframework.integration.monitor.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = PollerMetadata . DEFAULT_POLLER ) public org.springframework.integration.monitor.PollerMetadata org.springframework.integration.monitor.PollerMetadata ( ) { PollerMetadata org.springframework.integration.monitor.PollerMetadata = new PollerMetadata ( ) ; org.springframework.integration.monitor.PollerMetadata . setTrigger ( t -> null ) ; return org.springframework.integration.monitor.PollerMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( int int ) { return null ; }  <METHOD_END>
