<METHOD_START> @ java.lang.Override protected org.springframework.oxm.castor.CastorMarshaller org.springframework.oxm.castor.CastorMarshaller ( ) java.lang.Exception { CastorMarshaller org.springframework.oxm.castor.CastorMarshaller = new CastorMarshaller ( ) ; ClassPathResource org.springframework.oxm.castor.ClassPathResource = new ClassPathResource ( STRING , CastorMarshaller .class ) ; org.springframework.oxm.castor.CastorMarshaller . setMappingLocation ( org.springframework.oxm.castor.ClassPathResource ) ; org.springframework.oxm.castor.CastorMarshaller . afterPropertiesSet ( ) ; return org.springframework.oxm.castor.CastorMarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { Flights org.springframework.oxm.castor.Flights = ( Flights ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.castor.Flights ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.castor.Flights . getFlightCount ( ) ) ; void ( org.springframework.oxm.castor.Flights . getFlight ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { Flight org.springframework.oxm.castor.Flight = ( Flight ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.castor.Flight ) ; assertThat ( STRING , org.springframework.oxm.castor.Flight . getNumber ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CastorMarshaller org.springframework.oxm.castor.CastorMarshaller = new CastorMarshaller ( ) ; org.springframework.oxm.castor.CastorMarshaller . setTargetClasses ( new java.lang.Class [] { Flights .class } ) ; org.springframework.oxm.castor.CastorMarshaller . afterPropertiesSet ( ) ; javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( INPUT_STRING . getBytes ( STRING ) ) ) ; java.lang.Object java.lang.Object = org.springframework.oxm.castor.CastorMarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { CastorMarshaller org.springframework.oxm.castor.CastorMarshaller = new CastorMarshaller ( ) ; org.springframework.oxm.castor.CastorMarshaller . setMappingLocation ( new ClassPathResource ( STRING , CastorMarshaller .class ) ) ; org.springframework.oxm.castor.CastorMarshaller . setTargetClasses ( new java.lang.Class [] { Order .class } ) ; org.springframework.oxm.castor.CastorMarshaller . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING ; Order org.springframework.oxm.castor.Order = ( Order ) org.springframework.oxm.castor.CastorMarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.lang.String ) ) ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.castor.Order . getOrderItemCount ( ) ) ; OrderItem org.springframework.oxm.castor.OrderItem = org.springframework.oxm.castor.Order . getOrderItem ( NUMBER ) ; assertEquals ( STRING , STRING , org.springframework.oxm.castor.OrderItem . getId ( ) ) ; assertThat ( STRING , org.springframework.oxm.castor.OrderItem . getQuantity ( ) , equalTo ( NUMBER ) ) ; org.springframework.oxm.castor.OrderItem = org.springframework.oxm.castor.Order . getOrderItem ( NUMBER ) ; assertEquals ( STRING , STRING , org.springframework.oxm.castor.OrderItem . getId ( ) ) ; assertThat ( STRING , org.springframework.oxm.castor.OrderItem . getQuantity ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { unmarshaller . setWhitespacePreserve ( true ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { unmarshaller . setWhitespacePreserve ( false ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { unmarshaller . setIgnoreExtraAttributes ( true ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MarshallingException .class ) public void void ( ) java.lang.Exception { unmarshaller . setIgnoreExtraAttributes ( false ) ; java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { unmarshaller . setIgnoreExtraElements ( true ) ; unmarshaller . setValidating ( false ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MarshallingException .class ) public void void ( ) java.lang.Exception { unmarshaller . setIgnoreExtraElements ( false ) ; java.lang.Object ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flights org.springframework.oxm.castor.Flights = new Flights ( ) ; unmarshaller . setRootObject ( org.springframework.oxm.castor.Flights ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; void ( java.lang.Object ) ; assertSame ( STRING , org.springframework.oxm.castor.Flights , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Flights org.springframework.oxm.castor.Flights = new Flights ( ) ; org.springframework.oxm.castor.Flights . setFlight ( new Flight [] { new Flight ( ) } ) ; unmarshaller . setRootObject ( org.springframework.oxm.castor.Flights ) ; unmarshaller . setClearCollections ( true ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; assertSame ( STRING , org.springframework.oxm.castor.Flights , java.lang.Object ) ; assertEquals ( STRING , NUMBER , ( ( Flights ) java.lang.Object ) . getFlightCount ( ) ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { Flights org.springframework.oxm.castor.Flights = new Flights ( ) ; org.springframework.oxm.castor.Flights . setFlight ( new Flight [] { new Flight ( ) , null } ) ; unmarshaller . setRootObject ( org.springframework.oxm.castor.Flights ) ; unmarshaller . setClearCollections ( false ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; assertSame ( STRING , org.springframework.oxm.castor.Flights , java.lang.Object ) ; assertEquals ( STRING , NUMBER , ( ( Flights ) java.lang.Object ) . getFlightCount ( ) ) ; assertNull ( STRING , org.springframework.oxm.castor.Flights . getFlight ( NUMBER ) . getNumber ( ) ) ; assertNull ( STRING , org.springframework.oxm.castor.Flights . getFlight ( ) [ NUMBER ] ) ; void ( org.springframework.oxm.castor.Flights . getFlight ( ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> < org.xml.sax.XMLReader > java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> = new java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> <> ( ) ; CastorMarshaller org.springframework.oxm.castor.CastorMarshaller = new CastorMarshaller ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( org.xml.sax.XMLReader org.xml.sax.XMLReader , org.xml.sax.InputSource org.xml.sax.InputSource ) { java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( org.xml.sax.XMLReader ) ; return null ; } } ; org.springframework.oxm.castor.CastorMarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( STRING ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) ) ; assertEquals ( true , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; assertEquals ( false , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( null ) ; org.springframework.oxm.castor.CastorMarshaller . setSupportDtd ( true ) ; org.springframework.oxm.castor.CastorMarshaller . setProcessExternalEntities ( true ) ; org.springframework.oxm.castor.CastorMarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( STRING ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) ) ; assertEquals ( false , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; assertEquals ( true , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( org.xml.sax.XMLReader org.xml.sax.XMLReader , org.xml.sax.InputSource org.xml.sax.InputSource ) { java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( org.xml.sax.XMLReader ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> < org.xml.sax.XMLReader > java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> = new java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> <> ( ) ; CastorMarshaller org.springframework.oxm.castor.CastorMarshaller = new CastorMarshaller ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( org.xml.sax.XMLReader org.xml.sax.XMLReader , org.xml.sax.InputSource org.xml.sax.InputSource ) { java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( org.xml.sax.XMLReader ) ; return null ; } } ; org.springframework.oxm.castor.CastorMarshaller . unmarshal ( new javax.xml.transform.sax.SAXSource ( new org.xml.sax.InputSource ( STRING ) ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) ) ; assertEquals ( true , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; assertEquals ( false , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( null ) ; org.springframework.oxm.castor.CastorMarshaller . setSupportDtd ( true ) ; org.springframework.oxm.castor.CastorMarshaller . setProcessExternalEntities ( true ) ; org.springframework.oxm.castor.CastorMarshaller . unmarshal ( new javax.xml.transform.sax.SAXSource ( new org.xml.sax.InputSource ( STRING ) ) ) ; assertNotNull ( java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) ) ; assertEquals ( false , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; assertEquals ( true , java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . org.xml.sax.XMLReader ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( org.xml.sax.XMLReader org.xml.sax.XMLReader , org.xml.sax.InputSource org.xml.sax.InputSource ) { java.util.concurrent.atomic.AtomicReference<org.xml.sax.XMLReader> . void ( org.xml.sax.XMLReader ) ; return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Object ( INPUT_STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws java.lang.Exception { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.lang.String ) ) ; return unmarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; }  <METHOD_END>
