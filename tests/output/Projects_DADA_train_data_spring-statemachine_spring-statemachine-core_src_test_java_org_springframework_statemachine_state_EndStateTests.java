<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.state.AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.state.EndStateTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . EF ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.state.EndStateTests.Config2 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates3 , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates3 . READY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.state.EndStateTests.Config3 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates3 , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates3 . READY ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.state.EndStateTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S11 ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . S12 ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . isComplete ( ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S1 , TestStates . SF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.state.EndStateTests.Config5 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.state.EndStateTests.Config6 .class ) ; context . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E4 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SF ) . event ( TestEvents . EF ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TaskExecutor org.springframework.statemachine.state.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates3 , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> )				throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates3 . READY ) . fork ( TestStates3 . FORK ) . state ( TestStates3 . TASKS ) . join ( TestStates3 . JOIN ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T1 ) . end ( TestStates3 . T1E ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T2 ) . end ( TestStates3 . T2E ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T3 ) . end ( TestStates3 . T3E ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates3 , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> )				throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates3 . READY ) . target ( TestStates3 . FORK ) . event ( TestEvents . E1 ) . and ( ) . withFork ( ) . source ( TestStates3 . FORK ) . target ( TestStates3 . T1 ) . target ( TestStates3 . T2 ) . target ( TestStates3 . T3 ) . and ( ) . withExternal ( ) . source ( TestStates3 . T1 ) . target ( TestStates3 . T1E ) . and ( ) . withExternal ( ) . source ( TestStates3 . T2 ) . target ( TestStates3 . T2E ) . and ( ) . withExternal ( ) . source ( TestStates3 . T3 ) . target ( TestStates3 . T3E ) . and ( ) . withJoin ( ) . source ( TestStates3 . T1E ) . source ( TestStates3 . T2E ) . source ( TestStates3 . T3E ) . target ( TestStates3 . JOIN ) . and ( ) . withExternal ( ) . source ( TestStates3 . JOIN ) . target ( TestStates3 . READY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates3 , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> )				throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates3 . READY ) . fork ( TestStates3 . FORK ) . state ( TestStates3 . TASKS ) . join ( TestStates3 . JOIN ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T1 ) . state ( TestStates3 . T1E ) . end ( TestStates3 . T1E ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T2 ) . state ( TestStates3 . T2E ) . end ( TestStates3 . T2E ) . and ( ) . withStates ( ) . parent ( TestStates3 . TASKS ) . initial ( TestStates3 . T3 ) . state ( TestStates3 . T3E ) . end ( TestStates3 . T3E ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates3 , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> )				throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates3,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates3 . READY ) . target ( TestStates3 . FORK ) . event ( TestEvents . E1 ) . and ( ) . withFork ( ) . source ( TestStates3 . FORK ) . target ( TestStates3 . T1 ) . target ( TestStates3 . T2 ) . target ( TestStates3 . T3 ) . and ( ) . withExternal ( ) . state ( TestStates3 . TASKS ) . source ( TestStates3 . T1 ) . target ( TestStates3 . T1E ) . and ( ) . withExternal ( ) . state ( TestStates3 . TASKS ) . source ( TestStates3 . T2 ) . target ( TestStates3 . T2E ) . and ( ) . withExternal ( ) . state ( TestStates3 . TASKS ) . source ( TestStates3 . T3 ) . target ( TestStates3 . T3E ) . and ( ) . withJoin ( ) . source ( TestStates3 . T1E ) . source ( TestStates3 . T2E ) . source ( TestStates3 . T3E ) . target ( TestStates3 . JOIN ) . and ( ) . withExternal ( ) . source ( TestStates3 . JOIN ) . target ( TestStates3 . READY ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S1 ) . and ( ) . withStates ( ) . parent ( TestStates . S1 ) . initial ( TestStates . S11 ) . state ( TestStates . S12 ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S11 ) . target ( TestStates . S12 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S12 ) . target ( TestStates . SF ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.state.TaskExecutor org.springframework.statemachine.state.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . end ( TestStates . SF ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S1 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . SF ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . SF ) . event ( TestEvents . E3 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.state.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . choice ( STRING ) . choice ( STRING ) . end ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.state.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withChoice ( ) . source ( STRING ) . last ( STRING ) . and ( ) . withChoice ( ) . source ( STRING ) . last ( STRING ) ; }  <METHOD_END>
