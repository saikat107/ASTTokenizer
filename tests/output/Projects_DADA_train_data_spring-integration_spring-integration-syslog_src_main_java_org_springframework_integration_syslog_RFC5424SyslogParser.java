<METHOD_START> public void ( ) { this( false ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.lang.String java.lang.String , int int , boolean boolean ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.syslog.RFC5424SyslogParser.Reader org.springframework.integration.syslog.RFC5424SyslogParser.Reader = new org.springframework.integration.syslog.RFC5424SyslogParser.Reader ( java.lang.String ) ; try { if ( boolean ) { int int = java.lang.String . int ( ) - NUMBER ; while ( int >= NUMBER && java.lang.String . char ( int ) == NUMBER ) { int -- ; } java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; throw new java.lang.IllegalStateException ( STRING + int + STRING + ( int + NUMBER ) ) ; } org.springframework.integration.syslog.RFC5424SyslogParser.Reader . void ( '<' ) ; int int = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ; org.springframework.integration.syslog.RFC5424SyslogParser.Reader . void ( '>' ) ; int int = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ; org.springframework.integration.syslog.RFC5424SyslogParser.Reader . void ( char ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) ; java.lang.String java.lang.String = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ; java.lang.String java.lang.String = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ; java.lang.String java.lang.String = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ; java.lang.String java.lang.String = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) ; java.lang.String java.lang.String ; if ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader . boolean ( char ) ) { org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ; java.lang.String = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ; } else { java.lang.String = STRING ; } int int = int & NUMBER ; int int = int >> NUMBER ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . FACILITY , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . SEVERITY , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . SEVERITY_TEXT , org.springframework.integration.syslog.RFC5424SyslogParser.Severity . org.springframework.integration.syslog.RFC5424SyslogParser.Severity ( int ) . java.lang.String ( ) ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . TIMESTAMP , java.lang.Object ) ; } if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . HOST , java.lang.String ) ; } if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . APP_NAME , java.lang.String ) ; } if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . PROCID , java.lang.String ) ; } if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . MSGID , java.lang.String ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . VERSION , int ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . STRUCTURED_DATA , java.lang.Object ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . MESSAGE , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . DECODE_ERRORS , STRING ) ; if ( this . boolean ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . UNDECODED , java.lang.String ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . DECODE_ERRORS , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . ERRORS , java.lang.IllegalStateException . java.lang.String ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . UNDECODED , java.lang.String ) ; } catch ( java.lang.StringIndexOutOfBoundsException java.lang.StringIndexOutOfBoundsException ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . DECODE_ERRORS , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . ERRORS , STRING + java.lang.StringIndexOutOfBoundsException . java.lang.String ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( SyslogHeaders . UNDECODED , java.lang.String ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) { int int = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ; if ( int == char ) { return null ; } if ( ! java.lang.Character . boolean ( int ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( ( char ) int ) ; while ( ( int = org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ) != char ) { java.lang.StringBuilder . java.lang.StringBuilder ( ( char ) int ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) { if ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader . boolean ( char ) ) { org.springframework.integration.syslog.RFC5424SyslogParser.Reader . int ( ) ; return null ; } return java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader org.springframework.integration.syslog.RFC5424SyslogParser.Reader ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; while ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader . boolean ( '[' ) ) { org.springframework.integration.syslog.RFC5424SyslogParser.Reader . void ( ) ; org.springframework.integration.syslog.RFC5424SyslogParser.Reader . void ( ']' ) ; java.util.List<java.lang.String> . boolean ( org.springframework.integration.syslog.RFC5424SyslogParser.Reader . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int = this . int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { Assert . state ( this . int <= this . int , STRING ) ; return this . java.lang.String . java.lang.String ( this . int , this . int ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.lang.String . char ( this . int ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.lang.String . char ( this . int - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.lang.String . char ( this . int ++ ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.lang.String . char ( this . int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . int -- ; }  <METHOD_END>
<METHOD_START> public int int ( ) { int int = int ( ) ; if ( ! java.lang.Character . boolean ( int ) ) { void ( ) ; return - NUMBER ; } return int - '0' ; }  <METHOD_END>
<METHOD_START> public int int ( ) { int int = NUMBER ; while ( boolean ( ) ) { int = ( int * NUMBER ) + int ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> public double double ( ) { int int = NUMBER ; int int = NUMBER ; while ( boolean ( ) ) { int = ( int * NUMBER ) + int ( ) ; int *= NUMBER ; } return ( double ) int / int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( char char ) { return this . java.lang.String . char ( this . int ) == char ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( char char ) { return this . java.lang.String . char ( this . int - NUMBER ) == char ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Character . boolean ( this . java.lang.String . char ( this . int ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( char char ) { if ( this . java.lang.String . char ( this . int ++ ) != char ) { throw new java.lang.IllegalStateException ( STRING + char + STRING + this . int ) ; } }  <METHOD_END>
<METHOD_START> public void void ( char char ) { while ( ! boolean ( char ) || boolean ( '\\' ) ) { int ( ) ; } int ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String . java.lang.String ( this . int ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; int int ; while ( true ) { int = int ( ) ; if ( int >= NUMBER && int <= NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( ( char ) int ) ; } else { break; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> void ( int int , java.lang.String java.lang.String ) { this . int = int ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.syslog.RFC5424SyslogParser.Severity org.springframework.integration.syslog.RFC5424SyslogParser.Severity ( int int ) { if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } if ( int == NUMBER ) { return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; } return org.springframework.integration.syslog.RFC5424SyslogParser.Severity ; }  <METHOD_END>
