<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext != null ) { this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.web.servlet.ServletComponentScanIntegrationTests.TestConfiguration .class ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ; java.lang.String java.lang.String = new RestTemplate ( ) . getForObject ( STRING + java.lang.String + STRING , java.lang.String .class ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.web.servlet.ServletComponentScanIntegrationTests.TestConfiguration .class ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean> < java.lang.String , ServletRegistrationBean > java.util.Map<java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean> = this . org.springframework.boot.web.servlet.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ; ServletRegistrationBean < ? > org.springframework.boot.web.servlet.ServletRegistrationBean<?> = java.util.Map<java.lang.String,org.springframework.boot.web.servlet.ServletRegistrationBean> . get ( TestMultipartServlet .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.web.servlet.ServletRegistrationBean<> ) . isNotNull ( ) ; MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.ServletRegistrationBean<> . getMultipartConfig ( ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement ) . isNotNull ( ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getLocation ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxRequestSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxFileSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getFileSizeThreshold ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.TomcatServletWebServerFactory org.springframework.boot.web.servlet.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
