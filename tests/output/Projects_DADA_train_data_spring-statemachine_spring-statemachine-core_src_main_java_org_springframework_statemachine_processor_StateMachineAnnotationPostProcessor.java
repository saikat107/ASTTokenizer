<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.processor.BeanFactory ) { Assert . isAssignable ( ConfigurableListableBeanFactory .class , org.springframework.statemachine.processor.BeanFactory . getClass ( ) , STRING ) ; this . org.springframework.statemachine.processor.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.statemachine.processor.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory , STRING ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnTransition .class , new StateMachineActivatorAnnotationPostProcessor < OnTransition > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnTransitionStart .class , new StateMachineActivatorAnnotationPostProcessor < OnTransitionStart > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnTransitionEnd .class , new StateMachineActivatorAnnotationPostProcessor < OnTransitionEnd > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateChanged .class , new StateMachineActivatorAnnotationPostProcessor < OnStateChanged > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateEntry .class , new StateMachineActivatorAnnotationPostProcessor < OnStateEntry > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateExit .class , new StateMachineActivatorAnnotationPostProcessor < OnStateExit > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateMachineStart .class , new StateMachineActivatorAnnotationPostProcessor < OnStateMachineStart > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateMachineStop .class , new StateMachineActivatorAnnotationPostProcessor < OnStateMachineStop > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnEventNotAccepted .class , new StateMachineActivatorAnnotationPostProcessor < OnEventNotAccepted > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnStateMachineError .class , new StateMachineActivatorAnnotationPostProcessor < OnStateMachineError > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . put ( OnExtendedStateChanged .class , new StateMachineActivatorAnnotationPostProcessor < OnExtendedStateChanged > ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.statemachine.processor.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , final java.lang.String java.lang.String ) throws org.springframework.statemachine.processor.BeansException { Assert . notNull ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory , STRING ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object ) ; if ( AnnotationUtils . findAnnotation ( java.lang.Class<> , WithStateMachine .class ) == null ) { return java.lang.Object ; } ReflectionUtils . doWithMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . keySet ( ) ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.annotation.Annotation == null ) { continue; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : AnnotationUtils . getAnnotations ( java.lang.reflect.Method ) ) { MethodAnnotationPostProcessor org.springframework.statemachine.processor.MethodAnnotationPostProcessor = java.lang.annotation.Annotation != null ? java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . get ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) : null ; if ( org.springframework.statemachine.processor.MethodAnnotationPostProcessor != null && boolean ( java.lang.annotation.Annotation ) ) { java.lang.Object java.lang.Object = org.springframework.statemachine.processor.MethodAnnotationPostProcessor . postProcess ( java.lang.Class<> , java.lang.Object , java.lang.String , java.lang.reflect.Method , java.lang.annotation.Annotation , java.lang.annotation.Annotation ) ; if ( java.lang.Object != null && java.lang.Object instanceof StateMachineHandler ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.reflect.Method , java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; if ( java.lang.Object instanceof BeanNameAware ) { ( ( BeanNameAware ) java.lang.Object ) . setBeanName ( java.lang.String ) ; } org.springframework.statemachine.processor.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , java.lang.Object ) ; if ( java.lang.Object instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) java.lang.Object ) . setBeanFactory ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ; } if ( java.lang.Object instanceof InitializingBean ) { try { ( ( InitializingBean ) java.lang.Object ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } if ( java.lang.Object instanceof Lifecycle ) { java.util.Set<org.springframework.statemachine.processor.Lifecycle> . add ( ( Lifecycle ) java.lang.Object ) ; if ( java.lang.Object instanceof SmartLifecycle && ( ( SmartLifecycle ) java.lang.Object ) . isAutoStartup ( ) ) { ( ( SmartLifecycle ) java.lang.Object ) . start ( ) ; } } if ( java.lang.Object instanceof ApplicationListener ) { java.util.Set<org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent>> . add ( ( ApplicationListener ) java.lang.Object ) ; } } } } } } } ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . keySet ( ) ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.annotation.Annotation == null ) { continue; } for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : AnnotationUtils . getAnnotations ( java.lang.reflect.Method ) ) { MethodAnnotationPostProcessor org.springframework.statemachine.processor.MethodAnnotationPostProcessor = java.lang.annotation.Annotation != null ? java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,org.springframework.statemachine.processor.MethodAnnotationPostProcessor<?>> . get ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) : null ; if ( org.springframework.statemachine.processor.MethodAnnotationPostProcessor != null && boolean ( java.lang.annotation.Annotation ) ) { java.lang.Object java.lang.Object = org.springframework.statemachine.processor.MethodAnnotationPostProcessor . postProcess ( java.lang.Class<> , java.lang.Object , java.lang.String , java.lang.reflect.Method , java.lang.annotation.Annotation , java.lang.annotation.Annotation ) ; if ( java.lang.Object != null && java.lang.Object instanceof StateMachineHandler ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.reflect.Method , java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) ; if ( java.lang.Object instanceof BeanNameAware ) { ( ( BeanNameAware ) java.lang.Object ) . setBeanName ( java.lang.String ) ; } org.springframework.statemachine.processor.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , java.lang.Object ) ; if ( java.lang.Object instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) java.lang.Object ) . setBeanFactory ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory ) ; } if ( java.lang.Object instanceof InitializingBean ) { try { ( ( InitializingBean ) java.lang.Object ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } if ( java.lang.Object instanceof Lifecycle ) { java.util.Set<org.springframework.statemachine.processor.Lifecycle> . add ( ( Lifecycle ) java.lang.Object ) ; if ( java.lang.Object instanceof SmartLifecycle && ( ( SmartLifecycle ) java.lang.Object ) . isAutoStartup ( ) ) { ( ( SmartLifecycle ) java.lang.Object ) . start ( ) ; } } if ( java.lang.Object instanceof ApplicationListener ) { java.util.Set<org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent>> . add ( ( ApplicationListener ) java.lang.Object ) ; } } } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.statemachine.processor.ApplicationEvent ) { for ( ApplicationListener < ApplicationEvent > org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent> : java.util.Set<org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent>> ) { try { org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent> . onApplicationEvent ( org.springframework.statemachine.processor.ApplicationEvent ) ; } catch ( java.lang.ClassCastException java.lang.ClassCastException ) { if ( org.springframework.statemachine.processor.Log . isWarnEnabled ( ) && org.springframework.statemachine.processor.ApplicationEvent != null ) { org.springframework.statemachine.processor.Log . warn ( STRING + org.springframework.statemachine.processor.ApplicationEvent . getClass ( ) + STRING + org.springframework.statemachine.processor.ApplicationListener<org.springframework.statemachine.processor.ApplicationEvent> + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( Lifecycle org.springframework.statemachine.processor.Lifecycle : this . java.util.Set<org.springframework.statemachine.processor.Lifecycle> ) { if ( ! org.springframework.statemachine.processor.Lifecycle . isRunning ( ) ) { org.springframework.statemachine.processor.Lifecycle . start ( ) ; } } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { for ( Lifecycle org.springframework.statemachine.processor.Lifecycle : this . java.util.Set<org.springframework.statemachine.processor.Lifecycle> ) { if ( org.springframework.statemachine.processor.Lifecycle . isRunning ( ) ) { org.springframework.statemachine.processor.Lifecycle . stop ( ) ; } } this . boolean = false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return true ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( java.lang.Object ) ; return ( java.lang.Class<> != null ) ? java.lang.Class<> : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { java.lang.String java.lang.String = java.lang.String + STRING + java.lang.reflect.Method . java.lang.String ( ) + STRING + ClassUtils . getShortNameAsProperty ( java.lang.Class<> ) ; java.lang.String java.lang.String = java.lang.String ; int int = NUMBER ; while ( org.springframework.statemachine.processor.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { java.lang.String = java.lang.String + STRING + ( ++ int ) ; } return java.lang.String ; }  <METHOD_END>
