<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( BeanFactory org.springframework.integration.ip.config.BeanFactory ) { this . org.springframework.integration.ip.config.BeanFactory = org.springframework.integration.ip.config.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . org.springframework.integration.ip.config.AbstractConnectionFactory != null ? this . org.springframework.integration.ip.config.AbstractConnectionFactory . getClass ( ) : this . java.lang.String == null ? AbstractConnectionFactory .class : boolean ( ) ? AbstractServerConnectionFactory .class : boolean ( ) ? AbstractClientConnectionFactory .class : AbstractConnectionFactory .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.ip.config.AbstractConnectionFactory org.springframework.integration.ip.config.AbstractConnectionFactory ( ) java.lang.Exception { if ( ! this . boolean ) { this . org.springframework.integration.ip.config.TcpMessageMapper . setBeanFactory ( this . org.springframework.integration.ip.config.BeanFactory ) ; } if ( this . boolean ) { if ( boolean ( ) ) { TcpNioServerConnectionFactory org.springframework.integration.ip.config.TcpNioServerConnectionFactory = new TcpNioServerConnectionFactory ( this . int ) ; this . void ( org.springframework.integration.ip.config.TcpNioServerConnectionFactory ) ; this . void ( org.springframework.integration.ip.config.TcpNioServerConnectionFactory ) ; org.springframework.integration.ip.config.TcpNioServerConnectionFactory . setUsingDirectBuffers ( this . boolean ) ; org.springframework.integration.ip.config.TcpNioServerConnectionFactory . setTcpNioConnectionSupport ( this . org.springframework.integration.ip.config.TcpNioConnectionSupport ( ) ) ; this . org.springframework.integration.ip.config.AbstractConnectionFactory = org.springframework.integration.ip.config.TcpNioServerConnectionFactory ; } else { TcpNioClientConnectionFactory org.springframework.integration.ip.config.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( this . java.lang.String , this . int ) ; this . void ( org.springframework.integration.ip.config.TcpNioClientConnectionFactory ) ; org.springframework.integration.ip.config.TcpNioClientConnectionFactory . setUsingDirectBuffers ( this . boolean ) ; org.springframework.integration.ip.config.TcpNioClientConnectionFactory . setTcpNioConnectionSupport ( this . org.springframework.integration.ip.config.TcpNioConnectionSupport ( ) ) ; this . org.springframework.integration.ip.config.AbstractConnectionFactory = org.springframework.integration.ip.config.TcpNioClientConnectionFactory ; } if ( this . java.lang.Integer != null ) { this . org.springframework.integration.ip.config.AbstractConnectionFactory . setSslHandshakeTimeout ( this . java.lang.Integer ) ; } } else { if ( boolean ( ) ) { TcpNetServerConnectionFactory org.springframework.integration.ip.config.TcpNetServerConnectionFactory = new TcpNetServerConnectionFactory ( this . int ) ; this . void ( org.springframework.integration.ip.config.TcpNetServerConnectionFactory ) ; this . void ( org.springframework.integration.ip.config.TcpNetServerConnectionFactory ) ; org.springframework.integration.ip.config.TcpNetServerConnectionFactory . setTcpSocketFactorySupport ( this . org.springframework.integration.ip.config.TcpSocketFactorySupport ( ) ) ; this . org.springframework.integration.ip.config.AbstractConnectionFactory = org.springframework.integration.ip.config.TcpNetServerConnectionFactory ; } else { TcpNetClientConnectionFactory org.springframework.integration.ip.config.TcpNetClientConnectionFactory = new TcpNetClientConnectionFactory ( this . java.lang.String , this . int ) ; this . void ( org.springframework.integration.ip.config.TcpNetClientConnectionFactory ) ; org.springframework.integration.ip.config.TcpNetClientConnectionFactory . setTcpSocketFactorySupport ( this . org.springframework.integration.ip.config.TcpSocketFactorySupport ( ) ) ; this . org.springframework.integration.ip.config.AbstractConnectionFactory = org.springframework.integration.ip.config.TcpNetClientConnectionFactory ; } } return this . org.springframework.integration.ip.config.AbstractConnectionFactory ; }  <METHOD_END>
<METHOD_START> private void void ( AbstractConnectionFactory org.springframework.integration.ip.config.AbstractConnectionFactory ) { org.springframework.integration.ip.config.AbstractConnectionFactory . setDeserializer ( this . org.springframework.integration.ip.config.Deserializer<> ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setInterceptorFactoryChain ( this . org.springframework.integration.ip.config.TcpConnectionInterceptorFactoryChain ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setLookupHost ( this . boolean ) ; this . org.springframework.integration.ip.config.TcpMessageMapper . setApplySequence ( this . boolean ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setMapper ( this . org.springframework.integration.ip.config.TcpMessageMapper ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSerializer ( this . org.springframework.integration.ip.config.Serializer<> ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSingleUse ( this . boolean ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoKeepAlive ( this . boolean ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoLinger ( this . int ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoReceiveBufferSize ( this . int ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoSendBufferSize ( this . int ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoTcpNoDelay ( this . boolean ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoTimeout ( this . int ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setSoTrafficClass ( this . int ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setTaskExecutor ( this . java.util.concurrent.Executor ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setBeanName ( this . java.lang.String ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setTcpSocketSupport ( this . org.springframework.integration.ip.config.TcpSocketSupport ) ; org.springframework.integration.ip.config.AbstractConnectionFactory . setApplicationEventPublisher ( this . org.springframework.integration.ip.config.ApplicationEventPublisher ) ; if ( this . java.lang.Long != null ) { org.springframework.integration.ip.config.AbstractConnectionFactory . setReadDelay ( this . java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractServerConnectionFactory org.springframework.integration.ip.config.AbstractServerConnectionFactory ) { org.springframework.integration.ip.config.AbstractServerConnectionFactory . setLocalAddress ( this . java.lang.String ) ; org.springframework.integration.ip.config.AbstractServerConnectionFactory . setBacklog ( this . int ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.config.TcpSocketFactorySupport org.springframework.integration.ip.config.TcpSocketFactorySupport ( ) { if ( this . org.springframework.integration.ip.config.TcpSocketFactorySupport != null ) { return this . org.springframework.integration.ip.config.TcpSocketFactorySupport ; } if ( this . org.springframework.integration.ip.config.TcpSSLContextSupport == null ) { return new DefaultTcpNetSocketFactorySupport ( ) ; } else { return new DefaultTcpNetSSLSocketFactorySupport ( this . org.springframework.integration.ip.config.TcpSSLContextSupport ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ip.config.TcpNioConnectionSupport org.springframework.integration.ip.config.TcpNioConnectionSupport ( ) { if ( this . org.springframework.integration.ip.config.TcpNioConnectionSupport != null ) { return this . org.springframework.integration.ip.config.TcpNioConnectionSupport ; } if ( this . org.springframework.integration.ip.config.TcpSSLContextSupport == null ) { return new DefaultTcpNioConnectionSupport ( ) ; } else { return new DefaultTcpNioSSLConnectionSupport ( this . org.springframework.integration.ip.config.TcpSSLContextSupport ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; Assert . isTrue ( boolean ( ) || boolean ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { Assert . notNull ( java.util.concurrent.Executor , STRING ) ; this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( Deserializer < ? > org.springframework.integration.ip.config.Deserializer<?> ) { Assert . notNull ( org.springframework.integration.ip.config.Deserializer<> , STRING ) ; this . org.springframework.integration.ip.config.Deserializer<?> = org.springframework.integration.ip.config.Deserializer<> ; }  <METHOD_END>
<METHOD_START> public void void ( Serializer < ? > org.springframework.integration.ip.config.Serializer<?> ) { Assert . notNull ( org.springframework.integration.ip.config.Serializer<> , STRING ) ; this . org.springframework.integration.ip.config.Serializer<?> = org.springframework.integration.ip.config.Serializer<> ; }  <METHOD_END>
<METHOD_START> public void void ( TcpMessageMapper org.springframework.integration.ip.config.TcpMessageMapper ) { Assert . notNull ( org.springframework.integration.ip.config.TcpMessageMapper , STRING ) ; this . org.springframework.integration.ip.config.TcpMessageMapper = org.springframework.integration.ip.config.TcpMessageMapper ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( TcpConnectionInterceptorFactoryChain org.springframework.integration.ip.config.TcpConnectionInterceptorFactoryChain ) { Assert . notNull ( org.springframework.integration.ip.config.TcpConnectionInterceptorFactoryChain , STRING ) ; this . org.springframework.integration.ip.config.TcpConnectionInterceptorFactoryChain = org.springframework.integration.ip.config.TcpConnectionInterceptorFactoryChain ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.ip.config.AbstractConnectionFactory . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.ip.config.AbstractConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.config.AbstractConnectionFactory . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSSLContextSupport org.springframework.integration.ip.config.TcpSSLContextSupport ) { Assert . notNull ( org.springframework.integration.ip.config.TcpSSLContextSupport , STRING ) ; this . org.springframework.integration.ip.config.TcpSSLContextSupport = org.springframework.integration.ip.config.TcpSSLContextSupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSocketSupport org.springframework.integration.ip.config.TcpSocketSupport ) { Assert . notNull ( org.springframework.integration.ip.config.TcpSocketSupport , STRING ) ; this . org.springframework.integration.ip.config.TcpSocketSupport = org.springframework.integration.ip.config.TcpSocketSupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpNioConnectionSupport org.springframework.integration.ip.config.TcpNioConnectionSupport ) { Assert . notNull ( org.springframework.integration.ip.config.TcpNioConnectionSupport , STRING ) ; this . org.springframework.integration.ip.config.TcpNioConnectionSupport = org.springframework.integration.ip.config.TcpNioConnectionSupport ; }  <METHOD_END>
<METHOD_START> public void void ( TcpSocketFactorySupport org.springframework.integration.ip.config.TcpSocketFactorySupport ) { Assert . notNull ( org.springframework.integration.ip.config.TcpSocketFactorySupport , STRING ) ; this . org.springframework.integration.ip.config.TcpSocketFactorySupport = org.springframework.integration.ip.config.TcpSocketFactorySupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.ip.config.ApplicationEventPublisher ) { this . org.springframework.integration.ip.config.ApplicationEventPublisher = org.springframework.integration.ip.config.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return STRING . boolean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return STRING . boolean ( this . java.lang.String ) ; }  <METHOD_END>
