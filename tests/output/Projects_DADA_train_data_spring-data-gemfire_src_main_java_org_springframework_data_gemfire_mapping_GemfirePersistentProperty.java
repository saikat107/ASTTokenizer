<METHOD_START> public void ( Property org.springframework.data.gemfire.mapping.Property , PersistentEntity < ? , org.springframework.data.gemfire.mapping.GemfirePersistentProperty > org.springframework.data.gemfire.mapping.PersistentEntity<?,org.springframework.data.gemfire.mapping.GemfirePersistentProperty> , SimpleTypeHolder org.springframework.data.gemfire.mapping.SimpleTypeHolder ) { super( org.springframework.data.gemfire.mapping.Property , org.springframework.data.gemfire.mapping.PersistentEntity<,org.springframework.data.gemfire.mapping.GemfirePersistentProperty> , org.springframework.data.gemfire.mapping.SimpleTypeHolder ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.mapping.Association<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> < org.springframework.data.gemfire.mapping.GemfirePersistentProperty > org.springframework.data.gemfire.mapping.Association<org.springframework.data.gemfire.mapping.GemfirePersistentProperty> ( ) { return new Association <> ( this , null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return isAnnotationPresent ( Id .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( super. isIdProperty ( ) || java.util.Set<java.lang.String> . boolean ( getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( super. usePropertyAccess ( ) || ! getProperty ( ) . isFieldBacked ( ) ) ; }  <METHOD_END>
