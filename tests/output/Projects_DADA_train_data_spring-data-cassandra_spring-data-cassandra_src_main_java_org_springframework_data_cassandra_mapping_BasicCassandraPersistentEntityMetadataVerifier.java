<METHOD_START> @ java.lang.Override public void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> ) throws org.springframework.data.cassandra.mapping.MappingException { if ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getType ( ) . isInterface ( ) || ! org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . findAnnotation ( Table .class ) . isPresent ( ) ) { return; } java.util.List<org.springframework.data.cassandra.mapping.MappingException> < MappingException > java.util.List<org.springframework.data.cassandra.mapping.MappingException> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.MappingException> <> ( ) ; final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; final java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> < CassandraPersistentProperty > java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> = new java.util.ArrayList<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> <> ( ) ; if ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . isCompositePrimaryKey ( ) ) { java.util.List<org.springframework.data.cassandra.mapping.MappingException> . add ( new MappingException ( java.lang.String . java.lang.String ( STRING , Table .class . java.lang.String ( ) , PrimaryKeyClass .class . java.lang.String ( ) ) ) ) ; } org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> . getPersistentProperties ( ) . forEach ( property -> { if ( property . isIdProperty ( ) ) { idProperties . add ( property ) ; } else if ( property . isClusterKeyColumn ( ) ) { primaryKeyColumns . add ( property ) ; } else if ( property . isPartitionKeyColumn ( ) ) { partitionKeyColumns . add ( property ) ; primaryKeyColumns . add ( property ) ; } } ) ; if ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . isEmpty ( ) ) { if ( java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . size ( ) != NUMBER ) { java.util.List<org.springframework.data.cassandra.mapping.MappingException> . add ( new MappingException ( java.lang.String . java.lang.String ( STRING , Table .class . java.lang.String ( ) , java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . size ( ) ) ) ) ; void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , java.util.List<org.springframework.data.cassandra.mapping.MappingException> ) ; } } if ( ! java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . isEmpty ( ) && ! java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . isEmpty ( ) ) { java.util.List<org.springframework.data.cassandra.mapping.MappingException> . add ( new MappingException ( java.lang.String . java.lang.String ( STRING , Table .class . java.lang.String ( ) , Id .class . java.lang.String ( ) , PrimaryKeyColumn .class . java.lang.String ( ) ) ) ) ; void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , java.util.List<org.springframework.data.cassandra.mapping.MappingException> ) ; } if ( ! java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . isEmpty ( ) && java.util.List<org.springframework.data.cassandra.mapping.CassandraPersistentProperty> . isEmpty ( ) ) { java.util.List<org.springframework.data.cassandra.mapping.MappingException> . add ( new MappingException ( java.lang.String . java.lang.String ( STRING , PrimaryKeyColumn .class . java.lang.String ( ) ) ) ) ; } if ( ! java.util.List<org.springframework.data.cassandra.mapping.MappingException> . isEmpty ( ) ) { void ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , java.util.List<org.springframework.data.cassandra.mapping.MappingException> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated @ java.lang.SuppressWarnings ( STRING ) public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated @ java.lang.SuppressWarnings ( STRING ) public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private static void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.mapping.CassandraPersistentEntity<?> , java.util.List<org.springframework.data.cassandra.mapping.MappingException> < MappingException > java.util.List<org.springframework.data.cassandra.mapping.MappingException> ) { throw new VerifierMappingExceptions ( org.springframework.data.cassandra.mapping.CassandraPersistentEntity<> , java.util.List<org.springframework.data.cassandra.mapping.MappingException> ) ; }  <METHOD_END>
