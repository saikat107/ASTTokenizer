<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element ) { return CassandraSessionFactoryBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { super. doParse ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext , org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ; CassandraMappingXmlBeanFactoryPostProcessorRegistrar . ensureRegistration ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Attr org.w3c.dom.Attr , ParserContext org.springframework.data.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Attr . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { addOptionalPropertyReference ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Attr , DefaultBeanNames . CONVERTER ) ; } else if ( STRING . boolean ( java.lang.String ) ) { addOptionalPropertyValue ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Attr , SchemaAction . NONE . name ( ) ) ; } else { super. parseUnhandledSessionElementAttribute ( org.w3c.dom.Attr , org.springframework.data.cassandra.config.xml.ParserContext , org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { super. setDefaultProperties ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ; addRequiredPropertyValue ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , SchemaAction . NONE . name ( ) ) ; addRequiredPropertyReference ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , DefaultBeanNames . CONVERTER ) ; }  <METHOD_END>
