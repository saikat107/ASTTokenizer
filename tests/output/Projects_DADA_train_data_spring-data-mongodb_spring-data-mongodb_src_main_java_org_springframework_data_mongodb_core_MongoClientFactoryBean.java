<METHOD_START> public void void ( MongoClientOptions org.springframework.data.mongodb.core.MongoClientOptions ) { this . org.springframework.data.mongodb.core.MongoClientOptions = org.springframework.data.mongodb.core.MongoClientOptions ; }  <METHOD_END>
<METHOD_START> public void void ( MongoCredential [] org.springframework.data.mongodb.core.MongoCredential[] ) { this . java.util.List<org.springframework.data.mongodb.core.MongoCredential> = java.util.List ( org.springframework.data.mongodb.core.MongoCredential[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( ServerAddress [] org.springframework.data.mongodb.core.ServerAddress[] ) { this . java.util.List<org.springframework.data.mongodb.core.ServerAddress> = java.util.List ( org.springframework.data.mongodb.core.ServerAddress[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public void void ( PersistenceExceptionTranslator org.springframework.data.mongodb.core.PersistenceExceptionTranslator ) { this . org.springframework.data.mongodb.core.PersistenceExceptionTranslator = org.springframework.data.mongodb.core.PersistenceExceptionTranslator == null ? org.springframework.data.mongodb.core.PersistenceExceptionTranslator : org.springframework.data.mongodb.core.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<? extends org.springframework.data.mongodb.core.MongoClient> < ? extends MongoClient > java.lang.Class<? extends org.springframework.data.mongodb.core.MongoClient> ( ) { return MongoClient .class ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.DataAccessException org.springframework.data.mongodb.core.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { return org.springframework.data.mongodb.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.MongoClient org.springframework.data.mongodb.core.MongoClient ( ) java.lang.Exception { if ( org.springframework.data.mongodb.core.MongoClientOptions == null ) { org.springframework.data.mongodb.core.MongoClientOptions = MongoClientOptions . builder ( ) . build ( ) ; } if ( java.util.List<org.springframework.data.mongodb.core.MongoCredential> == null ) { java.util.List<org.springframework.data.mongodb.core.MongoCredential> = java.util.Collections . java.util.List<java.lang.Object> ( ) ; } return org.springframework.data.mongodb.core.MongoClient ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MongoClient org.springframework.data.mongodb.core.MongoClient ) throws java.lang.Exception { org.springframework.data.mongodb.core.MongoClient . close ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoClient org.springframework.data.mongodb.core.MongoClient ( ) java.net.UnknownHostException { if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.data.mongodb.core.ServerAddress> ) ) { return new MongoClient ( java.util.List<org.springframework.data.mongodb.core.ServerAddress> , java.util.List<org.springframework.data.mongodb.core.MongoCredential> , org.springframework.data.mongodb.core.MongoClientOptions ) ; } return new MongoClient ( org.springframework.data.mongodb.core.ServerAddress ( ) , java.util.List<org.springframework.data.mongodb.core.MongoCredential> , org.springframework.data.mongodb.core.MongoClientOptions ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.ServerAddress org.springframework.data.mongodb.core.ServerAddress ( ) java.net.UnknownHostException { ServerAddress org.springframework.data.mongodb.core.ServerAddress = new ServerAddress ( ) ; return new ServerAddress ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.data.mongodb.core.ServerAddress . getHost ( ) , java.lang.Integer != null ? java.lang.Integer . int ( ) : org.springframework.data.mongodb.core.ServerAddress . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( T [] T[] ) { if ( T[] == null ) { return java.util.Collections . java.util.List<T> ( ) ; } java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( ) ; for ( T T : T[] ) { if ( T != null ) { java.util.List<T> . boolean ( T ) ; } } return java.util.Collections . java.util.List<T> ( java.util.List<T> ) ; }  <METHOD_END>
