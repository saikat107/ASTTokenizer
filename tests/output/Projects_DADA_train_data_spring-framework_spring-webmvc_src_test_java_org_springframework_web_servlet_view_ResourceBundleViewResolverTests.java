<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.ResourceBundleViewResolver . setBasename ( java.lang.String ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setCache ( boolean ( ) ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setDefaultParentView ( STRING ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.web.servlet.view.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; fail ( STRING ) ; } catch ( BeanIsAbstractException org.springframework.web.servlet.view.BeanIsAbstractException ) { } try { org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; fail ( STRING ) ; } catch ( BeanIsAbstractException org.springframework.web.servlet.view.BeanIsAbstractException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertThat ( org.springframework.web.servlet.view.View , instanceOf ( InternalResourceView .class ) ) ; InternalResourceView org.springframework.web.servlet.view.InternalResourceView = ( InternalResourceView ) org.springframework.web.servlet.view.View ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.InternalResourceView . getUrl ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.servlet.view.InternalResourceView . getStaticAttributes ( ) ; assertEquals ( STRING , NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , AbstractView . DEFAULT_CONTENT_TYPE , org.springframework.web.servlet.view.InternalResourceView . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertThat ( org.springframework.web.servlet.view.View , instanceOf ( InternalResourceView .class ) ) ; InternalResourceView org.springframework.web.servlet.view.InternalResourceView = ( InternalResourceView ) org.springframework.web.servlet.view.View ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.InternalResourceView . getUrl ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.InternalResourceView . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceBundleViewResolver org.springframework.web.servlet.view.ResourceBundleViewResolver = new ResourceBundleViewResolver ( ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setBasename ( java.lang.String ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setCache ( boolean ( ) ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setDefaultParentView ( STRING ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setLocalesToInitialize ( new java.util.Locale [] { java.util.Locale . java.util.Locale , java.util.Locale . java.util.Locale } ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . setApplicationContext ( org.springframework.web.servlet.view.StaticWebApplicationContext ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertThat ( org.springframework.web.servlet.view.View , instanceOf ( InternalResourceView .class ) ) ; InternalResourceView org.springframework.web.servlet.view.InternalResourceView = ( InternalResourceView ) org.springframework.web.servlet.view.View ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.InternalResourceView . getUrl ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.InternalResourceView . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( org.springframework.web.servlet.view.ResourceBundleViewResolver . isCache ( ) ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; View org.springframework.web.servlet.view.View = org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertSame ( org.springframework.web.servlet.view.View , org.springframework.web.servlet.view.View ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNull ( org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView = ( org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView ) org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView = ( org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView ) org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView = ( org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView ) org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView . getBeanName ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.servlet.view.ResourceBundleViewResolverTests.TestView . int ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.util.MissingResourceException .class ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.ResourceBundleViewResolver . setBasename ( STRING ) ; org.springframework.web.servlet.view.ResourceBundleViewResolver . resolveViewName ( STRING , java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> public void void ( Resource org.springframework.web.servlet.view.Resource ) { if ( ! ( org.springframework.web.servlet.view.Resource instanceof ServletContextResource ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.web.servlet.view.Resource . getClass ( ) . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , HttpServletRequest org.springframework.web.servlet.view.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.HttpServletResponse ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { ++ int ; }  <METHOD_END>
