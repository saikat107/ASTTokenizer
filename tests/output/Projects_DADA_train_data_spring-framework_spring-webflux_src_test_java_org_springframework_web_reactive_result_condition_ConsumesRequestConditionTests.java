<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertEquals ( java.util.Collections . java.util.Set<java.lang.Object> ( ) , org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getConsumableMediaTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING , STRING ) ; assertNotNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; assertNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; int int = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING , STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING , STRING ) ; int int = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int < NUMBER ) ; int = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . compareTo ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertTrue ( STRING + int , int > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . combine ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition ) ; assertEquals ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.ConsumesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . combine ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition ) ; assertEquals ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , org.springframework.web.reactive.result.condition.ConsumesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING } ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( java.lang.String[] , java.lang.String[] ) ; void ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange = org.springframework.web.reactive.result.condition.MockServerWebExchange ( STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING , STRING ) ; ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; void ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition , STRING ) ; org.springframework.web.reactive.result.condition.ConsumesRequestCondition = new ConsumesRequestCondition ( STRING ) ; org.springframework.web.reactive.result.condition.ConsumesRequestCondition = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getMatchingCondition ( org.springframework.web.reactive.result.condition.MockServerWebExchange ) ; assertNull ( org.springframework.web.reactive.result.condition.ConsumesRequestCondition ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConsumesRequestCondition org.springframework.web.reactive.result.condition.ConsumesRequestCondition , java.lang.String ... java.lang.String[] ) { java.util.Collection<org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression> < ConsumeMediaTypeExpression > java.util.Collection<org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression> = org.springframework.web.reactive.result.condition.ConsumesRequestCondition . getContent ( ) ; assertEquals ( STRING , java.util.Collection<org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression> . size ( ) , java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean boolean = false ; for ( ConsumeMediaTypeExpression org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression : java.util.Collection<org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression> ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.condition.ConsumeMediaTypeExpression . getMediaType ( ) . toString ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { boolean = true ; break; } } if ( ! boolean ) { fail ( STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.condition.MockServerWebExchange org.springframework.web.reactive.result.condition.MockServerWebExchange ( java.lang.String java.lang.String ) { return MockServerHttpRequest . post ( STRING ) . header ( HttpHeaders . CONTENT_TYPE , java.lang.String ) . toExchange ( ) ; }  <METHOD_END>
