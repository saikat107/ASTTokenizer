<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.ApplicationContext org.springframework.web.reactive.result.method.annotation.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.result.method.annotation.RequestMappingViewResolutionIntegrationTests.WebConfig .class ) ; org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.web.reactive.result.method.annotation.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , performGet ( STRING , MediaType . TEXT_HTML , java.lang.String .class ) . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . ifNoneMatch ( STRING ) . build ( ) ; ResponseEntity < java.lang.String > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> = getRestTemplate ( ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> , java.lang.String .class ) ; assertEquals ( HttpStatus . NOT_MODIFIED , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; assertNull ( org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.String> . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleClientHttpRequestFactory org.springframework.web.reactive.result.method.annotation.SimpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory ( ) { @ java.lang.Override protected void void ( java.net.HttpURLConnection java.net.HttpURLConnection , java.lang.String java.lang.String ) throws java.io.IOException { super. prepareConnection ( java.net.HttpURLConnection , java.lang.String ) ; java.net.HttpURLConnection . void ( false ) ; } } ; java.net.URI java.net.URI = new java.net.URI ( STRING + this . port + STRING ) ; RequestEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> = RequestEntity . get ( java.net.URI ) . accept ( MediaType . ALL ) . build ( ) ; ResponseEntity < java.lang.Void > org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> = new RestTemplate ( org.springframework.web.reactive.result.method.annotation.SimpleClientHttpRequestFactory ) . exchange ( org.springframework.web.reactive.result.method.annotation.RequestEntity<java.lang.Void> , java.lang.Void .class ) ; assertEquals ( HttpStatus . SEE_OTHER , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.result.method.annotation.ResponseEntity<java.lang.Void> . getHeaders ( ) . getLocation ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.net.HttpURLConnection java.net.HttpURLConnection , java.lang.String java.lang.String ) throws java.io.IOException { super. prepareConnection ( java.net.HttpURLConnection , java.lang.String ) ; java.net.HttpURLConnection . void ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.reactive.result.method.annotation.ViewResolverRegistry ) { org.springframework.web.reactive.result.method.annotation.ViewResolverRegistry . freeMarker ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer ( ) { FreeMarkerConfigurer org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer . setPreferFileSystemAccess ( false ) ; org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer . setTemplateLoaderPath ( STRING ) ; return org.springframework.web.reactive.result.method.annotation.FreeMarkerConfigurer ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> , Model org.springframework.web.reactive.result.method.annotation.Model , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { if ( org.springframework.web.reactive.result.method.annotation.ServerWebExchange . checkNotModified ( STRING ) ) { return null ; } org.springframework.web.reactive.result.method.annotation.Model . addAttribute ( STRING , STRING + java.util.Optional<java.lang.String> . java.lang.String ( STRING ) + STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
