<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression . getAST ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; assertEquals ( java.lang.Integer .class , org.springframework.expression.spel.standard.SpelExpression . getValueType ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getAST ( ) . getValue ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; EvaluationContext org.springframework.expression.spel.standard.EvaluationContext = new StandardEvaluationContext ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) . getValueType ( ) ; assertEquals ( java.lang.Integer .class , java.lang.Class<> ) ; java.lang.Class<?> = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) . getValueType ( org.springframework.expression.spel.standard.EvaluationContext ) ; assertEquals ( java.lang.Integer .class , java.lang.Class<> ) ; java.lang.Class<?> = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) . getValueType ( ) ; assertNull ( java.lang.Class<> ) ; java.lang.Class<?> = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) . getValueType ( org.springframework.expression.spel.standard.EvaluationContext ) ; assertNull ( java.lang.Class<> ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) . getValue ( org.springframework.expression.spel.standard.EvaluationContext , java.lang.Integer .class ) ; assertNull ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression . getAST ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression ) ; assertNotNull ( org.springframework.expression.spel.standard.SpelExpression . getAST ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . MISSING_CONSTRUCTOR_ARGS , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . RUN_OUT_OF_ARGUMENTS , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . RUN_OUT_OF_ARGUMENTS , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . RUN_OUT_OF_ARGUMENTS , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . NON_TERMINATING_DOUBLE_QUOTED_STRING , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( SpelMessage . NON_TERMINATING_QUOTED_STRING , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.ParseException . getMessage ( ) . contains ( org.springframework.expression.spel.standard.ParseException . getExpressionString ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.expression.spel.standard.SpelExpression . getValue ( java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new SpelExpressionParser ( ) . parseRaw ( STRING ) ; fail ( STRING ) ; } catch ( SpelParseException org.springframework.expression.spel.standard.SpelParseException ) { assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelParseException . getPosition ( ) ) ; assertEquals ( SpelMessage . UNEXPECTED_ESCAPE_CHAR , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpelExpression org.springframework.expression.spel.standard.SpelExpression = new SpelExpressionParser ( ) . parseRaw ( STRING ) ; SpelNode org.springframework.expression.spel.standard.SpelNode = org.springframework.expression.spel.standard.SpelExpression . getAST ( ) ; OpOr org.springframework.expression.spel.standard.OpOr = ( OpOr ) org.springframework.expression.spel.standard.SpelNode ; OpAnd org.springframework.expression.spel.standard.OpAnd = ( OpAnd ) org.springframework.expression.spel.standard.OpOr . getLeftOperand ( ) ; SpelNode org.springframework.expression.spel.standard.SpelNode = org.springframework.expression.spel.standard.OpOr . getRightOperand ( ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelNode . getStartPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.SpelNode . getEndPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getLeftOperand ( ) . getStartPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getLeftOperand ( ) . getEndPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getRightOperand ( ) . getStartPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getRightOperand ( ) . getEndPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getStartPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpAnd . getEndPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpOr . getStartPosition ( ) ) ; assertEquals ( NUMBER , org.springframework.expression.spel.standard.OpOr . getEndPosition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TokenKind org.springframework.expression.spel.standard.TokenKind = TokenKind . NOT ; assertFalse ( org.springframework.expression.spel.standard.TokenKind . hasPayload ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.TokenKind . toString ( ) ) ; org.springframework.expression.spel.standard.TokenKind = TokenKind . MINUS ; assertFalse ( org.springframework.expression.spel.standard.TokenKind . hasPayload ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.TokenKind . toString ( ) ) ; org.springframework.expression.spel.standard.TokenKind = TokenKind . LITERAL_STRING ; assertEquals ( STRING , org.springframework.expression.spel.standard.TokenKind . toString ( ) ) ; assertTrue ( org.springframework.expression.spel.standard.TokenKind . hasPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Token org.springframework.expression.spel.standard.Token = new Token ( TokenKind . NOT , NUMBER , NUMBER ) ; assertEquals ( TokenKind . NOT , token . kind ) ; assertEquals ( NUMBER , token . startPos ) ; assertEquals ( NUMBER , token . endPos ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.Token . toString ( ) ) ; org.springframework.expression.spel.standard.Token = new Token ( TokenKind . LITERAL_STRING , STRING . char[] ( ) , NUMBER , NUMBER ) ; assertEquals ( TokenKind . LITERAL_STRING , token . kind ) ; assertEquals ( NUMBER , token . startPos ) ; assertEquals ( NUMBER , token . endPos ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.Token . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExpressionException org.springframework.expression.spel.standard.ExpressionException = new ExpressionException ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getSimpleMessage ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . toDetailedString ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getMessage ( ) ) ; org.springframework.expression.spel.standard.ExpressionException = new ExpressionException ( STRING , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getSimpleMessage ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . toDetailedString ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getMessage ( ) ) ; org.springframework.expression.spel.standard.ExpressionException = new ExpressionException ( STRING , NUMBER , STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getSimpleMessage ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . toDetailedString ( ) ) ; assertEquals ( STRING , org.springframework.expression.spel.standard.ExpressionException . getMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING , java.lang.String .class ) ; void ( STRING , STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING , NUMBER , java.lang.Integer .class ) ; void ( STRING , NUMBER , java.lang.Integer .class ) ; void ( STRING , NUMBER , java.lang.Integer .class ) ; void ( STRING , - NUMBER , java.lang.Integer .class ) ; void ( STRING , NUMBER , java.lang.Long .class ) ; void ( STRING , NUMBER , java.lang.Long .class ) ; void ( STRING , NUMBER , java.lang.Integer .class ) ; void ( STRING , NUMBER , java.lang.Long .class ) ; void ( STRING , NUMBER , java.lang.Integer .class ) ; void ( STRING , NUMBER , java.lang.Long .class ) ; void ( STRING , SpelMessage . NOT_AN_INTEGER ) ; void ( STRING , SpelMessage . NOT_A_LONG ) ; void ( STRING , SpelMessage . UNEXPECTED_DATA_AFTER_DOT ) ; void ( STRING , SpelMessage . REAL_CANNOT_BE_LONG ) ; void ( STRING , NUMBER , java.lang.Float .class ) ; void ( STRING , NUMBER , java.lang.Double .class ) ; void ( STRING , NUMBER , java.lang.Double .class ) ; void ( STRING , NUMBER , java.lang.Double .class ) ; void ( STRING , NUMBER , java.lang.Double .class ) ; void ( STRING , NUMBER , java.lang.Double .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; SpelExpression org.springframework.expression.spel.standard.SpelExpression = org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.standard.SpelExpression . getValue ( ) ; assertEquals ( java.lang.Object , java.lang.Object ) ; assertEquals ( java.lang.Class<> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( java.lang.Exception . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , SpelMessage org.springframework.expression.spel.standard.SpelMessage ) { try { SpelExpressionParser org.springframework.expression.spel.standard.SpelExpressionParser = new SpelExpressionParser ( ) ; org.springframework.expression.spel.standard.SpelExpressionParser . parseRaw ( java.lang.String ) ; fail ( ) ; } catch ( ParseException org.springframework.expression.spel.standard.ParseException ) { assertTrue ( org.springframework.expression.spel.standard.ParseException instanceof SpelParseException ) ; SpelParseException org.springframework.expression.spel.standard.SpelParseException = ( SpelParseException ) org.springframework.expression.spel.standard.ParseException ; assertEquals ( org.springframework.expression.spel.standard.SpelMessage , org.springframework.expression.spel.standard.SpelParseException . getMessageCode ( ) ) ; } }  <METHOD_END>
