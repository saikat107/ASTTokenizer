<METHOD_START> public void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { this . java.lang.instrument.ClassFileTransformer = java.lang.instrument.ClassFileTransformer ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.instrument.ClassFileTransformer . java.lang.Class<? extends java.lang.instrument.ClassFileTransformer> ( ) . java.lang.ClassLoader ( ) ; try { java.lang.String java.lang.String = org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin.Dummy .class . java.lang.String ( ) . java.lang.String ( '.' , '/' ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.lang.ClassLoader . java.io.InputStream ( java.lang.String + STRING ) ) ; java.lang.instrument.ClassFileTransformer . byte[] ( java.lang.ClassLoader , java.lang.String , null , null , byte[] ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return int ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return java.lang.String ( ) ; } else if ( STRING . boolean ( java.lang.String ) ) { return byte[] ( ( java.lang.String ) java.lang.Object[] [ NUMBER ] , ( byte [] ) java.lang.Object[] [ NUMBER ] , ( java.security.CodeSource ) java.lang.Object[] [ NUMBER ] , ( java.lang.ClassLoader ) java.lang.Object[] [ NUMBER ] ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( java.lang.String java.lang.String , byte [] byte[] , java.security.CodeSource java.security.CodeSource , java.lang.ClassLoader java.lang.ClassLoader )			throws java.lang.Exception { byte [] byte[] = java.lang.instrument.ClassFileTransformer . byte[] ( java.lang.ClassLoader , java.lang.String . java.lang.String ( '.' , '/' ) , null , null , byte[] ) ; return ( byte[] != null ? byte[] : byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.instrument.classloading.websphere.WebSphereClassPreDefinePlugin> ( ) . java.lang.String ( ) + STRING + this . java.lang.instrument.ClassFileTransformer ; }  <METHOD_END>
