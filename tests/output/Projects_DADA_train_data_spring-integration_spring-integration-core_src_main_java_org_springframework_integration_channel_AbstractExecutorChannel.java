<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; this . org.springframework.integration.channel.AbstractDispatcher . setMaxSubscribers ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { super. setInterceptors ( java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) ; for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : java.util.List<org.springframework.integration.channel.ChannelInterceptor> ) { if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { super. addInterceptor ( org.springframework.integration.channel.ChannelInterceptor ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { super. addInterceptor ( int , org.springframework.integration.channel.ChannelInterceptor ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int ++ ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ) { boolean boolean = super. removeInterceptor ( org.springframework.integration.channel.ChannelInterceptor ) ; if ( boolean && org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor ( int int ) { ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor = super. removeInterceptor ( int ) ; if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { this . int -- ; } return org.springframework.integration.channel.ChannelInterceptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . int > NUMBER ; }  <METHOD_END>
<METHOD_START> public void ( MessageHandlingRunnable org.springframework.integration.channel.MessageHandlingRunnable ) { this . org.springframework.integration.channel.MessageHandlingRunnable = org.springframework.integration.channel.MessageHandlingRunnable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Message < ? > org.springframework.integration.channel.Message<?> = this . org.springframework.integration.channel.MessageHandlingRunnable . getMessage ( ) ; MessageHandler org.springframework.integration.channel.MessageHandler = this . org.springframework.integration.channel.MessageHandlingRunnable . getMessageHandler ( ) ; Assert . notNull ( org.springframework.integration.channel.MessageHandler , STRING ) ; java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> = null ; try { if ( org.springframework.integration.channel.AbstractExecutorChannel .this . int > NUMBER ) { java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> = new java.util.ArrayDeque<org.springframework.integration.channel.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > ( ) ; org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<?> ( org.springframework.integration.channel.Message<> , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ; if ( org.springframework.integration.channel.Message<> == null ) { return; } } org.springframework.integration.channel.MessageHandler . handleMessage ( org.springframework.integration.channel.Message<> ) ; if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ) { void ( org.springframework.integration.channel.Message<> , null , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ) { void ( org.springframework.integration.channel.Message<> , java.lang.Exception , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ; } if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } java.lang.String java.lang.String = STRING + org.springframework.integration.channel.Message<> + STRING + this + STRING + org.springframework.integration.channel.MessageHandler ; throw new MessageDeliveryException ( org.springframework.integration.channel.Message<> , java.lang.String , java.lang.Exception ) ; } catch ( java.lang.Error java.lang.Error ) { if ( ! CollectionUtils . isEmpty ( java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ) { java.lang.String java.lang.String = STRING + org.springframework.integration.channel.Message<> + STRING + this + STRING + org.springframework.integration.channel.MessageHandler ; void ( org.springframework.integration.channel.Message<> , new MessageDeliveryException ( org.springframework.integration.channel.Message<> , java.lang.String , java.lang.Error ) , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ; } throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.channel.Message<?> < ? > org.springframework.integration.channel.Message<?> ( Message < ? > org.springframework.integration.channel.Message<?> , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) { Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<> ; for ( ChannelInterceptor org.springframework.integration.channel.ChannelInterceptor : org.springframework.integration.channel.AbstractExecutorChannel .this . interceptors . interceptors ) { if ( org.springframework.integration.channel.ChannelInterceptor instanceof ExecutorChannelInterceptor ) { ExecutorChannelInterceptor org.springframework.integration.channel.ExecutorChannelInterceptor = ( ExecutorChannelInterceptor ) org.springframework.integration.channel.ChannelInterceptor ; org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.ExecutorChannelInterceptor . beforeHandle ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.AbstractExecutorChannel .this , this . org.springframework.integration.channel.MessageHandlingRunnable . getMessageHandler ( ) ) ; if ( org.springframework.integration.channel.Message<> == null ) { if ( isLoggingEnabled ( ) && logger . isDebugEnabled ( ) ) { logger . debug ( org.springframework.integration.channel.ExecutorChannelInterceptor . getClass ( ) . getSimpleName ( ) + STRING ) ; } void ( null , null , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) ; return null ; } java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> . add ( org.springframework.integration.channel.ExecutorChannelInterceptor ) ; } } return org.springframework.integration.channel.Message<> ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.channel.Message<?> , java.lang.Exception java.lang.Exception , java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> ) { java.util.Iterator<org.springframework.integration.channel.ExecutorChannelInterceptor> < ExecutorChannelInterceptor > java.util.Iterator<org.springframework.integration.channel.ExecutorChannelInterceptor> = java.util.Deque<org.springframework.integration.channel.ExecutorChannelInterceptor> . descendingIterator ( ) ; while ( java.util.Iterator<org.springframework.integration.channel.ExecutorChannelInterceptor> . hasNext ( ) ) { ExecutorChannelInterceptor org.springframework.integration.channel.ExecutorChannelInterceptor = java.util.Iterator<org.springframework.integration.channel.ExecutorChannelInterceptor> . next ( ) ; try { org.springframework.integration.channel.ExecutorChannelInterceptor . afterMessageHandled ( org.springframework.integration.channel.Message<> , org.springframework.integration.channel.AbstractExecutorChannel .this , this . org.springframework.integration.channel.MessageHandlingRunnable . getMessageHandler ( ) , java.lang.Exception ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING + org.springframework.integration.channel.ExecutorChannelInterceptor , java.lang.Throwable ) ; } } }  <METHOD_END>
