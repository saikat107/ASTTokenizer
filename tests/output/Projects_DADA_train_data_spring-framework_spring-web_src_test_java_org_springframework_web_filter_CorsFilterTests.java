<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.filter.CorsConfiguration . setAllowedOrigins ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.filter.CorsConfiguration . setAllowedMethods ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.filter.CorsConfiguration . setAllowedHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.filter.CorsConfiguration . setExposedHeaders ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.web.filter.CorsConfiguration . setMaxAge ( NUMBER ) ; org.springframework.web.filter.CorsConfiguration . setAllowCredentials ( false ) ; org.springframework.web.filter.CorsFilter = new CorsFilter ( r -> config ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.filter.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . GET . name ( ) , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , response . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , response . getHeader ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) ) ; } ; org.springframework.web.filter.CorsFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.filter.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . DELETE . name ( ) , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { fail ( STRING ) ; } ; org.springframework.web.filter.CorsFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertNull ( org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.filter.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . OPTIONS . name ( ) , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , HttpMethod . GET . name ( ) ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> fail ( STRING ) ; org.springframework.web.filter.CorsFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; assertEquals ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_HEADERS ) ) ; assertEquals ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_EXPOSE_HEADERS ) ) ; assertEquals ( NUMBER , java.lang.Long . long ( org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_MAX_AGE ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.web.filter.ServletException , java.io.IOException { MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( HttpMethod . OPTIONS . name ( ) , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ORIGIN , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_METHOD , HttpMethod . DELETE . name ( ) ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( HttpHeaders . ACCESS_CONTROL_REQUEST_HEADERS , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> fail ( STRING ) ; org.springframework.web.filter.CorsFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertNull ( org.springframework.web.filter.MockHttpServletResponse . getHeader ( HttpHeaders . ACCESS_CONTROL_ALLOW_ORIGIN ) ) ; }  <METHOD_END>
