<METHOD_START> public static org.springframework.scheduling.support.DelegatingErrorHandlingRunnable org.springframework.scheduling.support.DelegatingErrorHandlingRunnable ( java.lang.Runnable java.lang.Runnable , ErrorHandler org.springframework.scheduling.support.ErrorHandler , boolean boolean ) { if ( java.lang.Runnable instanceof DelegatingErrorHandlingRunnable ) { return ( DelegatingErrorHandlingRunnable ) java.lang.Runnable ; } ErrorHandler org.springframework.scheduling.support.ErrorHandler = ( org.springframework.scheduling.support.ErrorHandler != null ? org.springframework.scheduling.support.ErrorHandler : org.springframework.scheduling.support.ErrorHandler ( boolean ) ) ; return new DelegatingErrorHandlingRunnable ( java.lang.Runnable , org.springframework.scheduling.support.ErrorHandler ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.scheduling.support.ErrorHandler org.springframework.scheduling.support.ErrorHandler ( boolean boolean ) { return ( boolean ? org.springframework.scheduling.support.ErrorHandler : org.springframework.scheduling.support.ErrorHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.scheduling.support.Log . isErrorEnabled ( ) ) { org.springframework.scheduling.support.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { super. void ( java.lang.Throwable ) ; ReflectionUtils . rethrowRuntimeException ( java.lang.Throwable ) ; }  <METHOD_END>
