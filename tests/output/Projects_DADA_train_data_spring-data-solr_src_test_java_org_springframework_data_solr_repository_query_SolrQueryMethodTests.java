<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.repository.query.SolrEntityInformationCreator = new SolrEntityInformationCreatorImpl ( new SimpleSolrMappingContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getAnnotatedQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getAnnotatedQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getAnnotatedNamedQueryName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . isHighlightQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getAnnotatedQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getProjectionFields ( ) . size ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getAnnotatedQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) . size ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) . size ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) . size ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasPivotFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getPivotFields ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetQueries ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . size ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetMinCount ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetQueries ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetFields ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getFacetPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFilterQueries ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedQuery ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasProjectionFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFacetFields ( ) ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasAnnotatedNamedQueryName ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasFilterQuery ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.repository.query.SolrQueryMethod . getFilterQueries ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( org . springframework . data . solr . core . query . Query . Operator . AND , org.springframework.data.solr.repository.query.SolrQueryMethod . getDefaultOperator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( org . springframework . data . solr . core . query . Query . Operator . NONE , org.springframework.data.solr.repository.query.SolrQueryMethod . getDefaultOperator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getDefType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getRequestHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . isHighlightQuery ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFormatter ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightQuery ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlighSnipplets ( ) ) ; assertThat ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFieldNames ( ) , empty ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFragsize ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPrefix ( ) ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPostfix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertThat ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , equalTo ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFieldNames ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertThat ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , equalTo ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFieldNames ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFormatter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlighSnipplets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlighSnipplets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFragsize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertNull ( org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightFragsize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPrefix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( STRING , org.springframework.data.solr.repository.query.SolrQueryMethod . getHighlightPostfix ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . isDeleteQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod . isDeleteQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFieldStats ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFieldStats ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsFacets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsSelectiveFacets ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getFieldStats ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsFacets ( ) ) ; java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> = org.springframework.data.solr.repository.query.SolrQueryMethod . getStatsSelectiveFacets ( ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , java.util.Map<java.lang.String,java.lang.String[]> . java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) . hasStatsDefinition ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) . hasStatsDefinition ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) . hasStatsDefinition ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) . hasStatsDefinition ( ) ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) . hasStatsDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasSpellcheck ( ) ) ; SpellcheckOptions org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SolrQueryMethod . getSpellcheckOptions ( ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getDictionary ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getAccuracy ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getAlternativeTermCount ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollate ( ) , is ( false ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollateExtendedResults ( ) , is ( false ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollationCollectDocs ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollateParams ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCount ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getDictionary ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollationEvaluations ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollations ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxResultsForSuggest ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getOnlyMorePopular ( ) , is ( false ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getQuery ( ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod = org.springframework.data.solr.repository.query.SolrQueryMethod ( STRING , java.lang.String .class ) ; assertTrue ( org.springframework.data.solr.repository.query.SolrQueryMethod . hasSpellcheck ( ) ) ; SpellcheckOptions org.springframework.data.solr.repository.query.SpellcheckOptions = org.springframework.data.solr.repository.query.SolrQueryMethod . getSpellcheckOptions ( ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getAccuracy ( ) . doubleValue ( ) , is ( closeTo ( NUMBER , NUMBER ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getAlternativeTermCount ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollate ( ) , is ( true ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollateExtendedResults ( ) , is ( true ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollationCollectDocs ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCollateParams ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getCount ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getDictionary ( ) , is ( equalTo ( new java.lang.String [] { STRING } ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollationEvaluations ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxCollations ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getMaxResultsForSuggest ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getOnlyMorePopular ( ) , is ( true ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getQuery ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.solr.repository.query.SpellcheckOptions . getExtendedResults ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.repository.query.SolrQueryMethod org.springframework.data.solr.repository.query.SolrQueryMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.solr.repository.query.SolrQueryMethodTests.Repo1 .class . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new SolrQueryMethod ( java.lang.reflect.Method , new DefaultRepositoryMetadata ( org.springframework.data.solr.repository.query.SolrQueryMethodTests.Repo1 .class ) , new SpelAwareProxyProjectionFactory ( ) , org.springframework.data.solr.repository.query.SolrEntityInformationCreator ) ; }  <METHOD_END>
<METHOD_START> @ Query ( value = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( name = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , fields = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , fields = { STRING , STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( fields = { STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( fields = { STRING , STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( fields = { STRING , STRING } , minCount = NUMBER , limit = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( queries = { STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( queries = { STRING , STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( queries = { STRING , STRING } , minCount = NUMBER , limit = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( fields = STRING , prefix = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Query ( filters = { STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , filters = { STRING , STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( defaultOperator = org . springframework . data . solr . core . query . Query . Operator . AND ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , timeAllowed = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , timeAllowed = - NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( defType = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( requestHandler = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Query ( value = STRING , delete = true ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Highlight java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( fields = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( fields = { STRING , STRING , STRING } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( formatter = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( query = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( snipplets = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( snipplets = - NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( fragsize = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( fragsize = - NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( prefix = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Highlight ( postfix = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Facet ( pivots = { @ Pivot ( { STRING , STRING } ) } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Facet ( pivots = { @ Pivot ( { STRING , STRING } ) , @ Pivot ( { STRING , STRING } ) } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Facet ( pivots = { @ Pivot ( { STRING , STRING } ) , @ Pivot ( { STRING , STRING } ) } , minCount = NUMBER , limit = NUMBER ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Facet ( pivots = { @ Pivot ( { STRING , STRING } ) , @ Pivot ( { STRING , STRING } ) } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Facet ( pivots = { @ Pivot ( { STRING , STRING } ) , @ Pivot ( { STRING , STRING } ) } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( )  <METHOD_END>
<METHOD_START> @ Stats ( STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Stats ( value = STRING , facets = STRING ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Stats ( selective = { @ SelectiveStats ( field = STRING , facets = { STRING , STRING } ) , @ SelectiveStats ( field = STRING , facets = { STRING , STRING } ) } ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Stats ( value = STRING , facets = { STRING , STRING } , selective = @ SelectiveStats ( field = STRING , facets = { STRING , STRING } ) ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Stats java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Spellcheck java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Spellcheck ( accuracy = NUMBER , alternativeTermCount = NUMBER , buildDictionary = true , collate = true , collateExtendedResults = true , count = NUMBER , dictionaries = STRING , maxCollationEvaluations = NUMBER , maxCollationCollectDocs = NUMBER , maxCollations = NUMBER , maxCollationsTries = NUMBER , maxResultsForSuggest = NUMBER , onlyMorePopular = true , extendedResults = true ) java.util.List<org.springframework.data.solr.repository.query.ProductBean> < ProductBean > java.util.List<org.springframework.data.solr.repository.query.ProductBean> ( java.lang.String java.lang.String );  <METHOD_END>
