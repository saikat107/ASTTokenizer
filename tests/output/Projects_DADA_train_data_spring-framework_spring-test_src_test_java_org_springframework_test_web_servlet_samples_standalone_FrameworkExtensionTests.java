<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.standalone.MockMvc = standaloneSetup ( new org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.SampleController ( ) ) . apply ( org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestMockMvcConfigurer ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . with ( org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( ) . org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( STRING ) ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.standalone.MockMvc . perform ( get ( STRING ) . with ( org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( ) . org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( STRING ) ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestMockMvcConfigurer org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestMockMvcConfigurer ( ) { return new org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestMockMvcConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( ) { return new org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( java.lang.String java.lang.String ) { this . org.springframework.test.web.servlet.samples.standalone.HttpHeaders . add ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor org.springframework.test.web.servlet.samples.standalone.FrameworkExtensionTests.TestRequestPostProcessor ( java.lang.String java.lang.String ) { this . org.springframework.test.web.servlet.samples.standalone.HttpHeaders . add ( STRING , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.samples.standalone.MockHttpServletRequest org.springframework.test.web.servlet.samples.standalone.MockHttpServletRequest ( MockHttpServletRequest org.springframework.test.web.servlet.samples.standalone.MockHttpServletRequest ) { for ( java.lang.String java.lang.String : this . org.springframework.test.web.servlet.samples.standalone.HttpHeaders . keySet ( ) ) { org.springframework.test.web.servlet.samples.standalone.MockHttpServletRequest . addHeader ( java.lang.String , this . org.springframework.test.web.servlet.samples.standalone.HttpHeaders . get ( java.lang.String ) ) ; } return org.springframework.test.web.servlet.samples.standalone.MockHttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableMockMvcBuilder < ? > org.springframework.test.web.servlet.samples.standalone.ConfigurableMockMvcBuilder<?> ) { org.springframework.test.web.servlet.samples.standalone.ConfigurableMockMvcBuilder<> . alwaysExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.samples.standalone.RequestPostProcessor org.springframework.test.web.servlet.samples.standalone.RequestPostProcessor ( ConfigurableMockMvcBuilder < ? > org.springframework.test.web.servlet.samples.standalone.ConfigurableMockMvcBuilder<?> , WebApplicationContext org.springframework.test.web.servlet.samples.standalone.WebApplicationContext ) { return request -> { request . setUserPrincipal ( mock ( Principal .class ) ) ; return request ; } ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( headers = STRING ) @ ResponseBody public java.lang.String java.lang.String ( java.security.Principal java.security.Principal ) { Assert . notNull ( java.security.Principal , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( headers = STRING ) @ ResponseBody public java.lang.String java.lang.String ( java.security.Principal java.security.Principal ) { Assert . notNull ( java.security.Principal , STRING ) ; return STRING ; }  <METHOD_END>
