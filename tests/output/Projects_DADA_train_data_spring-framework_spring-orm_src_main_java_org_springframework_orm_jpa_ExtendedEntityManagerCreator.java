<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManager org.springframework.orm.jpa.EntityManager , EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactoryInfo , false , false ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManager org.springframework.orm.jpa.EntityManager , EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo , boolean boolean ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactoryInfo , false , boolean ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManager org.springframework.orm.jpa.EntityManager , EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactoryInfo , true , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , null , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<,> , true ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , boolean boolean ) { Assert . notNull ( org.springframework.orm.jpa.EntityManagerFactory , STRING ) ; if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactoryInfo . getNativeEntityManagerFactory ( ) ; EntityManager org.springframework.orm.jpa.EntityManager = ( ! CollectionUtils . isEmpty ( java.util.Map<,> ) ? org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( java.util.Map<,> ) : org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactoryInfo , true , boolean ) ; } else { EntityManager org.springframework.orm.jpa.EntityManager = ( ! CollectionUtils . isEmpty ( java.util.Map<,> ) ? org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( java.util.Map<,> ) : org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , null , null , null , null , true , boolean ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManager org.springframework.orm.jpa.EntityManager , EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo , boolean boolean , boolean boolean ) { Assert . notNull ( org.springframework.orm.jpa.EntityManagerFactoryInfo , STRING ) ; JpaDialect org.springframework.orm.jpa.JpaDialect = org.springframework.orm.jpa.EntityManagerFactoryInfo . getJpaDialect ( ) ; PersistenceUnitInfo org.springframework.orm.jpa.PersistenceUnitInfo = org.springframework.orm.jpa.EntityManagerFactoryInfo . getPersistenceUnitInfo ( ) ; java.lang.Boolean java.lang.Boolean = ( org.springframework.orm.jpa.PersistenceUnitInfo != null ? org.springframework.orm.jpa.PersistenceUnitInfo . getTransactionType ( ) == PersistenceUnitTransactionType . JTA : null ) ; return org.springframework.orm.jpa.EntityManager ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManagerFactoryInfo . getEntityManagerInterface ( ) , org.springframework.orm.jpa.EntityManagerFactoryInfo . getBeanClassLoader ( ) , org.springframework.orm.jpa.JpaDialect , java.lang.Boolean , boolean , boolean ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( EntityManager org.springframework.orm.jpa.EntityManager , java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> < ? extends EntityManager > java.lang.Class<? extends org.springframework.orm.jpa.EntityManager> , java.lang.ClassLoader java.lang.ClassLoader , PersistenceExceptionTranslator org.springframework.orm.jpa.PersistenceExceptionTranslator , java.lang.Boolean java.lang.Boolean , boolean boolean , boolean boolean ) { Assert . notNull ( org.springframework.orm.jpa.EntityManager , STRING ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet<java.lang.Class<?>> <> ( ) ; if ( java.lang.Class<> != null ) { java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; } else { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . getAllInterfacesForClassAsSet ( org.springframework.orm.jpa.EntityManager . getClass ( ) , java.lang.ClassLoader ) ) ; } java.util.Set<java.lang.Class<?>> . boolean ( EntityManagerProxy .class ) ; return ( EntityManager ) java.lang.reflect.Proxy . java.lang.Object ( ( java.lang.ClassLoader != null ? java.lang.ClassLoader : org.springframework.orm.jpa.ExtendedEntityManagerCreator .class . java.lang.ClassLoader ( ) ) , java.util.Set<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.Set<java.lang.Class<?>> . int ( ) ] ) , new org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerInvocationHandler ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.PersistenceExceptionTranslator , java.lang.Boolean , boolean , boolean ) ) ; }  <METHOD_END>
<METHOD_START> private void ( EntityManager org.springframework.orm.jpa.EntityManager , PersistenceExceptionTranslator org.springframework.orm.jpa.PersistenceExceptionTranslator , java.lang.Boolean java.lang.Boolean , boolean boolean , boolean boolean ) { this . org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManager ; this . org.springframework.orm.jpa.PersistenceExceptionTranslator = org.springframework.orm.jpa.PersistenceExceptionTranslator ; this . boolean = ( java.lang.Boolean != null ? java.lang.Boolean : boolean ( ) ) ; this . boolean = boolean ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { this . org.springframework.orm.jpa.EntityManager . getTransaction ( ) ; return false ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { org.springframework.orm.jpa.Log . debug ( STRING ) ; return true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return int ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . org.springframework.orm.jpa.EntityManager ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ; if ( java.lang.Class<> == null ) { return this . org.springframework.orm.jpa.EntityManager ; } else if ( java.lang.Class<> . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( this . boolean ) { return true ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization = ( org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization ) TransactionSynchronizationManager . getResource ( this . org.springframework.orm.jpa.EntityManager ) ; if ( org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization != null ) { org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization . boolean = true ; return null ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { void ( true ) ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ! this . boolean ) { return TransactionSynchronizationManager . hasResource ( this . org.springframework.orm.jpa.EntityManager ) ; } } if ( this . boolean && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( ) ) { void ( false ) ; } try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.orm.jpa.EntityManager , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { if ( this . boolean ) { try { this . org.springframework.orm.jpa.EntityManager . joinTransaction ( ) ; org.springframework.orm.jpa.Log . debug ( STRING ) ; } catch ( TransactionRequiredException org.springframework.orm.jpa.TransactionRequiredException ) { if ( ! boolean ) { org.springframework.orm.jpa.Log . debug ( STRING + org.springframework.orm.jpa.TransactionRequiredException ) ; } else { throw org.springframework.orm.jpa.TransactionRequiredException ; } } } else { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { if ( ! TransactionSynchronizationManager . hasResource ( this . org.springframework.orm.jpa.EntityManager ) && ! this . org.springframework.orm.jpa.EntityManager . getTransaction ( ) . isActive ( ) ) { void ( ) ; } org.springframework.orm.jpa.Log . debug ( STRING ) ; } else { if ( ! boolean ) { org.springframework.orm.jpa.Log . debug ( STRING ) ; } else { throw new TransactionRequiredException ( STRING ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ) { EntityTransaction org.springframework.orm.jpa.EntityTransaction = this . org.springframework.orm.jpa.EntityManager . getTransaction ( ) ; org.springframework.orm.jpa.EntityTransaction . begin ( ) ; if ( org.springframework.orm.jpa.Log . isDebugEnabled ( ) ) { org.springframework.orm.jpa.Log . debug ( STRING + STRING + this . org.springframework.orm.jpa.EntityManager + STRING ) ; } org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization = new org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization ( this . org.springframework.orm.jpa.EntityManager , this . org.springframework.orm.jpa.PersistenceExceptionTranslator ) ; TransactionSynchronizationManager . bindResource ( this . org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization ) ; TransactionSynchronizationManager . registerSynchronization ( org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerSynchronization ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityManager org.springframework.orm.jpa.EntityManager , PersistenceExceptionTranslator org.springframework.orm.jpa.PersistenceExceptionTranslator ) { super( new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) , org.springframework.orm.jpa.EntityManager ); this . org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManager ; this . org.springframework.orm.jpa.PersistenceExceptionTranslator = org.springframework.orm.jpa.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return EntityManagerFactoryUtils . ENTITY_MANAGER_SYNCHRONIZATION_ORDER - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder ) { try { this . org.springframework.orm.jpa.EntityManager . flush ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterCommit ( ) ; try { this . org.springframework.orm.jpa.EntityManager . getTransaction ( ) . commit ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { try { super. afterCompletion ( int ) ; if ( int != STATUS_COMMITTED ) { try { this . org.springframework.orm.jpa.EntityManager . getTransaction ( ) . rollback ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw java.lang.RuntimeException ( java.lang.RuntimeException ) ; } } } finally { if ( this . boolean ) { EntityManagerFactoryUtils . closeEntityManager ( this . org.springframework.orm.jpa.EntityManager ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.RuntimeException java.lang.RuntimeException ( java.lang.RuntimeException java.lang.RuntimeException ) { DataAccessException org.springframework.orm.jpa.DataAccessException = ( this . org.springframework.orm.jpa.PersistenceExceptionTranslator != null ) ? this . org.springframework.orm.jpa.PersistenceExceptionTranslator . translateExceptionIfPossible ( java.lang.RuntimeException ) : EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.RuntimeException ) ; return ( org.springframework.orm.jpa.DataAccessException != null ? org.springframework.orm.jpa.DataAccessException : java.lang.RuntimeException ) ; }  <METHOD_END>
