<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleTypeHolder ( null , false ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new SimpleTypeHolder ( new java.util.HashSet <> ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( java.lang.String .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( new java.util.HashSet <> ( ) , false ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( java.util.UUID .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.SimpleTypeHolder>> ( SimpleTypeHolder .class ) , true ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( SimpleTypeHolder .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.mapping.SimpleTypeHolderUnitTests .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.SimpleTypeHolder>> ( SimpleTypeHolder .class ) , true ) ; SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( java.util.Collections . java.util.Set<java.lang.Class<org.springframework.data.mapping.SimpleTypeHolderUnitTests>> ( org.springframework.data.mapping.SimpleTypeHolderUnitTests .class ) , org.springframework.data.mapping.SimpleTypeHolder ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( SimpleTypeHolder .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.mapping.SimpleTypeHolderUnitTests .class ) ) . isFalse ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( SimpleTypeHolder .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.mapping.SimpleTypeHolderUnitTests .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( java.lang.Object .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.mapping.SimpleTypeHolderUnitTests.SimpleEnum . org.springframework.data.mapping.SimpleTypeHolderUnitTests.SimpleEnum . java.lang.Class<? extends org.springframework.data.mapping.SimpleTypeHolderUnitTests.SimpleEnum> ( ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( org.springframework.data.mapping.SimpleTypeHolderUnitTests.ComplexEnum . org.springframework.data.mapping.SimpleTypeHolderUnitTests.ComplexEnum . java.lang.Class<? extends org.springframework.data.mapping.SimpleTypeHolderUnitTests.ComplexEnum> ( ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleTypeHolder org.springframework.data.mapping.SimpleTypeHolder = new SimpleTypeHolder ( ) ; assertThat ( org.springframework.data.mapping.SimpleTypeHolder . isSimpleType ( java.lang.reflect.Type .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> abstract boolean boolean ( )  <METHOD_END>
