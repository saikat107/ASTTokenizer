<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; ScopedProxyTestBean org.springframework.context.annotation.ScopedProxyTestBean = ( ScopedProxyTestBean ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.ScopedProxyTestBean ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; ScopedProxyTestBean org.springframework.context.annotation.ScopedProxyTestBean = ( ScopedProxyTestBean ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.context.annotation.ScopedProxyTestBean ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.FooService ) ) ; assertEquals ( STRING , org.springframework.context.annotation.FooService . foo ( NUMBER ) ) ; FooService org.springframework.context.annotation.FooService = ( FooService ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.context.annotation.FooService ) ; assertNotNull ( org.springframework.context.annotation.FooService ) ; assertEquals ( STRING , org.springframework.context.annotation.FooService . foo ( NUMBER ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.context.annotation.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . getBeanFactory ( ) . registerScope ( STRING , new SimpleMapScope ( ) ) ; ScopedProxyTestBean org.springframework.context.annotation.ScopedProxyTestBean = ( ScopedProxyTestBean ) org.springframework.context.annotation.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.ScopedProxyTestBean ) ) ; assertEquals ( STRING , org.springframework.context.annotation.ScopedProxyTestBean . foo ( NUMBER ) ) ; ScopedProxyTestBean org.springframework.context.annotation.ScopedProxyTestBean = ( ScopedProxyTestBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.context.annotation.ScopedProxyTestBean ) ; assertNotNull ( org.springframework.context.annotation.ScopedProxyTestBean ) ; assertEquals ( STRING , org.springframework.context.annotation.ScopedProxyTestBean . foo ( NUMBER ) ) ; org.springframework.context.annotation.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.context.annotation.ExpectedException . expect ( BeanDefinitionParsingException .class ) ; org.springframework.context.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.context.annotation.ExpectedException . expectMessage ( containsString ( STRING ) ) ; new ClassPathXmlApplicationContext ( STRING ) ; }  <METHOD_END>
