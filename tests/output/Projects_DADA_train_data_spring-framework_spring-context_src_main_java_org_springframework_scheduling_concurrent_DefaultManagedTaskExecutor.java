<METHOD_START> public void void ( JndiTemplate org.springframework.scheduling.concurrent.JndiTemplate ) { this . org.springframework.scheduling.concurrent.JndiLocatorDelegate . setJndiTemplate ( org.springframework.scheduling.concurrent.JndiTemplate ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . org.springframework.scheduling.concurrent.JndiLocatorDelegate . setJndiEnvironment ( java.util.Properties ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.scheduling.concurrent.JndiLocatorDelegate . setResourceRef ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) javax.naming.NamingException { if ( this . java.lang.String != null ) { setConcurrentExecutor ( this . org.springframework.scheduling.concurrent.JndiLocatorDelegate . lookup ( this . java.lang.String , java.util.concurrent.Executor .class ) ) ; } }  <METHOD_END>
