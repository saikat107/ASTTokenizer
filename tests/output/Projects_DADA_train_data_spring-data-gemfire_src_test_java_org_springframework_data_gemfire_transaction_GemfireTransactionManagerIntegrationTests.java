<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { assertThat ( org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> ) . isEmpty ( ) ; org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsService . void ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } finally { assertThat ( org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> . containsKey ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> . containsKey ( STRING ) ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.transaction.GemfireTransactionManager org.springframework.data.gemfire.transaction.GemfireTransactionManager ( GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ) { return new GemfireTransactionManager ( org.springframework.data.gemfire.transaction.GemFireCache ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ( GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ) { return new org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ( org.springframework.data.gemfire.transaction.GemFireCache . getRegion ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsService org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsService ( org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ) { return new org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsService ( org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ( GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ) { LocalRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> = new LocalRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.transaction.GemFireCache ) ; org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; return org.springframework.data.gemfire.transaction.LocalRegionFactoryBean<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ) { Assert . notNull ( org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository , STRING ) ; this . org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository = org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository . void ( ) ; org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository . void ( ) ; org.springframework.data.gemfire.transaction.GemfireTransactionManagerIntegrationTests.SuspendAndResumeCacheTransactionsRepository . void ( ) ; }  <METHOD_END>
<METHOD_START> void ( Region < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> ) { Assert . notNull ( org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> , STRING ) ; this . org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Transactional ( propagation = Propagation . REQUIRED ) public void void ( ) { org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> . put ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( propagation = Propagation . REQUIRES_NEW ) public void void ( ) { org.springframework.data.gemfire.transaction.Region<java.lang.Object,java.lang.Object> . put ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( propagation = Propagation . REQUIRED ) public void void ( ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
