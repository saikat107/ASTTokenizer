<METHOD_START> public void ( SimpMessageType org.springframework.messaging.simp.SimpMessageType ) { Assert . notNull ( org.springframework.messaging.simp.SimpMessageType , STRING ) ; this . org.springframework.messaging.simp.SimpMessageType = org.springframework.messaging.simp.SimpMessageType ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.SimpMessageType org.springframework.messaging.simp.SimpMessageType ( ) { return this . org.springframework.messaging.simp.SimpMessageType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Collection<?> < ? > java.util.Collection<?> ( ) { return java.util.Arrays . java.util.List ( this . org.springframework.messaging.simp.SimpMessageType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition ) { return org.springframework.messaging.simp.SimpMessageTypeMessageCondition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition ( Message < ? > org.springframework.messaging.simp.Message<?> ) { java.lang.Object java.lang.Object = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.Message<> . getHeaders ( ) ) ; if ( java.lang.Object == null ) { return null ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition org.springframework.messaging.simp.SimpMessageTypeMessageCondition , Message < ? > org.springframework.messaging.simp.Message<?> ) { java.lang.Object java.lang.Object = SimpMessageHeaderAccessor . getMessageType ( org.springframework.messaging.simp.Message<> . getHeaders ( ) ) ; if ( java.lang.Object != null ) { if ( java.lang.Object . boolean ( this . org.springframework.messaging.simp.SimpMessageType ( ) ) && java.lang.Object . boolean ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition . org.springframework.messaging.simp.SimpMessageType ( ) ) ) { return NUMBER ; } else if ( java.lang.Object . boolean ( this . org.springframework.messaging.simp.SimpMessageType ( ) ) ) { return - NUMBER ; } else if ( java.lang.Object . boolean ( org.springframework.messaging.simp.SimpMessageTypeMessageCondition . org.springframework.messaging.simp.SimpMessageType ( ) ) ) { return NUMBER ; } } return NUMBER ; }  <METHOD_END>
