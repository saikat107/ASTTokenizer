<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { Assert . notEmpty ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , STRING ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler = new ReactiveTypeHandler ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ReactiveAdapterRegistry org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry , TaskExecutor org.springframework.web.servlet.mvc.method.annotation.TaskExecutor , ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { Assert . notEmpty ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , STRING ) ; this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> = java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ; this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler = new ReactiveTypeHandler ( org.springframework.web.servlet.mvc.method.annotation.ReactiveAdapterRegistry , org.springframework.web.servlet.mvc.method.annotation.TaskExecutor , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { java.lang.Class<?> < ? > java.lang.Class<?> = ResponseEntity .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ) ? ResolvableType . forMethodParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) . getGeneric ( NUMBER ) . resolve ( ) : org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterType ( ) ; return java.lang.Class<> != null && ( ResponseBodyEmitter .class . boolean ( java.lang.Class<> ) || this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . isReactiveType ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; return; } HttpServletResponse org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeResponse ( HttpServletResponse .class ) ; ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse ) ; if ( java.lang.Object instanceof ResponseEntity ) { ResponseEntity < ? > org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<?> = ( ResponseEntity < ? > ) java.lang.Object ; org.springframework.web.servlet.mvc.method.annotation.HttpServletResponse . setStatus ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getStatusCodeValue ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getHeaders ( ) . putAll ( org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getHeaders ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.ResponseEntity<> . getBody ( ) ; if ( java.lang.Object == null ) { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . flush ( ) ; return; } } ServletRequest org.springframework.web.servlet.mvc.method.annotation.ServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( ServletRequest .class ) ; ShallowEtagHeaderFilter . disableContentCaching ( org.springframework.web.servlet.mvc.method.annotation.ServletRequest ) ; ResponseBodyEmitter org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter ; if ( java.lang.Object instanceof ResponseBodyEmitter ) { org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = ( ResponseBodyEmitter ) java.lang.Object ; } else { org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter = this . org.springframework.web.servlet.mvc.method.annotation.ReactiveTypeHandler . handleValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; } if ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter == null ) { return; } org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . extendResponse ( org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getBody ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . flush ( ) ; org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse = new org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.StreamingServletServerHttpResponse ( org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; DeferredResult < ? > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> = new DeferredResult <> ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . getTimeout ( ) ) ; WebAsyncUtils . getAsyncManager ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . startDeferredResultProcessing ( org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.HttpMessageConvertingHandler org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.HttpMessageConvertingHandler = new org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.HttpMessageConvertingHandler ( org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse , org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> ) ; org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter . initialize ( org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler.HttpMessageConvertingHandler ) ; }  <METHOD_END>
<METHOD_START> public void ( ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse , DeferredResult < ? > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> ) { this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse = org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ; this . org.springframework.web.servlet.mvc.method.annotation.DeferredResult<?> = org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) throws java.io.IOException { void ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > void void ( T T , MediaType org.springframework.web.servlet.mvc.method.annotation.MediaType ) throws java.io.IOException { if ( org.springframework.web.servlet.mvc.method.annotation.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.mvc.method.annotation.Log . trace ( STRING + T + STRING ) ; } for ( HttpMessageConverter < ? > org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?> : org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitterReturnValueHandler .this . java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { if ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<> . canWrite ( T . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.web.servlet.mvc.method.annotation.MediaType ) ) { ( ( HttpMessageConverter < T > ) org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<> ) . write ( T , org.springframework.web.servlet.mvc.method.annotation.MediaType , this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) ; this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . flush ( ) ; return; } } throw new java.lang.IllegalArgumentException ( STRING + T . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> . setResult ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> . setErrorResult ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> . onTimeout ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . org.springframework.web.servlet.mvc.method.annotation.DeferredResult<> . onCompletion ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> public void ( ServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ) { this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse = org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse ; this . org.springframework.web.servlet.mvc.method.annotation.HttpHeaders . putAll ( org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpStatus org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) { this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . setStatusCode ( org.springframework.web.servlet.mvc.method.annotation.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.HttpHeaders org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ( ) { return this . org.springframework.web.servlet.mvc.method.annotation.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { return this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . getBody ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . flush ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.servlet.mvc.method.annotation.ServerHttpResponse . close ( ) ; }  <METHOD_END>
