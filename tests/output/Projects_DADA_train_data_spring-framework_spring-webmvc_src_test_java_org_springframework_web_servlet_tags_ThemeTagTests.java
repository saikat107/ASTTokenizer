<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.web.servlet.tags.JspException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; final java.lang.StringBuffer java.lang.StringBuffer = new java.lang.StringBuffer ( ) ; ThemeTag org.springframework.web.servlet.tags.ThemeTag = new ThemeTag ( ) { @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; } } ; org.springframework.web.servlet.tags.ThemeTag . setPageContext ( org.springframework.web.servlet.tags.PageContext ) ; org.springframework.web.servlet.tags.ThemeTag . setCode ( STRING ) ; assertTrue ( STRING , org.springframework.web.servlet.tags.ThemeTag . doStartTag ( ) == Tag . EVAL_BODY_INCLUDE ) ; assertEquals ( STRING , Tag . EVAL_PAGE , org.springframework.web.servlet.tags.ThemeTag . doEndTag ( ) ) ; assertEquals ( STRING , java.lang.StringBuffer . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.lang.StringBuffer . java.lang.StringBuffer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) org.springframework.web.servlet.tags.ServletException { PageContext org.springframework.web.servlet.tags.PageContext = createPageContext ( ) ; RequestContext org.springframework.web.servlet.tags.RequestContext = new RequestContext ( ( HttpServletRequest ) org.springframework.web.servlet.tags.PageContext . getRequest ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , ( java.lang.String [] ) null ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , ( java.lang.Object [] ) null , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , new java.lang.String [] { STRING } ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING } ) ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( STRING , ( java.util.List ) null , STRING ) ) ; MessageSourceResolvable org.springframework.web.servlet.tags.MessageSourceResolvable = new DefaultMessageSourceResolvable ( new java.lang.String [] { STRING } ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.RequestContext . getThemeMessage ( org.springframework.web.servlet.tags.MessageSourceResolvable ) ) ; }  <METHOD_END>
