<METHOD_START> @ Before public void void ( ) { org.springframework.integration.test.matcher.Message<java.util.Date> = MessageBuilder . withPayload ( java.util.Date ) . setHeader ( java.lang.String , java.lang.String ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.test.matcher.MessageHandler . handleMessage ( org.springframework.integration.test.matcher.Message<java.util.Date> ) ; verify ( org.springframework.integration.test.matcher.MessageHandler ) . handleMessage ( messageWithPayload ( java.util.Date ) ) ; verify ( org.springframework.integration.test.matcher.MessageHandler ) . handleMessage ( messageWithPayload ( is ( instanceOf ( java.util.Date .class ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ArgumentsAreDifferent .class ) public void void ( ) java.lang.Exception { org.springframework.integration.test.matcher.MessageHandler . handleMessage ( org.springframework.integration.test.matcher.Message<java.util.Date> ) ; verify ( org.springframework.integration.test.matcher.MessageHandler ) . handleMessage ( messageWithPayload ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.test.matcher.MessageChannel . send ( messageWithPayload ( java.util.Date ) ) ) . thenReturn ( true ) ; assertThat ( org.springframework.integration.test.matcher.MessageChannel . send ( org.springframework.integration.test.matcher.Message<java.util.Date> ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.test.matcher.MessageChannel . send ( messageWithHeaderEntry ( java.lang.String , is ( instanceOf ( java.lang.Short .class ) ) ) ) ) . thenReturn ( true ) ; assertThat ( org.springframework.integration.test.matcher.MessageChannel . send ( org.springframework.integration.test.matcher.Message<java.util.Date> ) , is ( false ) ) ; }  <METHOD_END>
