<METHOD_START> public void ( ) { setNestedTransactionAllowed ( true ) ; }  <METHOD_END>
<METHOD_START> public void ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { this(); this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { return this . org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { if ( java.util.Map<java.lang.String,> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( javax.sql.DataSource javax.sql.DataSource ) { if ( javax.sql.DataSource instanceof TransactionAwareDataSourceProxy ) { this . javax.sql.DataSource = ( ( TransactionAwareDataSourceProxy ) javax.sql.DataSource ) . getTargetDataSource ( ) ; } else { this . javax.sql.DataSource = javax.sql.DataSource ; } }  <METHOD_END>
<METHOD_START> public javax.sql.DataSource javax.sql.DataSource ( ) { return this . javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void void ( JpaDialect org.springframework.orm.jpa.JpaDialect ) { this . org.springframework.orm.jpa.JpaDialect = ( org.springframework.orm.jpa.JpaDialect != null ? org.springframework.orm.jpa.JpaDialect : new DefaultJpaDialect ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.JpaDialect org.springframework.orm.jpa.JpaDialect ( ) { return this . org.springframework.orm.jpa.JpaDialect ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.orm.jpa.BeanFactory ) throws org.springframework.orm.jpa.BeansException { if ( org.springframework.orm.jpa.EntityManagerFactory ( ) == null ) { if ( ! ( org.springframework.orm.jpa.BeanFactory instanceof ListableBeanFactory ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + org.springframework.orm.jpa.BeanFactory ) ; } ListableBeanFactory org.springframework.orm.jpa.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.orm.jpa.BeanFactory ; void ( EntityManagerFactoryUtils . findEntityManagerFactory ( org.springframework.orm.jpa.ListableBeanFactory , java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.orm.jpa.EntityManagerFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( org.springframework.orm.jpa.EntityManagerFactory ( ) instanceof EntityManagerFactoryInfo ) { EntityManagerFactoryInfo org.springframework.orm.jpa.EntityManagerFactoryInfo = ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ( ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.orm.jpa.EntityManagerFactoryInfo . getDataSource ( ) ; if ( javax.sql.DataSource != null ) { void ( javax.sql.DataSource ) ; } JpaDialect org.springframework.orm.jpa.JpaDialect = org.springframework.orm.jpa.EntityManagerFactoryInfo . getJpaDialect ( ) ; if ( org.springframework.orm.jpa.JpaDialect != null ) { void ( org.springframework.orm.jpa.JpaDialect ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.orm.jpa.EntityManagerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = new org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ( ) ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . setSavepointAllowed ( isNestedTransactionAllowed ( ) ) ; EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder = ( EntityManagerHolder ) TransactionSynchronizationManager . getResource ( org.springframework.orm.jpa.EntityManagerFactory ( ) ) ; if ( org.springframework.orm.jpa.EntityManagerHolder != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) + STRING ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( org.springframework.orm.jpa.EntityManagerHolder , false ) ; } if ( javax.sql.DataSource ( ) != null ) { ConnectionHolder org.springframework.orm.jpa.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . getResource ( javax.sql.DataSource ( ) ) ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . setConnectionHolder ( org.springframework.orm.jpa.ConnectionHolder ) ; } return org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { return ( ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) java.lang.Object ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.orm.jpa.TransactionDefinition ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) java.lang.Object ; if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . hasConnectionHolder ( ) && ! org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . getConnectionHolder ( ) . isSynchronizedWithTransaction ( ) ) { throw new IllegalTransactionStateException ( STRING + STRING + STRING + STRING ) ; } try { if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) == null || org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . isSynchronizedWithTransaction ( ) ) { EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManager ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.EntityManager + STRING ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( new EntityManagerHolder ( org.springframework.orm.jpa.EntityManager ) , true ) ; } EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) ; final int int = determineTimeout ( org.springframework.orm.jpa.TransactionDefinition ) ; java.lang.Object java.lang.Object = org.springframework.orm.jpa.JpaDialect ( ) . beginTransaction ( org.springframework.orm.jpa.EntityManager , new DelegatingTransactionDefinition ( org.springframework.orm.jpa.TransactionDefinition ) { @ java.lang.Override public int int ( ) { return int ; } } ) ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( java.lang.Object ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . setTimeoutInSeconds ( int ) ; } if ( javax.sql.DataSource ( ) != null ) { ConnectionHandle org.springframework.orm.jpa.ConnectionHandle = org.springframework.orm.jpa.JpaDialect ( ) . getJdbcConnection ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.TransactionDefinition . isReadOnly ( ) ) ; if ( org.springframework.orm.jpa.ConnectionHandle != null ) { ConnectionHolder org.springframework.orm.jpa.ConnectionHolder = new ConnectionHolder ( org.springframework.orm.jpa.ConnectionHandle ) ; if ( int != TransactionDefinition . TIMEOUT_DEFAULT ) { org.springframework.orm.jpa.ConnectionHolder . setTimeoutInSeconds ( int ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.ConnectionHolder . getConnectionHandle ( ) + STRING ) ; } TransactionSynchronizationManager . bindResource ( javax.sql.DataSource ( ) , org.springframework.orm.jpa.ConnectionHolder ) ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . setConnectionHolder ( org.springframework.orm.jpa.ConnectionHolder ) ; } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.EntityManager + STRING + STRING + org.springframework.orm.jpa.JpaDialect ( ) + STRING ) ; } } } if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory ( ) , org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . setSynchronizedWithTransaction ( true ) ; } catch ( TransactionException org.springframework.orm.jpa.TransactionException ) { void ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) ; throw org.springframework.orm.jpa.TransactionException ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) ; throw new CannotCreateTransactionException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( ) { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( ) ; if ( org.springframework.orm.jpa.EntityManagerFactory instanceof EntityManagerFactoryInfo ) { org.springframework.orm.jpa.EntityManagerFactory = ( ( EntityManagerFactoryInfo ) org.springframework.orm.jpa.EntityManagerFactory ) . getNativeEntityManagerFactory ( ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( ) ; return ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object> ) ? org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( java.util.Map<java.lang.String,java.lang.Object> ) : org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) { if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . boolean ( ) ) { EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) ; try { if ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) . isActive ( ) ) { org.springframework.orm.jpa.EntityManager . getTransaction ( ) . rollback ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } finally { EntityManagerFactoryUtils . closeEntityManager ( org.springframework.orm.jpa.EntityManager ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( null , false ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) java.lang.Object ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( null , false ) ; EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder = ( EntityManagerHolder ) TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ( ) ) ; org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . setConnectionHolder ( null ) ; ConnectionHolder org.springframework.orm.jpa.ConnectionHolder = null ; if ( javax.sql.DataSource ( ) != null && TransactionSynchronizationManager . hasResource ( javax.sql.DataSource ( ) ) ) { org.springframework.orm.jpa.ConnectionHolder = ( ConnectionHolder ) TransactionSynchronizationManager . unbindResource ( javax.sql.DataSource ( ) ) ; } return new org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder ( org.springframework.orm.jpa.EntityManagerHolder , org.springframework.orm.jpa.ConnectionHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder = ( org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder ) java.lang.Object ; TransactionSynchronizationManager . bindResource ( org.springframework.orm.jpa.EntityManagerFactory ( ) , org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder . org.springframework.orm.jpa.EntityManagerHolder ( ) ) ; if ( javax.sql.DataSource ( ) != null && org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder . org.springframework.orm.jpa.ConnectionHolder ( ) != null ) { TransactionSynchronizationManager . bindResource ( javax.sql.DataSource ( ) , org.springframework.orm.jpa.JpaTransactionManager.SuspendedResourcesHolder . org.springframework.orm.jpa.ConnectionHolder ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.jpa.DefaultTransactionStatus ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) org.springframework.orm.jpa.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.jpa.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) + STRING ) ; } try { EntityTransaction org.springframework.orm.jpa.EntityTransaction = org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) . getTransaction ( ) ; org.springframework.orm.jpa.EntityTransaction . commit ( ) ; } catch ( RollbackException org.springframework.orm.jpa.RollbackException ) { if ( org.springframework.orm.jpa.RollbackException . getCause ( ) instanceof java.lang.RuntimeException ) { DataAccessException org.springframework.orm.jpa.DataAccessException = org.springframework.orm.jpa.JpaDialect ( ) . translateExceptionIfPossible ( ( java.lang.RuntimeException ) org.springframework.orm.jpa.RollbackException . getCause ( ) ) ; if ( org.springframework.orm.jpa.DataAccessException != null ) { throw org.springframework.orm.jpa.DataAccessException ; } } throw new TransactionSystemException ( STRING , org.springframework.orm.jpa.RollbackException ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw DataAccessUtils . translateIfNecessary ( java.lang.RuntimeException , org.springframework.orm.jpa.JpaDialect ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.jpa.DefaultTransactionStatus ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) org.springframework.orm.jpa.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.jpa.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) + STRING ) ; } try { EntityTransaction org.springframework.orm.jpa.EntityTransaction = org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) . getTransaction ( ) ; if ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) { org.springframework.orm.jpa.EntityTransaction . rollback ( ) ; } } catch ( PersistenceException org.springframework.orm.jpa.PersistenceException ) { throw new TransactionSystemException ( STRING , org.springframework.orm.jpa.PersistenceException ) ; } finally { if ( ! org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . boolean ( ) ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) . clear ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.orm.jpa.DefaultTransactionStatus ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) org.springframework.orm.jpa.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.orm.jpa.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) + STRING ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject = ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject ) java.lang.Object ; if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . unbindResourceIfPossible ( org.springframework.orm.jpa.EntityManagerFactory ( ) ) ; } org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . clear ( ) ; if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . hasConnectionHolder ( ) ) { TransactionSynchronizationManager . unbindResource ( javax.sql.DataSource ( ) ) ; try { org.springframework.orm.jpa.JpaDialect ( ) . releaseJdbcConnection ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . getConnectionHolder ( ) . getConnectionHandle ( ) , org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } } org.springframework.orm.jpa.JpaDialect ( ) . cleanupTransaction ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . java.lang.Object ( ) ) ; if ( org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . boolean ( ) ) { EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.JpaTransactionManager.JpaTransactionObject . org.springframework.orm.jpa.EntityManagerHolder ( ) . getEntityManager ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.orm.jpa.EntityManager + STRING ) ; } EntityManagerFactoryUtils . closeEntityManager ( org.springframework.orm.jpa.EntityManager ) ; } else { logger . debug ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , boolean boolean ) { this . org.springframework.orm.jpa.EntityManagerHolder = org.springframework.orm.jpa.EntityManagerHolder ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder ( ) { return this . org.springframework.orm.jpa.EntityManagerHolder ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.orm.jpa.EntityManagerHolder != null && this . org.springframework.orm.jpa.EntityManagerHolder . isTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; this . org.springframework.orm.jpa.EntityManagerHolder . setTransactionActive ( true ) ; if ( java.lang.Object instanceof SavepointManager ) { this . org.springframework.orm.jpa.EntityManagerHolder . setSavepointManager ( ( SavepointManager ) java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( ) { EntityTransaction org.springframework.orm.jpa.EntityTransaction = this . org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) . getTransaction ( ) ; if ( org.springframework.orm.jpa.EntityTransaction . isActive ( ) ) { org.springframework.orm.jpa.EntityTransaction . setRollbackOnly ( ) ; } if ( hasConnectionHolder ( ) ) { getConnectionHolder ( ) . setRollbackOnly ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { EntityTransaction org.springframework.orm.jpa.EntityTransaction = this . org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) . getTransaction ( ) ; return org.springframework.orm.jpa.EntityTransaction . getRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.orm.jpa.EntityManagerHolder . getEntityManager ( ) . flush ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { throw DataAccessUtils . translateIfNecessary ( java.lang.RuntimeException , org.springframework.orm.jpa.JpaDialect ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.orm.jpa.TransactionException { if ( this . org.springframework.orm.jpa.EntityManagerHolder . isRollbackOnly ( ) ) { throw new CannotCreateTransactionException ( STRING ) ; } return org.springframework.orm.jpa.SavepointManager ( ) . createSavepoint ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws org.springframework.orm.jpa.TransactionException { org.springframework.orm.jpa.SavepointManager ( ) . rollbackToSavepoint ( java.lang.Object ) ; this . org.springframework.orm.jpa.EntityManagerHolder . resetRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws org.springframework.orm.jpa.TransactionException { org.springframework.orm.jpa.SavepointManager ( ) . releaseSavepoint ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.jpa.SavepointManager org.springframework.orm.jpa.SavepointManager ( ) { if ( ! isSavepointAllowed ( ) ) { throw new NestedTransactionNotSupportedException ( STRING ) ; } SavepointManager org.springframework.orm.jpa.SavepointManager = org.springframework.orm.jpa.EntityManagerHolder ( ) . getSavepointManager ( ) ; if ( org.springframework.orm.jpa.SavepointManager == null ) { throw new NestedTransactionNotSupportedException ( STRING ) ; } return org.springframework.orm.jpa.SavepointManager ; }  <METHOD_END>
<METHOD_START> private void ( EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder , ConnectionHolder org.springframework.orm.jpa.ConnectionHolder ) { this . org.springframework.orm.jpa.EntityManagerHolder = org.springframework.orm.jpa.EntityManagerHolder ; this . org.springframework.orm.jpa.ConnectionHolder = org.springframework.orm.jpa.ConnectionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.jpa.EntityManagerHolder org.springframework.orm.jpa.EntityManagerHolder ( ) { return this . org.springframework.orm.jpa.EntityManagerHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.orm.jpa.ConnectionHolder org.springframework.orm.jpa.ConnectionHolder ( ) { return this . org.springframework.orm.jpa.ConnectionHolder ; }  <METHOD_END>
