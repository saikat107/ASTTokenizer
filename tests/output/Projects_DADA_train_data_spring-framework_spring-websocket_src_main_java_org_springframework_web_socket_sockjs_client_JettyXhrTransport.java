<METHOD_START> public void ( HttpClient org.springframework.web.socket.sockjs.client.HttpClient ) { Assert . notNull ( org.springframework.web.socket.sockjs.client.HttpClient , STRING ) ; this . org.springframework.web.socket.sockjs.client.HttpClient = org.springframework.web.socket.sockjs.client.HttpClient ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.HttpClient org.springframework.web.socket.sockjs.client.HttpClient ( ) { return this . org.springframework.web.socket.sockjs.client.HttpClient ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( ! this . org.springframework.web.socket.sockjs.client.HttpClient . isRunning ( ) ) { this . org.springframework.web.socket.sockjs.client.HttpClient . start ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new SockJsException ( STRING + this , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( this . org.springframework.web.socket.sockjs.client.HttpClient . isRunning ( ) ) { this . org.springframework.web.socket.sockjs.client.HttpClient . stop ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new SockJsException ( STRING + this , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.socket.sockjs.client.HttpClient . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.TransportRequest . getHttpRequestHeaders ( ) ; org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener = new org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) ; void ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.net.URI ) ; } Request org.springframework.web.socket.sockjs.client.Request = this . org.springframework.web.socket.sockjs.client.HttpClient . newRequest ( java.net.URI ) . method ( HttpMethod . POST ) ; void ( org.springframework.web.socket.sockjs.client.Request , org.springframework.web.socket.sockjs.client.HttpHeaders ) ; org.springframework.web.socket.sockjs.client.Request . send ( org.springframework.web.socket.sockjs.client.JettyXhrTransport.SockJsResponseListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { return org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI , HttpMethod . GET , org.springframework.web.socket.sockjs.client.HttpHeaders , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) { return org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI , HttpMethod . POST , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.TextMessage . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpMethod org.springframework.web.socket.sockjs.client.HttpMethod , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , java.lang.String java.lang.String ) { Request org.springframework.web.socket.sockjs.client.Request = this . org.springframework.web.socket.sockjs.client.HttpClient . newRequest ( java.net.URI ) . method ( org.springframework.web.socket.sockjs.client.HttpMethod ) ; void ( org.springframework.web.socket.sockjs.client.Request , org.springframework.web.socket.sockjs.client.HttpHeaders ) ; if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.client.Request . content ( new StringContentProvider ( java.lang.String ) ) ; } ContentResponse org.springframework.web.socket.sockjs.client.ContentResponse ; try { org.springframework.web.socket.sockjs.client.ContentResponse = org.springframework.web.socket.sockjs.client.Request . send ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new SockJsTransportFailureException ( STRING + java.net.URI , java.lang.Exception ) ; } HttpStatus org.springframework.web.socket.sockjs.client.HttpStatus = HttpStatus . valueOf ( org.springframework.web.socket.sockjs.client.ContentResponse . getStatus ( ) ) ; HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.HttpHeaders ( org.springframework.web.socket.sockjs.client.ContentResponse . getHeaders ( ) ) ; return ( org.springframework.web.socket.sockjs.client.ContentResponse . getContent ( ) != null ? new ResponseEntity <> ( org.springframework.web.socket.sockjs.client.ContentResponse . getContentAsString ( ) , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.HttpStatus ) : new ResponseEntity <> ( org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.HttpStatus ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Request org.springframework.web.socket.sockjs.client.Request , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { for ( java.lang.String java.lang.String : org.springframework.web.socket.sockjs.client.HttpHeaders . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.web.socket.sockjs.client.HttpHeaders . get ( java.lang.String ) ) { org.springframework.web.socket.sockjs.client.Request . header ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> private static org.springframework.web.socket.sockjs.client.HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ( HttpFields org.springframework.web.socket.sockjs.client.HttpFields ) { HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.socket.sockjs.client.HttpFields . getFieldNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.socket.sockjs.client.HttpFields . getValues ( java.lang.String ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; org.springframework.web.socket.sockjs.client.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } } return org.springframework.web.socket.sockjs.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public void ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) { this . java.net.URI = java.net.URI ; this . org.springframework.web.socket.sockjs.client.HttpHeaders = org.springframework.web.socket.sockjs.client.HttpHeaders ; this . org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> = org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ; this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession = org.springframework.web.socket.sockjs.client.XhrClientSockJsSession ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Response org.springframework.web.socket.sockjs.client.Response ) { if ( org.springframework.web.socket.sockjs.client.Response . getStatus ( ) != NUMBER ) { HttpStatus org.springframework.web.socket.sockjs.client.HttpStatus = HttpStatus . valueOf ( org.springframework.web.socket.sockjs.client.Response . getStatus ( ) ) ; org.springframework.web.socket.sockjs.client.Response . abort ( new HttpServerErrorException ( org.springframework.web.socket.sockjs.client.HttpStatus , STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Response org.springframework.web.socket.sockjs.client.Response ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.socket.sockjs.client.HttpHeaders ( org.springframework.web.socket.sockjs.client.Response . getHeaders ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Response org.springframework.web.socket.sockjs.client.Response , java.nio.ByteBuffer java.nio.ByteBuffer ) { while ( true ) { if ( this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } org.springframework.web.socket.sockjs.client.Response . abort ( new SockJsException ( STRING , this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . getId ( ) , null ) ) ; return; } if ( java.nio.ByteBuffer . int ( ) == NUMBER ) { break; } int int = java.nio.ByteBuffer . byte ( ) ; if ( int == '\n' ) { void ( ) ; } else { this . java.io.ByteArrayOutputStream . void ( int ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { byte [] byte[] = this . java.io.ByteArrayOutputStream . byte[] ( ) ; this . java.io.ByteArrayOutputStream . void ( ) ; java.lang.String java.lang.String = new java.lang.String ( byte[] , SockJsFrame . CHARSET ) ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String ) ; } if ( ! PRELUDE . equals ( java.lang.String ) ) { this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . handleFrame ( new java.lang.String ( byte[] , SockJsFrame . CHARSET ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Response org.springframework.web.socket.sockjs.client.Response ) { if ( this . java.io.ByteArrayOutputStream . int ( ) > NUMBER ) { void ( ) ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING ) ; } void ( this . java.net.URI , this . org.springframework.web.socket.sockjs.client.HttpHeaders , this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Response org.springframework.web.socket.sockjs.client.Response , java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> . setException ( java.lang.Throwable ) ) { return; } if ( this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . isDisconnected ( ) ) { this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( null ) ; } else { this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . handleTransportError ( java.lang.Throwable ) ; this . org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . afterTransportClosed ( new CloseStatus ( NUMBER , java.lang.Throwable . java.lang.String ( ) ) ) ; } }  <METHOD_END>
