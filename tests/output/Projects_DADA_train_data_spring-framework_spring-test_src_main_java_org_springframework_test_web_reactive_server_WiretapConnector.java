<METHOD_START> public void ( ClientHttpConnector org.springframework.test.web.reactive.server.ClientHttpConnector ) { this . org.springframework.test.web.reactive.server.ClientHttpConnector = org.springframework.test.web.reactive.server.ClientHttpConnector ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.Mono<org.springframework.test.web.reactive.server.ClientHttpResponse> < ClientHttpResponse > org.springframework.test.web.reactive.server.Mono<org.springframework.test.web.reactive.server.ClientHttpResponse> ( HttpMethod org.springframework.test.web.reactive.server.HttpMethod , java.net.URI java.net.URI , java.util.function.Function<? super org.springframework.test.web.reactive.server.ClientHttpRequest,org.springframework.test.web.reactive.server.Mono<java.lang.Void>> < ? super ClientHttpRequest , Mono < java.lang.Void > > java.util.function.Function<? super org.springframework.test.web.reactive.server.ClientHttpRequest,org.springframework.test.web.reactive.server.Mono<java.lang.Void>> ) { java.util.concurrent.atomic.AtomicReference<org.springframework.test.web.reactive.server.WiretapClientHttpRequest> < WiretapClientHttpRequest > java.util.concurrent.atomic.AtomicReference<org.springframework.test.web.reactive.server.WiretapClientHttpRequest> = new java.util.concurrent.atomic.AtomicReference<org.springframework.test.web.reactive.server.WiretapClientHttpRequest> <> ( ) ; return this . org.springframework.test.web.reactive.server.ClientHttpConnector . connect ( org.springframework.test.web.reactive.server.HttpMethod , java.net.URI , request -> { WiretapClientHttpRequest wrapped = new WiretapClientHttpRequest ( request ) ; requestRef . set ( wrapped ) ; return requestCallback . apply ( wrapped ) ; } ) . map ( response -> { WiretapClientHttpRequest wrappedRequest = requestRef . get ( ) ; String requestId = getRequestId ( wrappedRequest . getHeaders ( ) ) ; Assert . notNull ( requestId , STRING ) ; WiretapClientHttpResponse wrappedResponse = new WiretapClientHttpResponse ( response ) ; ExchangeResult result = new ExchangeResult ( wrappedRequest , wrappedResponse ) ; this . exchanges . put ( requestId , result ) ; return wrappedResponse ; } ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( HttpHeaders org.springframework.test.web.reactive.server.HttpHeaders ) { java.lang.String java.lang.String = org.springframework.test.web.reactive.server.HttpHeaders . getFirst ( java.lang.String ) ; Assert . notNull ( java.lang.String , STRING ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.reactive.server.ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult ( java.lang.String java.lang.String ) { ExchangeResult org.springframework.test.web.reactive.server.ExchangeResult = this . java.util.Map<java.lang.String,org.springframework.test.web.reactive.server.ExchangeResult> . get ( java.lang.String ) ; Assert . notNull ( org.springframework.test.web.reactive.server.ExchangeResult , STRING + java.lang.String + STRING ) ; return org.springframework.test.web.reactive.server.ExchangeResult ; }  <METHOD_END>
