<METHOD_START> @ Test public void void ( ) { PayloadTypeSelector org.springframework.integration.message.selector.PayloadTypeSelector = new PayloadTypeSelector ( java.lang.String .class ) ; assertTrue ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadTypeSelector org.springframework.integration.message.selector.PayloadTypeSelector = new PayloadTypeSelector ( java.lang.Integer .class ) ; assertFalse ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadTypeSelector org.springframework.integration.message.selector.PayloadTypeSelector = new PayloadTypeSelector ( java.lang.String .class , java.lang.Integer .class ) ; assertTrue ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; assertTrue ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ) ; assertFalse ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new ErrorMessage ( new java.lang.RuntimeException ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadTypeSelector org.springframework.integration.message.selector.PayloadTypeSelector = new PayloadTypeSelector ( java.lang.RuntimeException .class ) ; assertTrue ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new ErrorMessage ( new MessagingException ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadTypeSelector org.springframework.integration.message.selector.PayloadTypeSelector = new PayloadTypeSelector ( java.lang.RuntimeException .class ) ; assertFalse ( org.springframework.integration.message.selector.PayloadTypeSelector . accept ( new ErrorMessage ( new java.lang.Exception ( STRING ) ) ) ) ; }  <METHOD_END>
