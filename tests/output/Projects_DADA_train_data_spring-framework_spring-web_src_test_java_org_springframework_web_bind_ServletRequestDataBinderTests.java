<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . registerCustomEditor ( ITestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; } } ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.bind.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , org.springframework.web.bind.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertFalse ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; org.springframework.web.bind.ServletRequestDataBinder . setIgnoreUnknownFields ( false ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertFalse ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertFalse ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertFalse ( org.springframework.web.bind.TestBean . isPostProcessed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.bind.TestBean . getName ( ) ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertEquals ( STRING , org.springframework.web.bind.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertEquals ( STRING , NUMBER , org.springframework.web.bind.TestBean . getStringArray ( ) . length ) ; org.springframework.web.bind.MockHttpServletRequest . removeParameter ( STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertEquals ( STRING , NUMBER , org.springframework.web.bind.TestBean . getStringArray ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.bind.TestBean = new TestBean ( ) ; ServletRequestDataBinder org.springframework.web.bind.ServletRequestDataBinder = new ServletRequestDataBinder ( org.springframework.web.bind.TestBean , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . registerCustomEditor ( ITestBean .class , new java.beans.PropertyEditorSupport ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; } } ) ; MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.ServletRequestDataBinder . bind ( org.springframework.web.bind.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.bind.TestBean . getSpouse ( ) ) ; assertEquals ( STRING , org.springframework.web.bind.TestBean . getSpouse ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( new TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING + NUMBER ) ; ServletRequestParameterPropertyValues org.springframework.web.bind.ServletRequestParameterPropertyValues = new ServletRequestParameterPropertyValues ( org.springframework.web.bind.MockHttpServletRequest ) ; void ( org.springframework.web.bind.ServletRequestParameterPropertyValues ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING ) ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , STRING + NUMBER ) ; ServletRequestParameterPropertyValues org.springframework.web.bind.ServletRequestParameterPropertyValues = new ServletRequestParameterPropertyValues ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( STRING , ! org.springframework.web.bind.ServletRequestParameterPropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.bind.ServletRequestParameterPropertyValues . contains ( STRING ) ) ; org.springframework.web.bind.ServletRequestParameterPropertyValues = new ServletRequestParameterPropertyValues ( org.springframework.web.bind.MockHttpServletRequest , STRING ) ; void ( org.springframework.web.bind.ServletRequestParameterPropertyValues ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestParameterPropertyValues org.springframework.web.bind.ServletRequestParameterPropertyValues = new ServletRequestParameterPropertyValues ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.bind.ServletRequestParameterPropertyValues . getPropertyValues ( ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.bind.MockHttpServletRequest = new MockHttpServletRequest ( ) ; java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; org.springframework.web.bind.MockHttpServletRequest . addParameter ( STRING , java.lang.String[] ) ; ServletRequestParameterPropertyValues org.springframework.web.bind.ServletRequestParameterPropertyValues = new ServletRequestParameterPropertyValues ( org.springframework.web.bind.MockHttpServletRequest ) ; assertTrue ( STRING , org.springframework.web.bind.ServletRequestParameterPropertyValues . getPropertyValues ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.bind.ServletRequestParameterPropertyValues . getPropertyValue ( STRING ) . getValue ( ) instanceof java.lang.String [] ) ; java.lang.String [] java.lang.String[] = ( java.lang.String [] ) org.springframework.web.bind.ServletRequestParameterPropertyValues . getPropertyValue ( STRING ) . getValue ( ) ; assertEquals ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( PropertyValues org.springframework.web.bind.PropertyValues ) throws java.lang.Exception { assertTrue ( STRING , org.springframework.web.bind.PropertyValues . getPropertyValues ( ) . length == NUMBER ) ; assertTrue ( STRING , org.springframework.web.bind.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.bind.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.bind.PropertyValues . contains ( STRING ) ) ; assertTrue ( STRING , ! org.springframework.web.bind.PropertyValues . contains ( STRING ) ) ; PropertyValue [] org.springframework.web.bind.PropertyValue[] = org.springframework.web.bind.PropertyValues . getPropertyValues ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; for ( int int = NUMBER ; int < ps . length ; int ++ ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.web.bind.PropertyValue[] [ int ] . getName ( ) ) ; assertTrue ( STRING , java.lang.Object != null ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.String ) ; assertTrue ( STRING , java.lang.Object . boolean ( org.springframework.web.bind.PropertyValue[] [ int ] . getValue ( ) ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( org.springframework.web.bind.PropertyValue[] [ int ] . getName ( ) ) ; } assertTrue ( STRING , java.util.Map<java.lang.String,java.lang.String> . int ( ) == NUMBER ) ; }  <METHOD_END>
