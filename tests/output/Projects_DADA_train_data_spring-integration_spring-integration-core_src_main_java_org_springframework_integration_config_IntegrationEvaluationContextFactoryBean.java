<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.config.ApplicationContext ) throws org.springframework.integration.config.BeansException { this . org.springframework.integration.config.ApplicationContext = org.springframework.integration.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> ) { Assert . isTrue ( ! this . boolean , STRING ) ; Assert . notNull ( java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . values ( ) . toArray ( ) , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> = new java.util.LinkedHashMap<java.lang.String,org.springframework.integration.config.PropertyAccessor> < java.lang.String , PropertyAccessor > ( java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> ( ) { return this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.reflect.Method> < java.lang.String , java.lang.reflect.Method > java.util.Map<java.lang.String,java.lang.reflect.Method> ) { Assert . isTrue ( ! this . boolean , STRING ) ; Assert . notNull ( java.util.Map<java.lang.String,java.lang.reflect.Method> , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,java.lang.reflect.Method> . java.util.Collection<java.lang.reflect.Method> ( ) . java.lang.Object[] ( ) , STRING ) ; this . java.util.Map<java.lang.String,java.lang.reflect.Method> = new java.util.LinkedHashMap<java.lang.String,java.lang.reflect.Method> < java.lang.String , java.lang.reflect.Method > ( java.util.Map<java.lang.String,java.lang.reflect.Method> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.reflect.Method> < java.lang.String , java.lang.reflect.Method > java.util.Map<java.lang.String,java.lang.reflect.Method> ( ) { return this . java.util.Map<java.lang.String,java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> public void void ( TypeLocator org.springframework.integration.config.TypeLocator ) { this . org.springframework.integration.config.TypeLocator = org.springframework.integration.config.TypeLocator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.config.ApplicationContext != null ) { this . org.springframework.integration.config.BeanResolver = new BeanFactoryResolver ( this . org.springframework.integration.config.ApplicationContext ) ; ConversionService org.springframework.integration.config.ConversionService = IntegrationUtils . getConversionService ( this . org.springframework.integration.config.ApplicationContext ) ; if ( org.springframework.integration.config.ConversionService != null ) { this . org.springframework.integration.config.TypeConverter = new StandardTypeConverter ( org.springframework.integration.config.ConversionService ) ; } java.util.Map<java.lang.String,org.springframework.integration.config.SpelFunctionFactoryBean> < java.lang.String , SpelFunctionFactoryBean > java.util.Map<java.lang.String,org.springframework.integration.config.SpelFunctionFactoryBean> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( this . org.springframework.integration.config.ApplicationContext , SpelFunctionFactoryBean .class ) ; for ( SpelFunctionFactoryBean org.springframework.integration.config.SpelFunctionFactoryBean : java.util.Map<java.lang.String,org.springframework.integration.config.SpelFunctionFactoryBean> . values ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.reflect.Method> . boolean ( org.springframework.integration.config.SpelFunctionFactoryBean . getFunctionName ( ) ) ) { this . java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( org.springframework.integration.config.SpelFunctionFactoryBean . getFunctionName ( ) , org.springframework.integration.config.SpelFunctionFactoryBean . getObject ( ) ) ; } } try { SpelPropertyAccessorRegistrar org.springframework.integration.config.SpelPropertyAccessorRegistrar = this . org.springframework.integration.config.ApplicationContext . getBean ( SpelPropertyAccessorRegistrar .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> : org.springframework.integration.config.SpelPropertyAccessorRegistrar . getPropertyAccessors ( ) . entrySet ( ) ) { if ( ! this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . containsKey ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getKey ( ) ) ) { this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . put ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getValue ( ) ) ; } } } catch ( NoSuchBeanDefinitionException org.springframework.integration.config.NoSuchBeanDefinitionException ) { } ApplicationContext org.springframework.integration.config.ApplicationContext = this . org.springframework.integration.config.ApplicationContext . getParent ( ) ; if ( org.springframework.integration.config.ApplicationContext != null && org.springframework.integration.config.ApplicationContext . containsBean ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME ) ) { org.springframework.integration.config.IntegrationEvaluationContextFactoryBean org.springframework.integration.config.IntegrationEvaluationContextFactoryBean = org.springframework.integration.config.ApplicationContext . getBean ( STRING + IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , org.springframework.integration.config.IntegrationEvaluationContextFactoryBean .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> < java.lang.String , PropertyAccessor > java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> : org.springframework.integration.config.IntegrationEvaluationContextFactoryBean . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> ( ) . entrySet ( ) ) { if ( ! this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . containsKey ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getKey ( ) ) ) { this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . put ( java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.integration.config.PropertyAccessor> . getValue ( ) ) ; } } for ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> < java.lang.String , java.lang.reflect.Method > java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> : org.springframework.integration.config.IntegrationEvaluationContextFactoryBean . java.util.Map<java.lang.String,java.lang.reflect.Method> ( ) . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.reflect.Method>> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.reflect.Method> . boolean ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.String ( ) ) ) { this . java.util.Map<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( ) ) ; } } } } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.config.StandardEvaluationContext org.springframework.integration.config.StandardEvaluationContext ( ) java.lang.Exception { StandardEvaluationContext org.springframework.integration.config.StandardEvaluationContext = new StandardEvaluationContext ( ) ; if ( this . org.springframework.integration.config.TypeLocator != null ) { org.springframework.integration.config.StandardEvaluationContext . setTypeLocator ( this . org.springframework.integration.config.TypeLocator ) ; } org.springframework.integration.config.StandardEvaluationContext . setBeanResolver ( this . org.springframework.integration.config.BeanResolver ) ; org.springframework.integration.config.StandardEvaluationContext . setTypeConverter ( this . org.springframework.integration.config.TypeConverter ) ; for ( PropertyAccessor org.springframework.integration.config.PropertyAccessor : this . java.util.Map<java.lang.String,org.springframework.integration.config.PropertyAccessor> . values ( ) ) { org.springframework.integration.config.StandardEvaluationContext . addPropertyAccessor ( org.springframework.integration.config.PropertyAccessor ) ; } org.springframework.integration.config.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> < java.lang.String , java.lang.reflect.Method > java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> : this . java.util.Map<java.lang.String,java.lang.reflect.Method> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.reflect.Method>> ( ) ) { org.springframework.integration.config.StandardEvaluationContext . registerFunction ( java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.reflect.Method> . java.lang.reflect.Method ( ) ) ; } return org.springframework.integration.config.StandardEvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return StandardEvaluationContext .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
