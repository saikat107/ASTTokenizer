<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; assertTrue ( org.springframework.web.filter.ShallowEtagHeaderFilter . isEligibleForEtag ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , NUMBER , StreamUtils . emptyInput ( ) ) ) ; assertFalse ( org.springframework.web.filter.ShallowEtagHeaderFilter . isEligibleForEtag ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , NUMBER , StreamUtils . emptyInput ( ) ) ) ; org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; assertFalse ( org.springframework.web.filter.ShallowEtagHeaderFilter . isEligibleForEtag ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , NUMBER , StreamUtils . emptyInput ( ) ) ) ; org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; assertFalse ( org.springframework.web.filter.ShallowEtagHeaderFilter . isEligibleForEtag ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , NUMBER , StreamUtils . emptyInput ( ) ) ) ; org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , STRING ) ; assertFalse ( org.springframework.web.filter.ShallowEtagHeaderFilter . isEligibleForEtag ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , NUMBER , StreamUtils . emptyInput ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; ( ( HttpServletResponse ) filterResponse ) . setStatus ( HttpServletResponse . SC_OK ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) > NUMBER ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.filter.ShallowEtagHeaderFilter . setWriteWeakETag ( true ) ; final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; ( ( HttpServletResponse ) filterResponse ) . setStatus ( HttpServletResponse . SC_OK ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) > NUMBER ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; byte [] responseBody = STRING . getBytes ( STRING ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; filterResponse . setContentLength ( responseBody . length ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.filter.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertArrayEquals ( STRING , new byte [ NUMBER ] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , STRING + java.lang.String ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; byte [] responseBody = STRING . getBytes ( STRING ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; filterResponse . setContentLength ( responseBody . length ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.filter.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertArrayEquals ( STRING , new byte [ NUMBER ] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.web.filter.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; ( ( HttpServletResponse ) filterResponse ) . setStatus ( HttpServletResponse . SC_OK ) ; String responseBody = STRING ; FileCopyUtils . copy ( responseBody , filterResponse . getWriter ( ) ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.filter.MockHttpServletResponse . containsHeader ( STRING ) ) ; assertArrayEquals ( STRING , new byte [ NUMBER ] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; ( ( HttpServletResponse ) filterResponse ) . setStatus ( HttpServletResponse . SC_OK ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; } ; ShallowEtagHeaderFilter . disableContentCaching ( org.springframework.web.filter.MockHttpServletRequest ) ; this . org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertNull ( org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertArrayEquals ( byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; response . setContentLength ( NUMBER ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; ( ( HttpServletResponse ) filterResponse ) . sendError ( HttpServletResponse . SC_FORBIDDEN ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertNull ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; response . setContentLength ( NUMBER ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; ( ( HttpServletResponse ) filterResponse ) . sendError ( HttpServletResponse . SC_FORBIDDEN , STRING ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertNull ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getErrorMessage ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; response . setContentLength ( NUMBER ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; ( ( HttpServletResponse ) filterResponse ) . sendRedirect ( STRING ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertNull ( STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getRedirectedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final MockHttpServletRequest org.springframework.web.filter.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.filter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; final byte [] byte[] = STRING . byte[] ( STRING ) ; FilterChain org.springframework.web.filter.FilterChain = ( filterRequest , filterResponse ) -> { assertEquals ( STRING , request , filterRequest ) ; ( ( HttpServletResponse ) filterResponse ) . setStatus ( HttpServletResponse . SC_OK ) ; FileCopyUtils . copy ( responseBody , filterResponse . getOutputStream ( ) ) ; filterResponse . flushBuffer ( ) ; } ; org.springframework.web.filter.ShallowEtagHeaderFilter . doFilter ( org.springframework.web.filter.MockHttpServletRequest , org.springframework.web.filter.MockHttpServletResponse , org.springframework.web.filter.FilterChain ) ; assertEquals ( STRING , NUMBER , org.springframework.web.filter.MockHttpServletResponse . getStatus ( ) ) ; assertEquals ( STRING , STRING , org.springframework.web.filter.MockHttpServletResponse . getHeader ( STRING ) ) ; assertTrue ( STRING , org.springframework.web.filter.MockHttpServletResponse . getContentLength ( ) > NUMBER ) ; assertArrayEquals ( STRING , byte[] , org.springframework.web.filter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
