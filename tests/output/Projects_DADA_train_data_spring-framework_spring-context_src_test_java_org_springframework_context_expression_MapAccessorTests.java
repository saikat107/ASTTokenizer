<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( ) ; StandardEvaluationContext org.springframework.context.expression.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.context.expression.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; SpelExpressionParser org.springframework.context.expression.SpelExpressionParser = new SpelExpressionParser ( ) ; Expression org.springframework.context.expression.Expression = org.springframework.context.expression.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertTrue ( SpelCompiler . compile ( org.springframework.context.expression.Expression ) ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.context.expression.Expression = org.springframework.context.expression.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.lang.Object> ) ) ; assertTrue ( SpelCompiler . compile ( org.springframework.context.expression.Expression ) ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.lang.Object> ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> < java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> = java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( ) ; org.springframework.context.expression.Expression = org.springframework.context.expression.SpelExpressionParser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ) ) ; assertTrue ( SpelCompiler . compile ( org.springframework.context.expression.Expression ) ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ) ) ; org.springframework.context.expression.Expression = org.springframework.context.expression.SpelExpressionParser . parseExpression ( STRING ) ; org.springframework.context.expression.MapAccessorTests.MapGetter org.springframework.context.expression.MapAccessorTests.MapGetter = new org.springframework.context.expression.MapAccessorTests.MapGetter ( ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , org.springframework.context.expression.MapAccessorTests.MapGetter ) ) ; assertTrue ( SpelCompiler . compile ( org.springframework.context.expression.Expression ) ) ; assertEquals ( STRING , org.springframework.context.expression.Expression . getValue ( org.springframework.context.expression.StandardEvaluationContext , org.springframework.context.expression.MapAccessorTests.MapGetter ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.Map java.util.Map ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> < java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> < java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> <> ( ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; return java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>> ; }  <METHOD_END>
