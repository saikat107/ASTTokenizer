<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( Connection org.springframework.jca.cci.connection.Connection ) { Assert . notNull ( org.springframework.jca.cci.connection.Connection , STRING ) ; this . org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.Connection ; this . org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.Connection ( org.springframework.jca.cci.connection.Connection ) ; }  <METHOD_END>
<METHOD_START> public void ( ConnectionFactory org.springframework.jca.cci.connection.ConnectionFactory ) { Assert . notNull ( org.springframework.jca.cci.connection.ConnectionFactory , STRING ) ; setTargetConnectionFactory ( org.springframework.jca.cci.connection.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.jca.cci.connection.Connection == null && getTargetConnectionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ) org.springframework.jca.cci.connection.ResourceException { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.jca.cci.connection.Connection == null ) { void ( ) ; } return this . org.springframework.jca.cci.connection.Connection ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ConnectionSpec org.springframework.jca.cci.connection.ConnectionSpec ) throws org.springframework.jca.cci.connection.ResourceException { throw new NotSupportedException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.jca.cci.connection.ResourceException { if ( getTargetConnectionFactory ( ) == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } synchronized ( this . java.lang.Object ) { if ( this . org.springframework.jca.cci.connection.Connection != null ) { void ( this . org.springframework.jca.cci.connection.Connection ) ; } this . org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.Connection ( ) ; void ( this . org.springframework.jca.cci.connection.Connection ) ; if ( org.springframework.jca.cci.connection.Log . isInfoEnabled ( ) ) { org.springframework.jca.cci.connection.Log . info ( STRING + this . org.springframework.jca.cci.connection.Connection ) ; } this . org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.Connection ( this . org.springframework.jca.cci.connection.Connection ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.jca.cci.connection.Connection != null ) { void ( this . org.springframework.jca.cci.connection.Connection ) ; } this . org.springframework.jca.cci.connection.Connection = null ; this . org.springframework.jca.cci.connection.Connection = null ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( ) org.springframework.jca.cci.connection.ResourceException { return getTargetConnectionFactory ( ) . getConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Connection org.springframework.jca.cci.connection.Connection ) throws org.springframework.jca.cci.connection.ResourceException {	}  <METHOD_END>
<METHOD_START> protected void void ( Connection org.springframework.jca.cci.connection.Connection ) { try { org.springframework.jca.cci.connection.Connection . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jca.cci.connection.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jca.cci.connection.Connection org.springframework.jca.cci.connection.Connection ( Connection org.springframework.jca.cci.connection.Connection ) { return ( Connection ) java.lang.reflect.Proxy . java.lang.Object ( Connection .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { Connection .class } , new org.springframework.jca.cci.connection.SingleConnectionFactory.CloseSuppressingInvocationHandler ( org.springframework.jca.cci.connection.Connection ) ) ; }  <METHOD_END>
<METHOD_START> private void ( Connection org.springframework.jca.cci.connection.Connection ) { this . org.springframework.jca.cci.connection.Connection = org.springframework.jca.cci.connection.Connection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return null ; } try { return java.lang.reflect.Method . java.lang.Object ( this . org.springframework.jca.cci.connection.Connection , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } }  <METHOD_END>
