<METHOD_START> public void ( java.lang.String java.lang.String , PathElement org.springframework.web.util.patterns.PathElement , char char , boolean boolean ) { this . org.springframework.web.util.patterns.PathElement = org.springframework.web.util.patterns.PathElement ; this . java.lang.String = java.lang.String ; this . char = char ; this . boolean = boolean ; PathElement org.springframework.web.util.patterns.PathElement = org.springframework.web.util.patterns.PathElement ; while ( org.springframework.web.util.patterns.PathElement != null ) { this . int += org.springframework.web.util.patterns.PathElement . getCaptureCount ( ) ; this . int += org.springframework.web.util.patterns.PathElement . getNormalizedLength ( ) ; this . int += org.springframework.web.util.patterns.PathElement . getScore ( ) ; if ( org.springframework.web.util.patterns.PathElement instanceof CaptureTheRestPathElement || org.springframework.web.util.patterns.PathElement instanceof WildcardTheRestPathElement ) { this . boolean = true ; } if ( org.springframework.web.util.patterns.PathElement instanceof SeparatorPathElement && s . next != null && s . next instanceof WildcardPathElement && s . next . next == null ) { this . boolean = true ; } org.springframework.web.util.patterns.PathElement = s . next ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { if ( org.springframework.web.util.patterns.PathElement == null ) { return ! hasLength ( java.lang.String ) ; } else if ( ! hasLength ( java.lang.String ) ) { if ( org.springframework.web.util.patterns.PathElement instanceof WildcardTheRestPathElement || org.springframework.web.util.patterns.PathElement instanceof CaptureTheRestPathElement ) { java.lang.String = STRING ; } else { return false ; } } org.springframework.web.util.patterns.PathPattern.MatchingContext org.springframework.web.util.patterns.PathPattern.MatchingContext = new org.springframework.web.util.patterns.PathPattern.MatchingContext ( java.lang.String , false ) ; return org.springframework.web.util.patterns.PathElement . matches ( NUMBER , org.springframework.web.util.patterns.PathPattern.MatchingContext ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( org.springframework.web.util.patterns.PathElement == null ) { if ( java.lang.String == null ) { return java.lang.String ; } else { return hasLength ( java.lang.String ) ? java.lang.String : STRING ; } } else if ( ! hasLength ( java.lang.String ) ) { return null ; } org.springframework.web.util.patterns.PathPattern.MatchingContext org.springframework.web.util.patterns.PathPattern.MatchingContext = new org.springframework.web.util.patterns.PathPattern.MatchingContext ( java.lang.String , false ) ; org.springframework.web.util.patterns.PathPattern.MatchingContext . void ( ) ; boolean boolean = org.springframework.web.util.patterns.PathElement . matches ( NUMBER , org.springframework.web.util.patterns.PathPattern.MatchingContext ) ; if ( ! boolean ) { return null ; } else { if ( org.springframework.web.util.patterns.PathPattern.MatchingContext . int == java.lang.String . int ( ) ) { return STRING ; } else { return java.lang.String . java.lang.String ( org.springframework.web.util.patterns.PathPattern.MatchingContext . int ) ; } } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { if ( org.springframework.web.util.patterns.PathElement == null ) { return ! hasLength ( java.lang.String ) ; } else if ( ! hasLength ( java.lang.String ) ) { return true ; } org.springframework.web.util.patterns.PathPattern.MatchingContext org.springframework.web.util.patterns.PathPattern.MatchingContext = new org.springframework.web.util.patterns.PathPattern.MatchingContext ( java.lang.String , false ) ; org.springframework.web.util.patterns.PathPattern.MatchingContext . void ( true ) ; return org.springframework.web.util.patterns.PathElement . matches ( NUMBER , org.springframework.web.util.patterns.PathPattern.MatchingContext ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( java.lang.String java.lang.String ) { org.springframework.web.util.patterns.PathPattern.MatchingContext org.springframework.web.util.patterns.PathPattern.MatchingContext = new org.springframework.web.util.patterns.PathPattern.MatchingContext ( java.lang.String , true ) ; if ( org.springframework.web.util.patterns.PathElement != null && org.springframework.web.util.patterns.PathElement . matches ( NUMBER , org.springframework.web.util.patterns.PathPattern.MatchingContext ) ) { return org.springframework.web.util.patterns.PathPattern.MatchingContext . java.util.Map<java.lang.String,java.lang.String> ( ) ; } else { if ( ! hasLength ( java.lang.String ) ) { return java.util.Map<java.lang.String,java.lang.String> ; } else { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String ( ) + STRING + java.lang.String + STRING ) ; } } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.util.patterns.PathElement org.springframework.web.util.patterns.PathElement ( ) { return org.springframework.web.util.patterns.PathElement ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { PathElement org.springframework.web.util.patterns.PathElement = org.springframework.web.util.patterns.PathElement ; int int = NUMBER ; while ( org.springframework.web.util.patterns.PathElement != null ) { if ( org.springframework.web.util.patterns.PathElement instanceof SeparatorPathElement || org.springframework.web.util.patterns.PathElement instanceof CaptureTheRestPathElement || org.springframework.web.util.patterns.PathElement instanceof WildcardTheRestPathElement ) { int ++ ; } if ( org.springframework.web.util.patterns.PathElement . getWildcardCount ( ) != NUMBER || org.springframework.web.util.patterns.PathElement . getCaptureCount ( ) != NUMBER ) { break; } org.springframework.web.util.patterns.PathElement = s . next ; } if ( org.springframework.web.util.patterns.PathElement == null ) { return STRING ; } char [] char[] = java.lang.String . char[] ( ) ; int int = char[] . int ; int int = NUMBER ; while ( int > NUMBER && int < int ) { if ( java.lang.String . char ( int ++ ) == char ) { while ( int < int && java.lang.String . char ( int ) == char ) { int ++ ; } int -- ; } } int int = int ; while ( int > NUMBER && java.lang.String . char ( int - NUMBER ) == char ) { int -- ; } int int = int ; java.lang.StringBuilder java.lang.StringBuilder = null ; while ( int < int ) { char char = java.lang.String . char ( int ) ; if ( char == char ) { if ( ( int + NUMBER ) < int && java.lang.String . char ( int + NUMBER ) == char ) { if ( java.lang.StringBuilder == null ) { java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( int , int ) ) ; } do { int ++ ; } while ( ( int + NUMBER ) < int && java.lang.String . char ( int + NUMBER ) == char ); } } if ( java.lang.StringBuilder != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; } int ++ ; } if ( java.lang.StringBuilder != null ) { return java.lang.StringBuilder . java.lang.String ( ) ; } return int == int ? STRING : java.lang.String . java.lang.String ( int , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern ) { if ( org.springframework.web.util.patterns.PathPattern == null ) { return - NUMBER ; } if ( boolean ( ) ) { if ( org.springframework.web.util.patterns.PathPattern . boolean ( ) ) { int int = this . int ( ) - org.springframework.web.util.patterns.PathPattern . int ( ) ; if ( int != NUMBER ) { return ( int < NUMBER ) ? + NUMBER : - NUMBER ; } } else { return + NUMBER ; } } else if ( org.springframework.web.util.patterns.PathPattern . boolean ( ) ) { return - NUMBER ; } int int = this . int ( ) - org.springframework.web.util.patterns.PathPattern . int ( ) ; if ( int != NUMBER ) { return ( int < NUMBER ) ? - NUMBER : + NUMBER ; } int int = this . int ( ) - org.springframework.web.util.patterns.PathPattern . int ( ) ; return ( int < NUMBER ) ? + NUMBER : ( int == NUMBER ? NUMBER : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof org.springframework.web.util.patterns.PathPattern ) ) { return false ; } org.springframework.web.util.patterns.PathPattern org.springframework.web.util.patterns.PathPattern = ( org.springframework.web.util.patterns.PathPattern ) java.lang.Object ; return java.lang.String . boolean ( org.springframework.web.util.patterns.PathPattern . java.lang.String ( ) ) && char == org.springframework.web.util.patterns.PathPattern . char ( ) && boolean == org.springframework.web.util.patterns.PathPattern . boolean ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return ( java.lang.String . int ( ) * NUMBER + char ) * NUMBER + ( boolean ? NUMBER : NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; PathElement org.springframework.web.util.patterns.PathElement = org.springframework.web.util.patterns.PathElement ; while ( org.springframework.web.util.patterns.PathElement != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.web.util.patterns.PathElement . toString ( ) ) . append ( STRING ) ; org.springframework.web.util.patterns.PathElement = pe . next ; } return java.lang.StringBuilder . java.lang.String ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public char char ( ) { return char ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , boolean boolean ) { char[] = java.lang.String . char[] ( ) ; int = char[] . int ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( ) { boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( this . java.util.Map<java.lang.String,java.lang.String> == null ) { java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) { if ( this . java.util.Map<java.lang.String,java.lang.String> == null ) { return java.util.Map<java.lang.String,java.lang.String> ; } else { return this . java.util.Map<java.lang.String,java.lang.String> ; } }  <METHOD_END>
<METHOD_START> public int int ( int int ) { while ( int < int ) { if ( char[] [ int ] == char ) { return int ; } int ++ ; } return int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! hasLength ( java.lang.String ) ) { if ( ! hasLength ( java.lang.String ) ) { return STRING ; } else { return java.lang.String ; } } else if ( ! hasLength ( java.lang.String ) ) { return java.lang.String ; } if ( ! java.lang.String . boolean ( java.lang.String ) && int == NUMBER && boolean ( java.lang.String ) ) { return java.lang.String ; } if ( boolean ) { return java.lang.String ( java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) , java.lang.String ) ; } int int = java.lang.String . int ( STRING ) ; if ( int != NUMBER || int == - NUMBER || char == '.' ) { return java.lang.String ( java.lang.String , java.lang.String ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; int int = java.lang.String . int ( '.' ) ; java.lang.String java.lang.String = ( int == - NUMBER ? java.lang.String : java.lang.String . java.lang.String ( NUMBER , int ) ) ; java.lang.String java.lang.String = ( int == - NUMBER ? STRING : java.lang.String . java.lang.String ( int ) ) ; boolean boolean = ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) ; boolean boolean = ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) ; if ( ! boolean && ! boolean ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String ) ; } return java.lang.String + ( boolean ? java.lang.String : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { boolean boolean = java.lang.String . char ( java.lang.String . int ( ) - NUMBER ) == char ; boolean boolean = java.lang.String . char ( NUMBER ) == char ; if ( boolean && boolean ) { return java.lang.String + java.lang.String . java.lang.String ( NUMBER ) ; } else if ( boolean || boolean ) { return java.lang.String + java.lang.String ; } else { return java.lang.String + char + java.lang.String ; } }  <METHOD_END>
