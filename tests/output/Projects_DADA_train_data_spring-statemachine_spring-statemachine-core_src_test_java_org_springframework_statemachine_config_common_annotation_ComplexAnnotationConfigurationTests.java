<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertNotNull ( org.springframework.statemachine.config.common.annotation.ApplicationContext ) ; assertTrue ( org.springframework.statemachine.config.common.annotation.ApplicationContext . containsBean ( STRING ) ) ; ComplexTestConfig org.springframework.statemachine.config.common.annotation.ComplexTestConfig = org.springframework.statemachine.config.common.annotation.ApplicationContext . getBean ( STRING , ComplexTestConfig .class ) ; assertThat ( config . complexData , notNullValue ( ) ) ; assertThat ( config . complexData , is ( STRING ) ) ; assertThat ( config . complexProperties , notNullValue ( ) ) ; assertThat ( config . complexProperties . getProperty ( STRING ) , notNullValue ( ) ) ; assertThat ( config . complexProperties . getProperty ( STRING ) , is ( STRING ) ) ; assertThat ( config . complexBeanA , notNullValue ( ) ) ; assertThat ( config . complexBeanA . dataA , notNullValue ( ) ) ; assertThat ( config . complexBeanA . resources , notNullValue ( ) ) ; assertThat ( config . complexBeanA . dataA , is ( STRING ) ) ; assertThat ( config . complexBeanA . resources . size ( ) , is ( NUMBER ) ) ; java.util.Iterator<org.springframework.statemachine.config.common.annotation.Resource> < Resource > java.util.Iterator<org.springframework.statemachine.config.common.annotation.Resource> = config . complexBeanA . resources . iterator ( ) ; java.lang.String java.lang.String = java.util.Iterator<org.springframework.statemachine.config.common.annotation.Resource> . next ( ) . getFilename ( ) ; java.lang.String java.lang.String = java.util.Iterator<org.springframework.statemachine.config.common.annotation.Resource> . next ( ) . getFilename ( ) ; java.lang.String [] java.lang.String[] = new java.lang.String [ NUMBER ] ; java.lang.String[] [ NUMBER ] = java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String ; java.lang.String[] [ NUMBER ] = java.lang.String . boolean ( STRING ) ? java.lang.String : java.lang.String ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertThat ( java.lang.String[] [ NUMBER ] , is ( STRING ) ) ; assertTrue ( org.springframework.statemachine.config.common.annotation.ApplicationContext . containsBean ( STRING ) ) ; assertTrue ( org.springframework.statemachine.config.common.annotation.ApplicationContext . containsBean ( STRING ) ) ; ComplexTestConfigBeanB org.springframework.statemachine.config.common.annotation.ComplexTestConfigBeanB = org.springframework.statemachine.config.common.annotation.ApplicationContext . getBean ( STRING , ComplexTestConfigBeanB .class ) ; assertThat ( beanB . dataB , is ( STRING ) ) ; assertThat ( beanB . dataBB , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ComplexTestConfigBuilder org.springframework.statemachine.config.common.annotation.ComplexTestConfigBuilder ) throws java.lang.Exception { org.springframework.statemachine.config.common.annotation.ComplexTestConfigBuilder . withProperties ( ) . property ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ComplexTestConfigBeanABuilder org.springframework.statemachine.config.common.annotation.ComplexTestConfigBeanABuilder ) throws java.lang.Exception { org.springframework.statemachine.config.common.annotation.ComplexTestConfigBeanABuilder . withResources ( ) . resource ( STRING ) . resource ( STRING ) . and ( ) . setData ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ComplexTestConfigBeanBConfigurer org.springframework.statemachine.config.common.annotation.ComplexTestConfigBeanBConfigurer ) throws java.lang.Exception { org.springframework.statemachine.config.common.annotation.ComplexTestConfigBeanBConfigurer . setData ( STRING ) . setDataBB ( STRING ) . withResources ( ) . and ( ) ; }  <METHOD_END>
