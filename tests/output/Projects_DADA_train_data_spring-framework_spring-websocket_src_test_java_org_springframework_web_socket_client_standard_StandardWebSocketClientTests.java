<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders = new WebSocketHttpHeaders ( ) ; this . org.springframework.web.socket.client.standard.WebSocketHandler = new AbstractWebSocketHandler ( ) {		} ; this . org.springframework.web.socket.client.standard.WebSocketContainer = mock ( WebSocketContainer .class ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient = new StandardWebSocketClient ( this . org.springframework.web.socket.client.standard.WebSocketContainer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession = this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertNotNull ( org.springframework.web.socket.client.standard.WebSocketSession . getLocalAddress ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.client.standard.WebSocketSession . getLocalAddress ( ) . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession = this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertNotNull ( org.springframework.web.socket.client.standard.WebSocketSession . getLocalAddress ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.client.standard.WebSocketSession . getLocalAddress ( ) . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession = this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertNotNull ( org.springframework.web.socket.client.standard.WebSocketSession . getRemoteAddress ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.client.standard.WebSocketSession . getRemoteAddress ( ) . getHostName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.client.standard.WebSocketSession . getLocalAddress ( ) . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.List<java.lang.String> ) ; this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders . add ( STRING , STRING ) ; WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession = this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertEquals ( NUMBER , org.springframework.web.socket.client.standard.WebSocketSession . getHandshakeHeaders ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.client.standard.WebSocketSession . getHandshakeHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders . setSecWebSocketProtocol ( java.util.List<java.lang.String> ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; ArgumentCaptor < ClientEndpointConfig > org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> = ArgumentCaptor . forClass ( ClientEndpointConfig .class ) ; verify ( this . org.springframework.web.socket.client.standard.WebSocketContainer ) . connectToServer ( any ( Endpoint .class ) , org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . capture ( ) , any ( java.net.URI .class ) ) ; ClientEndpointConfig org.springframework.web.socket.client.standard.ClientEndpointConfig = org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . getValue ( ) ; assertEquals ( java.util.List<java.lang.String> , org.springframework.web.socket.client.standard.ClientEndpointConfig . getPreferredSubprotocols ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; java.net.URI java.net.URI = new java.net.URI ( STRING ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . setUserProperties ( java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; ArgumentCaptor < ClientEndpointConfig > org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> = ArgumentCaptor . forClass ( ClientEndpointConfig .class ) ; verify ( this . org.springframework.web.socket.client.standard.WebSocketContainer ) . connectToServer ( any ( Endpoint .class ) , org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . capture ( ) , any ( java.net.URI .class ) ) ; ClientEndpointConfig org.springframework.web.socket.client.standard.ClientEndpointConfig = org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . getValue ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.socket.client.standard.ClientEndpointConfig . getUserProperties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders . add ( STRING , STRING ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; ArgumentCaptor < ClientEndpointConfig > org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> = ArgumentCaptor . forClass ( ClientEndpointConfig .class ) ; verify ( this . org.springframework.web.socket.client.standard.WebSocketContainer ) . connectToServer ( any ( Endpoint .class ) , org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . capture ( ) , any ( java.net.URI .class ) ) ; ClientEndpointConfig org.springframework.web.socket.client.standard.ClientEndpointConfig = org.springframework.web.socket.client.standard.ArgumentCaptor<org.springframework.web.socket.client.standard.ClientEndpointConfig> . getValue ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; org.springframework.web.socket.client.standard.ClientEndpointConfig . getConfigurator ( ) . beforeRequest ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<java.lang.String>> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; this . org.springframework.web.socket.client.standard.StandardWebSocketClient . setTaskExecutor ( new SimpleAsyncTaskExecutor ( ) ) ; WebSocketSession org.springframework.web.socket.client.standard.WebSocketSession = this . org.springframework.web.socket.client.standard.StandardWebSocketClient . doHandshake ( this . org.springframework.web.socket.client.standard.WebSocketHandler , this . org.springframework.web.socket.client.standard.WebSocketHttpHeaders , java.net.URI ) . get ( ) ; assertNotNull ( org.springframework.web.socket.client.standard.WebSocketSession ) ; }  <METHOD_END>
