<METHOD_START> @ java.lang.Override protected org.springframework.cache.jcache.interceptor.CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation ( ) { CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> = create ( CachePut .class , SampleObject .class , STRING , java.lang.Long .class , SampleObject .class ) ; return org.springframework.cache.jcache.interceptor.CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation = org.springframework.cache.jcache.interceptor.CachePutOperation ( ) ; CacheInvocationParameter [] org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] = org.springframework.cache.jcache.interceptor.CachePutOperation . getAllParameters ( NUMBER , sampleInstance ) ; assertEquals ( NUMBER , allParameters . length ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , java.lang.Long .class , NUMBER , NUMBER ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter[] [ NUMBER ] , SampleObject .class , sampleInstance , NUMBER ) ; CacheInvocationParameter org.springframework.cache.jcache.interceptor.CacheInvocationParameter = org.springframework.cache.jcache.interceptor.CachePutOperation . getValueParameter ( NUMBER , sampleInstance ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter ) ; assertCacheInvocationParameter ( org.springframework.cache.jcache.interceptor.CacheInvocationParameter , SampleObject .class , sampleInstance , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> = create ( CachePut .class , SampleObject .class , STRING , java.lang.Long .class ) ; thrown . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.cache.jcache.interceptor.CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> = create ( CachePut .class , SampleObject .class , STRING , java.lang.Long .class , SampleObject .class , SampleObject .class ) ; thrown . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.cache.jcache.interceptor.CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation = org.springframework.cache.jcache.interceptor.CachePutOperation ( ) ; thrown . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.interceptor.CachePutOperation . getValueParameter ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> = create ( CachePut .class , SampleObject .class , STRING , java.lang.Long .class , SampleObject .class ) ; CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation = org.springframework.cache.jcache.interceptor.CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) ; assertTrue ( org.springframework.cache.jcache.interceptor.CachePutOperation . isEarlyPut ( ) ) ; assertNotNull ( org.springframework.cache.jcache.interceptor.CachePutOperation . getExceptionTypeFilter ( ) ) ; assertTrue ( org.springframework.cache.jcache.interceptor.CachePutOperation . getExceptionTypeFilter ( ) . match ( java.io.IOException .class ) ) ; assertFalse ( org.springframework.cache.jcache.interceptor.CachePutOperation . getExceptionTypeFilter ( ) . match ( java.lang.NullPointerException .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.jcache.interceptor.CachePutOperation org.springframework.cache.jcache.interceptor.CachePutOperation ( CacheMethodDetails < CachePut > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> ) { return new CachePutOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CachePut> , defaultCacheResolver , defaultKeyGenerator ) ; }  <METHOD_END>
