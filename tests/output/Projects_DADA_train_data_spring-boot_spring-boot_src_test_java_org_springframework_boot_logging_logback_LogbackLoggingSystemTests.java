<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . cleanUp ( ) ; this . org.springframework.boot.logging.logback.Log = new SLF4JLogFactory ( ) . getInstance ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; this . org.springframework.boot.logging.logback.MockEnvironment = new MockEnvironment ( ) ; this . org.springframework.boot.logging.logback.LoggingInitializationContext = new LoggingInitializationContext ( this . org.springframework.boot.logging.logback.MockEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ After public void void ( ) { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . cleanUp ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( java.lang.String ( java.lang.String , STRING ) ) . contains ( STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , getLogFile ( null , tmpDir ( ) ) ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; java.io.File java.io.File = new java.io.File ( tmpDir ( ) + STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) . doesNotContain ( STRING ) ; assertThat ( java.lang.String ( java.lang.String , STRING ) ) . contains ( STRING ) ; assertThat ( java.io.File . boolean ( ) ) . isTrue ( ) ; assertThat ( java.lang.String ( java.io.File , STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; ILoggerFactory org.springframework.boot.logging.logback.ILoggerFactory = StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) ; LoggerContext org.springframework.boot.logging.logback.LoggerContext = ( LoggerContext ) org.springframework.boot.logging.logback.ILoggerFactory ; Logger org.springframework.boot.logging.logback.Logger = org.springframework.boot.logging.logback.LoggerContext . getLogger ( org . slf4j . Logger . ROOT_LOGGER_NAME ) ; assertThat ( org.springframework.boot.logging.logback.Logger . getAppender ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , STRING , getLogFile ( tmpDir ( ) + STRING , null ) ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) . contains ( tmpDir ( ) + STRING ) ; assertThat ( java.lang.String ) . endsWith ( STRING ) ; assertThat ( new java.io.File ( tmpDir ( ) + STRING ) . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING + STRING ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.boot.logging.logback.LogbackLoggingSystem . getSupportedLogLevels ( ) ) . isEqualTo ( java.util.EnumSet . java.util.EnumSet ( LogLevel . TRACE , LogLevel . DEBUG , LogLevel . INFO , LogLevel . WARN , LogLevel . ERROR , LogLevel . OFF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.Log . debug ( STRING ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . setLogLevel ( STRING , LogLevel . DEBUG ) ; this . org.springframework.boot.logging.logback.Log . debug ( STRING ) ; assertThat ( StringUtils . countOccurrencesOf ( this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) , STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> = this . org.springframework.boot.logging.logback.LogbackLoggingSystem . getLoggerConfigurations ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> ) . isNotEmpty ( ) ; assertThat ( java.util.List<org.springframework.boot.logging.logback.LoggerConfiguration> . get ( NUMBER ) . getName ( ) ) . isEqualTo ( LoggingSystem . ROOT_LOGGER_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; LoggerConfiguration org.springframework.boot.logging.logback.LoggerConfiguration = this . org.springframework.boot.logging.logback.LogbackLoggingSystem . getLoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.logging.logback.LoggerConfiguration ) . isEqualTo ( new LoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG , LogLevel . DEBUG ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; Logger org.springframework.boot.logging.logback.Logger = ( Logger ) StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) . getLogger ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; org.springframework.boot.logging.logback.Logger . setLevel ( Level . ALL ) ; LoggerConfiguration org.springframework.boot.logging.logback.LoggerConfiguration = this . org.springframework.boot.logging.logback.LogbackLoggingSystem . getLoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.logging.logback.LoggerConfiguration ) . isEqualTo ( new LoggerConfiguration ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . TRACE , LogLevel . TRACE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . TRACE ) ; Logger org.springframework.boot.logging.logback.Logger = ( Logger ) StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) . getLogger ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.logging.logback.Logger . getLevel ( ) ) . isEqualTo ( Level . TRACE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; java . util . logging . java.util.logging.Logger java.util.logging.Logger = java . util . logging . java.util.logging.Logger . java.util.logging.Logger ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . setLogLevel ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) , LogLevel . DEBUG ) ; java . util . logging . java.util.logging.Logger java.util.logging.Logger = java . util . logging . java.util.logging.Logger . java.util.logging.Logger ( java.lang.Class<? extends org.springframework.boot.logging.logback.LogbackLoggingSystemTests> ( ) . java.lang.String ( ) ) ; java.util.logging.Logger . void ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( boolean ( ) ) . isFalse ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; assertThat ( boolean ( ) ) . isTrue ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . cleanUp ( ) ; assertThat ( boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = this . org.springframework.boot.logging.logback.LogbackLoggingSystem . getStandardConfigLocations ( ) ; assertThat ( java.lang.String[] ) . containsExactly ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = getSpringConfigLocations ( this . org.springframework.boot.logging.logback.LogbackLoggingSystem ) ; assertThat ( java.lang.String[] ) . containsExactly ( STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { java . util . logging . java.util.logging.Logger java.util.logging.Logger = java.util.logging.LogManager . java.util.logging.LogManager ( ) . java.util.logging.Logger ( STRING ) ; java.util.logging.Handler [] java.util.logging.Handler[] = java.util.logging.Logger . java.util.logging.Handler[] ( ) ; for ( java.util.logging.Handler java.util.logging.Handler : java.util.logging.Handler[] ) { if ( java.util.logging.Handler instanceof SLF4JBridgeHandler ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockEnvironment org.springframework.boot.logging.logback.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.logging.logback.MockEnvironment . setProperty ( STRING , STRING ) ; LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext = new LoggingInitializationContext ( org.springframework.boot.logging.logback.MockEnvironment ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ( java.lang.String , STRING ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockEnvironment org.springframework.boot.logging.logback.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.logging.logback.MockEnvironment . setProperty ( STRING , STRING ) ; LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext = new LoggingInitializationContext ( org.springframework.boot.logging.logback.MockEnvironment ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ( java.lang.String , STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockEnvironment org.springframework.boot.logging.logback.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.logging.logback.MockEnvironment . setProperty ( STRING , STRING ) ; LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext = new LoggingInitializationContext ( org.springframework.boot.logging.logback.MockEnvironment ) ; java.io.File java.io.File = new java.io.File ( tmpDir ( ) , STRING ) ; LogFile org.springframework.boot.logging.logback.LogFile = getLogFile ( java.io.File . java.lang.String ( ) , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( org.springframework.boot.logging.logback.LoggingInitializationContext , null , org.springframework.boot.logging.logback.LogFile ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.InternalOutputCapture . toString ( ) . trim ( ) ; assertThat ( java.lang.String ( java.lang.String , STRING ) ) . contains ( STRING ) ; assertThat ( java.lang.String ( java.io.File , STRING ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , getLogFile ( null , tmpDir ( ) ) ) ; Matcher < java.lang.String > org.springframework.boot.logging.logback.Matcher<java.lang.String> = containsString ( STRING ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( org.springframework.boot.logging.logback.Matcher<java.lang.String> ) ; this . org.springframework.boot.logging.logback.Log . warn ( STRING , new java.lang.RuntimeException ( STRING ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( new java.io.File ( tmpDir ( ) + STRING ) ) ) ; assertThat ( java.lang.String ) . is ( Matched . by ( org.springframework.boot.logging.logback.Matcher<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , getLogFile ( null , tmpDir ( ) ) ) ; Matcher < java.lang.String > org.springframework.boot.logging.logback.Matcher<java.lang.String> = Matchers . allOf ( containsString ( STRING ) , not ( containsString ( STRING ) ) ) ; this . org.springframework.boot.logging.logback.InternalOutputCapture . expect ( org.springframework.boot.logging.logback.Matcher<java.lang.String> ) ; this . org.springframework.boot.logging.logback.Log . warn ( STRING , new java.lang.RuntimeException ( STRING , new java.lang.RuntimeException ( STRING ) ) ) ; java.lang.String java.lang.String = FileCopyUtils . copyToString ( new java.io.FileReader ( new java.io.File ( tmpDir ( ) + STRING ) ) ) ; assertThat ( java.lang.String ) . is ( Matched . by ( org.springframework.boot.logging.logback.Matcher<java.lang.String> ) ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.Log . info ( STRING ) ; LogFile org.springframework.boot.logging.logback.LogFile = getLogFile ( tmpDir ( ) + STRING , null , false ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , STRING , org.springframework.boot.logging.logback.LogFile ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LoggerContext org.springframework.boot.logging.logback.LoggerContext = ( LoggerContext ) StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) ; LoggerContextListener org.springframework.boot.logging.logback.LoggerContextListener = mock ( LoggerContextListener .class ) ; org.springframework.boot.logging.logback.LoggerContext . addListener ( org.springframework.boot.logging.logback.LoggerContextListener ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; verify ( org.springframework.boot.logging.logback.LoggerContextListener , times ( NUMBER ) ) . onReset ( org.springframework.boot.logging.logback.LoggerContext ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . cleanUp ( ) ; org.springframework.boot.logging.logback.LoggerContext . addListener ( org.springframework.boot.logging.logback.LoggerContextListener ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . beforeInitialize ( ) ; this . org.springframework.boot.logging.logback.LogbackLoggingSystem . initialize ( this . org.springframework.boot.logging.logback.LoggingInitializationContext , null , null ) ; verify ( org.springframework.boot.logging.logback.LoggerContextListener , times ( NUMBER ) ) . onReset ( org.springframework.boot.logging.logback.LoggerContext ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.lang.Exception { return java.lang.String ( FileCopyUtils . copyToString ( new java.io.FileReader ( java.io.File ) ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String ; } } return null ; }  <METHOD_END>
