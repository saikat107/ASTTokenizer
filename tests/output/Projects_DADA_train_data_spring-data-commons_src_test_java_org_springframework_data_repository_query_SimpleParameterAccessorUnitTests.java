<METHOD_START> @ Before public void void ( ) java.lang.SecurityException , java.lang.NoSuchMethodException { org.springframework.data.repository.query.Parameters = new DefaultParameters ( org.springframework.data.repository.query.SimpleParameterAccessorUnitTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ) ; org.springframework.data.repository.query.Parameters = new DefaultParameters ( org.springframework.data.repository.query.SimpleParameterAccessorUnitTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Sort .class ) ) ; org.springframework.data.repository.query.Parameters<?,?> = new DefaultParameters ( org.springframework.data.repository.query.SimpleParameterAccessorUnitTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class , Pageable .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , new java.lang.Object [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParametersParameterAccessor ( null , new java.lang.Object [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , new java.lang.Object [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterAccessor org.springframework.data.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getPageable ( ) . isPaged ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getSort ( ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Sort org.springframework.data.repository.query.Sort = Sort . by ( STRING ) ; ParameterAccessor org.springframework.data.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters , new java.lang.Object [] { STRING , org.springframework.data.repository.query.Sort } ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getSort ( ) ) . isEqualTo ( org.springframework.data.repository.query.Sort ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getPageable ( ) . isPaged ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.repository.query.Pageable = PageRequest . of ( NUMBER , NUMBER ) ; ParameterAccessor org.springframework.data.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters<,> , new java.lang.Object [] { STRING , org.springframework.data.repository.query.Pageable } ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getPageable ( ) ) . isEqualTo ( org.springframework.data.repository.query.Pageable ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getSort ( ) . isSorted ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Sort org.springframework.data.repository.query.Sort = Sort . by ( STRING ) ; Pageable org.springframework.data.repository.query.Pageable = PageRequest . of ( NUMBER , NUMBER , org.springframework.data.repository.query.Sort ) ; ParameterAccessor org.springframework.data.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.repository.query.Parameters<,> , new java.lang.Object [] { STRING , org.springframework.data.repository.query.Pageable } ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getPageable ( ) ) . isEqualTo ( org.springframework.data.repository.query.Pageable ) ; assertThat ( org.springframework.data.repository.query.ParameterAccessor . getSort ( ) ) . isEqualTo ( org.springframework.data.repository.query.Sort ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , Sort org.springframework.data.repository.query.Sort );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , Pageable org.springframework.data.repository.query.Pageable );  <METHOD_END>
