<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.core.ReactiveCassandraTemplate = new ReactiveCassandraTemplate ( org.springframework.data.cassandra.core.ReactiveSession ) ; when ( org.springframework.data.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.data.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.data.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.data.cassandra.core.ColumnDefinitions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.data.cassandra.core.Row ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . select ( STRING , Person .class ) ) . expectNext ( new Person ( STRING , STRING , STRING ) ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . select ( STRING , Person .class ) ) . consumeErrorWith ( e -> { assertThat ( e ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.data.cassandra.core.Row ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . selectOneById ( STRING , Person .class ) ) . expectNext ( new Person ( STRING , STRING , STRING ) ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.data.cassandra.core.Row ) ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . exists ( STRING , Person .class ) ) . expectNext ( true ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . empty ( ) ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . exists ( STRING , Person .class ) ) . expectNext ( false ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.data.cassandra.core.Row ) ) ; when ( org.springframework.data.cassandra.core.Row . getLong ( NUMBER ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . count ( Person .class ) ) . expectNext ( NUMBER ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { reset ( org.springframework.data.cassandra.core.ReactiveSession ) ; when ( org.springframework.data.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . error ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( new Person ( STRING , STRING , STRING ) ) ) . consumeErrorWith ( e -> { assertThat ( e ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ) . expectNext ( org.springframework.data.cassandra.core.Person ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.core.ReactiveCassandraTemplate . truncate ( Person .class ) ) . verifyComplete ( ) ; verify ( org.springframework.data.cassandra.core.ReactiveSession ) . execute ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
