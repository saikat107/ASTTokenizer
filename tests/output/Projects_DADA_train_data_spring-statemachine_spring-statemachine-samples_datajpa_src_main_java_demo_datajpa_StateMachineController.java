<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( @ RequestParam ( value = STRING , required = false ) java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , Model demo.datajpa.Model ) throws java.lang.Exception { StateMachine < java.lang.String , java.lang.String > demo.datajpa.StateMachine<java.lang.String,java.lang.String> = demo.datajpa.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( ) ; StateMachineLogListener demo.datajpa.StateMachineLogListener = new StateMachineLogListener ( ) ; demo.datajpa.StateMachine<java.lang.String,java.lang.String> . addStateListener ( demo.datajpa.StateMachineLogListener ) ; demo.datajpa.StateMachine<java.lang.String,java.lang.String> . start ( ) ; if ( java.util.List<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { demo.datajpa.StateMachine<java.lang.String,java.lang.String> . sendEvent ( java.lang.String ) ; } } demo.datajpa.StateMachine<java.lang.String,java.lang.String> . stop ( ) ; demo.datajpa.Model . addAttribute ( STRING , java.lang.String[] ( ) ) ; demo.datajpa.Model . addAttribute ( STRING , java.lang.String ( demo.datajpa.StateMachineLogListener . getMessages ( ) ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( RepositoryTransition demo.datajpa.RepositoryTransition : demo.datajpa.TransitionRepository<> . findAll ( ) ) { java.util.List<java.lang.String> . boolean ( demo.datajpa.RepositoryTransition . getEvent ( ) ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
