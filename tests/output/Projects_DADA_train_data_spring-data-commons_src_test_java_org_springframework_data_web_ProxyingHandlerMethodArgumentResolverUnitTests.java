<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.AnnotatedInterface .class ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , SampleInterface .class ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.UnannotatedInterface .class ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.Controller .class . java.lang.reflect.Method ( STRING , java.util.List .class ) ; MethodParameter org.springframework.data.web.MethodParameter = new MethodParameter ( java.lang.reflect.Method , NUMBER ) ; assertThat ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolver . supportsParameter ( org.springframework.data.web.MethodParameter ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.AnnotatedInterface org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.AnnotatedInterface );  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.UnannotatedInterface org.springframework.data.web.ProxyingHandlerMethodArgumentResolverUnitTests.UnannotatedInterface );  <METHOD_END>
<METHOD_START> void void ( SampleInterface org.springframework.data.web.SampleInterface );  <METHOD_END>
<METHOD_START> void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> );  <METHOD_END>
