<METHOD_START> public void ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod , java.net.URI java.net.URI ) { this . org.springframework.web.reactive.function.client.HttpMethod = org.springframework.web.reactive.function.client.HttpMethod ; this . java.net.URI = java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ClientRequest . ClientRequest.Builder ClientRequest.Builder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.web.reactive.function.client.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ClientRequest . ClientRequest.Builder ClientRequest.Builder ( HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ) { if ( org.springframework.web.reactive.function.client.HttpHeaders != null ) { this . org.springframework.web.reactive.function.client.HttpHeaders . putAll ( org.springframework.web.reactive.function.client.HttpHeaders ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ClientRequest . ClientRequest.Builder ClientRequest.Builder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ClientRequest . ClientRequest.Builder ClientRequest.Builder ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) { if ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> != null ) { this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . putAll ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S , P extends org.springframework.web.reactive.function.client.Publisher<S> < S > > ClientRequest . ClientRequest.Builder ClientRequest.Builder ( P P , java.lang.Class<S> < S > java.lang.Class<S> ) { Assert . notNull ( P , STRING ) ; Assert . notNull ( java.lang.Class<S> , STRING ) ; this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = BodyInserters . fromPublisher ( P , java.lang.Class<S> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ClientRequest . ClientRequest.Builder ClientRequest.Builder ( BodyInserter < ? , ? super ClientHttpRequest > org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> ) { this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = org.springframework.web.reactive.function.client.BodyInserter<,> != null ? org.springframework.web.reactive.function.client.BodyInserter<,> : BodyInserters . empty ( ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.ClientRequest org.springframework.web.reactive.function.client.ClientRequest ( ) { return new org.springframework.web.reactive.function.client.DefaultClientRequestBuilder.BodyInserterRequest ( this . org.springframework.web.reactive.function.client.HttpMethod , this . java.net.URI , this . org.springframework.web.reactive.function.client.HttpHeaders , this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> , this . org.springframework.web.reactive.function.client.BodyInserter<,> ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpMethod org.springframework.web.reactive.function.client.HttpMethod , java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders , MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> , BodyInserter < ? , ? super ClientHttpRequest > org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> ) { this . org.springframework.web.reactive.function.client.HttpMethod = org.springframework.web.reactive.function.client.HttpMethod ; this . java.net.URI = java.net.URI ; this . org.springframework.web.reactive.function.client.HttpHeaders = HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.client.HttpHeaders ) ; this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> = CollectionUtils . unmodifiableMultiValueMap ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ) ; this . org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> = org.springframework.web.reactive.function.client.BodyInserter<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.HttpMethod org.springframework.web.reactive.function.client.HttpMethod ( ) { return this . org.springframework.web.reactive.function.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders ( ) { return this . org.springframework.web.reactive.function.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ( ) { return this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> < ? , ? super ClientHttpRequest > org.springframework.web.reactive.function.client.BodyInserter<?,? super org.springframework.web.reactive.function.client.ClientHttpRequest> ( ) { return this . org.springframework.web.reactive.function.client.BodyInserter<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.client.Mono<java.lang.Void> ( ClientHttpRequest org.springframework.web.reactive.function.client.ClientHttpRequest , ExchangeStrategies org.springframework.web.reactive.function.client.ExchangeStrategies ) { HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = org.springframework.web.reactive.function.client.ClientHttpRequest . getHeaders ( ) ; if ( ! this . org.springframework.web.reactive.function.client.HttpHeaders . isEmpty ( ) ) { this . org.springframework.web.reactive.function.client.HttpHeaders . entrySet ( ) . stream ( ) . filter ( entry -> ! requestHeaders . containsKey ( entry . getKey ( ) ) ) . forEach ( entry -> requestHeaders . put ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } MultiValueMap < java.lang.String , HttpCookie > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.HttpCookie> = org.springframework.web.reactive.function.client.ClientHttpRequest . getCookies ( ) ; if ( ! this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) { this . org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,java.lang.String> . entrySet ( ) . forEach ( entry -> { String name = entry . getKey ( ) ; entry . getValue ( ) . forEach ( value -> { HttpCookie cookie = new HttpCookie ( name , value ) ; requestCookies . add ( name , cookie ) ; } ) ; } ) ; } return this . org.springframework.web.reactive.function.client.BodyInserter<,> . insert ( org.springframework.web.reactive.function.client.ClientHttpRequest , new BodyInserter . BodyInserter ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> ( ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.client.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.client.ExchangeStrategies . messageWriters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional<org.springframework.web.reactive.function.client.ServerHttpRequest> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
