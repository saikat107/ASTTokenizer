<METHOD_START> @ Before public void void ( ) java.io.IOException { this . java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFolder ( STRING ) ; this . java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFolder ( STRING ) ; this . java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFile ( ) ; this . java.io.File = java.io.File . java.io.File ( STRING , STRING , this . java.io.File ) ; this . java.io.File = java.io.File . java.io.File ( STRING , STRING , this . java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FileReadingMessageSource org.springframework.integration.file.FileReadingMessageSource = new FileReadingMessageSource ( ) ; org.springframework.integration.file.FileReadingMessageSource . setDirectory ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; org.springframework.integration.file.FileReadingMessageSource . setUseWatchService ( true ) ; org.springframework.integration.file.FileReadingMessageSource . setWatchEvents ( FileReadingMessageSource . WatchEventType . CREATE , FileReadingMessageSource . WatchEventType . MODIFY , FileReadingMessageSource . WatchEventType . DELETE ) ; org.springframework.integration.file.FileReadingMessageSource . setBeanFactory ( mock ( BeanFactory .class ) ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; FileSystemPersistentAcceptOnceFileListFilter org.springframework.integration.file.FileSystemPersistentAcceptOnceFileListFilter = new FileSystemPersistentAcceptOnceFileListFilter ( new SimpleMetadataStore ( ) , STRING ) { @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { java.util.concurrent.CountDownLatch . void ( ) ; return super. remove ( java.io.File ) ; } } ; org.springframework.integration.file.FileReadingMessageSource . setFilter ( org.springframework.integration.file.FileSystemPersistentAcceptOnceFileListFilter ) ; org.springframework.integration.file.FileReadingMessageSource . afterPropertiesSet ( ) ; org.springframework.integration.file.FileReadingMessageSource . start ( ) ; DirectoryScanner org.springframework.integration.file.DirectoryScanner = org.springframework.integration.file.FileReadingMessageSource . getScanner ( ) ; assertThat ( org.springframework.integration.file.DirectoryScanner . getClass ( ) . getName ( ) , containsString ( STRING ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( java.io.File ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( java.io.File ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( java.io.File ) ) ; org.springframework.integration.file.FileReadingMessageSource . start ( ) ; java.io.File java.io.File = this . org.springframework.integration.file.TemporaryFolder . newFile ( ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , this . java.io.File ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , this . java.io.File ) ; java.io.File java.io.File = new java.io.File ( this . java.io.File , STRING ) ; java.io.File . boolean ( ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , java.io.File ) ; java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; int int = NUMBER ; java.util.Set<java.io.File> < java.io.File > java.util.Set<java.io.File> = new java.util.HashSet<java.io.File> < java.io.File > ( java.util.List<java.io.File> ) ; while ( int ++ < NUMBER && java.util.Set<java.io.File> . int ( ) != NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; java.util.Set<java.io.File> . boolean ( java.util.List<java.io.File> ) ; } assertEquals ( NUMBER , java.util.Set<java.io.File> . int ( ) ) ; assertTrue ( java.util.Set<java.io.File> . boolean ( java.io.File ) ) ; assertTrue ( java.util.Set<java.io.File> . boolean ( java.io.File ) ) ; assertTrue ( java.util.Set<java.io.File> . boolean ( java.io.File ) ) ; assertTrue ( java.util.Set<java.io.File> . boolean ( java.io.File ) ) ; org.springframework.integration.file.FileReadingMessageSource . start ( ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = new java.util.ArrayList<java.io.File> < java.io.File > ( NUMBER ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.List<java.io.File> . boolean ( this . org.springframework.integration.file.TemporaryFolder . newFile ( STRING + int ) ) ; } int = NUMBER ; while ( int ++ < NUMBER && java.util.Set<java.io.File> . int ( ) < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; java.util.Set<java.io.File> . boolean ( java.util.List<java.io.File> ) ; } assertEquals ( NUMBER , java.util.Set<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.List<java.io.File> ) { java.util.Set<java.io.File> . boolean ( java.io.File ) ; } java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , java.io.File ) ; int = NUMBER ; while ( int ++ < NUMBER && java.util.Set<java.io.File> . int ( ) < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; java.util.Set<java.io.File> . boolean ( java.util.List<java.io.File> ) ; } assertTrue ( java.util.Set<java.io.File> . boolean ( java.io.File ) ) ; java.io.File java.io.File = new java.io.File ( java.io.File . java.lang.String ( ) ) ; java.io.File . boolean ( java.io.File . long ( ) + NUMBER ) ; int = NUMBER ; java.util.List<java.io.File> . void ( ) ; while ( int ++ < NUMBER && java.util.List<java.io.File> . int ( ) < NUMBER ) { java.lang.Thread . void ( NUMBER ) ; java.util.List<java.io.File> = org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; java.util.Set<java.io.File> . boolean ( java.util.List<java.io.File> ) ; } assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; assertTrue ( java.util.List<java.io.File> . boolean ( java.io.File ) ) ; java.io.File . boolean ( ) ; int = NUMBER ; while ( int ++ < NUMBER && java.util.concurrent.CountDownLatch . long ( ) > NUMBER ) { java.lang.Thread . void ( NUMBER ) ; org.springframework.integration.file.DirectoryScanner . listFiles ( org.springframework.integration.file.TemporaryFolder . getRoot ( ) ) ; } assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; java.io.File java.io.File = java.io.File . java.io.File ( STRING , STRING , java.io.File ) ; int = NUMBER ; Message < java.io.File > org.springframework.integration.file.Message<java.io.File> = null ; while ( int ++ < NUMBER && ( org.springframework.integration.file.Message<java.io.File> = org.springframework.integration.file.FileReadingMessageSource . receive ( ) ) == null ) { java.lang.Thread . void ( NUMBER ) ; } assertNotNull ( org.springframework.integration.file.Message<java.io.File> ) ; assertEquals ( java.io.File , org.springframework.integration.file.Message<java.io.File> . getPayload ( ) ) ; assertThat ( org.springframework.integration.file.Message<java.io.File> . getHeaders ( ) . get ( FileHeaders . RELATIVE_PATH , java.lang.String .class ) , startsWith ( TestUtils . applySystemFileSeparator ( STRING ) ) ) ; org.springframework.integration.file.FileReadingMessageSource . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { java.util.concurrent.CountDownLatch . void ( ) ; return super. remove ( java.io.File ) ; }  <METHOD_END>
