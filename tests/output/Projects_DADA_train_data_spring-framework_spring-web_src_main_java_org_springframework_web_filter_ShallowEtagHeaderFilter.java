<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse , FilterChain org.springframework.web.filter.FilterChain )			throws org.springframework.web.filter.ServletException , java.io.IOException { HttpServletResponse org.springframework.web.filter.HttpServletResponse = org.springframework.web.filter.HttpServletResponse ; if ( ! isAsyncDispatch ( org.springframework.web.filter.HttpServletRequest ) && ! ( org.springframework.web.filter.HttpServletResponse instanceof ContentCachingResponseWrapper ) ) { org.springframework.web.filter.HttpServletResponse = new org.springframework.web.filter.ShallowEtagHeaderFilter.HttpStreamingAwareContentCachingResponseWrapper ( org.springframework.web.filter.HttpServletResponse , org.springframework.web.filter.HttpServletRequest ) ; } org.springframework.web.filter.FilterChain . doFilter ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; if ( ! isAsyncStarted ( org.springframework.web.filter.HttpServletRequest ) && ! boolean ( org.springframework.web.filter.HttpServletRequest ) ) { void ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.HttpServletResponse ) ; } }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse ) throws java.io.IOException { ContentCachingResponseWrapper org.springframework.web.filter.ContentCachingResponseWrapper = WebUtils . getNativeResponse ( org.springframework.web.filter.HttpServletResponse , ContentCachingResponseWrapper .class ) ; Assert . notNull ( org.springframework.web.filter.ContentCachingResponseWrapper , STRING ) ; HttpServletResponse org.springframework.web.filter.HttpServletResponse = ( HttpServletResponse ) org.springframework.web.filter.ContentCachingResponseWrapper . getResponse ( ) ; int int = org.springframework.web.filter.ContentCachingResponseWrapper . getStatusCode ( ) ; if ( org.springframework.web.filter.HttpServletResponse . isCommitted ( ) ) { org.springframework.web.filter.ContentCachingResponseWrapper . copyBodyToResponse ( ) ; } else if ( boolean ( org.springframework.web.filter.HttpServletRequest , org.springframework.web.filter.ContentCachingResponseWrapper , int , org.springframework.web.filter.ContentCachingResponseWrapper . getContentInputStream ( ) ) ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.web.filter.ContentCachingResponseWrapper . getContentInputStream ( ) , this . boolean ) ; org.springframework.web.filter.HttpServletResponse . setHeader ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = org.springframework.web.filter.HttpServletRequest . getHeader ( java.lang.String ) ; if ( java.lang.String != null && ( java.lang.String . boolean ( java.lang.String ) || java.lang.String . java.lang.String ( STRING , STRING ) . boolean ( java.lang.String . java.lang.String ( STRING , STRING ) ) || STRING . boolean ( java.lang.String ) ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING ) ; } org.springframework.web.filter.HttpServletResponse . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } org.springframework.web.filter.ContentCachingResponseWrapper . copyBodyToResponse ( ) ; } } else { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + int + STRING ) ; } org.springframework.web.filter.ContentCachingResponseWrapper . copyBodyToResponse ( ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse , int int , java.io.InputStream java.io.InputStream ) { java.lang.String java.lang.String = org.springframework.web.filter.HttpServletRequest . getMethod ( ) ; if ( int >= NUMBER && int < NUMBER && HttpMethod . GET . matches ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.web.filter.HttpServletResponse . getHeader ( java.lang.String ) ; if ( java.lang.String == null || ! java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.io.InputStream java.io.InputStream , boolean boolean ) throws java.io.IOException { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( NUMBER ) ; if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; DigestUtils . appendMd5DigestAsHex ( java.io.InputStream , java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '"' ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( ServletRequest org.springframework.web.filter.ServletRequest ) { Assert . notNull ( org.springframework.web.filter.ServletRequest , STRING ) ; org.springframework.web.filter.ServletRequest . setAttribute ( java.lang.String , true ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { return ( org.springframework.web.filter.HttpServletRequest . getAttribute ( java.lang.String ) != null ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpServletResponse org.springframework.web.filter.HttpServletResponse , HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { super( org.springframework.web.filter.HttpServletResponse ); this . org.springframework.web.filter.HttpServletRequest = org.springframework.web.filter.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.filter.ServletOutputStream org.springframework.web.filter.ServletOutputStream ( ) java.io.IOException { return ( boolean ( ) ? getResponse ( ) . getOutputStream ( ) : super. getOutputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.PrintWriter java.io.PrintWriter ( ) java.io.IOException { return ( boolean ( ) ? getResponse ( ) . getWriter ( ) : super. getWriter ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return boolean ( this . org.springframework.web.filter.HttpServletRequest ) ; }  <METHOD_END>
