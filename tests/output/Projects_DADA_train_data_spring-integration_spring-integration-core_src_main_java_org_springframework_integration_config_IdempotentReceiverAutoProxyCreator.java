<METHOD_START> public void void ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) { Assert . notEmpty ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> , STRING ) ; this . java.util.List<java.util.Map<java.lang.String,java.lang.String>> = java.util.List<java.util.Map<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object [] java.lang.Object[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , TargetSource org.springframework.integration.config.TargetSource ) throws org.springframework.integration.config.BeansException { void ( ) ; if ( MessageHandler .class . boolean ( java.lang.Class<> ) ) { java.util.List<org.springframework.integration.config.Advisor> < Advisor > java.util.List<org.springframework.integration.config.Advisor> = new java.util.ArrayList<org.springframework.integration.config.Advisor> < Advisor > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>>> ( ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { if ( boolean ( java.lang.String , java.lang.String ) ) { DefaultBeanFactoryPointcutAdvisor org.springframework.integration.config.DefaultBeanFactoryPointcutAdvisor = new DefaultBeanFactoryPointcutAdvisor ( ) ; org.springframework.integration.config.DefaultBeanFactoryPointcutAdvisor . setAdviceBeanName ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ) ; NameMatchMethodPointcut org.springframework.integration.config.NameMatchMethodPointcut = new NameMatchMethodPointcut ( ) ; org.springframework.integration.config.NameMatchMethodPointcut . setMappedName ( STRING ) ; org.springframework.integration.config.DefaultBeanFactoryPointcutAdvisor . setPointcut ( org.springframework.integration.config.NameMatchMethodPointcut ) ; org.springframework.integration.config.DefaultBeanFactoryPointcutAdvisor . setBeanFactory ( getBeanFactory ( ) ) ; java.util.List<org.springframework.integration.config.Advisor> . add ( org.springframework.integration.config.DefaultBeanFactoryPointcutAdvisor ) ; } } } if ( ! java.util.List<org.springframework.integration.config.Advisor> . isEmpty ( ) ) { return java.util.List<org.springframework.integration.config.Advisor> . toArray ( ) ; } } return DO_NOT_PROXY ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> == null ) { synchronized ( this ) { if ( this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> == null ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ( ) ; for ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> : this . java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) { Assert . isTrue ( java.util.Map<java.lang.String,java.lang.String> . int ( ) == NUMBER , STRING ) ; java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; java.lang.String java.lang.String = java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) . java.util.Iterator<java.lang.String> ( ) . java.lang.String ( ) ; Assert . hasText ( java.lang.String , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; if ( java.util.List<java.lang.String> == null ) { java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.util.List<java.lang.String> ) ; } java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { boolean boolean = PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ; if ( ! boolean ) { BeanFactory org.springframework.integration.config.BeanFactory = getBeanFactory ( ) ; if ( org.springframework.integration.config.BeanFactory != null ) { java.lang.String [] java.lang.String[] = org.springframework.integration.config.BeanFactory . getAliases ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean = PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ; if ( boolean ) { break; } } } } return boolean ; }  <METHOD_END>
