<METHOD_START> @ Before public final void void ( ) java.lang.Exception { U = U ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract U U ( ) java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.parsers.DocumentBuilder javax.xml.parsers.DocumentBuilder = javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) . javax.xml.parsers.DocumentBuilder ( ) ; org.w3c.dom.Document org.w3c.dom.Document = javax.xml.parsers.DocumentBuilder . org.w3c.dom.Document ( ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Document . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Element org.w3c.dom.Element = org.w3c.dom.Document . org.w3c.dom.Element ( STRING , STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Element ) ; org.w3c.dom.Text org.w3c.dom.Text = org.w3c.dom.Document . org.w3c.dom.Text ( STRING ) ; org.w3c.dom.Element . org.w3c.dom.Node ( org.w3c.dom.Text ) ; javax.xml.transform.dom.DOMSource javax.xml.transform.dom.DOMSource = new javax.xml.transform.dom.DOMSource ( org.w3c.dom.Document ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.dom.DOMSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( java.lang.String ) ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.xml.sax.XMLReader org.xml.sax.XMLReader = org.xml.sax.helpers.XMLReaderFactory . org.xml.sax.XMLReader ( ) ; javax.xml.transform.sax.SAXSource javax.xml.transform.sax.SAXSource = new javax.xml.transform.sax.SAXSource ( org.xml.sax.XMLReader , new org.xml.sax.InputSource ( new java.io.StringReader ( java.lang.String ) ) ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.sax.SAXSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.transform.Source javax.xml.transform.Source = StaxUtils . createStaxSource ( javax.xml.stream.XMLStreamReader ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.Source ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLEventReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.transform.Source javax.xml.transform.Source = StaxUtils . createStaxSource ( javax.xml.stream.XMLEventReader ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.Source ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = new javax.xml.transform.stax.StAXSource ( javax.xml.stream.XMLStreamReader ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.stax.StAXSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLEventReader javax.xml.stream.XMLEventReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLEventReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.transform.stax.StAXSource javax.xml.transform.stax.StAXSource = new javax.xml.transform.stax.StAXSource ( javax.xml.stream.XMLEventReader ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.stax.StAXSource ) ; void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; assertEquals ( STRING , new javax.xml.namespace.QName ( STRING , STRING ) , javax.xml.stream.XMLStreamReader . javax.xml.namespace.QName ( ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; assertEquals ( STRING , new javax.xml.namespace.QName ( STRING , STRING ) , javax.xml.stream.XMLStreamReader . javax.xml.namespace.QName ( ) ) ; javax.xml.transform.Source javax.xml.transform.Source = StaxUtils . createStaxSource ( javax.xml.stream.XMLStreamReader ) ; java.lang.Object java.lang.Object = U . unmarshal ( javax.xml.transform.Source ) ; void ( java.lang.Object ) ; }  <METHOD_END>
