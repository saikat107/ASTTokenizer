<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> = new java.util.ArrayList<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> < org.springframework.data.jpa.repository.query.StringQuery . org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding > ( ) ; this . java.lang.String = org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser . org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser . java.lang.String ( java.lang.String , this . java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) ; this . java.lang.String = QueryUtils . detectAlias ( java.lang.String ) ; this . boolean = QueryUtils . hasConstructorExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ! java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> < org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding > java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ( ) { return java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , java.lang.String ) ; for ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding : java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) { if ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . boolean ( java.lang.String ) ) { return org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ; } } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ( int int ) { for ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding : java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) { if ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . boolean ( int ) ) { return org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ; } } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , int ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return QueryUtils . getProjection ( java.lang.String ) . equals ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private final java.lang.String java.lang.String ( java.lang.String java.lang.String , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> < org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding > java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) { java.lang.String java.lang.String = java.lang.String ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; int int = int ( java.lang.String ) ; boolean boolean = int != - NUMBER ; if ( ! boolean && java.lang.String . boolean ( STRING ) ) { boolean = true ; int = NUMBER ; } int int = boolean ? int : NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.lang.String != null ? null : java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.Integer java.lang.Integer = java.lang.String == null ? null : java.lang.Integer . java.lang.Integer ( java.lang.String ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; if ( java.lang.String == null && java.lang.Integer == null ) { int ++ ; if ( boolean ) { java.lang.Integer = int ; java.lang.String = STRING + java.lang.Integer ; } else { java.lang.String = java.lang.String + int ; java.lang.String = STRING + java.lang.String ; } java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; } switch ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType . org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType ( java.lang.String ) ) { case org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType : Type org.springframework.data.jpa.repository.query.Type = org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding . org.springframework.data.jpa.repository.query.Type ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; java.lang.String = java.lang.String != null ? java.lang.String : java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( java.lang.Integer != null ) { void ( new org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding ( java.lang.Integer , org.springframework.data.jpa.repository.query.Type , java.lang.String ) , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) ; } else { void ( new org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding ( java.lang.String , org.springframework.data.jpa.repository.query.Type , java.lang.String ) , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) ; java.lang.String = java.lang.String != null ? STRING + java.lang.String : java.util.regex.Matcher . java.lang.String ( NUMBER ) ; } break; case org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType : if ( java.lang.Integer != null ) { void ( new org.springframework.data.jpa.repository.query.StringQuery.InParameterBinding ( java.lang.Integer , java.lang.String ) , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) ; } else { void ( new org.springframework.data.jpa.repository.query.StringQuery.InParameterBinding ( java.lang.String , java.lang.String ) , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) ; } break; case org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType : default: java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> . boolean ( java.lang.Integer != null ? new org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ( null , java.lang.Integer , java.lang.String ) : new org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ( java.lang.String , null , java.lang.String ) ) ; } if ( java.lang.String != null ) { java.lang.String = StringUtils . replace ( java.lang.String , java.util.regex.Matcher . java.lang.String ( NUMBER ) , java.lang.String ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; int int = - NUMBER ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; int = java.lang.Math . int ( int , java.lang.Integer . int ( java.lang.String ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> private static void void ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding , java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> < org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding > java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) { for ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding : java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> ) { if ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . boolean ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . java.lang.String ( ) ) || org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . boolean ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . java.lang.Integer ( ) ) ) { Assert . isTrue ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . boolean ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) , java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding , org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) ) ; } } if ( ! java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> . boolean ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) ) { java.util.List<org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding> . boolean ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType ( java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType ; } for ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType : org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType[] ( ) ) { if ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType . java.lang.String ( ) . boolean ( java.lang.String . java.lang.String ( ) ) ) { return org.springframework.data.jpa.repository.query.StringQuery.ParameterBindingParser.ParameterBindingType ; } } throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer java.lang.Integer ) { this( null , java.lang.Integer , null ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , java.lang.Integer java.lang.Integer , java.lang.String java.lang.String ) { if ( java.lang.String == null ) { Assert . notNull ( java.lang.Integer , STRING ) ; } if ( java.lang.Integer == null ) { Assert . notNull ( java.lang.String , STRING ) ; } this . java.lang.String = java.lang.String ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return this . java.lang.Integer == null && this . java.lang.String != null && this . java.lang.String . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer != null && this . java.lang.String == null && java.lang.Integer . boolean ( this . java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . java.lang.String != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = NUMBER ; int += nullSafeHashCode ( this . java.lang.String ) ; int += nullSafeHashCode ( this . java.lang.Integer ) ; int += nullSafeHashCode ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) ) { return false ; } org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding = ( org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding ) java.lang.Object ; return nullSafeEquals ( this . java.lang.String , org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . java.lang.String ) && nullSafeEquals ( this . java.lang.Integer , org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . java.lang.Integer ) && nullSafeEquals ( this . java.lang.String , org.springframework.data.jpa.repository.query.StringQuery.ParameterBinding . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ( ) , java.lang.Integer ( ) , java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( java.lang.String , null , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( int int , java.lang.String java.lang.String ) { super( null , int , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ObjectUtils . isArray ( java.lang.Object ) ) { return java.lang.Object ; } int int = java.lang.reflect.Array . int ( java.lang.Object ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.reflect.Array . java.lang.Object ( java.lang.Object , int ) ) ; } return java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , Type org.springframework.data.jpa.repository.query.Type ) { this( java.lang.String , org.springframework.data.jpa.repository.query.Type , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , Type org.springframework.data.jpa.repository.query.Type , java.lang.String java.lang.String ) { super( java.lang.String , null , java.lang.String ); Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.Type , STRING ) ; Assert . isTrue ( java.util.List<org.springframework.data.jpa.repository.query.Type> . contains ( org.springframework.data.jpa.repository.query.Type ) , java.lang.String . java.lang.String ( STRING , StringUtils . collectionToCommaDelimitedString ( java.util.List<org.springframework.data.jpa.repository.query.Type> ) ) ) ; this . org.springframework.data.jpa.repository.query.Type = org.springframework.data.jpa.repository.query.Type ; }  <METHOD_END>
<METHOD_START> public void ( int int , Type org.springframework.data.jpa.repository.query.Type ) { this( int , org.springframework.data.jpa.repository.query.Type , null ); }  <METHOD_END>
<METHOD_START> public void ( int int , Type org.springframework.data.jpa.repository.query.Type , java.lang.String java.lang.String ) { super( null , int , java.lang.String ); Assert . isTrue ( int > NUMBER , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.Type , STRING ) ; Assert . isTrue ( java.util.List<org.springframework.data.jpa.repository.query.Type> . contains ( org.springframework.data.jpa.repository.query.Type ) , java.lang.String . java.lang.String ( STRING , StringUtils . collectionToCommaDelimitedString ( java.util.List<org.springframework.data.jpa.repository.query.Type> ) ) ) ; this . org.springframework.data.jpa.repository.query.Type = org.springframework.data.jpa.repository.query.Type ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Type org.springframework.data.jpa.repository.query.Type ( ) { return org.springframework.data.jpa.repository.query.Type ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return java.lang.Object ; } switch ( org.springframework.data.jpa.repository.query.Type ) { case STARTING_WITH : return java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ; case ENDING_WITH : return java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ; case CONTAINING : return java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ; case LIKE : default: return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding ) ) { return false ; } org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding = ( org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding ) java.lang.Object ; return super. boolean ( java.lang.Object ) && this . org.springframework.data.jpa.repository.query.Type . equals ( org.springframework.data.jpa.repository.query.StringQuery.LikeParameterBinding . org.springframework.data.jpa.repository.query.Type ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = super. int ( ) ; int += nullSafeHashCode ( this . org.springframework.data.jpa.repository.query.Type ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String ( ) , java.lang.Integer ( ) , org.springframework.data.jpa.repository.query.Type ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.Type org.springframework.data.jpa.repository.query.Type ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; if ( java.lang.String . boolean ( STRING ) ) { return Type . CONTAINING ; } if ( java.lang.String . boolean ( STRING ) ) { return Type . ENDING_WITH ; } if ( java.lang.String . boolean ( STRING ) ) { return Type . STARTING_WITH ; } return Type . LIKE ; }  <METHOD_END>
