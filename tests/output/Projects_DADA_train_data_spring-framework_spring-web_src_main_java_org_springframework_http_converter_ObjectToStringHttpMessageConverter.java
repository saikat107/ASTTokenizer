<METHOD_START> public void ( ConversionService org.springframework.http.converter.ConversionService ) { this( org.springframework.http.converter.ConversionService , StringHttpMessageConverter . DEFAULT_CHARSET ); }  <METHOD_END>
<METHOD_START> public void ( ConversionService org.springframework.http.converter.ConversionService , java.nio.charset.Charset java.nio.charset.Charset ) { super( java.nio.charset.Charset , MediaType . TEXT_PLAIN ); Assert . notNull ( org.springframework.http.converter.ConversionService , STRING ) ; this . org.springframework.http.converter.ConversionService = org.springframework.http.converter.ConversionService ; this . org.springframework.http.converter.StringHttpMessageConverter = new StringHttpMessageConverter ( java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.http.converter.StringHttpMessageConverter . setWriteAcceptCharset ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return this . org.springframework.http.converter.ConversionService . canConvert ( java.lang.String .class , java.lang.Class<> ) && boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { return this . org.springframework.http.converter.ConversionService . canConvert ( java.lang.Class<> , java.lang.String .class ) && boolean ( org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , HttpInputMessage org.springframework.http.converter.HttpInputMessage ) throws java.io.IOException { java.lang.String java.lang.String = this . org.springframework.http.converter.StringHttpMessageConverter . readInternal ( java.lang.String .class , org.springframework.http.converter.HttpInputMessage ) ; return this . org.springframework.http.converter.ConversionService . convert ( java.lang.String , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { java.lang.String java.lang.String = this . org.springframework.http.converter.ConversionService . convert ( java.lang.Object , java.lang.String .class ) ; this . org.springframework.http.converter.StringHttpMessageConverter . writeInternal ( java.lang.String , org.springframework.http.converter.HttpOutputMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Long java.lang.Long ( java.lang.Object java.lang.Object , MediaType org.springframework.http.converter.MediaType ) { java.lang.String java.lang.String = this . org.springframework.http.converter.ConversionService . convert ( java.lang.Object , java.lang.String .class ) ; return this . org.springframework.http.converter.StringHttpMessageConverter . getContentLength ( java.lang.String , org.springframework.http.converter.MediaType ) ; }  <METHOD_END>
