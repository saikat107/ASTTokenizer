<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . LONG_RUNNING ) ; TestBean org.springframework.beans.support.TestBean = new TestBean ( ) ; org.springframework.beans.support.TestBean . setName ( STRING ) ; org.springframework.beans.support.TestBean . setAge ( NUMBER ) ; TestBean org.springframework.beans.support.TestBean = new TestBean ( ) ; org.springframework.beans.support.TestBean . setName ( STRING ) ; org.springframework.beans.support.TestBean . setAge ( NUMBER ) ; TestBean org.springframework.beans.support.TestBean = new TestBean ( ) ; org.springframework.beans.support.TestBean . setName ( STRING ) ; org.springframework.beans.support.TestBean . setAge ( NUMBER ) ; java.util.List java.util.List = new java.util.ArrayList ( ) ; java.util.List . boolean ( org.springframework.beans.support.TestBean ) ; java.util.List . boolean ( org.springframework.beans.support.TestBean ) ; java.util.List . boolean ( org.springframework.beans.support.TestBean ) ; PagedListHolder org.springframework.beans.support.PagedListHolder = new PagedListHolder ( java.util.List ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getSource ( ) == java.util.List ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getNrOfElements ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageSize ( ) == PagedListHolder . DEFAULT_PAGE_SIZE ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; org.springframework.beans.support.PagedListHolder . setPageSize ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageSize ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertFalse ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; org.springframework.beans.support.PagedListHolder . setPage ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertFalse ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; org.springframework.beans.support.PagedListHolder . setPageSize ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageSize ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; org.springframework.beans.support.PagedListHolder . setPage ( NUMBER ) ; org.springframework.beans.support.PagedListHolder . setPageSize ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageSize ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertFalse ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; org.springframework.beans.support.PagedListHolder . setPageSize ( NUMBER ) ; org.springframework.beans.support.PagedListHolder . setPage ( NUMBER ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setProperty ( STRING ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setIgnoreCase ( false ) ; org.springframework.beans.support.PagedListHolder . resort ( ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getSource ( ) == java.util.List ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getNrOfElements ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageCount ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageSize ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . isFirstPage ( ) ) ; assertFalse ( STRING , org.springframework.beans.support.PagedListHolder . isLastPage ( ) ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getFirstElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getLastElementOnPage ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setProperty ( STRING ) ; org.springframework.beans.support.PagedListHolder . resort ( ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setProperty ( STRING ) ; org.springframework.beans.support.PagedListHolder . resort ( ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; org.springframework.beans.support.PagedListHolder . setPage ( NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . size ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setProperty ( STRING ) ; org.springframework.beans.support.PagedListHolder . resort ( ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; ( ( MutableSortDefinition ) org.springframework.beans.support.PagedListHolder . getSort ( ) ) . setIgnoreCase ( true ) ; org.springframework.beans.support.PagedListHolder . resort ( ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; assertTrue ( STRING , org.springframework.beans.support.PagedListHolder . getPageList ( ) . get ( NUMBER ) == org.springframework.beans.support.TestBean ) ; org.springframework.beans.support.PagedListHolder . nextPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; org.springframework.beans.support.PagedListHolder . previousPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; org.springframework.beans.support.PagedListHolder . nextPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; org.springframework.beans.support.PagedListHolder . nextPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; org.springframework.beans.support.PagedListHolder . previousPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; org.springframework.beans.support.PagedListHolder . previousPage ( ) ; assertEquals ( NUMBER , org.springframework.beans.support.PagedListHolder . getPage ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( ! ( java.lang.Object instanceof org.springframework.beans.support.PagedListHolderTests.MockFilter ) ) return false ; final org.springframework.beans.support.PagedListHolderTests.MockFilter org.springframework.beans.support.PagedListHolderTests.MockFilter = ( org.springframework.beans.support.PagedListHolderTests.MockFilter ) java.lang.Object ; if ( ! java.lang.String . boolean ( org.springframework.beans.support.PagedListHolderTests.MockFilter . java.lang.String ) ) return false ; if ( ! java.lang.String . boolean ( org.springframework.beans.support.PagedListHolderTests.MockFilter . java.lang.String ) ) return false ; if ( ! java.lang.String . boolean ( org.springframework.beans.support.PagedListHolderTests.MockFilter . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int ; int = java.lang.String . int ( ) ; int = NUMBER * int + java.lang.String . int ( ) ; int = NUMBER * int + java.lang.String . int ( ) ; return int ; }  <METHOD_END>
