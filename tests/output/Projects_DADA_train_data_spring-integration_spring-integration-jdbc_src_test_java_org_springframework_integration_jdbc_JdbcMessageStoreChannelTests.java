<METHOD_START> @ BeforeTransaction public void void ( ) { for ( MessageGroup org.springframework.integration.jdbc.MessageGroup : org.springframework.integration.jdbc.JdbcMessageStore ) { org.springframework.integration.jdbc.JdbcMessageStore . removeMessageGroup ( org.springframework.integration.jdbc.MessageGroup . getGroupId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; org.springframework.integration.jdbc.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . boolean = true ; org.springframework.integration.jdbc.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; org.springframework.integration.jdbc.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; try { org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . void ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStoreChannelTests.Service . java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.JdbcMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( int int ) { boolean = false ; boolean = false ; java.util.List<java.lang.String> . void ( ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> public static void void ( long long ) throws java.lang.InterruptedException { if ( ! java.util.concurrent.CountDownLatch . boolean ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( ! boolean ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; java.util.concurrent.CountDownLatch . void ( ) ; } if ( boolean ) { boolean = true ; throw new java.lang.RuntimeException ( STRING ) ; } return java.lang.String ; }  <METHOD_END>
