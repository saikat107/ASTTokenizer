<METHOD_START> @ Test ( expected = BeanDefinitionParsingException .class ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; org.w3c.dom.Element org.w3c.dom.Element = loadXMLFrom ( java.lang.String ) . getDocumentElement ( ) ; org.springframework.integration.gemfire.config.xml.GemfireOutboundChannelAdapterParser . parseConsumer ( org.w3c.dom.Element , createFakeParserContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { org.springframework.integration.gemfire.config.xml.ConsumerEndpointFactoryBean . start ( ) ; MessageChannel org.springframework.integration.gemfire.config.xml.MessageChannel = org.springframework.integration.gemfire.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.gemfire.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.integration.gemfire.config.xml.ConsumerEndpointFactoryBean . getPhase ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( false , org.springframework.integration.gemfire.config.xml.ConsumerEndpointFactoryBean . isAutoStartup ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.gemfire.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.gemfire.config.xml.Message<?> ) throws java.lang.Exception { java.util.concurrent.CountDownLatch . void ( ) ; return null ; }  <METHOD_END>
