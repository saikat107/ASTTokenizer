<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.cassandra.core.AsyncCqlTemplate = new AsyncCqlTemplate ( ) ; this . org.springframework.cassandra.core.AsyncCqlTemplate . setSession ( org.springframework.cassandra.core.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.cassandra.core.AsyncCqlTemplate . execute ( ( AsyncSessionCallback < java.lang.String > ) session -> { throw new InvalidQueryException ( STRING ) ; } ) ; fail ( STRING ) ; } catch ( CassandraInvalidQueryException org.springframework.cassandra.core.CassandraInvalidQueryException ) { assertThat ( org.springframework.cassandra.core.CassandraInvalidQueryException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture = org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture . org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , asyncCqlTemplate -> { asyncCqlTemplate . execute ( STRING ) ; verify ( session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { ResultSet org.springframework.cassandra.core.ResultSet = java.lang.Object ( org.springframework.cassandra.core.AsyncCqlTemplate . queryForResultSet ( STRING ) ) ; assertThat ( org.springframework.cassandra.core.ResultSet ) . hasSize ( NUMBER ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.lang.Object ( org.springframework.cassandra.core.AsyncCqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , asyncCqlTemplate -> { List < String > rows = getUninterruptibly ( asyncCqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ) ; assertThat ( rows ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture = org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture . org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( STRING , ResultSet :: wasApplied ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( EmptyResultDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> null ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( IncorrectResultSizeDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , java.lang.String .class ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; ListenableFuture < java.util.List<java.lang.String> < java.lang.String > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForList ( STRING , java.lang.String .class ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { org.springframework.cassandra.core.AsyncCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , asyncCqlTemplate -> { asyncCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; verify ( session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { ListenableFuture < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForResultSet ( new SimpleStatement ( STRING ) ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ) ) . hasSize ( NUMBER ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { ListenableFuture < java.util.List<java.lang.String> < java.lang.String > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> ) ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( org.springframework.cassandra.core.Session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , asyncCqlTemplate -> { ListenableFuture < List < String > > future = asyncCqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; assertThat ( getUninterruptibly ( future ) ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; verify ( session ) . executeAsync ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture = org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture . org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( new SimpleStatement ( STRING ) , ResultSet :: wasApplied ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( EmptyResultDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> null ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( IncorrectResultSizeDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; ListenableFuture < java.util.List<java.lang.String> < java.lang.String > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForList ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { ListenableFuture < ResultSetFuture > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING , ( session , ps ) -> session . executeAsync ( ps . bind ( STRING ) ) ) ; try { assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> ) . get ( ) ) . hasSize ( NUMBER ) ; } catch ( java.lang.Exception java.lang.Exception ) { fail ( java.lang.Exception . java.lang.String ( ) , java.lang.Exception ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.AsyncCqlTemplate -> { when ( this . org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( this . org.springframework.cassandra.core.BoundStatement ) ; when ( this . org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING , STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.cassandra.core.AsyncCqlTemplate . execute ( session -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , ( session , ps ) -> session . executeAsync ( boundStatement ) ) ; fail ( STRING ) ; } catch ( CassandraConnectionFailureException org.springframework.cassandra.core.CassandraConnectionFailureException ) { assertThat ( org.springframework.cassandra.core.CassandraConnectionFailureException ) . hasMessageContaining ( STRING ) ; } ListenableFuture < ResultSetFuture > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( session -> AsyncResult . forExecutionException ( new NoHostAvailableException ( Collections . emptyMap ( ) ) ) , ( session , ps ) -> session . executeAsync ( boundStatement ) ) ; try { org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ResultSetFuture > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( session -> new AsyncResult <> ( preparedStatement ) , ( session , ps ) -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } ) ; try { org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSetFuture> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.PreparedStatement . bind ( ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.util.Iterator<org.springframework.cassandra.core.Row> < Row > > org.springframework.cassandra.core.ListenableFuture<java.util.Iterator<org.springframework.cassandra.core.Row>> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> new AsyncResult <> ( preparedStatement ) , ResultSet :: iterator ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.Iterator<org.springframework.cassandra.core.Row>> ) ) . hasSize ( NUMBER ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> new AsyncResult < PreparedStatement > ( preparedStatement ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> ) ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> AsyncResult . forExecutionException ( new NoHostAvailableException ( Collections . emptyMap ( ) ) ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; try { org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ListenableFuture < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> new AsyncResult < PreparedStatement > ( preparedStatement ) , ps -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , rs -> rs ) ; try { org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture = org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture . org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ) ; ListenableFuture < ResultSet > org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> new AsyncResult < PreparedStatement > ( preparedStatement ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , rs -> rs ) ; try { org.springframework.cassandra.core.ListenableFuture<org.springframework.cassandra.core.ResultSet> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.util.List<org.springframework.cassandra.core.Row> < Row > > org.springframework.cassandra.core.ListenableFuture<java.util.List<org.springframework.cassandra.core.Row>> = org.springframework.cassandra.core.AsyncCqlTemplate . query ( session -> new AsyncResult <> ( preparedStatement ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , ( row , rowNum ) -> row ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.List<org.springframework.cassandra.core.Row>> ) ) . hasSize ( NUMBER ) . contains ( org.springframework.cassandra.core.Row ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( EmptyResultDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.String > org.springframework.cassandra.core.ListenableFuture<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; try { org.springframework.cassandra.core.ListenableFuture<java.lang.String> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( IncorrectResultSizeDataAccessException .class ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForObject ( STRING , java.lang.String .class , STRING ) ; assertThat ( java.lang.String ( java.util.concurrent.Future<java.lang.String> ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; ListenableFuture < java.util.List<java.lang.String> < java.lang.String > > org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> = org.springframework.cassandra.core.AsyncCqlTemplate . queryForList ( STRING , java.lang.String .class , STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.util.List<java.lang.String>> ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.Session . prepareAsync ( STRING ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestPreparedStatementFuture ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.Session . executeAsync ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( org.springframework.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; ListenableFuture < java.lang.Boolean > org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.cassandra.core.AsyncCqlTemplate . execute ( STRING , STRING ) ; assertThat ( java.lang.Object ( org.springframework.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( java.lang.Integer java.lang.Integer , ConsistencyLevel org.springframework.cassandra.core.ConsistencyLevel , com . com.datastax . com.datastax . com.datastax . com.datastax . com.datastax com.datastax.driver.core.policies.RetryPolicy , java.util.function.Consumer<org.springframework.cassandra.core.AsyncCqlTemplate> < AsyncCqlTemplate > java.util.function.Consumer<org.springframework.cassandra.core.AsyncCqlTemplate> ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; when ( this . org.springframework.cassandra.core.Session . executeAsync ( ( Statement ) any ( ) ) ) . thenReturn ( new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( org.springframework.cassandra.core.ResultSet ) ) ; when ( this . org.springframework.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Arrays . java.util.List ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . iterator ( ) ) ; when ( this . org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; SettableFuture < PreparedStatement > org.springframework.cassandra.core.SettableFuture<org.springframework.cassandra.core.PreparedStatement> = SettableFuture . create ( ) ; org.springframework.cassandra.core.SettableFuture<org.springframework.cassandra.core.PreparedStatement> . set ( this . org.springframework.cassandra.core.PreparedStatement ) ; when ( this . org.springframework.cassandra.core.Session . prepareAsync ( anyString ( ) ) ) . thenReturn ( org.springframework.cassandra.core.SettableFuture<org.springframework.cassandra.core.PreparedStatement> ) ; AsyncCqlTemplate org.springframework.cassandra.core.AsyncCqlTemplate = new AsyncCqlTemplate ( ) ; org.springframework.cassandra.core.AsyncCqlTemplate . setSession ( this . org.springframework.cassandra.core.Session ) ; if ( java.lang.Integer != null ) { org.springframework.cassandra.core.AsyncCqlTemplate . setFetchSize ( java.lang.Integer ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { org.springframework.cassandra.core.AsyncCqlTemplate . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { org.springframework.cassandra.core.AsyncCqlTemplate . setConsistencyLevel ( org.springframework.cassandra.core.ConsistencyLevel ) ; } java.util.function.Consumer<org.springframework.cassandra.core.AsyncCqlTemplate> . accept ( org.springframework.cassandra.core.AsyncCqlTemplate ) ; ArgumentCaptor < Statement > org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> = ArgumentCaptor . forClass ( Statement .class ) ; verify ( this . org.springframework.cassandra.core.Session ) . executeAsync ( org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . capture ( ) ) ; Statement org.springframework.cassandra.core.Statement = org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . getValue ( ) ; if ( org.springframework.cassandra.core.Statement instanceof PreparedStatement || org.springframework.cassandra.core.Statement instanceof BoundStatement ) { if ( java.lang.Integer != null ) { verify ( org.springframework.cassandra.core.Statement ) . setFetchSize ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { verify ( org.springframework.cassandra.core.Statement ) . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { verify ( org.springframework.cassandra.core.Statement ) . setConsistencyLevel ( org.springframework.cassandra.core.ConsistencyLevel ) ; } } else { if ( java.lang.Integer != null ) { assertThat ( org.springframework.cassandra.core.Statement . getFetchSize ( ) ) . isEqualTo ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { assertThat ( org.springframework.cassandra.core.Statement . getRetryPolicy ( ) ) . isEqualTo ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( org.springframework.cassandra.core.ConsistencyLevel != null ) { assertThat ( org.springframework.cassandra.core.Statement . getConsistencyLevel ( ) ) . isEqualTo ( org.springframework.cassandra.core.ConsistencyLevel ) ; } } }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ) { try { return java.util.concurrent.Future<T> . T ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( ResultSet org.springframework.cassandra.core.ResultSet ) { boolean ( org.springframework.cassandra.core.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResultSet org.springframework.cassandra.core.ResultSet ) { return super. set ( org.springframework.cassandra.core.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ResultSet org.springframework.cassandra.core.ResultSet ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.core.ResultSet org.springframework.cassandra.core.ResultSet ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.util.concurrent.TimeoutException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Throwable java.lang.Throwable ) { return super. setException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( java.lang.Throwable java.lang.Throwable ) { org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture = new org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ( ) ; org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture . boolean ( java.lang.Throwable ) ; return org.springframework.cassandra.core.AsyncCqlTemplateUnitTests.TestResultSetFuture ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( PreparedStatement org.springframework.cassandra.core.PreparedStatement ) { boolean ( org.springframework.cassandra.core.PreparedStatement ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( PreparedStatement org.springframework.cassandra.core.PreparedStatement ) { return super. set ( org.springframework.cassandra.core.PreparedStatement ) ; }  <METHOD_END>
