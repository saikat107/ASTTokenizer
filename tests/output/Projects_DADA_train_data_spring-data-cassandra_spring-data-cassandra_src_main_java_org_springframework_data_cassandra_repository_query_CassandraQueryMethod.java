<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.cassandra.repository.query.RepositoryMetadata , ProjectionFactory org.springframework.data.cassandra.repository.query.ProjectionFactory , CassandraMappingContext org.springframework.data.cassandra.repository.query.CassandraMappingContext ) { super( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata , org.springframework.data.cassandra.repository.query.ProjectionFactory ); Assert . notNull ( org.springframework.data.cassandra.repository.query.CassandraMappingContext , STRING ) ; void ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.query.RepositoryMetadata ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . org.springframework.data.cassandra.repository.query.CassandraMappingContext = org.springframework.data.cassandra.repository.query.CassandraMappingContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.cassandra.repository.query.RepositoryMetadata ) { if ( isSliceQuery ( ) || isPageQuery ( ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<?> < ? > org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<?> ( ) { if ( org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<> == null ) { java.lang.Class<?> < ? > java.lang.Class<?> = getReturnedObjectType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = getDomainClass ( ) ; if ( ClassUtils . isPrimitiveOrWrapper ( java.lang.Class<> ) ) { this . org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<?> = new SimpleCassandraEntityMetadata <> ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) java.lang.Class<> , org.springframework.data.cassandra.repository.query.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ) ; } else { java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?>> < CassandraPersistentEntity < ? > > java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?>> = org.springframework.data.cassandra.repository.query.CassandraMappingContext . getPersistentEntity ( java.lang.Class<> ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?> = org.springframework.data.cassandra.repository.query.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?> = java.util.Optional<org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?>> . filter ( e -> ! e . getType ( ) . isInterface ( ) ) . orElse ( org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<> ) ; CassandraPersistentEntity < ? > org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<?> = java.lang.Class<> . boolean ( java.lang.Class<> ) ? org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<> : org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<> ; this . org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<?> = new SimpleCassandraEntityMetadata <> ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<> . getType ( ) , org.springframework.data.cassandra.repository.query.CassandraPersistentEntity<> ) ; } } return this . org.springframework.data.cassandra.repository.query.CassandraEntityMetadata<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.query.CassandraParameters org.springframework.data.cassandra.repository.query.CassandraParameters ( ) { return ( CassandraParameters ) super. getParameters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.cassandra.repository.query.CassandraParameters org.springframework.data.cassandra.repository.query.CassandraParameters ( java.lang.reflect.Method java.lang.reflect.Method ) { return new CassandraParameters ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( java.lang.String ( ) != null ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = ( java.lang.String ) AnnotationUtils . getValue ( org.springframework.data.cassandra.repository.query.Query ( ) ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.query.Query org.springframework.data.cassandra.repository.query.Query ( ) { return AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Query .class ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.cassandra.repository.query.TypeInformation<?> < ? > org.springframework.data.cassandra.repository.query.TypeInformation<?> ( ) { return ClassTypeInformation . fromReturnTypeOf ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ResultSet .class . boolean ( org.springframework.data.cassandra.repository.query.TypeInformation<?> ( ) . getActualType ( ) . getType ( ) ) ; }  <METHOD_END>
