<METHOD_START> public void ( ) { super(); setAutodetect ( false ) ; setNamingStrategy ( this . org.springframework.integration.monitor.MetadataNamingStrategy ) ; setAssembler ( new IntegrationMetadataMBeanInfoAssembler ( this . org.springframework.integration.monitor.IntegrationJmxAttributeSource ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Properties . void ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.integration.monitor.MetadataNamingStrategy . setDefaultDomain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notEmpty ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.integration.monitor.ApplicationContext )			throws org.springframework.integration.monitor.BeansException { Assert . notNull ( org.springframework.integration.monitor.ApplicationContext , STRING ) ; this . org.springframework.integration.monitor.ApplicationContext = org.springframework.integration.monitor.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StringValueResolver org.springframework.integration.monitor.StringValueResolver ) { this . org.springframework.integration.monitor.IntegrationJmxAttributeSource . setValueResolver ( org.springframework.integration.monitor.StringValueResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> < java.lang.String , MessageHandlerMetrics > java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( MessageHandlerMetrics .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> < java.lang.String , MessageHandlerMetrics > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> : java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> . getKey ( ) ; MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> . getValue ( ) ; if ( this . org.springframework.integration.monitor.MessageHandler ( org.springframework.integration.monitor.MessageHandlerMetrics ) != null ) { if ( org.springframework.integration.monitor.Log . isDebugEnabled ( ) ) { org.springframework.integration.monitor.Log . debug ( STRING + java.lang.String + STRING ) ; } continue; } MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics = ( MessageHandlerMetrics ) java.lang.Object ( org.springframework.integration.monitor.MessageHandlerMetrics ) ; this . java.util.Set<org.springframework.integration.monitor.MessageHandlerMetrics> . add ( org.springframework.integration.monitor.MessageHandlerMetrics ) ; } java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> < java.lang.String , MessageSourceMetrics > java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( MessageSourceMetrics .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> < java.lang.String , MessageSourceMetrics > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> : java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> . entrySet ( ) ) { MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics = ( MessageSourceMetrics ) java.lang.Object ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> . getValue ( ) ) ; this . java.util.Set<org.springframework.integration.monitor.MessageSourceMetrics> . add ( org.springframework.integration.monitor.MessageSourceMetrics ) ; } java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> < java.lang.String , MessageChannelMetrics > java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( MessageChannelMetrics .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> < java.lang.String , MessageChannelMetrics > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> : java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> . entrySet ( ) ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = ( MessageChannelMetrics ) java.lang.Object ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> . getValue ( ) ) ; this . java.util.Set<org.springframework.integration.monitor.MessageChannelMetrics> . add ( org.springframework.integration.monitor.MessageChannelMetrics ) ; } java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageProducer> < java.lang.String , MessageProducer > java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageProducer> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( MessageProducer .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageProducer> < java.lang.String , MessageProducer > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageProducer> : java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageProducer> . entrySet ( ) ) { MessageProducer org.springframework.integration.monitor.MessageProducer = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageProducer> . getValue ( ) ; if ( org.springframework.integration.monitor.MessageProducer instanceof Lifecycle ) { Lifecycle org.springframework.integration.monitor.Lifecycle = ( Lifecycle ) java.lang.Object ( org.springframework.integration.monitor.MessageProducer ) ; if ( ! ( org.springframework.integration.monitor.Lifecycle instanceof AbstractMessageProducingHandler ) ) { this . java.util.Set<org.springframework.integration.monitor.Lifecycle> . add ( org.springframework.integration.monitor.Lifecycle ) ; } } } super. afterSingletonsInstantiated ( ) ; try { void ( ) ; void ( ) ; void ( ) ; void ( ) ; if ( this . org.springframework.integration.monitor.ApplicationContext . containsBean ( IntegrationContextUtils . INTEGRATION_MESSAGE_HISTORY_CONFIGURER_BEAN_NAME ) ) { java.lang.Object java.lang.Object = this . org.springframework.integration.monitor.ApplicationContext . getBean ( IntegrationContextUtils . INTEGRATION_MESSAGE_HISTORY_CONFIGURER_BEAN_NAME ) ; if ( java.lang.Object instanceof MessageHistoryConfigurer ) { javax.management.ObjectName ( java.lang.Object , IntegrationContextUtils . INTEGRATION_MESSAGE_HISTORY_CONFIGURER_BEAN_NAME ) ; } } if ( ! this . org.springframework.integration.monitor.ApplicationContext . containsBean ( IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) ) { this . org.springframework.integration.monitor.IntegrationManagementConfigurer = new IntegrationManagementConfigurer ( ) ; this . org.springframework.integration.monitor.IntegrationManagementConfigurer . setDefaultCountsEnabled ( true ) ; this . org.springframework.integration.monitor.IntegrationManagementConfigurer . setDefaultStatsEnabled ( true ) ; this . org.springframework.integration.monitor.IntegrationManagementConfigurer . setApplicationContext ( this . org.springframework.integration.monitor.ApplicationContext ) ; this . org.springframework.integration.monitor.IntegrationManagementConfigurer . setBeanName ( IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME ) ; this . org.springframework.integration.monitor.IntegrationManagementConfigurer . afterSingletonsInstantiated ( ) ; } else { this . org.springframework.integration.monitor.IntegrationManagementConfigurer = this . org.springframework.integration.monitor.ApplicationContext . getBean ( IntegrationManagementConfigurer . MANAGEMENT_CONFIGURER_NAME , IntegrationManagementConfigurer .class ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { unregisterBeans ( ) ; throw java.lang.RuntimeException ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( final java.lang.Object java.lang.Object ) { if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { final java.util.concurrent.atomic.AtomicReference<org.springframework.integration.monitor.MessageHandler> < MessageHandler > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.monitor.MessageHandler> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.monitor.MessageHandler> < MessageHandler > ( ) ; ReflectionUtils . doWithFields ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , field -> { field . setAccessible ( true ) ; Object handler = field . get ( bean ) ; if ( handler instanceof MessageHandler ) { wrapped . set ( ( MessageHandler ) handler ) ; } } , field -> wrapped . get ( ) == null && field . getName ( ) . startsWith ( STRING ) ) ; return java.util.concurrent.atomic.AtomicReference<org.springframework.integration.monitor.MessageHandler> . get ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { try { javax.management.ObjectName javax.management.ObjectName = getObjectName ( java.lang.Object , java.lang.String ) ; java.lang.Object java.lang.Object = null ; if ( isMBean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { java.lang.Object = java.lang.Object ; } else { javax.management.DynamicMBean javax.management.DynamicMBean = adaptMBeanIfPossible ( java.lang.Object ) ; if ( javax.management.DynamicMBean != null ) { java.lang.Object = javax.management.DynamicMBean ; } } if ( java.lang.Object != null ) { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } doRegister ( java.lang.Object , javax.management.ObjectName ) ; } else { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + java.lang.String + STRING + javax.management.ObjectName + STRING ) ; } javax.management.modelmbean.ModelMBean javax.management.modelmbean.ModelMBean = createAndConfigureMBean ( java.lang.Object , java.lang.String ) ; doRegister ( javax.management.modelmbean.ModelMBean , javax.management.ObjectName ) ; } return javax.management.ObjectName ; } catch ( javax.management.JMException javax.management.JMException ) { throw new UnableToRegisterMBeanException ( STRING + java.lang.Object + STRING + java.lang.String + STRING , javax.management.JMException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. destroy ( ) ; for ( MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageChannelMetrics> ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageChannelMetrics ) ; } for ( MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageHandlerMetrics> ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageHandlerMetrics ) ; } for ( MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageSourceMetrics> ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageSourceMetrics ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( long long ) { if ( ! this . java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { org.springframework.integration.monitor.Log . error ( STRING ) ; return; } this . long = java.lang.System . long ( ) + long ; try { org.springframework.integration.monitor.Log . debug ( STRING ) ; void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . error ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { void ( ) ; void ( ) ; void ( ) ; void ( ) ; long long = this . long - java.lang.System . long ( ) ; if ( long > NUMBER ) { try { java.lang.Thread . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; org.springframework.integration.monitor.Log . error ( STRING ) ; } } void ( ) ; } finally { this . java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> < java.lang.String , MessageSourceMetrics > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> : this . java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> . entrySet ( ) ) { MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> . getValue ( ) ; if ( org.springframework.integration.monitor.MessageSourceMetrics instanceof Lifecycle ) { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageSourceMetrics ) ; } ( ( Lifecycle ) org.springframework.integration.monitor.MessageSourceMetrics ) . stop ( ) ; } else { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageSourceMetrics + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( ) { for ( Lifecycle org.springframework.integration.monitor.Lifecycle : this . java.util.Set<org.springframework.integration.monitor.Lifecycle> ) { if ( ! ( org.springframework.integration.monitor.Lifecycle instanceof OrderlyShutdownCapable ) ) { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.Lifecycle ) ; } org.springframework.integration.monitor.Lifecycle . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ ManagedOperation public void void ( ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> < java.lang.String , MessageChannelMetrics > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> : this . java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> . entrySet ( ) ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> . getValue ( ) ; MessageChannel org.springframework.integration.monitor.MessageChannel = ( MessageChannel ) org.springframework.integration.monitor.MessageChannelMetrics ; if ( org.springframework.integration.monitor.MessageChannel instanceof Lifecycle ) { if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.MessageChannel ) ; } ( ( Lifecycle ) org.springframework.integration.monitor.MessageChannel ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> protected final void void ( ) { org.springframework.integration.monitor.Log . debug ( STRING ) ; java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> < java.lang.String , OrderlyShutdownCapable > java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( OrderlyShutdownCapable .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> < java.lang.String , OrderlyShutdownCapable > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> : java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> . entrySet ( ) ) { OrderlyShutdownCapable org.springframework.integration.monitor.OrderlyShutdownCapable = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> . getValue ( ) ; int int = org.springframework.integration.monitor.OrderlyShutdownCapable . beforeShutdown ( ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.OrderlyShutdownCapable + STRING + int + STRING ) ; } } org.springframework.integration.monitor.Log . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( ) { org.springframework.integration.monitor.Log . debug ( STRING ) ; java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> < java.lang.String , OrderlyShutdownCapable > java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> = this . org.springframework.integration.monitor.ApplicationContext . getBeansOfType ( OrderlyShutdownCapable .class ) ; for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> < java.lang.String , OrderlyShutdownCapable > java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> : java.util.Map<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> . entrySet ( ) ) { OrderlyShutdownCapable org.springframework.integration.monitor.OrderlyShutdownCapable = java.util.Map.Entry<java.lang.String,org.springframework.integration.monitor.OrderlyShutdownCapable> . getValue ( ) ; int int = org.springframework.integration.monitor.OrderlyShutdownCapable . afterShutdown ( ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + org.springframework.integration.monitor.OrderlyShutdownCapable + STRING + int + STRING ) ; } } org.springframework.integration.monitor.Log . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . COUNTER , displayName = STRING ) public int int ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getChannelNames ( ) . length ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . COUNTER , displayName = STRING ) public int int ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getHandlerNames ( ) . length ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . COUNTER , displayName = STRING ) public int int ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getSourceNames ( ) . length ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String [] java.lang.String[] ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getHandlerNames ( ) ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . GAUGE , displayName = STRING ) public int int ( ) { return ( int ) long ( ) ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . GAUGE , displayName = STRING ) public long long ( ) { int int = NUMBER ; for ( MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageHandlerMetrics> ) { int += org.springframework.integration.monitor.MessageHandlerMetrics . getActiveCountLong ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ ManagedMetric ( metricType = MetricType . GAUGE , displayName = STRING ) public int int ( ) { int int = NUMBER ; for ( MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageChannelMetrics> ) { if ( org.springframework.integration.monitor.MessageChannelMetrics instanceof QueueChannel ) { int += ( ( QueueChannel ) org.springframework.integration.monitor.MessageChannelMetrics ) . getQueueSize ( ) ; } } return int ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String [] java.lang.String[] ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getChannelNames ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.monitor.MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics ( java.lang.String java.lang.String ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getHandlerMetrics ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.monitor.Statistics org.springframework.integration.monitor.Statistics ( java.lang.String java.lang.String ) { MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics = org.springframework.integration.monitor.MessageHandlerMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageHandlerMetrics != null ? org.springframework.integration.monitor.MessageHandlerMetrics . getDuration ( ) : null ; }  <METHOD_END>
<METHOD_START> @ ManagedAttribute public java.lang.String [] java.lang.String[] ( ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getSourceNames ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.monitor.MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics ( java.lang.String java.lang.String ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getSourceMetrics ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { return ( int ) long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics = org.springframework.integration.monitor.MessageSourceMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageSourceMetrics != null ? org.springframework.integration.monitor.MessageSourceMetrics . getMessageCountLong ( ) : - NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.monitor.MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String java.lang.String ) { return this . org.springframework.integration.monitor.IntegrationManagementConfigurer . getChannelMetrics ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { return ( int ) long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageChannelMetrics != null ? org.springframework.integration.monitor.MessageChannelMetrics . getSendCountLong ( ) : - NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { return ( int ) long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageChannelMetrics != null ? org.springframework.integration.monitor.MessageChannelMetrics . getSendErrorCountLong ( ) : - NUMBER ; }  <METHOD_END>
<METHOD_START> public int int ( java.lang.String java.lang.String ) { return ( int ) long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public long long ( java.lang.String java.lang.String ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String ) ; if ( org.springframework.integration.monitor.MessageChannelMetrics instanceof PollableChannelManagement ) { return ( ( PollableChannelManagement ) org.springframework.integration.monitor.MessageChannelMetrics ) . getReceiveCountLong ( ) ; } return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ ManagedOperation public org.springframework.integration.monitor.Statistics org.springframework.integration.monitor.Statistics ( java.lang.String java.lang.String ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageChannelMetrics != null ? org.springframework.integration.monitor.MessageChannelMetrics . getSendRate ( ) : null ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.monitor.Statistics org.springframework.integration.monitor.Statistics ( java.lang.String java.lang.String ) { MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics = org.springframework.integration.monitor.MessageChannelMetrics ( java.lang.String ) ; return org.springframework.integration.monitor.MessageChannelMetrics != null ? org.springframework.integration.monitor.MessageChannelMetrics . getErrorRate ( ) : null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( MessageChannelMetrics org.springframework.integration.monitor.MessageChannelMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageChannelMetrics> ) { java.lang.String java.lang.String = ( ( NamedComponent ) org.springframework.integration.monitor.MessageChannelMetrics ) . getComponentName ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageChannelMetrics> . put ( java.lang.String , org.springframework.integration.monitor.MessageChannelMetrics ) ; if ( ! boolean ( this . java.lang.String[] , java.lang.String ) ) { continue; } java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + java.lang.String ) ; } registerBeanNameOrInstance ( org.springframework.integration.monitor.MessageChannelMetrics , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageHandlerMetrics> ) { MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics = org.springframework.integration.monitor.MessageHandlerMetrics ( org.springframework.integration.monitor.MessageHandlerMetrics ) ; java.lang.String java.lang.String = org.springframework.integration.monitor.MessageHandlerMetrics . getManagedName ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageHandlerMetrics> . put ( java.lang.String , org.springframework.integration.monitor.MessageHandlerMetrics ) ; if ( ! boolean ( this . java.lang.String[] , java.lang.String ) ) { continue; } java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.monitor.MessageHandlerMetrics ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + java.lang.String ) ; } registerBeanNameOrInstance ( org.springframework.integration.monitor.MessageHandlerMetrics , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics : this . java.util.Set<org.springframework.integration.monitor.MessageSourceMetrics> ) { MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics = org.springframework.integration.monitor.MessageSourceMetrics ( org.springframework.integration.monitor.MessageSourceMetrics ) ; java.lang.String java.lang.String = org.springframework.integration.monitor.MessageSourceMetrics . getManagedName ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.monitor.MessageSourceMetrics> . put ( java.lang.String , org.springframework.integration.monitor.MessageSourceMetrics ) ; if ( ! boolean ( this . java.lang.String[] , java.lang.String ) ) { continue; } java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.monitor.MessageSourceMetrics ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + java.lang.String ) ; } registerBeanNameOrInstance ( org.springframework.integration.monitor.MessageSourceMetrics , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { java.lang.String [] java.lang.String[] = this . org.springframework.integration.monitor.ApplicationContext . getBeanNamesForType ( AbstractEndpoint .class ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! this . java.util.Map<java.lang.String,java.lang.String> . java.util.Collection<java.lang.String> ( ) . boolean ( java.lang.String ) ) { AbstractEndpoint org.springframework.integration.monitor.AbstractEndpoint = this . org.springframework.integration.monitor.ApplicationContext . getBean ( java.lang.String , AbstractEndpoint .class ) ; java.lang.String java.lang.String ; java.lang.String = org.springframework.integration.monitor.AbstractEndpoint . getComponentName ( ) ; java.lang.String java.lang.String ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String = STRING ; } else { java.lang.String = org.springframework.integration.monitor.AbstractEndpoint . getComponentName ( ) ; java.lang.String = STRING ; } if ( ! boolean ( this . java.lang.String[] , java.lang.String ) ) { continue; } if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { int int = NUMBER ; java.lang.String java.lang.String = java.lang.String + STRING + int ; while ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.lang.String = java.lang.String + STRING + ( ++ int ) ; } java.lang.String = java.lang.String ; } java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; java.lang.String = java.lang.String ( org.springframework.integration.monitor.AbstractEndpoint , java.lang.String , java.lang.String ) ; javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( new ManagedEndpoint ( org.springframework.integration.monitor.AbstractEndpoint ) , java.lang.String ) ; if ( org.springframework.integration.monitor.Log . isInfoEnabled ( ) ) { org.springframework.integration.monitor.Log . info ( STRING + javax.management.ObjectName ) ; } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { java.lang.Boolean java.lang.Boolean = java.lang.Boolean ( java.lang.String[] , java.lang.String ) ; return java.lang.Boolean == null ? false : java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> private java.lang.Boolean java.lang.Boolean ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { boolean boolean = false ; java.lang.String java.lang.String = java.lang.String ; if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER ) ; } if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { return ! boolean ; } } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof Advised ) ) { return java.lang.Object ; } Advised org.springframework.integration.monitor.Advised = ( Advised ) java.lang.Object ; if ( org.springframework.integration.monitor.Advised . getTargetSource ( ) == null ) { return null ; } try { return java.lang.Object ( org.springframework.integration.monitor.Advised . getTargetSource ( ) . getTarget ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . error ( STRING , java.lang.Exception ) ; return null ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = STRING + java.lang.String ; if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } return java.lang.String . java.lang.String ( this . java.lang.String + STRING + java.lang.String ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics ) { return java.lang.String . java.lang.String ( this . java.lang.String + STRING + java.lang.String ( ) , org.springframework.integration.monitor.MessageHandlerMetrics . getManagedName ( ) , org.springframework.integration.monitor.MessageHandlerMetrics . getManagedType ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics ) { return java.lang.String . java.lang.String ( this . java.lang.String + STRING + java.lang.String ( ) , org.springframework.integration.monitor.MessageSourceMetrics . getManagedName ( ) , org.springframework.integration.monitor.MessageSourceMetrics . getManagedType ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( AbstractEndpoint org.springframework.integration.monitor.AbstractEndpoint , java.lang.String java.lang.String , java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( this . java.lang.String + STRING + java.lang.String ( ) , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { if ( this . java.util.Properties . boolean ( ) ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : this . java.util.Properties . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) + STRING + java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.monitor.MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics ( MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics ) { MessageHandlerMetrics org.springframework.integration.monitor.MessageHandlerMetrics = org.springframework.integration.monitor.MessageHandlerMetrics ; if ( org.springframework.integration.monitor.MessageHandlerMetrics . getManagedName ( ) != null && org.springframework.integration.monitor.MessageHandlerMetrics . getManagedType ( ) != null ) { return org.springframework.integration.monitor.MessageHandlerMetrics ; } java.lang.String [] java.lang.String[] = this . org.springframework.integration.monitor.ApplicationContext . getBeanNamesForType ( AbstractEndpoint .class ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = null ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.Object = this . org.springframework.integration.monitor.ApplicationContext . getBean ( java.lang.String ) ; try { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ( java.lang.Object , STRING ) ) ; if ( java.lang.Object == org.springframework.integration.monitor.MessageHandlerMetrics || this . java.lang.Object ( this . org.springframework.integration.monitor.MessageHandler ( java.lang.Object ) ) == org.springframework.integration.monitor.MessageHandlerMetrics ) { java.lang.String = java.lang.String ; java.lang.String = java.lang.String ; break; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . trace ( STRING + java.lang.String ) ; } } if ( java.lang.String != null && java.lang.Object != null && java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String = STRING ; } if ( java.lang.String != null && java.lang.Object != null && java.lang.String . boolean ( STRING ) ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof Advised ) { TargetSource org.springframework.integration.monitor.TargetSource = ( ( Advised ) java.lang.Object ) . getTargetSource ( ) ; if ( org.springframework.integration.monitor.TargetSource != null ) { try { java.lang.Object = org.springframework.integration.monitor.TargetSource . getTarget ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . error ( STRING + java.lang.String ) ; } } } java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , STRING ) ; if ( java.lang.Object != null ) { if ( ! this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . boolean ( java.lang.Object ) ) { this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . java.util.concurrent.atomic.AtomicLong ( java.lang.Object , new java.util.concurrent.atomic.AtomicLong ( ) ) ; } java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . java.util.concurrent.atomic.AtomicLong ( java.lang.Object ) ; long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; java.lang.String java.lang.String = STRING ; if ( long > NUMBER ) { java.lang.String = STRING + long ; } java.lang.String = java.lang.Object + java.lang.String ; java.lang.String = STRING ; } } if ( java.lang.Object instanceof Lifecycle ) { if ( org.springframework.integration.monitor.MessageHandlerMetrics instanceof MappingMessageRouterManagement ) { if ( org.springframework.integration.monitor.MessageHandlerMetrics instanceof TrackableComponent ) { org.springframework.integration.monitor.MessageHandlerMetrics = new TrackableRouterMetrics ( ( Lifecycle ) java.lang.Object , ( MappingMessageRouterManagement ) org.springframework.integration.monitor.MessageHandlerMetrics ) ; } else { org.springframework.integration.monitor.MessageHandlerMetrics = new RouterMetrics ( ( Lifecycle ) java.lang.Object , ( MappingMessageRouterManagement ) org.springframework.integration.monitor.MessageHandlerMetrics ) ; } } else { if ( org.springframework.integration.monitor.MessageHandlerMetrics instanceof TrackableComponent ) { org.springframework.integration.monitor.MessageHandlerMetrics = new LifecycleTrackableMessageHandlerMetrics ( ( Lifecycle ) java.lang.Object , org.springframework.integration.monitor.MessageHandlerMetrics ) ; } else { org.springframework.integration.monitor.MessageHandlerMetrics = new LifecycleMessageHandlerMetrics ( ( Lifecycle ) java.lang.Object , org.springframework.integration.monitor.MessageHandlerMetrics ) ; } } } if ( java.lang.String == null ) { if ( org.springframework.integration.monitor.MessageHandlerMetrics instanceof NamedComponent ) { java.lang.String = ( ( NamedComponent ) org.springframework.integration.monitor.MessageHandlerMetrics ) . getComponentName ( ) ; } if ( java.lang.String == null ) { java.lang.String = org.springframework.integration.monitor.MessageHandlerMetrics . toString ( ) ; } java.lang.String = STRING ; } if ( java.lang.String != null ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } org.springframework.integration.monitor.MessageHandlerMetrics . setManagedType ( java.lang.String ) ; org.springframework.integration.monitor.MessageHandlerMetrics . setManagedName ( java.lang.String ) ; return org.springframework.integration.monitor.MessageHandlerMetrics ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( STRING . int ( ) + NUMBER ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.monitor.MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics ( MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics ) { MessageSourceMetrics org.springframework.integration.monitor.MessageSourceMetrics = org.springframework.integration.monitor.MessageSourceMetrics ; if ( org.springframework.integration.monitor.MessageSourceMetrics . getManagedName ( ) != null ) { return org.springframework.integration.monitor.MessageSourceMetrics ; } java.lang.String [] java.lang.String[] = this . org.springframework.integration.monitor.ApplicationContext . getBeanNamesForType ( AbstractEndpoint .class ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = null ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.Object = this . org.springframework.integration.monitor.ApplicationContext . getBean ( java.lang.String ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.integration.monitor.MessageSourceMetrics instanceof MessagingGatewaySupport && java.lang.Object == org.springframework.integration.monitor.MessageSourceMetrics ) { java.lang.Object = org.springframework.integration.monitor.MessageSourceMetrics ; } else { try { java.lang.Object = java.lang.Object ( java.lang.Object ( java.lang.Object , STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . trace ( STRING + java.lang.String ) ; } } if ( java.lang.Object == org.springframework.integration.monitor.MessageSourceMetrics ) { java.lang.String = java.lang.String ; java.lang.String = java.lang.String ; break; } } if ( java.lang.String == null ) { java.lang.Object = null ; } if ( java.lang.String != null && java.lang.Object != null && java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.String = STRING ; } if ( java.lang.String != null && java.lang.Object != null && java.lang.String . boolean ( STRING ) ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof Advised ) { TargetSource org.springframework.integration.monitor.TargetSource = ( ( Advised ) java.lang.Object ) . getTargetSource ( ) ; if ( org.springframework.integration.monitor.TargetSource != null ) { try { java.lang.Object = org.springframework.integration.monitor.TargetSource . getTarget ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.monitor.Log . error ( STRING + java.lang.String ) ; } } } java.lang.Object java.lang.Object = null ; if ( java.lang.Object instanceof MessagingGatewaySupport ) { java.lang.Object = ( ( MessagingGatewaySupport ) java.lang.Object ) . getRequestChannel ( ) ; } else { java.lang.Object = java.lang.Object ( java.lang.Object , STRING ) ; } if ( java.lang.Object != null ) { if ( ! this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . boolean ( java.lang.Object ) ) { this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . java.util.concurrent.atomic.AtomicLong ( java.lang.Object , new java.util.concurrent.atomic.AtomicLong ( ) ) ; } java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong = this . java.util.Map<java.lang.Object,java.util.concurrent.atomic.AtomicLong> . java.util.concurrent.atomic.AtomicLong ( java.lang.Object ) ; long long = java.util.concurrent.atomic.AtomicLong . long ( ) ; java.lang.String java.lang.String = STRING ; if ( long > NUMBER ) { java.lang.String = STRING + long ; } java.lang.String = java.lang.Object + java.lang.String ; java.lang.String = STRING ; } } if ( java.lang.Object instanceof Lifecycle ) { if ( java.lang.Object instanceof TrackableComponent ) { if ( org.springframework.integration.monitor.MessageSourceMetrics instanceof MessageSourceManagement ) { org.springframework.integration.monitor.MessageSourceMetrics = new LifecycleTrackableMessageSourceManagement ( ( Lifecycle ) java.lang.Object , ( MessageSourceManagement ) org.springframework.integration.monitor.MessageSourceMetrics ) ; } else { org.springframework.integration.monitor.MessageSourceMetrics = new LifecycleTrackableMessageSourceMetrics ( ( Lifecycle ) java.lang.Object , org.springframework.integration.monitor.MessageSourceMetrics ) ; } } else { if ( org.springframework.integration.monitor.MessageSourceMetrics instanceof MessageSourceManagement ) { org.springframework.integration.monitor.MessageSourceMetrics = new LifecycleMessageSourceManagement ( ( Lifecycle ) java.lang.Object , ( MessageSourceManagement ) org.springframework.integration.monitor.MessageSourceMetrics ) ; } else { org.springframework.integration.monitor.MessageSourceMetrics = new LifecycleMessageSourceMetrics ( ( Lifecycle ) java.lang.Object , org.springframework.integration.monitor.MessageSourceMetrics ) ; } } } if ( java.lang.String == null ) { java.lang.String = org.springframework.integration.monitor.MessageSourceMetrics . toString ( ) ; java.lang.String = STRING ; } if ( java.lang.String != null ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; } org.springframework.integration.monitor.MessageSourceMetrics . setManagedType ( java.lang.String ) ; org.springframework.integration.monitor.MessageSourceMetrics . setManagedName ( java.lang.String ) ; return org.springframework.integration.monitor.MessageSourceMetrics ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ; if ( java.lang.reflect.Field == null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } if ( org.springframework.integration.monitor.Log . isDebugEnabled ( ) ) { org.springframework.integration.monitor.Log . debug ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ; }  <METHOD_END>
