<METHOD_START> @ Before public void void ( ) { org.springframework.data.keyvalue.core.SpelQueryEngine<org.springframework.data.keyvalue.core.KeyValueAdapter> = new SpelQueryEngine < KeyValueAdapter > ( ) ; org.springframework.data.keyvalue.core.SpelQueryEngine<org.springframework.data.keyvalue.core.KeyValueAdapter> . registerAdapter ( org.springframework.data.keyvalue.core.KeyValueAdapter ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { doReturn ( java.lang.Iterable<org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person> ) . when ( org.springframework.data.keyvalue.core.KeyValueAdapter ) . getAllOf ( anyString ( ) ) ; assertThat ( ( java.util.Collection<org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person> < org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person > ) org.springframework.data.keyvalue.core.SpelQueryEngine<org.springframework.data.keyvalue.core.KeyValueAdapter> . execute ( org.springframework.data.keyvalue.core.SpelCriteria ( STRING , STRING ) , null , - NUMBER , - NUMBER , anyString ( ) ) , contains ( org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { doReturn ( java.lang.Iterable<org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person> ) . when ( org.springframework.data.keyvalue.core.KeyValueAdapter ) . getAllOf ( anyString ( ) ) ; assertThat ( org.springframework.data.keyvalue.core.SpelQueryEngine<org.springframework.data.keyvalue.core.KeyValueAdapter> . count ( org.springframework.data.keyvalue.core.SpelCriteria ( STRING , STRING ) , anyString ( ) ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.keyvalue.core.SpelCriteria org.springframework.data.keyvalue.core.SpelCriteria ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws java.lang.Exception { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( java.lang.Object[] . int ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { java.util.List<java.lang.Class<?>> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.PersonRepository .class . java.lang.reflect.Method ( java.lang.String , java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; RepositoryMetadata org.springframework.data.keyvalue.core.RepositoryMetadata = mock ( RepositoryMetadata .class ) ; doReturn ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) . when ( org.springframework.data.keyvalue.core.RepositoryMetadata ) . getReturnedDomainClass ( java.lang.reflect.Method ) ; PartTree org.springframework.data.keyvalue.core.PartTree = new PartTree ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) ) ; SpelQueryCreator org.springframework.data.keyvalue.core.SpelQueryCreator = new SpelQueryCreator ( org.springframework.data.keyvalue.core.PartTree , new ParametersParameterAccessor ( new QueryMethod ( java.lang.reflect.Method , org.springframework.data.keyvalue.core.RepositoryMetadata , new SpelAwareProxyProjectionFactory ( ) ) . getParameters ( ) , java.lang.Object[] ) ) ; return new SpelCriteria ( org.springframework.data.keyvalue.core.SpelQueryCreator . createQuery ( ) . getCritieria ( ) , new StandardEvaluationContext ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person org.springframework.data.keyvalue.core.SpelQueryEngineUnitTests.Person ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , int int ) { this . java.lang.String = java.lang.String ; this . int = int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
