<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( java.lang.Class<> ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( java.lang.Class<> ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2MethodSecurityConfiguration .class ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( BaseClientDetails .class ) ; AuthorizationEndpoint org.springframework.boot.autoconfigure.security.oauth2.AuthorizationEndpoint = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( AuthorizationEndpoint .class ) ; UserApprovalHandler org.springframework.boot.autoconfigure.security.oauth2.UserApprovalHandler = ( UserApprovalHandler ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.oauth2.AuthorizationEndpoint , STRING ) ; ClientDetailsService org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsService = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetailsService .class ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsService . loadClientByClientId ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getClientId ( ) ) ; assertThat ( AopUtils . isJdkDynamicProxy ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsService ) ) . isTrue ( ) ; assertThat ( AopUtils . getTargetClass ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsService ) . getName ( ) ) . isEqualTo ( InMemoryClientDetailsService .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.UserApprovalHandler ) . isInstanceOf ( ApprovalStoreUserApprovalHandler .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) . isEqualTo ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBeanNamesForType ( OAuth2RestOperations .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.RoleHierarchyConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; PreInvocationAuthorizationAdvice org.springframework.boot.autoconfigure.security.oauth2.PreInvocationAuthorizationAdvice = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( PreInvocationAuthorizationAdvice .class ) ; MethodSecurityExpressionHandler org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler = ( MethodSecurityExpressionHandler ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.oauth2.PreInvocationAuthorizationAdvice , STRING ) ; RoleHierarchy org.springframework.boot.autoconfigure.security.oauth2.RoleHierarchy = ( RoleHierarchy ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.RoleHierarchy ) . isSameAs ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( RoleHierarchy .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.PermissionEvaluatorConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; PreInvocationAuthorizationAdvice org.springframework.boot.autoconfigure.security.oauth2.PreInvocationAuthorizationAdvice = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( PreInvocationAuthorizationAdvice .class ) ; MethodSecurityExpressionHandler org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler = ( MethodSecurityExpressionHandler ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.oauth2.PreInvocationAuthorizationAdvice , STRING ) ; PermissionEvaluator org.springframework.boot.autoconfigure.security.oauth2.PermissionEvaluator = ( PermissionEvaluator ) ReflectionTestUtils . getField ( org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.PermissionEvaluator ) . isSameAs ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( PermissionEvaluator .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetails .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getClientId ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getClientSecret ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . isAutoApprove ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . isAutoApprove ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . isAutoApprove ( STRING ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getAccessTokenValiditySeconds ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getRefreshTokenValiditySeconds ( ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.ClientConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( OAuth2ClientContext .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.TestSecurityConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; OAuth2ClientContext org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientContext = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2ClientContext .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientContext . getAccessTokenRequest ( ) ) . isNotNull ( ) ; assertThat ( int ( ClientCredentialsResourceDetails .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( OAuth2ClientContext .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.ClientConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; OAuth2ClientContext org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientContext = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2ClientContext .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2ClientContext . getAccessTokenRequest ( ) ) . isNotNull ( ) ; assertThat ( int ( ClientCredentialsResourceDetails .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( OAuth2ClientContext .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureNonWebApplication .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext , STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( int ( org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext , ClientCredentialsResourceDetails .class ) ) . isEqualTo ( NUMBER ) ; org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.ResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( UserApprovalHandler .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( DefaultTokenServices .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.CustomResourceServer .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetails .class ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.CustomResourceServer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.CustomAuthorizationServer .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; BaseClientDetails org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails = new BaseClientDetails ( ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setClientId ( STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setClientSecret ( STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setResourceIds ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setAuthorizedGrantTypes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setAuthorities ( AuthorityUtils . commaSeparatedStringToAuthorityList ( STRING ) ) ; org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails . setScope ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.BaseClientDetails ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.AuthorizationAndResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2MethodSecurityConfiguration .class ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetails .class ) ; DelegatingMethodSecurityMetadataSource org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( DelegatingMethodSecurityMetadataSource .class ) ; java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> < MethodSecurityMetadataSource > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> = org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource . getMethodSecurityMetadataSources ( ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . get ( NUMBER ) . getClass ( ) . getName ( ) ) . isEqualTo ( PrePostAnnotationSecurityMetadataSource .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.SecuredEnabledConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2MethodSecurityConfiguration .class ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetails .class ) ; DelegatingMethodSecurityMetadataSource org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( DelegatingMethodSecurityMetadataSource .class ) ; java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> < MethodSecurityMetadataSource > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> = org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource . getMethodSecurityMetadataSources ( ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . get ( NUMBER ) . getClass ( ) . getName ( ) ) . isEqualTo ( SecuredAnnotationSecurityMetadataSource .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.Jsr250EnabledConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( OAuth2MethodSecurityConfiguration .class ) ; ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( ClientDetails .class ) ; DelegatingMethodSecurityMetadataSource org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( DelegatingMethodSecurityMetadataSource .class ) ; java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> < MethodSecurityMetadataSource > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> = org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource . getMethodSecurityMetadataSources ( ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . get ( NUMBER ) . getClass ( ) . getName ( ) ) . isEqualTo ( Jsr250MethodSecurityMetadataSource .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails , HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.CustomMethodSecurity .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.TestSecurityConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; DelegatingMethodSecurityMetadataSource org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource = this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getBean ( DelegatingMethodSecurityMetadataSource .class ) ; java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> < MethodSecurityMetadataSource > java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> = org.springframework.boot.autoconfigure.security.oauth2.DelegatingMethodSecurityMetadataSource . getMethodSecurityMetadataSources ( ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityMetadataSource> . get ( NUMBER ) . getClass ( ) . getName ( ) ) . isEqualTo ( PrePostAnnotationSecurityMetadataSource .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.ResourceServerConfiguration .class , org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.MinimalSecureWebApplication .class ) ; this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( int ( java.lang.Class<> ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) { void ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails , HttpStatus . FORBIDDEN ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails , HttpStatus org.springframework.boot.autoconfigure.security.oauth2.HttpStatus ) { java.lang.String java.lang.String = STRING + this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) ; TestRestTemplate org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate = new TestRestTemplate ( ) ; void ( java.lang.String , org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate ) ; HttpHeaders org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders = org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) ; java.lang.String java.lang.String = java.lang.String + STRING ; JsonNode org.springframework.boot.autoconfigure.security.oauth2.JsonNode = org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate . postForObject ( java.lang.String , new HttpEntity <> ( org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> ( ) , org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders ) , JsonNode .class ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.JsonNode . findValue ( STRING ) . asText ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.JsonNode . findValue ( STRING ) . asText ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.JsonNode . findValues ( STRING ) . get ( NUMBER ) . toString ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders . set ( STRING , STRING + java.lang.String ) ; ResponseEntity < java.lang.String > org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> = org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate . exchange ( new RequestEntity < java.lang.Void > ( org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders , HttpMethod . GET , java.net.URI . java.net.URI ( java.lang.String + STRING ) ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( STRING + STRING ) ; ResponseEntity < java.lang.String > org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> = org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate . exchange ( new RequestEntity < java.lang.Void > ( org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders , HttpMethod . POST , java.net.URI . java.net.URI ( java.lang.String + STRING ) ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.security.oauth2.HttpStatus ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders ( ClientDetails org.springframework.boot.autoconfigure.security.oauth2.ClientDetails ) { HttpHeaders org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders = new HttpHeaders ( ) ; java.lang.String java.lang.String = new java.lang.String ( Base64 . encode ( ( org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getClientId ( ) + STRING + org.springframework.boot.autoconfigure.security.oauth2.ClientDetails . getClientSecret ( ) ) . getBytes ( ) ) ) ; org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders . set ( STRING , STRING + java.lang.String ) ; return org.springframework.boot.autoconfigure.security.oauth2.HttpHeaders ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> ( ) { MultiValueMap < java.lang.String , java.lang.Object > org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> = new LinkedMultiValueMap <> ( ) ; org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , STRING ) ; org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> . set ( STRING , STRING ) ; return org.springframework.boot.autoconfigure.security.oauth2.MultiValueMap<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , TestRestTemplate org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate ) { java.net.URI java.net.URI = java.net.URI . java.net.URI ( java.lang.String + STRING ) ; ResponseEntity < java.lang.String > org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> = org.springframework.boot.autoconfigure.security.oauth2.TestRestTemplate . exchange ( new RequestEntity < java.lang.Void > ( HttpMethod . GET , java.net.URI ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.oauth2.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return int ( this . org.springframework.boot.autoconfigure.security.oauth2.AnnotationConfigServletWebServerApplicationContext , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private int int ( ApplicationContext org.springframework.boot.autoconfigure.security.oauth2.ApplicationContext , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.boot.autoconfigure.security.oauth2.ApplicationContext . getBeanNamesForType ( java.lang.Class<> ) . length ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager ( ) java.lang.Exception { return super. authenticationManagerBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.TestWebApp org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.TestWebApp ( ) { return new org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfigurationTests.TestWebApp ( ) ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) @ PreAuthorize ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ PostMapping ( STRING ) @ PreAuthorize ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.security.oauth2.TomcatServletWebServerFactory org.springframework.boot.autoconfigure.security.oauth2.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.ResourceServerProperties ) { this . org.springframework.boot.autoconfigure.security.oauth2.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.ResourceServerProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceServerSecurityConfigurer org.springframework.boot.autoconfigure.security.oauth2.ResourceServerSecurityConfigurer )				throws java.lang.Exception { if ( this . org.springframework.boot.autoconfigure.security.oauth2.ResourceServerProperties . getId ( ) != null ) { org.springframework.boot.autoconfigure.security.oauth2.ResourceServerSecurityConfigurer . resourceId ( this . org.springframework.boot.autoconfigure.security.oauth2.ResourceServerProperties . getId ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpSecurity org.springframework.boot.autoconfigure.security.oauth2.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.oauth2.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . authenticated ( ) . and ( ) . httpBasic ( ) . and ( ) . csrf ( ) . disable ( ) ; }  <METHOD_END>
<METHOD_START> protected void ( AuthenticationManager org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager ) { this . org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager = org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.TokenStore org.springframework.boot.autoconfigure.security.oauth2.TokenStore ( ) { return new InMemoryTokenStore ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.ApprovalStore org.springframework.boot.autoconfigure.security.oauth2.ApprovalStore ( final TokenStore org.springframework.boot.autoconfigure.security.oauth2.TokenStore ) { TokenApprovalStore org.springframework.boot.autoconfigure.security.oauth2.TokenApprovalStore = new TokenApprovalStore ( ) ; org.springframework.boot.autoconfigure.security.oauth2.TokenApprovalStore . setTokenStore ( org.springframework.boot.autoconfigure.security.oauth2.TokenStore ) ; return org.springframework.boot.autoconfigure.security.oauth2.TokenApprovalStore ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ClientDetailsServiceConfigurer org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsServiceConfigurer ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.oauth2.ClientDetailsServiceConfigurer . inMemory ( ) . withClient ( STRING ) . secret ( STRING ) . resourceIds ( STRING ) . authorizedGrantTypes ( STRING ) . authorities ( STRING ) . scopes ( STRING ) . redirectUris ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AuthorizationServerEndpointsConfigurer org.springframework.boot.autoconfigure.security.oauth2.AuthorizationServerEndpointsConfigurer )				throws java.lang.Exception { org.springframework.boot.autoconfigure.security.oauth2.AuthorizationServerEndpointsConfigurer . tokenStore ( org.springframework.boot.autoconfigure.security.oauth2.TokenStore ( ) ) . authenticationManager ( this . org.springframework.boot.autoconfigure.security.oauth2.AuthenticationManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler org.springframework.boot.autoconfigure.security.oauth2.MethodSecurityExpressionHandler ( ) { return new OAuth2MethodSecurityExpressionHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.RoleHierarchy org.springframework.boot.autoconfigure.security.oauth2.RoleHierarchy ( ) { return mock ( RoleHierarchy .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.PermissionEvaluator org.springframework.boot.autoconfigure.security.oauth2.PermissionEvaluator ( ) { return mock ( PermissionEvaluator .class ) ; }  <METHOD_END>
