<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.ReproConfig .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo .class ) ; org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar .class ) ; assertThat ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo . org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar , not ( is ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo . org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.WorkaroundConfig .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo .class ) ; org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar .class ) ; assertThat ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo . org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar , is ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo . org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar ) ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar ) { this . org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar = org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Bar ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( ) { return new org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( reproBar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( ) { return new org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( reproBar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( ) { return new org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( workaroundBar ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( ) { return new org.springframework.context.annotation.configuration.PackagePrivateBeanMethodInheritanceTests.Foo ( workaroundBar ( ) ) ; }  <METHOD_END>
