<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; RandomAccessData org.springframework.boot.loader.data.RandomAccessData = new ByteArrayRandomAccessData ( byte[] ) ; java.io.InputStream java.io.InputStream = org.springframework.boot.loader.data.RandomAccessData . getInputStream ( ResourceAccess . PER_READ ) ; assertThat ( FileCopyUtils . copyToByteArray ( java.io.InputStream ) ) . isEqualTo ( byte[] ) ; assertThat ( org.springframework.boot.loader.data.RandomAccessData . getSize ( ) ) . isEqualTo ( byte[] . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ; RandomAccessData org.springframework.boot.loader.data.RandomAccessData = new ByteArrayRandomAccessData ( byte[] ) ; org.springframework.boot.loader.data.RandomAccessData = org.springframework.boot.loader.data.RandomAccessData . getSubsection ( NUMBER , NUMBER ) . getSubsection ( NUMBER , NUMBER ) ; java.io.InputStream java.io.InputStream = org.springframework.boot.loader.data.RandomAccessData . getInputStream ( ResourceAccess . PER_READ ) ; assertThat ( FileCopyUtils . copyToByteArray ( java.io.InputStream ) ) . isEqualTo ( new byte [] { NUMBER , NUMBER } ) ; assertThat ( org.springframework.boot.loader.data.RandomAccessData . getSize ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
