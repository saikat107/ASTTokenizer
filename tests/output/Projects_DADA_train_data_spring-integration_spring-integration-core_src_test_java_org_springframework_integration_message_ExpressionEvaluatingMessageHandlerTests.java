<METHOD_START> @ Before public void void ( ) { org.springframework.integration.message.ExpressionParser = new SpelExpressionParser ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression org.springframework.integration.message.Expression = org.springframework.integration.message.ExpressionParser . parseExpression ( STRING ) ; ExpressionEvaluatingMessageHandler org.springframework.integration.message.ExpressionEvaluatingMessageHandler = new ExpressionEvaluatingMessageHandler ( org.springframework.integration.message.Expression ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression org.springframework.integration.message.Expression = org.springframework.integration.message.ExpressionParser . parseExpression ( STRING ) ; ExpressionEvaluatingMessageHandler org.springframework.integration.message.ExpressionEvaluatingMessageHandler = new ExpressionEvaluatingMessageHandler ( org.springframework.integration.message.Expression ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Expression org.springframework.integration.message.Expression = org.springframework.integration.message.ExpressionParser . parseExpression ( STRING ) ; ExpressionEvaluatingMessageHandler org.springframework.integration.message.ExpressionEvaluatingMessageHandler = new ExpressionEvaluatingMessageHandler ( org.springframework.integration.message.Expression ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . afterPropertiesSet ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.HashMap<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.HashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . handleMessage ( new GenericMessage < java.lang.String > ( STRING , java.util.HashMap<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { Message < ? > org.springframework.integration.message.Message<?> = new GenericMessage < java.lang.Float > ( NUMBER ) ; try { Expression org.springframework.integration.message.Expression = org.springframework.integration.message.ExpressionParser . parseExpression ( STRING ) ; ExpressionEvaluatingMessageHandler org.springframework.integration.message.ExpressionEvaluatingMessageHandler = new ExpressionEvaluatingMessageHandler ( org.springframework.integration.message.Expression ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.message.ExpressionEvaluatingMessageHandler . handleMessage ( org.springframework.integration.message.Message<> ) ; } catch ( MessagingException org.springframework.integration.message.MessagingException ) { assertEquals ( org.springframework.integration.message.MessagingException . getFailedMessage ( ) , org.springframework.integration.message.Message<> ) ; throw org.springframework.integration.message.MessagingException ; } }  <METHOD_END>
