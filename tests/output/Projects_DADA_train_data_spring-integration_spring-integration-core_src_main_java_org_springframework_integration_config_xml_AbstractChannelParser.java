<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override protected org.springframework.integration.config.xml.AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext ) { BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder = this . org.springframework.integration.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; AbstractBeanDefinition org.springframework.integration.config.xml.AbstractBeanDefinition = org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! FixedSubscriberChannel .class . java.lang.String ( ) . boolean ( org.springframework.integration.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) . getBeanClassName ( ) ) ) { ManagedList org.springframework.integration.config.xml.ManagedList = null ; if ( org.w3c.dom.Element != null ) { ChannelInterceptorParser org.springframework.integration.config.xml.ChannelInterceptorParser = new ChannelInterceptorParser ( ) ; org.springframework.integration.config.xml.ManagedList = org.springframework.integration.config.xml.ChannelInterceptorParser . parseInterceptors ( org.w3c.dom.Element , org.springframework.integration.config.xml.ParserContext ) ; } if ( org.springframework.integration.config.xml.ManagedList == null ) { org.springframework.integration.config.xml.ManagedList = new ManagedList ( ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } org.springframework.integration.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.config.xml.ManagedList ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionBuilder . setScope ( java.lang.String ) ; } } else { if ( org.w3c.dom.Element != null ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.xml.ParserContext . getReaderContext ( ) . error ( STRING , org.w3c.dom.Element ) ; } } org.springframework.integration.config.xml.AbstractBeanDefinition . setSource ( org.springframework.integration.config.xml.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; return org.springframework.integration.config.xml.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanDefinitionHolder org.springframework.integration.config.xml.BeanDefinitionHolder , BeanDefinitionRegistry org.springframework.integration.config.xml.BeanDefinitionRegistry ) { java.lang.String java.lang.String = org.springframework.integration.config.xml.BeanDefinitionHolder . getBeanDefinition ( ) . getScope ( ) ; if ( ! AbstractBeanDefinition . SCOPE_DEFAULT . equals ( java.lang.String ) && ! AbstractBeanDefinition . SCOPE_SINGLETON . equals ( java.lang.String ) && ! AbstractBeanDefinition . SCOPE_PROTOTYPE . equals ( java.lang.String ) ) { org.springframework.integration.config.xml.BeanDefinitionHolder = ScopedProxyUtils . createScopedProxy ( org.springframework.integration.config.xml.BeanDefinitionHolder , org.springframework.integration.config.xml.BeanDefinitionRegistry , false ) ; } super. registerBeanDefinition ( org.springframework.integration.config.xml.BeanDefinitionHolder , org.springframework.integration.config.xml.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.config.xml.BeanDefinitionBuilder org.springframework.integration.config.xml.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.config.xml.ParserContext );  <METHOD_END>
