<METHOD_START> void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { this( java.lang.String , ClassTypeInformation . from ( java.lang.Class<> ) , java.util.Collections . java.util.List<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> , java.util.List<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.List<org.springframework.data.mapping.PropertyPath> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mapping.TypeInformation<> , STRING ) ; Assert . notNull ( java.util.List<org.springframework.data.mapping.PropertyPath> , STRING ) ; java.lang.String java.lang.String = java.lang.String . boolean ( java.lang.String ) ? java.lang.String : StringUtils . uncapitalize ( java.lang.String ) ; TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> = org.springframework.data.mapping.TypeInformation<> . getProperty ( java.lang.String ) . orElseThrow ( ( ) new PropertyReferenceException ( propertyName , owningType , base ) ) ; this . org.springframework.data.mapping.TypeInformation<?> = org.springframework.data.mapping.TypeInformation<> ; this . org.springframework.data.mapping.TypeInformation<?> = org.springframework.data.mapping.TypeInformation<> ; this . boolean = org.springframework.data.mapping.TypeInformation<> . isCollectionLike ( ) ; this . org.springframework.data.mapping.TypeInformation<?> = org.springframework.data.mapping.TypeInformation<> . getActualType ( ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.TypeInformation<?> < ? > org.springframework.data.mapping.TypeInformation<?> ( ) { return org.springframework.data.mapping.TypeInformation<> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( ) { org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = this ; while ( org.springframework.data.mapping.PropertyPath . boolean ( ) ) { org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.PropertyPath ( ) ; } return org.springframework.data.mapping.PropertyPath ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . org.springframework.data.mapping.TypeInformation<> . getType ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( ) { return org.springframework.data.mapping.PropertyPath ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mapping.PropertyPath != null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { if ( boolean ( ) ) { return java.lang.String ( ) + STRING + org.springframework.data.mapping.PropertyPath ( ) . java.lang.String ( ) ; } return java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.Iterator<org.springframework.data.mapping.PropertyPath> ( ) { return new java.util.Iterator<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > ( ) { private org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath .this ; public boolean boolean ( ) { return org.springframework.data.mapping.PropertyPath != null ; } public org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( ) { org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ; this . org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.PropertyPath ( ) ; return org.springframework.data.mapping.PropertyPath ; } public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mapping.PropertyPath != null ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( ) { org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ; this . org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.PropertyPath ( ) ; return org.springframework.data.mapping.PropertyPath ; }  <METHOD_END>
<METHOD_START> public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.mapping.PropertyPath ( java.lang.String , ClassTypeInformation . from ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mapping.TypeInformation<> , STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; java.util.regex.Matcher java.util.regex.Matcher = boolean ( java.lang.String ) ? java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String . java.lang.String ( STRING , STRING ) . java.lang.String ( STRING , STRING ) ) : java.util.regex.Pattern . java.util.regex.Matcher ( STRING + java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.util.List<java.lang.String> . boolean ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; } java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.List<java.lang.String> . java.util.Iterator<java.lang.String> ( ) ; org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = null ; java.util.Stack<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.Stack<org.springframework.data.mapping.PropertyPath> = new java.util.Stack<org.springframework.data.mapping.PropertyPath> <> ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { if ( org.springframework.data.mapping.PropertyPath == null ) { org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ( java.util.Iterator<java.lang.String> . java.lang.String ( ) , org.springframework.data.mapping.TypeInformation<> , java.util.Stack<org.springframework.data.mapping.PropertyPath> ) ; java.util.Stack<org.springframework.data.mapping.PropertyPath> . org.springframework.data.mapping.PropertyPath ( org.springframework.data.mapping.PropertyPath ) ; } else { java.util.Stack<org.springframework.data.mapping.PropertyPath> . org.springframework.data.mapping.PropertyPath ( org.springframework.data.mapping.PropertyPath ( java.util.Iterator<java.lang.String> . java.lang.String ( ) , java.util.Stack<org.springframework.data.mapping.PropertyPath> ) ) ; } } return org.springframework.data.mapping.PropertyPath ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.String java.lang.String ) { return java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( java.lang.String java.lang.String , java.util.Stack<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.Stack<org.springframework.data.mapping.PropertyPath> ) { org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = java.util.Stack<org.springframework.data.mapping.PropertyPath> . org.springframework.data.mapping.PropertyPath ( ) ; org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ( java.lang.String , org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.TypeInformation<> . getActualType ( ) , java.util.Stack<org.springframework.data.mapping.PropertyPath> ) ; org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ; return org.springframework.data.mapping.PropertyPath ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> , java.util.List<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.List<org.springframework.data.mapping.PropertyPath> ) { return org.springframework.data.mapping.PropertyPath ( java.lang.String , org.springframework.data.mapping.TypeInformation<> , STRING , java.util.List<org.springframework.data.mapping.PropertyPath> ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> , java.lang.String java.lang.String , java.util.List<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.List<org.springframework.data.mapping.PropertyPath> ) { PropertyReferenceException org.springframework.data.mapping.PropertyReferenceException = null ; org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath = null ; try { org.springframework.data.mapping.PropertyPath = new org.springframework.data.mapping.PropertyPath ( java.lang.String , org.springframework.data.mapping.TypeInformation<> , java.util.List<org.springframework.data.mapping.PropertyPath> ) ; if ( ! java.util.List<org.springframework.data.mapping.PropertyPath> . boolean ( ) ) { java.util.List<org.springframework.data.mapping.PropertyPath> . org.springframework.data.mapping.PropertyPath ( java.util.List<org.springframework.data.mapping.PropertyPath> . int ( ) - NUMBER ) . org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ; } java.util.List<org.springframework.data.mapping.PropertyPath> < org.springframework.data.mapping.PropertyPath > java.util.List<org.springframework.data.mapping.PropertyPath> = new java.util.ArrayList<org.springframework.data.mapping.PropertyPath> <> ( java.util.List<org.springframework.data.mapping.PropertyPath> ) ; java.util.List<org.springframework.data.mapping.PropertyPath> . boolean ( org.springframework.data.mapping.PropertyPath ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.PropertyPath = org.springframework.data.mapping.PropertyPath ( java.lang.String , org.springframework.data.mapping.PropertyPath . org.springframework.data.mapping.TypeInformation<> , java.util.List<org.springframework.data.mapping.PropertyPath> ) ; } return org.springframework.data.mapping.PropertyPath ; } catch ( PropertyReferenceException org.springframework.data.mapping.PropertyReferenceException ) { if ( org.springframework.data.mapping.PropertyPath != null ) { throw org.springframework.data.mapping.PropertyReferenceException ; } org.springframework.data.mapping.PropertyReferenceException = org.springframework.data.mapping.PropertyReferenceException ; } java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) && java.util.regex.Matcher . int ( ) != NUMBER ) { int int = java.util.regex.Matcher . int ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int ) ; try { return org.springframework.data.mapping.PropertyPath ( java.lang.String , org.springframework.data.mapping.TypeInformation<> , java.lang.String + java.lang.String , java.util.List<org.springframework.data.mapping.PropertyPath> ) ; } catch ( PropertyReferenceException org.springframework.data.mapping.PropertyReferenceException ) { throw org.springframework.data.mapping.PropertyReferenceException . hasDeeperResolutionDepthThan ( org.springframework.data.mapping.PropertyReferenceException ) ? org.springframework.data.mapping.PropertyReferenceException : org.springframework.data.mapping.PropertyReferenceException ; } } throw org.springframework.data.mapping.PropertyReferenceException ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.mapping.TypeInformation<> . getType ( ) . getSimpleName ( ) , java.lang.String ( ) ) ; }  <METHOD_END>
