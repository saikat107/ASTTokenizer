<METHOD_START> void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( ) ; this . org.springframework.web.reactive.result.view.Model . addAttribute ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.web.reactive.result.view.Model == null ) { this . org.springframework.web.reactive.result.view.Model = new ExtendedModelMap ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( java.lang.Object java.lang.Object ) { void ( ) ; this . org.springframework.web.reactive.result.view.Model . addAttribute ( java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( java.lang.Object ... java.lang.Object[] ) { void ( ) ; this . org.springframework.web.reactive.result.view.Model . addAllAttributes ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { void ( ) ; this . org.springframework.web.reactive.result.view.Model . addAllAttributes ( java.util.Map<java.lang.String,> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( HttpStatus org.springframework.web.reactive.result.view.HttpStatus ) { this . org.springframework.web.reactive.result.view.HttpStatus = org.springframework.web.reactive.result.view.HttpStatus ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { void ( ) ; this . org.springframework.web.reactive.result.view.HttpHeaders . put ( java.lang.String , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.DefaultRenderingBuilder org.springframework.web.reactive.result.view.DefaultRenderingBuilder ( HttpHeaders org.springframework.web.reactive.result.view.HttpHeaders ) { void ( ) ; this . org.springframework.web.reactive.result.view.HttpHeaders . putAll ( org.springframework.web.reactive.result.view.HttpHeaders ) ; return this ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.web.reactive.result.view.HttpHeaders == null ) { this . org.springframework.web.reactive.result.view.HttpHeaders = new HttpHeaders ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Rendering . Rendering.RedirectBuilder Rendering.RedirectBuilder ( boolean boolean ) { org.springframework.web.reactive.result.view.RedirectView ( ) . setContextRelative ( boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public Rendering . Rendering.RedirectBuilder Rendering.RedirectBuilder ( boolean boolean ) { org.springframework.web.reactive.result.view.RedirectView ( ) . setPropagateQuery ( boolean ) ; return this ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.view.RedirectView org.springframework.web.reactive.result.view.RedirectView ( ) { Assert . isInstanceOf ( RedirectView .class , this . java.lang.Object ) ; return ( RedirectView ) this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.view.Rendering org.springframework.web.reactive.result.view.Rendering ( ) { return new DefaultRendering ( this . java.lang.Object , this . org.springframework.web.reactive.result.view.Model , this . org.springframework.web.reactive.result.view.HttpStatus , this . org.springframework.web.reactive.result.view.HttpHeaders ) ; }  <METHOD_END>
