<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.client.match.MockClientHttpRequest = new MockClientHttpRequest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . setContentType ( MediaType . APPLICATION_JSON ) ; MockRestRequestMatchers . content ( ) . contentType ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; MockRestRequestMatchers . content ( ) . contentType ( MediaType . APPLICATION_JSON ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . setContentType ( MediaType . APPLICATION_JSON ) ; MockRestRequestMatchers . content ( ) . contentType ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . setContentType ( MediaType . APPLICATION_JSON ) ; MockRestRequestMatchers . content ( ) . contentType ( MediaType . APPLICATION_ATOM_XML ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( STRING . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . string ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( STRING . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . string ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( ) ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( byte[] ) ; MockRestRequestMatchers . content ( ) . bytes ( byte[] ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( STRING . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . bytes ( STRING . byte[] ( ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getHeaders ( ) . setContentType ( MediaType . parseMediaType ( java.lang.String ) ) ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , null ) ; MockRestRequestMatchers . content ( ) . formData ( org.springframework.test.web.client.match.MultiValueMap<java.lang.String,java.lang.String> ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( java.lang.String . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . xml ( java.lang.String ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( STRING . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . xml ( STRING ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( java.lang.String . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . node ( hasXPath ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.match.MockClientHttpRequest . getBody ( ) . write ( java.lang.String . byte[] ( ) ) ; MockRestRequestMatchers . content ( ) . node ( hasXPath ( STRING ) ) . match ( this . org.springframework.test.web.client.match.MockClientHttpRequest ) ; }  <METHOD_END>
