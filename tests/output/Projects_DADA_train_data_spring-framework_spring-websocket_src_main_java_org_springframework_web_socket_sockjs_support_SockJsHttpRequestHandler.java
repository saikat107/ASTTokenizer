<METHOD_START> public void ( SockJsService org.springframework.web.socket.sockjs.support.SockJsService , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler ) { Assert . notNull ( org.springframework.web.socket.sockjs.support.SockJsService , STRING ) ; Assert . notNull ( org.springframework.web.socket.sockjs.support.WebSocketHandler , STRING ) ; this . org.springframework.web.socket.sockjs.support.SockJsService = org.springframework.web.socket.sockjs.support.SockJsService ; this . org.springframework.web.socket.sockjs.support.WebSocketHandler = new ExceptionWebSocketHandlerDecorator ( new LoggingWebSocketHandlerDecorator ( org.springframework.web.socket.sockjs.support.WebSocketHandler ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.support.SockJsService org.springframework.web.socket.sockjs.support.SockJsService ( ) { return this . org.springframework.web.socket.sockjs.support.SockJsService ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.support.WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler ( ) { return this . org.springframework.web.socket.sockjs.support.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.sockjs.support.ServletContext ) { if ( this . org.springframework.web.socket.sockjs.support.SockJsService instanceof ServletContextAware ) { ( ( ServletContextAware ) this . org.springframework.web.socket.sockjs.support.SockJsService ) . setServletContext ( org.springframework.web.socket.sockjs.support.ServletContext ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! boolean ( ) ) { this . boolean = true ; if ( this . org.springframework.web.socket.sockjs.support.SockJsService instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.sockjs.support.SockJsService ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( boolean ( ) ) { this . boolean = false ; if ( this . org.springframework.web.socket.sockjs.support.SockJsService instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.sockjs.support.SockJsService ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.socket.sockjs.support.HttpServletRequest , HttpServletResponse org.springframework.web.socket.sockjs.support.HttpServletResponse )			throws org.springframework.web.socket.sockjs.support.ServletException , java.io.IOException { ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.socket.sockjs.support.HttpServletRequest ) ; ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.socket.sockjs.support.HttpServletResponse ) ; try { this . org.springframework.web.socket.sockjs.support.SockJsService . handleRequest ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse , java.lang.String ( org.springframework.web.socket.sockjs.support.HttpServletRequest ) , this . org.springframework.web.socket.sockjs.support.WebSocketHandler ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new SockJsException ( STRING + org.springframework.web.socket.sockjs.support.ServerHttpRequest . getURI ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.socket.sockjs.support.HttpServletRequest ) { java.lang.String java.lang.String = HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.socket.sockjs.support.HttpServletRequest . getAttribute ( java.lang.String ) ; return ( java.lang.String . int ( ) > NUMBER && java.lang.String . char ( NUMBER ) != '/' ? STRING + java.lang.String : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.support.CorsConfiguration org.springframework.web.socket.sockjs.support.CorsConfiguration ( HttpServletRequest org.springframework.web.socket.sockjs.support.HttpServletRequest ) { if ( this . org.springframework.web.socket.sockjs.support.SockJsService instanceof CorsConfigurationSource ) { return ( ( CorsConfigurationSource ) this . org.springframework.web.socket.sockjs.support.SockJsService ) . getCorsConfiguration ( org.springframework.web.socket.sockjs.support.HttpServletRequest ) ; } return null ; }  <METHOD_END>
