<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.integration.handler.support.MethodParameter ) { return org.springframework.integration.handler.support.MethodParameter . hasParameterAnnotation ( Payloads .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( MethodParameter org.springframework.integration.handler.support.MethodParameter , Message < ? > org.springframework.integration.handler.support.Message<?> ) throws java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.integration.handler.support.Message<> . getPayload ( ) ; Assert . state ( java.lang.Object instanceof java.util.Collection , STRING ) ; java.util.Collection<org.springframework.integration.handler.support.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.handler.support.Message<?>> = ( java.util.Collection<org.springframework.integration.handler.support.Message<?>> < Message < ? > > ) java.lang.Object ; if ( ! this . java.util.Map<org.springframework.integration.handler.support.MethodParameter,org.springframework.integration.handler.support.Expression> . containsKey ( org.springframework.integration.handler.support.MethodParameter ) ) { Payloads org.springframework.integration.handler.support.Payloads = org.springframework.integration.handler.support.MethodParameter . getParameterAnnotation ( Payloads .class ) ; java.lang.String java.lang.String = org.springframework.integration.handler.support.Payloads . value ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { this . java.util.Map<org.springframework.integration.handler.support.MethodParameter,org.springframework.integration.handler.support.Expression> . put ( org.springframework.integration.handler.support.MethodParameter , EXPRESSION_PARSER . parseExpression ( STRING + java.lang.String + STRING ) ) ; } else { this . java.util.Map<org.springframework.integration.handler.support.MethodParameter,org.springframework.integration.handler.support.Expression> . put ( org.springframework.integration.handler.support.MethodParameter , null ) ; } } Expression org.springframework.integration.handler.support.Expression = this . java.util.Map<org.springframework.integration.handler.support.MethodParameter,org.springframework.integration.handler.support.Expression> . get ( org.springframework.integration.handler.support.MethodParameter ) ; if ( org.springframework.integration.handler.support.Expression != null ) { return evaluateExpression ( org.springframework.integration.handler.support.Expression , java.util.Collection<org.springframework.integration.handler.support.Message<?>> , org.springframework.integration.handler.support.MethodParameter . getParameterType ( ) ) ; } else { java.util.List<?> < ? > java.util.List<?> = java.util.Collection<org.springframework.integration.handler.support.Message<?>> . stream ( ) . map ( Message :: getPayload ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; return getEvaluationContext ( ) . getTypeConverter ( ) . convertValue ( java.util.List<> , TypeDescriptor . forObject ( java.util.List<> ) , TypeDescriptor . valueOf ( org.springframework.integration.handler.support.MethodParameter . getParameterType ( ) ) ) ; } }  <METHOD_END>
