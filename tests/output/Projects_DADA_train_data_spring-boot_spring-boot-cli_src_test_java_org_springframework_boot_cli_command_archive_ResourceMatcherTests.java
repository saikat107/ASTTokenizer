<METHOD_START> @ Test public void void ( ) java.io.IOException { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING STRING ) ) ; java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> = org.springframework.boot.cli.command.archive.ResourceMatcher . find ( java.util.Arrays . java.util.List<java.io.File> ( new java.io.File ( STRING ) ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . contains ( STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> = org.springframework.boot.cli.command.archive.ResourceMatcher . find ( java.util.Arrays . java.util.List<java.io.File> ( new java.io.File ( STRING ) ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) . areNot ( new Condition < MatchedResource > ( ) { @ java.lang.Override public boolean boolean ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource ) { return org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) . getName ( ) . equals ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource ) { return org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) . getName ( ) . equals ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . contains ( STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . contains ( STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . contains ( STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . doesNotContain ( STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = ( java.util.Collection<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.cli.command.archive.ResourceMatcher , STRING ) ; assertThat ( java.util.Collection<java.lang.String> ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> = org.springframework.boot.cli.command.archive.ResourceMatcher . find ( java.util.Arrays . java.util.List<java.io.File> ( new java.io.File ( STRING ) , new java.io.File ( STRING ) ) ) ; assertThat ( java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) . areAtLeastOne ( new Condition < MatchedResource > ( ) { @ java.lang.Override public boolean boolean ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource ) { return org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) . getName ( ) . equals ( STRING ) && org.springframework.boot.cli.command.archive.MatchedResource . isRoot ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource ) { return org.springframework.boot.cli.command.archive.MatchedResource . getFile ( ) . getName ( ) . equals ( STRING ) && org.springframework.boot.cli.command.archive.MatchedResource . isRoot ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ResourceMatcher org.springframework.boot.cli.command.archive.ResourceMatcher = new ResourceMatcher ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING STRING ) ) ; java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> < MatchedResource > java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> = org.springframework.boot.cli.command.archive.ResourceMatcher . find ( java.util.Arrays . java.util.List<java.io.File> ( new java.io.File ( STRING ) , new java.io.File ( STRING ) , new java.io.File ( STRING ) ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( MatchedResource org.springframework.boot.cli.command.archive.MatchedResource : java.util.List<org.springframework.boot.cli.command.archive.MatchedResource> ) { java.util.List<java.lang.String> . boolean ( org.springframework.boot.cli.command.archive.MatchedResource . getName ( ) ) ; } assertThat ( java.util.List<java.lang.String> ) . containsOnly ( STRING , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
