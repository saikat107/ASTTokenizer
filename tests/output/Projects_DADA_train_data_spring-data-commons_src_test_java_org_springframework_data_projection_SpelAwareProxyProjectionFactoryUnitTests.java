<METHOD_START> @ Before public void void ( ) { org.springframework.data.projection.SpelAwareProxyProjectionFactory = new SpelAwareProxyProjectionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer = new org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ( ) ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer . java.lang.String = STRING ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer . java.lang.String = STRING ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt = org.springframework.data.projection.SpelAwareProxyProjectionFactory . createProjection ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt .class , org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ) ; assertThat ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.data.projection.SpelAwareProxyProjectionFactory . getInputProperties ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt .class ) ; assertThat ( java.util.List<java.lang.String> ) . containsExactly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProjectionInformation org.springframework.data.projection.ProjectionInformation = org.springframework.data.projection.SpelAwareProxyProjectionFactory . getProjectionInformation ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt .class ) ; assertThat ( org.springframework.data.projection.ProjectionInformation . isClosed ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer = new org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ( ) ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer . java.lang.String = STRING ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt = org.springframework.data.projection.SpelAwareProxyProjectionFactory . createProjection ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt .class , org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ) ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.CustomerExcerpt . void ( STRING ) ; assertThat ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer = new org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ( ) ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer . java.lang.String = STRING ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.ProjectionWithNotWriteableProperty org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.ProjectionWithNotWriteableProperty = org.springframework.data.projection.SpelAwareProxyProjectionFactory . createProjection ( org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.ProjectionWithNotWriteableProperty .class , org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.Customer ) ; org.springframework.data.projection.ExpectedException . expect ( NotWritablePropertyException .class ) ; org.springframework.data.projection.SpelAwareProxyProjectionFactoryUnitTests.ProjectionWithNotWriteableProperty . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Value ( STRING ) java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
