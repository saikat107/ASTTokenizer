<METHOD_START> @ Before public void void ( ) { org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource . void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource . void ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.aop.framework.AopProxy org.springframework.aop.framework.AopProxy ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport );  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = AopConfigException .class ) public void void ( ) { AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.AopProxy . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; java.lang.String java.lang.String = STRING ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( int ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( new NopInterceptor ( ) ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( new TimestampIntroductionInterceptor ( ) ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertNull ( org.springframework.aop.framework.ITestBean . getName ( ) ) ; org.springframework.aop.framework.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assume . group ( TestGroup . PERFORMANCE ) ; int int = NUMBER ; StopWatch org.springframework.aop.framework.StopWatch = new StopWatch ( ) ; org.springframework.aop.framework.StopWatch . start ( STRING + int + STRING ) ; void ( int ) ; org.springframework.aop.framework.StopWatch . stop ( ) ; assertTrue ( STRING , org.springframework.aop.framework.StopWatch . getTotalTimeMillis ( ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { int int = NUMBER ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( int ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean[] [] = new ITestBean [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { org.springframework.aop.framework.ITestBean[] [ int ] = ( ITestBean ) org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.ProxyFactory ) . getProxy ( ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean[] [ int ] . getAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; assertFalse ( SerializationTestUtils . isSerializable ( org.springframework.aop.framework.TestBean ) ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.ProxyFactory ) . getProxy ( ) ; assertFalse ( SerializationTestUtils . isSerializable ( org.springframework.aop.framework.ITestBean ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SerializablePerson org.springframework.aop.framework.SerializablePerson = new SerializablePerson ( ) ; assertTrue ( SerializationTestUtils . isSerializable ( org.springframework.aop.framework.SerializablePerson ) ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.SerializablePerson ) ; Advice org.springframework.aop.framework.Advice = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.Advice ) ; assertFalse ( SerializationTestUtils . isSerializable ( org.springframework.aop.framework.Advice ) ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.ProxyFactory ) . getProxy ( ) ; assertFalse ( SerializationTestUtils . isSerializable ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { SerializablePerson org.springframework.aop.framework.SerializablePerson = new SerializablePerson ( ) ; org.springframework.aop.framework.SerializablePerson . setName ( STRING ) ; org.springframework.aop.framework.SerializablePerson . setAge ( NUMBER ) ; assertTrue ( SerializationTestUtils . isSerializable ( org.springframework.aop.framework.SerializablePerson ) ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.SerializablePerson ) ; org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice = new org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new SerializableNopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new CountingBeforeAdvice ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new CountingAfterReturningAdvice ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice ) ; Person org.springframework.aop.framework.Person = ( Person ) org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.ProxyFactory ) . getProxy ( ) ; org.springframework.aop.framework.Person . echo ( null ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice . getCalls ( ) ) ; try { org.springframework.aop.framework.Person . echo ( new java.io.IOException ( ) ) ; } catch ( java.io.IOException java.io.IOException ) { } assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice . getCalls ( ) ) ; Person org.springframework.aop.framework.Person = ( Person ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.framework.Person ) ; assertNotSame ( org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertEquals ( org.springframework.aop.framework.Person . getName ( ) , org.springframework.aop.framework.Person . getName ( ) ) ; assertEquals ( org.springframework.aop.framework.Person . getAge ( ) , org.springframework.aop.framework.Person . getAge ( ) ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.framework.Person ) ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.Person ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.Person ; assertEquals ( org.springframework.aop.framework.Advised . getAdvisors ( ) . length , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; assertEquals ( STRING , org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; assertEquals ( STRING , org.springframework.aop.framework.Person , org.springframework.aop.framework.Person ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.Person . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.Advised . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.Person . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice = ( org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice ) org.springframework.aop.framework.Advised . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ; org.springframework.aop.framework.Person . echo ( null ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice . getCalls ( ) ) ; try { org.springframework.aop.framework.Person . echo ( new java.io.IOException ( ) ) ; } catch ( java.io.IOException java.io.IOException ) {		} assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingThrowsAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( true ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.ProxyMatcherInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.CheckMethodInvocationIsSameInAndOutInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , ExposeInvocationInterceptor . INSTANCE ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( true ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.ProxyMatcherInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.CheckMethodInvocationIsSameInAndOutInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new org.springframework.aop.framework.AbstractAopProxyTests.CheckMethodInvocationViaThreadLocalIsSameInAndOutInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , ExposeInvocationInterceptor . INSTANCE ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; org.springframework.aop.framework.ITestBean . setSpouse ( org.springframework.aop.framework.ITestBean ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getSpouse ( ) . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; org.springframework.aop.framework.ITestBean . setSpouse ( org.springframework.aop.framework.ITestBean ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getSpouse ( ) . getAge ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy = new org.springframework.aop.framework.AbstractAopProxyTests.TargetChecker ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( true ) ; assertTrue ( org.springframework.aop.framework.ProxyFactory . isExposeProxy ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy = ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . int ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . int ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . void ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy = new org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy ) ; assertFalse ( org.springframework.aop.framework.ProxyFactory . isExposeProxy ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy = ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( false ) ; }  <METHOD_END>
<METHOD_START> private void void ( final boolean boolean ) throws java.lang.Throwable { final java.lang.String java.lang.String = STRING ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { if ( ! boolean ) { void ( ) ; } else { assertNotNull ( STRING , ExposeInvocationInterceptor . currentInvocation ( ) ) ; } return java.lang.String ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; if ( boolean ) { org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; } org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.MethodInterceptor ) ; if ( boolean ( ) ) { org.springframework.aop.framework.AdvisedSupport . setTarget ( new TestBean ( ) ) ; } AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; void ( ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; void ( ) ; assertSame ( STRING , java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { if ( ! boolean ) { void ( ) ; } else { assertNotNull ( STRING , ExposeInvocationInterceptor . currentInvocation ( ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new org.springframework.aop.framework.AbstractAopProxyTests.OwnSpouse ( ) ; ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport = new ProxyCreatorSupport ( ) ; org.springframework.aop.framework.ProxyCreatorSupport . setInterfaces ( new java.lang.Class<?> < ? > [] { ITestBean .class } ) ; org.springframework.aop.framework.ProxyCreatorSupport . setTarget ( org.springframework.aop.framework.TestBean ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyCreatorSupport ) ; assertSame ( STRING , org.springframework.aop.framework.ITestBean , org.springframework.aop.framework.ITestBean . getSpouse ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.MethodInterceptor ) ; org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource . void ( new java.lang.Object ( ) ) ; org.springframework.aop.framework.AdvisedSupport . setTargetSource ( org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; try { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; org.springframework.aop.framework.ITestBean . exceptional ( java.lang.Exception ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.MethodInterceptor ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( new TestBean ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; try { org.springframework.aop.framework.ITestBean . getAge ( ) ; fail ( STRING ) ; } catch ( java.lang.reflect.UndeclaredThrowableException java.lang.reflect.UndeclaredThrowableException ) { assertEquals ( STRING , java.lang.Exception , java.lang.reflect.UndeclaredThrowableException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; fail ( STRING + java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.RuntimeException ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.MethodInterceptor ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( new TestBean ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; try { org.springframework.aop.framework.ITestBean . getAge ( ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertEquals ( STRING , java.lang.RuntimeException , java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { throw java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy = new org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy ( ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy .class ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.AbstractAopProxyTests.NeedsToSeeProxy ) ; org.springframework.aop.framework.AdvisedSupport . setExposeProxy ( true ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy = ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean = new org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean ( ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class , IOther .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.aop.framework.AbstractAopProxyTests.TrapTargetInterceptor org.springframework.aop.framework.AbstractAopProxyTests.TrapTargetInterceptor = new org.springframework.aop.framework.AbstractAopProxyTests.TrapTargetInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { assertEquals ( STRING , org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; return super. java.lang.Object ( org.springframework.aop.framework.MethodInvocation ) ; } } ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.AbstractAopProxyTests.TrapTargetInterceptor ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; org.springframework.aop.framework.ITestBean . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { assertEquals ( STRING , org.springframework.aop.framework.AbstractAopProxyTests.InvocationCheckExposedInvocationTestBean , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; return super. java.lang.Object ( org.springframework.aop.framework.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { ExposeInvocationInterceptor . currentInvocation ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new LockMixinAdvisor ( ) ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; void ( org.springframework.aop.framework.ProxyFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new LockMixin ( ) ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; void ( org.springframework.aop.framework.ProxyFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( ProxyFactory org.springframework.aop.framework.ProxyFactory ) { int int = NUMBER ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; Lockable org.springframework.aop.framework.Lockable = ( Lockable ) org.springframework.aop.framework.ITestBean ; assertFalse ( org.springframework.aop.framework.Lockable . locked ( ) ) ; org.springframework.aop.framework.Lockable . lock ( ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( LockedException org.springframework.aop.framework.LockedException ) { } assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertTrue ( org.springframework.aop.framework.Lockable . locked ( ) ) ; org.springframework.aop.framework.Lockable . unlock ( ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new org.springframework.aop.framework.AbstractAopProxyTests.StringSetterNullReplacementAdvice ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; int int = NUMBER ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.framework.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; org.springframework.aop.framework.ITestBean . setName ( null ) ; assertEquals ( STRING , org.springframework.aop.framework.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; assertEquals ( STRING , NUMBER , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor , org.springframework.aop.framework.Advised . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.Advised . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.ITestBean . getName ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.Advised . removeAdvisor ( NUMBER ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; org.springframework.aop.framework.Advised . addAdvice ( org.springframework.aop.framework.CountingBeforeAdvice ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.framework.TestBean . setName ( java.lang.String ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; final long long = NUMBER ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new DelegatingIntroductionInterceptor ( new TimeStamped ( ) { @ java.lang.Override public long long ( ) { return long ; } } ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; TimeStamped org.springframework.aop.framework.TimeStamped = ( TimeStamped ) org.springframework.aop.framework.ITestBean ; assertEquals ( long , org.springframework.aop.framework.TimeStamped . getTimeStamp ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return long ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; try { org.springframework.aop.framework.ProxyFactory . addAdvice ( new org.springframework.aop.framework.AbstractAopProxyTests.DummyIntroductionAdviceImpl ( ) ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.framework.AopConfigException ) { assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . indexOf ( STRING ) > - NUMBER ) ; } ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultIntroductionAdvisor ( new org.springframework.aop.framework.AbstractAopProxyTests.DummyIntroductionAdviceImpl ( ) , java.lang.Comparable .class ) ) ; try { ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ITestBean . getName ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; try { org.springframework.aop.framework.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new TimestampIntroductionInterceptor ( ) , ITestBean .class ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; @ java.lang.SuppressWarnings ( STRING ) class MyDi extends DelegatingIntroductionInterceptor implements TimeStamped { @ java.lang.Override public long long ( ) { throw new java.lang.UnsupportedOperationException ( ) ; } } org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultIntroductionAdvisor ( new MyDi ( ) ) ) ; TimeStamped org.springframework.aop.framework.TimeStamped = ( TimeStamped ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; try { org.springframework.aop.framework.TimeStamped . getTimeStamp ( ) ; fail ( STRING ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) {		} }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; try { org.springframework.aop.framework.ProxyFactory . addAdvisor ( NUMBER , new DefaultIntroductionAdvisor ( new TimestampIntroductionInterceptor ( ) , TestBean .class ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertTrue ( java.lang.IllegalArgumentException . java.lang.String ( ) . boolean ( STRING ) ) ; } ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; assertFalse ( org.springframework.aop.framework.ProxyFactory . isFrozen ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( true ) ; try { org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , new NopInterceptor ( ) ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.framework.AopConfigException ) { assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . indexOf ( STRING ) > - NUMBER ) ; } assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , ( ( Advised ) org.springframework.aop.framework.ITestBean ) . getAdvisors ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; assertFalse ( org.springframework.aop.framework.ProxyFactory . isFrozen ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( true ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; assertTrue ( org.springframework.aop.framework.ProxyFactory . isFrozen ( ) ) ; try { org.springframework.aop.framework.Advised . addAdvisor ( new DefaultPointcutAdvisor ( new NopInterceptor ( ) ) ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.framework.AopConfigException ) { assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . contains ( STRING ) ) ; } assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; assertFalse ( org.springframework.aop.framework.ProxyFactory . isFrozen ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( true ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; assertTrue ( org.springframework.aop.framework.ProxyFactory . isFrozen ( ) ) ; try { org.springframework.aop.framework.Advised . removeAdvisor ( NUMBER ) ; fail ( STRING ) ; } catch ( AopConfigException org.springframework.aop.framework.AopConfigException ) { assertTrue ( org.springframework.aop.framework.AopConfigException . getMessage ( ) . contains ( STRING ) ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; org.springframework.aop.framework.ProxyFactory . setFrozen ( false ) ; org.springframework.aop.framework.Advised . removeAdvisor ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.Advised . getAdvisors ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultIntroductionAdvisor ( new TimestampIntroductionInterceptor ( ) ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> < ITestBean , java.lang.Object > java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> = new java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> <> ( ) ; java.lang.Object java.lang.Object = STRING ; java.lang.Object java.lang.Object = STRING ; assertNull ( java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> . get ( org.springframework.aop.framework.ITestBean ) ) ; java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> . put ( org.springframework.aop.framework.ITestBean , java.lang.Object ) ; java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> . put ( org.springframework.aop.framework.ITestBean , java.lang.Object ) ; assertEquals ( java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> . get ( org.springframework.aop.framework.ITestBean ) , java.lang.Object ) ; assertEquals ( java.util.HashMap<org.springframework.aop.framework.ITestBean,java.lang.Object> . get ( org.springframework.aop.framework.ITestBean ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setInterfaces ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; MethodBeforeAdvice org.springframework.aop.framework.MethodBeforeAdvice = new CountingBeforeAdvice ( ) ; Advisor org.springframework.aop.framework.Advisor = new DefaultPointcutAdvisor ( new NameMatchMethodPointcut ( ) , org.springframework.aop.framework.MethodBeforeAdvice ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; java.lang.String java.lang.String = ( ( Advised ) org.springframework.aop.framework.ITestBean ) . toProxyConfigString ( ) ; assertTrue ( java.lang.String . boolean ( org.springframework.aop.framework.Advisor . toString ( ) ) ) ; assertTrue ( java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setInterfaces ( ITestBean .class ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) ; Advisor org.springframework.aop.framework.Advisor = new DefaultPointcutAdvisor ( new NameMatchMethodPointcut ( ) . addMethodName ( STRING ) , org.springframework.aop.framework.CountingBeforeAdvice ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; assertFalse ( STRING , org.springframework.aop.framework.ProxyFactory . isOpaque ( ) ) ; org.springframework.aop.framework.ProxyFactory . setOpaque ( true ) ; assertTrue ( STRING , org.springframework.aop.framework.ProxyFactory . isOpaque ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertFalse ( STRING , org.springframework.aop.framework.ITestBean instanceof Advised ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener = new org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener ( org.springframework.aop.framework.ProxyFactory ) ; org.springframework.aop.framework.ProxyFactory . addListener ( org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener ) ; org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory = new org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addListener ( org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory ) ; assertFalse ( org.springframework.aop.framework.ProxyFactory . isActive ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory . int ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; assertTrue ( org.springframework.aop.framework.ProxyFactory . isActive ( ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( NUMBER , org.springframework.aop.framework.NopInterceptor ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory . int ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.ProxyFactory . removeAdvice ( org.springframework.aop.framework.NopInterceptor ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.RefreshCountingAdvisorChainFactory . int ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; org.springframework.aop.framework.ProxyFactory . removeListener ( org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( new NopInterceptor ( ) ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingAdvisorListener . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; org.springframework.aop.framework.TestBean . setName ( STRING ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; HotSwappableTargetSource org.springframework.aop.framework.HotSwappableTargetSource = new HotSwappableTargetSource ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setTargetSource ( org.springframework.aop.framework.HotSwappableTargetSource ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; org.springframework.aop.framework.HotSwappableTargetSource . swap ( org.springframework.aop.framework.TestBean ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; org.springframework.aop.framework.TestBean . setName ( STRING ) ; assertEquals ( org.springframework.aop.framework.TestBean . getName ( ) , org.springframework.aop.framework.ITestBean . getName ( ) ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; assertSame ( org.springframework.aop.framework.HotSwappableTargetSource , org.springframework.aop.framework.Advised . getTargetSource ( ) ) ; SingletonTargetSource org.springframework.aop.framework.SingletonTargetSource = new SingletonTargetSource ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.Advised . setTargetSource ( org.springframework.aop.framework.SingletonTargetSource ) ; assertEquals ( org.springframework.aop.framework.TestBean . getName ( ) , org.springframework.aop.framework.ITestBean . getName ( ) ) ; assertSame ( org.springframework.aop.framework.SingletonTargetSource , org.springframework.aop.framework.Advised . getTargetSource ( ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice = new org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice ( new NopInterceptor ( ) , STRING ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice . int , NUMBER ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice . int , NUMBER ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , NUMBER ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutAdvice . int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly = new org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly ( new NopInterceptor ( ) , STRING ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly ) ; this . org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource . void ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . setTargetSource ( org.springframework.aop.framework.AbstractAopProxyTests.MockTargetSource ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly . int , NUMBER ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly . int ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , NUMBER ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly . int , NUMBER ) ; org.springframework.aop.framework.ITestBean . setName ( STRING ) ; assertEquals ( org.springframework.aop.framework.AbstractAopProxyTests.TestDynamicPointcutForSettersOnly . int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.AbstractAopProxyTests.TestStaticPointcutAdvice org.springframework.aop.framework.AbstractAopProxyTests.TestStaticPointcutAdvice = new org.springframework.aop.framework.AbstractAopProxyTests.TestStaticPointcutAdvice ( org.springframework.aop.framework.NopInterceptor , STRING ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.AbstractAopProxyTests.TestStaticPointcutAdvice ) ; org.springframework.aop.framework.ProxyFactory . setTarget ( org.springframework.aop.framework.TestBean ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; org.springframework.aop.framework.ITestBean . getAge ( ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( org.springframework.aop.framework.ITestBean . getAge ( ) , NUMBER ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor . getCount ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } } ; @ java.lang.SuppressWarnings ( STRING ) StaticMethodMatcherPointcutAdvisor org.springframework.aop.framework.StaticMethodMatcherPointcutAdvisor = new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.MethodInterceptor ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ; } } ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.StaticMethodMatcherPointcutAdvisor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; final int int = NUMBER ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( int + NUMBER , org.springframework.aop.framework.ITestBean . haveBirthday ( ) ) ; assertEquals ( int + NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addInterface ( ITestBean .class ) ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; java.lang.String java.lang.String = ( ( ITestBean ) org.springframework.aop.framework.MethodInvocation . getThis ( ) ) . getName ( ) ; org.springframework.aop.framework.MethodInvocation . getArguments ( ) [ NUMBER ] = java.lang.String ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } } ; class NameSaver implements MethodInterceptor { private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> <> ( ) ; @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.util.List<java.lang.Object> . boolean ( org.springframework.aop.framework.MethodInvocation . getArguments ( ) [ NUMBER ] ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } } NameSaver saver = new NameSaver ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( Pointcuts . SETTERS , org.springframework.aop.framework.MethodInterceptor ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new DefaultPointcutAdvisor ( Pointcuts . SETTERS , saver ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.aop.framework.TestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.TestBean . getName ( ) ) ; org.springframework.aop.framework.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , saver . java.util.List<java.lang.Object> . int ( ) ) ; assertEquals ( java.lang.String , saver . java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; assertEquals ( java.lang.String , saver . java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.framework.MethodInvocation = ( ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ) . invocableClone ( ) ; java.lang.String java.lang.String = ( ( ITestBean ) org.springframework.aop.framework.MethodInvocation . getThis ( ) ) . getName ( ) ; org.springframework.aop.framework.MethodInvocation . getArguments ( ) [ NUMBER ] = java.lang.String ; org.springframework.aop.framework.MethodInvocation . proceed ( ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.util.List<java.lang.Object> . boolean ( org.springframework.aop.framework.MethodInvocation . getArguments ( ) [ NUMBER ] ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Throwable { org.springframework.aop.framework.AbstractAopProxyTests.Overloads org.springframework.aop.framework.AbstractAopProxyTests.Overloads = new org.springframework.aop.framework.AbstractAopProxyTests.Overloads ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.AbstractAopProxyTests.Overloads ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.NopInterceptor ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER ; } } ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.NopInterceptor ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( int .class ) ; } } ) ; org.springframework.aop.framework.AbstractAopProxyTests.IOverloads org.springframework.aop.framework.AbstractAopProxyTests.IOverloads = ( org.springframework.aop.framework.AbstractAopProxyTests.IOverloads ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.IOverloads . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.IOverloads . int ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.AbstractAopProxyTests.IOverloads . void ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( int .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new DebugInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . setExposeProxy ( true ) ; final ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.ITestBean ; org.springframework.aop.framework.Advised . setTargetSource ( new TargetSource ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; } @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { assertEquals ( org.springframework.aop.framework.ITestBean , AopContext . currentProxy ( ) ) ; return org.springframework.aop.framework.TestBean ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception {			} } ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return TestBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { assertEquals ( org.springframework.aop.framework.ITestBean , AopContext . currentProxy ( ) ) ; return org.springframework.aop.framework.TestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IOther org.springframework.aop.framework.IOther = new org.springframework.aop.framework.AbstractAopProxyTests.AllInstancesAreEqual ( ) ; IOther org.springframework.aop.framework.IOther = new org.springframework.aop.framework.AbstractAopProxyTests.AllInstancesAreEqual ( ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.IOther ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.IOther ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; IOther org.springframework.aop.framework.IOther = ( IOther ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; IOther org.springframework.aop.framework.IOther = ( IOther ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) . length , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) . length ) ; assertEquals ( org.springframework.aop.framework.IOther , org.springframework.aop.framework.IOther ) ; assertEquals ( org.springframework.aop.framework.NopInterceptor , org.springframework.aop.framework.NopInterceptor ) ; assertEquals ( org.springframework.aop.framework.IOther , org.springframework.aop.framework.IOther ) ; assertEquals ( org.springframework.aop.framework.IOther . hashCode ( ) , org.springframework.aop.framework.IOther . hashCode ( ) ) ; assertFalse ( org.springframework.aop.framework.IOther . equals ( org.springframework.aop.framework.IOther ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; org.springframework.aop.framework.IOther . absquatulate ( ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertFalse ( org.springframework.aop.framework.IOther . equals ( org.springframework.aop.framework.IOther ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) ; @ java.lang.SuppressWarnings ( STRING ) Advisor org.springframework.aop.framework.Advisor = new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.CountingBeforeAdvice ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER ; } } ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; assertEquals ( STRING , org.springframework.aop.framework.Advisor , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) [ NUMBER ] ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( STRING ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { class MapAwareMethodInterceptor implements MethodInterceptor { private final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; private final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ; public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; } @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { ReflectiveMethodInvocation org.springframework.aop.framework.ReflectiveMethodInvocation = ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . keySet ( ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ; ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Object ) , org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . get ( java.lang.Object ) ) ; } org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . putAll ( java.util.Map<java.lang.String,java.lang.String> ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; MapAwareMethodInterceptor mami1 = new MapAwareMethodInterceptor ( new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) , new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; MapAwareMethodInterceptor mami2 = new MapAwareMethodInterceptor ( new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) , java.util.Map<java.lang.String,java.lang.String> ) ; MapAwareMethodInterceptor mami3 = new MapAwareMethodInterceptor ( java.util.Map<java.lang.String,java.lang.String> , new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ) ; MapAwareMethodInterceptor mami4 = new MapAwareMethodInterceptor ( java.util.Map<java.lang.String,java.lang.String> , new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; MapAwareMethodInterceptor mami5 = new MapAwareMethodInterceptor ( java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( java.util.Map<java.lang.String,java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.String> . void ( java.util.Map<java.lang.String,java.lang.String> ) ; MapAwareMethodInterceptor mami6 = new MapAwareMethodInterceptor ( java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami1 ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami2 ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami3 ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami4 ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami5 ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( mami6 ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( new TestBean ( ) ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.aop.framework.ITestBean . setName ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.aop.framework.ITestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { ReflectiveMethodInvocation org.springframework.aop.framework.ReflectiveMethodInvocation = ( ReflectiveMethodInvocation ) org.springframework.aop.framework.MethodInvocation ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . keySet ( ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ; ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; assertEquals ( java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Object ) , org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . get ( java.lang.Object ) ) ; } org.springframework.aop.framework.ReflectiveMethodInvocation . getUserAttributes ( ) . putAll ( java.util.Map<java.lang.String,java.lang.String> ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice = new org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice ( ) ; @ java.lang.SuppressWarnings ( STRING ) Advisor org.springframework.aop.framework.Advisor = new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER || STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ; } } ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; assertEquals ( STRING , org.springframework.aop.framework.Advisor , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) [ NUMBER ] ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( STRING ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( STRING ) ) ; org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( ) ) ; try { org.springframework.aop.framework.ITestBean . exceptional ( new org.springframework.aop.framework.AbstractAopProxyTests.SpecializedUncheckedException ( STRING , ( java.sql.SQLException ) null ) ) ; fail ( STRING ) ; } catch ( org.springframework.aop.framework.AbstractAopProxyTests.SpecializedUncheckedException org.springframework.aop.framework.AbstractAopProxyTests.SpecializedUncheckedException ) { } assertEquals ( NUMBER , org.springframework.aop.framework.AbstractAopProxyTests.CountingMultiAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . int ( ) == NUMBER || STRING . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; @ java.lang.SuppressWarnings ( STRING ) CountingBeforeAdvice org.springframework.aop.framework.CountingBeforeAdvice = new CountingBeforeAdvice ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { super. before ( java.lang.reflect.Method , java.lang.Object[] , java.lang.Object ) ; if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) throw java.lang.RuntimeException ; } } ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; NopInterceptor org.springframework.aop.framework.NopInterceptor = new NopInterceptor ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.CountingBeforeAdvice ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.NopInterceptor ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; try { org.springframework.aop.framework.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { assertEquals ( java.lang.RuntimeException , java.lang.RuntimeException ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.CountingBeforeAdvice . getCalls ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.NopInterceptor . getCount ( ) ) ; assertEquals ( org.springframework.aop.framework.TestBean . getAge ( ) , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { super. before ( java.lang.reflect.Method , java.lang.Object[] , java.lang.Object ) ; if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) throw java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { class SummingAfterAdvice implements AfterReturningAdvice { public int int ; @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { int += ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ; } } SummingAfterAdvice aa = new SummingAfterAdvice ( ) ; @ java.lang.SuppressWarnings ( STRING ) Advisor org.springframework.aop.framework.Advisor = new StaticMethodMatcherPointcutAdvisor ( aa ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) == int .class ; } } ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; assertEquals ( STRING , org.springframework.aop.framework.Advisor , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) [ NUMBER ] ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , aa . int ) ; int int = NUMBER ; int int = NUMBER ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( int , aa . int ) ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( int + int , aa . int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { int += ( ( java.lang.Integer ) java.lang.Object ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.Class<?> ( ) == int .class ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CountingAfterReturningAdvice org.springframework.aop.framework.CountingAfterReturningAdvice = new CountingAfterReturningAdvice ( ) ; TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.TestBean ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.CountingAfterReturningAdvice ) ; assertEquals ( STRING , org.springframework.aop.framework.CountingAfterReturningAdvice , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingAfterReturningAdvice . getCalls ( ) ) ; int int = NUMBER ; org.springframework.aop.framework.ITestBean . setAge ( int ) ; assertEquals ( int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.CountingAfterReturningAdvice . getCalls ( ) ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { org.springframework.aop.framework.ITestBean . exceptional ( java.lang.Exception ) ; fail ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { assertSame ( java.lang.Exception , java.lang.Throwable ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.CountingAfterReturningAdvice . getCalls ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MyThrowsHandler org.springframework.aop.framework.MyThrowsHandler = new MyThrowsHandler ( ) ; @ java.lang.SuppressWarnings ( STRING ) Advisor org.springframework.aop.framework.Advisor = new StaticMethodMatcherPointcutAdvisor ( org.springframework.aop.framework.MyThrowsHandler ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; } } ; Echo org.springframework.aop.framework.Echo = new Echo ( ) ; org.springframework.aop.framework.Echo . setA ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.Echo ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvisor ( org.springframework.aop.framework.Advisor ) ; assertEquals ( STRING , org.springframework.aop.framework.Advisor , org.springframework.aop.framework.ProxyFactory . getAdvisors ( ) [ NUMBER ] ) ; IEcho org.springframework.aop.framework.IEcho = ( IEcho ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; assertEquals ( org.springframework.aop.framework.Echo . getA ( ) , org.springframework.aop.framework.IEcho . getA ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } java.lang.Exception = new java.io.FileNotFoundException ( ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.io.FileNotFoundException java.io.FileNotFoundException ) { assertEquals ( java.lang.Exception , java.io.FileNotFoundException ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MyThrowsHandler org.springframework.aop.framework.MyThrowsHandler = new MyThrowsHandler ( ) ; Echo org.springframework.aop.framework.Echo = new Echo ( ) ; org.springframework.aop.framework.Echo . setA ( NUMBER ) ; ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( org.springframework.aop.framework.Echo ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( new NopInterceptor ( ) ) ; org.springframework.aop.framework.ProxyFactory . addAdvice ( org.springframework.aop.framework.MyThrowsHandler ) ; IEcho org.springframework.aop.framework.IEcho = ( IEcho ) java.lang.Object ( org.springframework.aop.framework.ProxyFactory ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; assertEquals ( org.springframework.aop.framework.Echo . getA ( ) , org.springframework.aop.framework.IEcho . getA ( ) ) ; assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( ) ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( java.lang.Exception , java.lang.Exception ) ; } java.lang.Exception = new java.rmi.MarshalException ( STRING ) ; try { org.springframework.aop.framework.IEcho . echoException ( NUMBER , java.lang.Exception ) ; fail ( ) ; } catch ( java.rmi.MarshalException java.rmi.MarshalException ) { assertEquals ( java.lang.Exception , java.rmi.MarshalException ) ; } assertEquals ( NUMBER , org.springframework.aop.framework.MyThrowsHandler . getCalls ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.aop.framework.MethodInvocation . getMethod ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodInvocation . proceed ( ) ; assertEquals ( STRING , java.lang.reflect.Method , org.springframework.aop.framework.MethodInvocation . getMethod ( ) ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.lang.String java.lang.String = STRING ; try { MethodInvocation org.springframework.aop.framework.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; assertEquals ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) , org.springframework.aop.framework.MethodInvocation . getMethod ( ) ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodInvocation . proceed ( ) ; java.lang.String = STRING ; assertEquals ( org.springframework.aop.framework.MethodInvocation , ExposeInvocationInterceptor . currentInvocation ( ) ) ; return java.lang.Object ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { java.lang.System . java.io.PrintStream . void ( java.lang.String + STRING + org.springframework.aop.framework.MethodInvocation . getMethod ( ) ) ; java.lang.IllegalStateException . void ( ) ; throw java.lang.IllegalStateException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = AopContext . currentProxy ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.MethodInvocation . proceed ( ) ; assertEquals ( java.lang.Object , AopContext . currentProxy ( ) ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { org.springframework.aop.framework.MethodInvocation . getArguments ( ) [ NUMBER ] = STRING ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( org.springframework.aop.framework.MethodInterceptor ); setPointcut ( new DynamicMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return java.lang.Object[] [ NUMBER ] == null ; } @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.String .class ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { return java.lang.Object[] [ NUMBER ] == null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER && java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] . boolean ( java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodInterceptor org.springframework.aop.framework.MethodInterceptor , final java.lang.String java.lang.String ) { super( org.springframework.aop.framework.MethodInterceptor ); setPointcut ( new DynamicMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { boolean boolean = java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; if ( boolean ) ++ int ; return boolean ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { boolean boolean = java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; if ( boolean ) ++ int ; return boolean ; }  <METHOD_END>
<METHOD_START> public void ( MethodInterceptor org.springframework.aop.framework.MethodInterceptor , final java.lang.String java.lang.String ) { super( org.springframework.aop.framework.MethodInterceptor ); setPointcut ( new DynamicMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { boolean boolean = java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; if ( boolean ) ++ int ; return boolean ; } @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object ... java.lang.Object[] ) { boolean boolean = java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; if ( boolean ) ++ int ; return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodInterceptor org.springframework.aop.framework.MethodInterceptor , java.lang.String java.lang.String ) { super( org.springframework.aop.framework.MethodInterceptor ); this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { this . java.lang.Object = org.springframework.aop.framework.MethodInvocation . getThis ( ) ; return org.springframework.aop.framework.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.ITestBean org.springframework.aop.framework.ITestBean ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof org.springframework.aop.framework.AbstractAopProxyTests.AllInstancesAreEqual ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Class<? extends org.springframework.aop.framework.AbstractAopProxyTests.AllInstancesAreEqual> ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> int int ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy = ( org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ) AopContext . currentProxy ( ) ; org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy . void ( ) ; Advised org.springframework.aop.framework.Advised = ( Advised ) org.springframework.aop.framework.AbstractAopProxyTests.INeedsToSeeProxy ; void ( org.springframework.aop.framework.Advised ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Advised org.springframework.aop.framework.Advised ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Advised org.springframework.aop.framework.Advised ) { }  <METHOD_END>
<METHOD_START> public void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { this . org.springframework.aop.framework.AdvisedSupport = org.springframework.aop.framework.AdvisedSupport ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { assertEquals ( org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.AdvisedSupport ) ; ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { assertEquals ( org.springframework.aop.framework.AdvisedSupport , org.springframework.aop.framework.AdvisedSupport ) ; ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { ++ int ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> int int ( int int );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( int int ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) throws java.lang.Throwable { count ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object )				throws java.lang.Throwable { count ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.IOException java.io.IOException ) throws java.lang.Throwable { count ( java.io.IOException .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException ) throws java.lang.Throwable { count ( org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.IOException java.io.IOException ) throws java.lang.Throwable { count ( java.io.IOException .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException ) throws java.lang.Throwable { count ( org.springframework.aop.framework.AbstractAopProxyTests.UncheckedException .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.sql.SQLException java.sql.SQLException ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.lang.Object = null ; int = int = NUMBER ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { ++ int ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object != this . java.lang.Object ) throw new java.lang.RuntimeException ( STRING ) ; ++ int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( int != int ) throw new java.lang.RuntimeException ( STRING + int + STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { MethodInvocation org.springframework.aop.framework.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; void ( org.springframework.aop.framework.MethodInvocation ) ; return super. getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { MethodInvocation org.springframework.aop.framework.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; void ( org.springframework.aop.framework.MethodInvocation ) ; super. absquatulate ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( MethodInvocation org.springframework.aop.framework.MethodInvocation );  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) { assertSame ( this , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; assertTrue ( STRING + org.springframework.aop.framework.MethodInvocation . getMethod ( ) , ITestBean .class . boolean ( org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ) ) ; }  <METHOD_END>
