<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.TestConfiguration .class , org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CountryRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.MixedConfiguration .class , org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CountryRepository .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.JpaConfiguration .class , org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.OverlapConfiguration .class , org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.OverlapConfiguration .class , org.springframework.boot.autoconfigure.data.neo4j.MixedNeo4jRepositoriesAutoConfigurationTests.BaseConfiguration .class ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( CityRepository .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.autoconfigure.data.neo4j.AnnotationMetadata ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : new java.lang.Class<?> < ? > [] { DataSourceAutoConfiguration .class , HibernateJpaAutoConfiguration .class , JpaRepositoriesAutoConfiguration .class , Neo4jDataAutoConfiguration .class , Neo4jRepositoriesAutoConfiguration .class } ) { java.util.List<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
