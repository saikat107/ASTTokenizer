<METHOD_START> public void ( ) { super( WebServiceHeaders . PREFIX , java.util.List<java.lang.String> , java.util.Collections .< java.lang.String > java.util.List<java.lang.String> ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SoapMessage org.springframework.integration.ws.SoapMessage ) { final java.lang.String java.lang.String = org.springframework.integration.ws.SoapMessage . getSoapAction ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( WebServiceHeaders . SOAP_ACTION , java.lang.String ) ; return java.util.Map<java.lang.String,java.lang.Object> ; } else { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( SoapMessage org.springframework.integration.ws.SoapMessage ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; SoapHeader org.springframework.integration.ws.SoapHeader = org.springframework.integration.ws.SoapMessage . getSoapHeader ( ) ; if ( org.springframework.integration.ws.SoapHeader != null ) { java.util.Iterator<?> < ? > java.util.Iterator<?> = org.springframework.integration.ws.SoapHeader . getAllAttributes ( ) ; while ( java.util.Iterator<> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; if ( java.lang.Object instanceof javax.xml.namespace.QName ) { java.lang.String java.lang.String = QNameUtils . toQualifiedName ( ( javax.xml.namespace.QName ) java.lang.Object ) ; java.lang.String java.lang.String = org.springframework.integration.ws.SoapHeader . getAttributeValue ( ( javax.xml.namespace.QName ) java.lang.Object ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.String ) ; } } } java.util.Iterator<?> < ? > java.util.Iterator<?> = org.springframework.integration.ws.SoapHeader . examineAllHeaderElements ( ) ; while ( java.util.Iterator<> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; if ( java.lang.Object instanceof SoapHeaderElement ) { javax.xml.namespace.QName javax.xml.namespace.QName = ( ( SoapHeaderElement ) java.lang.Object ) . getName ( ) ; java.lang.String java.lang.String = QNameUtils . toQualifiedName ( javax.xml.namespace.QName ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , SoapMessage org.springframework.integration.ws.SoapMessage ) { java.lang.String java.lang.String = getHeaderIfAvailable ( java.util.Map<java.lang.String,java.lang.Object> , WebServiceHeaders . SOAP_ACTION , java.lang.String .class ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING ; } org.springframework.integration.ws.SoapMessage . setSoapAction ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , SoapMessage org.springframework.integration.ws.SoapMessage ) { SoapHeader org.springframework.integration.ws.SoapHeader = org.springframework.integration.ws.SoapMessage . getSoapHeader ( ) ; if ( java.lang.Object instanceof java.lang.String ) { javax.xml.namespace.QName javax.xml.namespace.QName = QNameUtils . parseQNameString ( java.lang.String ) ; org.springframework.integration.ws.SoapHeader . addAttribute ( javax.xml.namespace.QName , ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof javax.xml.transform.Source ) { javax.xml.transform.Result javax.xml.transform.Result = org.springframework.integration.ws.SoapHeader . getResult ( ) ; try { this . org.springframework.integration.ws.TransformerHelper . transform ( ( javax.xml.transform.Source ) java.lang.Object , javax.xml.transform.Result ) ; } catch ( javax.xml.transform.TransformerException javax.xml.transform.TransformerException ) { throw new SoapHeaderException ( STRING + java.lang.Object + STRING + javax.xml.transform.Result + STRING , javax.xml.transform.TransformerException ) ; } } }  <METHOD_END>
