<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.jdbc.FailureAnalysis = org.springframework.boot.autoconfigure.jdbc.FailureAnalysis ( org.springframework.boot.autoconfigure.jdbc.HikariDriverConfigurationFailureAnalyzerTests.TestConfiguration .class ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.FailureAnalysis ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.FailureAnalysis . getDescription ( ) ) . isEqualTo ( STRING + STRING ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.FailureAnalysis . getAction ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.jdbc.FailureAnalysis = new HikariDriverConfigurationFailureAnalyzer ( ) . analyze ( new java.lang.RuntimeException ( STRING , new java.lang.IllegalStateException ( STRING ) ) ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.FailureAnalysis ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jdbc.FailureAnalysis org.springframework.boot.autoconfigure.jdbc.FailureAnalysis ( java.lang.Class<?> < ? > java.lang.Class<?> ) { BeanCreationException org.springframework.boot.autoconfigure.jdbc.BeanCreationException = org.springframework.boot.autoconfigure.jdbc.BeanCreationException ( java.lang.Class<> ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.BeanCreationException ) . isNotNull ( ) ; return new HikariDriverConfigurationFailureAnalyzer ( ) . analyze ( org.springframework.boot.autoconfigure.jdbc.BeanCreationException ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jdbc.BeanCreationException org.springframework.boot.autoconfigure.jdbc.BeanCreationException ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING + HikariDataSource .class . java.lang.String ( ) , STRING ) ; org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; try { org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; return null ; } catch ( BeanCreationException org.springframework.boot.autoconfigure.jdbc.BeanCreationException ) { return org.springframework.boot.autoconfigure.jdbc.BeanCreationException ; } }  <METHOD_END>
