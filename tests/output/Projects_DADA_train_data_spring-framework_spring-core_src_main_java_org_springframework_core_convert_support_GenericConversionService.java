<METHOD_START> @ java.lang.Override public void void ( Converter < ? , ? > org.springframework.core.convert.support.Converter<?,?> ) { ResolvableType [] org.springframework.core.convert.support.ResolvableType[] = org.springframework.core.convert.support.ResolvableType[] ( org.springframework.core.convert.support.Converter<,> . getClass ( ) , Converter .class ) ; if ( org.springframework.core.convert.support.ResolvableType[] == null && org.springframework.core.convert.support.Converter<,> instanceof DecoratingProxy ) { org.springframework.core.convert.support.ResolvableType[] = org.springframework.core.convert.support.ResolvableType[] ( ( ( DecoratingProxy ) org.springframework.core.convert.support.Converter<,> ) . getDecoratedClass ( ) , Converter .class ) ; } if ( org.springframework.core.convert.support.ResolvableType[] == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.core.convert.support.Converter<,> . getClass ( ) . getName ( ) + STRING ) ; } void ( new org.springframework.core.convert.support.GenericConversionService.ConverterAdapter ( org.springframework.core.convert.support.Converter<,> , org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] , org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S , T > void void ( java.lang.Class<S> < S > java.lang.Class<S> , java.lang.Class<T> < T > java.lang.Class<T> , Converter < ? super S , ? extends T > org.springframework.core.convert.support.Converter<? super S,? extends T> ) { void ( new org.springframework.core.convert.support.GenericConversionService.ConverterAdapter ( org.springframework.core.convert.support.Converter<,> , ResolvableType . forClass ( java.lang.Class<S> ) , ResolvableType . forClass ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( GenericConverter org.springframework.core.convert.support.GenericConverter ) { this . org.springframework.core.convert.support.GenericConversionService.Converters . void ( org.springframework.core.convert.support.GenericConverter ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConverterFactory < ? , ? > org.springframework.core.convert.support.ConverterFactory<?,?> ) { ResolvableType [] org.springframework.core.convert.support.ResolvableType[] = org.springframework.core.convert.support.ResolvableType[] ( org.springframework.core.convert.support.ConverterFactory<,> . getClass ( ) , ConverterFactory .class ) ; if ( org.springframework.core.convert.support.ResolvableType[] == null && org.springframework.core.convert.support.ConverterFactory<,> instanceof DecoratingProxy ) { org.springframework.core.convert.support.ResolvableType[] = org.springframework.core.convert.support.ResolvableType[] ( ( ( DecoratingProxy ) org.springframework.core.convert.support.ConverterFactory<,> ) . getDecoratedClass ( ) , ConverterFactory .class ) ; } if ( org.springframework.core.convert.support.ResolvableType[] == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.core.convert.support.ConverterFactory<,> . getClass ( ) . getName ( ) + STRING ) ; } void ( new org.springframework.core.convert.support.GenericConversionService.ConverterFactoryAdapter ( org.springframework.core.convert.support.ConverterFactory<,> , new ConvertiblePair ( org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] . resolve ( ) , org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] . resolve ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.core.convert.support.GenericConversionService.Converters . void ( java.lang.Class<> , java.lang.Class<> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return boolean ( ( java.lang.Class<> != null ? TypeDescriptor . valueOf ( java.lang.Class<> ) : null ) , TypeDescriptor . valueOf ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { Assert . notNull ( org.springframework.core.convert.support.TypeDescriptor , STRING ) ; if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return true ; } GenericConverter org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; return ( org.springframework.core.convert.support.GenericConverter != null ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { Assert . notNull ( org.springframework.core.convert.support.TypeDescriptor , STRING ) ; if ( org.springframework.core.convert.support.TypeDescriptor == null ) { return true ; } GenericConverter org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; return ( org.springframework.core.convert.support.GenericConverter == org.springframework.core.convert.support.GenericConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; return ( T ) java.lang.Object ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , TypeDescriptor . valueOf ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { Assert . notNull ( org.springframework.core.convert.support.TypeDescriptor , STRING ) ; if ( org.springframework.core.convert.support.TypeDescriptor == null ) { Assert . isTrue ( java.lang.Object == null , STRING ) ; return java.lang.Object ( null , org.springframework.core.convert.support.TypeDescriptor , java.lang.Object ( null , org.springframework.core.convert.support.TypeDescriptor ) ) ; } if ( java.lang.Object != null && ! org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) . isInstance ( java.lang.Object ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.core.convert.support.TypeDescriptor + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } GenericConverter org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; if ( org.springframework.core.convert.support.GenericConverter != null ) { java.lang.Object java.lang.Object = ConversionUtils . invokeConverter ( org.springframework.core.convert.support.GenericConverter , java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; return java.lang.Object ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor , java.lang.Object ) ; } return java.lang.Object ( java.lang.Object , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return java.lang.Object ( java.lang.Object , TypeDescriptor . forObject ( java.lang.Object ) , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.core.convert.support.GenericConversionService.Converters . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) == java.util.Optional .class ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.core.convert.support.GenericConverter org.springframework.core.convert.support.GenericConverter ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey = new org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; GenericConverter org.springframework.core.convert.support.GenericConverter = this . java.util.Map<org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey,org.springframework.core.convert.support.GenericConverter> . get ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey ) ; if ( org.springframework.core.convert.support.GenericConverter != null ) { return ( org.springframework.core.convert.support.GenericConverter != org.springframework.core.convert.support.GenericConverter ? org.springframework.core.convert.support.GenericConverter : null ) ; } org.springframework.core.convert.support.GenericConverter = this . org.springframework.core.convert.support.GenericConversionService.Converters . org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; if ( org.springframework.core.convert.support.GenericConverter == null ) { org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } if ( org.springframework.core.convert.support.GenericConverter != null ) { this . java.util.Map<org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey,org.springframework.core.convert.support.GenericConverter> . put ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey , org.springframework.core.convert.support.GenericConverter ) ; return org.springframework.core.convert.support.GenericConverter ; } this . java.util.Map<org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey,org.springframework.core.convert.support.GenericConverter> . put ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey , org.springframework.core.convert.support.GenericConverter ) ; return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.core.convert.support.GenericConverter org.springframework.core.convert.support.GenericConverter ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) ? org.springframework.core.convert.support.GenericConverter : null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.convert.support.ResolvableType [] org.springframework.core.convert.support.ResolvableType[] ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { ResolvableType org.springframework.core.convert.support.ResolvableType = ResolvableType . forClass ( java.lang.Class<> ) . as ( java.lang.Class<> ) ; ResolvableType [] org.springframework.core.convert.support.ResolvableType[] = org.springframework.core.convert.support.ResolvableType . getGenerics ( ) ; if ( generics . length < NUMBER ) { return null ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] . resolve ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.core.convert.support.ResolvableType[] [ NUMBER ] . resolve ( ) ; if ( java.lang.Class<> == null || java.lang.Class<> == null ) { return null ; } return org.springframework.core.convert.support.ResolvableType[] ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . java.util.Map<org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey,org.springframework.core.convert.support.GenericConverter> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { void ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; return null ; } if ( org.springframework.core.convert.support.TypeDescriptor . isAssignableTo ( org.springframework.core.convert.support.TypeDescriptor ) && org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) . isInstance ( java.lang.Object ) ) { return java.lang.Object ; } throw new ConverterNotFoundException ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { void ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void void ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( org.springframework.core.convert.support.TypeDescriptor . isPrimitive ( ) ) { throw new ConversionFailedException ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor , null , new java.lang.IllegalArgumentException ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( Converter < ? , ? > org.springframework.core.convert.support.Converter<?,?> , ResolvableType org.springframework.core.convert.support.ResolvableType , ResolvableType org.springframework.core.convert.support.ResolvableType ) { this . org.springframework.core.convert.support.Converter<java.lang.Object,java.lang.Object> = ( Converter < java.lang.Object , java.lang.Object > ) org.springframework.core.convert.support.Converter<,> ; this . org.springframework.core.convert.support.ConvertiblePair = new ConvertiblePair ( org.springframework.core.convert.support.ResolvableType . resolve ( java.lang.Object .class ) , org.springframework.core.convert.support.ResolvableType . resolve ( java.lang.Object .class ) ) ; this . org.springframework.core.convert.support.ResolvableType = org.springframework.core.convert.support.ResolvableType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( this . org.springframework.core.convert.support.ConvertiblePair ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( this . org.springframework.core.convert.support.ConvertiblePair . getTargetType ( ) != org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) ) { return false ; } ResolvableType org.springframework.core.convert.support.ResolvableType = org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) ; if ( ! ( org.springframework.core.convert.support.ResolvableType . getType ( ) instanceof java.lang.Class ) && ! org.springframework.core.convert.support.ResolvableType . isAssignableFrom ( this . org.springframework.core.convert.support.ResolvableType ) && ! this . org.springframework.core.convert.support.ResolvableType . hasUnresolvableGenerics ( ) ) { return false ; } return ! ( this . org.springframework.core.convert.support.Converter<java.lang.Object,java.lang.Object> instanceof ConditionalConverter ) || ( ( ConditionalConverter ) this . org.springframework.core.convert.support.Converter<java.lang.Object,java.lang.Object> ) . matches ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { return java.lang.Object ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } return this . org.springframework.core.convert.support.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . org.springframework.core.convert.support.ConvertiblePair + STRING + this . org.springframework.core.convert.support.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( ConverterFactory < ? , ? > org.springframework.core.convert.support.ConverterFactory<?,?> , ConvertiblePair org.springframework.core.convert.support.ConvertiblePair ) { this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> = ( ConverterFactory < java.lang.Object , java.lang.Object > ) org.springframework.core.convert.support.ConverterFactory<,> ; this . org.springframework.core.convert.support.ConvertiblePair = org.springframework.core.convert.support.ConvertiblePair ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return java.util.Collections . java.util.Set ( this . org.springframework.core.convert.support.ConvertiblePair ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { boolean boolean = true ; if ( this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> instanceof ConditionalConverter ) { boolean = ( ( ConditionalConverter ) this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> ) . matches ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } if ( boolean ) { Converter < ? , ? > org.springframework.core.convert.support.Converter<?,?> = this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> . getConverter ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ; if ( org.springframework.core.convert.support.Converter<,> instanceof ConditionalConverter ) { boolean = ( ( ConditionalConverter ) org.springframework.core.convert.support.Converter<,> ) . matches ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } } return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { if ( java.lang.Object == null ) { return java.lang.Object ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; } return this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> . getConverter ( org.springframework.core.convert.support.TypeDescriptor . getObjectType ( ) ) . convert ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . org.springframework.core.convert.support.ConvertiblePair + STRING + this . org.springframework.core.convert.support.ConverterFactory<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { this . org.springframework.core.convert.support.TypeDescriptor = org.springframework.core.convert.support.TypeDescriptor ; this . org.springframework.core.convert.support.TypeDescriptor = org.springframework.core.convert.support.TypeDescriptor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey ) ) { return false ; } org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey = ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey ) java.lang.Object ; return ( ObjectUtils . nullSafeEquals ( this . org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey . org.springframework.core.convert.support.TypeDescriptor ) && ObjectUtils . nullSafeEquals ( this . org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey . org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( ObjectUtils . nullSafeHashCode ( this . org.springframework.core.convert.support.TypeDescriptor ) * NUMBER + ObjectUtils . nullSafeHashCode ( this . org.springframework.core.convert.support.TypeDescriptor ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( STRING + this . org.springframework.core.convert.support.TypeDescriptor + STRING + this . org.springframework.core.convert.support.TypeDescriptor + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey ) { int int = this . org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) . toString ( ) . compareTo ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey . org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) . toString ( ) ) ; if ( int == NUMBER ) { int = this . org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) . toString ( ) . compareTo ( org.springframework.core.convert.support.GenericConversionService.ConverterCacheKey . org.springframework.core.convert.support.TypeDescriptor . getResolvableType ( ) . toString ( ) ) ; } return int ; }  <METHOD_END>
<METHOD_START> public void void ( GenericConverter org.springframework.core.convert.support.GenericConverter ) { java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> = org.springframework.core.convert.support.GenericConverter . getConvertibleTypes ( ) ; if ( java.util.Set<org.springframework.core.convert.support.ConvertiblePair> == null ) { Assert . state ( org.springframework.core.convert.support.GenericConverter instanceof ConditionalConverter , STRING ) ; this . java.util.Set<org.springframework.core.convert.support.GenericConverter> . add ( org.springframework.core.convert.support.GenericConverter ) ; } else { for ( ConvertiblePair org.springframework.core.convert.support.ConvertiblePair : java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ) { org.springframework.core.convert.support.GenericConversionService.ConvertersForPair org.springframework.core.convert.support.GenericConversionService.ConvertersForPair = org.springframework.core.convert.support.GenericConversionService.ConvertersForPair ( org.springframework.core.convert.support.ConvertiblePair ) ; org.springframework.core.convert.support.GenericConversionService.ConvertersForPair . void ( org.springframework.core.convert.support.GenericConverter ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.core.convert.support.GenericConversionService.ConvertersForPair org.springframework.core.convert.support.GenericConversionService.ConvertersForPair ( ConvertiblePair org.springframework.core.convert.support.ConvertiblePair ) { org.springframework.core.convert.support.GenericConversionService.ConvertersForPair org.springframework.core.convert.support.GenericConversionService.ConvertersForPair = this . java.util.Map<org.springframework.core.convert.support.ConvertiblePair,org.springframework.core.convert.support.GenericConversionService.ConvertersForPair> . get ( org.springframework.core.convert.support.ConvertiblePair ) ; if ( org.springframework.core.convert.support.GenericConversionService.ConvertersForPair == null ) { org.springframework.core.convert.support.GenericConversionService.ConvertersForPair = new org.springframework.core.convert.support.GenericConversionService.ConvertersForPair ( ) ; this . java.util.Map<org.springframework.core.convert.support.ConvertiblePair,org.springframework.core.convert.support.GenericConversionService.ConvertersForPair> . put ( org.springframework.core.convert.support.ConvertiblePair , org.springframework.core.convert.support.GenericConversionService.ConvertersForPair ) ; } return org.springframework.core.convert.support.GenericConversionService.ConvertersForPair ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.util.Map<org.springframework.core.convert.support.ConvertiblePair,org.springframework.core.convert.support.GenericConversionService.ConvertersForPair> . remove ( new ConvertiblePair ( java.lang.Class<> , java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.support.GenericConverter org.springframework.core.convert.support.GenericConverter ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.List<java.lang.Class<?>> ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ; java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = java.util.List<java.lang.Class<?>> ( org.springframework.core.convert.support.TypeDescriptor . getType ( ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<?>> ) { ConvertiblePair org.springframework.core.convert.support.ConvertiblePair = new ConvertiblePair ( java.lang.Class<> , java.lang.Class<> ) ; GenericConverter org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.ConvertiblePair ) ; if ( org.springframework.core.convert.support.GenericConverter != null ) { return org.springframework.core.convert.support.GenericConverter ; } } } return null ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.convert.support.GenericConverter org.springframework.core.convert.support.GenericConverter ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , ConvertiblePair org.springframework.core.convert.support.ConvertiblePair ) { org.springframework.core.convert.support.GenericConversionService.ConvertersForPair org.springframework.core.convert.support.GenericConversionService.ConvertersForPair = this . java.util.Map<org.springframework.core.convert.support.ConvertiblePair,org.springframework.core.convert.support.GenericConversionService.ConvertersForPair> . get ( org.springframework.core.convert.support.ConvertiblePair ) ; if ( org.springframework.core.convert.support.GenericConversionService.ConvertersForPair != null ) { GenericConverter org.springframework.core.convert.support.GenericConverter = org.springframework.core.convert.support.GenericConversionService.ConvertersForPair . org.springframework.core.convert.support.GenericConverter ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ; if ( org.springframework.core.convert.support.GenericConverter != null ) { return org.springframework.core.convert.support.GenericConverter ; } } for ( GenericConverter org.springframework.core.convert.support.GenericConverter : this . java.util.Set<org.springframework.core.convert.support.GenericConverter> ) { if ( ( ( ConditionalConverter ) org.springframework.core.convert.support.GenericConverter ) . matches ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) { return org.springframework.core.convert.support.GenericConverter ; } } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( NUMBER ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> <> ( NUMBER ) ; void ( NUMBER , ClassUtils . resolvePrimitiveIfNecessary ( java.lang.Class<> ) , false , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; boolean boolean = java.lang.Class<> . boolean ( ) ; int int = NUMBER ; while ( int < java.util.List<java.lang.Class<?>> . int ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.List<java.lang.Class<?>> . java.lang.Class<?> ( int ) ; java.lang.Class<?> = ( boolean ? java.lang.Class<> . java.lang.Class<?> ( ) : ClassUtils . resolvePrimitiveIfNecessary ( java.lang.Class<> ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<> . java.lang.Class<? super > ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> != java.lang.Object .class && java.lang.Class<> != java.lang.Enum .class ) { void ( int + NUMBER , java.lang.Class<> . java.lang.Class<? super > ( ) , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; } void ( java.lang.Class<> , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; int ++ ; } if ( java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { void ( java.util.List<java.lang.Class<?>> . int ( ) , java.lang.Enum .class , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; void ( java.util.List<java.lang.Class<?>> . int ( ) , java.lang.Enum .class , false , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; void ( java.lang.Enum .class , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; } void ( java.util.List<java.lang.Class<?>> . int ( ) , java.lang.Object .class , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; void ( java.util.List<java.lang.Class<?>> . int ( ) , java.lang.Object .class , false , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; return java.util.List<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<> . java.lang.Class<?>[] ( ) ) { void ( java.util.List<java.lang.Class<?>> . int ( ) , java.lang.Class<> , boolean , java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( int int , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> , java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ) { if ( boolean ) { java.lang.Class<?> = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , NUMBER ) . java.lang.Class<? extends java.lang.Object> ( ) ; } if ( java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.Class<?>> . void ( int , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\t' ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( '\n' ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( org.springframework.core.convert.support.GenericConversionService.ConvertersForPair org.springframework.core.convert.support.GenericConversionService.ConvertersForPair : java.util.Map<org.springframework.core.convert.support.ConvertiblePair,org.springframework.core.convert.support.GenericConversionService.ConvertersForPair> . values ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.core.convert.support.GenericConversionService.ConvertersForPair . java.lang.String ( ) ) ; } java.util.Collections . void ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( GenericConverter org.springframework.core.convert.support.GenericConverter ) { this . java.util.LinkedList<org.springframework.core.convert.support.GenericConverter> . addFirst ( org.springframework.core.convert.support.GenericConverter ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.support.GenericConverter org.springframework.core.convert.support.GenericConverter ( TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { for ( GenericConverter org.springframework.core.convert.support.GenericConverter : this . java.util.LinkedList<org.springframework.core.convert.support.GenericConverter> ) { if ( ! ( org.springframework.core.convert.support.GenericConverter instanceof ConditionalGenericConverter ) || ( ( ConditionalGenericConverter ) org.springframework.core.convert.support.GenericConverter ) . matches ( org.springframework.core.convert.support.TypeDescriptor , org.springframework.core.convert.support.TypeDescriptor ) ) { return org.springframework.core.convert.support.GenericConverter ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return StringUtils . collectionToCommaDelimitedString ( this . java.util.LinkedList<org.springframework.core.convert.support.GenericConverter> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.core.convert.support.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.core.convert.support.ConvertiblePair> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor , TypeDescriptor org.springframework.core.convert.support.TypeDescriptor ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
