<METHOD_START> @ Before public void void ( ) { ConversionService org.springframework.http.converter.ConversionService = new DefaultConversionService ( ) ; this . org.springframework.http.converter.ObjectToStringHttpMessageConverter = new ObjectToStringHttpMessageConverter ( org.springframework.http.converter.ConversionService ) ; this . org.springframework.http.converter.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.http.converter.ServletServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.http.converter.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.lang.Math .class , null ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( Resource .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.util.Locale .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.math.BigInteger .class , null ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.math.BigInteger .class , MediaType . TEXT_HTML ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.math.BigInteger .class , MediaType . TEXT_XML ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canRead ( java.math.BigInteger .class , MediaType . APPLICATION_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.lang.Math .class , null ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( Resource .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.util.Locale .class , null ) ) ; assertTrue ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.lang.Double .class , null ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.math.BigInteger .class , MediaType . TEXT_HTML ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.math.BigInteger .class , MediaType . TEXT_XML ) ) ; assertFalse ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.math.BigInteger .class , MediaType . APPLICATION_XML ) ) ; assertTrue ( this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . canWrite ( java.math.BigInteger .class , MediaType . valueOf ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( java.lang.Integer . java.lang.Integer ( NUMBER ) , null , org.springframework.http.converter.ServletServerHttpResponse ) ; assertEquals ( STRING , org.springframework.http.converter.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ConversionService org.springframework.http.converter.ConversionService = new DefaultConversionService ( ) ; ObjectToStringHttpMessageConverter org.springframework.http.converter.ObjectToStringHttpMessageConverter = new ObjectToStringHttpMessageConverter ( org.springframework.http.converter.ConversionService , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( ( byte ) NUMBER , null , this . org.springframework.http.converter.ServletServerHttpResponse ) ; assertEquals ( STRING , this . org.springframework.http.converter.MockHttpServletResponse . getCharacterEncoding ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( new java.util.Date ( ) , null , this . org.springframework.http.converter.ServletServerHttpResponse ) ; assertNotNull ( this . org.springframework.http.converter.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . setWriteAcceptCharset ( false ) ; this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( new java.util.Date ( ) , null , this . org.springframework.http.converter.ServletServerHttpResponse ) ; assertNull ( this . org.springframework.http.converter.MockHttpServletResponse . getHeader ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockHttpServletRequest org.springframework.http.converter.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.http.converter.MockHttpServletRequest . setContentType ( MediaType . TEXT_PLAIN_VALUE ) ; java.lang.Short java.lang.Short = java.lang.Short . java.lang.Short ( ( short ) NUMBER ) ; org.springframework.http.converter.MockHttpServletRequest . setContent ( java.lang.Short . java.lang.String ( ) . byte[] ( StringHttpMessageConverter . DEFAULT_CHARSET ) ) ; assertEquals ( java.lang.Short , this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . read ( java.lang.Short .class , new ServletServerHttpRequest ( org.springframework.http.converter.MockHttpServletRequest ) ) ) ; java.lang.Float java.lang.Float = java.lang.Float . java.lang.Float ( NUMBER ) ; org.springframework.http.converter.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; org.springframework.http.converter.MockHttpServletRequest . setContent ( java.lang.Float . java.lang.String ( ) . byte[] ( STRING ) ) ; assertEquals ( java.lang.Float , this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . read ( java.lang.Float .class , new ServletServerHttpRequest ( org.springframework.http.converter.MockHttpServletRequest ) ) ) ; java.lang.Long java.lang.Long = java.lang.Long . java.lang.Long ( NUMBER ) ; org.springframework.http.converter.MockHttpServletRequest . setCharacterEncoding ( STRING ) ; org.springframework.http.converter.MockHttpServletRequest . setContent ( java.lang.Long . java.lang.String ( ) . byte[] ( STRING ) ) ; assertEquals ( java.lang.Long , this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . read ( java.lang.Long .class , new ServletServerHttpRequest ( org.springframework.http.converter.MockHttpServletRequest ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( ( byte ) - NUMBER , null , this . org.springframework.http.converter.ServletServerHttpResponse ) ; assertEquals ( STRING , this . org.springframework.http.converter.MockHttpServletResponse . getCharacterEncoding ( ) ) ; assertTrue ( this . org.springframework.http.converter.MockHttpServletResponse . getContentType ( ) . startsWith ( MediaType . TEXT_PLAIN_VALUE ) ) ; assertEquals ( NUMBER , this . org.springframework.http.converter.MockHttpServletResponse . getContentLength ( ) ) ; assertArrayEquals ( new byte [] { '-' , '8' } , this . org.springframework.http.converter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; this . org.springframework.http.converter.ObjectToStringHttpMessageConverter . write ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.http.converter.MediaType , this . org.springframework.http.converter.ServletServerHttpResponse ) ; assertEquals ( STRING , this . org.springframework.http.converter.MockHttpServletResponse . getCharacterEncoding ( ) ) ; assertTrue ( this . org.springframework.http.converter.MockHttpServletResponse . getContentType ( ) . startsWith ( MediaType . TEXT_PLAIN_VALUE ) ) ; assertEquals ( NUMBER , this . org.springframework.http.converter.MockHttpServletResponse . getContentLength ( ) ) ; assertArrayEquals ( new byte [] { - NUMBER , - NUMBER , NUMBER , '9' , NUMBER , '5' , NUMBER , '8' } , this . org.springframework.http.converter.MockHttpServletResponse . getContentAsByteArray ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new ObjectToStringHttpMessageConverter ( null ) ; }  <METHOD_END>
