<METHOD_START> public void ( AsyncClientHttpRequestFactory org.springframework.http.client.AsyncClientHttpRequestFactory , java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> < AsyncClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> , java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { this . org.springframework.http.client.AsyncClientHttpRequestFactory = org.springframework.http.client.AsyncClientHttpRequestFactory ; this . java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> ; this . java.net.URI = java.net.URI ; this . org.springframework.http.client.HttpMethod = org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( HttpHeaders org.springframework.http.client.HttpHeaders , byte [] byte[] )			throws java.io.IOException { return new org.springframework.http.client.InterceptingAsyncClientHttpRequest.AsyncRequestExecution ( ) . org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( this , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return java.net.URI ; }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.Iterator<org.springframework.http.client.AsyncClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.AsyncClientHttpRequestInterceptor> . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( HttpRequest org.springframework.http.client.HttpRequest , byte [] byte[] )				throws java.io.IOException { if ( this . java.util.Iterator<org.springframework.http.client.AsyncClientHttpRequestInterceptor> . hasNext ( ) ) { AsyncClientHttpRequestInterceptor org.springframework.http.client.AsyncClientHttpRequestInterceptor = this . java.util.Iterator<org.springframework.http.client.AsyncClientHttpRequestInterceptor> . next ( ) ; return org.springframework.http.client.AsyncClientHttpRequestInterceptor . intercept ( org.springframework.http.client.HttpRequest , byte[] , this ) ; } else { java.net.URI java.net.URI = org.springframework.http.client.HttpRequest . getURI ( ) ; HttpMethod org.springframework.http.client.HttpMethod = org.springframework.http.client.HttpRequest . getMethod ( ) ; HttpHeaders org.springframework.http.client.HttpHeaders = org.springframework.http.client.HttpRequest . getHeaders ( ) ; AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest = org.springframework.http.client.AsyncClientHttpRequestFactory . createAsyncRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; org.springframework.http.client.AsyncClientHttpRequest . getHeaders ( ) . putAll ( org.springframework.http.client.HttpHeaders ) ; if ( byte[] . int > NUMBER ) { StreamUtils . copy ( byte[] , org.springframework.http.client.AsyncClientHttpRequest . getBody ( ) ) ; } return org.springframework.http.client.AsyncClientHttpRequest . executeAsync ( ) ; } }  <METHOD_END>
