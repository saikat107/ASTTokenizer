<METHOD_START> @ After public void void ( ) { if ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext != null ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Region org.springframework.data.gemfire.config.annotation.Region , EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes ) { assertThat ( org.springframework.data.gemfire.config.annotation.Region ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.Region . getAttributes ( ) ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.annotation.Region . getAttributes ( ) . getEvictionAttributes ( ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; }  <METHOD_END>
<METHOD_START> protected void void ( EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes , EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes ) { assertThat ( org.springframework.data.gemfire.config.annotation.EvictionAttributes ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getAction ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getAction ( ) ) ; assertThat ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getAlgorithm ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getAlgorithm ( ) ) ; assertThat ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getObjectSizer ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getObjectSizer ( ) ) ; if ( ! EvictionPolicyType . HEAP_PERCENTAGE . equals ( EvictionPolicyType . valueOf ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getAlgorithm ( ) ) ) ) { assertThat ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getMaximum ( ) ) . isEqualTo ( org.springframework.data.gemfire.config.annotation.EvictionAttributes . getMaximum ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> < K , V > org.springframework.data.gemfire.config.annotation.Region<K,V> ( java.lang.String java.lang.String ) { return org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( java.lang.String , Region .class ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.annotation.EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes ( java.lang.Integer java.lang.Integer , EvictionPolicyType org.springframework.data.gemfire.config.annotation.EvictionPolicyType , EvictionActionType org.springframework.data.gemfire.config.annotation.EvictionActionType , ObjectSizer ... org.springframework.data.gemfire.config.annotation.ObjectSizer[] ) { EvictionAttributesFactoryBean org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean = new EvictionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . setAction ( org.springframework.data.gemfire.config.annotation.EvictionActionType . getEvictionAction ( ) ) ; org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . setObjectSizer ( ArrayUtils . getFirst ( org.springframework.data.gemfire.config.annotation.ObjectSizer[] ) ) ; org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . setThreshold ( java.lang.Integer ) ; org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . setType ( org.springframework.data.gemfire.config.annotation.EvictionPolicyType ) ; org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . afterPropertiesSet ( ) ; return org.springframework.data.gemfire.config.annotation.EvictionAttributesFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEvictionConfigurationUnitTests.DefaultEvictionPolicyConfiguration .class ) ; EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes = EvictionAttributes . createLRUEntryAttributes ( ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEvictionConfigurationUnitTests.CustomEvictionPolicyConfiguration .class ) ; ObjectSizer org.springframework.data.gemfire.config.annotation.ObjectSizer = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , ObjectSizer .class ) ; EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes = org.springframework.data.gemfire.config.annotation.EvictionAttributes ( NUMBER , EvictionPolicyType . MEMORY_SIZE , EvictionActionType . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.annotation.ObjectSizer ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEvictionConfigurationUnitTests.RegionSpecificEvictionPolicyConfiguration .class ) ; ObjectSizer org.springframework.data.gemfire.config.annotation.ObjectSizer = org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , ObjectSizer .class ) ; EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes = org.springframework.data.gemfire.config.annotation.EvictionAttributes ( null , EvictionPolicyType . HEAP_PERCENTAGE , EvictionActionType . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.annotation.ObjectSizer ) ; EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes = org.springframework.data.gemfire.config.annotation.EvictionAttributes ( NUMBER , EvictionPolicyType . ENTRY_COUNT , EvictionActionType . LOCAL_DESTROY ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext = org.springframework.data.gemfire.config.annotation.AnnotationConfigApplicationContext ( org.springframework.data.gemfire.config.annotation.EnableEvictionConfigurationUnitTests.LastMatchingWinsEvictionPolicyConfiguration .class ) ; EvictionAttributes org.springframework.data.gemfire.config.annotation.EvictionAttributes = org.springframework.data.gemfire.config.annotation.EvictionAttributes ( NUMBER , EvictionPolicyType . ENTRY_COUNT , EvictionActionType . OVERFLOW_TO_DISK ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; void ( org.springframework.data.gemfire.config.annotation.ConfigurableApplicationContext . getBean ( STRING , Region .class ) , org.springframework.data.gemfire.config.annotation.EvictionAttributes ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.config.annotation.Cache org.springframework.data.gemfire.config.annotation.Cache ( ) { Cache org.springframework.data.gemfire.config.annotation.Cache = mock ( Cache .class ) ; RegionFactory org.springframework.data.gemfire.config.annotation.RegionFactory = mock ( RegionFactory .class ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> < EvictionAttributes > java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> = new java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> < EvictionAttributes > ( null ) ; when ( org.springframework.data.gemfire.config.annotation.Cache . createRegionFactory ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionFactory ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory . setEvictionAttributes ( any ( EvictionAttributes .class ) ) ) . thenAnswer ( new Answer < RegionFactory > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.RegionFactory org.springframework.data.gemfire.config.annotation.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> . set ( org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ) ; return ( RegionFactory ) org.springframework.data.gemfire.config.annotation.InvocationOnMock . getMock ( ) ; } } ) ; when ( org.springframework.data.gemfire.config.annotation.RegionFactory . create ( anyString ( ) ) ) . thenAnswer ( new Answer < Region > ( ) { @ java.lang.Override public org.springframework.data.gemfire.config.annotation.Region org.springframework.data.gemfire.config.annotation.Region ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; Region org.springframework.data.gemfire.config.annotation.Region = mock ( Region .class , java.lang.String ) ; RegionAttributes org.springframework.data.gemfire.config.annotation.RegionAttributes = mock ( RegionAttributes .class , java.lang.String . java.lang.String ( STRING ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionAttributes ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes . getEvictionAttributes ( ) ) . thenReturn ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> . get ( ) ) ; return org.springframework.data.gemfire.config.annotation.Region ; } } ) ; return org.springframework.data.gemfire.config.annotation.Cache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.RegionFactory org.springframework.data.gemfire.config.annotation.RegionFactory ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> . set ( org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ) ; return ( RegionFactory ) org.springframework.data.gemfire.config.annotation.InvocationOnMock . getMock ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.config.annotation.Region org.springframework.data.gemfire.config.annotation.Region ( InvocationOnMock org.springframework.data.gemfire.config.annotation.InvocationOnMock ) throws java.lang.Throwable { java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.InvocationOnMock . getArgument ( NUMBER ) ; Region org.springframework.data.gemfire.config.annotation.Region = mock ( Region .class , java.lang.String ) ; RegionAttributes org.springframework.data.gemfire.config.annotation.RegionAttributes = mock ( RegionAttributes .class , java.lang.String . java.lang.String ( STRING ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; when ( org.springframework.data.gemfire.config.annotation.Region . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.config.annotation.RegionAttributes ) ; when ( org.springframework.data.gemfire.config.annotation.RegionAttributes . getEvictionAttributes ( ) ) . thenReturn ( java.util.concurrent.atomic.AtomicReference<org.springframework.data.gemfire.config.annotation.EvictionAttributes> . get ( ) ) ; return org.springframework.data.gemfire.config.annotation.Region ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> ( Cache org.springframework.data.gemfire.config.annotation.Cache ) { PartitionedRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> = new PartitionedRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.config.annotation.Cache ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; return org.springframework.data.gemfire.config.annotation.PartitionedRegionFactoryBean<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean ( STRING ) org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> ( Cache org.springframework.data.gemfire.config.annotation.Cache ) { ReplicatedRegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> = new ReplicatedRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.config.annotation.Cache ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> . setClose ( false ) ; org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( false ) ; return org.springframework.data.gemfire.config.annotation.ReplicatedRegionFactoryBean<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.config.annotation.ObjectSizer org.springframework.data.gemfire.config.annotation.ObjectSizer ( ) { return mock ( ObjectSizer .class ) ; }  <METHOD_END>
