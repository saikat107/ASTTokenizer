<METHOD_START> public void ( java.net.URI java.net.URI , HttpHeaders org.springframework.http.server.reactive.HttpHeaders ) { this . java.net.URI = java.net.URI ; this . org.springframework.http.server.reactive.HttpHeaders = HttpHeaders . readOnlyHttpHeaders ( org.springframework.http.server.reactive.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( ) { return this . org.springframework.http.server.reactive.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ( ) { if ( this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> == null ) { this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = CollectionUtils . unmodifiableMultiValueMap ( org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ( ) ) ; } return this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; java.lang.String java.lang.String = java.net.URI ( ) . java.lang.String ( ) ; if ( java.lang.String != null ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; java.lang.String = ( java.lang.String != null ? java.lang.String : ( StringUtils . hasLength ( java.lang.String ) ? STRING : null ) ) ; org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String ( java.lang.String ) , java.lang.String ( java.lang.String ) ) ; } } return org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return StringUtils . uriDecode ( java.lang.String , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) { if ( this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> == null ) { this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> = CollectionUtils . unmodifiableMultiValueMap ( org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) ) ; } return this . org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( )  <METHOD_END>
