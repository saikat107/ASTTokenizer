<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ) { super( java.util.Map<java.lang.String,org.springframework.web.accept.MediaType> ); this . org.springframework.web.accept.UrlPathHelper . setUrlDecode ( false ) ; }  <METHOD_END>
<METHOD_START> public void void ( UrlPathHelper org.springframework.web.accept.UrlPathHelper ) { this . org.springframework.web.accept.UrlPathHelper = org.springframework.web.accept.UrlPathHelper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated public void void ( boolean boolean ) { void ( ! boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( NativeWebRequest org.springframework.web.accept.NativeWebRequest ) { HttpServletRequest org.springframework.web.accept.HttpServletRequest = org.springframework.web.accept.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; if ( org.springframework.web.accept.HttpServletRequest == null ) { org.springframework.web.accept.Log . warn ( STRING ) ; return null ; } java.lang.String java.lang.String = this . org.springframework.web.accept.UrlPathHelper . getLookupPathForRequest ( org.springframework.web.accept.HttpServletRequest ) ; java.lang.String java.lang.String = UriUtils . extractFileExtension ( java.lang.String ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String . java.lang.String ( java.util.Locale . java.util.Locale ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.accept.MediaType org.springframework.web.accept.MediaType ( NativeWebRequest org.springframework.web.accept.NativeWebRequest , java.lang.String java.lang.String )			throws org.springframework.web.accept.HttpMediaTypeNotAcceptableException { if ( ! this . boolean ) { java.util.Optional<org.springframework.web.accept.MediaType> < MediaType > java.util.Optional<org.springframework.web.accept.MediaType> = MediaTypeFactory . getMediaType ( STRING + java.lang.String ) ; if ( java.util.Optional<org.springframework.web.accept.MediaType> . isPresent ( ) ) { return java.util.Optional<org.springframework.web.accept.MediaType> . get ( ) ; } } if ( this . boolean ) { return null ; } throw new HttpMediaTypeNotAcceptableException ( getAllMediaTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.accept.MediaType org.springframework.web.accept.MediaType ( Resource org.springframework.web.accept.Resource ) { Assert . notNull ( org.springframework.web.accept.Resource , STRING ) ; MediaType org.springframework.web.accept.MediaType = null ; java.lang.String java.lang.String = org.springframework.web.accept.Resource . getFilename ( ) ; java.lang.String java.lang.String = StringUtils . getFilenameExtension ( java.lang.String ) ; if ( java.lang.String != null ) { org.springframework.web.accept.MediaType = lookupMediaType ( java.lang.String ) ; } if ( org.springframework.web.accept.MediaType == null ) { org.springframework.web.accept.MediaType = MediaTypeFactory . getMediaType ( java.lang.String ) . orElse ( null ) ; } return org.springframework.web.accept.MediaType ; }  <METHOD_END>
