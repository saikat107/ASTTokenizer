<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . addDefaultScripts ( ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . addDefaultScripts ( ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = CannotReadScriptException .class ) public void void ( ) { new EmbeddedDatabaseBuilder ( ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScript ( STRING ) . addScript ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScript ( STRING ) . addScript ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . setCommentPrefix ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . setCommentPrefix ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . setBlockCommentStartDelimiter ( STRING ) . setBlockCommentEndDelimiter ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . addScripts ( STRING , STRING ) . setBlockCommentStartDelimiter ( STRING ) . setBlockCommentEndDelimiter ( STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . setType ( H2 ) . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . setType ( H2 ) . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . setType ( DERBY ) . ignoreFailedDrops ( true ) . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder . setType ( DERBY ) . ignoreFailedDrops ( true ) . addScripts ( STRING , STRING ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( new ClassRelativeResourceLoader ( java.lang.Class<? extends org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilderTests> ( ) ) ) . addScripts ( STRING ) . build ( ) ; try { new EmbeddedDatabaseBuilder ( new ClassRelativeResourceLoader ( java.lang.Class<? extends org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilderTests> ( ) ) ) . addScripts ( STRING ) . build ( ) ; fail ( STRING ) ; } catch ( ScriptStatementFailedException org.springframework.jdbc.datasource.embedded.ScriptStatementFailedException ) { } finally { org.springframework.jdbc.datasource.embedded.EmbeddedDatabase . shutdown ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( new ClassRelativeResourceLoader ( java.lang.Class<? extends org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilderTests> ( ) ) ) . addScripts ( STRING , STRING ) . generateUniqueName ( true ) . build ( ) ; JdbcTemplate org.springframework.jdbc.datasource.embedded.JdbcTemplate = new JdbcTemplate ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; void ( org.springframework.jdbc.datasource.embedded.JdbcTemplate , NUMBER ) ; org.springframework.jdbc.datasource.embedded.JdbcTemplate . update ( STRING ) ; void ( org.springframework.jdbc.datasource.embedded.JdbcTemplate , NUMBER ) ; EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( new ClassRelativeResourceLoader ( java.lang.Class<? extends org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilderTests> ( ) ) ) . addScripts ( STRING , STRING ) . generateUniqueName ( true ) . build ( ) ; void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabase . shutdown ( ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( JdbcTemplate org.springframework.jdbc.datasource.embedded.JdbcTemplate , int int ) { assertEquals ( int , org.springframework.jdbc.datasource.embedded.JdbcTemplate . queryForObject ( STRING , java.lang.Integer .class ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) { void ( new JdbcTemplate ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) { void ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ) ; org.springframework.jdbc.datasource.embedded.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
