<METHOD_START> @ Before public void void ( ) { org.springframework.statemachine.AnnotationConfigApplicationContext = org.springframework.statemachine.AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.TaskExecutor org.springframework.statemachine.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TaskScheduler org.springframework.statemachine.TaskScheduler ( ) { return new ConcurrentTaskScheduler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.TaskExecutor org.springframework.statemachine.TaskExecutor ( ) { ThreadPoolTaskExecutor org.springframework.statemachine.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.statemachine.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; return org.springframework.statemachine.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TaskScheduler org.springframework.statemachine.TaskScheduler ( ) { return new ConcurrentTaskScheduler ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( long long ) { super(); this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; long = java.lang.System . long ( ) ; if ( long > NUMBER ) { try { java.lang.Thread . void ( long ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; java.util.concurrent.CountDownLatch . void ( ) ; } } super. void ( org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; return boolean ; }  <METHOD_END>
<METHOD_START> public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) { if ( java.lang.String != null ) { org.springframework.statemachine.Log . info ( this ) ; } java.util.List<org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents>> . add ( org.springframework.statemachine.StateContext<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> , State < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < org.springframework.statemachine.AbstractStateMachineTests.TestStates , org.springframework.statemachine.AbstractStateMachineTests.TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.AbstractStateMachineTests.TestStates,org.springframework.statemachine.AbstractStateMachineTests.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
