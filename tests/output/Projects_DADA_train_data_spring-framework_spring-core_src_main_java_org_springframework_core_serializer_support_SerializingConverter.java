<METHOD_START> public void ( ) { this . org.springframework.core.serializer.support.Serializer<java.lang.Object> = new DefaultSerializer ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Serializer < java.lang.Object > org.springframework.core.serializer.support.Serializer<java.lang.Object> ) { Assert . notNull ( org.springframework.core.serializer.support.Serializer<java.lang.Object> , STRING ) ; this . org.springframework.core.serializer.support.Serializer<java.lang.Object> = org.springframework.core.serializer.support.Serializer<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.Object java.lang.Object ) { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; try { this . org.springframework.core.serializer.support.Serializer<java.lang.Object> . serialize ( java.lang.Object , java.io.ByteArrayOutputStream ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new SerializationFailedException ( STRING + this . org.springframework.core.serializer.support.Serializer<java.lang.Object> . getClass ( ) . getSimpleName ( ) , java.lang.Throwable ) ; } }  <METHOD_END>
