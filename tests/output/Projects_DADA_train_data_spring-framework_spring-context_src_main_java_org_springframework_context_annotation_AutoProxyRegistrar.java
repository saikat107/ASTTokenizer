<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { boolean boolean = false ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.context.annotation.AnnotationMetadata . getAnnotationTypes ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , java.lang.String ) ; if ( org.springframework.context.annotation.AnnotationAttributes == null ) { continue; } java.lang.Object java.lang.Object = org.springframework.context.annotation.AnnotationAttributes . get ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.context.annotation.AnnotationAttributes . get ( STRING ) ; if ( java.lang.Object != null && java.lang.Object != null && AdviceMode .class == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) && java.lang.Boolean .class == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { boolean = true ; if ( java.lang.Object == AdviceMode . PROXY ) { AopConfigUtils . registerAutoProxyCreatorIfNecessary ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( ( java.lang.Boolean ) java.lang.Object ) { AopConfigUtils . forceAutoProxyCreatorToUseClassProxying ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; return; } } } } if ( ! boolean ) { java.lang.String java.lang.String = java.lang.Class<? extends org.springframework.context.annotation.AutoProxyRegistrar> ( ) . java.lang.String ( ) ; org.springframework.context.annotation.Log . warn ( java.lang.String . java.lang.String ( STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING , java.lang.String , java.lang.String , java.lang.String ) ) ; } }  <METHOD_END>
