<METHOD_START> void ( java.io.File java.io.File , boolean boolean , boolean boolean , Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration , java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> < FileCopyDetails , ZipCompression > java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ) { this . java.io.File = java.io.File ; this . boolean = boolean ; this . boolean = boolean ; this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> = org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ; this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> = org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ; this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration = org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ; this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> = java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.gradle.tasks.bundling.WorkResult org.springframework.boot.gradle.tasks.bundling.WorkResult ( CopyActionProcessingStream org.springframework.boot.gradle.tasks.bundling.CopyActionProcessingStream ) { java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream ; try { java.io.FileOutputStream java.io.FileOutputStream = new java.io.FileOutputStream ( this . java.io.File ) ; void ( java.io.FileOutputStream ) ; java.util.zip.ZipOutputStream = new java.util.zip.ZipOutputStream ( java.io.FileOutputStream ) ; void ( java.util.zip.ZipOutputStream ) ; } catch ( java.io.IOException java.io.IOException ) { throw new GradleException ( STRING + this . java.io.File , java.io.IOException ) ; } try { org.springframework.boot.gradle.tasks.bundling.CopyActionProcessingStream . process ( new org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.ZipStreamAction ( java.util.zip.ZipOutputStream , this . java.io.File , this . boolean , this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ) ) ; } finally { try { java.util.zip.ZipOutputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { } } return ( ) true ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream ) { if ( this . boolean ) { void ( java.util.zip.ZipOutputStream ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream ) { java.util.zip.ZipEntry java.util.zip.ZipEntry ; try ( java.util.zip.ZipInputStream java.util.zip.ZipInputStream = new java.util.zip.ZipInputStream ( java.lang.Class<? extends org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction> ( ) . java.io.InputStream ( STRING ) ) ) { while ( ( java.util.zip.ZipEntry = java.util.zip.ZipInputStream . java.util.zip.ZipEntry ( ) ) != null ) { if ( java.util.zip.ZipEntry . boolean ( ) && ! java.util.zip.ZipEntry . java.lang.String ( ) . boolean ( STRING ) ) { void ( java.util.zip.ZipEntry , java.util.zip.ZipOutputStream ) ; } if ( java.util.zip.ZipEntry . java.lang.String ( ) . boolean ( STRING ) ) { void ( java.util.zip.ZipEntry , java.util.zip.ZipInputStream , java.util.zip.ZipOutputStream ) ; } } } catch ( java.io.IOException java.io.IOException ) { throw new GradleException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.zip.ZipEntry java.util.zip.ZipEntry , java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream ) throws java.io.IOException { if ( ! this . boolean ) { java.util.zip.ZipEntry . void ( GUtil . CONSTANT_TIME_FOR_ZIP_ENTRIES ) ; } java.util.zip.ZipOutputStream . void ( java.util.zip.ZipEntry ) ; java.util.zip.ZipOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.zip.ZipEntry java.util.zip.ZipEntry , java.util.zip.ZipInputStream java.util.zip.ZipInputStream , java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream )			throws java.io.IOException { if ( ! this . boolean ) { java.util.zip.ZipEntry . void ( GUtil . CONSTANT_TIME_FOR_ZIP_ENTRIES ) ; } java.util.zip.ZipOutputStream . void ( java.util.zip.ZipEntry ) ; byte [] byte[] = new byte [ NUMBER ] ; int int ; while ( ( int = java.util.zip.ZipInputStream . int ( byte[] ) ) > NUMBER ) { java.util.zip.ZipOutputStream . void ( byte[] , NUMBER , int ) ; } java.util.zip.ZipOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.FileOutputStream java.io.FileOutputStream ) { try { if ( this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . isIncluded ( ) ) { java.io.FileOutputStream . void ( new DefaultLaunchScript ( this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . getScript ( ) , this . org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration . getProperties ( ) ) . toByteArray ( ) ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new GradleException ( STRING + this . java.io.File , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void ( java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream , java.io.File java.io.File , boolean boolean , Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> , java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> < FileCopyDetails , ZipCompression > java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ) { this . java.util.zip.ZipOutputStream = java.util.zip.ZipOutputStream ; this . java.io.File = java.io.File ; this . boolean = boolean ; this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> = org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ; this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> = org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ; this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> = java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FileCopyDetailsInternal org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) { if ( this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> . isSatisfiedBy ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ) { return; } try { if ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . isDirectory ( ) ) { void ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ; } else { void ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new GradleException ( STRING + org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal + STRING + this . java.io.File , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( FileCopyDetailsInternal org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) throws java.io.IOException { java.util.zip.ZipEntry java.util.zip.ZipEntry = new java.util.zip.ZipEntry ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . getRelativePath ( ) . getPathString ( ) + '/' ) ; java.util.zip.ZipEntry . void ( long ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ) ; this . java.util.zip.ZipOutputStream . void ( java.util.zip.ZipEntry ) ; this . java.util.zip.ZipOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( FileCopyDetailsInternal org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) throws java.io.IOException { java.lang.String java.lang.String = org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . getRelativePath ( ) . getPathString ( ) ; java.util.zip.ZipEntry java.util.zip.ZipEntry = new java.util.zip.ZipEntry ( java.lang.String ) ; java.util.zip.ZipEntry . void ( long ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ) ; ZipCompression org.springframework.boot.gradle.tasks.bundling.ZipCompression = this . java.util.function.Function<org.springframework.boot.gradle.tasks.bundling.FileCopyDetails,org.springframework.boot.gradle.tasks.bundling.ZipCompression> . apply ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ; if ( org.springframework.boot.gradle.tasks.bundling.ZipCompression == ZipCompression . STORED ) { void ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal , java.util.zip.ZipEntry ) ; } this . java.util.zip.ZipOutputStream . void ( java.util.zip.ZipEntry ) ; org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . copyTo ( this . java.util.zip.ZipOutputStream ) ; this . java.util.zip.ZipOutputStream . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( FileCopyDetailsInternal org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal , java.util.zip.ZipEntry java.util.zip.ZipEntry ) throws java.io.IOException { java.util.zip.ZipEntry . void ( java.util.zip.ZipEntry . int ) ; java.util.zip.ZipEntry . void ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . getSize ( ) ) ; java.util.zip.ZipEntry . void ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . getSize ( ) ) ; org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Crc32OutputStream org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Crc32OutputStream = new org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Crc32OutputStream ( ) ; org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . copyTo ( org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Crc32OutputStream ) ; java.util.zip.ZipEntry . void ( org.springframework.boot.gradle.tasks.bundling.BootZipCopyAction.Crc32OutputStream . long ( ) ) ; if ( this . org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> . isSatisfiedBy ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal ) ) { java.util.zip.ZipEntry . void ( STRING + FileUtils . sha1Hash ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetailsInternal . getFile ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private long long ( FileCopyDetails org.springframework.boot.gradle.tasks.bundling.FileCopyDetails ) { return this . boolean ? org.springframework.boot.gradle.tasks.bundling.FileCopyDetails . getLastModified ( ) : GUtil . CONSTANT_TIME_FOR_ZIP_ENTRIES ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.io.IOException { this . java.util.zip.CRC32 . void ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] ) throws java.io.IOException { this . java.util.zip.CRC32 . void ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { this . java.util.zip.CRC32 . void ( byte[] , int , int ) ; }  <METHOD_END>
<METHOD_START> private long long ( ) { return this . java.util.zip.CRC32 . long ( ) ; }  <METHOD_END>
