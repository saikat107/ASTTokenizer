<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { void ( null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.archive.TemporaryFolder . newFile ( ) ; TestJarCreator . createTestJar ( java.io.File ) ; this . java.io.File = StringUtils . hasText ( java.lang.String ) ? this . org.springframework.boot.loader.archive.TemporaryFolder . newFolder ( java.lang.String ) : this . org.springframework.boot.loader.archive.TemporaryFolder . newFolder ( ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; java.util.Enumeration<java.util.jar.JarEntry> < java.util.jar.JarEntry > java.util.Enumeration<java.util.jar.JarEntry> = java.util.jar.JarFile . java.util.Enumeration<java.util.jar.JarEntry> ( ) ; while ( java.util.Enumeration<java.util.jar.JarEntry> . boolean ( ) ) { java.util.jar.JarEntry java.util.jar.JarEntry = java.util.Enumeration<java.util.jar.JarEntry> . java.util.jar.JarEntry ( ) ; java.io.File java.io.File = new java.io.File ( this . java.io.File . java.lang.String ( ) + java.io.File . java.lang.String + java.util.jar.JarEntry . java.lang.String ( ) ) ; java.io.File . java.io.File ( ) . boolean ( ) ; if ( java.util.jar.JarEntry . boolean ( ) ) { java.io.File . boolean ( ) ; } else { void ( java.util.jar.JarFile . java.io.InputStream ( java.util.jar.JarEntry ) , new java.io.FileOutputStream ( java.io.File ) ) ; } } this . org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( this . java.io.File ) ; java.util.jar.JarFile . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { byte [] byte[] = new byte [ NUMBER ] ; int int = java.io.InputStream . int ( byte[] ) ; while ( int != - NUMBER ) { java.io.OutputStream . void ( byte[] , NUMBER , int ) ; int = java.io.InputStream . int ( byte[] ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.archive.ExplodedArchive . getManifest ( ) . getMainAttributes ( ) . getValue ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> = java.util.Map<java.lang.String,Archive.Entry> ( this . org.springframework.boot.loader.archive.ExplodedArchive ) ; assertThat ( java.util.Map<java.lang.String,Archive.Entry> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.loader.archive.ExplodedArchive . getUrl ( ) ) . isEqualTo ( this . java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.loader.archive.ExplodedArchive . getUrl ( ) ) . isEqualTo ( this . java.io.File . java.net.URI ( ) . java.net.URL ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Entry org.springframework.boot.loader.archive.Entry = java.util.Map<java.lang.String,Archive.Entry> ( this . org.springframework.boot.loader.archive.ExplodedArchive ) . get ( STRING ) ; Archive org.springframework.boot.loader.archive.Archive = this . org.springframework.boot.loader.archive.ExplodedArchive . getNestedArchive ( org.springframework.boot.loader.archive.Entry ) ; assertThat ( org.springframework.boot.loader.archive.Archive . getUrl ( ) . toString ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Entry org.springframework.boot.loader.archive.Entry = java.util.Map<java.lang.String,Archive.Entry> ( this . org.springframework.boot.loader.archive.ExplodedArchive ) . get ( STRING ) ; Archive org.springframework.boot.loader.archive.Archive = this . org.springframework.boot.loader.archive.ExplodedArchive . getNestedArchive ( org.springframework.boot.loader.archive.Entry ) ; java.util.Map<java.lang.String,org.springframework.boot.loader.archive.Entry> < java.lang.String , Entry > java.util.Map<java.lang.String,org.springframework.boot.loader.archive.Entry> = java.util.Map<java.lang.String,Archive.Entry> ( org.springframework.boot.loader.archive.Archive ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.loader.archive.Entry> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.loader.archive.Archive . getUrl ( ) . toString ( ) ) . isEqualTo ( STRING + this . java.io.File . java.net.URI ( ) . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExplodedArchive org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( new java.io.File ( STRING ) , false ) ; java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> = java.util.Map<java.lang.String,Archive.Entry> ( org.springframework.boot.loader.archive.ExplodedArchive ) ; assertThat ( java.util.Map<java.lang.String,Archive.Entry> . size ( ) ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExplodedArchive org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( new java.io.File ( STRING ) ) ; assertThat ( org.springframework.boot.loader.archive.ExplodedArchive . getManifest ( ) ) . isNotNull ( ) ; java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> = java.util.Map<java.lang.String,Archive.Entry> ( org.springframework.boot.loader.archive.ExplodedArchive ) ; assertThat ( java.util.Map<java.lang.String,Archive.Entry> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExplodedArchive org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( new java.io.File ( STRING ) , false ) ; assertThat ( org.springframework.boot.loader.archive.ExplodedArchive . getManifest ( ) ) . isNotNull ( ) ; java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> = java.util.Map<java.lang.String,Archive.Entry> ( org.springframework.boot.loader.archive.ExplodedArchive ) ; assertThat ( java.util.Map<java.lang.String,Archive.Entry> . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExplodedArchive org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( new java.io.File ( STRING ) ) ; assertThat ( org.springframework.boot.loader.archive.ExplodedArchive . getManifest ( ) ) . isNotNull ( ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { org.springframework.boot.loader.archive.ExplodedArchive . getUrl ( ) } ) ; assertThat ( java.net.URLClassLoader . java.io.InputStream ( STRING ) ) . isNotNull ( ) ; java.net.URLClassLoader . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExplodedArchive org.springframework.boot.loader.archive.ExplodedArchive = new ExplodedArchive ( new java.io.File ( STRING ) , false ) ; assertThat ( org.springframework.boot.loader.archive.ExplodedArchive . getManifest ( ) ) . isNotNull ( ) ; java.net.URLClassLoader java.net.URLClassLoader = new java.net.URLClassLoader ( new java.net.URL [] { org.springframework.boot.loader.archive.ExplodedArchive . getUrl ( ) } ) ; assertThat ( java.net.URLClassLoader . java.io.InputStream ( STRING ) ) . isNotNull ( ) ; java.net.URLClassLoader . void ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> ( Archive org.springframework.boot.loader.archive.Archive ) { java.util.Map<java.lang.String,Archive.Entry> < java.lang.String , Archive . Archive > java.util.Map<java.lang.String,Archive.Entry> = new java.util.HashMap<java.lang.String,Archive.Entry> <> ( ) ; for ( Archive . Archive Archive.Entry : org.springframework.boot.loader.archive.Archive ) { java.util.Map<java.lang.String,Archive.Entry> . put ( Archive.Entry . getName ( ) , Archive.Entry ) ; } return java.util.Map<java.lang.String,Archive.Entry> ; }  <METHOD_END>
