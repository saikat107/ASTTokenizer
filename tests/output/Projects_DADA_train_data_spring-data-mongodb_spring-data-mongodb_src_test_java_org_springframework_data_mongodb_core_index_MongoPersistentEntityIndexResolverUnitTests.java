<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexOnLevelZero .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexOnLevelOne .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexOnLevelTwo .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexOnLevelOneWithExplicitlyNamedField .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexOnLevelZero .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.WithOptionsOnIndexedProperty .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , true ) . append ( STRING , true ) . append ( STRING , true ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.WithDbRef .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getCollection ( ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.WrapperOfWithDbRef .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getCollection ( ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexOnMetaAnnotatedField .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getCollection ( ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexedDocumentWithComposedAnnotations .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexKeys ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexOptions ( ) , isBsonObject ( ) . containing ( STRING , true ) . containing ( STRING , true ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.IndexResolutionTests.IndexedDocumentWithComposedAnnotations .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexKeys ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexOptions ( ) , isBsonObject ( ) . containing ( STRING , true ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.GeoSpatialIndexResolutionTests.GeoSpatialIndexOnLevelZero .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.GeoSpatialIndexResolutionTests.GeoSpatialIndexOnLevelOne .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.GeoSpatialIndexResolutionTests.GeoSpatialIndexOnLevelTwo .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.GeoSpatialIndexResolutionTests.WithOptionsOnGeoSpatialIndexProperty .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.GeoSpatialIndexResolutionTests.GeoSpatialIndexedDocumentWithComposedAnnotation .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexKeys ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.CompoundIndexOnLevelZero .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( new java.lang.String [] { STRING , STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.CompoundIndexOnLevelZero .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , true ) . append ( STRING , true ) . append ( STRING , true ) ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) . append ( STRING , - NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.IndexDefinedOnSuperClass .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , STRING ) . append ( STRING , true ) . append ( STRING , true ) . append ( STRING , true ) ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) . append ( STRING , - NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.ComountIndexWithAutogeneratedName .class ) ; IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , true ) . append ( STRING , true ) . append ( STRING , true ) ) ) ; assertThat ( org.springframework.data.mongodb.core.index.IndexDefinition . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) . append ( STRING , - NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.CompoundIndexOnLevelOne .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( new java.lang.String [] { STRING , STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.CompoundIndexOnLevelOneWithEmptyIndexDefinition .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( new java.lang.String [] { STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.SingleCompoundIndex .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; void ( new java.lang.String [] { STRING , STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.CompoundIndexResolutionTests.CompoundIndexDocumentWithComposedAnnotation .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexKeys ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , - NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , true ) . containing ( STRING , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexOnSinglePropertyInRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . size ( ) , equalTo ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexOnMutiplePropertiesInRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . size ( ) , equalTo ( NUMBER ) ) ; void ( new java.lang.String [] { STRING , STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexOnNestedRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . size ( ) , equalTo ( NUMBER ) ) ; void ( new java.lang.String [] { STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexOnNestedWithWeightRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . size ( ) , equalTo ( NUMBER ) ) ; void ( new java.lang.String [] { STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexOnNestedWithMostSpecificValueRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . size ( ) , equalTo ( NUMBER ) ) ; void ( new java.lang.String [] { STRING , STRING } , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) , STRING ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , is ( ( java.lang.Object ) NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithDefaultLanguage .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithLanguageOverride .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithLanguageOverrideOnNestedElement .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithNoTextIndexPropertyButReservedFieldLanguage .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithNoTextIndexPropertyButReservedFieldLanguageAnnotated .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , is ( empty ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.DocumentWithOverlappingLanguageProps .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , is ( ( java.lang.Object ) STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.TextIndexedResolutionTests.TextIndexedDocumentWithComposedAnnotation .class ) ; org . org.bson . org.bson org.bson.Document = DocumentTestUtils . getAsDocument ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) , STRING ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.MixedIndexRoot .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) , instanceOf ( Index .class ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) , instanceOf ( GeospatialIndex .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.Inner .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexDefinition ( ) . getIndexKeys ( ) , equalTo ( new org . org.bson . org.bson ( ) . append ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.Outer .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.CycleStartingInBetween .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.CycleLevelZero .class ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.CycleOnLevelOne .class ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.NoCycleButIdenticallyNamedProperties .class ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SimilarityHolingBean .class ) ; void ( STRING , STRING , java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.MultipleObjectsOfSameType .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , empty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { MongoPersistentEntity org.springframework.data.mongodb.core.index.MongoPersistentEntity = new BasicMongoPersistentEntity < java.lang.Object > ( ClassTypeInformation . from ( java.lang.Object .class ) ) ; MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty = mock ( MongoPersistentProperty .class ) ; when ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getOwner ( ) ) . thenReturn ( org.springframework.data.mongodb.core.index.MongoPersistentEntity ) ; when ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getActualType ( ) ) . thenThrow ( new MongoPersistentEntityIndexResolver . MongoPersistentEntityIndexResolver ( STRING , java.lang.Object .class , STRING ) ) ; MongoPersistentEntity < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType > org.springframework.data.mongodb.core.index.MongoPersistentEntity<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType> = new BasicMongoPersistentEntity < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType > ( ClassTypeInformation . from ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType .class ) ) ; new MongoPersistentEntityIndexResolver ( org.springframework.data.mongodb.core.index.MongoMappingContext ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType .class ) ) . resolveIndexForEntity ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.SelfCyclingViaCollectionType> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.DocumentWithNestedDocumentHavingNamedCompoundIndex .class ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.DocumentWithNestedTypeHavingNamedCompoundIndex .class ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.DocumentWithNestedDocumentHavingNamedIndex .class ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.DocumentWithNestedTypeHavingNamedIndex .class ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.DocumentWithNamedIndex .class ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.MultiplePropertiesOfSameTypeWithMatchingStartLetters .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.MultiplePropertiesOfSameTypeWithMatchingStartLettersOnNestedProperty .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.OuterDocumentReferingToIndexedPropertyViaDifferentNonCyclingPaths .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> = java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolverUnitTests.MixedIndexResolutionTests.EntityWithGenericTypeWrapperAsElement .class ) ; assertThat ( java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> , hasSize ( NUMBER ) ) ; assertThat ( ( java.lang.String ) java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> . get ( NUMBER ) . getIndexOptions ( ) . get ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> < IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.IndexDefinitionHolder> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext = org.springframework.data.mongodb.core.index.MongoMappingContext ( java.lang.Class<> ) ; MongoPersistentEntityIndexResolver org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver = new MongoPersistentEntityIndexResolver ( org.springframework.data.mongodb.core.index.MongoMappingContext ) ; return org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver . resolveIndexForEntity ( org.springframework.data.mongodb.core.index.MongoMappingContext . getRequiredPersistentEntity ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.index.MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext ( java.lang.Class<?> < ? > java.lang.Class<?> ) { MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext = new MongoMappingContext ( ) ; org.springframework.data.mongodb.core.index.MongoMappingContext . setInitialEntitySet ( java.util.Collections . java.util.Set<java.lang.Class<>> ( java.lang.Class<> ) ) ; org.springframework.data.mongodb.core.index.MongoMappingContext . initialize ( ) ; return org.springframework.data.mongodb.core.index.MongoMappingContext ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) { void ( new java.lang.String [] { java.lang.String } , java.lang.String , org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String , IndexDefinitionHolder org.springframework.data.mongodb.core.index.IndexDefinitionHolder ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getIndexDefinition ( ) . getIndexKeys ( ) . containsKey ( java.lang.String ) , equalTo ( true ) ) ; } assertThat ( org.springframework.data.mongodb.core.index.IndexDefinitionHolder . getCollection ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
