<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.PathResourceResolver . resolveResource ( null , java.lang.String , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ; assertEquals ( org.springframework.web.servlet.resource.Resource . createRelative ( java.lang.String ) , org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING ) ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.PathResourceResolver . resolveResource ( null , java.lang.String , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ; assertNotNull ( org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; org.springframework.web.servlet.resource.Resource = new UrlResource ( java.lang.Class<? extends org.springframework.web.servlet.resource.PathResourceResolverTests> ( ) . java.net.URL ( STRING ) ) ; java.lang.String java.lang.String = new UrlResource ( java.lang.Class<? extends org.springframework.web.servlet.resource.PathResourceResolverTests> ( ) . java.net.URL ( STRING ) ) . getURL ( ) . getPath ( ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; void ( org.springframework.web.servlet.resource.Resource , STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.web.servlet.resource.Resource , java.lang.String java.lang.String ) throws java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = this . org.springframework.web.servlet.resource.PathResourceResolver . resolveResource ( null , java.lang.String , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ; if ( ! org.springframework.web.servlet.resource.Resource . createRelative ( java.lang.String ) . exists ( ) && ! java.lang.String . boolean ( STRING ) ) { fail ( java.lang.String + STRING ) ; } assertNull ( org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.web.servlet.resource.PathResourceResolver . setAllowedLocations ( new ClassPathResource ( STRING , PathResourceResolver .class ) , new ClassPathResource ( STRING , PathResourceResolver .class ) ) ; Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.resource.PathResourceResolver . resolveUrlPath ( STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; MockServletContext org.springframework.web.servlet.resource.MockServletContext = new MockServletContext ( ) ; ServletContextResource org.springframework.web.servlet.resource.ServletContextResource = new ServletContextResource ( org.springframework.web.servlet.resource.MockServletContext , STRING ) ; ServletContextResource org.springframework.web.servlet.resource.ServletContextResource = new ServletContextResource ( org.springframework.web.servlet.resource.MockServletContext , STRING ) ; assertFalse ( this . org.springframework.web.servlet.resource.PathResourceResolver . checkResource ( org.springframework.web.servlet.resource.ServletContextResource , org.springframework.web.servlet.resource.Resource ) ) ; assertTrue ( this . org.springframework.web.servlet.resource.PathResourceResolver . checkResource ( org.springframework.web.servlet.resource.ServletContextResource , org.springframework.web.servlet.resource.ServletContextResource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = new UrlResource ( java.lang.Class<? extends org.springframework.web.servlet.resource.PathResourceResolverTests> ( ) . java.net.URL ( STRING ) ) . getURL ( ) . toExternalForm ( ) ; Resource org.springframework.web.servlet.resource.Resource = new UrlResource ( java.lang.String . java.lang.String ( STRING , STRING ) ) ; assertNotNull ( this . org.springframework.web.servlet.resource.PathResourceResolver . resolveResource ( null , STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; assertTrue ( this . org.springframework.web.servlet.resource.PathResourceResolver . checkResource ( org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.Resource ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.web.servlet.resource.Resource = new ClassPathResource ( STRING , PathResourceResolver .class ) ; java.lang.String java.lang.String = this . org.springframework.web.servlet.resource.PathResourceResolver . resolveUrlPathInternal ( STRING , java.util.Arrays . java.util.List ( org.springframework.web.servlet.resource.Resource ) , null ) ; assertNull ( java.lang.String ) ; }  <METHOD_END>
