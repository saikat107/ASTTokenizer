<METHOD_START> public void ( ) { this . org.springframework.http.client.reactive.HttpClient = HttpClient . create ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.function.Consumer<? super org.springframework.http.client.reactive.HttpClientOptions> < ? super HttpClientOptions > java.util.function.Consumer<? super org.springframework.http.client.reactive.HttpClientOptions> ) { this . org.springframework.http.client.reactive.HttpClient = HttpClient . create ( java.util.function.Consumer<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<org.springframework.http.client.reactive.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.reactive.Mono<org.springframework.http.client.reactive.ClientHttpResponse> ( HttpMethod org.springframework.http.client.reactive.HttpMethod , java.net.URI java.net.URI , java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.http.client.reactive.Mono<java.lang.Void>> < ? super ClientHttpRequest , Mono < java.lang.Void > > java.util.function.Function<? super org.springframework.http.client.reactive.ClientHttpRequest,org.springframework.http.client.reactive.Mono<java.lang.Void>> ) { return org.springframework.http.client.reactive.HttpClient . request ( io . netty . handler . codec . http . HttpMethod . valueOf ( org.springframework.http.client.reactive.HttpMethod . name ( ) ) , java.net.URI . java.lang.String ( ) , httpClientRequest -> requestCallback . apply ( new ReactorClientHttpRequest ( method , uri , httpClientRequest ) ) ) . map ( ReactorClientHttpResponse ::new ) ; }  <METHOD_END>
