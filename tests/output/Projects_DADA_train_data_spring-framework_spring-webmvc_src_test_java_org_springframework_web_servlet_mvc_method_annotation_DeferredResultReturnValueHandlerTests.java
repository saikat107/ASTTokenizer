<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler = new DeferredResultMethodReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; AsyncWebRequest org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest = new StandardServletAsyncWebRequest ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse ) ; WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . setAsyncWebRequest ( org.springframework.web.servlet.mvc.method.annotation.AsyncWebRequest ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAsyncSupported ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler . supportsReturnType ( on ( org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests.TestController .class ) . resolveReturnType ( DeferredResult .class , java.lang.String .class ) ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler . supportsReturnType ( on ( org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests.TestController .class ) . resolveReturnType ( ListenableFuture .class , java.lang.String .class ) ) ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler . supportsReturnType ( on ( org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests.TestController .class ) . resolveReturnType ( java.util.concurrent.CompletableFuture .class , java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertFalse ( this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler . supportsReturnType ( on ( org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests.TestController .class ) . resolveReturnType ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> = new DeferredResult <> ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> , DeferredResult .class , ( ) result . setErrorResult ( ex ) , java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SettableListenableFuture < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> = new SettableListenableFuture <> ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> , ListenableFuture .class , ( ) future . set ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SettableListenableFuture < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> = new SettableListenableFuture <> ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> , java.util.concurrent.CompletableFuture .class , ( ) future . set ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DeferredResult < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> = new DeferredResult <> ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> , DeferredResult .class , ( ) result . setResult ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SettableListenableFuture < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> = new SettableListenableFuture <> ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> , ListenableFuture .class , ( ) future . setException ( ex ) , java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SettableListenableFuture < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> = new SettableListenableFuture <> ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; void ( org.springframework.web.servlet.mvc.method.annotation.SettableListenableFuture<java.lang.String> , java.util.concurrent.CompletableFuture .class , ( ) future . setException ( ex ) , java.lang.IllegalStateException ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Runnable java.lang.Runnable , java.lang.Object java.lang.Object ) throws java.lang.Exception { ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter = on ( org.springframework.web.servlet.mvc.method.annotation.DeferredResultReturnValueHandlerTests.TestController .class ) . resolveReturnType ( java.lang.Class<> , java.lang.String .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.DeferredResultMethodReturnValueHandler . handleReturnValue ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . isAsyncStarted ( ) ) ; assertFalse ( WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . hasConcurrentResult ( ) ) ; java.lang.Runnable . void ( ) ; assertTrue ( WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . hasConcurrentResult ( ) ) ; assertEquals ( java.lang.Object , WebAsyncUtils . getAsyncManager ( this . org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) . getConcurrentResult ( ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.DeferredResult<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> org.springframework.web.servlet.mvc.method.annotation.ListenableFuture<java.lang.String> < java.lang.String > org.springframework.web.servlet.mvc.method.annotation.ListenableFuture<java.lang.String> ( ) { return null ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> ( ) { return null ; }  <METHOD_END>
