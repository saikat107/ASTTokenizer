<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) ; Document org.springframework.data.mongodb.core.query.Document = new Document ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.query.Query = new BasicQuery ( STRING ) . addCriteria ( where ( STRING ) . lt ( NUMBER ) ) ; Document org.springframework.data.mongodb.core.query.Document = new Document ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , new Document ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) , is ( org.springframework.data.mongodb.core.query.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , - NUMBER ) ) ; org.springframework.data.mongodb.core.query.BasicQuery . with ( new org . springframework . data . org.springframework.data.domain . org.springframework.data.domain ( Direction . ASC , STRING ) ) ; Document org.springframework.data.mongodb.core.query.Document = new Document ( STRING , - NUMBER ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . getSortObject ( ) , is ( org.springframework.data.mongodb.core.query.Document ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , - NUMBER ) ) ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( STRING , STRING ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , NUMBER ) ) ; EqualsVerifier . forExamples ( org.springframework.data.mongodb.core.query.BasicQuery , org.springframework.data.mongodb.core.query.BasicQuery ) . withRedefinedSuperclass ( ) . suppress ( Warning . NONFINAL_FIELDS , Warning . NULL_FIELDS , Warning . STRICT_INHERITANCE ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , - NUMBER ) ) ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , - NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery , is ( equalTo ( org.springframework.data.mongodb.core.query.BasicQuery ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery , is ( equalTo ( org.springframework.data.mongodb.core.query.BasicQuery ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) , is ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , - NUMBER ) ) ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . setSortObject ( new Document ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery , is ( not ( equalTo ( org.springframework.data.mongodb.core.query.BasicQuery ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) , is ( not ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . getMeta ( ) . setComment ( STRING ) ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . getMeta ( ) . setComment ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery , is ( not ( equalTo ( org.springframework.data.mongodb.core.query.BasicQuery ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) , is ( not ( org.springframework.data.mongodb.core.query.BasicQuery . hashCode ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . getFieldsObject ( ) , isBsonObject ( ) . containing ( STRING ) . containing ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . fields ( ) . include ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . getFieldsObject ( ) , isBsonObject ( ) . containing ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; BasicQuery org.springframework.data.mongodb.core.query.BasicQuery = new BasicQuery ( java.lang.String , java.lang.String ) ; org.springframework.data.mongodb.core.query.BasicQuery . fields ( ) . include ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.BasicQuery . getFieldsObject ( ) , isBsonObject ( ) . containing ( STRING ) . containing ( STRING ) . containing ( STRING ) ) ; }  <METHOD_END>
