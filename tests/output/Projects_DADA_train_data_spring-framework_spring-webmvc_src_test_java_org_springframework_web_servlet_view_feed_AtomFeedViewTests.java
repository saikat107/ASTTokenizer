<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.feed.AbstractAtomFeedView = new org.springframework.web.servlet.view.feed.AtomFeedViewTests.MyAtomFeedView ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.view.feed.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.web.servlet.view.feed.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.web.servlet.view.feed.AbstractAtomFeedView . render ( java.util.Map<java.lang.String,java.lang.String> , org.springframework.web.servlet.view.feed.MockHttpServletRequest , org.springframework.web.servlet.view.feed.MockHttpServletResponse ) ; assertEquals ( STRING , STRING , org.springframework.web.servlet.view.feed.MockHttpServletResponse . getContentType ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING ; assertThat ( org.springframework.web.servlet.view.feed.MockHttpServletResponse . getContentAsString ( ) , org.springframework.web.servlet.view.feed.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.view.feed.CompareMatcher org.springframework.web.servlet.view.feed.CompareMatcher ( final java.lang.String java.lang.String ) { return CompareMatcher . isSimilarTo ( java.lang.String ) . ignoreWhitespace ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map java.util.Map , Feed org.springframework.web.servlet.view.feed.Feed , HttpServletRequest org.springframework.web.servlet.view.feed.HttpServletRequest ) { org.springframework.web.servlet.view.feed.Feed . setTitle ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.web.servlet.view.feed.Entry> < Entry > java.util.List<org.springframework.web.servlet.view.feed.Entry> ( java.util.Map java.util.Map , HttpServletRequest org.springframework.web.servlet.view.feed.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.feed.HttpServletResponse )				throws java.lang.Exception { java.util.List<org.springframework.web.servlet.view.feed.Entry> < Entry > java.util.List<org.springframework.web.servlet.view.feed.Entry> = new java.util.ArrayList<org.springframework.web.servlet.view.feed.Entry> <> ( ) ; for ( java.util.Iterator java.util.Iterator = java.util.Map . java.util.Set ( ) . java.util.Iterator ( ) ; java.util.Iterator . boolean ( ) ;) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Iterator . java.lang.Object ( ) ; Entry org.springframework.web.servlet.view.feed.Entry = new Entry ( ) ; org.springframework.web.servlet.view.feed.Entry . setTitle ( java.lang.String ) ; Content org.springframework.web.servlet.view.feed.Content = new Content ( ) ; org.springframework.web.servlet.view.feed.Content . setValue ( ( java.lang.String ) java.util.Map . java.lang.Object ( java.lang.String ) ) ; org.springframework.web.servlet.view.feed.Entry . setSummary ( org.springframework.web.servlet.view.feed.Content ) ; java.util.List<org.springframework.web.servlet.view.feed.Entry> . add ( org.springframework.web.servlet.view.feed.Entry ) ; } return java.util.List<org.springframework.web.servlet.view.feed.Entry> ; }  <METHOD_END>
