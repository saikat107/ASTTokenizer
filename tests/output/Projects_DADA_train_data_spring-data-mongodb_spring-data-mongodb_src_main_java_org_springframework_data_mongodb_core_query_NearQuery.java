<METHOD_START> private void ( Point org.springframework.data.mongodb.core.query.Point , Metric org.springframework.data.mongodb.core.query.Metric ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Point , STRING ) ; this . org.springframework.data.mongodb.core.query.Point = org.springframework.data.mongodb.core.query.Point ; this . boolean = false ; if ( org.springframework.data.mongodb.core.query.Metric != null ) { org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Metric ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double , double double ) { return org.springframework.data.mongodb.core.query.NearQuery ( double , double , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double , double double , Metric org.springframework.data.mongodb.core.query.Metric ) { return org.springframework.data.mongodb.core.query.NearQuery ( new Point ( double , double ) , org.springframework.data.mongodb.core.query.Metric ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Point org.springframework.data.mongodb.core.query.Point ) { return org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Point , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Point org.springframework.data.mongodb.core.query.Point , Metric org.springframework.data.mongodb.core.query.Metric ) { return new org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Point , org.springframework.data.mongodb.core.query.Metric ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.Metric org.springframework.data.mongodb.core.query.Metric ( ) { return org.springframework.data.mongodb.core.query.Metric == null ? Metrics . NEUTRAL : org.springframework.data.mongodb.core.query.Metric ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Pageable org.springframework.data.mongodb.core.query.Pageable ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Pageable , STRING ) ; if ( org.springframework.data.mongodb.core.query.Pageable . isPaged ( ) ) { this . java.lang.Long = org.springframework.data.mongodb.core.query.Pageable . getOffset ( ) + org.springframework.data.mongodb.core.query.Pageable . getPageSize ( ) ; this . java.lang.Long = org.springframework.data.mongodb.core.query.Pageable . getOffset ( ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double ) { return org.springframework.data.mongodb.core.query.NearQuery ( new Distance ( double , org.springframework.data.mongodb.core.query.Metric ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double , Metric org.springframework.data.mongodb.core.query.Metric ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Metric , STRING ) ; return org.springframework.data.mongodb.core.query.NearQuery ( new Distance ( double , org.springframework.data.mongodb.core.query.Metric ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Distance org.springframework.data.mongodb.core.query.Distance ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Distance , STRING ) ; if ( org.springframework.data.mongodb.core.query.Distance . getMetric ( ) != Metrics . NEUTRAL ) { this . org.springframework.data.mongodb.core.query.NearQuery ( true ) ; } if ( this . org.springframework.data.mongodb.core.query.Metric == null ) { org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Distance . getMetric ( ) ) ; } this . org.springframework.data.mongodb.core.query.Distance = org.springframework.data.mongodb.core.query.Distance ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double ) { return org.springframework.data.mongodb.core.query.NearQuery ( new Distance ( double , org.springframework.data.mongodb.core.query.Metric ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double , Metric org.springframework.data.mongodb.core.query.Metric ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Metric , STRING ) ; return org.springframework.data.mongodb.core.query.NearQuery ( new Distance ( double , org.springframework.data.mongodb.core.query.Metric ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Distance org.springframework.data.mongodb.core.query.Distance ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Distance , STRING ) ; if ( org.springframework.data.mongodb.core.query.Distance . getMetric ( ) != Metrics . NEUTRAL ) { this . org.springframework.data.mongodb.core.query.NearQuery ( true ) ; } if ( this . org.springframework.data.mongodb.core.query.Metric == null ) { org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Distance . getMetric ( ) ) ; } this . org.springframework.data.mongodb.core.query.Distance = org.springframework.data.mongodb.core.query.Distance ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.Distance org.springframework.data.mongodb.core.query.Distance ( ) { return this . org.springframework.data.mongodb.core.query.Distance ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.Distance org.springframework.data.mongodb.core.query.Distance ( ) { return this . org.springframework.data.mongodb.core.query.Distance ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( double double ) { this . org.springframework.data.mongodb.core.query.Metric = new CustomMetric ( double ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( ) { return org.springframework.data.mongodb.core.query.NearQuery ( Metrics . KILOMETERS ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( ) { return org.springframework.data.mongodb.core.query.NearQuery ( Metrics . MILES ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Metric org.springframework.data.mongodb.core.query.Metric ) { return org.springframework.data.mongodb.core.query.NearQuery ( org.springframework.data.mongodb.core.query.Metric == null ? Metrics . NEUTRAL : org.springframework.data.mongodb.core.query.Metric ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Metric org.springframework.data.mongodb.core.query.Metric ) { if ( org.springframework.data.mongodb.core.query.Metric != Metrics . NEUTRAL ) { org.springframework.data.mongodb.core.query.NearQuery ( true ) ; } this . org.springframework.data.mongodb.core.query.Metric = org.springframework.data.mongodb.core.query.Metric ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.NearQuery org.springframework.data.mongodb.core.query.NearQuery ( Query org.springframework.data.mongodb.core.query.Query ) { Assert . notNull ( org.springframework.data.mongodb.core.query.Query , STRING ) ; this . org.springframework.data.mongodb.core.query.Query = org.springframework.data.mongodb.core.query.Query ; this . java.lang.Long = org.springframework.data.mongodb.core.query.Query . getSkip ( ) ; if ( org.springframework.data.mongodb.core.query.Query . getLimit ( ) != NUMBER ) { this . java.lang.Long = ( long ) org.springframework.data.mongodb.core.query.Query . getLimit ( ) ; } return this ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.query.Document org.springframework.data.mongodb.core.query.Document ( ) { Document org.springframework.data.mongodb.core.query.Document = new Document ( ) ; if ( org.springframework.data.mongodb.core.query.Query != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Query . getQueryObject ( ) ) ; } if ( org.springframework.data.mongodb.core.query.Distance != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Distance . getNormalizedValue ( ) ) ; } if ( org.springframework.data.mongodb.core.query.Distance != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Distance . getNormalizedValue ( ) ) ; } if ( org.springframework.data.mongodb.core.query.Metric != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , org.springframework.data.mongodb.core.query.Metric . getMultiplier ( ) ) ; } if ( java.lang.Long != null ) { org.springframework.data.mongodb.core.query.Document . put ( STRING , java.lang.Long ) ; } org.springframework.data.mongodb.core.query.Document . put ( STRING , java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.query.Point . getX ( ) , org.springframework.data.mongodb.core.query.Point . getY ( ) ) ) ; org.springframework.data.mongodb.core.query.Document . put ( STRING , boolean ) ; return org.springframework.data.mongodb.core.query.Document ; }  <METHOD_END>
