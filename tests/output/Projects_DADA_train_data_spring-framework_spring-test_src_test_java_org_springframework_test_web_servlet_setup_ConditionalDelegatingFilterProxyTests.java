<METHOD_START> @ Before public void void ( ) { org.springframework.test.web.servlet.setup.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.test.web.servlet.setup.MockHttpServletRequest . setContextPath ( STRING ) ; org.springframework.test.web.servlet.setup.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.test.web.servlet.setup.MockFilterChain = new MockFilterChain ( ) ; org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter = new org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FilterConfig org.springframework.test.web.servlet.setup.FilterConfig = new MockFilterConfig ( ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy = new PatternMappingFilterProxy ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter , STRING ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy . init ( org.springframework.test.web.servlet.setup.FilterConfig ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.FilterConfig , is ( org.springframework.test.web.servlet.setup.FilterConfig ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.test.web.servlet.setup.PatternMappingFilterProxy = new PatternMappingFilterProxy ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter , STRING ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy . destroy ( ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . boolean , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.test.web.servlet.setup.MockHttpServletRequest . setRequestURI ( org.springframework.test.web.servlet.setup.MockHttpServletRequest . getContextPath ( ) + java.lang.String ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy = new PatternMappingFilterProxy ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter , java.lang.String ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy . doFilter ( org.springframework.test.web.servlet.setup.MockHttpServletRequest , org.springframework.test.web.servlet.setup.MockHttpServletResponse , org.springframework.test.web.servlet.setup.MockFilterChain ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.ServletRequest , equalTo ( ( ServletRequest ) null ) ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.ServletResponse , equalTo ( ( ServletResponse ) null ) ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.FilterChain , equalTo ( ( FilterChain ) null ) ) ; assertThat ( org.springframework.test.web.servlet.setup.MockFilterChain . getRequest ( ) , equalTo ( ( ServletRequest ) org.springframework.test.web.servlet.setup.MockHttpServletRequest ) ) ; assertThat ( org.springframework.test.web.servlet.setup.MockFilterChain . getResponse ( ) , equalTo ( ( ServletResponse ) org.springframework.test.web.servlet.setup.MockHttpServletResponse ) ) ; org.springframework.test.web.servlet.setup.MockFilterChain = new MockFilterChain ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.test.web.servlet.setup.MockHttpServletRequest . setRequestURI ( org.springframework.test.web.servlet.setup.MockHttpServletRequest . getContextPath ( ) + java.lang.String ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy = new PatternMappingFilterProxy ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter , java.lang.String ) ; org.springframework.test.web.servlet.setup.PatternMappingFilterProxy . doFilter ( org.springframework.test.web.servlet.setup.MockHttpServletRequest , org.springframework.test.web.servlet.setup.MockHttpServletResponse , org.springframework.test.web.servlet.setup.MockFilterChain ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.ServletRequest , equalTo ( ( ServletRequest ) org.springframework.test.web.servlet.setup.MockHttpServletRequest ) ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.ServletResponse , equalTo ( ( ServletResponse ) org.springframework.test.web.servlet.setup.MockHttpServletResponse ) ) ; assertThat ( org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter . org.springframework.test.web.servlet.setup.FilterChain , equalTo ( ( FilterChain ) org.springframework.test.web.servlet.setup.MockFilterChain ) ) ; org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter = new org.springframework.test.web.servlet.setup.ConditionalDelegatingFilterProxyTests.MockFilter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FilterConfig org.springframework.test.web.servlet.setup.FilterConfig ) throws org.springframework.test.web.servlet.setup.ServletException { this . org.springframework.test.web.servlet.setup.FilterConfig = org.springframework.test.web.servlet.setup.FilterConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.test.web.servlet.setup.ServletRequest , ServletResponse org.springframework.test.web.servlet.setup.ServletResponse , FilterChain org.springframework.test.web.servlet.setup.FilterChain ) { this . org.springframework.test.web.servlet.setup.ServletRequest = org.springframework.test.web.servlet.setup.ServletRequest ; this . org.springframework.test.web.servlet.setup.ServletResponse = org.springframework.test.web.servlet.setup.ServletResponse ; this . org.springframework.test.web.servlet.setup.FilterChain = org.springframework.test.web.servlet.setup.FilterChain ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
