<METHOD_START> public void ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { this( org.springframework.integration.channel.interceptor.MessageChannel , null ); }  <METHOD_END>
<METHOD_START> public void ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , MessageSelector org.springframework.integration.channel.interceptor.MessageSelector ) { Assert . notNull ( org.springframework.integration.channel.interceptor.MessageChannel , STRING ) ; this . org.springframework.integration.channel.interceptor.MessageChannel = org.springframework.integration.channel.interceptor.MessageChannel ; this . org.springframework.integration.channel.interceptor.MessageSelector = org.springframework.integration.channel.interceptor.MessageSelector ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this( java.lang.String , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MessageSelector org.springframework.integration.channel.interceptor.MessageSelector ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.integration.channel.interceptor.MessageSelector = org.springframework.integration.channel.interceptor.MessageSelector ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.channel.interceptor.BeanFactory ) throws org.springframework.integration.channel.interceptor.BeansException { if ( this . org.springframework.integration.channel.interceptor.BeanFactory == null ) { this . org.springframework.integration.channel.interceptor.BeanFactory = org.springframework.integration.channel.interceptor.BeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedAttribute public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedOperation public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ManagedOperation public void void ( ) { this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { MessageChannel org.springframework.integration.channel.interceptor.MessageChannel = org.springframework.integration.channel.interceptor.MessageChannel ( ) ; if ( org.springframework.integration.channel.interceptor.MessageChannel . equals ( org.springframework.integration.channel.interceptor.MessageChannel ) ) { if ( org.springframework.integration.channel.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.integration.channel.interceptor.Log . debug ( STRING + org.springframework.integration.channel.interceptor.MessageChannel + STRING ) ; } return org.springframework.integration.channel.interceptor.Message<> ; } if ( this . boolean && ( this . org.springframework.integration.channel.interceptor.MessageSelector == null || this . org.springframework.integration.channel.interceptor.MessageSelector . accept ( org.springframework.integration.channel.interceptor.Message<> ) ) ) { boolean boolean = ( this . long >= NUMBER ) ? org.springframework.integration.channel.interceptor.MessageChannel . send ( org.springframework.integration.channel.interceptor.Message<> , this . long ) : org.springframework.integration.channel.interceptor.MessageChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; if ( ! boolean && org.springframework.integration.channel.interceptor.Log . isWarnEnabled ( ) ) { org.springframework.integration.channel.interceptor.Log . warn ( STRING + org.springframework.integration.channel.interceptor.MessageChannel + STRING ) ; } } return org.springframework.integration.channel.interceptor.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , ChannelInterceptorAware org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) { return ! org.springframework.integration.channel.interceptor.MessageChannel ( ) . equals ( org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.channel.interceptor.MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ( ) { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null ) { this . org.springframework.integration.channel.interceptor.MessageChannel = new BeanFactoryChannelResolver ( this . org.springframework.integration.channel.interceptor.BeanFactory ) . resolveDestination ( this . java.lang.String ) ; this . java.lang.String = null ; } } } return this . org.springframework.integration.channel.interceptor.MessageChannel ; }  <METHOD_END>
