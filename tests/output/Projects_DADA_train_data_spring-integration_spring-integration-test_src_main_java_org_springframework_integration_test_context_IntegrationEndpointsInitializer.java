<METHOD_START> void ( SpringIntegrationTest org.springframework.integration.test.context.SpringIntegrationTest ) { this . org.springframework.integration.test.context.SpringIntegrationTest = org.springframework.integration.test.context.SpringIntegrationTest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.test.context.BeanFactory ) throws org.springframework.integration.test.context.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.integration.test.context.BeanFactory ) ; this . org.springframework.integration.test.context.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.integration.test.context.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.Map<java.lang.String,org.springframework.integration.test.context.AbstractEndpoint> < java.lang.String , AbstractEndpoint > java.util.Map<java.lang.String,org.springframework.integration.test.context.AbstractEndpoint> = this . org.springframework.integration.test.context.ConfigurableListableBeanFactory . getBeansOfType ( AbstractEndpoint .class ) ; java.util.Map<java.lang.String,org.springframework.integration.test.context.AbstractEndpoint> . entrySet ( ) . stream ( ) . filter ( entry -> match ( entry . getKey ( ) ) ) . forEach ( entry -> entry . getValue ( ) . setAutoStartup ( false ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : this . org.springframework.integration.test.context.SpringIntegrationTest . noAutoStartup ( ) ) { if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
