<METHOD_START> void ( AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate ) { this( org.springframework.integration.amqp.channel.AmqpTemplate , DefaultAmqpHeaderMapper . outboundMapper ( ) , DefaultAmqpHeaderMapper . inboundMapper ( ) ); }  <METHOD_END>
<METHOD_START> void ( AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper , AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ) { Assert . notNull ( org.springframework.integration.amqp.channel.AmqpTemplate , STRING ) ; this . org.springframework.integration.amqp.channel.AmqpTemplate = org.springframework.integration.amqp.channel.AmqpTemplate ; if ( org.springframework.integration.amqp.channel.AmqpTemplate instanceof RabbitTemplate ) { this . org.springframework.integration.amqp.channel.RabbitTemplate = ( RabbitTemplate ) org.springframework.integration.amqp.channel.AmqpTemplate ; } else { this . org.springframework.integration.amqp.channel.RabbitTemplate = null ; } this . org.springframework.integration.amqp.channel.AmqpHeaderMapper = org.springframework.integration.amqp.channel.AmqpHeaderMapper ; this . org.springframework.integration.amqp.channel.AmqpHeaderMapper = org.springframework.integration.amqp.channel.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageDeliveryMode org.springframework.integration.amqp.channel.MessageDeliveryMode ) { this . org.springframework.integration.amqp.channel.MessageDeliveryMode = org.springframework.integration.amqp.channel.MessageDeliveryMode ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( boolean ) { Assert . isTrue ( this . org.springframework.integration.amqp.channel.RabbitTemplate != null , STRING ) ; Assert . state ( this . org.springframework.integration.amqp.channel.AmqpHeaderMapper != null && this . org.springframework.integration.amqp.channel.AmqpHeaderMapper != null , STRING ) ; } this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.AmqpHeaderMapper org.springframework.integration.amqp.channel.AmqpHeaderMapper ( ) { return this . org.springframework.integration.amqp.channel.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate ( ) { return this . org.springframework.integration.amqp.channel.AmqpTemplate ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.channel.RabbitTemplate org.springframework.integration.amqp.channel.RabbitTemplate ( ) { return this . org.springframework.integration.amqp.channel.RabbitTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.amqp.channel.Message<?> , long long ) { if ( this . boolean ) { this . org.springframework.integration.amqp.channel.AmqpTemplate . send ( java.lang.String ( ) , java.lang.String ( ) , MappingUtils . mapMessage ( org.springframework.integration.amqp.channel.Message<> , this . org.springframework.integration.amqp.channel.RabbitTemplate . getMessageConverter ( ) , this . org.springframework.integration.amqp.channel.AmqpHeaderMapper , this . org.springframework.integration.amqp.channel.MessageDeliveryMode , this . boolean ) ) ; } else { this . org.springframework.integration.amqp.channel.AmqpTemplate . convertAndSend ( java.lang.String ( ) , java.lang.String ( ) , org.springframework.integration.amqp.channel.Message<> ) ; } return true ; }  <METHOD_END>
