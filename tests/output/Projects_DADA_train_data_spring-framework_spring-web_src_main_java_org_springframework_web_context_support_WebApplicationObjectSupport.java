<METHOD_START> @ java.lang.Override public final void void ( ServletContext org.springframework.web.context.support.ServletContext ) { if ( org.springframework.web.context.support.ServletContext != this . org.springframework.web.context.support.ServletContext ) { this . org.springframework.web.context.support.ServletContext = org.springframework.web.context.support.ServletContext ; if ( org.springframework.web.context.support.ServletContext != null ) { void ( org.springframework.web.context.support.ServletContext ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ApplicationContext org.springframework.web.context.support.ApplicationContext ) { super. initApplicationContext ( org.springframework.web.context.support.ApplicationContext ) ; if ( this . org.springframework.web.context.support.ServletContext == null && org.springframework.web.context.support.ApplicationContext instanceof WebApplicationContext ) { this . org.springframework.web.context.support.ServletContext = ( ( WebApplicationContext ) org.springframework.web.context.support.ApplicationContext ) . getServletContext ( ) ; if ( this . org.springframework.web.context.support.ServletContext != null ) { void ( this . org.springframework.web.context.support.ServletContext ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ServletContext org.springframework.web.context.support.ServletContext ) {	}  <METHOD_END>
<METHOD_START> protected final org.springframework.web.context.support.WebApplicationContext org.springframework.web.context.support.WebApplicationContext ( ) java.lang.IllegalStateException { ApplicationContext org.springframework.web.context.support.ApplicationContext = getApplicationContext ( ) ; if ( org.springframework.web.context.support.ApplicationContext instanceof WebApplicationContext ) { return ( WebApplicationContext ) getApplicationContext ( ) ; } else if ( boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + this + STRING + org.springframework.web.context.support.ApplicationContext ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.context.support.ServletContext org.springframework.web.context.support.ServletContext ( ) java.lang.IllegalStateException { if ( this . org.springframework.web.context.support.ServletContext != null ) { return this . org.springframework.web.context.support.ServletContext ; } WebApplicationContext org.springframework.web.context.support.WebApplicationContext = org.springframework.web.context.support.WebApplicationContext ( ) ; if ( org.springframework.web.context.support.WebApplicationContext == null ) { return null ; } ServletContext org.springframework.web.context.support.ServletContext = org.springframework.web.context.support.WebApplicationContext . getServletContext ( ) ; if ( org.springframework.web.context.support.ServletContext == null && boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + this + STRING ) ; } return org.springframework.web.context.support.ServletContext ; }  <METHOD_END>
<METHOD_START> protected final java.io.File java.io.File ( ) java.lang.IllegalStateException { return WebUtils . getTempDir ( org.springframework.web.context.support.ServletContext ( ) ) ; }  <METHOD_END>
