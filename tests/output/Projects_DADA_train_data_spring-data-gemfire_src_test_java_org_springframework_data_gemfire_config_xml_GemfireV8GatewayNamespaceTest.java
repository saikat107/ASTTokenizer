<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.GatewaySender . getRemoteDSId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.GatewaySender . getDispatcherThreads ( ) ) ; assertTrue ( org.springframework.data.gemfire.config.xml.GatewaySender . isParallel ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.GatewaySender . isRunning ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.GatewaySender . getGatewayEventSubstitutionFilter ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender . getGatewayEventSubstitutionFilter ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender . getId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.GatewaySender . getRemoteDSId ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.config.xml.GatewaySender . getDispatcherThreads ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.GatewaySender . isParallel ( ) ) ; assertFalse ( org.springframework.data.gemfire.config.xml.GatewaySender . isRunning ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.GatewaySender . getGatewayEventSubstitutionFilter ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.GatewaySender . getGatewayEventSubstitutionFilter ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( final java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final EntryEvent < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.config.xml.EntryEvent<java.lang.Object,java.lang.Object> ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ( ) ; }  <METHOD_END>
