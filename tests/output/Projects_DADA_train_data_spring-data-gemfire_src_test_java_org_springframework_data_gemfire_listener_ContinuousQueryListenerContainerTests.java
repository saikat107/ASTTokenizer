<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer = new ContinuousQueryListenerContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; Pool org.springframework.data.gemfire.listener.Pool = mock ( Pool .class ) ; QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.listener.Pool . getName ( ) ) . thenReturn ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ; when ( org.springframework.data.gemfire.listener.Pool . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.listener.QueryService ) ; try { PoolManagerImpl . getPMI ( ) . register ( org.springframework.data.gemfire.listener.Pool ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setAutoStartup ( true ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . afterPropertiesSet ( ) ; } finally { assertThat ( PoolManagerImpl . getPMI ( ) . unregister ( org.springframework.data.gemfire.listener.Pool ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isActive ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isRunning ( ) , is ( false ) ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer ) , is ( equalTo ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer ) , is ( instanceOf ( java.util.concurrent.Executor .class ) ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . isTypeMatch ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; PoolManagerImpl org.springframework.data.gemfire.listener.PoolManagerImpl = spy ( PoolManagerImpl . getPMI ( ) ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setAutoStartup ( false ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( STRING ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setQueryService ( org.springframework.data.gemfire.listener.QueryService ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isActive ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isRunning ( ) , is ( false ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , never ( ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( STRING ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.PoolManagerImpl , never ( ) ) . find ( anyString ( ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.listener.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.listener.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.listener.ExpectedException . expectMessage ( STRING ) ; try { org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( STRING ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . afterPropertiesSet ( ) ; } finally { assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isActive ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isRunning ( ) , is ( false ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( STRING ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . resolvePoolName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( null ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . resolvePoolName ( ) , is ( equalTo ( GemfireUtils . DEFAULT_POOL_NAME ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( null ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . resolvePoolName ( ) , is ( equalTo ( GemfireUtils . DEFAULT_POOL_NAME ) ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setPoolName ( null ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . resolvePoolName ( ) , is ( equalTo ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . containsBean ( eq ( GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . eagerlyInitializePool ( STRING ) , is ( equalTo ( STRING ) ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( STRING ) , eq ( Pool .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; Pool org.springframework.data.gemfire.listener.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . getBean ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenThrow ( new NoSuchBeanDefinitionException ( STRING ) ) ; when ( org.springframework.data.gemfire.listener.Pool . getName ( ) ) . thenReturn ( STRING ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; try { PoolManagerImpl . getPMI ( ) . register ( org.springframework.data.gemfire.listener.Pool ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . eagerlyInitializePool ( STRING ) , is ( equalTo ( STRING ) ) ) ; } finally { assertThat ( PoolManagerImpl . getPMI ( ) . unregister ( org.springframework.data.gemfire.listener.Pool ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getName ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.listener.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.listener.BeanFactory . getBean ( eq ( STRING ) , eq ( Pool .class ) ) ) . thenThrow ( new NoSuchBeanDefinitionException ( STRING ) ) ; try { org.springframework.data.gemfire.listener.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.listener.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.listener.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setBeanFactory ( org.springframework.data.gemfire.listener.BeanFactory ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . eagerlyInitializePool ( STRING ) ; } finally { verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . isTypeMatch ( eq ( STRING ) , eq ( Pool .class ) ) ; verify ( org.springframework.data.gemfire.listener.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( STRING ) , eq ( Pool .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setQueryService ( org.springframework.data.gemfire.listener.QueryService ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initQueryService ( null ) , is ( sameInstance ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setQueryService ( org.springframework.data.gemfire.listener.QueryService ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initQueryService ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.listener.Pool = mock ( Pool .class ) ; QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.listener.Pool . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.listener.Pool . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.listener.QueryService ) ; try { PoolManagerImpl . getPMI ( ) . register ( org.springframework.data.gemfire.listener.Pool ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setQueryService ( null ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initQueryService ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; } finally { assertThat ( PoolManagerImpl . getPMI ( ) . unregister ( org.springframework.data.gemfire.listener.Pool ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.listener.Pool = mock ( Pool .class ) ; QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.listener.Pool . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.listener.Pool . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.listener.QueryService ) ; try { PoolManagerImpl . getPMI ( ) . register ( org.springframework.data.gemfire.listener.Pool ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setQueryService ( org.springframework.data.gemfire.listener.QueryService ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initQueryService ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; } finally { assertThat ( PoolManagerImpl . getPMI ( ) . unregister ( org.springframework.data.gemfire.listener.Pool ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.listener.Pool , times ( NUMBER ) ) . getQueryService ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.concurrent.Executor java.util.concurrent.Executor = mock ( java.util.concurrent.Executor .class ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setTaskExecutor ( java.util.concurrent.Executor ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initExecutor ( ) , is ( sameInstance ( java.util.concurrent.Executor ) ) ) ; verifyZeroInteractions ( java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initExecutor ( ) , is ( instanceOf ( java.util.concurrent.Executor .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueryService org.springframework.data.gemfire.listener.QueryService = mock ( QueryService .class ) ; RegionService org.springframework.data.gemfire.listener.RegionService = mock ( RegionService .class ) ; when ( org.springframework.data.gemfire.listener.RegionService . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.listener.QueryService ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setCache ( org.springframework.data.gemfire.listener.RegionService ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . initQueryService ( null ) , is ( equalTo ( org.springframework.data.gemfire.listener.QueryService ) ) ) ; verify ( org.springframework.data.gemfire.listener.RegionService , times ( NUMBER ) ) . getQueryService ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.listener.QueryService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( true ) ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setAutoStartup ( false ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( false ) ) ; org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . setAutoStartup ( true ) ; assertThat ( org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer . isAutoStartup ( ) , is ( true ) ) ; }  <METHOD_END>
