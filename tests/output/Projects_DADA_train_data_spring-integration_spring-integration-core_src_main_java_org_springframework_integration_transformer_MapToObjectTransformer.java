<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.String = null ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( StringUtils . hasText ( this . java.lang.String ) ) { Assert . isTrue ( this . getBeanFactory ( ) . isPrototype ( this . java.lang.String ) , STRING + this . java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) throws java.lang.Exception { java.lang.Object java.lang.Object = ( this . java.lang.Class<> != null ) ? BeanUtils . instantiateClass ( this . java.lang.Class<> ) : this . getBeanFactory ( ) . getBean ( this . java.lang.String ) ; DataBinder org.springframework.integration.transformer.DataBinder = new DataBinder ( java.lang.Object ) ; ConversionService org.springframework.integration.transformer.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.transformer.ConversionService == null ) { org.springframework.integration.transformer.ConversionService = DefaultConversionService . getSharedInstance ( ) ; } org.springframework.integration.transformer.DataBinder . setConversionService ( org.springframework.integration.transformer.ConversionService ) ; org.springframework.integration.transformer.DataBinder . bind ( new MutablePropertyValues ( java.util.Map<,> ) ) ; return java.lang.Object ; }  <METHOD_END>
