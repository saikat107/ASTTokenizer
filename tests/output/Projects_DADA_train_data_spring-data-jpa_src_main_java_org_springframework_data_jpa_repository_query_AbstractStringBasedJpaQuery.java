<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , java.lang.String java.lang.String , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider , SpelExpressionParser org.springframework.data.jpa.repository.query.SpelExpressionParser ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager ); Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.EvaluationContextProvider , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.SpelExpressionParser , STRING ) ; this . org.springframework.data.jpa.repository.query.EvaluationContextProvider = org.springframework.data.jpa.repository.query.EvaluationContextProvider ; this . org.springframework.data.jpa.repository.query.StringQuery = new ExpressionBasedStringQuery ( java.lang.String , org.springframework.data.jpa.repository.query.JpaQueryMethod . getEntityInformation ( ) , org.springframework.data.jpa.repository.query.SpelExpressionParser ) ; this . org.springframework.data.jpa.repository.query.StringQuery = new StringQuery ( org.springframework.data.jpa.repository.query.JpaQueryMethod . getCountQuery ( ) != null ? org.springframework.data.jpa.repository.query.JpaQueryMethod . getCountQuery ( ) : QueryUtils . createCountQueryFor ( this . org.springframework.data.jpa.repository.query.StringQuery . getQueryString ( ) , org.springframework.data.jpa.repository.query.JpaQueryMethod . getCountQueryProjection ( ) ) ) ; this . org.springframework.data.jpa.repository.query.SpelExpressionParser = org.springframework.data.jpa.repository.query.SpelExpressionParser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { ParameterAccessor org.springframework.data.jpa.repository.query.ParameterAccessor = new ParametersParameterAccessor ( getQueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; java.lang.String java.lang.String = QueryUtils . applySorting ( org.springframework.data.jpa.repository.query.StringQuery . getQueryString ( ) , org.springframework.data.jpa.repository.query.ParameterAccessor . getSort ( ) , org.springframework.data.jpa.repository.query.StringQuery . getAlias ( ) ) ; Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.Query ( java.lang.String ) ; return org.springframework.data.jpa.repository.query.ParameterBinder ( java.lang.Object[] ) . bindAndPrepare ( org.springframework.data.jpa.repository.query.Query ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.ParameterBinder org.springframework.data.jpa.repository.query.ParameterBinder ( java.lang.Object [] java.lang.Object[] ) { return new SpelExpressionStringQueryParameterBinder ( getQueryMethod ( ) . getParameters ( ) , java.lang.Object[] , org.springframework.data.jpa.repository.query.StringQuery , org.springframework.data.jpa.repository.query.EvaluationContextProvider , org.springframework.data.jpa.repository.query.SpelExpressionParser ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.Object [] java.lang.Object[] ) { java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.StringQuery . getQueryString ( ) ; EntityManager org.springframework.data.jpa.repository.query.EntityManager = getEntityManager ( ) ; return org.springframework.data.jpa.repository.query.ParameterBinder ( java.lang.Object[] ) . bind ( getQueryMethod ( ) . isNativeQuery ( ) ? org.springframework.data.jpa.repository.query.EntityManager . createNativeQuery ( java.lang.String ) : org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.String , java.lang.Long .class ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.StringQuery org.springframework.data.jpa.repository.query.StringQuery ( ) { return org.springframework.data.jpa.repository.query.StringQuery ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.StringQuery org.springframework.data.jpa.repository.query.StringQuery ( ) { return org.springframework.data.jpa.repository.query.StringQuery ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.String java.lang.String ) { EntityManager org.springframework.data.jpa.repository.query.EntityManager = getEntityManager ( ) ; if ( this . org.springframework.data.jpa.repository.query.StringQuery . hasConstructorExpression ( ) || this . org.springframework.data.jpa.repository.query.StringQuery . isDefaultProjection ( ) ) { return org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.String ) ; } ResultProcessor org.springframework.data.jpa.repository.query.ResultProcessor = getQueryMethod ( ) . getResultProcessor ( ) ; ReturnedType org.springframework.data.jpa.repository.query.ReturnedType = org.springframework.data.jpa.repository.query.ResultProcessor . getReturnedType ( ) ; getMetamodel ( ) . isJpaManaged ( org.springframework.data.jpa.repository.query.ReturnedType . getReturnedType ( ) ) ; return org.springframework.data.jpa.repository.query.ReturnedType . isProjecting ( ) && ! getMetamodel ( ) . isJpaManaged ( org.springframework.data.jpa.repository.query.ReturnedType . getReturnedType ( ) ) ? org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.String , Tuple .class ) : org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.String ) ; }  <METHOD_END>
