<METHOD_START> public void void ( Chronology org.springframework.format.datetime.joda.Chronology ) { this . org.springframework.format.datetime.joda.Chronology = org.springframework.format.datetime.joda.Chronology ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.Chronology org.springframework.format.datetime.joda.Chronology ( ) { return this . org.springframework.format.datetime.joda.Chronology ; }  <METHOD_END>
<METHOD_START> public void void ( DateTimeZone org.springframework.format.datetime.joda.DateTimeZone ) { this . org.springframework.format.datetime.joda.DateTimeZone = org.springframework.format.datetime.joda.DateTimeZone ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTimeZone org.springframework.format.datetime.joda.DateTimeZone ( ) { return this . org.springframework.format.datetime.joda.DateTimeZone ; }  <METHOD_END>
<METHOD_START> public org.springframework.format.datetime.joda.DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ( DateTimeFormatter org.springframework.format.datetime.joda.DateTimeFormatter ) { if ( this . org.springframework.format.datetime.joda.Chronology != null ) { org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter . withChronology ( this . org.springframework.format.datetime.joda.Chronology ) ; } if ( this . org.springframework.format.datetime.joda.DateTimeZone != null ) { org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter . withZone ( this . org.springframework.format.datetime.joda.DateTimeZone ) ; } else { LocaleContext org.springframework.format.datetime.joda.LocaleContext = LocaleContextHolder . getLocaleContext ( ) ; if ( org.springframework.format.datetime.joda.LocaleContext instanceof TimeZoneAwareLocaleContext ) { java.util.TimeZone java.util.TimeZone = ( ( TimeZoneAwareLocaleContext ) org.springframework.format.datetime.joda.LocaleContext ) . getTimeZone ( ) ; if ( java.util.TimeZone != null ) { org.springframework.format.datetime.joda.DateTimeFormatter = org.springframework.format.datetime.joda.DateTimeFormatter . withZone ( DateTimeZone . forTimeZone ( java.util.TimeZone ) ) ; } } } return org.springframework.format.datetime.joda.DateTimeFormatter ; }  <METHOD_END>
