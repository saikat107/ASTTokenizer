<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { if ( ! org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasParameterAnnotation ( PathVariable .class ) ) { return false ; } if ( java.util.Map .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ) { java.lang.String java.lang.String = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( PathVariable .class ) . value ( ) ; return StringUtils . hasText ( java.lang.String ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.method.annotation.NamedValueInfo org.springframework.web.servlet.mvc.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { PathVariable org.springframework.web.servlet.mvc.method.annotation.PathVariable = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( PathVariable .class ) ; return new org.springframework.web.servlet.mvc.method.annotation.PathVariableMethodArgumentResolver.PathVariableNamedValueInfo ( org.springframework.web.servlet.mvc.method.annotation.PathVariable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) throws java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE , RequestAttributes . SCOPE_REQUEST ) ; return ( java.util.Map<java.lang.String,java.lang.String> != null ? java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) throws org.springframework.web.servlet.mvc.method.annotation.ServletRequestBindingException { throw new MissingPathVariableException ( java.lang.String , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) { java.lang.String java.lang.String = View . PATH_VARIABLES ; int int = RequestAttributes . SCOPE_REQUEST ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getAttribute ( java.lang.String , int ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . setAttribute ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> , int ) ; } java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.Object java.lang.Object , UriComponentsBuilder org.springframework.web.servlet.mvc.method.annotation.UriComponentsBuilder , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ConversionService org.springframework.web.servlet.mvc.method.annotation.ConversionService ) { if ( java.util.Map .class . boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) . getNestedParameterType ( ) ) ) { return; } PathVariable org.springframework.web.servlet.mvc.method.annotation.PathVariable = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( PathVariable .class ) ; java.lang.String java.lang.String = ( org.springframework.web.servlet.mvc.method.annotation.PathVariable != null && ! StringUtils . isEmpty ( org.springframework.web.servlet.mvc.method.annotation.PathVariable . value ( ) ) ? org.springframework.web.servlet.mvc.method.annotation.PathVariable . value ( ) : org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterName ( ) ) ; java.lang.Object = java.lang.String ( org.springframework.web.servlet.mvc.method.annotation.ConversionService , new TypeDescriptor ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) ) , java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ConversionService org.springframework.web.servlet.mvc.method.annotation.ConversionService , TypeDescriptor org.springframework.web.servlet.mvc.method.annotation.TypeDescriptor , java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return null ; } else if ( java.lang.Object instanceof java.lang.String ) { return ( java.lang.String ) java.lang.Object ; } else if ( org.springframework.web.servlet.mvc.method.annotation.ConversionService != null ) { return ( java.lang.String ) org.springframework.web.servlet.mvc.method.annotation.ConversionService . convert ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.TypeDescriptor , org.springframework.web.servlet.mvc.method.annotation.TypeDescriptor ) ; } else { return java.lang.Object . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( PathVariable org.springframework.web.servlet.mvc.method.annotation.PathVariable ) { super( org.springframework.web.servlet.mvc.method.annotation.PathVariable . name ( ) , org.springframework.web.servlet.mvc.method.annotation.PathVariable . required ( ) , ValueConstants . DEFAULT_NONE ); }  <METHOD_END>
