<METHOD_START> @ Before public void void ( ) { org.springframework.web.reactive.function.client.ClientHttpResponse = mock ( ClientHttpResponse .class ) ; org.springframework.web.reactive.function.client.ExchangeStrategies = mock ( ExchangeStrategies .class ) ; org.springframework.web.reactive.function.client.DefaultClientResponse = new DefaultClientResponse ( org.springframework.web.reactive.function.client.ClientHttpResponse , org.springframework.web.reactive.function.client.ExchangeStrategies ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpStatus org.springframework.web.reactive.function.client.HttpStatus = HttpStatus . CONTINUE ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpStatus ) ; assertEquals ( org.springframework.web.reactive.function.client.HttpStatus , org.springframework.web.reactive.function.client.DefaultClientResponse . statusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; long long = NUMBER ; org.springframework.web.reactive.function.client.HttpHeaders . setContentLength ( long ) ; MediaType org.springframework.web.reactive.function.client.MediaType = MediaType . TEXT_PLAIN ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( org.springframework.web.reactive.function.client.MediaType ) ; java.net.InetSocketAddress java.net.InetSocketAddress = java.net.InetSocketAddress . java.net.InetSocketAddress ( STRING , NUMBER ) ; org.springframework.web.reactive.function.client.HttpHeaders . setHost ( java.net.InetSocketAddress ) ; java.util.List<org.springframework.web.reactive.function.client.HttpRange> < HttpRange > java.util.List<org.springframework.web.reactive.function.client.HttpRange> = java.util.Collections . java.util.List ( HttpRange . createByteRange ( NUMBER , NUMBER ) ) ; org.springframework.web.reactive.function.client.HttpHeaders . setRange ( java.util.List<org.springframework.web.reactive.function.client.HttpRange> ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; ClientResponse . ClientResponse ClientResponse.Headers = org.springframework.web.reactive.function.client.DefaultClientResponse . headers ( ) ; assertEquals ( java.util.OptionalLong . java.util.OptionalLong ( long ) , ClientResponse.Headers . contentLength ( ) ) ; assertEquals ( java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.client.MediaType ) , ClientResponse.Headers . contentType ( ) ) ; assertEquals ( org.springframework.web.reactive.function.client.HttpHeaders , ClientResponse.Headers . asHttpHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseCookie org.springframework.web.reactive.function.client.ResponseCookie = ResponseCookie . from ( STRING , STRING ) . build ( ) ; MultiValueMap < java.lang.String , ResponseCookie > org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> = new LinkedMultiValueMap <> ( ) ; org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> . add ( STRING , org.springframework.web.reactive.function.client.ResponseCookie ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getCookies ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> ) ; assertSame ( org.springframework.web.reactive.function.client.MultiValueMap<java.lang.String,org.springframework.web.reactive.function.client.ResponseCookie> , org.springframework.web.reactive.function.client.DefaultClientResponse . cookies ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultDataBufferFactory org.springframework.web.reactive.function.client.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.client.DefaultDataBuffer = org.springframework.web.reactive.function.client.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.client.DefaultDataBuffer ) ; HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getBody ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> ) ; java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.Collections . java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; when ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ) . thenReturn ( java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = org.springframework.web.reactive.function.client.DefaultClientResponse . body ( toMono ( java.lang.String .class ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.client.Mono<java.lang.String> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultDataBufferFactory org.springframework.web.reactive.function.client.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.client.DefaultDataBuffer = org.springframework.web.reactive.function.client.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.client.DefaultDataBuffer ) ; HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( HttpStatus . OK ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getBody ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> ) ; java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.Collections . java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; when ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ) . thenReturn ( java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = org.springframework.web.reactive.function.client.DefaultClientResponse . bodyToMono ( java.lang.String .class ) ; assertEquals ( STRING , org.springframework.web.reactive.function.client.Mono<java.lang.String> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( HttpStatus . NOT_FOUND ) ; java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.Collections . java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; when ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ) . thenReturn ( java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ) ; Mono < java.lang.String > org.springframework.web.reactive.function.client.Mono<java.lang.String> = org.springframework.web.reactive.function.client.DefaultClientResponse . bodyToMono ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Mono<java.lang.String> ) . expectError ( WebClientException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultDataBufferFactory org.springframework.web.reactive.function.client.DefaultDataBufferFactory = new DefaultDataBufferFactory ( ) ; DefaultDataBuffer org.springframework.web.reactive.function.client.DefaultDataBuffer = org.springframework.web.reactive.function.client.DefaultDataBufferFactory . wrap ( java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; Flux < DataBuffer > org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> = Flux . just ( org.springframework.web.reactive.function.client.DefaultDataBuffer ) ; HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( HttpStatus . OK ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getBody ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.Flux<org.springframework.web.reactive.function.client.DataBuffer> ) ; java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.Collections . java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; when ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ) . thenReturn ( java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ) ; Flux < java.lang.String > org.springframework.web.reactive.function.client.Flux<java.lang.String> = org.springframework.web.reactive.function.client.DefaultClientResponse . bodyToFlux ( java.lang.String .class ) ; Mono < java.util.List<java.lang.String> < java.lang.String > > org.springframework.web.reactive.function.client.Mono<java.util.List<java.lang.String>> = org.springframework.web.reactive.function.client.Flux<java.lang.String> . collectList ( ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.web.reactive.function.client.Mono<java.util.List<java.lang.String>> . block ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.web.reactive.function.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.client.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.web.reactive.function.client.HttpHeaders ) ; when ( org.springframework.web.reactive.function.client.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( HttpStatus . INTERNAL_SERVER_ERROR ) ; java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> = java.util.Collections . java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> ( new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; when ( org.springframework.web.reactive.function.client.ExchangeStrategies . messageReaders ( ) ) . thenReturn ( java.util.Set<org.springframework.web.reactive.function.client.HttpMessageReader<?>> :: stream ) ; Flux < java.lang.String > org.springframework.web.reactive.function.client.Flux<java.lang.String> = org.springframework.web.reactive.function.client.DefaultClientResponse . bodyToFlux ( java.lang.String .class ) ; StepVerifier . create ( org.springframework.web.reactive.function.client.Flux<java.lang.String> ) . expectError ( WebClientException .class ) . verify ( ) ; }  <METHOD_END>
