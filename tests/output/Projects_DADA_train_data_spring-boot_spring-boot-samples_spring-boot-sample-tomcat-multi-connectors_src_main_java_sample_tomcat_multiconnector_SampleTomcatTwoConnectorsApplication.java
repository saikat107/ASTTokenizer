<METHOD_START> @ Bean public java.lang.Integer java.lang.Integer ( ) { return SocketUtils . findAvailableTcpPort ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public sample.tomcat.multiconnector.ServletWebServerFactory sample.tomcat.multiconnector.ServletWebServerFactory ( ) { TomcatServletWebServerFactory sample.tomcat.multiconnector.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; sample.tomcat.multiconnector.TomcatServletWebServerFactory . addAdditionalTomcatConnectors ( sample.tomcat.multiconnector.Connector ( ) ) ; return sample.tomcat.multiconnector.TomcatServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> private sample.tomcat.multiconnector.Connector sample.tomcat.multiconnector.Connector ( ) { Connector sample.tomcat.multiconnector.Connector = new Connector ( STRING ) ; sample.tomcat.multiconnector.Connector . setPort ( java.lang.Integer ( ) ) ; return sample.tomcat.multiconnector.Connector ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String [] java.lang.String[] ) throws java.lang.Exception { SpringApplication . run ( sample.tomcat.multiconnector.SampleTomcatTwoConnectorsApplication .class , java.lang.String[] ) ; }  <METHOD_END>
