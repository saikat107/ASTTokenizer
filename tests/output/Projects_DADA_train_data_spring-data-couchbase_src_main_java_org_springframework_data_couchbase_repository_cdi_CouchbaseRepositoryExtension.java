<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) < T > void void ( @ Observes ProcessBean < T > org.springframework.data.couchbase.repository.cdi.ProcessBean<T> ) { Bean < T > org.springframework.data.couchbase.repository.cdi.Bean<T> = org.springframework.data.couchbase.repository.cdi.ProcessBean<T> . getBean ( ) ; for ( java.lang.reflect.Type java.lang.reflect.Type : org.springframework.data.couchbase.repository.cdi.Bean<T> . getTypes ( ) ) { if ( java.lang.reflect.Type instanceof java.lang.Class<?> < ? > && CouchbaseOperations .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ) { java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.couchbase.repository.cdi.Bean<org.springframework.data.couchbase.repository.cdi.CouchbaseOperations>> . put ( org.springframework.data.couchbase.repository.cdi.Bean<T> . getQualifiers ( ) , ( ( Bean < CouchbaseOperations > ) org.springframework.data.couchbase.repository.cdi.Bean<T> ) ) ; } } }  <METHOD_END>
<METHOD_START> void void ( @ Observes AfterBeanDiscovery org.springframework.data.couchbase.repository.cdi.AfterBeanDiscovery , BeanManager org.springframework.data.couchbase.repository.cdi.BeanManager ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> < java.lang.Class<?> < ? > , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > > java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> : getRepositoryTypes ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.lang.Class<?> ( ) ; java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> = java.util.Map.Entry<java.lang.Class<?>,java.util.Set<java.lang.annotation.Annotation>> . java.util.Set<java.lang.annotation.Annotation> ( ) ; CdiRepositoryBean < ? > org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean<?> = org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean ( java.lang.Class<> , java.util.Set<java.lang.annotation.Annotation> , org.springframework.data.couchbase.repository.cdi.BeanManager ) ; org.springframework.data.couchbase.repository.cdi.AfterBeanDiscovery . addBean ( org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean<> ) ; registerBean ( org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean<> ) ; } }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean<T> < T > org.springframework.data.couchbase.repository.cdi.CdiRepositoryBean<T> ( java.lang.Class<T> < T > java.lang.Class<T> , java.util.Set<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> , BeanManager org.springframework.data.couchbase.repository.cdi.BeanManager ) { Bean < CouchbaseOperations > org.springframework.data.couchbase.repository.cdi.Bean<org.springframework.data.couchbase.repository.cdi.CouchbaseOperations> = this . java.util.Map<java.util.Set<java.lang.annotation.Annotation>,org.springframework.data.couchbase.repository.cdi.Bean<org.springframework.data.couchbase.repository.cdi.CouchbaseOperations>> . get ( java.util.Set<java.lang.annotation.Annotation> ) ; if ( org.springframework.data.couchbase.repository.cdi.Bean<org.springframework.data.couchbase.repository.cdi.CouchbaseOperations> == null ) { throw new UnsatisfiedResolutionException ( java.lang.String . java.lang.String ( STRING , CouchbaseOperations .class . java.lang.String ( ) , java.util.Set<java.lang.annotation.Annotation> ) ) ; } return new CouchbaseRepositoryBean < T > ( org.springframework.data.couchbase.repository.cdi.Bean<org.springframework.data.couchbase.repository.cdi.CouchbaseOperations> , java.util.Set<java.lang.annotation.Annotation> , java.lang.Class<T> , org.springframework.data.couchbase.repository.cdi.BeanManager , getCustomImplementationDetector ( ) ) ; }  <METHOD_END>
