<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.TransportType> < TransportType > java.util.List<org.springframework.web.socket.sockjs.client.TransportType> ( ) { return ( boolean ( ) ? java.util.Collections . java.util.List ( TransportType . XHR ) : java.util.Arrays . java.util.List ( TransportType . XHR_STREAMING , TransportType . XHR ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler ) { SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> = new SettableListenableFuture <> ( ) ; XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession = new XhrClientSockJsSession ( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler , this , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) ; org.springframework.web.socket.sockjs.client.TransportRequest . addTimeoutTask ( org.springframework.web.socket.sockjs.client.XhrClientSockJsSession . getTimeoutTask ( ) ) ; java.net.URI java.net.URI = org.springframework.web.socket.sockjs.client.TransportRequest . getTransportUrl ( ) ; if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + ( boolean ( ) ? STRING : STRING ) + STRING + java.net.URI ) ; } HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.socket.sockjs.client.HttpHeaders . putAll ( org.springframework.web.socket.sockjs.client.TransportRequest . getHandshakeHeaders ( ) ) ; void ( org.springframework.web.socket.sockjs.client.TransportRequest , org.springframework.web.socket.sockjs.client.WebSocketHandler , java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ) ; return org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler , java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , XhrClientSockJsSession org.springframework.web.socket.sockjs.client.XhrClientSockJsSession , SettableListenableFuture < WebSocketSession > org.springframework.web.socket.sockjs.client.SettableListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { if ( org.springframework.web.socket.sockjs.client.Log . isDebugEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . debug ( STRING + java.net.URI ) ; } HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders = new HttpHeaders ( ) ; if ( org.springframework.web.socket.sockjs.client.HttpHeaders != null ) { org.springframework.web.socket.sockjs.client.HttpHeaders . putAll ( org.springframework.web.socket.sockjs.client.HttpHeaders ) ; } ResponseEntity < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders ) ; if ( org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> . getStatusCode ( ) != HttpStatus . OK ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + java.net.URI + STRING + org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ) ; } throw new HttpServerErrorException ( org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; } if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + java.net.URI + STRING + org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ) ; } return org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> . getBody ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) { if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + java.net.URI ) ; } ResponseEntity < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> = org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI , org.springframework.web.socket.sockjs.client.HttpHeaders , org.springframework.web.socket.sockjs.client.TextMessage ) ; if ( org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> . getStatusCode ( ) != HttpStatus . NO_CONTENT ) { if ( org.springframework.web.socket.sockjs.client.Log . isErrorEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . error ( STRING + java.net.URI + STRING + org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ) ; } throw new HttpServerErrorException ( org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> . getStatusCode ( ) ) ; } if ( org.springframework.web.socket.sockjs.client.Log . isTraceEnabled ( ) ) { org.springframework.web.socket.sockjs.client.Log . trace ( STRING + java.net.URI + STRING + org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> < java.lang.String > org.springframework.web.socket.sockjs.client.ResponseEntity<java.lang.String> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.web.socket.sockjs.client.AbstractXhrTransport> ( ) . java.lang.String ( ) ; }  <METHOD_END>
