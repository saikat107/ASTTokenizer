<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.domain.ExampleMatcher . getDefaultStringMatcher ( ) ) . isEqualTo ( StringMatcher . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.domain.ExampleMatcher . isIgnoreCaseEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.domain.ExampleMatcher . getNullHandler ( ) ) . isEqualTo ( NullHandler . IGNORE ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) . add ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnoreCase ( ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . isIgnoreCaseEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnoreCase ( true ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . isIgnoreCaseEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIncludeNullValues ( ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getNullHandler ( ) ) . isEqualTo ( NullHandler . INCLUDE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnoreNullValues ( ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getNullHandler ( ) ) . isEqualTo ( NullHandler . IGNORE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withNullHandler ( NullHandler . INCLUDE ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getNullHandler ( ) ) . isEqualTo ( NullHandler . INCLUDE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . contains ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . contains ( STRING , STRING ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) ; ExampleMatcher org.springframework.data.domain.ExampleMatcher = org.springframework.data.domain.ExampleMatcher . withIgnoreCase ( ) ; assertThat ( org.springframework.data.domain.ExampleMatcher ) . isNotEqualTo ( sameInstance ( org.springframework.data.domain.ExampleMatcher ) ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . isIgnoreCaseEnabled ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . getIgnoredPaths ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . isIgnoreCaseEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( matching ( ) . isAllMatching ( ) ) . isTrue ( ) ; assertThat ( matching ( ) . isAnyMatching ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( matchingAll ( ) . isAllMatching ( ) ) . isTrue ( ) ; assertThat ( matchingAll ( ) . isAnyMatching ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( matchingAny ( ) . isAnyMatching ( ) ) . isTrue ( ) ; assertThat ( matchingAny ( ) . isAllMatching ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) . withNullHandler ( NullHandler . IGNORE ) . withIgnoreCase ( STRING ) . withMatcher ( STRING , GenericPropertyMatchers . contains ( ) . caseSensitive ( ) ) . withMatcher ( STRING , matcher -> matcher . endsWith ( ) ) ; ExampleMatcher org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) . withNullHandler ( NullHandler . IGNORE ) . withIgnoreCase ( STRING ) . withMatcher ( STRING , GenericPropertyMatchers . contains ( ) . caseSensitive ( ) ) . withMatcher ( STRING , matcher -> matcher . endsWith ( ) ) ; ExampleMatcher org.springframework.data.domain.ExampleMatcher = matching ( ) . withIgnorePaths ( STRING , STRING , STRING ) . withNullHandler ( NullHandler . IGNORE ) . withMatcher ( STRING , GenericPropertyMatchers . contains ( ) . ignoreCase ( ) ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . hashCode ( ) ) . isEqualTo ( org.springframework.data.domain.ExampleMatcher . hashCode ( ) ) ; assertThat ( org.springframework.data.domain.ExampleMatcher . hashCode ( ) ) . isNotEqualTo ( org.springframework.data.domain.ExampleMatcher . hashCode ( ) ) ; assertThat ( org.springframework.data.domain.ExampleMatcher ) . isEqualTo ( org.springframework.data.domain.ExampleMatcher ) ; assertThat ( org.springframework.data.domain.ExampleMatcher ) . isNotEqualTo ( org.springframework.data.domain.ExampleMatcher ) ; }  <METHOD_END>
