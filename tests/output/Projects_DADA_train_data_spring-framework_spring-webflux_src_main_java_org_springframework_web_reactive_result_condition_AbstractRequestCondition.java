<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object != null && java.lang.Class<? extends org.springframework.web.reactive.result.condition.AbstractRequestCondition> ( ) == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { org.springframework.web.reactive.result.condition.AbstractRequestCondition<?> < ? > org.springframework.web.reactive.result.condition.AbstractRequestCondition<?> = ( org.springframework.web.reactive.result.condition.AbstractRequestCondition<?> < ? > ) java.lang.Object ; return java.util.Collection<?> ( ) . boolean ( org.springframework.web.reactive.result.condition.AbstractRequestCondition<> . java.util.Collection<?> ( ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.Collection<?> ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Collection<?> ( ) . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ;) { java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object . java.lang.String ( ) ) ; if ( java.util.Iterator<> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( ) ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Collection<?> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Collection<?> < ? > java.util.Collection<?> ( )  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( )  <METHOD_END>
