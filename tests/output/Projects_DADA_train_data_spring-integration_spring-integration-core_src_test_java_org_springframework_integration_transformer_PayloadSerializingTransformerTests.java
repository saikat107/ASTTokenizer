<METHOD_START> @ Test public void void ( ) java.lang.Exception { PayloadSerializingTransformer org.springframework.integration.transformer.PayloadSerializingTransformer = new PayloadSerializingTransformer ( ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadSerializingTransformer . transform ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof byte [] ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( ( byte [] ) java.lang.Object ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( java.io.ByteArrayInputStream ) ; java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PayloadSerializingTransformer org.springframework.integration.transformer.PayloadSerializingTransformer = new PayloadSerializingTransformer ( ) ; org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean = new org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean ( STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadSerializingTransformer . transform ( new GenericMessage < org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean > ( org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof byte [] ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( ( byte [] ) java.lang.Object ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( java.io.ByteArrayInputStream ) ; java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; assertEquals ( org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean . java.lang.String , ( ( org.springframework.integration.transformer.PayloadSerializingTransformerTests.TestBean ) java.lang.Object ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTransformationException .class ) public void void ( ) { PayloadSerializingTransformer org.springframework.integration.transformer.PayloadSerializingTransformer = new PayloadSerializingTransformer ( ) ; org.springframework.integration.transformer.PayloadSerializingTransformer . transform ( new GenericMessage < java.lang.Object > ( new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PayloadSerializingTransformer org.springframework.integration.transformer.PayloadSerializingTransformer = new PayloadSerializingTransformer ( ) ; org.springframework.integration.transformer.PayloadSerializingTransformer . setConverter ( source -> STRING . getBytes ( ) ) ; Message < ? > org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.PayloadSerializingTransformer . transform ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.transformer.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
