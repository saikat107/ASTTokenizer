<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( new NoUniqueBeanDefinitionException ( java.lang.String .class , NUMBER , STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class , NUMBER , java.lang.String .class ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . doesNotContain ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getAction ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING , java.lang.String .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringPropertyTypeConfiguration .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class , NUMBER , java.lang.String .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringCollectionConfiguration .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringCollectionHandler .class , NUMBER , java.lang.String .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringMapConfiguration .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringMapHandler .class , NUMBER , java.lang.String .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.IntegerPropertyTypeConfiguration .class ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ) . isNotNull ( ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.NumberHandler .class , NUMBER , java.lang.Number .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.Number .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.MissingClassOnAutoConfigurationConfiguration .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class , NUMBER , java.lang.String .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FatalBeanException org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException = org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class ) ; void ( this . org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class ) ; FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class , NUMBER , java.lang.String .class ) ; java.lang.String java.lang.String = ClassUtils . getShortName ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class . java.lang.String ( ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String . java.lang.String ( STRING , java.lang.String ) , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.SeveralAutoConfigurationTypeConfiguration .class ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringHandler .class , NUMBER , java.lang.String .class ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestPropertyAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringNameHandler .class ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringNameHandler .class . java.lang.String ( ) , STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) . contains ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getAction ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringMissingBeanNameConfiguration .class ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.StringNameHandler .class . java.lang.String ( ) , STRING ) ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING , org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzerTests.TestMissingBeanAutoConfiguration .class , STRING ) ; void ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.Class<?> < ? > java.lang.Class<?> , int int , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , int , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . startsWith ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.Class<?> < ? > java.lang.Class<?> ) { assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getAction ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String java.lang.String ) { assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getAction ( ) ) . startsWith ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String , ClassUtils . getShortName ( java.lang.Class<> ) ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis . getDescription ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( NoSuchBeanDefinitionFailureAnalyzer org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { ConditionEvaluationReport org.springframework.boot.autoconfigure.diagnostics.analyzer.ConditionEvaluationReport = ( ConditionEvaluationReport ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer ) . getPropertyValue ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList <> ( org.springframework.boot.autoconfigure.diagnostics.analyzer.ConditionEvaluationReport . getExclusions ( ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.List<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } org.springframework.boot.autoconfigure.diagnostics.analyzer.ConditionEvaluationReport . recordExclusions ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer . setBeanFactory ( org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext . getBeanFactory ( ) ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; try { org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext . refresh ( ) ; return null ; } catch ( FatalBeanException org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ) { return org.springframework.boot.autoconfigure.diagnostics.analyzer.FatalBeanException ; } finally { org.springframework.boot.autoconfigure.diagnostics.analyzer.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ( java.lang.Exception java.lang.Exception ) { FailureAnalysis org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis = this . org.springframework.boot.autoconfigure.diagnostics.analyzer.NoSuchBeanDefinitionFailureAnalyzer . analyze ( java.lang.Exception ) ; if ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis != null ) { new LoggingFailureAnalysisReporter ( ) . report ( org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ) ; } return org.springframework.boot.autoconfigure.diagnostics.analyzer.FailureAnalysis ; }  <METHOD_END>
<METHOD_START> @ ConditionalOnProperty ( STRING ) @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ConditionalOnProperty ( STRING ) @ Bean public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ ConditionalOnBean ( java.lang.Integer .class ) @ Bean ( name = STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.Number java.lang.Number ) {		}  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.boot.autoconfigure.diagnostics.analyzer.BeanFactory ) { org.springframework.boot.autoconfigure.diagnostics.analyzer.BeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) {		}  <METHOD_END>
