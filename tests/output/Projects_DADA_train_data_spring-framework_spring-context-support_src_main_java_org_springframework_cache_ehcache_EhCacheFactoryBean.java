<METHOD_START> public void ( ) { setMaxEntriesLocalHeap ( NUMBER ) ; setMaxEntriesLocalDisk ( NUMBER ) ; setTimeToLiveSeconds ( NUMBER ) ; setTimeToIdleSeconds ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( CacheManager org.springframework.cache.ehcache.CacheManager ) { this . org.springframework.cache.ehcache.CacheManager = org.springframework.cache.ehcache.CacheManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { setName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { setTimeToLiveSeconds ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { setTimeToIdleSeconds ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { setDiskSpoolBufferSizeMB ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( CacheEntryFactory org.springframework.cache.ehcache.CacheEntryFactory ) { this . org.springframework.cache.ehcache.CacheEntryFactory = org.springframework.cache.ehcache.CacheEntryFactory ; }  <METHOD_END>
<METHOD_START> public void void ( BootstrapCacheLoader org.springframework.cache.ehcache.BootstrapCacheLoader ) { this . org.springframework.cache.ehcache.BootstrapCacheLoader = org.springframework.cache.ehcache.BootstrapCacheLoader ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.cache.ehcache.CacheEventListener> < CacheEventListener > java.util.Set<org.springframework.cache.ehcache.CacheEventListener> ) { this . java.util.Set<org.springframework.cache.ehcache.CacheEventListener> = java.util.Set<org.springframework.cache.ehcache.CacheEventListener> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.cache.ehcache.CacheException { java.lang.String java.lang.String = getName ( ) ; if ( java.lang.String == null ) { java.lang.String = this . java.lang.String ; setName ( java.lang.String ) ; } if ( this . org.springframework.cache.ehcache.CacheManager == null ) { if ( org.springframework.cache.ehcache.Log . isDebugEnabled ( ) ) { org.springframework.cache.ehcache.Log . debug ( STRING + java.lang.String + STRING ) ; } this . org.springframework.cache.ehcache.CacheManager = CacheManager . getInstance ( ) ; } synchronized ( this . org.springframework.cache.ehcache.CacheManager ) { Ehcache org.springframework.cache.ehcache.Ehcache ; boolean boolean = this . org.springframework.cache.ehcache.CacheManager . cacheExists ( java.lang.String ) ; if ( boolean ) { if ( org.springframework.cache.ehcache.Log . isDebugEnabled ( ) ) { org.springframework.cache.ehcache.Log . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.cache.ehcache.Ehcache = this . org.springframework.cache.ehcache.CacheManager . getEhcache ( java.lang.String ) ; } else { if ( org.springframework.cache.ehcache.Log . isDebugEnabled ( ) ) { org.springframework.cache.ehcache.Log . debug ( STRING + java.lang.String + STRING ) ; } org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.Cache ( ) ; org.springframework.cache.ehcache.Ehcache . setBootstrapCacheLoader ( this . org.springframework.cache.ehcache.BootstrapCacheLoader ) ; } if ( this . java.util.Set<org.springframework.cache.ehcache.CacheEventListener> != null ) { for ( CacheEventListener org.springframework.cache.ehcache.CacheEventListener : this . java.util.Set<org.springframework.cache.ehcache.CacheEventListener> ) { org.springframework.cache.ehcache.Ehcache . getCacheEventNotificationService ( ) . registerListener ( org.springframework.cache.ehcache.CacheEventListener ) ; } } if ( ! boolean ) { this . org.springframework.cache.ehcache.CacheManager . addCache ( org.springframework.cache.ehcache.Ehcache ) ; } if ( this . boolean ) { org.springframework.cache.ehcache.Ehcache . setDisabled ( true ) ; } Ehcache org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.Ehcache ( org.springframework.cache.ehcache.Ehcache ) ; if ( org.springframework.cache.ehcache.Ehcache != org.springframework.cache.ehcache.Ehcache ) { this . org.springframework.cache.ehcache.CacheManager . replaceCacheWithDecoratedCache ( org.springframework.cache.ehcache.Ehcache , org.springframework.cache.ehcache.Ehcache ) ; } this . org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.Ehcache ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.ehcache.Cache org.springframework.cache.ehcache.Cache ( ) { return new Cache ( this ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.ehcache.Ehcache org.springframework.cache.ehcache.Ehcache ( Ehcache org.springframework.cache.ehcache.Ehcache ) { if ( this . org.springframework.cache.ehcache.CacheEntryFactory != null ) { if ( this . org.springframework.cache.ehcache.CacheEntryFactory instanceof UpdatingCacheEntryFactory ) { return new UpdatingSelfPopulatingCache ( org.springframework.cache.ehcache.Ehcache , ( UpdatingCacheEntryFactory ) this . org.springframework.cache.ehcache.CacheEntryFactory ) ; } else { return new SelfPopulatingCache ( org.springframework.cache.ehcache.Ehcache , this . org.springframework.cache.ehcache.CacheEntryFactory ) ; } } if ( this . boolean ) { return new BlockingCache ( org.springframework.cache.ehcache.Ehcache ) ; } return org.springframework.cache.ehcache.Ehcache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.ehcache.Ehcache org.springframework.cache.ehcache.Ehcache ( ) { return this . org.springframework.cache.ehcache.Ehcache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> < ? extends Ehcache > java.lang.Class<? extends org.springframework.cache.ehcache.Ehcache> ( ) { if ( this . org.springframework.cache.ehcache.Ehcache != null ) { return this . org.springframework.cache.ehcache.Ehcache . getClass ( ) ; } if ( this . org.springframework.cache.ehcache.CacheEntryFactory != null ) { if ( this . org.springframework.cache.ehcache.CacheEntryFactory instanceof UpdatingCacheEntryFactory ) { return UpdatingSelfPopulatingCache .class ; } else { return SelfPopulatingCache .class ; } } if ( this . boolean ) { return BlockingCache .class ; } return Cache .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
