<METHOD_START> @ Test public void void ( ) java.lang.Exception { final AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = new AbstractConnectionFactory ( NUMBER ) { @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ( ) java.lang.Exception { return null ; } } ; org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . setActive ( true ) ; java.util.concurrent.Executor java.util.concurrent.Executor = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getTaskExecutor ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executor . void ( ( ) { java.util.concurrent.CountDownLatch . void ( ) ; try { while ( true ) { org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getTaskExecutor ( ) ; java.lang.Thread . void ( NUMBER ) ; } } catch ( MessagingException org.springframework.integration.ip.tcp.connection.MessagingException ) {			} catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; StopWatch org.springframework.integration.ip.tcp.connection.StopWatch = new StopWatch ( ) ; org.springframework.integration.ip.tcp.connection.StopWatch . start ( ) ; org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . stop ( ) ; org.springframework.integration.ip.tcp.connection.StopWatch . stop ( ) ; assertTrue ( STRING + org.springframework.integration.ip.tcp.connection.StopWatch . getLastTaskTimeMillis ( ) , org.springframework.integration.ip.tcp.connection.StopWatch . getLastTaskTimeMillis ( ) < NUMBER ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ( ) java.lang.Exception { return null ; }  <METHOD_END>
