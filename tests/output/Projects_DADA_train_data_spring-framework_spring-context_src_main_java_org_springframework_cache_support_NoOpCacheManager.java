<METHOD_START> @ java.lang.Override public org.springframework.cache.support.Cache org.springframework.cache.support.Cache ( java.lang.String java.lang.String ) { Cache org.springframework.cache.support.Cache = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . get ( java.lang.String ) ; if ( org.springframework.cache.support.Cache == null ) { this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . putIfAbsent ( java.lang.String , new NoOpCache ( java.lang.String ) ) ; synchronized ( this . java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.support.Cache> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { synchronized ( this . java.util.Set<java.lang.String> ) { return java.util.Collections . java.util.Set<java.lang.String> ( this . java.util.Set<java.lang.String> ) ; } }  <METHOD_END>
