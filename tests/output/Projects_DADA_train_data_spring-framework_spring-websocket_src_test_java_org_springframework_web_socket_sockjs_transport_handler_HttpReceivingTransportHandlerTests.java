<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; void ( new XhrReceivingTransportHandler ( ) ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; void ( new JsonpReceivingTransportHandler ( ) ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; this . servletRequest . setContentType ( MediaType . APPLICATION_FORM_URLENCODED_VALUE ) ; void ( new JsonpReceivingTransportHandler ( ) ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; this . servletRequest . setContentType ( STRING ) ; void ( new JsonpReceivingTransportHandler ( ) ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; assertEquals ( STRING , this . servletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; void ( ) ; this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; new XhrReceivingTransportHandler ( ) . handleRequest ( this . request , this . response , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { StubSockJsServiceConfig org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig = new StubSockJsServiceConfig ( ) ; this . servletRequest . setContent ( STRING . byte[] ( STRING ) ) ; WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; TestHttpSockJsSession org.springframework.web.socket.sockjs.transport.handler.TestHttpSockJsSession = new TestHttpSockJsSession ( STRING , org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.TestHttpSockJsSession . delegateConnectionEstablished ( ) ; willThrow ( new java.lang.Exception ( ) ) . given ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . handleMessage ( org.springframework.web.socket.sockjs.transport.handler.TestHttpSockJsSession , new TextMessage ( STRING ) ) ; try { XhrReceivingTransportHandler org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler = new XhrReceivingTransportHandler ( ) ; org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler . initialize ( org.springframework.web.socket.sockjs.transport.handler.StubSockJsServiceConfig ) ; org.springframework.web.socket.sockjs.transport.handler.XhrReceivingTransportHandler . handleRequest ( this . request , this . response , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.TestHttpSockJsSession ) ; fail ( STRING ) ; } catch ( SockJsMessageDeliveryException org.springframework.web.socket.sockjs.transport.handler.SockJsMessageDeliveryException ) { assertNull ( org.springframework.web.socket.sockjs.transport.handler.TestHttpSockJsSession . getCloseStatus ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractHttpReceivingTransportHandler org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler ) throws java.lang.Exception { WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; AbstractSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession = new TestHttpSockJsSession ( STRING , new StubSockJsServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler . initialize ( new StubSockJsServiceConfig ( ) ) ; org.springframework.web.socket.sockjs.transport.handler.AbstractHttpReceivingTransportHandler . handleRequest ( this . request , this . response , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertEquals ( STRING , this . response . getHeaders ( ) . getContentType ( ) . toString ( ) ) ; verify ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) . handleMessage ( org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession , new TextMessage ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { resetResponse ( ) ; WebSocketHandler org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler = mock ( WebSocketHandler .class ) ; AbstractSockJsSession org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession = new TestHttpSockJsSession ( STRING , new StubSockJsServiceConfig ( ) , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , null ) ; new XhrReceivingTransportHandler ( ) . handleRequest ( this . request , this . response , org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler , org.springframework.web.socket.sockjs.transport.handler.AbstractSockJsSession ) ; assertEquals ( NUMBER , this . servletResponse . getStatus ( ) ) ; verifyNoMoreInteractions ( org.springframework.web.socket.sockjs.transport.handler.WebSocketHandler ) ; }  <METHOD_END>
