<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.state.AnnotationConfigApplicationContext org.springframework.statemachine.state.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , STRING ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SF ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.state.JoinStateTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.state.JoinStateTests.TestListener org.springframework.statemachine.state.JoinStateTests.TestListener = new org.springframework.statemachine.state.JoinStateTests.TestListener ( ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateListener ( org.springframework.statemachine.state.JoinStateTests.TestListener ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . addStateMachineInterceptor ( new StateMachineInterceptorAdapter < TestStates , TestEvents > ( ) { @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , Message < TestEvents > org.springframework.statemachine.state.Message<org.springframework.statemachine.state.TestEvents> , Transition < TestStates , TestEvents > org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { if ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getId ( ) == TestStates . S4 ) { java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> == null ) ; } super. postStateChange ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.Message<org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; } } ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.state.JoinStateTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.state.JoinStateTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.state.ObjectStateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S4 ) ) ; assertThat ( STRING , java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , Message < TestEvents > org.springframework.statemachine.state.Message<org.springframework.statemachine.state.TestEvents> , Transition < TestStates , TestEvents > org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , StateMachine < TestStates , TestEvents > org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { if ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . getId ( ) == TestStates . S4 ) { java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> == null ) ; } super. postStateChange ( org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.Message<org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , org.springframework.statemachine.state.StateMachine<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S2 ) . join ( TestStates . S3 ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 ) . state ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withJoin ( ) . source ( TestStates . S21 ) . source ( TestStates . S31 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SI ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S2 ) . join ( TestStates . S3 ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . end ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . end ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withJoin ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SI ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineStateConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . S2 ) . join ( TestStates . S3 ) . state ( TestStates . SF ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . end ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . end ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.state.StateMachineTransitionConfigurer<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withJoin ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . SF ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . guardExpression ( STRING ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . SI ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.state.State<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) { java.util.List<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . add ( org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents> ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; java.util.List<org.springframework.statemachine.state.Transition<org.springframework.statemachine.state.TestStates,org.springframework.statemachine.state.TestEvents>> . clear ( ) ; }  <METHOD_END>
