<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isTraceEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isDebugEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isInfoEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isWarnEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isErrorEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.logging.DeferredLog . isFatalEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . trace ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . trace ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . trace ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . trace ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . debug ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . debug ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . debug ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . debug ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . info ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . info ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . info ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . info ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . warn ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . warn ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . warn ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . warn ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . error ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . error ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . error ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . error ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . fatal ( this . java.lang.Object ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . fatal ( this . java.lang.Object , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . fatal ( this . java.lang.Object , this . java.lang.Throwable ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . fatal ( this . java.lang.Object , this . java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.DeferredLog . info ( STRING ) ; this . org.springframework.boot.logging.DeferredLog . fatal ( STRING ) ; Log org.springframework.boot.logging.Log = mock ( Log .class ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( this . org.springframework.boot.logging.Log ) ; this . org.springframework.boot.logging.DeferredLog . replayTo ( org.springframework.boot.logging.Log ) ; verify ( this . org.springframework.boot.logging.Log ) . info ( STRING , null ) ; verify ( this . org.springframework.boot.logging.Log ) . fatal ( STRING , null ) ; verifyNoMoreInteractions ( this . org.springframework.boot.logging.Log ) ; verifyZeroInteractions ( org.springframework.boot.logging.Log ) ; }  <METHOD_END>
