<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( DependencyDescriptor org.springframework.context.annotation.DependencyDescriptor , java.lang.String java.lang.String ) { return ( boolean ( org.springframework.context.annotation.DependencyDescriptor ) ? java.lang.Object ( org.springframework.context.annotation.DependencyDescriptor , java.lang.String ) : null ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( DependencyDescriptor org.springframework.context.annotation.DependencyDescriptor ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : org.springframework.context.annotation.DependencyDescriptor . getAnnotations ( ) ) { Lazy org.springframework.context.annotation.Lazy = AnnotationUtils . getAnnotation ( java.lang.annotation.Annotation , Lazy .class ) ; if ( org.springframework.context.annotation.Lazy != null && org.springframework.context.annotation.Lazy . value ( ) ) { return true ; } } MethodParameter org.springframework.context.annotation.MethodParameter = org.springframework.context.annotation.DependencyDescriptor . getMethodParameter ( ) ; if ( org.springframework.context.annotation.MethodParameter != null ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.context.annotation.MethodParameter . getMethod ( ) ; if ( java.lang.reflect.Method == null || void .class == java.lang.reflect.Method . java.lang.Class<?> ( ) ) { Lazy org.springframework.context.annotation.Lazy = AnnotationUtils . getAnnotation ( org.springframework.context.annotation.MethodParameter . getAnnotatedElement ( ) , Lazy .class ) ; if ( org.springframework.context.annotation.Lazy != null && org.springframework.context.annotation.Lazy . value ( ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( final DependencyDescriptor org.springframework.context.annotation.DependencyDescriptor , final java.lang.String java.lang.String ) { Assert . state ( getBeanFactory ( ) instanceof DefaultListableBeanFactory , STRING ) ; final DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = ( DefaultListableBeanFactory ) getBeanFactory ( ) ; TargetSource org.springframework.context.annotation.TargetSource = new TargetSource ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.context.annotation.DependencyDescriptor . getDependencyType ( ) ; } @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.DefaultListableBeanFactory . doResolveDependency ( org.springframework.context.annotation.DependencyDescriptor , java.lang.String , null , null ) ; if ( java.lang.Object == null ) { throw new NoSuchBeanDefinitionException ( org.springframework.context.annotation.DependencyDescriptor . getResolvableType ( ) , STRING ) ; } return java.lang.Object ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			} } ; ProxyFactory org.springframework.context.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.context.annotation.ProxyFactory . setTargetSource ( org.springframework.context.annotation.TargetSource ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.DependencyDescriptor . getDependencyType ( ) ; if ( java.lang.Class<> . boolean ( ) ) { org.springframework.context.annotation.ProxyFactory . addInterface ( java.lang.Class<> ) ; } return org.springframework.context.annotation.ProxyFactory . getProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBeanClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.context.annotation.DependencyDescriptor . getDependencyType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.DefaultListableBeanFactory . doResolveDependency ( org.springframework.context.annotation.DependencyDescriptor , java.lang.String , null , null ) ; if ( java.lang.Object == null ) { throw new NoSuchBeanDefinitionException ( org.springframework.context.annotation.DependencyDescriptor . getResolvableType ( ) , STRING ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) {			}  <METHOD_END>
