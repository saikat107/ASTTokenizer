<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext != null ) { this . org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null ) ; assertThat ( this . org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext . getBeansOfType ( javax.sql.DataSource .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfigurationTests.ExistingDataSourceConfiguration .class ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext . getBean ( javax.sql.DataSource .class ) ; JdbcTemplate org.springframework.boot.test.autoconfigure.jdbc.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; org.springframework.boot.test.autoconfigure.jdbc.JdbcTemplate . execute ( STRING ) ; ConfigurableApplicationContext org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext ( org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfigurationTests.ExistingDataSourceConfiguration .class ) ; try { javax.sql.DataSource javax.sql.DataSource = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext . getBean ( javax.sql.DataSource .class ) ; JdbcTemplate org.springframework.boot.test.autoconfigure.jdbc.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; org.springframework.boot.test.autoconfigure.jdbc.JdbcTemplate . execute ( STRING ) ; } finally { org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext = org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext ( java.lang.Class<> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext org.springframework.boot.test.autoconfigure.jdbc.ConfigurableApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; if ( java.lang.Class<> != null ) { org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; } org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( TestDatabaseAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.test.autoconfigure.jdbc.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { EmbeddedDatabaseBuilder org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseBuilder = new EmbeddedDatabaseBuilder ( ) . generateUniqueName ( true ) . setType ( EmbeddedDatabaseType . HSQL ) ; return org.springframework.boot.test.autoconfigure.jdbc.EmbeddedDatabaseBuilder . build ( ) ; }  <METHOD_END>
