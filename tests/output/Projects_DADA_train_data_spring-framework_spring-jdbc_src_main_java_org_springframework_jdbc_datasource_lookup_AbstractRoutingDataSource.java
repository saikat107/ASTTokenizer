<METHOD_START> public void void ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ) { this . java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( DataSourceLookup org.springframework.jdbc.datasource.lookup.DataSourceLookup ) { this . org.springframework.jdbc.datasource.lookup.DataSourceLookup = ( org.springframework.jdbc.datasource.lookup.DataSourceLookup != null ? org.springframework.jdbc.datasource.lookup.DataSourceLookup : new JndiDataSourceLookup ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.Map<java.lang.Object,java.lang.Object> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.util.Map<java.lang.Object,javax.sql.DataSource> = new java.util.HashMap<java.lang.Object,javax.sql.DataSource> <> ( this . java.util.Map<java.lang.Object,java.lang.Object> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map.Entry<java.lang.Object,java.lang.Object> : this . java.util.Map<java.lang.Object,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.lang.Object ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; javax.sql.DataSource javax.sql.DataSource = javax.sql.DataSource ( java.util.Map.Entry<java.lang.Object,java.lang.Object> . java.lang.Object ( ) ) ; this . java.util.Map<java.lang.Object,javax.sql.DataSource> . javax.sql.DataSource ( java.lang.Object , javax.sql.DataSource ) ; } if ( this . java.lang.Object != null ) { this . javax.sql.DataSource = javax.sql.DataSource ( this . java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected javax.sql.DataSource javax.sql.DataSource ( java.lang.Object java.lang.Object ) throws java.lang.IllegalArgumentException { if ( java.lang.Object instanceof javax.sql.DataSource ) { return ( javax.sql.DataSource ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { return this . org.springframework.jdbc.datasource.lookup.DataSourceLookup . getDataSource ( ( java.lang.String ) java.lang.Object ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return javax.sql.DataSource ( ) . java.sql.Connection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { return javax.sql.DataSource ( ) . java.sql.Connection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.sql.SQLException { if ( java.lang.Class<T> . boolean ( this ) ) { return ( T ) this ; } return javax.sql.DataSource ( ) . T ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.sql.SQLException { return ( java.lang.Class<> . boolean ( this ) || javax.sql.DataSource ( ) . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected javax.sql.DataSource javax.sql.DataSource ( ) { Assert . notNull ( this . java.util.Map<java.lang.Object,javax.sql.DataSource> , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ( ) ; javax.sql.DataSource javax.sql.DataSource = this . java.util.Map<java.lang.Object,javax.sql.DataSource> . javax.sql.DataSource ( java.lang.Object ) ; if ( javax.sql.DataSource == null && ( this . boolean || java.lang.Object == null ) ) { javax.sql.DataSource = this . javax.sql.DataSource ; } if ( javax.sql.DataSource == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Object + STRING ) ; } return javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( )  <METHOD_END>
