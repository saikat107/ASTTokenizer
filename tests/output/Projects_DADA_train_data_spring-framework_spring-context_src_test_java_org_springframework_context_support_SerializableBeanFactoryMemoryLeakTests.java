<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) java.lang.Exception { java.util.Map<?,?> ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new GenericApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new ClassPathXmlApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; void ( org.springframework.context.support.GenericApplicationContext ) ; void ( org.springframework.context.support.GenericApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( ) { @ java.lang.Override protected void void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ) { super. customizeBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; void ( org.springframework.context.support.DefaultListableBeanFactory ) ; } } ; void ( org.springframework.context.support.ClassPathXmlApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ) { super. customizeBeanFactory ( org.springframework.context.support.DefaultListableBeanFactory ) ; void ( org.springframework.context.support.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ) throws java.lang.Exception { assertThat ( int ( ) , equalTo ( NUMBER ) ) ; try { org.springframework.context.support.ConfigurableApplicationContext . refresh ( ) ; assertThat ( int ( ) , equalTo ( NUMBER ) ) ; org.springframework.context.support.ConfigurableApplicationContext . close ( ) ; } catch ( BeanCreationException org.springframework.context.support.BeanCreationException ) { } finally { assertThat ( int ( ) , equalTo ( NUMBER ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinitionRegistry org.springframework.context.support.BeanDefinitionRegistry ) { org.springframework.context.support.BeanDefinitionRegistry . registerBeanDefinition ( STRING , rootBeanDefinition ( java.lang.Object .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) java.lang.Exception { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = java.util.Map<?,?> ( ) ; return java.util.Map<,> . int ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = DefaultListableBeanFactory .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; return ( java.util.Map<?,?> < ? , ? > ) java.lang.reflect.Field . java.lang.Object ( DefaultListableBeanFactory .class ) ; }  <METHOD_END>
