<METHOD_START> private org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( boolean boolean , final int int , AbstractByteArraySerializer org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer ) { TcpNioClientConnectionFactory org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory = new TcpNioClientConnectionFactory ( STRING , int ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setSerializer ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setDeserializer ( org.springframework.integration.ip.tcp.connection.AbstractByteArraySerializer ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setSoTimeout ( NUMBER ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . setUsingDirectBuffers ( boolean ) ; org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory . start ( ) ; return org.springframework.integration.ip.tcp.connection.TcpNioClientConnectionFactory ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( false , int , org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; assertEquals ( java.lang.String . int ( ) , java.nio.ByteBuffer . int ( ) ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( false , int , org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; assertEquals ( ByteArrayStxEtxSerializer . STX , byte[] [ NUMBER ] ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; assertEquals ( ByteArrayStxEtxSerializer . ETX , byte[] [ java.lang.String . int ( ) + NUMBER ] ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( false , int , org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; assertEquals ( '\r' , byte[] [ java.lang.String . int ( ) ] ) ; assertEquals ( '\n' , byte[] [ java.lang.String . int ( ) + NUMBER ] ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayLengthHeaderSerializer org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer = new ByteArrayLengthHeaderSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( true , int , org.springframework.integration.ip.tcp.connection.ByteArrayLengthHeaderSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; assertEquals ( java.lang.String . int ( ) , java.nio.ByteBuffer . int ( ) ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayStxEtxSerializer org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer = new ByteArrayStxEtxSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( true , int , org.springframework.integration.ip.tcp.connection.ByteArrayStxEtxSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; assertEquals ( ByteArrayStxEtxSerializer . STX , byte[] [ NUMBER ] ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; assertEquals ( ByteArrayStxEtxSerializer . ETX , byte[] [ java.lang.String . int ( ) + NUMBER ] ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.net.ServerSocket java.net.ServerSocket = javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( NUMBER ) ; final int int = java.net.ServerSocket . int ( ) ; java.net.ServerSocket . void ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ( ) { try { ByteArrayCrLfSerializer org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer = new ByteArrayCrLfSerializer ( ) ; AbstractConnectionFactory org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory ( true , int , org.springframework.integration.ip.tcp.connection.ByteArrayCrLfSerializer ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = org.springframework.integration.ip.tcp.connection.AbstractConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.connection.TcpConnection . send ( MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } } ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( ) ; java.net.Socket java.net.Socket = java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( NUMBER ) ; java.io.InputStream java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; byte [] byte[] = new byte [ java.lang.String . int ( ) + NUMBER ] ; void ( java.io.InputStream , byte[] ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] , NUMBER , java.lang.String . int ( ) ) ) ; assertEquals ( '\r' , byte[] [ java.lang.String . int ( ) ] ) ; assertEquals ( '\n' , byte[] [ java.lang.String . int ( ) + NUMBER ] ) ; java.net.ServerSocket . void ( ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.InputStream java.io.InputStream , byte [] byte[] ) throws java.io.IOException { for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { byte[] [ int ] = ( byte ) java.io.InputStream . int ( ) ; } }  <METHOD_END>
