<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.solr.core.DefaultQueryParser = new DefaultQueryParser ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . endsWith ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . endsWith ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . startsWith ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . startsWith ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . contains ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . contains ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . expression ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . startsWith ( STRING ) . endsWith ( STRING ) . contains ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.Criteria . getField ( ) . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . startsWith ( STRING ) . endsWith ( STRING ) . and ( STRING ) . startsWith ( STRING ) . endsWith ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . startsWith ( STRING ) . or ( STRING ) . endsWith ( STRING ) . startsWith ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) . not ( ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . fuzzy ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . fuzzy ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . sloppy ( STRING , NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) . boost ( NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) . is ( STRING ) . boost ( NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( STRING ) . is ( STRING ) . boost ( NUMBER ) . and ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( NUMBER , NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( NUMBER , NUMBER , false , true ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( NUMBER , NUMBER , true , false ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( NUMBER , null ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( null , NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.solr.core.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; DateTime org.springframework.data.solr.core.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( org.springframework.data.solr.core.DateTime , org.springframework.data.solr.core.DateTime ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . between ( - NUMBER , - NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . in ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.solr.core.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.util.Calendar . void ( org.springframework.data.solr.core.DateTime . getMillis ( ) ) ; Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( java.util.Calendar . java.util.Date ( ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DateTime org.springframework.data.solr.core.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) ; Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( org.springframework.data.solr.core.DateTime ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocalDateTime org.springframework.data.solr.core.LocalDateTime = new LocalDateTime ( new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , DateTimeZone . UTC ) . getMillis ( ) , DateTimeZone . UTC ) ; Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( org.springframework.data.solr.core.LocalDateTime ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( - NUMBER ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . near ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( STRING ) . near ( ( Circle ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . near ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . MILES ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . near ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . near ( new Box ( new Point ( NUMBER , NUMBER ) , new Point ( NUMBER , NUMBER ) ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . within ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . MILES ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . within ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Criteria ( STRING ) . within ( ( Circle ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . within ( new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER , Metrics . KILOMETERS ) ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . within ( new Point ( NUMBER , NUMBER ) , null ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new SimpleStringCriteria ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new SimpleStringCriteria ( STRING ) ; org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . and ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . is ( NUMBER ) ; org.springframework.data.solr.core.DefaultQueryParser . registerConverter ( new Converter < java.lang.Number , java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Number java.lang.Number ) { return StringUtils . reverse ( java.lang.Number . java.lang.String ( ) ) ; } } ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromCriteria ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Number java.lang.Number ) { return StringUtils . reverse ( java.lang.Number . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = NUMBER ; int int = NUMBER ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setPageRequest ( new PageRequest ( int , int ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , int * int , int ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) . addProjectionOnField ( STRING ) . addProjectionOnField ( new SimpleField ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) . addGroupByField ( STRING ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnPivot ( STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetOnPivot ( STRING , STRING ) . addFacetOnPivot ( STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) , new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.FacetOptions . setFacetPrefix ( STRING ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING , STRING ) ; assertEquals ( org.springframework.data.solr.core.FacetOptions . getFacetPrefix ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FieldWithFacetParameters org.springframework.data.solr.core.FieldWithFacetParameters = new FieldWithFacetParameters ( STRING ) . setPrefix ( STRING ) . setSort ( FacetSort . INDEX ) . setLimit ( NUMBER ) . setOffset ( NUMBER ) . setMethod ( STRING ) . setMissing ( true ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) , org.springframework.data.solr.core.FieldWithFacetParameters ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , STRING , STRING ) ; assertEquals ( org.springframework.data.solr.core.FieldWithFacetParameters . getPrefix ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; assertEquals ( FacetParams . FACET_SORT_INDEX , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; assertEquals ( java.lang.Integer . java.lang.String ( org.springframework.data.solr.core.FieldWithFacetParameters . getOffset ( ) ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; assertEquals ( java.lang.Integer . java.lang.String ( org.springframework.data.solr.core.FieldWithFacetParameters . getLimit ( ) ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; assertEquals ( org.springframework.data.solr.core.FieldWithFacetParameters . getMethod ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; assertEquals ( org.springframework.data.solr.core.FieldWithFacetParameters . getMissing ( ) . toString ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FieldWithFacetParameters org.springframework.data.solr.core.FieldWithFacetParameters = new FieldWithFacetParameters ( STRING ) . addFacetParameter ( new FacetParameter ( FacetParams . FACET_ZEROS , STRING ) ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) , org.springframework.data.solr.core.FieldWithFacetParameters ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + org.springframework.data.solr.core.FieldWithFacetParameters . getName ( ) + STRING ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( STRING ) . setFacetSort ( FacetOptions . FacetSort . INDEX ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFacetSortString ( ) ) ; org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . setFacetSort ( FacetOptions . FacetSort . COUNT ) ; org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFacetSortString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.data.solr.core.SolrQuery . getFacetQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) . setFacetOptions ( new FacetOptions ( ) . addFacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) . addFacetQuery ( new SimpleQuery ( new Criteria ( STRING ) . startsWith ( STRING ) ) ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getFacetQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) . addFilterQuery ( new SimpleFilterQuery ( new Criteria ( STRING ) . is ( STRING ) ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getFilterQueries ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.solr.core.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( STRING ) ) . addFilterQuery ( new SimpleQuery ( ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFilterQueries ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; void ( org.springframework.data.solr.core.SolrQuery ) ; assertEquals ( org.springframework.data.solr.core.SimpleStringCriteria . getQueryString ( ) , org.springframework.data.solr.core.SolrQuery . getQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( null ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertTrue ( org.springframework.data.solr.core.SolrQuery . getSorts ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.SolrQuery . getSorts ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.SolrQuery . getSorts ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.SolrQuery . getSorts ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( Sort . Direction . DESC , STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.SolrQuery . getSorts ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleStringCriteria org.springframework.data.solr.core.SimpleStringCriteria = new SimpleStringCriteria ( STRING ) ; Query org.springframework.data.solr.core.Query = new SimpleQuery ( org.springframework.data.solr.core.SimpleStringCriteria ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( STRING ) ) ; org.springframework.data.solr.core.Query . addSort ( new Sort ( Sort . Direction . DESC , STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.Query ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getSortField ( ) ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.SolrQuery . getSorts ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . OR ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . AND ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( Operator . NONE ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefaultOperator ( null ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setTimeAllowed ( NUMBER ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.SolrQuery . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getTimeAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefType ( STRING ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setDefType ( STRING ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setRequestHandler ( STRING ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setJoin ( Join . from ( STRING ) . to ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setJoin ( Join . from ( STRING ) . fromIndex ( STRING ) . to ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getQuery ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( new HighlightOptions ( ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertTrue ( org.springframework.data.solr.core.SolrQuery . getHighlight ( ) ) ; assertArrayEquals ( new java.lang.String [] { Criteria . WILDCARD } , org.springframework.data.solr.core.SolrQuery . getHighlightFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertFalse ( org.springframework.data.solr.core.SolrQuery . getHighlight ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; org.springframework.data.solr.core.HighlightOptions . addField ( STRING , STRING ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getHighlightFields ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; org.springframework.data.solr.core.HighlightOptions . setFragsize ( NUMBER ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertEquals ( org.springframework.data.solr.core.HighlightOptions . getFragsize ( ) . intValue ( ) , org.springframework.data.solr.core.SolrQuery . getHighlightFragsize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; org.springframework.data.solr.core.HighlightOptions . setFormatter ( STRING ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertEquals ( org.springframework.data.solr.core.HighlightOptions . getFormatter ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( HighlightParams . FORMATTER ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; org.springframework.data.solr.core.HighlightOptions . setNrSnipplets ( NUMBER ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertEquals ( org.springframework.data.solr.core.HighlightOptions . getNrSnipplets ( ) . intValue ( ) , org.springframework.data.solr.core.SolrQuery . getHighlightSnippets ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; org.springframework.data.solr.core.HighlightOptions . addHighlightParameter ( HighlightParams . SIMPLE_PRE , STRING ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertEquals ( org.springframework.data.solr.core.HighlightOptions .< java.lang.String > getHighlightParameterValue ( HighlightParams . SIMPLE_PRE ) , org.springframework.data.solr.core.SolrQuery . getHighlightSimplePre ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleHighlightQuery org.springframework.data.solr.core.SimpleHighlightQuery = new SimpleHighlightQuery ( new SimpleStringCriteria ( STRING ) ) ; HighlightOptions org.springframework.data.solr.core.HighlightOptions = new HighlightOptions ( ) ; HighlightOptions . HighlightOptions HighlightOptions.FieldWithHighlightParameters = new HighlightOptions . HighlightOptions ( STRING ) ; HighlightOptions.FieldWithHighlightParameters . setFormatter ( STRING ) ; HighlightOptions.FieldWithHighlightParameters . setFragsize ( NUMBER ) ; org.springframework.data.solr.core.HighlightOptions . addField ( HighlightOptions.FieldWithHighlightParameters ) ; org.springframework.data.solr.core.SimpleHighlightQuery . setHighlightOptions ( org.springframework.data.solr.core.HighlightOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleHighlightQuery ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.data.solr.core.SolrQuery . getHighlightFields ( ) ) ; assertEquals ( HighlightOptions.FieldWithHighlightParameters . getFormatter ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + HighlightParams . FORMATTER ) [ NUMBER ] ) ; assertEquals ( HighlightOptions.FieldWithHighlightParameters . getFragsize ( ) . toString ( ) , org.springframework.data.solr.core.SolrQuery . getParams ( STRING + HighlightParams . FRAGSIZE ) [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . and ( Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ) . or ( Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . is ( STRING ) . and ( Criteria . where ( STRING ) . is ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ) . or ( Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . or ( STRING ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . and ( Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) . and ( Criteria . where ( STRING ) . is ( STRING ) . and ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = new Criteria ( STRING ) . isNotNull ( ) . and ( STRING ) . isNull ( ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) . setPageRequest ( new SolrPageRequest ( NUMBER , NUMBER ) ) ; void ( org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) . setOffset ( NUMBER ) . setRows ( NUMBER ) ; void ( org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( StatsParams . STATS_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) . addField ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FIELD ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addFacet ( new SimpleField ( STRING ) ) . addFacet ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FACET ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) . addFacet ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FIELD ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FACET ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) . addSelectiveFacet ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FIELD ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( CommonParams . FIELD + STRING + StatsParams . STATS_FACET ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) . setSelectiveCalcDistinct ( true ) . addField ( new SimpleField ( STRING ) ) . setSelectiveCalcDistinct ( false ) . addField ( new SimpleField ( STRING ) ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FIELD ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( CommonParams . FIELD + STRING + StatsParams . STATS_CALC_DISTINCT ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( CommonParams . FIELD + STRING + StatsParams . STATS_CALC_DISTINCT ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( CommonParams . FIELD + STRING + StatsParams . STATS_CALC_DISTINCT ) ; java.util.Arrays . void ( java.lang.String[] ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING } , java.lang.String[] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertNull ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StatsOptions org.springframework.data.solr.core.StatsOptions = new StatsOptions ( ) . addField ( new SimpleField ( STRING ) ) . addSelectiveFacet ( new SimpleField ( STRING ) ) . addSelectiveFacet ( new SimpleField ( STRING ) ) . addField ( STRING ) . addFacet ( STRING ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( STRING ) ; org.springframework.data.solr.core.SimpleQuery . setStatsOptions ( org.springframework.data.solr.core.StatsOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FIELD ) ) ; java.util.Collections . void ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( org.springframework.data.solr.core.SolrQuery . getParams ( CommonParams . FIELD + STRING + StatsParams . STATS_FACET ) ) ; java.lang.String [] java.lang.String[] = org.springframework.data.solr.core.SolrQuery . getParams ( StatsParams . STATS_FACET ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( NUMBER , java.util.List<java.lang.String> . int ( ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( ) ; org.springframework.data.solr.core.SimpleQuery . addCriteria ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( org.springframework.data.solr.core.GroupOptions ) ; org.springframework.data.solr.core.GroupOptions . setOffset ( NUMBER ) ; org.springframework.data.solr.core.GroupOptions . setLimit ( NUMBER ) ; org.springframework.data.solr.core.GroupOptions . addGroupByField ( STRING ) ; org.springframework.data.solr.core.GroupOptions . addGroupByFunction ( MaxFunction . max ( STRING , STRING ) ) ; org.springframework.data.solr.core.GroupOptions . addGroupByQuery ( new SimpleQuery ( STRING ) ) ; org.springframework.data.solr.core.GroupOptions . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) ; org.springframework.data.solr.core.GroupOptions . setTotalCount ( true ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , true ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FIELD ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FUNC ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_QUERY ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_SORT ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_OFFSET ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_LIMIT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( ) ; org.springframework.data.solr.core.SimpleQuery . addCriteria ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( org.springframework.data.solr.core.GroupOptions ) ; org.springframework.data.solr.core.GroupOptions . setLimit ( - NUMBER ) ; org.springframework.data.solr.core.GroupOptions . addGroupByField ( STRING ) ; org.springframework.data.solr.core.GroupOptions . addSort ( new Sort ( Sort . Direction . DESC , STRING ) ) ; org.springframework.data.solr.core.GroupOptions . setTotalCount ( true ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , true ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FIELD ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_LIMIT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( ) ; org.springframework.data.solr.core.SimpleQuery . addCriteria ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( new GroupOptions ( ) . addGroupByField ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , false ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_SORT ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_OFFSET ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_LIMIT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( ) ; org.springframework.data.solr.core.SimpleQuery . addCriteria ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( new GroupOptions ( ) ) ; org.springframework.data.solr.core.SimpleQuery . getGroupOptions ( ) . addGroupByFunction ( MaxFunction . max ( STRING , STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . getGroupOptions ( ) . addGroupByFunction ( MaxFunction . max ( STRING , STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , false ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_FUNC ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_QUERY ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( ) ; org.springframework.data.solr.core.SimpleQuery . addCriteria ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . setGroupOptions ( new GroupOptions ( ) ) ; org.springframework.data.solr.core.SimpleQuery . getGroupOptions ( ) . addGroupByQuery ( new SimpleQuery ( STRING ) ) ; org.springframework.data.solr.core.SimpleQuery . getGroupOptions ( ) . addGroupByQuery ( new SimpleQuery ( STRING ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; void ( org.springframework.data.solr.core.SolrQuery , false ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_QUERY ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_FUNC ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( GroupParams . GROUP_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . and ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . and ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . or ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . or ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . startsWith ( STRING ) . or ( STRING ) . startsWith ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . startsWith ( STRING ) . or ( STRING ) . startsWith ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . and ( org.springframework.data.solr.core.Criteria ) . notOperator ( ) ; java.lang.String java.lang.String = STRING ; assertEquals ( java.lang.String , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) . notOperator ( ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . or ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) . notOperator ( ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . or ( org.springframework.data.solr.core.Criteria ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) ; Criteria org.springframework.data.solr.core.Criteria = Criteria . where ( STRING ) . is ( STRING ) . or ( STRING ) . is ( STRING ) . notOperator ( ) ; Criteria org.springframework.data.solr.core.Criteria = org.springframework.data.solr.core.Criteria . connect ( ) . and ( org.springframework.data.solr.core.Criteria ) . notOperator ( ) ; assertEquals ( STRING , org.springframework.data.solr.core.DefaultQueryParser . createQueryStringFromNode ( org.springframework.data.solr.core.Criteria ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.FacetOptions . setFacetLimit ( - NUMBER ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( - NUMBER , org.springframework.data.solr.core.SolrQuery . getFacetLimit ( ) ) ; assertEquals ( null , org.springframework.data.solr.core.SolrQuery . get ( FacetParams . FACET_OFFSET ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.FacetOptions . setPageable ( new SolrPageRequest ( NUMBER , - NUMBER ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( - NUMBER , org.springframework.data.solr.core.SolrQuery . getFacetLimit ( ) ) ; assertEquals ( null , org.springframework.data.solr.core.SolrQuery . get ( FacetParams . FACET_OFFSET ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) . is ( STRING ) ) ; FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( new SimpleField ( STRING ) ) ; org.springframework.data.solr.core.FacetOptions . setPageable ( new SolrPageRequest ( NUMBER , - NUMBER ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.FacetQuery ) ; assertEquals ( - NUMBER , org.springframework.data.solr.core.SolrQuery . getFacetLimit ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.SolrQuery . getInt ( FacetParams . FACET_OFFSET ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . ALL ) . setOther ( FacetRangeOther . ALL ) ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setHardEnd ( false ) . setInclude ( FacetRangeInclude . OUTER ) . setOther ( FacetRangeOther . NONE ) ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setHardEnd ( true ) . setOther ( FacetRangeOther . ALL ) ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . OUTER ) ) . addFacetByRange ( new FieldWithNumericRangeParameters ( STRING , NUMBER , NUMBER , NUMBER ) ) ; SolrDataQuery org.springframework.data.solr.core.SolrDataQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SolrDataQuery ) ; assertTrue ( org.springframework.data.solr.core.FacetOptions . hasFacets ( ) ) ; assertArrayEquals ( new java.lang.String [] {} , org.springframework.data.solr.core.SolrQuery . getFacetFields ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING , STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getParams ( FacetParams . FACET_RANGE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertNull ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertNull ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertNull ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertNull ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertNull ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( ) . addFacetByRange ( new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . ALL ) . setOther ( FacetRangeOther . ALL ) ) . addFacetByRange ( new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) . setHardEnd ( false ) . setInclude ( FacetRangeInclude . OUTER ) . setOther ( FacetRangeOther . NONE ) ) . addFacetByRange ( new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) . setHardEnd ( true ) . setOther ( FacetRangeOther . NONE ) ) . addFacetByRange ( new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) . setHardEnd ( true ) . setInclude ( FacetRangeInclude . OUTER ) ) . addFacetByRange ( new FieldWithDateRangeParameters ( STRING , new java.util.Date ( NUMBER ) , new java.util.Date ( NUMBER ) , STRING ) ) ; SolrDataQuery org.springframework.data.solr.core.SolrDataQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SolrDataQuery ) ; assertTrue ( org.springframework.data.solr.core.FacetOptions . hasFacets ( ) ) ; assertArrayEquals ( new java.lang.String [] {} , org.springframework.data.solr.core.SolrQuery . getFacetFields ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING , STRING , STRING , STRING , STRING } , org.springframework.data.solr.core.SolrQuery . getParams ( FacetParams . FACET_RANGE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_START ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_GAP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_END ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_HARD_END ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_INCLUDE ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getFieldParam ( STRING , FacetParams . FACET_RANGE_OTHER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FacetOptions org.springframework.data.solr.core.FacetOptions = new FacetOptions ( STRING ) ; SolrDataQuery org.springframework.data.solr.core.SolrDataQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( org.springframework.data.solr.core.FacetOptions ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SolrDataQuery ) ; assertTrue ( org.springframework.data.solr.core.FacetOptions . hasFacets ( ) ) ; assertArrayEquals ( new java.lang.String [] { STRING } , org.springframework.data.solr.core.SolrQuery . getFacetFields ( ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( FacetParams . FACET_DATE ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getParams ( FacetParams . FACET_RANGE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( AnyCriteria . any ( ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertThat ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( AnyCriteria . any ( ) ) ; org.springframework.data.solr.core.SimpleQuery . setSpellcheckOptions ( SpellcheckOptions . spellcheck ( ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertThat ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleQuery org.springframework.data.solr.core.SimpleQuery = new SimpleQuery ( AnyCriteria . any ( ) ) ; org.springframework.data.solr.core.SimpleQuery . setSpellcheckOptions ( SpellcheckOptions . spellcheck ( ) . dictionaries ( STRING , STRING ) . count ( NUMBER ) . extendedResults ( ) ) ; SolrQuery org.springframework.data.solr.core.SolrQuery = org.springframework.data.solr.core.DefaultQueryParser . constructSolrQuery ( org.springframework.data.solr.core.SimpleQuery ) ; assertThat ( org.springframework.data.solr.core.SolrQuery . get ( STRING ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.solr.core.SolrQuery . getParams ( SpellingParams . SPELLCHECK_DICT ) , is ( new java.lang.String [] { STRING , STRING } ) ) ; assertThat ( org.springframework.data.solr.core.SolrQuery . get ( SpellingParams . SPELLCHECK_EXTENDED_RESULTS ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String ... java.lang.String[] ) { assertArrayEquals ( java.lang.String[] , org.springframework.data.solr.core.SolrQuery . getParams ( FacetParams . FACET_PIVOT ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String ... java.lang.String[] ) { assertArrayEquals ( java.lang.String[] , org.springframework.data.solr.core.SolrQuery . getFacetFields ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { assertNull ( org.springframework.data.solr.core.SolrQuery . get ( FacetParams . FACET_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( CommonParams . Q ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { assertNull ( org.springframework.data.solr.core.SolrQuery . getFields ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( CommonParams . FL ) ) ; assertEquals ( java.lang.String , org.springframework.data.solr.core.SolrQuery . get ( CommonParams . FL ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { assertNull ( org.springframework.data.solr.core.SolrQuery . getStart ( ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . getRows ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , int int , int int ) { assertEquals ( java.lang.Integer . java.lang.Integer ( int ) , org.springframework.data.solr.core.SolrQuery . getStart ( ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( int ) , org.springframework.data.solr.core.SolrQuery . getRows ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery ) { assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FIELD ) ) ; assertNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_MAIN ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , java.lang.String java.lang.String ) { assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP ) ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FIELD ) ) ; assertNotNull ( org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_MAIN ) ) ; assertEquals ( java.lang.String , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FIELD ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrQuery org.springframework.data.solr.core.SolrQuery , boolean boolean ) { assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_MAIN ) ) ; assertEquals ( STRING , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_FORMAT ) ) ; assertEquals ( java.lang.String . java.lang.String ( boolean ) , org.springframework.data.solr.core.SolrQuery . get ( GroupParams . GROUP_TOTAL_COUNT ) ) ; }  <METHOD_END>
