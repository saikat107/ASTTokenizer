<METHOD_START> @ Before public void void ( ) { org.springframework.data.domain.ExampleUnitTests.Person = new org.springframework.data.domain.ExampleUnitTests.Person ( ) ; org.springframework.data.domain.ExampleUnitTests.Person . java.lang.String = STRING ; org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> = Example . of ( org.springframework.data.domain.ExampleUnitTests.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Example . of ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> . getProbeType ( ) ) . isEqualTo ( org.springframework.data.domain.ExampleUnitTests.Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Example < org.springframework.data.domain.ExampleUnitTests.Person > org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> = Example . of ( org.springframework.data.domain.ExampleUnitTests.Person , matching ( ) . withIgnoreCase ( STRING ) ) ; Example < org.springframework.data.domain.ExampleUnitTests.Person > org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> = Example . of ( org.springframework.data.domain.ExampleUnitTests.Person , matching ( ) . withIgnoreCase ( STRING ) ) ; Example < org.springframework.data.domain.ExampleUnitTests.Person > org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> = Example . of ( org.springframework.data.domain.ExampleUnitTests.Person , matching ( ) . withMatcher ( STRING , GenericPropertyMatchers . contains ( ) ) ) ; assertThat ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> . hashCode ( ) ) . isEqualTo ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> . hashCode ( ) ) ; assertThat ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> . hashCode ( ) ) . isNotEqualTo ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> . hashCode ( ) ) ; assertThat ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> ) . isEqualTo ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> ) ; assertThat ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> ) . isNotEqualTo ( org.springframework.data.domain.Example<org.springframework.data.domain.ExampleUnitTests.Person> ) ; }  <METHOD_END>
