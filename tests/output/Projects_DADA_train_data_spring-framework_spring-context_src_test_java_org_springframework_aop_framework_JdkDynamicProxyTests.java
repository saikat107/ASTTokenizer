<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport ) { assertFalse ( STRING , org.springframework.aop.framework.ProxyCreatorSupport . isProxyTargetClass ( ) ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.ProxyCreatorSupport . createAopProxy ( ) . getProxy ( ) ; assertTrue ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , AopUtils . isJdkDynamicProxy ( java.lang.Object ) ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.aop.framework.AopProxy org.springframework.aop.framework.AopProxy ( AdvisedSupport org.springframework.aop.framework.AdvisedSupport ) { return new JdkDynamicAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new JdkDynamicAopProxy ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.aop.framework.TestBean = new TestBean ( ) ; org.springframework.aop.framework.TestBean . setAge ( NUMBER ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.TestBean ) ; JdkDynamicAopProxy org.springframework.aop.framework.JdkDynamicAopProxy = new JdkDynamicAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; java.lang.Object java.lang.Object = org.springframework.aop.framework.JdkDynamicAopProxy . getProxy ( ) ; assertTrue ( java.lang.Object instanceof ITestBean ) ; assertFalse ( java.lang.Object instanceof TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final int int = NUMBER ; MethodInterceptor org.springframework.aop.framework.MethodInterceptor = ( invocation -> age ) ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.MethodInterceptor ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; assertEquals ( STRING , int , org.springframework.aop.framework.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { final ExposedInvocationTestBean org.springframework.aop.framework.ExposedInvocationTestBean = new ExposedInvocationTestBean ( ) { @ java.lang.Override protected void void ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) { assertEquals ( this , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; assertEquals ( STRING + org.springframework.aop.framework.MethodInvocation . getMethod ( ) , ITestBean .class , org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ) ; } } ; AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( ITestBean .class , IOther .class ) ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; TrapTargetInterceptor org.springframework.aop.framework.TrapTargetInterceptor = new TrapTargetInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { assertEquals ( STRING , org.springframework.aop.framework.ExposedInvocationTestBean , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; return super. invoke ( org.springframework.aop.framework.MethodInvocation ) ; } } ; org.springframework.aop.framework.AdvisedSupport . addAdvice ( org.springframework.aop.framework.TrapTargetInterceptor ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( org.springframework.aop.framework.ExposedInvocationTestBean ) ; AopProxy org.springframework.aop.framework.AopProxy = org.springframework.aop.framework.AopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; ITestBean org.springframework.aop.framework.ITestBean = ( ITestBean ) org.springframework.aop.framework.AopProxy . getProxy ( ) ; org.springframework.aop.framework.ITestBean . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) { assertEquals ( this , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; assertEquals ( STRING + org.springframework.aop.framework.MethodInvocation . getMethod ( ) , ITestBean .class , org.springframework.aop.framework.MethodInvocation . getMethod ( ) . getDeclaringClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.framework.MethodInvocation ) throws java.lang.Throwable { assertEquals ( STRING , org.springframework.aop.framework.ExposedInvocationTestBean , org.springframework.aop.framework.MethodInvocation . getThis ( ) ) ; return super. invoke ( org.springframework.aop.framework.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.framework.JdkDynamicProxyTests.FooBar org.springframework.aop.framework.JdkDynamicProxyTests.FooBar = new org.springframework.aop.framework.JdkDynamicProxyTests.FooBar ( ) ; ProxyCreatorSupport org.springframework.aop.framework.ProxyCreatorSupport = new ProxyCreatorSupport ( ) ; org.springframework.aop.framework.ProxyCreatorSupport . setInterfaces ( org.springframework.aop.framework.JdkDynamicProxyTests.Foo .class ) ; org.springframework.aop.framework.ProxyCreatorSupport . setTarget ( org.springframework.aop.framework.JdkDynamicProxyTests.FooBar ) ; org.springframework.aop.framework.JdkDynamicProxyTests.Foo org.springframework.aop.framework.JdkDynamicProxyTests.Foo = ( org.springframework.aop.framework.JdkDynamicProxyTests.Foo ) java.lang.Object ( org.springframework.aop.framework.ProxyCreatorSupport ) ; assertSame ( STRING , org.springframework.aop.framework.JdkDynamicProxyTests.FooBar , org.springframework.aop.framework.JdkDynamicProxyTests.Foo . org.springframework.aop.framework.JdkDynamicProxyTests.Bar ( ) ) ; assertSame ( STRING , org.springframework.aop.framework.JdkDynamicProxyTests.Foo , org.springframework.aop.framework.JdkDynamicProxyTests.Foo . org.springframework.aop.framework.JdkDynamicProxyTests.Foo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AdvisedSupport org.springframework.aop.framework.AdvisedSupport = new AdvisedSupport ( org.springframework.aop.framework.JdkDynamicProxyTests.Named .class ) ; org.springframework.aop.framework.AdvisedSupport . setTarget ( new org.springframework.aop.framework.JdkDynamicProxyTests.Person ( ) ) ; JdkDynamicAopProxy org.springframework.aop.framework.JdkDynamicAopProxy = new JdkDynamicAopProxy ( org.springframework.aop.framework.AdvisedSupport ) ; org.springframework.aop.framework.JdkDynamicProxyTests.Named org.springframework.aop.framework.JdkDynamicProxyTests.Named = ( org.springframework.aop.framework.JdkDynamicProxyTests.Named ) org.springframework.aop.framework.JdkDynamicAopProxy . getProxy ( ) ; org.springframework.aop.framework.JdkDynamicProxyTests.Named org.springframework.aop.framework.JdkDynamicProxyTests.Named = new org.springframework.aop.framework.JdkDynamicProxyTests.Person ( ) ; assertEquals ( STRING , org.springframework.aop.framework.JdkDynamicProxyTests.Named , org.springframework.aop.framework.JdkDynamicProxyTests.Named ) ; assertEquals ( STRING , org.springframework.aop.framework.JdkDynamicProxyTests.Named . int ( ) , org.springframework.aop.framework.JdkDynamicProxyTests.Named . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.aop.framework.ProxyFactory = new ProxyFactory ( new org.springframework.aop.framework.JdkDynamicProxyTests.VarargTestBean ( ) ) ; org.springframework.aop.framework.JdkDynamicProxyTests.VarargTestInterface org.springframework.aop.framework.JdkDynamicProxyTests.VarargTestInterface = ( org.springframework.aop.framework.JdkDynamicProxyTests.VarargTestInterface ) org.springframework.aop.framework.ProxyFactory . getProxy ( ) ; assertTrue ( org.springframework.aop.framework.JdkDynamicProxyTests.VarargTestInterface . boolean ( org.springframework.aop.framework.JdkDynamicProxyTests.MyEnum . org.springframework.aop.framework.JdkDynamicProxyTests.MyEnum , org.springframework.aop.framework.JdkDynamicProxyTests.MyOtherEnum . org.springframework.aop.framework.JdkDynamicProxyTests.MyOtherEnum ) ) ; }  <METHOD_END>
<METHOD_START> org.springframework.aop.framework.JdkDynamicProxyTests.Bar org.springframework.aop.framework.JdkDynamicProxyTests.Bar ( )  <METHOD_END>
<METHOD_START> org.springframework.aop.framework.JdkDynamicProxyTests.Foo org.springframework.aop.framework.JdkDynamicProxyTests.Foo ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.JdkDynamicProxyTests.Bar org.springframework.aop.framework.JdkDynamicProxyTests.Bar ( ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.aop.framework.JdkDynamicProxyTests.Foo org.springframework.aop.framework.JdkDynamicProxyTests.Foo ( ) { return this ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ java.lang.Override int int ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) return true ; if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.aop.framework.JdkDynamicProxyTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) return false ; org.springframework.aop.framework.JdkDynamicProxyTests.Person org.springframework.aop.framework.JdkDynamicProxyTests.Person = ( org.springframework.aop.framework.JdkDynamicProxyTests.Person ) java.lang.Object ; if ( ! java.lang.String . boolean ( org.springframework.aop.framework.JdkDynamicProxyTests.Person . java.lang.String ) ) return false ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> < V extends org.springframework.aop.framework.JdkDynamicProxyTests.MyInterface > boolean boolean ( V ... V[] );  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < V extends org.springframework.aop.framework.JdkDynamicProxyTests.MyInterface > boolean boolean ( V ... V[] ) { return true ; }  <METHOD_END>
