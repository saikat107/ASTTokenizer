<METHOD_START> public void ( ) { this( int ); }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory ) { this( int , java.util.concurrent.ThreadFactory ); }  <METHOD_END>
<METHOD_START> public void ( int int ) { this( int , new java.util.concurrent.ThreadFactory ( ) { @ java.lang.Override public java.lang.Thread java.lang.Thread ( java.lang.Runnable java.lang.Runnable ) { return new java.lang.Thread ( java.lang.Runnable ) ; } } ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( java.lang.Runnable java.lang.Runnable ) { return new java.lang.Thread ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory ) { this . int = int ; this . java.util.concurrent.ThreadFactory = java.util.concurrent.ThreadFactory ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { synchronized ( this . java.lang.Object ) { Assert . state ( ! boolean ( ) , STRING ) ; org.springframework.boot.devtools.livereload.Log . debug ( STRING + this . int ) ; this . java.net.ServerSocket = new java.net.ServerSocket ( this . int ) ; this . java.lang.Thread = this . java.util.concurrent.ThreadFactory . java.lang.Thread ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( ) ; } } ) ; this . java.lang.Thread . void ( true ) ; this . java.lang.Thread . void ( STRING ) ; this . java.lang.Thread . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . java.lang.Thread != null ; } }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> private void void ( ) { do { try { java.net.Socket java.net.Socket = this . java.net.ServerSocket . java.net.Socket ( ) ; java.net.Socket . void ( int ) ; this . java.util.concurrent.ExecutorService . void ( new org.springframework.boot.devtools.livereload.LiveReloadServer.ConnectionHandler ( java.net.Socket ) ) ; } catch ( java.net.SocketTimeoutException java.net.SocketTimeoutException ) { } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.boot.devtools.livereload.Log . isDebugEnabled ( ) ) { org.springframework.boot.devtools.livereload.Log . debug ( STRING , java.lang.Exception ) ; } } } while ( ! this . java.net.ServerSocket . boolean ( ) ); }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { synchronized ( this . java.lang.Object ) { if ( this . java.lang.Thread != null ) { void ( ) ; try { this . java.util.concurrent.ExecutorService . void ( ) ; this . java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } this . java.net.ServerSocket . void ( ) ; try { this . java.lang.Thread . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } this . java.lang.Thread = null ; this . java.net.ServerSocket = null ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { synchronized ( this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { for ( Connection org.springframework.boot.devtools.livereload.Connection : this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { org.springframework.boot.devtools.livereload.Connection . close ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( ) { synchronized ( this . java.lang.Object ) { synchronized ( this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { for ( Connection org.springframework.boot.devtools.livereload.Connection : this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { try { org.springframework.boot.devtools.livereload.Connection . triggerReload ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.devtools.livereload.Log . debug ( STRING , java.lang.Exception ) ; } } } } }  <METHOD_END>
<METHOD_START> private void void ( Connection org.springframework.boot.devtools.livereload.Connection ) { synchronized ( this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { this . java.util.List<org.springframework.boot.devtools.livereload.Connection> . add ( org.springframework.boot.devtools.livereload.Connection ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Connection org.springframework.boot.devtools.livereload.Connection ) { synchronized ( this . java.util.List<org.springframework.boot.devtools.livereload.Connection> ) { this . java.util.List<org.springframework.boot.devtools.livereload.Connection> . remove ( org.springframework.boot.devtools.livereload.Connection ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.devtools.livereload.Connection org.springframework.boot.devtools.livereload.Connection ( java.net.Socket java.net.Socket , java.io.InputStream java.io.InputStream , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return new Connection ( java.net.Socket , java.io.InputStream , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> void ( java.net.Socket java.net.Socket ) throws java.io.IOException { this . java.net.Socket = java.net.Socket ; this . java.io.InputStream = java.net.Socket . java.io.InputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { void ( ) ; } catch ( ConnectionClosedException org.springframework.boot.devtools.livereload.ConnectionClosedException ) { org.springframework.boot.devtools.livereload.Log . debug ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.boot.devtools.livereload.Log . isDebugEnabled ( ) ) { org.springframework.boot.devtools.livereload.Log . debug ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { try { try { java.io.OutputStream java.io.OutputStream = this . java.net.Socket . java.io.OutputStream ( ) ; try { Connection org.springframework.boot.devtools.livereload.Connection = org.springframework.boot.devtools.livereload.Connection ( this . java.net.Socket , this . java.io.InputStream , java.io.OutputStream ) ; void ( org.springframework.boot.devtools.livereload.Connection ) ; } finally { java.io.OutputStream . void ( ) ; } } finally { this . java.io.InputStream . void ( ) ; } } finally { this . java.net.Socket . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Connection org.springframework.boot.devtools.livereload.Connection ) throws java.io.IOException , java.lang.Exception { try { void ( org.springframework.boot.devtools.livereload.Connection ) ; org.springframework.boot.devtools.livereload.Connection . run ( ) ; } finally { void ( org.springframework.boot.devtools.livereload.Connection ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Thread java.lang.Thread ( java.lang.Runnable java.lang.Runnable ) { java.lang.Thread java.lang.Thread = new java.lang.Thread ( java.lang.Runnable ) ; java.lang.Thread . void ( true ) ; java.lang.Thread . void ( STRING + this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; return java.lang.Thread ; }  <METHOD_END>
