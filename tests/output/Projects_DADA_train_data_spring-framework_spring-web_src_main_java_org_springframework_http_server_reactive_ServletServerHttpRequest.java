<METHOD_START> public void ( HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest , AsyncContext org.springframework.http.server.reactive.AsyncContext , DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory , int int ) throws java.io.IOException { super( java.net.URI ( org.springframework.http.server.reactive.HttpServletRequest ) , org.springframework.http.server.reactive.HttpHeaders ( org.springframework.http.server.reactive.HttpServletRequest ) ); Assert . notNull ( org.springframework.http.server.reactive.DataBufferFactory , STRING ) ; Assert . isTrue ( int > NUMBER , STRING ) ; this . org.springframework.http.server.reactive.HttpServletRequest = org.springframework.http.server.reactive.HttpServletRequest ; this . org.springframework.http.server.reactive.DataBufferFactory = org.springframework.http.server.reactive.DataBufferFactory ; this . byte[] = new byte [ int ] ; org.springframework.http.server.reactive.AsyncContext . addListener ( new org.springframework.http.server.reactive.ServletServerHttpRequest.RequestAsyncListener ( ) ) ; ServletInputStream org.springframework.http.server.reactive.ServletInputStream = org.springframework.http.server.reactive.HttpServletRequest . getInputStream ( ) ; this . org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher = new org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher ( org.springframework.http.server.reactive.ServletInputStream ) ; this . org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher . void ( ) ; }  <METHOD_END>
<METHOD_START> private static java.net.URI java.net.URI ( HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest ) { Assert . notNull ( org.springframework.http.server.reactive.HttpServletRequest , STRING ) ; try { java.lang.StringBuffer java.lang.StringBuffer = org.springframework.http.server.reactive.HttpServletRequest . getRequestURL ( ) ; java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServletRequest . getQueryString ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.StringBuffer . java.lang.StringBuffer ( '?' ) . java.lang.StringBuffer ( java.lang.String ) ; } return new java.net.URI ( java.lang.StringBuffer . java.lang.String ( ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalStateException ( STRING + java.net.URISyntaxException . java.lang.String ( ) , java.net.URISyntaxException ) ; } }  <METHOD_END>
<METHOD_START> private static org.springframework.http.server.reactive.HttpHeaders org.springframework.http.server.reactive.HttpHeaders ( HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest ) { HttpHeaders org.springframework.http.server.reactive.HttpHeaders = new HttpHeaders ( ) ; for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.http.server.reactive.HttpServletRequest . getHeaderNames ( ) ; java.util.Enumeration<> . boolean ( ) ; ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = org.springframework.http.server.reactive.HttpServletRequest . getHeaders ( java.lang.String ) ; java.util.Enumeration<> . boolean ( ) ; ) { org.springframework.http.server.reactive.HttpHeaders . add ( java.lang.String , ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ) ; } } MediaType org.springframework.http.server.reactive.MediaType = org.springframework.http.server.reactive.HttpHeaders . getContentType ( ) ; if ( org.springframework.http.server.reactive.MediaType == null ) { java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServletRequest . getContentType ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.http.server.reactive.MediaType = MediaType . parseMediaType ( java.lang.String ) ; org.springframework.http.server.reactive.HttpHeaders . setContentType ( org.springframework.http.server.reactive.MediaType ) ; } } if ( org.springframework.http.server.reactive.MediaType != null && org.springframework.http.server.reactive.MediaType . getCharset ( ) == null ) { java.lang.String java.lang.String = org.springframework.http.server.reactive.HttpServletRequest . getCharacterEncoding ( ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { java.nio.charset.Charset java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new LinkedCaseInsensitiveMap <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . void ( org.springframework.http.server.reactive.MediaType . getParameters ( ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , java.nio.charset.Charset . java.lang.String ( ) ) ; org.springframework.http.server.reactive.HttpHeaders . setContentType ( new MediaType ( org.springframework.http.server.reactive.MediaType . getType ( ) , org.springframework.http.server.reactive.MediaType . getSubtype ( ) , java.util.Map<java.lang.String,java.lang.String> ) ) ; } } if ( org.springframework.http.server.reactive.HttpHeaders . getContentLength ( ) == - NUMBER ) { int int = org.springframework.http.server.reactive.HttpServletRequest . getContentLength ( ) ; if ( int != - NUMBER ) { org.springframework.http.server.reactive.HttpHeaders . setContentLength ( int ) ; } } return org.springframework.http.server.reactive.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest ( ) { return this . org.springframework.http.server.reactive.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.HttpMethod org.springframework.http.server.reactive.HttpMethod ( ) { return HttpMethod . valueOf ( org.springframework.http.server.reactive.HttpServletRequest ( ) . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.http.server.reactive.HttpServletRequest ( ) . getContextPath ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ( ) { MultiValueMap < java.lang.String , HttpCookie > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> = new LinkedMultiValueMap <> ( ) ; Cookie [] org.springframework.http.server.reactive.Cookie[] ; synchronized ( this . java.lang.Object ) { org.springframework.http.server.reactive.Cookie[] = this . org.springframework.http.server.reactive.HttpServletRequest . getCookies ( ) ; } if ( org.springframework.http.server.reactive.Cookie[] != null ) { for ( Cookie org.springframework.http.server.reactive.Cookie : org.springframework.http.server.reactive.Cookie[] ) { java.lang.String java.lang.String = org.springframework.http.server.reactive.Cookie . getName ( ) ; HttpCookie org.springframework.http.server.reactive.HttpCookie = new HttpCookie ( java.lang.String , org.springframework.http.server.reactive.Cookie . getValue ( ) ) ; org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> . add ( java.lang.String , org.springframework.http.server.reactive.HttpCookie ) ; } } return org.springframework.http.server.reactive.MultiValueMap<java.lang.String,org.springframework.http.server.reactive.HttpCookie> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.Optional<java.net.InetSocketAddress> ( ) { return java.util.Optional . java.util.Optional<T> ( new java.net.InetSocketAddress ( this . org.springframework.http.server.reactive.HttpServletRequest . getRemoteHost ( ) , this . org.springframework.http.server.reactive.HttpServletRequest . getRemotePort ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> < DataBuffer > org.springframework.http.server.reactive.Flux<org.springframework.http.server.reactive.DataBuffer> ( ) { return Flux . from ( this . org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.server.reactive.DataBuffer org.springframework.http.server.reactive.DataBuffer ( ) java.io.IOException { int int = this . org.springframework.http.server.reactive.HttpServletRequest . getInputStream ( ) . read ( this . byte[] ) ; if ( org.springframework.http.server.reactive.Log . isTraceEnabled ( ) ) { org.springframework.http.server.reactive.Log . trace ( STRING + int ) ; } if ( int > NUMBER ) { DataBuffer org.springframework.http.server.reactive.DataBuffer = this . org.springframework.http.server.reactive.DataBufferFactory . allocateBuffer ( int ) ; org.springframework.http.server.reactive.DataBuffer . write ( this . byte[] , NUMBER , int ) ; return org.springframework.http.server.reactive.DataBuffer ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) {}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { java.lang.Throwable java.lang.Throwable = org.springframework.http.server.reactive.AsyncEvent . getThrowable ( ) ; java.lang.Throwable = java.lang.Throwable != null ? java.lang.Throwable : new java.lang.IllegalStateException ( STRING ) ; org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher . onError ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher . onError ( org.springframework.http.server.reactive.AsyncEvent . getThrowable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncEvent org.springframework.http.server.reactive.AsyncEvent ) { org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher . onAllDataRead ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ServletInputStream org.springframework.http.server.reactive.ServletInputStream ) { this . org.springframework.http.server.reactive.ServletInputStream = org.springframework.http.server.reactive.ServletInputStream ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.io.IOException { this . org.springframework.http.server.reactive.ServletInputStream . setReadListener ( new org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher.RequestBodyPublisherReadListener ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( ! this . org.springframework.http.server.reactive.ServletInputStream . isFinished ( ) && this . org.springframework.http.server.reactive.ServletInputStream . isReady ( ) ) { onDataAvailable ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.DataBuffer org.springframework.http.server.reactive.DataBuffer ( ) java.io.IOException { if ( this . org.springframework.http.server.reactive.ServletInputStream . isReady ( ) ) { return org.springframework.http.server.reactive.DataBuffer ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher .this . onDataAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher .this . onAllDataRead ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.http.server.reactive.ServletServerHttpRequest.RequestBodyPublisher .this . onError ( java.lang.Throwable ) ; }  <METHOD_END>
