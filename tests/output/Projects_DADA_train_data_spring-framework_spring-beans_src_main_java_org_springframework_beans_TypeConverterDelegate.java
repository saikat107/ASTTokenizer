<METHOD_START> public void ( PropertyEditorRegistrySupport org.springframework.beans.PropertyEditorRegistrySupport ) { this( org.springframework.beans.PropertyEditorRegistrySupport , null ); }  <METHOD_END>
<METHOD_START> public void ( PropertyEditorRegistrySupport org.springframework.beans.PropertyEditorRegistrySupport , java.lang.Object java.lang.Object ) { this . org.springframework.beans.PropertyEditorRegistrySupport = org.springframework.beans.PropertyEditorRegistrySupport ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , MethodParameter org.springframework.beans.MethodParameter )			throws java.lang.IllegalArgumentException { return java.lang.Object ( null , null , java.lang.Object , java.lang.Class<T> , ( org.springframework.beans.MethodParameter != null ? new TypeDescriptor ( org.springframework.beans.MethodParameter ) : TypeDescriptor . valueOf ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.reflect.Field java.lang.reflect.Field )			throws java.lang.IllegalArgumentException { return java.lang.Object ( null , null , java.lang.Object , java.lang.Class<T> , ( java.lang.reflect.Field != null ? new TypeDescriptor ( java.lang.reflect.Field ) : TypeDescriptor . valueOf ( java.lang.Class<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> )			throws java.lang.IllegalArgumentException { return java.lang.Object ( java.lang.String , java.lang.Object , java.lang.Object , java.lang.Class<T> , TypeDescriptor . valueOf ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> , TypeDescriptor org.springframework.beans.TypeDescriptor ) throws java.lang.IllegalArgumentException { java.beans.PropertyEditor java.beans.PropertyEditor = this . org.springframework.beans.PropertyEditorRegistrySupport . findCustomEditor ( java.lang.Class<T> , java.lang.String ) ; ConversionFailedException org.springframework.beans.ConversionFailedException = null ; ConversionService org.springframework.beans.ConversionService = this . org.springframework.beans.PropertyEditorRegistrySupport . getConversionService ( ) ; if ( java.beans.PropertyEditor == null && org.springframework.beans.ConversionService != null && java.lang.Object != null && org.springframework.beans.TypeDescriptor != null ) { TypeDescriptor org.springframework.beans.TypeDescriptor = TypeDescriptor . forObject ( java.lang.Object ) ; if ( org.springframework.beans.ConversionService . canConvert ( org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor ) ) { try { return ( T ) org.springframework.beans.ConversionService . convert ( java.lang.Object , org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor ) ; } catch ( ConversionFailedException org.springframework.beans.ConversionFailedException ) { org.springframework.beans.ConversionFailedException = org.springframework.beans.ConversionFailedException ; } } } java.lang.Object java.lang.Object = java.lang.Object ; if ( java.beans.PropertyEditor != null || ( java.lang.Class<T> != null && ! ClassUtils . isAssignableValue ( java.lang.Class<T> , java.lang.Object ) ) ) { if ( org.springframework.beans.TypeDescriptor != null && java.lang.Class<T> != null && java.util.Collection .class . boolean ( java.lang.Class<T> ) && java.lang.Object instanceof java.lang.String ) { TypeDescriptor org.springframework.beans.TypeDescriptor = org.springframework.beans.TypeDescriptor . getElementTypeDescriptor ( ) ; if ( org.springframework.beans.TypeDescriptor != null ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.TypeDescriptor . getType ( ) ; if ( java.lang.Class .class == java.lang.Class<> || java.lang.Enum .class . boolean ( java.lang.Class<> ) ) { java.lang.Object = StringUtils . commaDelimitedListToStringArray ( ( java.lang.String ) java.lang.Object ) ; } } } if ( java.beans.PropertyEditor == null ) { java.beans.PropertyEditor = java.beans.PropertyEditor ( java.lang.Class<T> ) ; } java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.Object , java.lang.Class<T> , java.beans.PropertyEditor ) ; } boolean boolean = false ; if ( java.lang.Class<T> != null ) { if ( java.lang.Object != null ) { if ( java.lang.Object .class == java.lang.Class<T> ) { return ( T ) java.lang.Object ; } else if ( java.lang.Class<T> . boolean ( ) ) { if ( java.lang.Object instanceof java.lang.String && java.lang.Enum .class . boolean ( java.lang.Class<T> . java.lang.Class<?> ( ) ) ) { java.lang.Object = StringUtils . commaDelimitedListToStringArray ( ( java.lang.String ) java.lang.Object ) ; } return ( T ) java.lang.Object ( java.lang.Object , java.lang.String , java.lang.Class<T> . java.lang.Class<?> ( ) ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.lang.Object = java.util.Collection<?> ( ( java.util.Collection<?> < ? > ) java.lang.Object , java.lang.String , java.lang.Class<T> , org.springframework.beans.TypeDescriptor ) ; boolean = true ; } else if ( java.lang.Object instanceof java.util.Map ) { java.lang.Object = java.util.Map<?,?> ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object , java.lang.String , java.lang.Class<T> , org.springframework.beans.TypeDescriptor ) ; boolean = true ; } if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) && java.lang.reflect.Array . int ( java.lang.Object ) == NUMBER ) { java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Object , NUMBER ) ; boolean = true ; } if ( java.lang.String .class == java.lang.Class<T> && ClassUtils . isPrimitiveOrWrapper ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ( T ) java.lang.Object . java.lang.String ( ) ; } else if ( java.lang.Object instanceof java.lang.String && ! java.lang.Class<T> . boolean ( java.lang.Object ) ) { if ( org.springframework.beans.ConversionFailedException == null && ! java.lang.Class<T> . boolean ( ) && ! java.lang.Class<T> . boolean ( ) ) { try { java.lang.reflect.Constructor<T> < T > java.lang.reflect.Constructor<T> = java.lang.Class<T> . java.lang.reflect.Constructor<T> ( java.lang.String .class ) ; return BeanUtils . instantiateClass ( java.lang.reflect.Constructor<T> , java.lang.Object ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING , java.lang.NoSuchMethodException ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } } java.lang.String java.lang.String = ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( ) ; if ( java.lang.Class<T> . boolean ( ) && STRING . boolean ( java.lang.String ) ) { return null ; } java.lang.Object = java.lang.Object ( java.lang.Class<T> , java.lang.String , java.lang.Object ) ; boolean = true ; } else if ( java.lang.Object instanceof java.lang.Number && java.lang.Number .class . boolean ( java.lang.Class<T> ) ) { java.lang.Object = NumberUtils . convertNumberToTargetClass ( ( java.lang.Number ) java.lang.Object , ( java.lang.Class<java.lang.Number> < java.lang.Number > ) java.lang.Class<T> ) ; boolean = true ; } } else { if ( java.lang.Class<T> == java.util.Optional .class ) { java.lang.Object = java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } } if ( ! ClassUtils . isAssignableValue ( java.lang.Class<T> , java.lang.Object ) ) { if ( org.springframework.beans.ConversionFailedException != null ) { throw org.springframework.beans.ConversionFailedException ; } else if ( org.springframework.beans.ConversionService != null ) { TypeDescriptor org.springframework.beans.TypeDescriptor = TypeDescriptor . forObject ( java.lang.Object ) ; if ( org.springframework.beans.ConversionService . canConvert ( org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor ) ) { return ( T ) org.springframework.beans.ConversionService . convert ( java.lang.Object , org.springframework.beans.TypeDescriptor , org.springframework.beans.TypeDescriptor ) ; } } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ClassUtils . getDescriptiveType ( java.lang.Object ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ClassUtils . getQualifiedName ( java.lang.Class<T> ) ) . append ( STRING ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } if ( java.beans.PropertyEditor != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.beans.PropertyEditor . java.lang.Class<? extends java.beans.PropertyEditor> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( ClassUtils . getDescriptiveType ( java.lang.Object ) ) . append ( STRING ) ; throw new java.lang.IllegalArgumentException ( java.lang.StringBuilder . java.lang.String ( ) ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; throw new java.lang.IllegalStateException ( java.lang.StringBuilder . java.lang.String ( ) ) ; } } } if ( org.springframework.beans.ConversionFailedException != null ) { if ( java.beans.PropertyEditor == null && ! boolean && java.lang.Class<T> != null && java.lang.Object .class != java.lang.Class<T> ) { throw org.springframework.beans.ConversionFailedException ; } org.springframework.beans.Log . debug ( STRING + STRING , org.springframework.beans.ConversionFailedException ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Enum .class == java.lang.Class<> ) { int int = java.lang.String . int ( STRING ) ; if ( int > - NUMBER ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; java.lang.ClassLoader java.lang.ClassLoader = this . java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.ClassLoader ( ) ; try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( java.lang.String ) ; java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } } } if ( java.lang.Object == java.lang.Object ) { try { java.lang.reflect.Field java.lang.reflect.Field = java.lang.Class<> . java.lang.reflect.Field ( java.lang.String ) ; java.lang.Object = java.lang.reflect.Field . java.lang.Object ( null ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Object + STRING , java.lang.Throwable ) ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.beans.PropertyEditor java.beans.PropertyEditor ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.beans.PropertyEditor java.beans.PropertyEditor = null ; if ( java.lang.Class<> != null ) { java.beans.PropertyEditor = this . org.springframework.beans.PropertyEditorRegistrySupport . getDefaultEditor ( java.lang.Class<> ) ; if ( java.beans.PropertyEditor == null && java.lang.String .class != java.lang.Class<> ) { java.beans.PropertyEditor = BeanUtils . findEditorByConvention ( java.lang.Class<> ) ; } } return java.beans.PropertyEditor ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , java.beans.PropertyEditor java.beans.PropertyEditor ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.beans.PropertyEditor != null && ! ( java.lang.Object instanceof java.lang.String ) ) { try { java.beans.PropertyEditor . void ( java.lang.Object ) ; java.lang.Object java.lang.Object = java.beans.PropertyEditor . java.lang.Object ( ) ; if ( java.lang.Object != java.lang.Object ) { java.lang.Object = java.lang.Object ; java.beans.PropertyEditor = null ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.beans.PropertyEditor . java.lang.Class<? extends java.beans.PropertyEditor> ( ) . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } } java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Class<> != null && ! java.lang.Class<> . boolean ( ) && java.lang.Object instanceof java.lang.String [] ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Object + STRING ) ; } java.lang.Object = StringUtils . arrayToCommaDelimitedString ( ( java.lang.String [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof java.lang.String ) { if ( java.beans.PropertyEditor != null ) { if ( org.springframework.beans.Log . isTraceEnabled ( ) ) { org.springframework.beans.Log . trace ( STRING + java.lang.Class<> + STRING + java.beans.PropertyEditor + STRING ) ; } java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; return java.lang.Object ( java.lang.Object , java.lang.String , java.beans.PropertyEditor ) ; } else if ( java.lang.String .class == java.lang.Class<> ) { java.lang.Object = java.lang.Object ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.beans.PropertyEditor java.beans.PropertyEditor ) { try { java.beans.PropertyEditor . void ( java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.beans.PropertyEditor . java.lang.Class<? extends java.beans.PropertyEditor> ( ) . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } java.beans.PropertyEditor . void ( java.lang.String ) ; return java.beans.PropertyEditor . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , java.util.Collection<> . int ( ) ) ; int int = NUMBER ; for ( java.util.Iterator<?> < ? > java.util.Iterator<?> = java.util.Collection<> . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ; int ++ ) { java.lang.Object java.lang.Object = convertIfNecessary ( java.lang.String ( java.lang.String , int ) , null , java.util.Iterator<> . next ( ) , java.lang.Class<> ) ; java.lang.reflect.Array . void ( java.lang.Object , int , java.lang.Object ) ; } return java.lang.Object ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<?> ( ) ) && ! this . org.springframework.beans.PropertyEditorRegistrySupport . hasCustomEditorForElement ( java.lang.Class<> , java.lang.String ) ) { return java.lang.Object ; } int int = java.lang.reflect.Array . int ( java.lang.Object ) ; java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Object java.lang.Object = convertIfNecessary ( java.lang.String ( java.lang.String , int ) , null , java.lang.reflect.Array . java.lang.Object ( java.lang.Object , int ) , java.lang.Class<> ) ; java.lang.reflect.Array . void ( java.lang.Object , int , java.lang.Object ) ; } return java.lang.Object ; } else { java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , NUMBER ) ; java.lang.Object java.lang.Object = convertIfNecessary ( java.lang.String ( java.lang.String , NUMBER ) , null , java.lang.Object , java.lang.Class<> ) ; java.lang.reflect.Array . void ( java.lang.Object , NUMBER , java.lang.Object ) ; return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Collection<?> < ? > java.util.Collection<?> ( java.util.Collection<?> < ? > java.util.Collection<?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , TypeDescriptor org.springframework.beans.TypeDescriptor ) { if ( ! java.util.Collection .class . boolean ( java.lang.Class<> ) ) { return java.util.Collection<> ; } boolean boolean = CollectionFactory . isApproximableCollectionType ( java.lang.Class<> ) ; if ( ! boolean && ! boolean ( java.lang.Class<> ) ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) . java.lang.String ( ) + STRING ) ; } return java.util.Collection<> ; } boolean boolean = java.lang.Class<> . boolean ( java.util.Collection<> ) ; TypeDescriptor org.springframework.beans.TypeDescriptor = org.springframework.beans.TypeDescriptor . getElementTypeDescriptor ( ) ; if ( org.springframework.beans.TypeDescriptor == null && boolean && ! this . org.springframework.beans.PropertyEditorRegistrySupport . hasCustomEditorForElement ( null , java.lang.String ) ) { return java.util.Collection<> ; } java.util.Iterator<?> < ? > java.util.Iterator<?> ; try { java.util.Iterator<?> = java.util.Collection<> . java.util.Iterator<> ( ) ; if ( java.util.Iterator<> == null ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) . java.lang.String ( ) + STRING ) ; } return java.util.Collection<> ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Collection<> ; } java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ; try { if ( boolean ) { java.util.Collection<java.lang.Object> = CollectionFactory . createApproximateCollection ( java.util.Collection<> , java.util.Collection<> . int ( ) ) ; } else { java.util.Collection<java.lang.Object> = ( java.util.Collection<java.lang.Object> < java.lang.Object > ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Collection<> ; } int int = NUMBER ; for (; java.util.Iterator<> . boolean ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , int ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , null , java.lang.Object , ( org.springframework.beans.TypeDescriptor != null ? org.springframework.beans.TypeDescriptor . getType ( ) : null ) , org.springframework.beans.TypeDescriptor ) ; try { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Collection<> ; } boolean = boolean && ( java.lang.Object == java.lang.Object ) ; } return ( boolean ? java.util.Collection<> : java.util.Collection<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , TypeDescriptor org.springframework.beans.TypeDescriptor ) { if ( ! java.util.Map .class . boolean ( java.lang.Class<> ) ) { return java.util.Map<,> ; } boolean boolean = CollectionFactory . isApproximableMapType ( java.lang.Class<> ) ; if ( ! boolean && ! boolean ( java.lang.Class<> ) ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Map<,> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.String ( ) + STRING ) ; } return java.util.Map<,> ; } boolean boolean = java.lang.Class<> . boolean ( java.util.Map<,> ) ; TypeDescriptor org.springframework.beans.TypeDescriptor = org.springframework.beans.TypeDescriptor . getMapKeyTypeDescriptor ( ) ; TypeDescriptor org.springframework.beans.TypeDescriptor = org.springframework.beans.TypeDescriptor . getMapValueTypeDescriptor ( ) ; if ( org.springframework.beans.TypeDescriptor == null && org.springframework.beans.TypeDescriptor == null && boolean && ! this . org.springframework.beans.PropertyEditorRegistrySupport . hasCustomEditorForElement ( null , java.lang.String ) ) { return java.util.Map<,> ; } java.util.Iterator<?> < ? > java.util.Iterator<?> ; try { java.util.Iterator<?> = java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) . java.util.Iterator<java.util.Map.Entry<,>> ( ) ; if ( java.util.Iterator<> == null ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Map<,> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.String ( ) + STRING ) ; } return java.util.Map<,> ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Map<,> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Map<,> ; } java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ; try { if ( boolean ) { java.util.Map<java.lang.Object,java.lang.Object> = CollectionFactory . createApproximateMap ( java.util.Map<,> , java.util.Map<,> . int ( ) ) ; } else { java.util.Map<java.lang.Object,java.lang.Object> = ( java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Map<,> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Map<,> ; } while ( java.util.Iterator<> . boolean ( ) ) { java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> = ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > ) java.util.Iterator<> . next ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getKey ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getValue ( ) ; java.lang.String java.lang.String = java.lang.String ( java.lang.String , java.lang.Object ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , null , java.lang.Object , ( org.springframework.beans.TypeDescriptor != null ? org.springframework.beans.TypeDescriptor . getType ( ) : null ) , org.springframework.beans.TypeDescriptor ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , null , java.lang.Object , ( org.springframework.beans.TypeDescriptor != null ? org.springframework.beans.TypeDescriptor . getType ( ) : null ) , org.springframework.beans.TypeDescriptor ) ; try { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.beans.Log . isDebugEnabled ( ) ) { org.springframework.beans.Log . debug ( STRING + java.util.Map<,> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.String ( ) + STRING + java.lang.Throwable ) ; } return java.util.Map<,> ; } boolean = boolean && ( java.lang.Object == java.lang.Object ) && ( java.lang.Object == java.lang.Object ) ; } return ( boolean ? java.util.Map<,> : java.util.Map<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , int int ) { return ( java.lang.String != null ? java.lang.String + PropertyAccessor . PROPERTY_KEY_PREFIX + int + PropertyAccessor . PROPERTY_KEY_SUFFIX : null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return ( java.lang.String != null ? java.lang.String + PropertyAccessor . PROPERTY_KEY_PREFIX + java.lang.Object + PropertyAccessor . PROPERTY_KEY_SUFFIX : null ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( ! java.lang.Class<> . boolean ( ) && ! java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) && java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) && ClassUtils . hasConstructor ( java.lang.Class<> ) ) ; }  <METHOD_END>
