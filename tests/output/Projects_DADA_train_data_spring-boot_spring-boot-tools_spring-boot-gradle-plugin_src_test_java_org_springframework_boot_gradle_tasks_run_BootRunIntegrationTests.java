<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.tasks.run.GradleBuild . getProjectDir ( ) , STRING ) ; java.io.File . boolean ( ) ; FileSystemUtils . copyRecursively ( new java.io.File ( STRING ) , java.io.File ) ; new java.io.File ( this . org.springframework.boot.gradle.tasks.run.GradleBuild . getProjectDir ( ) , STRING ) . boolean ( ) ; BuildResult org.springframework.boot.gradle.tasks.run.BuildResult = this . org.springframework.boot.gradle.tasks.run.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING + java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING + java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . doesNotContain ( java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.gradle.tasks.run.GradleBuild . getProjectDir ( ) , STRING ) ; java.io.File . boolean ( ) ; FileSystemUtils . copyRecursively ( new java.io.File ( STRING ) , java.io.File ) ; BuildResult org.springframework.boot.gradle.tasks.run.BuildResult = this . org.springframework.boot.gradle.tasks.run.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . SUCCESS ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING + java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING + java.lang.String ( STRING ) ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . doesNotContain ( java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BuildResult org.springframework.boot.gradle.tasks.run.BuildResult = this . org.springframework.boot.gradle.tasks.run.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . UP_TO_DATE ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { BuildResult org.springframework.boot.gradle.tasks.run.BuildResult = this . org.springframework.boot.gradle.tasks.run.GradleBuild . build ( STRING ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . task ( STRING ) . getOutcome ( ) ) . isEqualTo ( TaskOutcome . UP_TO_DATE ) ; assertThat ( org.springframework.boot.gradle.tasks.run.BuildResult . getOutput ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws java.io.IOException { return new java.io.File ( this . org.springframework.boot.gradle.tasks.run.GradleBuild . getProjectDir ( ) . getCanonicalFile ( ) , java.lang.String ) . java.net.URI ( ) . java.net.URL ( ) . java.lang.String ( ) ; }  <METHOD_END>
