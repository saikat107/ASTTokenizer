<METHOD_START> protected void ( java.util.concurrent.Future<S> < S > java.util.concurrent.Future<S> ) { Assert . notNull ( java.util.concurrent.Future<S> , STRING ) ; this . java.util.concurrent.Future<S> = java.util.concurrent.Future<S> ; }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.Future<S> < S > java.util.concurrent.Future<S> ( ) { return this . java.util.concurrent.Future<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { return this . java.util.concurrent.Future<S> . boolean ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.Future<S> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.Future<S> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { return T ( this . java.util.concurrent.Future<S> . S ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { return T ( this . java.util.concurrent.Future<S> . S ( long , java.util.concurrent.TimeUnit ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) final T T ( S S ) throws java.util.concurrent.ExecutionException { synchronized ( this . java.lang.Object ) { switch ( this . org.springframework.util.concurrent.FutureAdapter.State ) { case org.springframework.util.concurrent.FutureAdapter.State : return ( T ) this . java.lang.Object ; case org.springframework.util.concurrent.FutureAdapter.State : throw ( java.util.concurrent.ExecutionException ) this . java.lang.Object ; case org.springframework.util.concurrent.FutureAdapter.State : try { T T = T ( S ) ; this . java.lang.Object = T ; this . org.springframework.util.concurrent.FutureAdapter.State = org.springframework.util.concurrent.FutureAdapter.State . org.springframework.util.concurrent.FutureAdapter.State ; return T ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { this . java.lang.Object = java.util.concurrent.ExecutionException ; this . org.springframework.util.concurrent.FutureAdapter.State = org.springframework.util.concurrent.FutureAdapter.State . org.springframework.util.concurrent.FutureAdapter.State ; throw java.util.concurrent.ExecutionException ; } catch ( java.lang.Throwable java.lang.Throwable ) { java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException = new java.util.concurrent.ExecutionException ( java.lang.Throwable ) ; this . java.lang.Object = java.util.concurrent.ExecutionException ; this . org.springframework.util.concurrent.FutureAdapter.State = org.springframework.util.concurrent.FutureAdapter.State . org.springframework.util.concurrent.FutureAdapter.State ; throw java.util.concurrent.ExecutionException ; } default: throw new java.lang.IllegalStateException ( ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract T T ( S S ) throws java.util.concurrent.ExecutionException ;  <METHOD_END>
