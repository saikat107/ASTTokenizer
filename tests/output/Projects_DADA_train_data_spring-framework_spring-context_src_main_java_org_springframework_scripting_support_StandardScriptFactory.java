<METHOD_START> public void ( java.lang.String java.lang.String ) { this( null , java.lang.String , ( java.lang.Class<?> < ? > [] ) null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this( null , java.lang.String , java.lang.Class<?>[] ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( java.lang.String , java.lang.String , ( java.lang.Class<?> < ? > [] ) null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . java.lang.Class<?>[] = java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.support.ScriptSource , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.io.IOException , org.springframework.scripting.support.ScriptCompilationException { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.scripting.support.ScriptSource ) ; if ( ! ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { boolean boolean = false ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Object instanceof java.lang.Class ? ! java.lang.Class<> . boolean ( ( java.lang.Class<?> < ? > ) java.lang.Object ) : ! java.lang.Class<> . boolean ( java.lang.Object ) ) { boolean = true ; } } if ( boolean ) { java.lang.Object = java.lang.Object ( java.lang.Object , org.springframework.scripting.support.ScriptSource , java.lang.Class<?>[] ) ; } } if ( java.lang.Object instanceof java.lang.Class ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.Object ; try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new ScriptCompilationException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.InstantiationException java.lang.InstantiationException ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.InstantiationException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.IllegalAccessException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new ScriptCompilationException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.support.ScriptSource ) { try { if ( this . javax.script.ScriptEngine == null ) { this . javax.script.ScriptEngine = javax.script.ScriptEngine ( org.springframework.scripting.support.ScriptSource ) ; if ( this . javax.script.ScriptEngine == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.scripting.support.ScriptSource ) ; } } return this . javax.script.ScriptEngine . java.lang.Object ( org.springframework.scripting.support.ScriptSource . getScriptAsString ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected javax.script.ScriptEngine javax.script.ScriptEngine ( ScriptSource org.springframework.scripting.support.ScriptSource ) { javax.script.ScriptEngineManager javax.script.ScriptEngineManager = new javax.script.ScriptEngineManager ( this . java.lang.ClassLoader ) ; if ( this . java.lang.String != null ) { return StandardScriptUtils . retrieveEngineByName ( javax.script.ScriptEngineManager , this . java.lang.String ) ; } if ( org.springframework.scripting.support.ScriptSource instanceof ResourceScriptSource ) { java.lang.String java.lang.String = ( ( ResourceScriptSource ) org.springframework.scripting.support.ScriptSource ) . getResource ( ) . getFilename ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = StringUtils . getFilenameExtension ( java.lang.String ) ; if ( java.lang.String != null ) { javax.script.ScriptEngine javax.script.ScriptEngine = javax.script.ScriptEngineManager . javax.script.ScriptEngine ( java.lang.String ) ; if ( javax.script.ScriptEngine != null ) { return javax.script.ScriptEngine ; } } } } return null ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , ScriptSource org.springframework.scripting.support.ScriptSource , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Class<?> < ? > java.lang.Class<?> ; if ( java.lang.Class<?>[] . int == NUMBER ) { java.lang.Class<?> = java.lang.Class<?>[] [ NUMBER ] ; } else { java.lang.Class<?> = ClassUtils . createCompositeInterface ( java.lang.Class<?>[] , this . java.lang.ClassLoader ) ; } if ( java.lang.Class<> != null ) { if ( ! ( this . javax.script.ScriptEngine instanceof javax.script.Invocable ) ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , STRING + this . javax.script.ScriptEngine ) ; } javax.script.Invocable javax.script.Invocable = ( javax.script.Invocable ) this . javax.script.ScriptEngine ; if ( java.lang.Object != null ) { java.lang.Object = javax.script.Invocable . getInterface ( java.lang.Object , java.lang.Class<> ) ; } if ( java.lang.Object == null ) { java.lang.Object = javax.script.Invocable . getInterface ( java.lang.Class<> ) ; if ( java.lang.Object == null ) { throw new ScriptCompilationException ( org.springframework.scripting.support.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ScriptSource org.springframework.scripting.support.ScriptSource )			throws java.io.IOException , org.springframework.scripting.support.ScriptCompilationException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ScriptSource org.springframework.scripting.support.ScriptSource ) { return org.springframework.scripting.support.ScriptSource . isModified ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
