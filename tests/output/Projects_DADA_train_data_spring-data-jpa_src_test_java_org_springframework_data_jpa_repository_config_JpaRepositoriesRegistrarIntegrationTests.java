<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.config.EntityManagerFactory org.springframework.data.jpa.repository.config.EntityManagerFactory ( ) { LocalContainerEntityManagerFactoryBean org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean ( ) ; org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean . setDataSource ( javax.sql.DataSource ( ) ) ; org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean . setPersistenceUnitName ( STRING ) ; org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean . setJpaVendorAdapter ( new HibernateJpaVendorAdapter ( ) ) ; org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.data.jpa.repository.config.LocalContainerEntityManagerFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.config.JpaDialect org.springframework.data.jpa.repository.config.JpaDialect ( ) { return new HibernateJpaDialect ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.config.PlatformTransactionManager org.springframework.data.jpa.repository.config.PlatformTransactionManager ( ) { return new JpaTransactionManager ( org.springframework.data.jpa.repository.config.EntityManagerFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarIntegrationTests.SampleRepository org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarIntegrationTests.SampleRepository ( ) { return new org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarIntegrationTests.SampleRepository ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.config.UserRepository , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarIntegrationTests.SampleRepository , is ( notNullValue ( ) ) ) ; assertThat ( ClassUtils . isCglibProxy ( org.springframework.data.jpa.repository.config.JpaRepositoriesRegistrarIntegrationTests.SampleRepository ) , is ( false ) ) ; void ( org.springframework.data.jpa.repository.config.UserRepository ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return; } assertThat ( java.lang.Object , is ( instanceOf ( Advised .class ) ) ) ; java.util.List<org.springframework.data.jpa.repository.config.Advisor> < Advisor > java.util.List<org.springframework.data.jpa.repository.config.Advisor> = java.util.Arrays . java.util.List ( ( ( Advised ) java.lang.Object ) . getAdvisors ( ) ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.config.Advisor> , Matchers .< Advisor > hasItem ( Matchers .< Advisor > hasProperty ( STRING , instanceOf ( PersistenceExceptionTranslationInterceptor .class ) ) ) ) ; }  <METHOD_END>
