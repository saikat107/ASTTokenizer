<METHOD_START> public void ( ) { super( BootWar .class , STRING , STRING , STRING ); }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { getTask ( ) . setMainClass ( STRING ) ; getTask ( ) . providedClasspath ( this . temp . newFile ( STRING ) , this . temp . newFile ( STRING ) ) ; getTask ( ) . execute ( ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( getTask ( ) . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { getTask ( ) . setMainClass ( STRING ) ; getTask ( ) . providedClasspath ( this . temp . newFile ( STRING ) ) ; getTask ( ) . execute ( ) ; assertThat ( getTask ( ) . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( getTask ( ) . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNull ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { getTask ( ) . setMainClass ( STRING ) ; getTask ( ) . providedClasspath ( this . temp . newFile ( STRING ) ) ; getTask ( ) . setExcludeDevtools ( false ) ; getTask ( ) . execute ( ) ; assertThat ( getTask ( ) . getArchivePath ( ) . exists ( ) ) ; try ( java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( getTask ( ) . getArchivePath ( ) ) ) { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } }  <METHOD_END>
