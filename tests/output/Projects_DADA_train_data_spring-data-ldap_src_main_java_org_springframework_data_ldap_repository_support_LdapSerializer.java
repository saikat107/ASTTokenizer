<METHOD_START> public void ( ObjectDirectoryMapper org.springframework.data.ldap.repository.support.ObjectDirectoryMapper , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.data.ldap.repository.support.ObjectDirectoryMapper = org.springframework.data.ldap.repository.support.ObjectDirectoryMapper ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.ldap.repository.support.Filter org.springframework.data.ldap.repository.support.Filter ( Expression < ? > org.springframework.data.ldap.repository.support.Expression<?> ) { return ( Filter ) org.springframework.data.ldap.repository.support.Expression<> . accept ( this , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Constant < ? > org.springframework.data.ldap.repository.support.Constant<?> , java.lang.Void java.lang.Void ) { return org.springframework.data.ldap.repository.support.Constant<> . getConstant ( ) . toString ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( FactoryExpression < ? > org.springframework.data.ldap.repository.support.FactoryExpression<?> , java.lang.Void java.lang.Void ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Operation < ? > org.springframework.data.ldap.repository.support.Operation<?> , java.lang.Void java.lang.Void ) { Operator org.springframework.data.ldap.repository.support.Operator = org.springframework.data.ldap.repository.support.Operation<> . getOperator ( ) ; if ( org.springframework.data.ldap.repository.support.Operator == Ops . EQ ) { return new EqualsFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . AND ) { return new AndFilter ( ) . and ( org.springframework.data.ldap.repository.support.Filter ( org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) ) ) . and ( org.springframework.data.ldap.repository.support.Filter ( org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . OR ) { return new OrFilter ( ) . or ( org.springframework.data.ldap.repository.support.Filter ( org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) ) ) . or ( org.springframework.data.ldap.repository.support.Filter ( org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . NOT ) { return new NotFilter ( org.springframework.data.ldap.repository.support.Filter ( org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . LIKE ) { return new LikeFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . STARTS_WITH || org.springframework.data.ldap.repository.support.Operator == Ops . STARTS_WITH_IC ) { return new LikeFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) + STRING ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . ENDS_WITH || org.springframework.data.ldap.repository.support.Operator == Ops . ENDS_WITH_IC ) { return new LikeFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , STRING + java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . STRING_CONTAINS || org.springframework.data.ldap.repository.support.Operator == Ops . STRING_CONTAINS_IC ) { return new LikeFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , STRING + java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) + STRING ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . IS_NOT_NULL ) { return new PresentFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . IS_NULL ) { return new NotFilter ( new PresentFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . GOE ) { return new GreaterThanOrEqualsFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } else if ( org.springframework.data.ldap.repository.support.Operator == Ops . LOE ) { return new LessThanOrEqualsFilter ( java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) , java.lang.String ( org.springframework.data.ldap.repository.support.Operation<> ) ) ; } throw new java.lang.UnsupportedOperationException ( STRING + org.springframework.data.ldap.repository.support.Operator . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Operation < ? > org.springframework.data.ldap.repository.support.Operation<?> ) { return ( java.lang.String ) org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) . accept ( this , null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Operation < ? > org.springframework.data.ldap.repository.support.Operation<?> ) { return org.springframework.data.ldap.repository.support.ObjectDirectoryMapper . attributeFor ( java.lang.Class<> , ( java.lang.String ) org.springframework.data.ldap.repository.support.Operation<> . getArg ( NUMBER ) . accept ( this , null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ParamExpression < ? > org.springframework.data.ldap.repository.support.ParamExpression<?> , java.lang.Void java.lang.Void ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Path < ? > org.springframework.data.ldap.repository.support.Path<?> , java.lang.Void java.lang.Void ) { return org.springframework.data.ldap.repository.support.Path<> . getMetadata ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( SubQueryExpression < ? > org.springframework.data.ldap.repository.support.SubQueryExpression<?> , java.lang.Void java.lang.Void ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TemplateExpression < ? > org.springframework.data.ldap.repository.support.TemplateExpression<?> , java.lang.Void java.lang.Void ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
