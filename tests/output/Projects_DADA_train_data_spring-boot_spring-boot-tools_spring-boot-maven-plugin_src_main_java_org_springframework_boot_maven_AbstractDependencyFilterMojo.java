<METHOD_START> protected void void ( java.util.List<org.springframework.boot.maven.Exclude> < Exclude > java.util.List<org.springframework.boot.maven.Exclude> ) { this . java.util.List<org.springframework.boot.maven.Exclude> = java.util.List<org.springframework.boot.maven.Exclude> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.boot.maven.Include> < Include > java.util.List<org.springframework.boot.maven.Include> ) { this . java.util.List<org.springframework.boot.maven.Include> = java.util.List<org.springframework.boot.maven.Include> ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<org.springframework.boot.maven.Artifact> < Artifact > java.util.Set<org.springframework.boot.maven.Artifact> ( java.util.Set<org.springframework.boot.maven.Artifact> < Artifact > java.util.Set<org.springframework.boot.maven.Artifact> , FilterArtifacts org.springframework.boot.maven.FilterArtifacts ) throws org.springframework.boot.maven.MojoExecutionException { try { java.util.Set<org.springframework.boot.maven.Artifact> < Artifact > java.util.Set<org.springframework.boot.maven.Artifact> = new java.util.LinkedHashSet <> ( java.util.Set<org.springframework.boot.maven.Artifact> ) ; java.util.Set<org.springframework.boot.maven.Artifact> . retainAll ( org.springframework.boot.maven.FilterArtifacts . filter ( java.util.Set<org.springframework.boot.maven.Artifact> ) ) ; return java.util.Set<org.springframework.boot.maven.Artifact> ; } catch ( ArtifactFilterException org.springframework.boot.maven.ArtifactFilterException ) { throw new MojoExecutionException ( org.springframework.boot.maven.ArtifactFilterException . getMessage ( ) , org.springframework.boot.maven.ArtifactFilterException ) ; } }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.maven.FilterArtifacts org.springframework.boot.maven.FilterArtifacts ( ArtifactsFilter ... org.springframework.boot.maven.ArtifactsFilter[] ) { FilterArtifacts org.springframework.boot.maven.FilterArtifacts = new FilterArtifacts ( ) ; for ( ArtifactsFilter org.springframework.boot.maven.ArtifactsFilter : org.springframework.boot.maven.ArtifactsFilter[] ) { org.springframework.boot.maven.FilterArtifacts . addFilter ( org.springframework.boot.maven.ArtifactsFilter ) ; } org.springframework.boot.maven.FilterArtifacts . addFilter ( new ArtifactIdFilter ( STRING , java.lang.String ( this . java.lang.String ) ) ) ; org.springframework.boot.maven.FilterArtifacts . addFilter ( new MatchingGroupIdFilter ( java.lang.String ( this . java.lang.String ) ) ) ; if ( this . java.util.List<org.springframework.boot.maven.Include> != null && ! this . java.util.List<org.springframework.boot.maven.Include> . isEmpty ( ) ) { org.springframework.boot.maven.FilterArtifacts . addFilter ( new IncludeFilter ( this . java.util.List<org.springframework.boot.maven.Include> ) ) ; } if ( this . java.util.List<org.springframework.boot.maven.Exclude> != null && ! this . java.util.List<org.springframework.boot.maven.Exclude> . isEmpty ( ) ) { org.springframework.boot.maven.FilterArtifacts . addFilter ( new ExcludeFilter ( this . java.util.List<org.springframework.boot.maven.Exclude> ) ) ; } return org.springframework.boot.maven.FilterArtifacts ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null || java.lang.String . java.lang.String ( ) . boolean ( ) ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.util.StringTokenizer java.util.StringTokenizer = new java.util.StringTokenizer ( java.lang.String , STRING ) ; while ( java.util.StringTokenizer . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.util.StringTokenizer . java.lang.String ( ) . java.lang.String ( ) ) ; if ( java.util.StringTokenizer . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
