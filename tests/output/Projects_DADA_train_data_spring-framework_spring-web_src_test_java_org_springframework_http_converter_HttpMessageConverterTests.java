<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING ) ; HttpMessageConverter < org.springframework.http.converter.HttpMessageConverterTests.MyType > org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> = new org.springframework.http.converter.HttpMessageConverterTests.MyHttpMessageConverter <> ( org.springframework.http.converter.MediaType ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , org.springframework.http.converter.MediaType ) ) ; assertFalse ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING ) ; HttpMessageConverter < org.springframework.http.converter.HttpMessageConverterTests.MyType > org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> = new org.springframework.http.converter.HttpMessageConverterTests.MyHttpMessageConverter <> ( org.springframework.http.converter.MediaType ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertFalse ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canRead ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING , STRING ) ; HttpMessageConverter < org.springframework.http.converter.HttpMessageConverterTests.MyType > org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> = new org.springframework.http.converter.HttpMessageConverterTests.MyHttpMessageConverter <> ( org.springframework.http.converter.MediaType ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , org.springframework.http.converter.MediaType ) ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MediaType org.springframework.http.converter.MediaType = new MediaType ( STRING ) ; HttpMessageConverter < org.springframework.http.converter.HttpMessageConverterTests.MyType > org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> = new org.springframework.http.converter.HttpMessageConverterTests.MyHttpMessageConverter <> ( org.springframework.http.converter.MediaType ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.HttpMessageConverter<org.springframework.http.converter.HttpMessageConverterTests.MyType> . canWrite ( org.springframework.http.converter.HttpMessageConverterTests.MyType .class , MediaType . ALL ) ) ; }  <METHOD_END>
<METHOD_START> private void ( MediaType org.springframework.http.converter.MediaType ) { super( org.springframework.http.converter.MediaType ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.http.converter.HttpMessageConverterTests.MyType .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.HttpInputMessage )				throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { fail ( STRING ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( T T , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )				throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { fail ( STRING ) ; }  <METHOD_END>
