<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( FileSystemUtils . WORKING_DIRECTORY , java.lang.String . java.lang.String ( ) ) ; Assert . isTrue ( java.io.File . boolean ( ) || java.io.File . boolean ( ) ) ; void ( STRING , java.io.File ) ; Assert . isTrue ( new java.io.File ( java.io.File , STRING ) . boolean ( ) , java.lang.String . java.lang.String ( STRING , java.io.File ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( NUMBER ) ; java.util.List<java.lang.String> . boolean ( ServerLauncher . Command . START . getName ( ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , STRING ) ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , STRING ) ) ; org.springframework.data.gemfire.client.ProcessWrapper = ProcessExecutor . launch ( java.io.File , java.lang.String ( ) , ServerLauncher .class , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; void ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , org.springframework.data.gemfire.client.ProcessWrapper , GemFireBasedServerProcess . getServerProcessControlFilename ( ) ) ; java.lang.System . java.io.PrintStream . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String , java.io.File java.io.File ) throws java.io.IOException { FileCopyUtils . copy ( new ClassPathResource ( java.lang.String ) . getInputStream ( ) , new java.io.FileOutputStream ( new java.io.File ( java.io.File , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( ) { java.lang.String [] java.lang.String[] = ProcessExecutor . JAVA_CLASSPATH . split ( java.io.File . java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ! java.lang.String . boolean ( STRING ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , java.io.File . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final long long , final ProcessWrapper org.springframework.data.gemfire.client.ProcessWrapper , final java.lang.String java.lang.String ) { ThreadUtils . timedWait ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , new ThreadUtils . ThreadUtils ( ) { private java.io.File java.io.File = new java.io.File ( org.springframework.data.gemfire.client.ProcessWrapper . getWorkingDirectory ( ) , java.lang.String ) ; @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.client.ProcessWrapper . shutdown ( ) ; if ( java.lang.Boolean . java.lang.Boolean ( java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ) { org . springframework . util . FileSystemUtils . deleteRecursively ( org.springframework.data.gemfire.client.ProcessWrapper . getWorkingDirectory ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Region org.springframework.data.gemfire.client.Region , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.client.Region , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region . getName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region . getFullPath ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCache . getRegion ( org.springframework.data.gemfire.client.Region . getFullPath ( ) ) , is ( sameInstance ( org.springframework.data.gemfire.client.Region ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ApplicationContext . getBean ( java.lang.String , Region .class ) , is ( sameInstance ( org.springframework.data.gemfire.client.Region ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( org.springframework.data.gemfire.client.Region , STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING ) ; }  <METHOD_END>
