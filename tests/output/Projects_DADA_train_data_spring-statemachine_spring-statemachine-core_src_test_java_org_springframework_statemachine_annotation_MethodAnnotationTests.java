<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.annotation.AnnotationConfigApplicationContext org.springframework.statemachine.annotation.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig1 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig1 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig1 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . void ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . stop ( ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig5 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . java.lang.Object , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig2 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E2 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.util.Map<java.lang.String,java.lang.Object> , notNullValue ( ) ) ; assertThat ( ( java.lang.String ) org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . org.springframework.statemachine.annotation.ExtendedState , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.lang.Object , notNullValue ( ) ) ; assertThat ( ( java.lang.String ) org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 . java.lang.Object , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig3 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig4 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( context . containsBean ( STRING ) , is ( true ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . int , is ( NUMBER ) ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig6 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E4 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( false ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> , notNullValue ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> . getPayload ( ) , is ( TestEvents . E4 ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig7 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E4 ) . build ( ) ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . setStateMachineError ( new java.lang.RuntimeException ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 . java.lang.Exception , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig8 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . EF ) . build ( ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig9 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E3 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S21 ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.annotation.MethodAnnotationTests.BeanConfig10 .class , org.springframework.statemachine.annotation.MethodAnnotationTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 = context . getBean ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 .class ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . start ( ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E2 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E3 ) ; org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . sendEvent ( TestEvents . E4 ) ; assertThat ( org.springframework.statemachine.annotation.ObjectStateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S21 ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransitionEnd public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransitionStart public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateChanged ( source = STRING , target = STRING ) public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateChanged public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateMachineStart public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; int ++ ; }  <METHOD_END>
<METHOD_START> @ OnStateMachineStart public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) {		}  <METHOD_END>
<METHOD_START> @ OnStateMachineStop public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; int ++ ; }  <METHOD_END>
<METHOD_START> @ OnStateMachineStop public void void ( StateMachine < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachine<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) {		}  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int , int int , int int , int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( @ EventHeaders java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ExtendedState org.springframework.statemachine.annotation.ExtendedState ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; org.springframework.statemachine.annotation.ExtendedState . getVariables ( ) . put ( STRING , STRING ) ; this . org.springframework.statemachine.annotation.ExtendedState = org.springframework.statemachine.annotation.ExtendedState ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( source = STRING , target = STRING ) public void void ( @ EventHeaders java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , ExtendedState org.springframework.statemachine.annotation.ExtendedState ) { java.lang.Object = org.springframework.statemachine.annotation.ExtendedState . getVariables ( ) . get ( STRING ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateChanged public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateEntry public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateExit public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { int = NUMBER ; int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; }  <METHOD_END>
<METHOD_START> @ OnExtendedStateChanged public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnExtendedStateChanged public void void ( @ ExtendedStateVariable ( STRING ) java.lang.Object java.lang.Object ) { java.lang.Object = java.lang.Object ; int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnExtendedStateChanged ( key = STRING ) public void void ( ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; int = NUMBER ; java.lang.Object = null ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ OnEventNotAccepted public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnEventNotAccepted ( event = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnEventNotAccepted ( event = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnEventNotAccepted ( ) public void void ( Message < TestEvents > org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> ) { org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> = org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnEventNotAccepted ( event = { STRING , STRING } ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.statemachine.annotation.Message<org.springframework.statemachine.annotation.TestEvents> = null ; }  <METHOD_END>
<METHOD_START> @ OnStateMachineError public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateMachineError public void void ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateEntry ( target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnTransition ( target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ OnStateEntry ( target = STRING ) public void void ( ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean1 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean2 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean3 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean4 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean5 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean6 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean7 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean8 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean9 ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 ( ) { return new org.springframework.statemachine.annotation.MethodAnnotationTests.Bean10 ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . end ( TestStates . SF ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . guard ( org.springframework.statemachine.annotation.TestGuard ( ) ) . action ( org.springframework.statemachine.annotation.TestAction ( ) ) . action ( org.springframework.statemachine.annotation.Action<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . SF ) . event ( TestEvents . EF ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestGuard org.springframework.statemachine.annotation.TestGuard ( ) { return new TestGuard ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.TestAction org.springframework.statemachine.annotation.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.annotation.Action<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.annotation.Action<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ( ) { return new Action < TestStates , TestEvents > ( ) { @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) { java.lang.String java.lang.String = org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , java.lang.String ) ; } } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) { java.lang.String java.lang.String = org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ; if ( java.lang.String != null ) { org.springframework.statemachine.annotation.StateContext<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . getExtendedState ( ) . getVariables ( ) . put ( STRING , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . history ( TestStates . SH , History . SHALLOW ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S1 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . SH ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineStateConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . end ( TestStates . S21 ) . history ( TestStates . SH , History . SHALLOW ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.annotation.StateMachineTransitionConfigurer<org.springframework.statemachine.annotation.TestStates,org.springframework.statemachine.annotation.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S1 ) . event ( TestEvents . E3 ) . and ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . SH ) . event ( TestEvents . E4 ) ; }  <METHOD_END>
