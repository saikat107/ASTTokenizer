<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ResourceAdapter org.springframework.jms.listener.endpoint.ResourceAdapter ) { java.lang.String java.lang.String = org.springframework.jms.listener.endpoint.ResourceAdapter . getClass ( ) . getName ( ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; try { return org.springframework.jms.listener.endpoint.ResourceAdapter . getClass ( ) . getClassLoader ( ) . loadClass ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.jms.listener.endpoint.Log . debug ( STRING + java.lang.String ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - java.lang.String . int ( ) ) ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; try { return org.springframework.jms.listener.endpoint.ResourceAdapter . getClass ( ) . getClassLoader ( ) . loadClass ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.jms.listener.endpoint.Log . debug ( STRING + java.lang.String ) ; } } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( '.' ) + NUMBER ) ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; try { return org.springframework.jms.listener.endpoint.ResourceAdapter . getClass ( ) . getClassLoader ( ) . loadClass ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.jms.listener.endpoint.Log . debug ( STRING + java.lang.String ) ; } java.lang.String = java.lang.String + STRING + java.lang.String ; try { return org.springframework.jms.listener.endpoint.ResourceAdapter . getClass ( ) . getClassLoader ( ) . loadClass ( java.lang.String ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { org.springframework.jms.listener.endpoint.Log . debug ( STRING + java.lang.String ) ; } throw new java.lang.IllegalStateException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanWrapper org.springframework.jms.listener.endpoint.BeanWrapper , JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) { super. populateActivationSpecProperties ( org.springframework.jms.listener.endpoint.BeanWrapper , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) ; if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMaxConcurrency ( ) > NUMBER ) { if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMaxConcurrency ( ) ) ) ; } else if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMaxConcurrency ( ) ) ) ; } else if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMaxConcurrency ( ) ) ) ; } } if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getPrefetchSize ( ) > NUMBER ) { if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getPrefetchSize ( ) ) ) ; } else if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getPrefetchSize ( ) ) ) ; } else if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Integer . java.lang.String ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getPrefetchSize ( ) ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeanWrapper org.springframework.jms.listener.endpoint.BeanWrapper , int int ) { if ( int == Session . SESSION_TRANSACTED && org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , STRING ) ; } else { super. applyAcknowledgeMode ( org.springframework.jms.listener.endpoint.BeanWrapper , int ) ; } }  <METHOD_END>
