<METHOD_START> public void ( LiquibaseProperties org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties , ResourceLoader org.springframework.boot.autoconfigure.liquibase.ResourceLoader , ObjectProvider < javax.sql.DataSource > org.springframework.boot.autoconfigure.liquibase.ObjectProvider<javax.sql.DataSource> , @ LiquibaseDataSource ObjectProvider < javax.sql.DataSource > org.springframework.boot.autoconfigure.liquibase.ObjectProvider<javax.sql.DataSource> ) { this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties = org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties ; this . org.springframework.boot.autoconfigure.liquibase.ResourceLoader = org.springframework.boot.autoconfigure.liquibase.ResourceLoader ; this . javax.sql.DataSource = org.springframework.boot.autoconfigure.liquibase.ObjectProvider<javax.sql.DataSource> . getIfUnique ( ) ; this . javax.sql.DataSource = org.springframework.boot.autoconfigure.liquibase.ObjectProvider<javax.sql.DataSource> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { if ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . isCheckChangeLogLocation ( ) ) { Resource org.springframework.boot.autoconfigure.liquibase.Resource = this . org.springframework.boot.autoconfigure.liquibase.ResourceLoader . getResource ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getChangeLog ( ) ) ; Assert . state ( org.springframework.boot.autoconfigure.liquibase.Resource . exists ( ) , STRING + org.springframework.boot.autoconfigure.liquibase.Resource + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.liquibase.SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase ( ) { SpringLiquibase org.springframework.boot.autoconfigure.liquibase.SpringLiquibase = new SpringLiquibase ( ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setChangeLog ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getChangeLog ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setContexts ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getContexts ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setDataSource ( javax.sql.DataSource ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setDefaultSchema ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getDefaultSchema ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setDropFirst ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . isDropFirst ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setShouldRun ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . isEnabled ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setLabels ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getLabels ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setChangeLogParameters ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getParameters ( ) ) ; org.springframework.boot.autoconfigure.liquibase.SpringLiquibase . setRollbackFile ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getRollbackFile ( ) ) ; return org.springframework.boot.autoconfigure.liquibase.SpringLiquibase ; }  <METHOD_END>
<METHOD_START> private javax.sql.DataSource javax.sql.DataSource ( ) { if ( this . javax.sql.DataSource != null ) { return this . javax.sql.DataSource ; } else if ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getUrl ( ) == null ) { return this . javax.sql.DataSource ; } return DataSourceBuilder . create ( ) . url ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getUrl ( ) ) . username ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getUser ( ) ) . password ( this . org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties . getPassword ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
