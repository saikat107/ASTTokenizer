<METHOD_START> public void ( ) { super( HttpMethod . GET . name ( ) , HttpMethod . HEAD . name ( ) ); }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> ) { Assert . notNull ( java.util.List<org.springframework.web.servlet.resource.Resource> , STRING ) ; this . java.util.List<org.springframework.web.servlet.resource.Resource> . clear ( ) ; this . java.util.List<org.springframework.web.servlet.resource.Resource> . addAll ( java.util.List<org.springframework.web.servlet.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.resource.Resource> < Resource > java.util.List<org.springframework.web.servlet.resource.Resource> ( ) { return this . java.util.List<org.springframework.web.servlet.resource.Resource> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ) { this . java.util.List<org.springframework.web.servlet.resource.ResourceResolver> . clear ( ) ; if ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> != null ) { this . java.util.List<org.springframework.web.servlet.resource.ResourceResolver> . addAll ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) { return this . java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ) { this . java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> . clear ( ) ; if ( java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> != null ) { this . java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> . addAll ( java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ( ) { return this . java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceHttpMessageConverter org.springframework.web.servlet.resource.ResourceHttpMessageConverter ) { this . org.springframework.web.servlet.resource.ResourceHttpMessageConverter = org.springframework.web.servlet.resource.ResourceHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.resource.ResourceHttpMessageConverter org.springframework.web.servlet.resource.ResourceHttpMessageConverter ( ) { return this . org.springframework.web.servlet.resource.ResourceHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( ResourceRegionHttpMessageConverter org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter ) { this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter = org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter ( ) { return this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( ContentNegotiationManager org.springframework.web.servlet.resource.ContentNegotiationManager ) { this . org.springframework.web.servlet.resource.ContentNegotiationManager = org.springframework.web.servlet.resource.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.servlet.resource.ContentNegotiationManager org.springframework.web.servlet.resource.ContentNegotiationManager ( ) { return this . org.springframework.web.servlet.resource.ContentNegotiationManager ; }  <METHOD_END>
<METHOD_START> public void void ( CorsConfiguration org.springframework.web.servlet.resource.CorsConfiguration ) { this . org.springframework.web.servlet.resource.CorsConfiguration = org.springframework.web.servlet.resource.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.resource.CorsConfiguration org.springframework.web.servlet.resource.CorsConfiguration ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest ) { return this . org.springframework.web.servlet.resource.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( org.springframework.web.servlet.resource.Log . isWarnEnabled ( ) && CollectionUtils . isEmpty ( this . java.util.List<org.springframework.web.servlet.resource.Resource> ) ) { org.springframework.web.servlet.resource.Log . warn ( STRING + STRING ) ; } if ( this . java.util.List<org.springframework.web.servlet.resource.ResourceResolver> . isEmpty ( ) ) { this . java.util.List<org.springframework.web.servlet.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; } void ( ) ; if ( this . org.springframework.web.servlet.resource.ResourceHttpMessageConverter == null ) { this . org.springframework.web.servlet.resource.ResourceHttpMessageConverter = new ResourceHttpMessageConverter ( ) ; } if ( this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter == null ) { this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter = new ResourceRegionHttpMessageConverter ( ) ; } this . org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy = org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( CollectionUtils . isEmpty ( this . java.util.List<org.springframework.web.servlet.resource.Resource> ) ) { return; } for ( int int = java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) . size ( ) - NUMBER ; int >= NUMBER ; int -- ) { if ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) . get ( int ) instanceof PathResourceResolver ) { PathResourceResolver org.springframework.web.servlet.resource.PathResourceResolver = ( PathResourceResolver ) java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) . get ( int ) ; if ( ObjectUtils . isEmpty ( org.springframework.web.servlet.resource.PathResourceResolver . getAllowedLocations ( ) ) ) { org.springframework.web.servlet.resource.PathResourceResolver . setAllowedLocations ( java.util.List<org.springframework.web.servlet.resource.Resource> ( ) . toArray ( new Resource [ java.util.List<org.springframework.web.servlet.resource.Resource> ( ) . size ( ) ] ) ) ; } break; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy ( ) { java.util.Map<java.lang.String,org.springframework.web.servlet.resource.MediaType> < java.lang.String , MediaType > java.util.Map<java.lang.String,org.springframework.web.servlet.resource.MediaType> = null ; if ( org.springframework.web.servlet.resource.ContentNegotiationManager ( ) != null ) { PathExtensionContentNegotiationStrategy org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy = org.springframework.web.servlet.resource.ContentNegotiationManager ( ) . getStrategy ( PathExtensionContentNegotiationStrategy .class ) ; if ( org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy != null ) { java.util.Map<java.lang.String,org.springframework.web.servlet.resource.MediaType> = new java.util.HashMap <> ( org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy . getMediaTypes ( ) ) ; } } return ( getServletContext ( ) != null ? new ServletPathExtensionContentNegotiationStrategy ( getServletContext ( ) , java.util.Map<java.lang.String,org.springframework.web.servlet.resource.MediaType> ) : new PathExtensionContentNegotiationStrategy ( java.util.Map<java.lang.String,org.springframework.web.servlet.resource.MediaType> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.resource.HttpServletResponse )			throws org.springframework.web.servlet.resource.ServletException , java.io.IOException { Resource org.springframework.web.servlet.resource.Resource = org.springframework.web.servlet.resource.Resource ( org.springframework.web.servlet.resource.HttpServletRequest ) ; if ( org.springframework.web.servlet.resource.Resource == null ) { org.springframework.web.servlet.resource.Log . trace ( STRING ) ; org.springframework.web.servlet.resource.HttpServletResponse . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return; } if ( HttpMethod . OPTIONS . matches ( org.springframework.web.servlet.resource.HttpServletRequest . getMethod ( ) ) ) { org.springframework.web.servlet.resource.HttpServletResponse . setHeader ( STRING , getAllowHeader ( ) ) ; return; } checkRequest ( org.springframework.web.servlet.resource.HttpServletRequest ) ; if ( new ServletWebRequest ( org.springframework.web.servlet.resource.HttpServletRequest , org.springframework.web.servlet.resource.HttpServletResponse ) . checkNotModified ( org.springframework.web.servlet.resource.Resource . lastModified ( ) ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING ) ; return; } prepareResponse ( org.springframework.web.servlet.resource.HttpServletResponse ) ; MediaType org.springframework.web.servlet.resource.MediaType = org.springframework.web.servlet.resource.MediaType ( org.springframework.web.servlet.resource.HttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; if ( org.springframework.web.servlet.resource.MediaType != null ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + org.springframework.web.servlet.resource.MediaType + STRING + org.springframework.web.servlet.resource.Resource ) ; } } else { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + org.springframework.web.servlet.resource.Resource + STRING ) ; } } if ( METHOD_HEAD . equals ( org.springframework.web.servlet.resource.HttpServletRequest . getMethod ( ) ) ) { void ( org.springframework.web.servlet.resource.HttpServletResponse , org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.MediaType ) ; org.springframework.web.servlet.resource.Log . trace ( STRING ) ; return; } ServletServerHttpResponse org.springframework.web.servlet.resource.ServletServerHttpResponse = new ServletServerHttpResponse ( org.springframework.web.servlet.resource.HttpServletResponse ) ; if ( org.springframework.web.servlet.resource.HttpServletRequest . getHeader ( HttpHeaders . RANGE ) == null ) { void ( org.springframework.web.servlet.resource.HttpServletResponse , org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.MediaType ) ; this . org.springframework.web.servlet.resource.ResourceHttpMessageConverter . write ( org.springframework.web.servlet.resource.Resource , org.springframework.web.servlet.resource.MediaType , org.springframework.web.servlet.resource.ServletServerHttpResponse ) ; } else { org.springframework.web.servlet.resource.HttpServletResponse . setHeader ( HttpHeaders . ACCEPT_RANGES , STRING ) ; ServletServerHttpRequest org.springframework.web.servlet.resource.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.servlet.resource.HttpServletRequest ) ; try { java.util.List<org.springframework.web.servlet.resource.HttpRange> < HttpRange > java.util.List<org.springframework.web.servlet.resource.HttpRange> = org.springframework.web.servlet.resource.ServletServerHttpRequest . getHeaders ( ) . getRange ( ) ; org.springframework.web.servlet.resource.HttpServletResponse . setStatus ( HttpServletResponse . SC_PARTIAL_CONTENT ) ; if ( java.util.List<org.springframework.web.servlet.resource.HttpRange> . size ( ) == NUMBER ) { ResourceRegion org.springframework.web.servlet.resource.ResourceRegion = java.util.List<org.springframework.web.servlet.resource.HttpRange> . get ( NUMBER ) . toResourceRegion ( org.springframework.web.servlet.resource.Resource ) ; this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter . write ( org.springframework.web.servlet.resource.ResourceRegion , org.springframework.web.servlet.resource.MediaType , org.springframework.web.servlet.resource.ServletServerHttpResponse ) ; } else { this . org.springframework.web.servlet.resource.ResourceRegionHttpMessageConverter . write ( HttpRange . toResourceRegions ( java.util.List<org.springframework.web.servlet.resource.HttpRange> , org.springframework.web.servlet.resource.Resource ) , org.springframework.web.servlet.resource.MediaType , org.springframework.web.servlet.resource.ServletServerHttpResponse ) ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { org.springframework.web.servlet.resource.HttpServletResponse . setHeader ( STRING , STRING + org.springframework.web.servlet.resource.Resource . contentLength ( ) ) ; org.springframework.web.servlet.resource.HttpServletResponse . sendError ( HttpServletResponse . SC_REQUESTED_RANGE_NOT_SATISFIABLE ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.resource.Resource org.springframework.web.servlet.resource.Resource ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest ) throws java.io.IOException { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.web.servlet.resource.HttpServletRequest . getAttribute ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE + STRING ) ; } java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) || boolean ( java.lang.String ) ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + java.lang.String + STRING ) ; } return null ; } if ( java.lang.String . boolean ( STRING ) ) { try { if ( boolean ( java.net.URLDecoder . java.lang.String ( java.lang.String , STRING ) ) ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + java.lang.String + STRING ) ; } return null ; } } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } } ResourceResolverChain org.springframework.web.servlet.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) ) ; Resource org.springframework.web.servlet.resource.Resource = org.springframework.web.servlet.resource.ResourceResolverChain . resolveResource ( org.springframework.web.servlet.resource.HttpServletRequest , java.lang.String , java.util.List<org.springframework.web.servlet.resource.Resource> ( ) ) ; if ( org.springframework.web.servlet.resource.Resource == null || java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ( ) . isEmpty ( ) ) { return org.springframework.web.servlet.resource.Resource ; } ResourceTransformerChain org.springframework.web.servlet.resource.ResourceTransformerChain = new DefaultResourceTransformerChain ( org.springframework.web.servlet.resource.ResourceResolverChain , java.util.List<org.springframework.web.servlet.resource.ResourceTransformer> ( ) ) ; org.springframework.web.servlet.resource.Resource = org.springframework.web.servlet.resource.ResourceTransformerChain . transform ( org.springframework.web.servlet.resource.HttpServletRequest , org.springframework.web.servlet.resource.Resource ) ; return org.springframework.web.servlet.resource.Resource ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { boolean boolean = false ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { if ( java.lang.String . char ( int ) == '/' ) { boolean = true ; } else if ( java.lang.String . char ( int ) > ' ' && java.lang.String . char ( int ) != NUMBER ) { if ( int == NUMBER || ( int == NUMBER && boolean ) ) { return java.lang.String ; } java.lang.String = boolean ? STRING + java.lang.String . java.lang.String ( int ) : java.lang.String . java.lang.String ( int ) ; if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + java.lang.String ) ; } return java.lang.String ; } } return ( boolean ? STRING : STRING ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING + java.lang.String ) ; } if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING ) ; } return true ; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = ( java.lang.String . char ( NUMBER ) == '/' ? java.lang.String . java.lang.String ( NUMBER ) : java.lang.String ) ; if ( ResourceUtils . isUrl ( java.lang.String ) || java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING ) ; } return true ; } } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String = StringUtils . cleanPath ( java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { if ( org.springframework.web.servlet.resource.Log . isTraceEnabled ( ) ) { org.springframework.web.servlet.resource.Log . trace ( STRING ) ; } return true ; } } return false ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.resource.MediaType org.springframework.web.servlet.resource.MediaType ( HttpServletRequest org.springframework.web.servlet.resource.HttpServletRequest , Resource org.springframework.web.servlet.resource.Resource ) { return this . org.springframework.web.servlet.resource.PathExtensionContentNegotiationStrategy . getMediaTypeForResource ( org.springframework.web.servlet.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> protected void void ( HttpServletResponse org.springframework.web.servlet.resource.HttpServletResponse , Resource org.springframework.web.servlet.resource.Resource , MediaType org.springframework.web.servlet.resource.MediaType ) throws java.io.IOException { long long = org.springframework.web.servlet.resource.Resource . contentLength ( ) ; if ( long > java.lang.Integer . int ) { org.springframework.web.servlet.resource.HttpServletResponse . setContentLengthLong ( long ) ; } else { org.springframework.web.servlet.resource.HttpServletResponse . setContentLength ( ( int ) long ) ; } if ( org.springframework.web.servlet.resource.MediaType != null ) { org.springframework.web.servlet.resource.HttpServletResponse . setContentType ( org.springframework.web.servlet.resource.MediaType . toString ( ) ) ; } if ( org.springframework.web.servlet.resource.Resource instanceof HttpResource ) { HttpHeaders org.springframework.web.servlet.resource.HttpHeaders = ( ( HttpResource ) org.springframework.web.servlet.resource.Resource ) . getResponseHeaders ( ) ; org.springframework.web.servlet.resource.HttpHeaders . toSingleValueMap ( ) . entrySet ( ) . stream ( ) . forEach ( entry -> response . setHeader ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } org.springframework.web.servlet.resource.HttpServletResponse . setHeader ( HttpHeaders . ACCEPT_RANGES , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.List<org.springframework.web.servlet.resource.Resource> ( ) + STRING + java.util.List<org.springframework.web.servlet.resource.ResourceResolver> ( ) + STRING ; }  <METHOD_END>
