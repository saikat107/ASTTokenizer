<METHOD_START> public void ( javax . javax.cache . javax.cache . javax.cache javax.cache.annotation.CacheResolver ) { Assert . notNull ( javax.cache.annotation.CacheResolver , STRING ) ; this . javax.cache.annotation.CacheResolver = javax.cache.annotation.CacheResolver ; }  <METHOD_END>
<METHOD_START> protected javax . javax.cache . javax.cache . javax.cache.annotation.CacheResolver javax.cache.annotation.CacheResolver ( ) { return javax.cache.annotation.CacheResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> ( CacheOperationInvocationContext < ? > org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<?> ) { if ( ! ( org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<> instanceof CacheInvocationContext < ? > ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<> ) ; } CacheInvocationContext < ? > org.springframework.cache.jcache.interceptor.CacheInvocationContext<?> = ( CacheInvocationContext < ? > ) org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<> ; javax . javax.cache . javax.cache < java.lang.Object , java.lang.Object > cache = javax.cache.annotation.CacheResolver . resolveCache ( org.springframework.cache.jcache.interceptor.CacheInvocationContext<> ) ; Assert . notNull ( cache , STRING + org.springframework.cache.jcache.interceptor.CacheOperationInvocationContext<> + STRING + javax.cache.annotation.CacheResolver + STRING ) ; return java.util.Collections . java.util.Set<T> ( new JCacheCache ( cache ) ) ; }  <METHOD_END>
