<METHOD_START> @ Test public void void ( ) java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( STRING ) ; CrudMethodMetadataPopulatingMethodInterceptor org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptor = CrudMethodMetadataPopulatingMethodInterceptor . INSTANCE ; org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptor . invoke ( org.springframework.data.jpa.repository.support.MethodInvocation ) ; assertThat ( TransactionSynchronizationManager . getResource ( java.lang.reflect.Method ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata = new CrudMethodMetadataPostProcessor ( ) . getCrudMethodMetadata ( ) ; org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample ( org.springframework.data.jpa.repository.support.CrudMethodMetadata , LockModeType . OPTIMISTIC ) . someMethod ( ) ; org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample ( org.springframework.data.jpa.repository.support.CrudMethodMetadata , LockModeType . PESSIMISTIC_READ ) . someOtherMethod ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample .class . java.lang.reflect.Method ( java.lang.String ) ; ExposeInvocationInterceptor . INSTANCE . invoke ( org.springframework.data.jpa.repository.support.MethodInvocation ) ; when ( org.springframework.data.jpa.repository.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample ( final CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata , final LockModeType org.springframework.data.jpa.repository.support.LockModeType ) { ProxyFactory org.springframework.data.jpa.repository.support.ProxyFactory = new ProxyFactory ( new java.lang.Object ( ) ) ; org.springframework.data.jpa.repository.support.ProxyFactory . addInterface ( org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample .class ) ; org.springframework.data.jpa.repository.support.ProxyFactory . addAdvice ( ExposeInvocationInterceptor . INSTANCE ) ; org.springframework.data.jpa.repository.support.ProxyFactory . addAdvice ( CrudMethodMetadataPopulatingMethodInterceptor . INSTANCE ) ; org.springframework.data.jpa.repository.support.ProxyFactory . addAdvice ( new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.jpa.repository.support.MethodInvocation ) { assertThat ( org.springframework.data.jpa.repository.support.CrudMethodMetadata . getLockModeType ( ) , is ( org.springframework.data.jpa.repository.support.LockModeType ) ) ; return null ; } } ) ; return ( org.springframework.data.jpa.repository.support.CrudMethodMetadataPopulatingMethodInterceptorUnitTests.Sample ) org.springframework.data.jpa.repository.support.ProxyFactory . getProxy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.jpa.repository.support.MethodInvocation ) { assertThat ( org.springframework.data.jpa.repository.support.CrudMethodMetadata . getLockModeType ( ) , is ( org.springframework.data.jpa.repository.support.LockModeType ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Lock ( LockModeType . OPTIMISTIC ) void void ( )  <METHOD_END>
<METHOD_START> @ Lock ( LockModeType . PESSIMISTIC_READ ) void void ( )  <METHOD_END>
