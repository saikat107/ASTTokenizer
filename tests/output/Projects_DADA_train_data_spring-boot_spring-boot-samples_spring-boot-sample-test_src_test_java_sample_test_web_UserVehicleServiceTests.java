<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . sample.test.web.UserVehicleService = new UserVehicleService ( this . sample.test.web.UserRepository , this . sample.test.web.VehicleDetailsService ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.test.web.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . sample.test.web.ExpectedException . expectMessage ( STRING ) ; this . sample.test.web.UserVehicleService . getVehicleDetails ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . sample.test.web.UserRepository . findByUsername ( anyString ( ) ) ) . willReturn ( null ) ; this . sample.test.web.ExpectedException . expect ( UserNameNotFoundException .class ) ; this . sample.test.web.UserVehicleService . getVehicleDetails ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . sample.test.web.UserRepository . findByUsername ( anyString ( ) ) ) . willReturn ( new User ( STRING , sample.test.web.VehicleIdentificationNumber ) ) ; VehicleDetails sample.test.web.VehicleDetails = new VehicleDetails ( STRING , STRING ) ; given ( this . sample.test.web.VehicleDetailsService . getVehicleDetails ( sample.test.web.VehicleIdentificationNumber ) ) . willReturn ( sample.test.web.VehicleDetails ) ; VehicleDetails sample.test.web.VehicleDetails = this . sample.test.web.UserVehicleService . getVehicleDetails ( STRING ) ; assertThat ( sample.test.web.VehicleDetails ) . isEqualTo ( sample.test.web.VehicleDetails ) ; }  <METHOD_END>
