<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.lang.Class<? extends java.util.Map> < ? extends java.util.Map > java.lang.Class<? extends java.util.Map> ) { this( java.lang.Class<> , false ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.lang.Class<? extends java.util.Map> < ? extends java.util.Map > java.lang.Class<? extends java.util.Map> , boolean boolean ) { if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! java.util.Map .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } this . java.lang.Class<? extends java.util.Map> = java.lang.Class<> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null && this . boolean ) { super. void ( java.util.Map<java.lang.Object,java.lang.Object> ( this . java.lang.Class<> , NUMBER ) ) ; } else if ( java.lang.Object == null || ( this . java.lang.Class<> . boolean ( java.lang.Object ) && ! boolean ( ) ) ) { super. void ( java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.util.Map<java.lang.Object,java.lang.Object> ( this . java.lang.Class<> , java.util.Map<,> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object ( java.util.Map.Entry<,> . getKey ( ) ) , java.lang.Object ( java.util.Map.Entry<,> . getValue ( ) ) ) ; } super. void ( java.util.Map<java.lang.Object,java.lang.Object> ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( java.lang.Class<? extends java.util.Map> < ? extends java.util.Map > java.lang.Class<? extends java.util.Map> , int int ) { if ( ! java.lang.Class<> . boolean ( ) ) { try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.Throwable ) ; } } else if ( java.util.SortedMap .class == java.lang.Class<> ) { return new java.util.TreeMap<java.lang.Object,java.lang.Object> <> ( ) ; } else { return new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( int ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
