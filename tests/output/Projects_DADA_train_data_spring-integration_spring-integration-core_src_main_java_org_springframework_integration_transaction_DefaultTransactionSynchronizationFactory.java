<METHOD_START> public void ( TransactionSynchronizationProcessor org.springframework.integration.transaction.TransactionSynchronizationProcessor ) { Assert . notNull ( org.springframework.integration.transaction.TransactionSynchronizationProcessor , STRING ) ; this . org.springframework.integration.transaction.TransactionSynchronizationProcessor = org.springframework.integration.transaction.TransactionSynchronizationProcessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.transaction.TransactionSynchronization org.springframework.integration.transaction.TransactionSynchronization ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory.DefaultTransactionalResourceSynchronization org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory.DefaultTransactionalResourceSynchronization = new org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory.DefaultTransactionalResourceSynchronization ( java.lang.Object ) ; TransactionSynchronizationManager . bindResource ( java.lang.Object , org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory.DefaultTransactionalResourceSynchronization . getResourceHolder ( ) ) ; return org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory.DefaultTransactionalResourceSynchronization ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object java.lang.Object ) { super( new IntegrationResourceHolder ( ) , java.lang.Object ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . isTraceEnabled ( ) ) { org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . trace ( STRING ) ; } org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.TransactionSynchronizationProcessor . processBeforeCommit ( resourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( IntegrationResourceHolder org.springframework.integration.transaction.IntegrationResourceHolder ) { if ( org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . isTraceEnabled ( ) ) { org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . trace ( STRING ) ; } org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.TransactionSynchronizationProcessor . processAfterCommit ( org.springframework.integration.transaction.IntegrationResourceHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( int != TransactionSynchronization . STATUS_COMMITTED ) { if ( org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . isTraceEnabled ( ) ) { org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.Log . trace ( STRING ) ; } org.springframework.integration.transaction.DefaultTransactionSynchronizationFactory .this . org.springframework.integration.transaction.TransactionSynchronizationProcessor . processAfterRollback ( resourceHolder ) ; } super. afterCompletion ( int ) ; }  <METHOD_END>
