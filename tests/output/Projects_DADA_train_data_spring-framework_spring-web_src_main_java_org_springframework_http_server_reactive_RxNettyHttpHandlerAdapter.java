<METHOD_START> public void ( HttpHandler org.springframework.http.server.reactive.HttpHandler ) { Assert . notNull ( org.springframework.http.server.reactive.HttpHandler , STRING ) ; this . org.springframework.http.server.reactive.HttpHandler = org.springframework.http.server.reactive.HttpHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Observable<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Observable<java.lang.Void> ( HttpServerRequest < ByteBuf > org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , HttpServerResponse < ByteBuf > org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> ) { Channel org.springframework.http.server.reactive.Channel = org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> . unsafeNettyChannel ( ) ; NettyDataBufferFactory org.springframework.http.server.reactive.NettyDataBufferFactory = new NettyDataBufferFactory ( org.springframework.http.server.reactive.Channel . alloc ( ) ) ; java.net.InetSocketAddress java.net.InetSocketAddress = ( java.net.InetSocketAddress ) org.springframework.http.server.reactive.Channel . remoteAddress ( ) ; RxNettyServerHttpRequest org.springframework.http.server.reactive.RxNettyServerHttpRequest = new RxNettyServerHttpRequest ( org.springframework.http.server.reactive.HttpServerRequest<org.springframework.http.server.reactive.ByteBuf> , org.springframework.http.server.reactive.NettyDataBufferFactory , java.net.InetSocketAddress ) ; RxNettyServerHttpResponse org.springframework.http.server.reactive.RxNettyServerHttpResponse = new RxNettyServerHttpResponse ( org.springframework.http.server.reactive.HttpServerResponse<org.springframework.http.server.reactive.ByteBuf> , org.springframework.http.server.reactive.NettyDataBufferFactory ) ; Publisher < java.lang.Void > org.springframework.http.server.reactive.Publisher<java.lang.Void> = this . org.springframework.http.server.reactive.HttpHandler . handle ( org.springframework.http.server.reactive.RxNettyServerHttpRequest , org.springframework.http.server.reactive.RxNettyServerHttpResponse ) . otherwise ( ex -> { logger . error ( STRING , ex ) ; nativeResponse . setStatus ( HttpResponseStatus . INTERNAL_SERVER_ERROR ) ; return Mono . empty ( ) ; } ) . doOnSuccess ( aVoid -> logger . debug ( STRING ) ) ; return RxReactiveStreams . toObservable ( org.springframework.http.server.reactive.Publisher<java.lang.Void> ) ; }  <METHOD_END>
