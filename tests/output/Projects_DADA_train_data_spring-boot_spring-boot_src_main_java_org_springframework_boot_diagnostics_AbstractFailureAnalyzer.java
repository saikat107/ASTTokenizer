<METHOD_START> @ java.lang.Override public org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable ) { T T = T ( java.lang.Throwable , java.lang.Class<? extends T> ( ) ) ; if ( T != null ) { return org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable , T ) ; } return null ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.diagnostics.FailureAnalysis org.springframework.boot.diagnostics.FailureAnalysis ( java.lang.Throwable java.lang.Throwable , T T );  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> ( ) { return ( java.lang.Class<? extends T> < ? extends T > ) ResolvableType . forClass ( org.springframework.boot.diagnostics.AbstractFailureAnalyzer .class , java.lang.Class<? extends org.springframework.boot.diagnostics.AbstractFailureAnalyzer> ( ) ) . resolveGeneric ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected final < E extends java.lang.Throwable > T T ( java.lang.Throwable java.lang.Throwable , java.lang.Class<E> < E > java.lang.Class<E> ) { while ( java.lang.Throwable != null ) { if ( java.lang.Class<E> . boolean ( java.lang.Throwable ) ) { return ( T ) java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return null ; }  <METHOD_END>
