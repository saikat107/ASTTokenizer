<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; java.io.File java.io.File = new java.io.File ( FileSystemUtils . WORKING_DIRECTORY , java.lang.String . java.lang.String ( ) ) ; Assert . isTrue ( java.io.File . boolean ( ) || java.io.File . boolean ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; java.util.List<java.lang.String> . boolean ( org.springframework.data.gemfire.client.GemFireDataSourceIntegrationTest .class . java.lang.String ( ) . java.lang.String ( STRING , STRING ) . java.lang.String ( STRING ) ) ; org.springframework.data.gemfire.client.ProcessWrapper = ProcessExecutor . launch ( java.io.File , ServerProcess .class , java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; void ( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , org.springframework.data.gemfire.client.ProcessWrapper , ServerProcess . getServerProcessControlFilename ( ) ) ; java.lang.System . java.io.PrintStream . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( final long long , final ProcessWrapper org.springframework.data.gemfire.client.ProcessWrapper , final java.lang.String java.lang.String ) { ThreadUtils . timedWait ( long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) , new ThreadUtils . ThreadUtils ( ) { private java.io.File java.io.File = new java.io.File ( org.springframework.data.gemfire.client.ProcessWrapper . getWorkingDirectory ( ) , java.lang.String ) ; @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.data.gemfire.client.ProcessWrapper . shutdown ( ) ; if ( java.lang.Boolean . java.lang.Boolean ( java.lang.System . java.lang.String ( STRING , java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) ) ) ) { org . springframework . util . FileSystemUtils . deleteRecursively ( org.springframework.data.gemfire.client.ProcessWrapper . getWorkingDirectory ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Region org.springframework.data.gemfire.client.Region , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.client.Region , is ( not ( nullValue ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region . getName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region . getFullPath ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ClientCache . getRegion ( org.springframework.data.gemfire.client.Region . getFullPath ( ) ) , is ( sameInstance ( org.springframework.data.gemfire.client.Region ) ) ) ; assertThat ( org.springframework.data.gemfire.client.ApplicationContext . containsBean ( java.lang.String ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.ApplicationContext . getBean ( java.lang.String , Region .class ) , is ( sameInstance ( org.springframework.data.gemfire.client.Region ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( org.springframework.data.gemfire.client.Region , STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING ) ; }  <METHOD_END>
