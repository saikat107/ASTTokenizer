<METHOD_START> protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return EnableIndexing .class ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ( AnnotationMetadata org.springframework.data.gemfire.config.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry , GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> ) { GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> = super. postProcess ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry , org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> ) ; if ( isAnnotationPresent ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String ( ) ) ) { AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes = getAnnotationAttributes ( org.springframework.data.gemfire.config.annotation.AnnotationMetadata , java.lang.String ( ) ) ; org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> . doWithProperties ( ( PropertyHandler < GemfirePersistentProperty > ) persistentProperty -> { persistentProperty . findAnnotation ( Id .class ) . ifPresent ( idAnnotation -> registerIndexBeanDefinition ( enableIndexingAttributes , localPersistentEntity , persistentProperty , IndexType . KEY , idAnnotation , registry ) ) ; persistentProperty . findAnnotation ( Indexed .class ) . ifPresent ( indexedAnnotation -> registerIndexBeanDefinition ( enableIndexingAttributes , localPersistentEntity , persistentProperty , indexedAnnotation . type ( ) , indexedAnnotation , registry ) ) ; persistentProperty . findAnnotation ( LuceneIndexed .class ) . ifPresent ( luceneIndexAnnotation -> registerLuceneIndexBeanDefinition ( enableIndexingAttributes , localPersistentEntity , persistentProperty , luceneIndexAnnotation , registry ) ) ; } ) ; } return org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> ; }  <METHOD_END>
<METHOD_START> protected void void ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , IndexType org.springframework.data.gemfire.config.annotation.IndexType , java.lang.annotation.Annotation java.lang.annotation.Annotation , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { java.util.Optional . java.util.Optional<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation ) . void ( java.lang.annotation.Annotation -> { AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes = getAnnotationAttributes ( java.lang.annotation.Annotation ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( IndexFactoryBean .class ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.AnnotationAttributes , org.springframework.data.gemfire.config.annotation.IndexType ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyReference ( STRING , GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , boolean ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , boolean ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.IndexType ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.AnnotationAttributes , org.springframework.data.gemfire.config.annotation.IndexType ) . toString ( ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , java.lang.annotation.Annotation java.lang.annotation.Annotation , BeanDefinitionRegistry org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry ) { java.util.Optional . java.util.Optional<java.lang.annotation.Annotation> ( java.lang.annotation.Annotation ) . void ( java.lang.annotation.Annotation -> { AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes = AnnotationAttributes . fromMap ( AnnotationUtils . getAnnotationAttributes ( java.lang.annotation.Annotation ) ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( LuceneIndexFactoryBean .class ) ; java.lang.String java.lang.String = org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) ; boolean boolean = ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) && org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , boolean ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty . getName ( ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> . getRegionName ( ) ) ; org.springframework.data.gemfire.config.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.data.gemfire.config.annotation.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { return ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) && org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.String java.lang.String ( GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { java.lang.String java.lang.String = ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ? org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) : null ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.lang.String java.lang.String ( GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { java.lang.String java.lang.String = ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ? org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) : null ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> . getRegionName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , IndexType org.springframework.data.gemfire.config.annotation.IndexType ) { java.lang.String java.lang.String = ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ? org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getString ( STRING ) : null ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ( org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<> , org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , org.springframework.data.gemfire.config.annotation.IndexType ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , IndexType org.springframework.data.gemfire.config.annotation.IndexType ) { return java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity . getRegionName ( ) , StringUtils . capitalize ( org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty . getName ( ) ) , StringUtils . capitalize ( org.springframework.data.gemfire.config.annotation.IndexType . name ( ) . toLowerCase ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private boolean boolean ( GemfirePersistentEntity org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes ) { return ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) && org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getBoolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private org.springframework.data.gemfire.config.annotation.IndexType org.springframework.data.gemfire.config.annotation.IndexType ( GemfirePersistentEntity < ? > org.springframework.data.gemfire.config.annotation.GemfirePersistentEntity<?> , GemfirePersistentProperty org.springframework.data.gemfire.config.annotation.GemfirePersistentProperty , AnnotationAttributes org.springframework.data.gemfire.config.annotation.AnnotationAttributes , IndexType org.springframework.data.gemfire.config.annotation.IndexType ) { IndexType org.springframework.data.gemfire.config.annotation.IndexType = ( org.springframework.data.gemfire.config.annotation.AnnotationAttributes . containsKey ( STRING ) ? org.springframework.data.gemfire.config.annotation.AnnotationAttributes . getEnum ( STRING ) : null ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.gemfire.config.annotation.IndexType ) . orElse ( org.springframework.data.gemfire.config.annotation.IndexType ) ; }  <METHOD_END>
