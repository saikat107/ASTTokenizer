<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( ( java.lang.String ) org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withOptionalArg ( ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( ( java.lang.String ) org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( ( java.lang.String ) org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) . withValuesSeparatedBy ( ',' ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.core.env.CommandLinePropertySource<> . getOptionValues ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) . withValuesSeparatedBy ( ',' ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING , STRING , STRING ) ; CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.core.env.CommandLinePropertySource<> . getOptionValues ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) . withValuesSeparatedBy ( ',' ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . acceptsAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) . withRequiredArg ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING , STRING ) ; EnumerablePropertySource < ? > org.springframework.core.env.EnumerablePropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . getProperty ( STRING ) , nullValue ( ) ) ; assertThat ( org.springframework.core.env.EnumerablePropertySource<> . getPropertyNames ( ) . length , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING , STRING , STRING , STRING ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.PropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.core.env.PropertySource<> . getProperty ( STRING ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING , STRING , STRING , STRING ) ; CommandLinePropertySource < ? > org.springframework.core.env.CommandLinePropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; org.springframework.core.env.CommandLinePropertySource<> . setNonOptionArgsPropertyName ( STRING ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLinePropertySource<> . containsProperty ( STRING ) , is ( true ) ) ; java.lang.String java.lang.String = org.springframework.core.env.CommandLinePropertySource<> . getProperty ( STRING ) ; assertThat ( java.lang.String , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { OptionParser org.springframework.core.env.OptionParser = new OptionParser ( ) ; org.springframework.core.env.OptionParser . accepts ( STRING ) . withRequiredArg ( ) . ofType ( org.springframework.core.env.JOptCommandLinePropertySourceTests.OptionEnum .class ) ; OptionSet org.springframework.core.env.OptionSet = org.springframework.core.env.OptionParser . parse ( STRING ) ; PropertySource < ? > org.springframework.core.env.PropertySource<?> = new JOptCommandLinePropertySource ( org.springframework.core.env.OptionSet ) ; assertThat ( org.springframework.core.env.PropertySource<> . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
