<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource , JpaProperties org.springframework.boot.autoconfigure.orm.jpa.JpaProperties , ObjectProvider < JtaTransactionManager > org.springframework.boot.autoconfigure.orm.jpa.ObjectProvider<org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager> , ObjectProvider < TransactionManagerCustomizers > org.springframework.boot.autoconfigure.orm.jpa.ObjectProvider<org.springframework.boot.autoconfigure.orm.jpa.TransactionManagerCustomizers> ) { super( javax.sql.DataSource , org.springframework.boot.autoconfigure.orm.jpa.JpaProperties , org.springframework.boot.autoconfigure.orm.jpa.ObjectProvider<org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager> , org.springframework.boot.autoconfigure.orm.jpa.ObjectProvider<org.springframework.boot.autoconfigure.orm.jpa.TransactionManagerCustomizers> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.autoconfigure.orm.jpa.AbstractJpaVendorAdapter org.springframework.boot.autoconfigure.orm.jpa.AbstractJpaVendorAdapter ( ) { return new HibernateJpaVendorAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . void ( getProperties ( ) . getHibernateProperties ( getDataSource ( ) ) ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super. customizeVendorProperties ( java.util.Map<java.lang.String,java.lang.Object> ) ; if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String ) ) { void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> )			throws java.lang.LinkageError { JtaTransactionManager org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager = getJtaTransactionManager ( ) ; if ( org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager != null ) { if ( boolean ( ) ) { void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } else { void ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager ) ; } } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ClassUtils . isPresent ( STRING + STRING , java.lang.Class<? extends org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { return java.lang.Object ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , JtaTransactionManager org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager ) { try { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , new SpringJtaPlatform ( org.springframework.boot.autoconfigure.orm.jpa.JtaTransactionManager ) ) ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { if ( ! boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING , java.lang.LinkageError ) ; } if ( org.springframework.boot.autoconfigure.orm.jpa.Log . isDebugEnabled ( ) ) { org.springframework.boot.autoconfigure.orm.jpa.Log . debug ( STRING + java.lang.LinkageError . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { return JndiLocatorDelegate . isDefaultJndiEnvironmentAvailable ( ) ; } catch ( java.lang.Error java.lang.Error ) { return false ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { return java.lang.Object ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String [] java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { try { return java.lang.Class . java.lang.Class<?> ( java.lang.String ) . newInstance ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.orm.jpa.ConditionOutcome org.springframework.boot.autoconfigure.orm.jpa.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.orm.jpa.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.orm.jpa.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( ClassUtils . isPresent ( java.lang.String , org.springframework.boot.autoconfigure.orm.jpa.ConditionContext . getClassLoader ( ) ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . found ( STRING ) . items ( Style . QUOTE , java.lang.String ) ) ; } } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING , STRING ) . items ( Style . QUOTE , java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ) ; }  <METHOD_END>
