<METHOD_START> @ BeforeClass public static void void ( ) { ExceptionHandlerExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver = new ExceptionHandlerExceptionResolver ( ) ; org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; int = org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getArgumentResolvers ( ) . getResolvers ( ) . size ( ) ; int = org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getReturnValueHandlers ( ) . getHandlers ( ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver = new ExceptionHandlerExceptionResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setWarnLogCategory ( this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getClass ( ) . getName ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setAttribute ( DispatcherServlet . OUTPUT_FLASH_MAP_ATTRIBUTE , new FlashMap ( ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { java.lang.Object java.lang.Object = null ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , java.lang.Object , null ) ; assertNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setCustomArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getArgumentResolvers ( ) . getResolvers ( ) . contains ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; void ( int + NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HandlerMethodArgumentResolver org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver = new ServletRequestMethodArgumentResolver ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setArgumentResolvers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodArgumentResolver ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; void ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HandlerMethodReturnValueHandler org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler = new ViewNameMethodReturnValueHandler ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setCustomReturnValueHandlers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; assertTrue ( this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getReturnValueHandlers ( ) . getHandlers ( ) . contains ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; void ( int , int + NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HandlerMethodReturnValueHandler org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler = new ModelMethodProcessor ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setReturnValueHandlers ( java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodReturnValueHandler ) ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.Exception java.lang.Exception = new java.lang.NullPointerException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.IoExceptionController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.Exception ) ; assertNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchMethodException { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ModelAndViewController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalArgumentException ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getViewName ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException , java.lang.NoSuchMethodException { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalArgumentException ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseWriterController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalArgumentException ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ModelArgumentController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalArgumentException ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModelMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModelMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.RedirectAttributesController ( ) , STRING ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalArgumentException ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getViewName ( ) ) ; FlashMap org.springframework.web.servlet.mvc.method.annotation.FlashMap = ( FlashMap ) this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . getAttribute ( DispatcherServlet . OUTPUT_FLASH_MAP_ATTRIBUTE ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.FlashMap ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.FlashMap . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.IllegalAccessException java.lang.IllegalAccessException = new java.lang.IllegalAccessException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalAccessException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalStateException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException = new java.lang.ArrayIndexOutOfBoundsException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.ArrayIndexOutOfBoundsException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.AssertionError java.lang.AssertionError = new java.lang.AssertionError ( STRING ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , new NestedServletException ( STRING , java.lang.AssertionError ) ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( java.lang.AssertionError . java.lang.String ( ) , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.AssertionError java.lang.AssertionError = new java.lang.AssertionError ( STRING ) ; FatalBeanException org.springframework.web.servlet.mvc.method.annotation.FatalBeanException = new FatalBeanException ( STRING , java.lang.AssertionError ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , org.springframework.web.servlet.mvc.method.annotation.FatalBeanException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( java.lang.AssertionError . java.lang.String ( ) , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyControllerAdviceConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod = new HandlerMethod ( new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.ResponseBodyController ( ) , STRING ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerMethod , java.lang.IllegalStateException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.MyControllerAdviceConfig .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . setApplicationContext ( org.springframework.web.servlet.mvc.method.annotation.AnnotationConfigApplicationContext ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . afterPropertiesSet ( ) ; java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , null , java.lang.IllegalStateException ) ; assertNotNull ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndView ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.ModelAndView . isEmpty ( ) ) ; assertEquals ( STRING , this . org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , int int ) { assertEquals ( int , this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getArgumentResolvers ( ) . getResolvers ( ) . size ( ) ) ; assertEquals ( int , this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . getReturnValueHandlers ( ) . getHandlers ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler public org.springframework.web.servlet.mvc.method.annotation.ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView ( java.lang.Exception java.lang.Exception ) throws java.io.IOException { return new ModelAndView ( STRING , STRING , java.lang.Exception . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( java.lang.Exception java.lang.Exception , java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler @ ResponseBody public java.lang.String java.lang.String ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return ClassUtils . getShortName ( java.lang.IllegalArgumentException . java.lang.Class<? extends java.lang.IllegalArgumentException> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( value = java.io.IOException .class ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler public void void ( java.lang.Exception java.lang.Exception , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {}  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception , RedirectAttributes org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes ) { org.springframework.web.servlet.mvc.method.annotation.RedirectAttributes . addFlashAttribute ( STRING , ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING + ClassUtils . getShortName ( java.lang.IllegalStateException . java.lang.Class<? extends java.lang.IllegalStateException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.ArrayIndexOutOfBoundsException .class ) public java.lang.String java.lang.String ( HandlerMethod org.springframework.web.servlet.mvc.method.annotation.HandlerMethod ) { return STRING + org.springframework.web.servlet.mvc.method.annotation.HandlerMethod . getMethod ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.AssertionError .class ) public java.lang.String java.lang.String ( java.lang.Error java.lang.Error ) { return java.lang.Error . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( { java.lang.IllegalStateException .class , java.lang.IllegalAccessException .class } ) public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return STRING + ClassUtils . getShortName ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.TestExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.TestExceptionResolver ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.TestExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.AnotherTestExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.AnotherTestExceptionResolver ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.AnotherTestExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING + ClassUtils . getShortName ( java.lang.IllegalStateException . java.lang.Class<? extends java.lang.IllegalStateException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING + ClassUtils . getShortName ( java.lang.IllegalStateException . java.lang.Class<? extends java.lang.IllegalStateException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler public java.lang.String java.lang.String ( java.lang.IllegalStateException java.lang.IllegalStateException ) { return STRING + ClassUtils . getShortName ( java.lang.IllegalStateException . java.lang.Class<? extends java.lang.IllegalStateException> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.NotCalledTestExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.NotCalledTestExceptionResolver ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.NotCalledTestExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.BasePackageTestExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.BasePackageTestExceptionResolver ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.BasePackageTestExceptionResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.DefaultTestExceptionResolver org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.DefaultTestExceptionResolver ( ) { return new org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolverTests.DefaultTestExceptionResolver ( ) ; }  <METHOD_END>
