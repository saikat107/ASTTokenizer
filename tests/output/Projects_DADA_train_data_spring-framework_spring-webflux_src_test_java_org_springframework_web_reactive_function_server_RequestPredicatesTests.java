<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . all ( ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMethod org.springframework.web.reactive.function.server.HttpMethod = HttpMethod . GET ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . method ( org.springframework.web.reactive.function.server.HttpMethod ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( org.springframework.web.reactive.function.server.HttpMethod ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . POST ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . GET ( STRING ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . GET ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . HEAD ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . HEAD ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . POST ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . POST ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . PUT ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . PUT ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . PATCH ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . PATCH ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . DELETE ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . DELETE ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . OPTIONS ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . method ( HttpMethod . OPTIONS ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . path ( STRING ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PathPatternParser org.springframework.web.reactive.function.server.PathPatternParser = new PathPatternParser ( ) ; org.springframework.web.reactive.function.server.PathPatternParser . setCaseSensitive ( false ) ; java.util.function.Function<java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate> < java.lang.String , RequestPredicate > java.util.function.Function<java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate> = RequestPredicates . pathPredicates ( org.springframework.web.reactive.function.server.PathPatternParser ) ; java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = java.util.function.Function<java.lang.String,org.springframework.web.reactive.function.server.RequestPredicate> . apply ( STRING ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . headers ( headers -> headers . header ( name ) . equals ( Collections . singletonList ( value ) ) ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . header ( java.lang.String , java.lang.String ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.reactive.function.server.MediaType = MediaType . APPLICATION_JSON ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . contentType ( org.springframework.web.reactive.function.server.MediaType ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . header ( STRING , org.springframework.web.reactive.function.server.MediaType . toString ( ) ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.web.reactive.function.server.MediaType = MediaType . APPLICATION_JSON ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . accept ( org.springframework.web.reactive.function.server.MediaType ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . header ( STRING , org.springframework.web.reactive.function.server.MediaType . toString ( ) ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . header ( STRING , MediaType . TEXT_XML_VALUE ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . pathExtension ( STRING ) ; java.net.URI java.net.URI = java.net.URI . java.net.URI ( STRING ) ; MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; java.net.URI = java.net.URI . java.net.URI ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . uri ( java.net.URI ) . build ( ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . pathExtension ( STRING ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; java.net.URI = java.net.URI . java.net.URI ( STRING ) ; org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . uri ( java.net.URI ) . build ( ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerRequest org.springframework.web.reactive.function.server.MockServerRequest = MockServerRequest . builder ( ) . queryParam ( STRING , STRING ) . build ( ) ; RequestPredicate org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . queryParam ( STRING , s -> s . equals ( STRING ) ) ; assertTrue ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; org.springframework.web.reactive.function.server.RequestPredicate = RequestPredicates . queryParam ( STRING , s -> s . equals ( STRING ) ) ; assertFalse ( org.springframework.web.reactive.function.server.RequestPredicate . test ( org.springframework.web.reactive.function.server.MockServerRequest ) ) ; }  <METHOD_END>
