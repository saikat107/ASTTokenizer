<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( ObjectMapper .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( MappingJackson2HttpMessageConverter .class ) ) . isEmpty ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( MappingJackson2XmlHttpMessageConverter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonObjectMapperConfig .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( MappingJackson2HttpMessageConverter .class , STRING ) ; void ( MappingJackson2HttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonObjectMapperBuilderConfig .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( MappingJackson2HttpMessageConverter .class , STRING ) ; void ( MappingJackson2XmlHttpMessageConverter .class , STRING ) ; void ( MappingJackson2HttpMessageConverter .class ) ; void ( MappingJackson2XmlHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonObjectMapperConfig .class , org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonConverterConfig .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( MappingJackson2HttpMessageConverter .class , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( Gson .class ) . isEmpty ( ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( GsonHttpMessageConverter .class ) . isEmpty ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( GsonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( GsonHttpMessageConverter .class , STRING ) ; void ( GsonHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( GsonAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( MappingJackson2HttpMessageConverter .class , STRING ) ; void ( MappingJackson2HttpMessageConverter .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( GsonHttpMessageConverter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( GsonAutoConfiguration .class , JacksonAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( GsonHttpMessageConverter .class , STRING ) ; void ( GsonHttpMessageConverter .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( MappingJackson2HttpMessageConverter .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( GsonAutoConfiguration .class , org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.GsonConverterConfig .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( GsonHttpMessageConverter .class , STRING ) ; void ( GsonHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( StringHttpMessageConverter .class , STRING ) ; void ( StringHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.StringConverterConfig .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; void ( StringHttpMessageConverter .class , STRING ) ; void ( StringHttpMessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonObjectMapperBuilderConfig .class , org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.TypeConstrainedConverterConfiguration .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; BeanDefinition org.springframework.boot.autoconfigure.http.BeanDefinition = this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.http.BeanDefinition . getFactoryBeanName ( ) ) . isEqualTo ( MappingJackson2HttpMessageConverterConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfigurationTests.JacksonObjectMapperBuilderConfig .class , RepositoryRestMvcConfiguration .class , HttpMessageConvertersAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . refresh ( ) ; BeanDefinition org.springframework.boot.autoconfigure.http.BeanDefinition = this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeanDefinition ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.http.BeanDefinition . getFactoryBeanName ( ) ) . isEqualTo ( MappingJackson2HttpMessageConverterConfiguration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { assertThat ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeansOfType ( java.lang.Class<> ) ) . hasSize ( NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List ( this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBeanDefinitionNames ( ) ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Object java.lang.Object = this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBean ( java.lang.Class<> ) ; HttpMessageConverters org.springframework.boot.autoconfigure.http.HttpMessageConverters = this . org.springframework.boot.autoconfigure.http.AnnotationConfigApplicationContext . getBean ( HttpMessageConverters .class ) ; assertThat ( org.springframework.boot.autoconfigure.http.HttpMessageConverters . getConverters ( ) . contains ( java.lang.Object ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.ObjectMapper org.springframework.boot.autoconfigure.http.ObjectMapper ( ) { return new ObjectMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.ObjectMapper org.springframework.boot.autoconfigure.http.ObjectMapper ( ) { return new ObjectMapper ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.Jackson2ObjectMapperBuilder org.springframework.boot.autoconfigure.http.Jackson2ObjectMapperBuilder ( ) { return new Jackson2ObjectMapperBuilder ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ( ObjectMapper org.springframework.boot.autoconfigure.http.ObjectMapper ) { MappingJackson2HttpMessageConverter org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter = new MappingJackson2HttpMessageConverter ( ) ; org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter . setObjectMapper ( org.springframework.boot.autoconfigure.http.ObjectMapper ) ; return org.springframework.boot.autoconfigure.http.MappingJackson2HttpMessageConverter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.GsonHttpMessageConverter org.springframework.boot.autoconfigure.http.GsonHttpMessageConverter ( Gson org.springframework.boot.autoconfigure.http.Gson ) { GsonHttpMessageConverter org.springframework.boot.autoconfigure.http.GsonHttpMessageConverter = new GsonHttpMessageConverter ( ) ; org.springframework.boot.autoconfigure.http.GsonHttpMessageConverter . setGson ( org.springframework.boot.autoconfigure.http.Gson ) ; return org.springframework.boot.autoconfigure.http.GsonHttpMessageConverter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.StringHttpMessageConverter org.springframework.boot.autoconfigure.http.StringHttpMessageConverter ( ) { return new StringHttpMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.http.TypeConstrainedMappingJackson2HttpMessageConverter org.springframework.boot.autoconfigure.http.TypeConstrainedMappingJackson2HttpMessageConverter ( ) { return new TypeConstrainedMappingJackson2HttpMessageConverter ( ResourceSupport .class ) ; }  <METHOD_END>
