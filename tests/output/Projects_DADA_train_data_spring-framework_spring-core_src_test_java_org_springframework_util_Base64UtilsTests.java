<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { byte [] byte[] = new byte [] { - NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , - NUMBER } ; assertArrayEquals ( byte[] , Base64Utils . decode ( Base64Utils . encode ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertArrayEquals ( byte[] , Base64Utils . decode ( Base64Utils . encode ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertArrayEquals ( byte[] , Base64Utils . decode ( Base64Utils . encode ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertArrayEquals ( byte[] , Base64Utils . decode ( Base64Utils . encode ( byte[] ) ) ) ; byte[] = new byte [] { ( byte ) NUMBER , ( byte ) NUMBER } ; assertArrayEquals ( STRING . byte[] ( ) , Base64Utils . encode ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decode ( Base64Utils . encode ( byte[] ) ) ) ; assertArrayEquals ( STRING . byte[] ( ) , Base64Utils . encodeUrlSafe ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeUrlSafe ( Base64Utils . encodeUrlSafe ( byte[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.UnsupportedEncodingException { byte [] byte[] = new byte [] { - NUMBER , NUMBER , - NUMBER , - NUMBER , NUMBER , - NUMBER , NUMBER , NUMBER , NUMBER , - NUMBER , - NUMBER , - NUMBER , - NUMBER , NUMBER , NUMBER , - NUMBER } ; assertEquals ( Base64Utils . encodeToString ( byte[] ) , javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeFromString ( Base64Utils . encodeToString ( byte[] ) ) ) ; assertArrayEquals ( byte[] , javax.xml.bind.DatatypeConverter . byte[] ( javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertEquals ( Base64Utils . encodeToString ( byte[] ) , javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeFromString ( Base64Utils . encodeToString ( byte[] ) ) ) ; assertArrayEquals ( byte[] , javax.xml.bind.DatatypeConverter . byte[] ( javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertEquals ( Base64Utils . encodeToString ( byte[] ) , javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeFromString ( Base64Utils . encodeToString ( byte[] ) ) ) ; assertArrayEquals ( byte[] , javax.xml.bind.DatatypeConverter . byte[] ( javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ) ; byte[] = STRING . byte[] ( STRING ) ; assertEquals ( Base64Utils . encodeToString ( byte[] ) , javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeFromString ( Base64Utils . encodeToString ( byte[] ) ) ) ; assertArrayEquals ( byte[] , javax.xml.bind.DatatypeConverter . byte[] ( javax.xml.bind.DatatypeConverter . java.lang.String ( byte[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { byte [] byte[] = new byte [] { ( byte ) NUMBER , ( byte ) NUMBER } ; assertArrayEquals ( STRING . byte[] ( ) , Base64Utils . encodeUrlSafe ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeUrlSafe ( Base64Utils . encodeUrlSafe ( byte[] ) ) ) ; assertEquals ( STRING , Base64Utils . encodeToUrlSafeString ( byte[] ) ) ; assertArrayEquals ( byte[] , Base64Utils . decodeFromUrlSafeString ( Base64Utils . encodeToUrlSafeString ( byte[] ) ) ) ; }  <METHOD_END>
