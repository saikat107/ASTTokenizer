<METHOD_START> public void ( java.lang.Runnable java.lang.Runnable , ErrorHandler org.springframework.scheduling.support.ErrorHandler ) { Assert . notNull ( java.lang.Runnable , STRING ) ; Assert . notNull ( org.springframework.scheduling.support.ErrorHandler , STRING ) ; this . java.lang.Runnable = java.lang.Runnable ; this . org.springframework.scheduling.support.ErrorHandler = org.springframework.scheduling.support.ErrorHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . java.lang.Runnable . void ( ) ; } catch ( java.lang.reflect.UndeclaredThrowableException java.lang.reflect.UndeclaredThrowableException ) { this . org.springframework.scheduling.support.ErrorHandler . handleError ( java.lang.reflect.UndeclaredThrowableException . java.lang.Throwable ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.scheduling.support.ErrorHandler . handleError ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.Runnable ; }  <METHOD_END>
