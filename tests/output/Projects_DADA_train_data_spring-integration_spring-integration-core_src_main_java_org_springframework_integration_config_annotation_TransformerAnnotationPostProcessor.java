<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); this . messageHandlerAttributes . addAll ( java.util.Arrays .< java.lang.String > java.util.List<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { org . springframework . integration . org.springframework.integration.transformer . org.springframework.integration.transformer org.springframework.integration.transformer.Transformer ; if ( AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , Bean .class . java.lang.String ( ) ) ) { java.lang.Object java.lang.Object = this . resolveTargetBeanFromMethodWithBeanAnnotation ( java.lang.reflect.Method ) ; org.springframework.integration.transformer.Transformer = this . extractTypeIfPossible ( java.lang.Object , org . springframework . integration . org.springframework.integration.transformer . org.springframework.integration.transformer .class ) ; if ( org.springframework.integration.transformer.Transformer == null ) { if ( this . extractTypeIfPossible ( java.lang.Object , AbstractReplyProducingMessageHandler .class ) != null ) { checkMessageHandlerAttributes ( resolveTargetBeanName ( java.lang.reflect.Method ) , java.util.List<java.lang.annotation.Annotation> ) ; return ( MessageHandler ) java.lang.Object ; } org.springframework.integration.transformer.Transformer = new MethodInvokingTransformer ( java.lang.Object ) ; } } else { org.springframework.integration.transformer.Transformer = new MethodInvokingTransformer ( java.lang.Object , java.lang.reflect.Method ) ; } MessageTransformingHandler org.springframework.integration.config.annotation.MessageTransformingHandler = new MessageTransformingHandler ( org.springframework.integration.transformer.Transformer ) ; this . setOutputChannelIfPresent ( java.util.List<java.lang.annotation.Annotation> , org.springframework.integration.config.annotation.MessageTransformingHandler ) ; return org.springframework.integration.config.annotation.MessageTransformingHandler ; }  <METHOD_END>
