<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.ConfigurableApplicationContext != null ) { this . org.springframework.boot.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setBanner ( new org.springframework.boot.BannerTests.DummyBanner ( ) ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; Banner org.springframework.boot.Banner = mock ( Banner .class ) ; org.springframework.boot.SpringApplication . setBanner ( org.springframework.boot.Banner ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; Banner org.springframework.boot.Banner = ( Banner ) this . org.springframework.boot.ConfigurableApplicationContext . getBean ( STRING ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.Banner , STRING ) ) . isEqualTo ( org.springframework.boot.Banner ) ; verify ( org.springframework.boot.Banner ) . printBanner ( any ( Environment .class ) , this . org.springframework.boot.ArgumentCaptor<java.lang.Class<?>> . capture ( ) , any ( java.io.PrintStream .class ) ) ; reset ( org.springframework.boot.Banner ) ; org.springframework.boot.Banner . printBanner ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) , null , java.lang.System . java.io.PrintStream ) ; verify ( org.springframework.boot.Banner ) . printBanner ( any ( Environment .class ) , eq ( this . org.springframework.boot.ArgumentCaptor<java.lang.Class<?>> . getValue ( ) ) , any ( java.io.PrintStream .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.BannerTests.Config .class ) ; org.springframework.boot.SpringApplication . setBannerMode ( Mode . OFF ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.Environment , java.lang.Class<?> < ? > java.lang.Class<?> , java.io.PrintStream java.io.PrintStream ) { java.io.PrintStream . void ( STRING ) ; }  <METHOD_END>
