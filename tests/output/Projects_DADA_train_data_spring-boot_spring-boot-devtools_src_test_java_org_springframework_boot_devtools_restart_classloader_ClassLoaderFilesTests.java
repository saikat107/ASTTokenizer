<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( null , mock ( ClassLoaderFile .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( STRING ) ) . isEqualTo ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( STRING ) ) . isEqualTo ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( STRING ) ) . isEqualTo ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getOrCreateSourceFolder ( STRING ) . getFiles ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getOrCreateSourceFolder ( STRING ) . getFiles ( ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> < SourceFolder > java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getSourceFolders ( ) . iterator ( ) ; SourceFolder org.springframework.boot.devtools.restart.classloader.SourceFolder = java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . next ( ) ; SourceFolder org.springframework.boot.devtools.restart.classloader.SourceFolder = java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . next ( ) ; assertThat ( java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getFiles ( ) ) . containsOnly ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getFiles ( ) ) . containsOnly ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.ByteArrayOutputStream ) ; java.io.ObjectOutputStream . void ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles ) ; java.io.ObjectOutputStream . void ( ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles = ( ClassLoaderFiles ) java.io.ObjectInputStream . java.lang.Object ( ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getFile ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . ADDED , new byte [ NUMBER ] ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles = new ClassLoaderFiles ( ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; ClassLoaderFile org.springframework.boot.devtools.restart.classloader.ClassLoaderFile = new ClassLoaderFile ( Kind . MODIFIED , new byte [ NUMBER ] ) ; org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addAll ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles ) ; java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> < SourceFolder > java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> = this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . getSourceFolders ( ) . iterator ( ) ; SourceFolder org.springframework.boot.devtools.restart.classloader.SourceFolder = java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . next ( ) ; SourceFolder org.springframework.boot.devtools.restart.classloader.SourceFolder = java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . next ( ) ; assertThat ( java.util.Iterator<org.springframework.boot.devtools.restart.classloader.SourceFolder> . hasNext ( ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.SourceFolder . getFiles ( ) ) . containsOnly ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFile , org.springframework.boot.devtools.restart.classloader.ClassLoaderFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.classloader.ExpectedException . expectMessage ( STRING ) ; new ClassLoaderFiles ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; ClassLoaderFiles org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles = new ClassLoaderFiles ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles ) ; this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . addFile ( STRING , STRING , mock ( ClassLoaderFile .class ) ) ; assertThat ( this . org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
