<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.PollableChannel ) . build ( ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.endpoint.PollableChannel ) . build ( ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; try { org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.GenericMessage<java.lang.String> ) ; } catch ( MessagingException org.springframework.integration.endpoint.MessagingException ) { assertTrue ( org.springframework.integration.endpoint.MessagingException . getCause ( ) instanceof DestinationResolutionException ) ; } org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; GenericMessage < java.lang.String > org.springframework.integration.endpoint.GenericMessage<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.GenericMessage<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.endpoint.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.endpoint.ReturnAddressTests> ( ) ) ; MessageChannel org.springframework.integration.endpoint.MessageChannel = ( MessageChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . start ( ) ; Message < java.lang.String > org.springframework.integration.endpoint.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . build ( ) ; org.springframework.integration.endpoint.MessageChannel . send ( org.springframework.integration.endpoint.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.endpoint.Message<?> = org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.endpoint.Message<> ) ; assertEquals ( STRING , org.springframework.integration.endpoint.Message<> . getPayload ( ) ) ; PollableChannel org.springframework.integration.endpoint.PollableChannel = ( PollableChannel ) org.springframework.integration.endpoint.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertNull ( org.springframework.integration.endpoint.PollableChannel . receive ( NUMBER ) ) ; org.springframework.integration.endpoint.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
