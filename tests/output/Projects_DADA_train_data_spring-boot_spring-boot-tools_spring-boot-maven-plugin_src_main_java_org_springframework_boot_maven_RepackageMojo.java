<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.maven.MojoExecutionException , org.springframework.boot.maven.MojoFailureException { if ( this . org.springframework.boot.maven.MavenProject . getPackaging ( ) . equals ( STRING ) ) { getLog ( ) . debug ( STRING ) ; return; } if ( this . boolean ) { getLog ( ) . debug ( STRING ) ; return; } void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.boot.maven.MojoExecutionException { java.io.File java.io.File = this . org.springframework.boot.maven.MavenProject . getArtifact ( ) . getFile ( ) ; java.io.File java.io.File = java.io.File ( ) ; Repackager org.springframework.boot.maven.Repackager = org.springframework.boot.maven.Repackager ( java.io.File ) ; java.util.Set<org.springframework.boot.maven.Artifact> < Artifact > java.util.Set<org.springframework.boot.maven.Artifact> = filterDependencies ( this . org.springframework.boot.maven.MavenProject . getArtifacts ( ) , getFilters ( org.springframework.boot.maven.ArtifactsFilter[] ( ) ) ) ; Libraries org.springframework.boot.maven.Libraries = new ArtifactsLibraries ( java.util.Set<org.springframework.boot.maven.Artifact> , this . java.util.List<org.springframework.boot.maven.Dependency> , getLog ( ) ) ; try { LaunchScript org.springframework.boot.maven.LaunchScript = org.springframework.boot.maven.LaunchScript ( ) ; org.springframework.boot.maven.Repackager . repackage ( java.io.File , org.springframework.boot.maven.Libraries , org.springframework.boot.maven.LaunchScript ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MojoExecutionException ( java.io.IOException . java.lang.String ( ) , java.io.IOException ) ; } void ( java.io.File , java.io.File , org.springframework.boot.maven.Repackager . getBackupFile ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( ) { java.lang.String java.lang.String = ( this . java.lang.String == null ? STRING : this . java.lang.String . java.lang.String ( ) ) ; if ( java.lang.String . int ( ) > NUMBER && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } if ( ! this . java.io.File . boolean ( ) ) { this . java.io.File . boolean ( ) ; } return new java.io.File ( this . java.io.File , this . java.lang.String + java.lang.String + STRING + this . org.springframework.boot.maven.MavenProject . getArtifact ( ) . getArtifactHandler ( ) . getExtension ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.maven.Repackager org.springframework.boot.maven.Repackager ( java.io.File java.io.File ) { Repackager org.springframework.boot.maven.Repackager = new Repackager ( java.io.File , this . org.springframework.boot.maven.LayoutFactory ) ; org.springframework.boot.maven.Repackager . addMainClassTimeoutWarningListener ( new org.springframework.boot.maven.RepackageMojo.LoggingMainClassTimeoutWarningListener ( ) ) ; org.springframework.boot.maven.Repackager . setMainClass ( this . java.lang.String ) ; if ( this . org.springframework.boot.maven.RepackageMojo.LayoutType != null ) { getLog ( ) . info ( STRING + this . org.springframework.boot.maven.RepackageMojo.LayoutType ) ; org.springframework.boot.maven.Repackager . setLayout ( this . org.springframework.boot.maven.RepackageMojo.LayoutType . org.springframework.boot.maven.Layout ( ) ) ; } return org.springframework.boot.maven.Repackager ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.maven.ArtifactsFilter [] org.springframework.boot.maven.ArtifactsFilter[] ( ) { java.util.List<org.springframework.boot.maven.ArtifactsFilter> < ArtifactsFilter > java.util.List<org.springframework.boot.maven.ArtifactsFilter> = new java.util.ArrayList<org.springframework.boot.maven.ArtifactsFilter> <> ( ) ; if ( this . boolean ) { Exclude org.springframework.boot.maven.Exclude = new Exclude ( ) ; org.springframework.boot.maven.Exclude . setGroupId ( STRING ) ; org.springframework.boot.maven.Exclude . setArtifactId ( STRING ) ; ExcludeFilter org.springframework.boot.maven.ExcludeFilter = new ExcludeFilter ( org.springframework.boot.maven.Exclude ) ; java.util.List<org.springframework.boot.maven.ArtifactsFilter> . add ( org.springframework.boot.maven.ExcludeFilter ) ; } if ( ! this . boolean ) { java.util.List<org.springframework.boot.maven.ArtifactsFilter> . add ( new ScopeFilter ( null , Artifact . SCOPE_SYSTEM ) ) ; } return java.util.List<org.springframework.boot.maven.ArtifactsFilter> . toArray ( new ArtifactsFilter [ java.util.List<org.springframework.boot.maven.ArtifactsFilter> . size ( ) ] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.maven.LaunchScript org.springframework.boot.maven.LaunchScript ( ) java.io.IOException { if ( this . boolean || this . java.io.File != null ) { return new DefaultLaunchScript ( this . java.io.File , java.util.Properties ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Properties java.util.Properties ( ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; if ( this . java.util.Properties != null ) { java.util.Properties . void ( this . java.util.Properties ) ; } void ( java.util.Properties , STRING , this . org.springframework.boot.maven.MavenProject . getArtifactId ( ) ) ; void ( java.util.Properties , STRING , this . org.springframework.boot.maven.MavenProject . getName ( ) , this . org.springframework.boot.maven.MavenProject . getArtifactId ( ) ) ; void ( java.util.Properties , STRING , java.lang.String ( this . org.springframework.boot.maven.MavenProject . getDescription ( ) ) , this . org.springframework.boot.maven.MavenProject . getName ( ) , this . org.springframework.boot.maven.MavenProject . getArtifactId ( ) ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ( java.lang.String == null ? null : java.lang.String . java.lang.String ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Properties java.util.Properties , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { if ( ! java.util.Properties . boolean ( java.lang.String ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String != null && java.lang.String . int ( ) > NUMBER ) { java.util.Properties . java.lang.Object ( java.lang.String , java.lang.String ) ; return; } } } }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File , java.io.File java.io.File ) { if ( this . boolean ) { void ( java.io.File , java.io.File ) ; } else if ( java.io.File . boolean ( java.io.File ) ) { this . org.springframework.boot.maven.MavenProject . getArtifact ( ) . setFile ( java.io.File ) ; getLog ( ) . info ( STRING + java.io.File + STRING + java.io.File ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File ) { if ( this . java.lang.String != null ) { getLog ( ) . info ( STRING + java.io.File + STRING + this . java.lang.String ) ; this . org.springframework.boot.maven.MavenProjectHelper . attachArtifact ( this . org.springframework.boot.maven.MavenProject , this . org.springframework.boot.maven.MavenProject . getPackaging ( ) , this . java.lang.String , java.io.File ) ; } else if ( ! java.io.File . boolean ( java.io.File ) ) { this . org.springframework.boot.maven.MavenProject . getArtifact ( ) . setFile ( java.io.File ) ; getLog ( ) . info ( STRING + java.io.File + STRING + java.io.File ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.maven.Layout org.springframework.boot.maven.Layout ( ) { return this . org.springframework.boot.maven.Layout ; }  <METHOD_END>
<METHOD_START> void ( Layout org.springframework.boot.maven.Layout ) { this . org.springframework.boot.maven.Layout = org.springframework.boot.maven.Layout ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long , java.lang.String java.lang.String ) { getLog ( ) . warn ( STRING + STRING + STRING ) ; }  <METHOD_END>
