<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> = ArgumentCaptor . forClass ( MediaType .class ) ; this . org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( MimeTypeUtils . TEXT_HTML , MimeTypeUtils . TEXT_XML ) ; assertEquals ( java.util.Arrays . java.util.List ( TEXT_HTML , TEXT_XML ) , org.springframework.http.codec.HttpMessageWriter<> . getWritableMediaTypes ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( MimeTypeUtils . TEXT_HTML ) ; when ( this . org.springframework.http.codec.Encoder<java.lang.String> . canEncode ( forClass ( java.lang.String .class ) , TEXT_HTML ) ) . thenReturn ( true ) ; assertTrue ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( forClass ( java.lang.String .class ) , TEXT_HTML ) ) ; assertFalse ( org.springframework.http.codec.HttpMessageWriter<> . canWrite ( forClass ( java.lang.String .class ) , TEXT_XML ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageWriter < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( MimeTypeUtils . ALL ) ; org.springframework.http.codec.HttpMessageWriter<java.lang.String> . write ( Mono . just ( STRING ) , forClass ( java.lang.String .class ) , TEXT_PLAIN , this . org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( TEXT_PLAIN , org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( TEXT_PLAIN , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( null ) ; void ( new MediaType ( STRING , STRING ) ) ; void ( new MediaType ( STRING , STRING ) ) ; void ( MediaType . APPLICATION_OCTET_STREAM ) ; }  <METHOD_END>
<METHOD_START> private void void ( MediaType org.springframework.http.codec.MediaType ) { this . org.springframework.http.codec.MockServerHttpResponse = new MockServerHttpResponse ( ) ; this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> = ArgumentCaptor . forClass ( MediaType .class ) ; MimeType org.springframework.http.codec.MimeType = MimeTypeUtils . TEXT_XML ; HttpMessageWriter < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( org.springframework.http.codec.MimeType ) ; org.springframework.http.codec.HttpMessageWriter<java.lang.String> . write ( Mono . just ( STRING ) , forClass ( java.lang.String .class ) , org.springframework.http.codec.MediaType , this . org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( org.springframework.http.codec.MimeType , this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( org.springframework.http.codec.MimeType , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpMessageWriter < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( org.springframework.http.codec.MediaType , TEXT_HTML ) ; org.springframework.http.codec.HttpMessageWriter<java.lang.String> . write ( Mono . just ( STRING ) , forClass ( java.lang.String .class ) , TEXT_HTML , org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( new MediaType ( STRING , STRING , java.nio.charset.Charset ) , this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( new MediaType ( STRING , STRING , java.nio.charset.Charset ) , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.http.codec.MediaType = new MediaType ( STRING , STRING , java.nio.charset.Charset ) ; HttpMessageWriter < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( org.springframework.http.codec.MediaType , TEXT_HTML ) ; org.springframework.http.codec.HttpMessageWriter<java.lang.String> . write ( Mono . just ( STRING ) , forClass ( java.lang.String .class ) , org.springframework.http.codec.MediaType , this . org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( org.springframework.http.codec.MediaType , this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( org.springframework.http.codec.MediaType , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MediaType org.springframework.http.codec.MediaType = MediaType . TEXT_HTML ; this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . setContentType ( org.springframework.http.codec.MediaType ) ; HttpMessageWriter < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> = org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( org.springframework.http.codec.MediaType , TEXT_HTML ) ; org.springframework.http.codec.HttpMessageWriter<java.lang.String> . write ( Mono . just ( STRING ) , forClass ( java.lang.String .class ) , TEXT_PLAIN , this . org.springframework.http.codec.MockServerHttpResponse , java.util.Map<java.lang.String,java.lang.Object> ) ; assertEquals ( org.springframework.http.codec.MediaType , this . org.springframework.http.codec.MockServerHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( org.springframework.http.codec.MediaType , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.codec.HttpMessageWriter<java.lang.String> < java.lang.String > org.springframework.http.codec.HttpMessageWriter<java.lang.String> ( MimeType ... org.springframework.http.codec.MimeType[] ) { java.util.List<org.springframework.http.codec.MimeType> < MimeType > java.util.List<org.springframework.http.codec.MimeType> = java.util.Arrays . java.util.List ( org.springframework.http.codec.MimeType[] ) ; when ( this . org.springframework.http.codec.Encoder<java.lang.String> . getEncodableMimeTypes ( ) ) . thenReturn ( java.util.List<org.springframework.http.codec.MimeType> ) ; when ( this . org.springframework.http.codec.Encoder<java.lang.String> . encode ( any ( ) , any ( ) , any ( ) , this . org.springframework.http.codec.ArgumentCaptor<org.springframework.http.codec.MediaType> . capture ( ) , any ( ) ) ) . thenReturn ( Flux . empty ( ) ) ; return new EncoderHttpMessageWriter <> ( this . org.springframework.http.codec.Encoder<java.lang.String> ) ; }  <METHOD_END>
