<METHOD_START> public void ( ResourceMappings org.springframework.data.rest.webmvc.ResourceMappings , RepositoryRestConfiguration org.springframework.data.rest.webmvc.RepositoryRestConfiguration ) { this( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestConfiguration , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ResourceMappings org.springframework.data.rest.webmvc.ResourceMappings , RepositoryRestConfiguration org.springframework.data.rest.webmvc.RepositoryRestConfiguration , Repositories org.springframework.data.rest.webmvc.Repositories ) { this( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestConfiguration , java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.Repositories ) ); }  <METHOD_END>
<METHOD_START> private void ( ResourceMappings org.springframework.data.rest.webmvc.ResourceMappings , RepositoryRestConfiguration org.springframework.data.rest.webmvc.RepositoryRestConfiguration , java.util.Optional<org.springframework.data.rest.webmvc.Repositories> < Repositories > java.util.Optional<org.springframework.data.rest.webmvc.Repositories> ) { super( org.springframework.data.rest.webmvc.RepositoryRestConfiguration ); Assert . notNull ( org.springframework.data.rest.webmvc.ResourceMappings , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.RepositoryRestConfiguration , STRING ) ; Assert . notNull ( java.util.Optional<org.springframework.data.rest.webmvc.Repositories> , STRING ) ; this . org.springframework.data.rest.webmvc.ResourceMappings = org.springframework.data.rest.webmvc.ResourceMappings ; this . org.springframework.data.rest.webmvc.RepositoryRestConfiguration = org.springframework.data.rest.webmvc.RepositoryRestConfiguration ; this . java.util.Optional<org.springframework.data.rest.webmvc.Repositories> = java.util.Optional<org.springframework.data.rest.webmvc.Repositories> ; this . org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.RepositoryCorsConfigurationAccessor = new org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.RepositoryCorsConfigurationAccessor ( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.NoOpStringValueResolver . org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.NoOpStringValueResolver , java.util.Optional<org.springframework.data.rest.webmvc.Repositories> ) ; }  <METHOD_END>
<METHOD_START> public void void ( JpaHelper org.springframework.data.rest.webmvc.JpaHelper ) { this . org.springframework.data.rest.webmvc.JpaHelper = org.springframework.data.rest.webmvc.JpaHelper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StringValueResolver org.springframework.data.rest.webmvc.StringValueResolver ) { super. setEmbeddedValueResolver ( org.springframework.data.rest.webmvc.StringValueResolver ) ; this . org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.RepositoryCorsConfigurationAccessor = new org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.RepositoryCorsConfigurationAccessor ( org.springframework.data.rest.webmvc.ResourceMappings , org.springframework.data.rest.webmvc.StringValueResolver == null ? org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.NoOpStringValueResolver . org.springframework.data.rest.webmvc.RepositoryRestHandlerMapping.NoOpStringValueResolver : org.springframework.data.rest.webmvc.StringValueResolver , java.util.Optional<org.springframework.data.rest.webmvc.Repositories> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.rest.webmvc.HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod ( java.lang.String java.lang.String , HttpServletRequest org.springframework.data.rest.webmvc.HttpServletRequest ) throws java.lang.Exception { HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod = super. lookupHandlerMethod ( java.lang.String , org.springframework.data.rest.webmvc.HttpServletRequest ) ; if ( org.springframework.data.rest.webmvc.HandlerMethod == null ) { return null ; } java.lang.String java.lang.String = new BaseUri ( org.springframework.data.rest.webmvc.RepositoryRestConfiguration . getBaseUri ( ) ) . getRepositoryLookupPath ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.springframework.data.rest.webmvc.HandlerMethod ; } return org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( java.lang.String ( java.lang.String ) ) ? org.springframework.data.rest.webmvc.HandlerMethod : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.rest.webmvc.HandlerMethod org.springframework.data.rest.webmvc.HandlerMethod ( java.util.Set<org.springframework.data.rest.webmvc.RequestMappingInfo> < RequestMappingInfo > java.util.Set<org.springframework.data.rest.webmvc.RequestMappingInfo> , java.lang.String java.lang.String , HttpServletRequest org.springframework.data.rest.webmvc.HttpServletRequest ) throws org.springframework.data.rest.webmvc.ServletException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return AnnotationUtils . findAnnotation ( java.lang.Class<> , RepositoryRestController .class ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { if ( null != org.springframework.data.rest.webmvc.JpaHelper ) { for ( java.lang.Object java.lang.Object : org.springframework.data.rest.webmvc.JpaHelper . getInterceptors ( ) ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.rest.webmvc.ProducesRequestCondition org.springframework.data.rest.webmvc.ProducesRequestCondition ( ProducesRequestCondition org.springframework.data.rest.webmvc.ProducesRequestCondition ) { if ( ! org.springframework.data.rest.webmvc.ProducesRequestCondition . isEmpty ( ) ) { return org.springframework.data.rest.webmvc.ProducesRequestCondition ; } java.util.HashSet<java.lang.String> < java.lang.String > java.util.HashSet<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> < java.lang.String > ( ) ; java.util.HashSet<java.lang.String> . boolean ( org.springframework.data.rest.webmvc.RepositoryRestConfiguration . getDefaultMediaType ( ) . toString ( ) ) ; java.util.HashSet<java.lang.String> . boolean ( MediaType . APPLICATION_JSON_VALUE ) ; return new ProducesRequestCondition ( java.util.HashSet<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.HashSet<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.rest.webmvc.CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration ( java.lang.Object java.lang.Object , HttpServletRequest org.springframework.data.rest.webmvc.HttpServletRequest ) { java.lang.String java.lang.String = getUrlPathHelper ( ) . getLookupPathForRequest ( org.springframework.data.rest.webmvc.HttpServletRequest ) ; java.lang.String java.lang.String = new BaseUri ( org.springframework.data.rest.webmvc.RepositoryRestConfiguration . getBaseUri ( ) ) . getRepositoryLookupPath ( java.lang.String ) ; CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration = super. getCorsConfiguration ( java.lang.Object , org.springframework.data.rest.webmvc.HttpServletRequest ) ; return java.util.Optional<org.springframework.data.rest.webmvc.Repositories> . filter ( it -> StringUtils . hasText ( repositoryLookupPath ) ) . flatMap ( it -> corsConfigurationAccessor . findCorsConfiguration ( lookupPath ) ) . map ( it -> it . combine ( corsConfiguration ) ) . orElse ( org.springframework.data.rest.webmvc.CorsConfiguration ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( '/' , java.lang.String . boolean ( STRING ) ? NUMBER : NUMBER ) ; return int == - NUMBER ? java.lang.String : java.lang.String . java.lang.String ( NUMBER , int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.rest.webmvc.CorsConfiguration> < CorsConfiguration > java.util.Optional<org.springframework.data.rest.webmvc.CorsConfiguration> ( java.lang.String java.lang.String ) { return java.util.Optional<org.springframework.data.rest.webmvc.ResourceMetadata> ( java.lang.String ( java.lang.String ) ) . flatMap ( it -> repositories . flatMap ( foo -> foo . getRepositoryInformationFor ( it . getDomainType ( ) ) ) ) . map ( it -> it . getRepositoryInterface ( ) ) . map ( it -> createConfiguration ( it ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<org.springframework.data.rest.webmvc.ResourceMetadata> < ResourceMetadata > java.util.Optional<org.springframework.data.rest.webmvc.ResourceMetadata> ( java.lang.String java.lang.String ) { if ( ! org.springframework.data.rest.webmvc.ResourceMappings . exportsTopLevelResourceFor ( java.lang.String ) ) { return java.util.Optional . java.util.Optional<org.springframework.data.rest.webmvc.ResourceMetadata> ( ) ; } return org.springframework.data.rest.webmvc.ResourceMappings . stream ( ) . filter ( it -> it . getPath ( ) . matches ( basePath ) && it . isExported ( ) ) . findFirst ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.rest.webmvc.CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration ( java.lang.Class<?> < ? > java.lang.Class<?> ) { CrossOrigin org.springframework.data.rest.webmvc.CrossOrigin = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , CrossOrigin .class ) ; if ( org.springframework.data.rest.webmvc.CrossOrigin == null ) { return null ; } CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration = new CorsConfiguration ( ) ; void ( org.springframework.data.rest.webmvc.CorsConfiguration , org.springframework.data.rest.webmvc.CrossOrigin ) ; if ( CollectionUtils . isEmpty ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedOrigins ( ) ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . setAllowedOrigins ( java.util.Arrays . java.util.List ( CrossOrigin . DEFAULT_ORIGINS ) ) ; } if ( CollectionUtils . isEmpty ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedMethods ( ) ) ) { for ( HttpMethod org.springframework.data.rest.webmvc.HttpMethod : HttpMethod . values ( ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . addAllowedMethod ( org.springframework.data.rest.webmvc.HttpMethod ) ; } } if ( CollectionUtils . isEmpty ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowedHeaders ( ) ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . setAllowedHeaders ( java.util.Arrays . java.util.List ( CrossOrigin . DEFAULT_ALLOWED_HEADERS ) ) ; } if ( org.springframework.data.rest.webmvc.CorsConfiguration . getAllowCredentials ( ) == null ) { org.springframework.data.rest.webmvc.CorsConfiguration . setAllowCredentials ( CrossOrigin . DEFAULT_ALLOW_CREDENTIALS ) ; } if ( org.springframework.data.rest.webmvc.CorsConfiguration . getMaxAge ( ) == null ) { org.springframework.data.rest.webmvc.CorsConfiguration . setMaxAge ( CrossOrigin . DEFAULT_MAX_AGE ) ; } return org.springframework.data.rest.webmvc.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> private void void ( CorsConfiguration org.springframework.data.rest.webmvc.CorsConfiguration , CrossOrigin org.springframework.data.rest.webmvc.CrossOrigin ) { for ( java.lang.String java.lang.String : org.springframework.data.rest.webmvc.CrossOrigin . origins ( ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . addAllowedOrigin ( java.lang.String ( java.lang.String ) ) ; } for ( RequestMethod org.springframework.data.rest.webmvc.RequestMethod : org.springframework.data.rest.webmvc.CrossOrigin . methods ( ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . addAllowedMethod ( org.springframework.data.rest.webmvc.RequestMethod . name ( ) ) ; } for ( java.lang.String java.lang.String : org.springframework.data.rest.webmvc.CrossOrigin . allowedHeaders ( ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . addAllowedHeader ( java.lang.String ( java.lang.String ) ) ; } for ( java.lang.String java.lang.String : org.springframework.data.rest.webmvc.CrossOrigin . exposedHeaders ( ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . addExposedHeader ( java.lang.String ( java.lang.String ) ) ; } java.lang.String java.lang.String = java.lang.String ( org.springframework.data.rest.webmvc.CrossOrigin . allowCredentials ( ) ) ; if ( STRING . boolean ( java.lang.String ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . setAllowCredentials ( true ) ; } else if ( STRING . boolean ( java.lang.String ) ) { org.springframework.data.rest.webmvc.CorsConfiguration . setAllowCredentials ( false ) ; } else if ( ! java.lang.String . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING ) ; } if ( org.springframework.data.rest.webmvc.CrossOrigin . maxAge ( ) >= NUMBER && org.springframework.data.rest.webmvc.CorsConfiguration . getMaxAge ( ) == null ) { org.springframework.data.rest.webmvc.CorsConfiguration . setMaxAge ( org.springframework.data.rest.webmvc.CrossOrigin . maxAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.data.rest.webmvc.StringValueResolver . resolveStringValue ( java.lang.String ) ; }  <METHOD_END>
