<METHOD_START> @ Before public void void ( ) { org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> = new ListAppender < ILoggingEvent > ( ) ; ch.qos.logback.classic.Logger = ( ch . ch . ch . ch . ch ) LoggerFactory . getLogger ( LoggingEventListener .class ) ; ch.qos.logback.classic.Logger . setAdditive ( false ) ; ch.qos.logback.classic.Logger . setLevel ( Level . INFO ) ; ch.qos.logback.classic.Logger . addAppender ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> ) ; org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . start ( ) ; org.springframework.data.mongodb.core.mapping.event.LoggingEventListener = new LoggingEventListener ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( ch.qos.logback.classic.Logger != null ) { ch.qos.logback.classic.Logger . detachAppender ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> ) ; ch.qos.logback.classic.Logger . setAdditive ( true ) ; ch.qos.logback.classic.Logger . setLevel ( null ) ; } if ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> != null ) { org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.LoggingEventListener . onAfterConvert ( new AfterConvertEvent < java.lang.Object > ( new Document ( STRING , new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) ) , this , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . list . get ( NUMBER ) . getFormattedMessage ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.LoggingEventListener . onBeforeSave ( new BeforeSaveEvent < java.lang.Object > ( new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) , new Document ( STRING , new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) ) , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . list . get ( NUMBER ) . getFormattedMessage ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.LoggingEventListener . onAfterSave ( new AfterSaveEvent < java.lang.Object > ( new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) , new Document ( STRING , new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) ) , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . list . get ( NUMBER ) . getFormattedMessage ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.LoggingEventListener . onBeforeDelete ( new BeforeDeleteEvent < java.lang.Object > ( new Document ( STRING , new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) ) , java.lang.Object .class , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . list . get ( NUMBER ) . getFormattedMessage ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.LoggingEventListener . onAfterDelete ( new AfterDeleteEvent < java.lang.Object > ( new Document ( STRING , new org.springframework.data.mongodb.core.mapping.event.LoggingEventListenerTests.Foo ( ) ) , java.lang.Object .class , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.ListAppender<org.springframework.data.mongodb.core.mapping.event.ILoggingEvent> . list . get ( NUMBER ) . getFormattedMessage ( ) , startsWith ( STRING ) ) ; }  <METHOD_END>
