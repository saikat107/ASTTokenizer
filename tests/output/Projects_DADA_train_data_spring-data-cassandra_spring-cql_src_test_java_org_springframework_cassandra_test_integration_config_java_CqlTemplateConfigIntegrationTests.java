<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected int int ( ) { return cassandraEnvironment . getPort ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.test.integration.config.java.NettyOptions org.springframework.cassandra.test.integration.config.java.NettyOptions ( ) { return IntegrationTestNettyOptions . INSTANCE ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.cassandra.test.integration.config.java.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cassandra.test.integration.config.java.CqlTemplateConfigIntegrationTests.Config .class ) ; this . org.springframework.cassandra.test.integration.config.java.Session = org.springframework.cassandra.test.integration.config.java.ConfigurableApplicationContext . getBean ( Session .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.cassandra.test.integration.config.java.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CqlTemplate org.springframework.cassandra.test.integration.config.java.CqlTemplate = org.springframework.cassandra.test.integration.config.java.ConfigurableApplicationContext . getBean ( CqlTemplate .class ) ; assertThat ( org.springframework.cassandra.test.integration.config.java.CqlTemplate . describeRing ( ) ) . isNotEmpty ( ) ; }  <METHOD_END>
