<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext . getBean ( HeapdumpMvcEndpoint .class ) . setEnabled ( true ) ; this . org.springframework.boot.actuate.endpoint.mvc.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.actuate.endpoint.mvc.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.endpoint.mvc.MockMvc . perform ( options ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint ( ) { return new org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ); void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; this . boolean = false ; this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.actuate.endpoint.mvc.HeapDumper org.springframework.boot.actuate.endpoint.mvc.HeapDumper ( ) { return new HeapDumper ( ) { @ java.lang.Override public void void ( java.io.File java.io.File , boolean boolean )						throws java.io.IOException , java.lang.InterruptedException { if ( ! org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new HeapDumperUnavailableException ( STRING , null ) ; } if ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new java.lang.InterruptedException ( ) ; } if ( java.io.File . boolean ( ) ) { throw new java.io.IOException ( STRING ) ; } FileCopyUtils . copy ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . java.lang.String . byte[] ( ) , java.io.File ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.File java.io.File , boolean boolean )						throws java.io.IOException , java.lang.InterruptedException { if ( ! org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new HeapDumperUnavailableException ( STRING , null ) ; } if ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . boolean ) { throw new java.lang.InterruptedException ( ) ; } if ( java.io.File . boolean ( ) ) { throw new java.io.IOException ( STRING ) ; } FileCopyUtils . copy ( org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpointSecureOptionsTests.TestHeapdumpMvcEndpoint .this . java.lang.String . byte[] ( ) , java.io.File ) ; }  <METHOD_END>
