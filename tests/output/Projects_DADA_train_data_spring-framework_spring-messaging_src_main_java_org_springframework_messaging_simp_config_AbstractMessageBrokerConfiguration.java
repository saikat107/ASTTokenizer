<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.messaging.simp.config.ApplicationContext ) { this . org.springframework.messaging.simp.config.ApplicationContext = org.springframework.messaging.simp.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.config.ApplicationContext org.springframework.messaging.simp.config.ApplicationContext ( ) { return this . org.springframework.messaging.simp.config.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { ExecutorSubscribableChannel org.springframework.messaging.simp.config.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) ) ; ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.ChannelRegistration ( ) ; org.springframework.messaging.simp.config.ExecutorSubscribableChannel . setInterceptors ( org.springframework.messaging.simp.config.ChannelRegistration . getInterceptors ( ) ) ; return org.springframework.messaging.simp.config.ExecutorSubscribableChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) { TaskExecutorRegistration org.springframework.messaging.simp.config.TaskExecutorRegistration = org.springframework.messaging.simp.config.ChannelRegistration ( ) . getOrCreateTaskExecRegistration ( ) ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = org.springframework.messaging.simp.config.TaskExecutorRegistration . getTaskExecutor ( ) ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setThreadNamePrefix ( STRING ) ; return org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.messaging.simp.config.ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ( ) { if ( this . org.springframework.messaging.simp.config.ChannelRegistration == null ) { ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = new ChannelRegistration ( ) ; void ( org.springframework.messaging.simp.config.ChannelRegistration ) ; org.springframework.messaging.simp.config.ChannelRegistration . setInterceptors ( new ImmutableMessageChannelInterceptor ( ) ) ; this . org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.ChannelRegistration ; } return this . org.springframework.messaging.simp.config.ChannelRegistration ; }  <METHOD_END>
<METHOD_START> protected void void ( ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { ExecutorSubscribableChannel org.springframework.messaging.simp.config.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) ) ; ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.ChannelRegistration ( ) ; org.springframework.messaging.simp.config.ExecutorSubscribableChannel . setInterceptors ( org.springframework.messaging.simp.config.ChannelRegistration . getInterceptors ( ) ) ; return org.springframework.messaging.simp.config.ExecutorSubscribableChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) { TaskExecutorRegistration org.springframework.messaging.simp.config.TaskExecutorRegistration = org.springframework.messaging.simp.config.ChannelRegistration ( ) . getOrCreateTaskExecRegistration ( ) ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = org.springframework.messaging.simp.config.TaskExecutorRegistration . getTaskExecutor ( ) ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setThreadNamePrefix ( STRING ) ; return org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.messaging.simp.config.ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ( ) { if ( this . org.springframework.messaging.simp.config.ChannelRegistration == null ) { ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = new ChannelRegistration ( ) ; void ( org.springframework.messaging.simp.config.ChannelRegistration ) ; org.springframework.messaging.simp.config.ChannelRegistration . setInterceptors ( new ImmutableMessageChannelInterceptor ( ) ) ; this . org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.ChannelRegistration ; } return this . org.springframework.messaging.simp.config.ChannelRegistration ; }  <METHOD_END>
<METHOD_START> protected void void ( ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.AbstractSubscribableChannel org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) { ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getBrokerChannelRegistration ( ) ; ExecutorSubscribableChannel org.springframework.messaging.simp.config.ExecutorSubscribableChannel = org.springframework.messaging.simp.config.ChannelRegistration . hasTaskExecutor ( ) ? new ExecutorSubscribableChannel ( org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) ) : new ExecutorSubscribableChannel ( ) ; org.springframework.messaging.simp.config.ChannelRegistration . setInterceptors ( new ImmutableMessageChannelInterceptor ( ) ) ; org.springframework.messaging.simp.config.ExecutorSubscribableChannel . setInterceptors ( org.springframework.messaging.simp.config.ChannelRegistration . getInterceptors ( ) ) ; return org.springframework.messaging.simp.config.ExecutorSubscribableChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ( ) { ChannelRegistration org.springframework.messaging.simp.config.ChannelRegistration = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getBrokerChannelRegistration ( ) ; ThreadPoolTaskExecutor org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ; if ( org.springframework.messaging.simp.config.ChannelRegistration . hasTaskExecutor ( ) ) { org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = org.springframework.messaging.simp.config.ChannelRegistration . taskExecutor ( ) . getTaskExecutor ( ) ; } else { org.springframework.messaging.simp.config.ThreadPoolTaskExecutor = new ThreadPoolTaskExecutor ( ) ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setCorePoolSize ( NUMBER ) ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setMaxPoolSize ( NUMBER ) ; org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setQueueCapacity ( NUMBER ) ; } org.springframework.messaging.simp.config.ThreadPoolTaskExecutor . setThreadNamePrefix ( STRING ) ; return org.springframework.messaging.simp.config.ThreadPoolTaskExecutor ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.messaging.simp.config.MessageBrokerRegistry org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) { if ( this . org.springframework.messaging.simp.config.MessageBrokerRegistry == null ) { MessageBrokerRegistry org.springframework.messaging.simp.config.MessageBrokerRegistry = new MessageBrokerRegistry ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) ) ; void ( org.springframework.messaging.simp.config.MessageBrokerRegistry ) ; this . org.springframework.messaging.simp.config.MessageBrokerRegistry = org.springframework.messaging.simp.config.MessageBrokerRegistry ; } return this . org.springframework.messaging.simp.config.MessageBrokerRegistry ; }  <METHOD_END>
<METHOD_START> protected void void ( MessageBrokerRegistry org.springframework.messaging.simp.config.MessageBrokerRegistry ) {	}  <METHOD_END>
<METHOD_START> public final org.springframework.messaging.simp.config.PathMatcher org.springframework.messaging.simp.config.PathMatcher ( ) { return org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getPathMatcher ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler ( ) { SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler = org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler ( ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setDestinationPrefixes ( org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getApplicationDestinationPrefixes ( ) ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setMessageConverter ( org.springframework.messaging.simp.config.CompositeMessageConverter ( ) ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setValidator ( org.springframework.messaging.simp.config.Validator ( ) ) ; java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> = new java.util.ArrayList<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> <> ( ) ; void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setCustomArgumentResolvers ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> ) ; java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> = new java.util.ArrayList<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> <> ( ) ; void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> ) ; org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setCustomReturnValueHandlers ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> ) ; PathMatcher org.springframework.messaging.simp.config.PathMatcher = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getPathMatcher ( ) ; if ( org.springframework.messaging.simp.config.PathMatcher != null ) { org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler . setPathMatcher ( org.springframework.messaging.simp.config.PathMatcher ) ; } return org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler ; }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler org.springframework.messaging.simp.config.SimpAnnotationMethodMessageHandler ( ) { return new SimpAnnotationMethodMessageHandler ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.SimpMessagingTemplate ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.simp.config.HandlerMethodArgumentResolver> ) {	}  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.simp.config.HandlerMethodReturnValueHandler> ) {	}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.AbstractBrokerMessageHandler org.springframework.messaging.simp.config.AbstractBrokerMessageHandler ( ) { SimpleBrokerMessageHandler org.springframework.messaging.simp.config.SimpleBrokerMessageHandler = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getSimpleBroker ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) ) ; return ( org.springframework.messaging.simp.config.SimpleBrokerMessageHandler != null ? org.springframework.messaging.simp.config.SimpleBrokerMessageHandler : new org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.NoOpBrokerMessageHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.AbstractBrokerMessageHandler org.springframework.messaging.simp.config.AbstractBrokerMessageHandler ( ) { StompBrokerRelayMessageHandler org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getStompBrokerRelay ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) ) ; if ( org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler == null ) { return new org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.NoOpBrokerMessageHandler ( ) ; } java.util.Map<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> < java.lang.String , MessageHandler > java.util.Map<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> = new java.util.HashMap<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> <> ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserDestinationBroadcast ( ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> . put ( java.lang.String , org.springframework.messaging.simp.config.UserDestinationMessageHandler ( ) ) ; } java.lang.String = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserRegistryBroadcast ( ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> . put ( java.lang.String , org.springframework.messaging.simp.config.MessageHandler ( ) ) ; } org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler . setSystemSubscriptions ( java.util.Map<java.lang.String,org.springframework.messaging.simp.config.MessageHandler> ) ; return org.springframework.messaging.simp.config.StompBrokerRelayMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.UserDestinationMessageHandler org.springframework.messaging.simp.config.UserDestinationMessageHandler ( ) { UserDestinationMessageHandler org.springframework.messaging.simp.config.UserDestinationMessageHandler = new UserDestinationMessageHandler ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.UserDestinationResolver ( ) ) ; java.lang.String java.lang.String = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserDestinationBroadcast ( ) ; org.springframework.messaging.simp.config.UserDestinationMessageHandler . setBroadcastDestination ( java.lang.String ) ; return org.springframework.messaging.simp.config.UserDestinationMessageHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.MessageHandler org.springframework.messaging.simp.config.MessageHandler ( ) { if ( org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserRegistryBroadcast ( ) == null ) { return new org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration.NoOpMessageHandler ( ) ; } SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry = org.springframework.messaging.simp.config.SimpUserRegistry ( ) ; Assert . isInstanceOf ( MultiServerUserRegistry .class , org.springframework.messaging.simp.config.SimpUserRegistry , STRING ) ; return new UserRegistryMessageHandler ( ( MultiServerUserRegistry ) org.springframework.messaging.simp.config.SimpUserRegistry , org.springframework.messaging.simp.config.SimpMessagingTemplate ( ) , org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserRegistryBroadcast ( ) , org.springframework.messaging.simp.config.ThreadPoolTaskScheduler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = { STRING , STRING } ) public org.springframework.messaging.simp.config.ThreadPoolTaskScheduler org.springframework.messaging.simp.config.ThreadPoolTaskScheduler ( ) { ThreadPoolTaskScheduler org.springframework.messaging.simp.config.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.messaging.simp.config.ThreadPoolTaskScheduler . setThreadNamePrefix ( STRING ) ; org.springframework.messaging.simp.config.ThreadPoolTaskScheduler . setPoolSize ( java.lang.Runtime . java.lang.Runtime ( ) . int ( ) ) ; org.springframework.messaging.simp.config.ThreadPoolTaskScheduler . setRemoveOnCancelPolicy ( true ) ; return org.springframework.messaging.simp.config.ThreadPoolTaskScheduler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.SimpMessagingTemplate org.springframework.messaging.simp.config.SimpMessagingTemplate ( ) { SimpMessagingTemplate org.springframework.messaging.simp.config.SimpMessagingTemplate = new SimpMessagingTemplate ( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) ) ; java.lang.String java.lang.String = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserDestinationPrefix ( ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.config.SimpMessagingTemplate . setUserDestinationPrefix ( java.lang.String ) ; } org.springframework.messaging.simp.config.SimpMessagingTemplate . setMessageConverter ( org.springframework.messaging.simp.config.CompositeMessageConverter ( ) ) ; return org.springframework.messaging.simp.config.SimpMessagingTemplate ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.CompositeMessageConverter org.springframework.messaging.simp.config.CompositeMessageConverter ( ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> = new java.util.ArrayList<org.springframework.messaging.simp.config.MessageConverter> <> ( ) ; boolean boolean = boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) ; if ( boolean ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( new StringMessageConverter ( ) ) ; java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( new ByteArrayMessageConverter ( ) ) ; if ( boolean ) { java.util.List<org.springframework.messaging.simp.config.MessageConverter> . add ( org.springframework.messaging.simp.config.MappingJackson2MessageConverter ( ) ) ; } } return new CompositeMessageConverter ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.simp.config.MappingJackson2MessageConverter org.springframework.messaging.simp.config.MappingJackson2MessageConverter ( ) { DefaultContentTypeResolver org.springframework.messaging.simp.config.DefaultContentTypeResolver = new DefaultContentTypeResolver ( ) ; org.springframework.messaging.simp.config.DefaultContentTypeResolver . setDefaultMimeType ( MimeTypeUtils . APPLICATION_JSON ) ; MappingJackson2MessageConverter org.springframework.messaging.simp.config.MappingJackson2MessageConverter = new MappingJackson2MessageConverter ( ) ; org.springframework.messaging.simp.config.MappingJackson2MessageConverter . setContentTypeResolver ( org.springframework.messaging.simp.config.DefaultContentTypeResolver ) ; return org.springframework.messaging.simp.config.MappingJackson2MessageConverter ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.util.List<org.springframework.messaging.simp.config.MessageConverter> < MessageConverter > java.util.List<org.springframework.messaging.simp.config.MessageConverter> ) { return true ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.UserDestinationResolver org.springframework.messaging.simp.config.UserDestinationResolver ( ) { DefaultUserDestinationResolver org.springframework.messaging.simp.config.DefaultUserDestinationResolver = new DefaultUserDestinationResolver ( org.springframework.messaging.simp.config.SimpUserRegistry ( ) ) ; java.lang.String java.lang.String = org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserDestinationPrefix ( ) ; if ( java.lang.String != null ) { org.springframework.messaging.simp.config.DefaultUserDestinationResolver . setUserDestinationPrefix ( java.lang.String ) ; } org.springframework.messaging.simp.config.DefaultUserDestinationResolver . setPathMatcher ( org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getPathMatcher ( ) ) ; return org.springframework.messaging.simp.config.DefaultUserDestinationResolver ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.messaging.simp.config.SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry ( ) { return ( org.springframework.messaging.simp.config.MessageBrokerRegistry ( ) . getUserRegistryBroadcast ( ) != null ? new MultiServerUserRegistry ( org.springframework.messaging.simp.config.SimpUserRegistry ( ) ) : org.springframework.messaging.simp.config.SimpUserRegistry ( ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.messaging.simp.config.SimpUserRegistry org.springframework.messaging.simp.config.SimpUserRegistry ( )  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.simp.config.Validator org.springframework.messaging.simp.config.Validator ( ) { Validator org.springframework.messaging.simp.config.Validator = org.springframework.messaging.simp.config.Validator ( ) ; if ( org.springframework.messaging.simp.config.Validator == null ) { if ( this . org.springframework.messaging.simp.config.ApplicationContext . containsBean ( java.lang.String ) ) { org.springframework.messaging.simp.config.Validator = this . org.springframework.messaging.simp.config.ApplicationContext . getBean ( java.lang.String , Validator .class ) ; } else if ( ClassUtils . isPresent ( STRING , java.lang.Class<? extends org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration> ( ) . java.lang.ClassLoader ( ) ) ) { java.lang.Class<?> < ? > java.lang.Class<?> ; try { java.lang.String java.lang.String = STRING ; java.lang.Class<?> = ClassUtils . forName ( java.lang.String , org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration .class . java.lang.ClassLoader ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanInitializationException ( STRING , java.lang.Throwable ) ; } org.springframework.messaging.simp.config.Validator = ( Validator ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; } else { org.springframework.messaging.simp.config.Validator = new Validator ( ) { @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; } @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.simp.config.Errors ) {					} } ; } } return org.springframework.messaging.simp.config.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.simp.config.Errors ) {					}  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.config.Validator org.springframework.messaging.simp.config.Validator ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.config.Message<?> ) {		}  <METHOD_END>
<METHOD_START> public void ( ) { super( org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) , org.springframework.messaging.simp.config.AbstractSubscribableChannel ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.simp.config.Message<?> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.messaging.simp.config.Message<?> ) {		}  <METHOD_END>
