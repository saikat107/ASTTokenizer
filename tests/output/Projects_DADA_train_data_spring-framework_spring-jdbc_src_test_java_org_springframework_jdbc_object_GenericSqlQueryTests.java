<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.jdbc.object.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; new XmlBeanDefinitionReader ( this . org.springframework.jdbc.object.DefaultListableBeanFactory ) . loadBeanDefinitions ( new ClassPathResource ( STRING ) ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; this . java.sql.Connection = mock ( java.sql.Connection .class ) ; this . java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; this . java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; TestDataSourceWrapper org.springframework.jdbc.object.TestDataSourceWrapper = ( TestDataSourceWrapper ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.jdbc.object.TestDataSourceWrapper . setTarget ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlQuery < ? > org.springframework.jdbc.object.SqlQuery<?> = ( SqlQuery < ? > ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; void ( org.springframework.jdbc.object.SqlQuery<> , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlQuery < ? > org.springframework.jdbc.object.SqlQuery<?> = ( SqlQuery < ? > ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; void ( org.springframework.jdbc.object.SqlQuery<> , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlQuery < ? > org.springframework.jdbc.object.SqlQuery<?> = ( SqlQuery < ? > ) org.springframework.jdbc.object.DefaultListableBeanFactory . getBean ( STRING ) ; void ( org.springframework.jdbc.object.SqlQuery<> , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( SqlQuery < ? > org.springframework.jdbc.object.SqlQuery<?> , boolean boolean ) throws java.sql.SQLException { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( java.lang.String ) ) . willReturn ( java.sql.PreparedStatement ) ; java.util.List<?> < ? > java.util.List<?> ; if ( boolean ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.List<?> = org.springframework.jdbc.object.SqlQuery<> . executeByNamedParam ( java.util.Map<java.lang.String,java.lang.Object> ) ; } else { java.lang.Object [] java.lang.Object[] = new java.lang.Object [] { NUMBER , STRING } ; java.util.List<?> = org.springframework.jdbc.object.SqlQuery<> . execute ( java.lang.Object[] ) ; } assertTrue ( STRING , java.util.List<> . int ( ) == NUMBER ) ; Customer org.springframework.jdbc.object.Customer = ( Customer ) java.util.List<> . get ( NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getId ( ) == NUMBER ) ; assertTrue ( STRING , org.springframework.jdbc.object.Customer . getForename ( ) . equals ( STRING ) ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
