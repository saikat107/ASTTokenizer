<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . prepareList ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; ClassPathXmlApplicationContext org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.inbound.RedisStoreInboundChannelAdapterIntegrationTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < java.lang.Integer > org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.redis.inbound.Message<java.lang.Integer> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.redis.inbound.Message<java.lang.Integer> . getPayload ( ) ) ; this . deletePresidents ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; StringRedisTemplate org.springframework.integration.redis.inbound.StringRedisTemplate = this . createStringRedisTemplate ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; this . prepareList ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; ClassPathXmlApplicationContext org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.inbound.RedisStoreInboundChannelAdapterIntegrationTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < java.lang.Integer > org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.redis.inbound.Message<java.lang.Integer> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.redis.inbound.StringRedisTemplate . keys ( STRING ) . size ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.integration.redis.inbound.StringRedisTemplate . boundListOps ( STRING ) . size ( ) ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test @ RedisAvailable public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; StringRedisTemplate org.springframework.integration.redis.inbound.StringRedisTemplate = this . createStringRedisTemplate ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; this . prepareList ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; ClassPathXmlApplicationContext org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.inbound.RedisStoreInboundChannelAdapterIntegrationTests> ( ) ) ; SubscribableChannel org.springframework.integration.redis.inbound.SubscribableChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.redis.inbound.SubscribableChannel . subscribe ( message -> { latch . countDown ( ) ; throw new RuntimeException ( STRING ) ; } ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.redis.inbound.StringRedisTemplate . keys ( STRING ) . size ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.integration.redis.inbound.StringRedisTemplate . boundListOps ( STRING ) . size ( ) ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; StringRedisTemplate org.springframework.integration.redis.inbound.StringRedisTemplate = this . createStringRedisTemplate ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; this . prepareList ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; ClassPathXmlApplicationContext org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.inbound.RedisStoreInboundChannelAdapterIntegrationTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < java.lang.Integer > org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.redis.inbound.Message<java.lang.Integer> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.redis.inbound.StringRedisTemplate . keys ( STRING ) . size ( ) == NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( STRING , int < NUMBER ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.integration.redis.inbound.StringRedisTemplate . boundListOps ( STRING ) . size ( ) ) ; org.springframework.integration.redis.inbound.StringRedisTemplate . delete ( STRING ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.InterruptedException { RedisConnectionFactory org.springframework.integration.redis.inbound.RedisConnectionFactory = this . getConnectionFactoryForTest ( ) ; this . prepareZset ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; ClassPathXmlApplicationContext org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.redis.inbound.RedisStoreInboundChannelAdapterIntegrationTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < RedisZSet < java.lang.Object > > org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . size ( ) ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . size ( ) ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . rangeByScore ( NUMBER , NUMBER ) . size ( ) ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; SourcePollingChannelAdapter org.springframework.integration.redis.inbound.SourcePollingChannelAdapter = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; QueueChannel org.springframework.integration.redis.inbound.QueueChannel = org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; assertEquals ( NUMBER , org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . size ( ) ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; Message < java.lang.Integer > org.springframework.integration.redis.inbound.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<java.lang.Integer> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.redis.inbound.Message<java.lang.Integer> . getPayload ( ) ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . start ( ) ; org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> = ( Message < RedisZSet < java.lang.Object > > ) org.springframework.integration.redis.inbound.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.redis.inbound.Message<org.springframework.integration.redis.inbound.RedisZSet<java.lang.Object>> . getPayload ( ) . size ( ) != NUMBER ) { java.lang.Thread . void ( NUMBER ) ; } assertTrue ( int < NUMBER ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; org.springframework.integration.redis.inbound.SourcePollingChannelAdapter . stop ( ) ; this . deletePresidents ( org.springframework.integration.redis.inbound.RedisConnectionFactory ) ; org.springframework.integration.redis.inbound.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
