<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.neo4j.repositories.SessionFactory = new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; org.springframework.data.neo4j.repositories.PlatformTransactionManager = new Neo4jTransactionManager ( org.springframework.data.neo4j.repositories.SessionFactory ) ; org.springframework.data.neo4j.repositories.TransactionTemplate = new TransactionTemplate ( org.springframework.data.neo4j.repositories.PlatformTransactionManager ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.repositories.Session = org.springframework.data.neo4j.repositories.SessionFactory . openSession ( ) ; org.springframework.data.neo4j.repositories.Session . purgeDatabase ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.neo4j.repositories.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.repositories.TransactionStatus ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; org.springframework.data.neo4j.repositories.MovieRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( MovieRepository .class ) ; Movie org.springframework.data.neo4j.repositories.Movie = new Movie ( STRING ) ; org.springframework.data.neo4j.repositories.MovieRepository . save ( org.springframework.data.neo4j.repositories.Movie ) ; } } ) ; assertSameGraph ( getGraphDatabaseService ( ) , STRING ) ; assertEquals ( NUMBER , IterableUtils . count ( org.springframework.data.neo4j.repositories.MovieRepository . findAll ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TransactionStatus org.springframework.data.neo4j.repositories.TransactionStatus ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; org.springframework.data.neo4j.repositories.MovieRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( MovieRepository .class ) ; Movie org.springframework.data.neo4j.repositories.Movie = new Movie ( STRING ) ; org.springframework.data.neo4j.repositories.MovieRepository . save ( org.springframework.data.neo4j.repositories.Movie ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; UserRepository org.springframework.data.neo4j.repositories.UserRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; org.springframework.data.neo4j.repositories.UserRepository . deleteAll ( ) ; assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; UserRepository org.springframework.data.neo4j.repositories.UserRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; org.springframework.data.neo4j.repositories.User . setName ( STRING ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; Assert . assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.data.neo4j.repositories.UserRepository . deleteByName ( STRING ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; UserRepository org.springframework.data.neo4j.repositories.UserRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; java.util.List<java.lang.Long> < java.lang.Long > java.util.List<java.lang.Long> = org.springframework.data.neo4j.repositories.UserRepository . removeByName ( STRING ) ; Assert . assertEquals ( NUMBER , java.util.List<java.lang.Long> . int ( ) ) ; Assert . assertEquals ( org.springframework.data.neo4j.repositories.User . getId ( ) , java.util.List<java.lang.Long> . java.lang.Long ( NUMBER ) ) ; Assert . assertEquals ( org.springframework.data.neo4j.repositories.User . getId ( ) , java.util.List<java.lang.Long> . java.lang.Long ( NUMBER ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; UserRepository org.springframework.data.neo4j.repositories.UserRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; org.springframework.data.neo4j.repositories.User . getFriends ( ) . add ( org.springframework.data.neo4j.repositories.User ) ; org.springframework.data.neo4j.repositories.User . getFriends ( ) . add ( org.springframework.data.neo4j.repositories.User ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; org.springframework.data.neo4j.repositories.UserRepository . deleteByName ( STRING ) ; Assert . assertEquals ( NUMBER , org.springframework.data.neo4j.repositories.UserRepository . count ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { RepositoryFactorySupport org.springframework.data.neo4j.repositories.RepositoryFactorySupport = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repositories.Session ) ; UserRepository org.springframework.data.neo4j.repositories.UserRepository = org.springframework.data.neo4j.repositories.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; User org.springframework.data.neo4j.repositories.User = new User ( STRING ) ; org.springframework.data.neo4j.repositories.User . setName ( STRING ) ; org.springframework.data.neo4j.repositories.UserRepository . save ( org.springframework.data.neo4j.repositories.User ) ; Assert . assertEquals ( new java.lang.Long ( NUMBER ) , org.springframework.data.neo4j.repositories.UserRepository . countByName ( STRING ) ) ; }  <METHOD_END>
