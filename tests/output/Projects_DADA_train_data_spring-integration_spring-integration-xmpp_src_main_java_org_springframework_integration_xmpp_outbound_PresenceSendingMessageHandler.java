<METHOD_START> public void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void ( XMPPConnection org.springframework.integration.xmpp.outbound.XMPPConnection ) { super( org.springframework.integration.xmpp.outbound.XMPPConnection ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.xmpp.outbound.Message<?> ) throws java.lang.Exception { Assert . state ( this . initialized , this . getComponentName ( ) + STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.xmpp.outbound.Message<> . getPayload ( ) ; Assert . state ( java.lang.Object instanceof Presence , STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; if ( ! this . xmppConnection . isConnected ( ) && this . xmppConnection instanceof AbstractXMPPConnection ) { ( ( AbstractXMPPConnection ) this . xmppConnection ) . connect ( ) ; } this . xmppConnection . sendStanza ( ( Presence ) java.lang.Object ) ; }  <METHOD_END>
