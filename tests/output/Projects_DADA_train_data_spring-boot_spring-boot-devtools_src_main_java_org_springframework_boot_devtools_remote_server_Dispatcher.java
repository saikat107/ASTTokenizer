<METHOD_START> public void ( AccessManager org.springframework.boot.devtools.remote.server.AccessManager , java.util.Collection<org.springframework.boot.devtools.remote.server.HandlerMapper> < HandlerMapper > java.util.Collection<org.springframework.boot.devtools.remote.server.HandlerMapper> ) { Assert . notNull ( org.springframework.boot.devtools.remote.server.AccessManager , STRING ) ; Assert . notNull ( java.util.Collection<org.springframework.boot.devtools.remote.server.HandlerMapper> , STRING ) ; this . org.springframework.boot.devtools.remote.server.AccessManager = org.springframework.boot.devtools.remote.server.AccessManager ; this . java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> = new java.util.ArrayList <> ( java.util.Collection<org.springframework.boot.devtools.remote.server.HandlerMapper> ) ; AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ServerHttpRequest org.springframework.boot.devtools.remote.server.ServerHttpRequest , ServerHttpResponse org.springframework.boot.devtools.remote.server.ServerHttpResponse )			throws java.io.IOException { for ( HandlerMapper org.springframework.boot.devtools.remote.server.HandlerMapper : this . java.util.List<org.springframework.boot.devtools.remote.server.HandlerMapper> ) { Handler org.springframework.boot.devtools.remote.server.Handler = org.springframework.boot.devtools.remote.server.HandlerMapper . getHandler ( org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ; if ( org.springframework.boot.devtools.remote.server.Handler != null ) { void ( org.springframework.boot.devtools.remote.server.Handler , org.springframework.boot.devtools.remote.server.ServerHttpRequest , org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( Handler org.springframework.boot.devtools.remote.server.Handler , ServerHttpRequest org.springframework.boot.devtools.remote.server.ServerHttpRequest , ServerHttpResponse org.springframework.boot.devtools.remote.server.ServerHttpResponse ) throws java.io.IOException { if ( ! this . org.springframework.boot.devtools.remote.server.AccessManager . isAllowed ( org.springframework.boot.devtools.remote.server.ServerHttpRequest ) ) { org.springframework.boot.devtools.remote.server.ServerHttpResponse . setStatusCode ( HttpStatus . FORBIDDEN ) ; return; } org.springframework.boot.devtools.remote.server.Handler . handle ( org.springframework.boot.devtools.remote.server.ServerHttpRequest , org.springframework.boot.devtools.remote.server.ServerHttpResponse ) ; }  <METHOD_END>
