<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String == null ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.web.MethodParameter ) { return Sort .class . boolean ( org.springframework.data.web.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.Sort org.springframework.data.web.Sort ( MethodParameter org.springframework.data.web.MethodParameter , ModelAndViewContainer org.springframework.data.web.ModelAndViewContainer , NativeWebRequest org.springframework.data.web.NativeWebRequest , WebDataBinderFactory org.springframework.data.web.WebDataBinderFactory ) { java.lang.String [] java.lang.String[] = org.springframework.data.web.NativeWebRequest . getParameterValues ( java.lang.String ( org.springframework.data.web.MethodParameter ) ) ; if ( java.lang.String[] == null ) { return org.springframework.data.web.Sort ( org.springframework.data.web.MethodParameter ) ; } if ( java.lang.String[] . int == NUMBER && ! StringUtils . hasText ( java.lang.String[] [ NUMBER ] ) ) { return org.springframework.data.web.Sort ( org.springframework.data.web.MethodParameter ) ; } return org.springframework.data.web.Sort ( java.lang.String[] , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.Sort org.springframework.data.web.Sort ( MethodParameter org.springframework.data.web.MethodParameter ) { SortDefaults org.springframework.data.web.SortDefaults = org.springframework.data.web.MethodParameter . getParameterAnnotation ( SortDefaults .class ) ; SortDefault org.springframework.data.web.SortDefault = org.springframework.data.web.MethodParameter . getParameterAnnotation ( SortDefault .class ) ; if ( org.springframework.data.web.SortDefault != null && org.springframework.data.web.SortDefaults != null ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String , org.springframework.data.web.MethodParameter . toString ( ) , java.lang.String , java.lang.String ) ) ; } if ( org.springframework.data.web.SortDefault != null ) { return org.springframework.data.web.Sort ( org.springframework.data.web.SortDefault , Sort . unsorted ( ) ) ; } if ( org.springframework.data.web.SortDefaults != null ) { Sort org.springframework.data.web.Sort = Sort . unsorted ( ) ; for ( SortDefault org.springframework.data.web.SortDefault : org.springframework.data.web.SortDefaults . value ( ) ) { org.springframework.data.web.Sort = org.springframework.data.web.Sort ( org.springframework.data.web.SortDefault , org.springframework.data.web.Sort ) ; } return org.springframework.data.web.Sort ; } return org.springframework.data.web.Sort ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.Sort org.springframework.data.web.Sort ( SortDefault org.springframework.data.web.SortDefault , Sort org.springframework.data.web.Sort ) { java.lang.String [] java.lang.String[] = SpringDataAnnotationUtils . getSpecificPropertyOrDefaultFromValue ( org.springframework.data.web.SortDefault , STRING ) ; if ( java.lang.String[] . int == NUMBER ) { return Sort . unsorted ( ) ; } return org.springframework.data.web.Sort . and ( Sort . by ( org.springframework.data.web.SortDefault . direction ( ) , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( MethodParameter org.springframework.data.web.MethodParameter ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; if ( org.springframework.data.web.MethodParameter != null && org.springframework.data.web.MethodParameter . hasParameterAnnotation ( Qualifier .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.web.MethodParameter . getParameterAnnotation ( Qualifier .class ) . value ( ) ) . append ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.web.Sort org.springframework.data.web.Sort ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { java.util.List<org.springframework.data.web.Order> < Order > java.util.List<org.springframework.data.web.Order> = new java.util.ArrayList<org.springframework.data.web.Order> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String == null ) { continue; } java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( java.lang.String ) ; java.util.Optional<org.springframework.data.web.Direction> < Direction > java.util.Optional<org.springframework.data.web.Direction> = java.lang.String[] . int == NUMBER ? java.util.Optional . java.util.Optional<org.springframework.data.web.Direction> ( ) : Direction . fromOptionalString ( java.lang.String[] [ java.lang.String[] . int - NUMBER ] ) ; int int = java.util.Optional<org.springframework.data.web.Direction> . map ( it -> elements . length - NUMBER ) . orElseGet ( ( ) elements . length ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.Optional<org.springframework.data.web.Order> ( java.lang.String[] [ int ] , java.util.Optional<org.springframework.data.web.Direction> ) . ifPresent ( java.util.List<org.springframework.data.web.Order> :: add ) ; } } return java.util.List<org.springframework.data.web.Order> . isEmpty ( ) ? Sort . unsorted ( ) : Sort . by ( java.util.List<org.springframework.data.web.Order> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<org.springframework.data.web.Order> < Order > java.util.Optional<org.springframework.data.web.Order> ( java.lang.String java.lang.String , java.util.Optional<org.springframework.data.web.Direction> < Direction > java.util.Optional<org.springframework.data.web.Direction> ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.util.Optional . java.util.Optional<org.springframework.data.web.Order> ( ) ; } return java.util.Optional . java.util.Optional ( java.util.Optional<org.springframework.data.web.Direction> . map ( it -> new Order ( it , property ) ) . orElseGet ( ( ) new Order ( property ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Sort org.springframework.data.web.Sort ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder = null ; for ( Order org.springframework.data.web.Order : org.springframework.data.web.Sort ) { Direction org.springframework.data.web.Direction = org.springframework.data.web.Order . getDirection ( ) ; if ( org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder == null ) { org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder = new org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder ( org.springframework.data.web.Direction ) ; } else if ( ! org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . boolean ( org.springframework.data.web.Order ) ) { org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder = new org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder ( org.springframework.data.web.Direction ) ; } org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . void ( org.springframework.data.web.Order . getProperty ( ) ) ; } return org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder == null ? java.util.Collections . java.util.List<java.lang.String> ( ) : org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( Sort org.springframework.data.web.Sort ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder = null ; for ( Order org.springframework.data.web.Order : org.springframework.data.web.Sort ) { Direction org.springframework.data.web.Direction = org.springframework.data.web.Order . getDirection ( ) ; if ( org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder == null ) { org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder = new org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder ( org.springframework.data.web.Direction ) ; } else if ( ! org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . boolean ( org.springframework.data.web.Order ) ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<? extends org.springframework.data.web.SortHandlerMethodArgumentResolver> ( ) . java.lang.String ( ) ) ) ; } org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . void ( org.springframework.data.web.Order . getProperty ( ) ) ; } return org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder == null ? java.util.Collections . java.util.List<java.lang.String> ( ) : org.springframework.data.web.SortHandlerMethodArgumentResolver.ExpressionBuilder . java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void ( Direction org.springframework.data.web.Direction ) { Assert . notNull ( org.springframework.data.web.Direction , STRING ) ; this . org.springframework.data.web.Direction = org.springframework.data.web.Direction ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Order org.springframework.data.web.Order ) { return this . org.springframework.data.web.Direction == org.springframework.data.web.Order . getDirection ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.util.List<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( java.util.List<java.lang.String> . boolean ( ) ) { return java.util.List<java.lang.String> ; } java.util.List<java.lang.String> . boolean ( org.springframework.data.web.Direction . name ( ) . toLowerCase ( ) ) ; java.util.List<java.lang.String> . boolean ( StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , java.lang.String ) ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( Sort org.springframework.data.web.Sort ) { this . org.springframework.data.web.Sort = org.springframework.data.web.Sort ; }  <METHOD_END>
