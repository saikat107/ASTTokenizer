<METHOD_START> @ Before public void void ( ) { org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> = new Neo4jRepositoryFactory ( org.springframework.data.neo4j.repository.Session ) . getRepository ( org.springframework.data.neo4j.repository.Neo4jRepositoryTests.SampleEntityRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SampleEntity org.springframework.data.neo4j.repository.SampleEntity = new SampleEntity ( STRING , STRING ) ; org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . save ( org.springframework.data.neo4j.repository.SampleEntity ) ; assertThat ( org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . exists ( org.springframework.data.neo4j.repository.SampleEntity . getId ( ) ) , is ( true ) ) ; assertThat ( org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . count ( ) , is ( NUMBER ) ) ; java.util.Optional<org.springframework.data.neo4j.repository.SampleEntity> < SampleEntity > java.util.Optional<org.springframework.data.neo4j.repository.SampleEntity> = org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . findOne ( org.springframework.data.neo4j.repository.SampleEntity . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.neo4j.repository.SampleEntity> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.neo4j.repository.SampleEntity> . ifPresent ( actual -> assertThat ( actual , is ( entity ) ) ) ; org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . delete ( java.util.Arrays . java.util.List ( org.springframework.data.neo4j.repository.SampleEntity ) ) ; assertThat ( org.springframework.data.neo4j.repository.Neo4jRepository<org.springframework.data.neo4j.repository.SampleEntity,java.lang.Long> . count ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public TransactionalRepositoryTests . TransactionalRepositoryTests.DelegatingTransactionManager TransactionalRepositoryTests.DelegatingTransactionManager ( ) java.lang.Exception { return new TransactionalRepositoryTests . TransactionalRepositoryTests ( new Neo4jTransactionManager ( org.springframework.data.neo4j.repository.SessionFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.repository.SessionFactory org.springframework.data.neo4j.repository.SessionFactory ( ) { return new SessionFactory ( getBaseConfiguration ( ) . build ( ) , STRING ) ; }  <METHOD_END>
