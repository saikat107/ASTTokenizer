<METHOD_START> void ( javax.annotation.processing.ProcessingEnvironment javax.annotation.processing.ProcessingEnvironment , FieldValuesParser org.springframework.boot.configurationprocessor.FieldValuesParser , javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement ) { this . javax.annotation.processing.ProcessingEnvironment = javax.annotation.processing.ProcessingEnvironment ; this . org.springframework.boot.configurationprocessor.TypeUtils = new TypeUtils ( this . javax.annotation.processing.ProcessingEnvironment ) ; this . org.springframework.boot.configurationprocessor.FieldValuesParser = org.springframework.boot.configurationprocessor.FieldValuesParser ; void ( javax.lang.model.element.TypeElement ) ; }  <METHOD_END>
<METHOD_START> private void void ( javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement ) { for ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement : javax.lang.model.util.ElementFilter . java.util.List<javax.lang.model.element.ExecutableElement> ( javax.lang.model.element.TypeElement . java.util.List<? extends javax.lang.model.element.Element> ( ) ) ) { void ( javax.lang.model.element.ExecutableElement ) ; } for ( javax.lang.model.element.VariableElement javax.lang.model.element.VariableElement : javax.lang.model.util.ElementFilter . java.util.List<javax.lang.model.element.VariableElement> ( javax.lang.model.element.TypeElement . java.util.List<? extends javax.lang.model.element.Element> ( ) ) ) { void ( javax.lang.model.element.VariableElement ) ; } try { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.configurationprocessor.FieldValuesParser . getFieldValues ( javax.lang.model.element.TypeElement ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } } catch ( java.lang.Exception java.lang.Exception ) { } javax.lang.model.element.Element javax.lang.model.element.Element = this . javax.annotation.processing.ProcessingEnvironment . javax.lang.model.util.Types ( ) . javax.lang.model.element.Element ( javax.lang.model.element.TypeElement . javax.lang.model.type.TypeMirror ( ) ) ; if ( javax.lang.model.element.Element != null && javax.lang.model.element.Element instanceof javax.lang.model.element.TypeElement && ! java.lang.String . boolean ( javax.lang.model.element.Element . java.lang.String ( ) ) ) { void ( ( javax.lang.model.element.TypeElement ) javax.lang.model.element.Element ) ; } }  <METHOD_END>
<METHOD_START> private void void ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ) { if ( javax.lang.model.element.ExecutableElement . java.util.Set<javax.lang.model.element.Modifier> ( ) . boolean ( javax.lang.model.element.Modifier . javax.lang.model.element.Modifier ) ) { java.lang.String java.lang.String = javax.lang.model.element.ExecutableElement . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; if ( boolean ( javax.lang.model.element.ExecutableElement ) && ! this . java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> . javax.lang.model.element.ExecutableElement ( java.lang.String ( java.lang.String ) , javax.lang.model.element.ExecutableElement ) ; } else if ( boolean ( javax.lang.model.element.ExecutableElement ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.util.List<javax.lang.model.element.ExecutableElement> < javax.lang.model.element.ExecutableElement > java.util.List<javax.lang.model.element.ExecutableElement> = this . java.util.Map<java.lang.String,java.util.List<javax.lang.model.element.ExecutableElement>> . java.util.List<javax.lang.model.element.ExecutableElement> ( java.lang.String ) ; if ( java.util.List<javax.lang.model.element.ExecutableElement> == null ) { java.util.List<javax.lang.model.element.ExecutableElement> = new java.util.ArrayList<javax.lang.model.element.ExecutableElement> <> ( ) ; this . java.util.Map<java.lang.String,java.util.List<javax.lang.model.element.ExecutableElement>> . java.util.List<javax.lang.model.element.ExecutableElement> ( java.lang.String , java.util.List<javax.lang.model.element.ExecutableElement> ) ; } javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror = javax.lang.model.element.ExecutableElement . java.util.List<? extends javax.lang.model.element.VariableElement> ( ) . get ( NUMBER ) . javax.lang.model.type.TypeMirror ( ) ; if ( javax.lang.model.element.ExecutableElement ( java.util.List<javax.lang.model.element.ExecutableElement> , javax.lang.model.type.TypeMirror ) == null ) { java.util.List<javax.lang.model.element.ExecutableElement> . boolean ( javax.lang.model.element.ExecutableElement ) ; } } } }  <METHOD_END>
<METHOD_START> private javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ( java.util.List<javax.lang.model.element.ExecutableElement> < javax.lang.model.element.ExecutableElement > java.util.List<javax.lang.model.element.ExecutableElement> , javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror ) { for ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement : java.util.List<javax.lang.model.element.ExecutableElement> ) { javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror = javax.lang.model.element.ExecutableElement . java.util.List<? extends javax.lang.model.element.VariableElement> ( ) . get ( NUMBER ) . javax.lang.model.type.TypeMirror ( ) ; if ( this . javax.annotation.processing.ProcessingEnvironment . javax.lang.model.util.Types ( ) . boolean ( javax.lang.model.type.TypeMirror , javax.lang.model.type.TypeMirror ) ) { return javax.lang.model.element.ExecutableElement ; } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ) { java.lang.String java.lang.String = javax.lang.model.element.ExecutableElement . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; return ( ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER ) || ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER ) ) && javax.lang.model.element.ExecutableElement . java.util.List<? extends javax.lang.model.element.VariableElement> ( ) . boolean ( ) && ( javax.lang.model.type.TypeKind . javax.lang.model.type.TypeKind != javax.lang.model.element.ExecutableElement . javax.lang.model.type.TypeMirror ( ) . javax.lang.model.type.TypeKind ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ) { final java.lang.String java.lang.String = javax.lang.model.element.ExecutableElement . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; return ( java.lang.String . boolean ( STRING ) && java.lang.String . int ( ) > NUMBER && javax.lang.model.element.ExecutableElement . java.util.List<? extends javax.lang.model.element.VariableElement> ( ) . int ( ) == NUMBER && boolean ( javax.lang.model.element.ExecutableElement ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ) { javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror = javax.lang.model.element.ExecutableElement . javax.lang.model.type.TypeMirror ( ) ; return ( javax.lang.model.type.TypeKind . javax.lang.model.type.TypeKind == javax.lang.model.type.TypeMirror . javax.lang.model.type.TypeKind ( ) || this . javax.annotation.processing.ProcessingEnvironment . javax.lang.model.util.Types ( ) . boolean ( javax.lang.model.element.ExecutableElement . javax.lang.model.element.Element ( ) . javax.lang.model.type.TypeMirror ( ) , javax.lang.model.type.TypeMirror ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String . boolean ( STRING ) ? java.lang.String . java.lang.String ( NUMBER ) : java.lang.String . java.lang.String ( NUMBER ) ; java.lang.String = java.lang.Character . char ( java.lang.String . char ( NUMBER ) ) + java.lang.String . java.lang.String ( NUMBER ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( javax.lang.model.element.VariableElement javax.lang.model.element.VariableElement ) { java.lang.String java.lang.String = javax.lang.model.element.VariableElement . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; if ( ! this . java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> . boolean ( java.lang.String ) ) { this . java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> . javax.lang.model.element.VariableElement ( java.lang.String , javax.lang.model.element.VariableElement ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> < java.lang.String , javax.lang.model.element.VariableElement > java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> ( ) { return java.util.Collections . java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> ( this . java.util.Map<java.lang.String,javax.lang.model.element.VariableElement> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> < java.lang.String , javax.lang.model.element.ExecutableElement > java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> ( ) { return java.util.Collections . java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> ( this . java.util.Map<java.lang.String,javax.lang.model.element.ExecutableElement> ) ; }  <METHOD_END>
<METHOD_START> public javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement ( java.lang.String java.lang.String , javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror ) { java.util.List<javax.lang.model.element.ExecutableElement> < javax.lang.model.element.ExecutableElement > java.util.List<javax.lang.model.element.ExecutableElement> = this . java.util.Map<java.lang.String,java.util.List<javax.lang.model.element.ExecutableElement>> . java.util.List<javax.lang.model.element.ExecutableElement> ( java.lang.String ) ; if ( java.util.List<javax.lang.model.element.ExecutableElement> != null ) { javax.lang.model.element.ExecutableElement javax.lang.model.element.ExecutableElement = javax.lang.model.element.ExecutableElement ( java.util.List<javax.lang.model.element.ExecutableElement> , javax.lang.model.type.TypeMirror ) ; if ( javax.lang.model.element.ExecutableElement != null ) { return javax.lang.model.element.ExecutableElement ; } javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror = this . org.springframework.boot.configurationprocessor.TypeUtils . getWrapperOrPrimitiveFor ( javax.lang.model.type.TypeMirror ) ; if ( javax.lang.model.type.TypeMirror != null ) { return javax.lang.model.element.ExecutableElement ( java.util.List<javax.lang.model.element.ExecutableElement> , javax.lang.model.type.TypeMirror ) ; } } return null ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
