<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> < Resource > org.springframework.web.reactive.resource.Mono<org.springframework.web.reactive.resource.Resource> ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , java.util.List<> ) . map ( resource -> { if ( exchange == null || isGzipAccepted ( exchange ) ) { try { Resource gzipped = new GzippedResource ( resource ) ; if ( gzipped . exists ( ) ) { resource = gzipped ; } } catch ( IOException ex ) { logger . trace ( STRING + resource . getFilename ( ) + STRING , ex ) ; } } return resource ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServerWebExchange org.springframework.web.reactive.resource.ServerWebExchange ) { java.lang.String java.lang.String = org.springframework.web.reactive.resource.ServerWebExchange . getRequest ( ) . getHeaders ( ) . getFirst ( STRING ) ; return ( java.lang.String != null && java.lang.String . java.lang.String ( ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.resource.Mono<java.lang.String> < java.lang.String > org.springframework.web.reactive.resource.Mono<java.lang.String> ( java.lang.String java.lang.String , java.util.List<? extends org.springframework.web.reactive.resource.Resource> < ? extends Resource > java.util.List<? extends org.springframework.web.reactive.resource.Resource> , ResourceResolverChain org.springframework.web.reactive.resource.ResourceResolverChain ) { return org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , java.util.List<> ) ; }  <METHOD_END>
<METHOD_START> public void ( Resource org.springframework.web.reactive.resource.Resource ) throws java.io.IOException { this . org.springframework.web.reactive.resource.Resource = org.springframework.web.reactive.resource.Resource ; this . org.springframework.web.reactive.resource.Resource = org.springframework.web.reactive.resource.Resource . createRelative ( org.springframework.web.reactive.resource.Resource . getFilename ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> public java.io.InputStream java.io.InputStream ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getInputStream ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . exists ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isReadable ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isOpen ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.web.reactive.resource.Resource . isFile ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URL java.net.URL ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getURL ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URI java.net.URI ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getURI ( ) ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . getFile ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . contentLength ( ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . lastModified ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.resource.Resource org.springframework.web.reactive.resource.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { return this . org.springframework.web.reactive.resource.Resource . createRelative ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.resource.Resource . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . org.springframework.web.reactive.resource.Resource . getDescription ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.resource.HttpHeaders org.springframework.web.reactive.resource.HttpHeaders ( ) { HttpHeaders org.springframework.web.reactive.resource.HttpHeaders ; if( this . org.springframework.web.reactive.resource.Resource instanceof HttpResource ) { org.springframework.web.reactive.resource.HttpHeaders = ( ( HttpResource ) this . org.springframework.web.reactive.resource.Resource ) . getResponseHeaders ( ) ; } else { org.springframework.web.reactive.resource.HttpHeaders = new HttpHeaders ( ) ; } org.springframework.web.reactive.resource.HttpHeaders . add ( HttpHeaders . CONTENT_ENCODING , STRING ) ; return org.springframework.web.reactive.resource.HttpHeaders ; }  <METHOD_END>
