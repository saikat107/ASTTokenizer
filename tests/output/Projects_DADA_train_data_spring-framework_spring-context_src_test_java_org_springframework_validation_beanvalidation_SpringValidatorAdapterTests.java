<METHOD_START> @ Before public void void ( ) { org.springframework.validation.beanvalidation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.validation.beanvalidation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.validation.beanvalidation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; org.springframework.validation.beanvalidation.StaticMessageSource . addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean = new org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean ( ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; BeanPropertyBindingResult org.springframework.validation.beanvalidation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapter . validate ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , org.springframework.validation.beanvalidation.BeanPropertyBindingResult ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean = new org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean ( ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; BeanPropertyBindingResult org.springframework.validation.beanvalidation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapter . validate ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , org.springframework.validation.beanvalidation.BeanPropertyBindingResult ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean = new org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean ( ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; BeanPropertyBindingResult org.springframework.validation.beanvalidation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapter . validate ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , org.springframework.validation.beanvalidation.BeanPropertyBindingResult ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.validation.beanvalidation.StaticMessageSource . setAlwaysUseMessageFormat ( true ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean = new org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean ( ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean . void ( STRING ) ; BeanPropertyBindingResult org.springframework.validation.beanvalidation.BeanPropertyBindingResult = new BeanPropertyBindingResult ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , STRING ) ; org.springframework.validation.beanvalidation.SpringValidatorAdapter . validate ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.TestBean , org.springframework.validation.beanvalidation.BeanPropertyBindingResult ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldErrorCount ( STRING ) , is ( NUMBER ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; assertThat ( org.springframework.validation.beanvalidation.StaticMessageSource . getMessage ( org.springframework.validation.beanvalidation.BeanPropertyBindingResult . getFieldError ( STRING ) , java.util.Locale . java.util.Locale ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.Same org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.Same ) { java.lang.String = org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.Same . java.lang.String ( ) ; java.lang.String = org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.Same . java.lang.String ( ) ; java.lang.String = org.springframework.validation.beanvalidation.SpringValidatorAdapterTests.Same . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Object java.lang.Object , ConstraintValidatorContext org.springframework.validation.beanvalidation.ConstraintValidatorContext ) { BeanWrapper org.springframework.validation.beanvalidation.BeanWrapper = new BeanWrapperImpl ( java.lang.Object ) ; java.lang.Object java.lang.Object = org.springframework.validation.beanvalidation.BeanWrapper . getPropertyValue ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.validation.beanvalidation.BeanWrapper . getPropertyValue ( java.lang.String ) ; boolean boolean = ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ; if ( boolean ) { return true ; } else { org.springframework.validation.beanvalidation.ConstraintValidatorContext . disableDefaultConstraintViolation ( ) ; org.springframework.validation.beanvalidation.ConstraintValidatorContext . buildConstraintViolationWithTemplate ( java.lang.String ) . addPropertyNode ( java.lang.String ) . addConstraintViolation ( ) ; return false ; } }  <METHOD_END>
