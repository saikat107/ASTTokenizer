<METHOD_START> @ Before public void void ( ) { MockHttpServletRequest org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.boot.actuate.autoconfigure.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ( new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint . setPath ( STRING ) ; LinksEnhancer org.springframework.boot.actuate.autoconfigure.LinksEnhancer = org.springframework.boot.actuate.autoconfigure.LinksEnhancer ( java.util.Collections . java.util.List<T> ( ( MvcEndpoint ) org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ) ) ; ResourceSupport org.springframework.boot.actuate.autoconfigure.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancer . addEndpointLinks ( org.springframework.boot.actuate.autoconfigure.ResourceSupport , STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ResourceSupport . getLink ( STRING ) . getHref ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.NoNameTestMvcEndpoint ( STRING , false ) ; LinksEnhancer org.springframework.boot.actuate.autoconfigure.LinksEnhancer = org.springframework.boot.actuate.autoconfigure.LinksEnhancer ( java.util.Collections . java.util.List ( org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) ) ; ResourceSupport org.springframework.boot.actuate.autoconfigure.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancer . addEndpointLinks ( org.springframework.boot.actuate.autoconfigure.ResourceSupport , STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ResourceSupport . getLink ( STRING ) . getHref ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ( new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ( STRING ) ) ; MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ( new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ( STRING ) ) ; LinksEnhancer org.springframework.boot.actuate.autoconfigure.LinksEnhancer = org.springframework.boot.actuate.autoconfigure.LinksEnhancer ( java.util.Arrays . java.util.List ( org.springframework.boot.actuate.autoconfigure.MvcEndpoint , org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) ) ; ResourceSupport org.springframework.boot.actuate.autoconfigure.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancer . addEndpointLinks ( org.springframework.boot.actuate.autoconfigure.ResourceSupport , STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ResourceSupport . getLinks ( ) ) . haveExactly ( NUMBER , org.springframework.boot.actuate.autoconfigure.Condition<org.springframework.boot.actuate.autoconfigure.Link> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ( new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint . setPath ( STRING ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint = new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ( new org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ( STRING ) ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint . setPath ( STRING ) ; LinksEnhancer org.springframework.boot.actuate.autoconfigure.LinksEnhancer = org.springframework.boot.actuate.autoconfigure.LinksEnhancer ( java.util.Arrays . java.util.List<T> ( ( MvcEndpoint ) org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint , org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestMvcEndpoint ) ) ; ResourceSupport org.springframework.boot.actuate.autoconfigure.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.autoconfigure.LinksEnhancer . addEndpointLinks ( org.springframework.boot.actuate.autoconfigure.ResourceSupport , STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ResourceSupport . getLinks ( ) ) . haveExactly ( NUMBER , org.springframework.boot.actuate.autoconfigure.Condition<org.springframework.boot.actuate.autoconfigure.Link> ( STRING , STRING ) ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ResourceSupport . getLinks ( ) ) . haveExactly ( NUMBER , org.springframework.boot.actuate.autoconfigure.Condition<org.springframework.boot.actuate.autoconfigure.Link> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.LinksEnhancer org.springframework.boot.actuate.autoconfigure.LinksEnhancer ( java.util.List<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> < MvcEndpoint > java.util.List<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> ) throws java.lang.Exception { StaticWebApplicationContext org.springframework.boot.actuate.autoconfigure.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; for ( MvcEndpoint org.springframework.boot.actuate.autoconfigure.MvcEndpoint : java.util.List<org.springframework.boot.actuate.autoconfigure.MvcEndpoint> ) { org.springframework.boot.actuate.autoconfigure.StaticWebApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( org.springframework.boot.actuate.autoconfigure.MvcEndpoint . toString ( ) , org.springframework.boot.actuate.autoconfigure.MvcEndpoint ) ; } MvcEndpoints org.springframework.boot.actuate.autoconfigure.MvcEndpoints = new MvcEndpoints ( ) ; org.springframework.boot.actuate.autoconfigure.MvcEndpoints . setApplicationContext ( org.springframework.boot.actuate.autoconfigure.StaticWebApplicationContext ) ; org.springframework.boot.actuate.autoconfigure.MvcEndpoints . afterPropertiesSet ( ) ; return new LinksEnhancer ( STRING , org.springframework.boot.actuate.autoconfigure.MvcEndpoints ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.Condition<org.springframework.boot.actuate.autoconfigure.Link> < Link > org.springframework.boot.actuate.autoconfigure.Condition<org.springframework.boot.actuate.autoconfigure.Link> ( final java.lang.String java.lang.String , final java.lang.String java.lang.String ) { return new Condition < Link > ( ) { @ java.lang.Override public boolean boolean ( Link org.springframework.boot.actuate.autoconfigure.Link ) { return org.springframework.boot.actuate.autoconfigure.Link . getRel ( ) . equals ( java.lang.String ) && org.springframework.boot.actuate.autoconfigure.Link . getHref ( ) . equals ( STRING + java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Link org.springframework.boot.actuate.autoconfigure.Link ) { return org.springframework.boot.actuate.autoconfigure.Link . getRel ( ) . equals ( java.lang.String ) && org.springframework.boot.actuate.autoconfigure.Link . getHref ( ) . equals ( STRING + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ) { super( org.springframework.boot.actuate.autoconfigure.LinksEnhancerTests.TestEndpoint ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , boolean boolean ) { super( java.lang.String , boolean ); }  <METHOD_END>
