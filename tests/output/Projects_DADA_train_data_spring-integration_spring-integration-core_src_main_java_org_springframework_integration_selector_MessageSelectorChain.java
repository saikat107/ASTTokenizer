<METHOD_START> public void void ( org.springframework.integration.selector.MessageSelectorChain.VotingStrategy org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ) { Assert . notNull ( org.springframework.integration.selector.MessageSelectorChain.VotingStrategy , STRING ) ; this . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy = org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ; }  <METHOD_END>
<METHOD_START> public void void ( MessageSelector org.springframework.integration.selector.MessageSelector ) { this . java.util.List<org.springframework.integration.selector.MessageSelector> . add ( org.springframework.integration.selector.MessageSelector ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , MessageSelector org.springframework.integration.selector.MessageSelector ) { this . java.util.List<org.springframework.integration.selector.MessageSelector> . add ( int , org.springframework.integration.selector.MessageSelector ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.selector.MessageSelector> < MessageSelector > java.util.List<org.springframework.integration.selector.MessageSelector> ) { Assert . notEmpty ( java.util.List<org.springframework.integration.selector.MessageSelector> , STRING ) ; synchronized ( this . java.util.List<org.springframework.integration.selector.MessageSelector> ) { this . java.util.List<org.springframework.integration.selector.MessageSelector> . clear ( ) ; this . java.util.List<org.springframework.integration.selector.MessageSelector> . addAll ( java.util.List<org.springframework.integration.selector.MessageSelector> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final boolean boolean ( Message < ? > org.springframework.integration.selector.Message<?> ) { int int = NUMBER ; int int = NUMBER ; for ( MessageSelector org.springframework.integration.selector.MessageSelector : this . java.util.List<org.springframework.integration.selector.MessageSelector> ) { int ++ ; if ( org.springframework.integration.selector.MessageSelector . accept ( org.springframework.integration.selector.Message<> ) ) { if ( this . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy . boolean ( org.springframework.integration.selector.MessageSelectorChain.VotingStrategy . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ) ) { return true ; } int ++ ; } else if ( this . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy . boolean ( org.springframework.integration.selector.MessageSelectorChain.VotingStrategy . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ) ) { return false ; } } return this . boolean ( int , int ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( int int , int int ) { if ( int == NUMBER ) { return false ; } switch ( this . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ) { case org.springframework.integration.selector.MessageSelectorChain.VotingStrategy : return true ; case org.springframework.integration.selector.MessageSelectorChain.VotingStrategy : return ( int == int ) ; case org.springframework.integration.selector.MessageSelectorChain.VotingStrategy : return ( NUMBER * int ) > int ; case org.springframework.integration.selector.MessageSelectorChain.VotingStrategy : return ( NUMBER * int ) >= int ; default: throw new java.lang.IllegalArgumentException ( STRING + this . org.springframework.integration.selector.MessageSelectorChain.VotingStrategy ) ; } }  <METHOD_END>
