<METHOD_START> @ Test ( expected = InvalidDestinationException .class ) public void void ( ) org.springframework.integration.jms.JMSException { final QueueChannel org.springframework.integration.jms.QueueChannel = new QueueChannel ( ) ; void ( org.springframework.integration.jms.QueueChannel ) ; ChannelPublishingJmsMessageListener org.springframework.integration.jms.ChannelPublishingJmsMessageListener = new ChannelPublishingJmsMessageListener ( ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setExpectReply ( true ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setRequestChannel ( org.springframework.integration.jms.QueueChannel ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setMessageConverter ( new org.springframework.integration.jms.ChannelPublishingJmsMessageListenerTests.TestMessageConverter ( ) ) ; javax . javax.jms . javax.jms javax.jms.Message = org.springframework.integration.jms.Session . createTextMessage ( STRING ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . afterPropertiesSet ( ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . onMessage ( javax.jms.Message , org.springframework.integration.jms.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final QueueChannel org.springframework.integration.jms.QueueChannel = new QueueChannel ( ) ; ChannelPublishingJmsMessageListener org.springframework.integration.jms.ChannelPublishingJmsMessageListener = new ChannelPublishingJmsMessageListener ( ) ; Log org.springframework.integration.jms.Log = spy ( TestUtils . getPropertyValue ( org.springframework.integration.jms.ChannelPublishingJmsMessageListener , STRING , Log .class ) ) ; doAnswer ( new DoesNothing ( ) ) . when ( org.springframework.integration.jms.Log ) . error ( anyString ( ) , any ( java.lang.Throwable .class ) ) ; new DirectFieldAccessor ( org.springframework.integration.jms.ChannelPublishingJmsMessageListener ) . setPropertyValue ( STRING , org.springframework.integration.jms.Log ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setRequestChannel ( org.springframework.integration.jms.QueueChannel ) ; QueueChannel org.springframework.integration.jms.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setErrorChannel ( org.springframework.integration.jms.QueueChannel ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . setMessageConverter ( new org.springframework.integration.jms.ChannelPublishingJmsMessageListenerTests.TestMessageConverter ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.integration.jms.JMSException , org.springframework.integration.jms.MessageConversionException { return null ; } } ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . afterPropertiesSet ( ) ; javax . javax.jms . javax.jms javax.jms.Message = org.springframework.integration.jms.Session . createTextMessage ( STRING ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . onMessage ( javax.jms.Message , mock ( Session .class ) ) ; ErrorMessage org.springframework.integration.jms.ErrorMessage = ( ErrorMessage ) org.springframework.integration.jms.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jms.ErrorMessage ) ; assertThat ( org.springframework.integration.jms.ErrorMessage . getPayload ( ) . getMessage ( ) , startsWith ( STRING ) ) ; org.springframework.integration.jms.ChannelPublishingJmsMessageListener . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.integration.jms.JMSException , org.springframework.integration.jms.MessageConversionException { return null ; }  <METHOD_END>
<METHOD_START> private void void ( final PollableChannel org.springframework.integration.jms.PollableChannel ) { new SimpleAsyncTaskExecutor ( ) . execute ( ( ) { Message < ? > request = channel . receive ( NUMBER ) ; Message < ? > reply = new GenericMessage < String > ( ( ( String ) request . getPayload ( ) ) . toUpperCase ( ) ) ; ( ( MessageChannel ) request . getHeaders ( ) . getReplyChannel ( ) ) . send ( reply , NUMBER ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.integration.jms.JMSException , org.springframework.integration.jms.MessageConversionException { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax . javax.jms . javax.jms.Message javax.jms.Message ( java.lang.Object java.lang.Object , Session org.springframework.integration.jms.Session )				throws org.springframework.integration.jms.JMSException , org.springframework.integration.jms.MessageConversionException { return new StubTextMessage ( STRING ) ; }  <METHOD_END>
