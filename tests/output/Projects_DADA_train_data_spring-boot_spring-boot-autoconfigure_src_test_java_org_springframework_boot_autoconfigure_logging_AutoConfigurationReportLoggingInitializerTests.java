<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.Config .class ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . refresh ( ) ; void ( ( ) { this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . onApplicationEvent ( new ContextRefreshedEvent ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ) ; } ) ; assertThat ( this . org.springframework.boot.autoconfigure.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.ErrorConfig .class ) ; try { org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { void ( ( ) { this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . onApplicationEvent ( new ApplicationFailedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext , java.lang.Exception ) ) ; } ) ; } assertThat ( this . org.springframework.boot.autoconfigure.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.ErrorConfig .class ) ; try { org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . onApplicationEvent ( new ApplicationFailedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext , java.lang.Exception ) ) ; } assertThat ( this . org.springframework.boot.autoconfigure.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING + STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.Config .class ) ; ConditionEvaluationReport . get ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . getBeanFactory ( ) ) . recordExclusions ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . refresh ( ) ; void ( ( ) { this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . onApplicationEvent ( new ContextRefreshedEvent ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ) ; } ) ; assertThat ( this . org.springframework.boot.autoconfigure.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.Config .class ) ; new AutoConfigurationReportLoggingInitializer ( ) . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.logging.AnnotationConfigApplicationContext . getBean ( ConditionEvaluationReport .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigWebApplicationContext org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializerTests.Config .class ) ; new AutoConfigurationReportLoggingInitializer ( ) . initialize ( org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext ) ; org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( org.springframework.boot.autoconfigure.logging.AnnotationConfigWebApplicationContext . getBean ( ConditionEvaluationReport .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer . onApplicationEvent ( new ApplicationFailedEvent ( new SpringApplication ( ) , new java.lang.String [ NUMBER ] , null , new java.lang.RuntimeException ( STRING ) ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.logging.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Runnable java.lang.Runnable ) { LoggerContext org.springframework.boot.autoconfigure.logging.LoggerContext = ( LoggerContext ) StaticLoggerBinder . getSingleton ( ) . getLoggerFactory ( ) ; Logger org.springframework.boot.autoconfigure.logging.Logger = org.springframework.boot.autoconfigure.logging.LoggerContext . getLogger ( AutoConfigurationReportLoggingInitializer .class ) ; Level org.springframework.boot.autoconfigure.logging.Level = org.springframework.boot.autoconfigure.logging.Logger . getLevel ( ) ; org.springframework.boot.autoconfigure.logging.Logger . setLevel ( Level . DEBUG ) ; try { java.lang.Runnable . void ( ) ; } finally { org.springframework.boot.autoconfigure.logging.Logger . setLevel ( org.springframework.boot.autoconfigure.logging.Level ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { throw new java.lang.RuntimeException ( ) ; }  <METHOD_END>
