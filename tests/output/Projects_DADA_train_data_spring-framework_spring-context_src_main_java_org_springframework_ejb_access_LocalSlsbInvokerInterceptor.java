<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.ejb.access.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = null ; try { java.lang.Object = java.lang.Object ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.ejb.access.MethodInvocation . getMethod ( ) ; if ( java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( java.lang.Object ) ) { return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , org.springframework.ejb.access.MethodInvocation . getArguments ( ) ) ; } else { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , org.springframework.ejb.access.MethodInvocation . getArguments ( ) ) ; } } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + getJndiName ( ) + STRING , java.lang.Throwable ) ; } if ( java.lang.Throwable instanceof CreateException ) { throw new EjbAccessException ( STRING + getJndiName ( ) + STRING , java.lang.Throwable ) ; } else { throw java.lang.Throwable ; } } catch ( javax.naming.NamingException javax.naming.NamingException ) { throw new EjbAccessException ( STRING + getJndiName ( ) + STRING , javax.naming.NamingException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new EjbAccessException ( STRING + org.springframework.ejb.access.MethodInvocation . getMethod ( ) . getName ( ) + STRING + getJndiName ( ) + STRING , java.lang.IllegalAccessException ) ; } finally { if ( java.lang.Object instanceof EJBLocalObject ) { void ( ( EJBLocalObject ) java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Object java.lang.Object ) throws org.springframework.ejb.access.EjbAccessException { if ( this . boolean ) { return null ; } if ( ! ( java.lang.Object instanceof EJBLocalHome ) ) { this . boolean = true ; return null ; } return super. getCreateMethod ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , java.lang.reflect.InvocationTargetException { return java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( EJBLocalObject org.springframework.ejb.access.EJBLocalObject ) { void ( org.springframework.ejb.access.EJBLocalObject ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) javax.naming.NamingException , java.lang.reflect.InvocationTargetException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } java.lang.Object java.lang.Object = create ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( EJBLocalObject org.springframework.ejb.access.EJBLocalObject ) { if ( org.springframework.ejb.access.EJBLocalObject != null && ! this . boolean ) { try { org.springframework.ejb.access.EJBLocalObject . remove ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . warn ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
