<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { java.lang.ClassLoader java.lang.ClassLoader = mock ( java.lang.ClassLoader .class ) ; RepositoryFactoryBeanSupport org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport = new DummyRepositoryFactoryBean ( org.springframework.data.repository.core.support.RepositoryFactoryBeanSupportUnitTests.SampleRepository .class ) ; org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport . setBeanClassLoader ( java.lang.ClassLoader ) ; org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport . setLazyInit ( true ) ; org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport , STRING ) ; assertThat ( ReflectionTestUtils . getField ( java.lang.Object , STRING ) ) . isEqualTo ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { assertThatExceptionOfType ( java.lang.IllegalArgumentException .class ) . isThrownBy ( ( ) new DummyRepositoryFactoryBean ( null ) ) . withMessageContaining ( STRING ) ; }  <METHOD_END>
