<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Throwable { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new AbstractHttpInvokerRequestExecutor ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } } ) ; if ( boolean ) { ( ( BeanClassLoaderAware ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getHttpInvokerRequestExecutor ( ) ) . setBeanClassLoader ( java.lang.Class<? extends org.springframework.remoting.httpinvoker.HttpInvokerTests> ( ) . java.lang.ClassLoader ( ) ) ; } org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setStringArray ( new java.lang.String [] { STRING , STRING } ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.String [] { STRING , STRING } , org.springframework.remoting.httpinvoker.ITestBean . getStringArray ( ) ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setSomeIntegerArray ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } , org.springframework.remoting.httpinvoker.ITestBean . getSomeIntegerArray ( ) ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setNestedIntegerArray ( new java.lang.Integer [] [] { { NUMBER , NUMBER , NUMBER } , { NUMBER , NUMBER , NUMBER } } ) ; java.lang.Integer [] [] java.lang.Integer[][] = org.springframework.remoting.httpinvoker.ITestBean . getNestedIntegerArray ( ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } , java.lang.Integer[][] [ NUMBER ] ) ) ; assertTrue ( java.util.Arrays . boolean ( new java.lang.Integer [] { NUMBER , NUMBER , NUMBER } , java.lang.Integer[][] [ NUMBER ] ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setSomeIntArray ( new int [] { NUMBER , NUMBER , NUMBER } ) ; assertTrue ( java.util.Arrays . boolean ( new int [] { NUMBER , NUMBER , NUMBER } , org.springframework.remoting.httpinvoker.ITestBean . getSomeIntArray ( ) ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setNestedIntArray ( new int [] [] { { NUMBER , NUMBER , NUMBER } , { NUMBER , NUMBER , NUMBER } } ) ; int [] [] int[][] = org.springframework.remoting.httpinvoker.ITestBean . getNestedIntArray ( ) ; assertTrue ( java.util.Arrays . boolean ( new int [] { NUMBER , NUMBER , NUMBER } , int[][] [ NUMBER ] ) ) ; assertTrue ( java.util.Arrays . boolean ( new int [] { NUMBER , NUMBER , NUMBER } , int[][] [ NUMBER ] ) ) ; try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalStateException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalAccessException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new HttpInvokerRequestExecutor ( ) { @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.io.IOException { throw new java.io.IOException ( STRING ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; try { org.springframework.remoting.httpinvoker.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( RemoteAccessException org.springframework.remoting.httpinvoker.RemoteAccessException ) { assertTrue ( org.springframework.remoting.httpinvoker.RemoteAccessException . getCause ( ) instanceof java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) { @ java.lang.Override protected java.io.InputStream java.io.InputStream ( HttpServletRequest org.springframework.remoting.httpinvoker.HttpServletRequest , java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( STRING . boolean ( org.springframework.remoting.httpinvoker.HttpServletRequest . getHeader ( STRING ) ) ) { return new java.util.zip.GZIPInputStream ( java.io.InputStream ) ; } else { return java.io.InputStream ; } } @ java.lang.Override protected java.io.OutputStream java.io.OutputStream ( HttpServletRequest org.springframework.remoting.httpinvoker.HttpServletRequest , HttpServletResponse org.springframework.remoting.httpinvoker.HttpServletResponse , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { if ( STRING . boolean ( org.springframework.remoting.httpinvoker.HttpServletRequest . getHeader ( STRING ) ) ) { return new java.util.zip.GZIPOutputStream ( java.io.OutputStream ) ; } else { return java.io.OutputStream ; } } } ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new AbstractHttpInvokerRequestExecutor ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; try { org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; } catch ( ServletException org.springframework.remoting.httpinvoker.ServletException ) { throw new java.io.IOException ( org.springframework.remoting.httpinvoker.ServletException . toString ( ) ) ; } return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } @ java.lang.Override protected java.io.OutputStream java.io.OutputStream ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return new java.util.zip.GZIPOutputStream ( java.io.OutputStream ) ; } @ java.lang.Override protected java.io.InputStream java.io.InputStream ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { return new java.util.zip.GZIPInputStream ( java.io.InputStream ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalStateException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalAccessException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.InputStream java.io.InputStream ( HttpServletRequest org.springframework.remoting.httpinvoker.HttpServletRequest , java.io.InputStream java.io.InputStream ) throws java.io.IOException { if ( STRING . boolean ( org.springframework.remoting.httpinvoker.HttpServletRequest . getHeader ( STRING ) ) ) { return new java.util.zip.GZIPInputStream ( java.io.InputStream ) ; } else { return java.io.InputStream ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.OutputStream java.io.OutputStream ( HttpServletRequest org.springframework.remoting.httpinvoker.HttpServletRequest , HttpServletResponse org.springframework.remoting.httpinvoker.HttpServletResponse , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { if ( STRING . boolean ( org.springframework.remoting.httpinvoker.HttpServletRequest . getHeader ( STRING ) ) ) { return new java.util.zip.GZIPOutputStream ( java.io.OutputStream ) ; } else { return java.io.OutputStream ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . addHeader ( STRING , STRING ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; try { org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; } catch ( ServletException org.springframework.remoting.httpinvoker.ServletException ) { throw new java.io.IOException ( org.springframework.remoting.httpinvoker.ServletException . toString ( ) ) ; } return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.OutputStream java.io.OutputStream ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return new java.util.zip.GZIPOutputStream ( java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.InputStream java.io.InputStream ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { return new java.util.zip.GZIPInputStream ( java.io.InputStream ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( java.io.ObjectInputStream java.io.ObjectInputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ) ) { throw new java.io.IOException ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper .class . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( ( org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ) java.lang.Object ) . org.springframework.remoting.httpinvoker.RemoteInvocation ; } @ java.lang.Override protected void void ( RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult , java.io.ObjectOutputStream java.io.ObjectOutputStream )					throws java.io.IOException { java.io.ObjectOutputStream . void ( new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ( org.springframework.remoting.httpinvoker.RemoteInvocationResult ) ) ; } } ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new AbstractHttpInvokerRequestExecutor ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } @ java.lang.Override protected void void ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.ObjectOutputStream java.io.ObjectOutputStream ) throws java.io.IOException { java.io.ObjectOutputStream . void ( new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ( org.springframework.remoting.httpinvoker.RemoteInvocation ) ) ; } @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( java.io.ObjectInputStream java.io.ObjectInputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ) ) { throw new java.io.IOException ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper .class . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( ( org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ) java.lang.Object ) . org.springframework.remoting.httpinvoker.RemoteInvocationResult ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; org.springframework.remoting.httpinvoker.ITestBean . setAge ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalStateException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { org.springframework.remoting.httpinvoker.ITestBean . exceptional ( new java.lang.IllegalAccessException ( ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( java.io.ObjectInputStream java.io.ObjectInputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ) ) { throw new java.io.IOException ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper .class . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( ( org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ) java.lang.Object ) . org.springframework.remoting.httpinvoker.RemoteInvocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult , java.io.ObjectOutputStream java.io.ObjectOutputStream )					throws java.io.IOException { java.io.ObjectOutputStream . void ( new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ( org.springframework.remoting.httpinvoker.RemoteInvocationResult ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.ObjectOutputStream java.io.ObjectOutputStream ) throws java.io.IOException { java.io.ObjectOutputStream . void ( new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationWrapper ( org.springframework.remoting.httpinvoker.RemoteInvocation ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( java.io.ObjectInputStream java.io.ObjectInputStream )					throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ) ) { throw new java.io.IOException ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper .class . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( ( org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocationResultWrapper ) java.lang.Object ) . org.springframework.remoting.httpinvoker.RemoteInvocationResult ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setRemoteInvocationExecutor ( new DefaultRemoteInvocationExecutor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object java.lang.Object )					throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { assertNotNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return super. invoke ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setRemoteInvocationFactory ( new RemoteInvocationFactory ( ) { @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) { RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = new RemoteInvocation ( org.springframework.remoting.httpinvoker.MethodInvocation ) ; org.springframework.remoting.httpinvoker.RemoteInvocation . addAttribute ( STRING , STRING ) ; try { org.springframework.remoting.httpinvoker.RemoteInvocation . addAttribute ( STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertNotNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return org.springframework.remoting.httpinvoker.RemoteInvocation ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new AbstractHttpInvokerRequestExecutor ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object java.lang.Object )					throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { assertNotNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return super. invoke ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) { RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = new RemoteInvocation ( org.springframework.remoting.httpinvoker.MethodInvocation ) ; org.springframework.remoting.httpinvoker.RemoteInvocation . addAttribute ( STRING , STRING ) ; try { org.springframework.remoting.httpinvoker.RemoteInvocation . addAttribute ( STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } assertNotNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return org.springframework.remoting.httpinvoker.RemoteInvocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.remoting.httpinvoker.TestBean = new TestBean ( STRING , NUMBER ) ; final HttpInvokerServiceExporter org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter = new HttpInvokerServiceExporter ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setService ( org.springframework.remoting.httpinvoker.TestBean ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . setRemoteInvocationExecutor ( new DefaultRemoteInvocationExecutor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object java.lang.Object )					throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { assertTrue ( org.springframework.remoting.httpinvoker.RemoteInvocation instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocation ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return super. invoke ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . afterPropertiesSet ( ) ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( STRING ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setRemoteInvocationFactory ( new RemoteInvocationFactory ( ) { @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) { RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocation ( org.springframework.remoting.httpinvoker.MethodInvocation ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return org.springframework.remoting.httpinvoker.RemoteInvocation ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new AbstractHttpInvokerRequestExecutor ( ) { @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertEquals ( STRING , org.springframework.remoting.httpinvoker.ITestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.remoting.httpinvoker.ITestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object java.lang.Object )					throws java.lang.NoSuchMethodException , java.lang.IllegalAccessException , java.lang.reflect.InvocationTargetException { assertTrue ( org.springframework.remoting.httpinvoker.RemoteInvocation instanceof org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocation ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return super. invoke ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) { RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation = new org.springframework.remoting.httpinvoker.HttpInvokerTests.TestRemoteInvocation ( org.springframework.remoting.httpinvoker.MethodInvocation ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttributes ( ) ) ; assertNull ( org.springframework.remoting.httpinvoker.RemoteInvocation . getAttribute ( STRING ) ) ; return org.springframework.remoting.httpinvoker.RemoteInvocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ) throws java.lang.Exception { assertEquals ( STRING , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) ) ; MockHttpServletRequest org.springframework.remoting.httpinvoker.MockHttpServletRequest = new MockHttpServletRequest ( ) ; MockHttpServletResponse org.springframework.remoting.httpinvoker.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.remoting.httpinvoker.MockHttpServletRequest . setContent ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter . handleRequest ( org.springframework.remoting.httpinvoker.MockHttpServletRequest , org.springframework.remoting.httpinvoker.MockHttpServletResponse ) ; return readRemoteInvocationResult ( new java.io.ByteArrayInputStream ( org.springframework.remoting.httpinvoker.MockHttpServletResponse . getContentAsByteArray ( ) ) , org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getCodebaseUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; HttpInvokerProxyFactoryBean org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean = new HttpInvokerProxyFactoryBean ( ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceInterface ( ITestBean .class ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setServiceUrl ( java.lang.String ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . setHttpInvokerRequestExecutor ( new HttpInvokerRequestExecutor ( ) { @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.io.IOException { throw new java.io.IOException ( STRING ) ; } } ) ; org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . afterPropertiesSet ( ) ; ITestBean org.springframework.remoting.httpinvoker.ITestBean = ( ITestBean ) org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean . getObject ( ) ; assertTrue ( org.springframework.remoting.httpinvoker.ITestBean . toString ( ) . indexOf ( STRING ) != - NUMBER ) ; assertTrue ( org.springframework.remoting.httpinvoker.ITestBean . toString ( ) . indexOf ( java.lang.String ) != - NUMBER ) ; assertEquals ( org.springframework.remoting.httpinvoker.ITestBean . hashCode ( ) , org.springframework.remoting.httpinvoker.ITestBean . hashCode ( ) ) ; assertTrue ( org.springframework.remoting.httpinvoker.ITestBean . equals ( org.springframework.remoting.httpinvoker.ITestBean ) ) ; try { org.springframework.remoting.httpinvoker.ITestBean . setAge ( NUMBER ) ; fail ( STRING ) ; } catch ( RemoteAccessException org.springframework.remoting.httpinvoker.RemoteAccessException ) { assertTrue ( org.springframework.remoting.httpinvoker.RemoteAccessException . getCause ( ) instanceof java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.io.IOException { throw new java.io.IOException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( MethodInvocation org.springframework.remoting.httpinvoker.MethodInvocation ) { super( org.springframework.remoting.httpinvoker.MethodInvocation ); }  <METHOD_END>
<METHOD_START> public void ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) { this . org.springframework.remoting.httpinvoker.RemoteInvocation = org.springframework.remoting.httpinvoker.RemoteInvocation ; }  <METHOD_END>
<METHOD_START> public void ( RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ) { this . org.springframework.remoting.httpinvoker.RemoteInvocationResult = org.springframework.remoting.httpinvoker.RemoteInvocationResult ; }  <METHOD_END>
