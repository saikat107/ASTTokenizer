<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING } ) ; assertNull ( WebUtils . findParameterValue ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ) ; assertEquals ( STRING , WebUtils . findParameterValue ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ) ; assertEquals ( STRING , WebUtils . findParameterValue ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ) ; assertEquals ( STRING , WebUtils . findParameterValue ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ) ; assertEquals ( STRING , WebUtils . findParameterValue ( java.util.Map<java.lang.String,java.lang.Object> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( null ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( STRING , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( STRING , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . getFirst ( STRING ) ) ; org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> = WebUtils . parseMatrixVariables ( STRING ) ; assertEquals ( NUMBER , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING , java.util.List<java.lang.String> ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING , java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING , java.util.List<java.lang.String> ) ) ; java.util.List<java.lang.String> = java.util.Collections . java.util.List<java.lang.String> ( STRING ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING , java.util.List<java.lang.String> ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING , java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , - NUMBER , STRING ) ) ; assertTrue ( boolean ( STRING , NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , - NUMBER , STRING ) ) ; assertFalse ( boolean ( STRING , NUMBER , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServerHttpRequest org.springframework.web.util.ServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( java.lang.String ) ; if ( int != - NUMBER ) { org.springframework.web.util.MockHttpServletRequest . setServerPort ( int ) ; } org.springframework.web.util.ServerHttpRequest . getHeaders ( ) . set ( HttpHeaders . ORIGIN , java.lang.String ) ; return WebUtils . isValidOrigin ( org.springframework.web.util.ServerHttpRequest , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) { MockHttpServletRequest org.springframework.web.util.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServerHttpRequest org.springframework.web.util.ServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.util.MockHttpServletRequest ) ; org.springframework.web.util.MockHttpServletRequest . setServerName ( java.lang.String ) ; if ( int != - NUMBER ) { org.springframework.web.util.MockHttpServletRequest . setServerPort ( int ) ; } org.springframework.web.util.ServerHttpRequest . getHeaders ( ) . set ( HttpHeaders . ORIGIN , java.lang.String ) ; return WebUtils . isSameOrigin ( org.springframework.web.util.ServerHttpRequest ) ; }  <METHOD_END>
