<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new MediaType ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List ( new MediaType ( STRING , STRING ) , new MediaType ( STRING , STRING ) ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.nio.charset.UnsupportedCharsetException .class ) public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . get ( NUMBER ) . displayName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . get ( NUMBER ) . displayName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.nio.charset.Charset [] { java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.nio.charset.Charset> ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) . contains ( java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getCacheControl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getContentLength ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.NumberFormatException .class ) public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , new MediaType ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( NUMBER ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getDate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getIfModifiedSince ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getIfModifiedSince ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( NUMBER ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getIfModifiedSince ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getPragma ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; StopWatch org.springframework.integration.http.support.StopWatch = new StopWatch ( ) ; org.springframework.integration.http.support.StopWatch . start ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; } org.springframework.integration.http.support.StopWatch . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNotNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) == NUMBER ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) . toString ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . size ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . setContentType ( MediaType . TEXT_HTML ) ; org.springframework.integration.http.support.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( MediaType . TEXT_HTML ) ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( MessageHeaders . CONTENT_TYPE ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = DefaultHttpHeaderMapper . outboundMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setExcludedOutboundStandardRequestHeaderNames ( new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = DefaultHttpHeaderMapper . outboundMapper ( ) . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Date java.util.Date = new java.util.Date ( ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; java.text.SimpleDateFormat . void ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.lang.String java.lang.String = java.text.SimpleDateFormat . java.lang.String ( java.util.Date ) ; Message < ? > org.springframework.integration.http.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.lang.String ) . build ( ) ; HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . outboundMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( org.springframework.integration.http.support.Message<> . getHeaders ( ) , org.springframework.integration.http.support.HttpHeaders ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Date ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; assertEquals ( java.util.Calendar . long ( ) , org.springframework.integration.http.support.HttpHeaders . getIfModifiedSince ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = DefaultHttpHeaderMapper . outboundMapper ( ) . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) ; assertEquals ( java.lang.String , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
