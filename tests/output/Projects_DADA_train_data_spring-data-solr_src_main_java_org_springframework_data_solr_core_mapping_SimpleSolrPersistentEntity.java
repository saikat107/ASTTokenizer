<METHOD_START> public void ( TypeInformation < T > org.springframework.data.solr.core.mapping.TypeInformation<T> ) { super( org.springframework.data.solr.core.mapping.TypeInformation<T> ); this . org.springframework.data.solr.core.mapping.StandardEvaluationContext = new StandardEvaluationContext ( ) ; this . org.springframework.data.solr.core.mapping.TypeInformation<T> = org.springframework.data.solr.core.mapping.TypeInformation<T> ; this . java.lang.String = java.lang.String ( ) ; this . java.lang.Float = java.lang.Float ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.data.solr.core.mapping.ApplicationContext ) throws org.springframework.data.solr.core.mapping.BeansException { org.springframework.data.solr.core.mapping.StandardEvaluationContext . addPropertyAccessor ( new BeanFactoryAccessor ( ) ) ; org.springframework.data.solr.core.mapping.StandardEvaluationContext . setBeanResolver ( new BeanFactoryResolver ( org.springframework.data.solr.core.mapping.ApplicationContext ) ) ; org.springframework.data.solr.core.mapping.StandardEvaluationContext . setRootObject ( org.springframework.data.solr.core.mapping.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . org.springframework.data.solr.core.mapping.TypeInformation<T> . getType ( ) . getSimpleName ( ) . toLowerCase ( java.util.Locale . java.util.Locale ) ; java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> < SolrDocument > java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> = findAnnotation ( SolrDocument .class ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . isPresent ( ) ) { if ( StringUtils . hasText ( java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . get ( ) . solrCoreName ( ) ) ) { java.lang.String = java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . get ( ) . solrCoreName ( ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.Float java.lang.Float ( ) { java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> < SolrDocument > java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> = findAnnotation ( SolrDocument .class ) ; if ( java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . isPresent ( ) && ! java.lang.Float . boolean ( java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . get ( ) . boost ( ) ) ) { return java.util.Optional<org.springframework.data.solr.core.mapping.SolrDocument> . get ( ) . boost ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.lang.Float != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Float java.lang.Float ( ) { return java.lang.Float ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Optional<org.springframework.data.solr.core.mapping.SolrPersistentProperty> ( ) != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.data.solr.core.mapping.SolrPersistentProperty> < SolrPersistentProperty > java.util.Optional<org.springframework.data.solr.core.mapping.SolrPersistentProperty> ( ) { return getPersistentProperty ( Score .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. verify ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { doWithProperties ( new org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity.ScoreFieldUniquenessHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { doWithProperties ( org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity.DynamicFieldMappingHandler . org.springframework.data.solr.core.mapping.SimpleSolrPersistentEntity.DynamicFieldMappingHandler ) ; }  <METHOD_END>
<METHOD_START> public void void ( SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty ) { void ( org.springframework.data.solr.core.mapping.SolrPersistentProperty ) ; }  <METHOD_END>
<METHOD_START> private void void ( SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty ) { if ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isScoreProperty ( ) ) { if ( org.springframework.data.solr.core.mapping.SolrPersistentProperty != null ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) ) ; } org.springframework.data.solr.core.mapping.SolrPersistentProperty = org.springframework.data.solr.core.mapping.SolrPersistentProperty ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SolrPersistentProperty org.springframework.data.solr.core.mapping.SolrPersistentProperty ) { if ( org.springframework.data.solr.core.mapping.SolrPersistentProperty . isDynamicProperty ( ) ) { if ( ! org.springframework.data.solr.core.mapping.SolrPersistentProperty . isMap ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getName ( ) , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) ) ; } if ( ! org.springframework.data.solr.core.mapping.SolrPersistentProperty . containsWildcard ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getName ( ) , org.springframework.data.solr.core.mapping.SolrPersistentProperty . getFieldName ( ) ) ) ; } } }  <METHOD_END>
