<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ( RabbitProperties org.springframework.boot.autoconfigure.amqp.RabbitProperties )				throws java.lang.Exception { RabbitConnectionFactoryBean org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean = new RabbitConnectionFactoryBean ( ) ; if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineHost ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setHost ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineHost ( ) ) ; } org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setPort ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determinePort ( ) ) ; if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineUsername ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setUsername ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineUsername ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determinePassword ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setPassword ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determinePassword ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineVirtualHost ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setVirtualHost ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineVirtualHost ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getRequestedHeartbeat ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setRequestedHeartbeat ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getRequestedHeartbeat ( ) ) ; } RabbitProperties . RabbitProperties RabbitProperties.Ssl = org.springframework.boot.autoconfigure.amqp.RabbitProperties . getSsl ( ) ; if ( RabbitProperties.Ssl . isEnabled ( ) ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setUseSSL ( true ) ; if ( RabbitProperties.Ssl . getAlgorithm ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setSslAlgorithm ( RabbitProperties.Ssl . getAlgorithm ( ) ) ; } org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setKeyStore ( RabbitProperties.Ssl . getKeyStore ( ) ) ; org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setKeyStorePassphrase ( RabbitProperties.Ssl . getKeyStorePassword ( ) ) ; org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setTrustStore ( RabbitProperties.Ssl . getTrustStore ( ) ) ; org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setTrustStorePassphrase ( RabbitProperties.Ssl . getTrustStorePassword ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getConnectionTimeout ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . setConnectionTimeout ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getConnectionTimeout ( ) ) ; } org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . afterPropertiesSet ( ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = new CachingConnectionFactory ( org.springframework.boot.autoconfigure.amqp.RabbitConnectionFactoryBean . getObject ( ) ) ; org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setAddresses ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . determineAddresses ( ) ) ; org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setPublisherConfirms ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . isPublisherConfirms ( ) ) ; org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setPublisherReturns ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . isPublisherReturns ( ) ) ; if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getChannel ( ) . getSize ( ) != null ) { org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setChannelCacheSize ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getChannel ( ) . getSize ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getConnection ( ) . getMode ( ) != null ) { org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setCacheMode ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getConnection ( ) . getMode ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getConnection ( ) . getSize ( ) != null ) { org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setConnectionCacheSize ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getConnection ( ) . getSize ( ) ) ; } if ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getChannel ( ) . getCheckoutTimeout ( ) != null ) { org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . setChannelCheckoutTimeout ( org.springframework.boot.autoconfigure.amqp.RabbitProperties . getCache ( ) . getChannel ( ) . getCheckoutTimeout ( ) ) ; } return org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void ( ObjectProvider < MessageConverter > org.springframework.boot.autoconfigure.amqp.ObjectProvider<org.springframework.boot.autoconfigure.amqp.MessageConverter> , RabbitProperties org.springframework.boot.autoconfigure.amqp.RabbitProperties ) { this . org.springframework.boot.autoconfigure.amqp.ObjectProvider<org.springframework.boot.autoconfigure.amqp.MessageConverter> = org.springframework.boot.autoconfigure.amqp.ObjectProvider<org.springframework.boot.autoconfigure.amqp.MessageConverter> ; this . org.springframework.boot.autoconfigure.amqp.RabbitProperties = org.springframework.boot.autoconfigure.amqp.RabbitProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnSingleCandidate ( ConnectionFactory .class ) @ ConditionalOnMissingBean ( RabbitTemplate .class ) public org.springframework.boot.autoconfigure.amqp.RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate ( ConnectionFactory org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) { RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = new RabbitTemplate ( org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) ; MessageConverter org.springframework.boot.autoconfigure.amqp.MessageConverter = this . org.springframework.boot.autoconfigure.amqp.ObjectProvider<org.springframework.boot.autoconfigure.amqp.MessageConverter> . getIfUnique ( ) ; if ( org.springframework.boot.autoconfigure.amqp.MessageConverter != null ) { org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setMessageConverter ( org.springframework.boot.autoconfigure.amqp.MessageConverter ) ; } org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setMandatory ( boolean ( ) ) ; RabbitProperties . RabbitProperties RabbitProperties.Template = this . org.springframework.boot.autoconfigure.amqp.RabbitProperties . getTemplate ( ) ; RabbitProperties . RabbitProperties RabbitProperties.Retry = RabbitProperties.Template . getRetry ( ) ; if ( RabbitProperties.Retry . isEnabled ( ) ) { org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setRetryTemplate ( org.springframework.boot.autoconfigure.amqp.RetryTemplate ( RabbitProperties.Retry ) ) ; } if ( RabbitProperties.Template . getReceiveTimeout ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setReceiveTimeout ( RabbitProperties.Template . getReceiveTimeout ( ) ) ; } if ( RabbitProperties.Template . getReplyTimeout ( ) != null ) { org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setReplyTimeout ( RabbitProperties.Template . getReplyTimeout ( ) ) ; } return org.springframework.boot.autoconfigure.amqp.RabbitTemplate ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { java.lang.Boolean java.lang.Boolean = this . org.springframework.boot.autoconfigure.amqp.RabbitProperties . getTemplate ( ) . getMandatory ( ) ; return ( java.lang.Boolean != null ? java.lang.Boolean : this . org.springframework.boot.autoconfigure.amqp.RabbitProperties . isPublisherReturns ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.amqp.RetryTemplate org.springframework.boot.autoconfigure.amqp.RetryTemplate ( RabbitProperties . RabbitProperties RabbitProperties.Retry ) { RetryTemplate org.springframework.boot.autoconfigure.amqp.RetryTemplate = new RetryTemplate ( ) ; SimpleRetryPolicy org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy = new SimpleRetryPolicy ( ) ; org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy . setMaxAttempts ( RabbitProperties.Retry . getMaxAttempts ( ) ) ; org.springframework.boot.autoconfigure.amqp.RetryTemplate . setRetryPolicy ( org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy ) ; ExponentialBackOffPolicy org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy = new ExponentialBackOffPolicy ( ) ; org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . setInitialInterval ( RabbitProperties.Retry . getInitialInterval ( ) ) ; org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . setMultiplier ( RabbitProperties.Retry . getMultiplier ( ) ) ; org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . setMaxInterval ( RabbitProperties.Retry . getMaxInterval ( ) ) ; org.springframework.boot.autoconfigure.amqp.RetryTemplate . setBackOffPolicy ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy ) ; return org.springframework.boot.autoconfigure.amqp.RetryTemplate ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnSingleCandidate ( ConnectionFactory .class ) @ ConditionalOnProperty ( prefix = STRING , name = STRING , matchIfMissing = true ) @ ConditionalOnMissingBean ( AmqpAdmin .class ) public org.springframework.boot.autoconfigure.amqp.AmqpAdmin org.springframework.boot.autoconfigure.amqp.AmqpAdmin ( ConnectionFactory org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) { return new RabbitAdmin ( org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnSingleCandidate ( RabbitTemplate .class ) public org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate ( RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) { return new RabbitMessagingTemplate ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ; }  <METHOD_END>
