<METHOD_START> public void ( ReactiveMongoOperations org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.ReactiveMongoOperations , STRING ) ; this . org.springframework.data.mongodb.repository.support.ReactiveMongoOperations = org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ; this . org.springframework.data.mongodb.repository.support.MappingContext<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> = org.springframework.data.mongodb.repository.support.ReactiveMongoOperations . getConverter ( ) . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.mongodb.repository.support.RepositoryMetadata ) { return SimpleReactiveMongoRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.mongodb.repository.support.RepositoryInformation ) { MongoEntityInformation < ? , java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<?,java.io.Serializable> = org.springframework.data.mongodb.repository.support.MongoEntityInformation ( org.springframework.data.mongodb.repository.support.RepositoryInformation . getDomainType ( ) , org.springframework.data.mongodb.repository.support.RepositoryInformation ) ; return getTargetRepositoryViaReflection ( org.springframework.data.mongodb.repository.support.RepositoryInformation , org.springframework.data.mongodb.repository.support.MongoEntityInformation<,java.io.Serializable> , org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.mongodb.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.mongodb.repository.support.QueryLookupStrategy> ( Key org.springframework.data.mongodb.repository.support.Key , EvaluationContextProvider org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<T> ( new org.springframework.data.mongodb.repository.support.ReactiveMongoRepositoryFactory.MongoQueryLookupStrategy ( org.springframework.data.mongodb.repository.support.ReactiveMongoOperations , org.springframework.data.mongodb.repository.support.EvaluationContextProvider , org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ) ) ; }  <METHOD_END>
<METHOD_START> public < T , ID extends java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,java.io.Serializable> ( java.lang.Class<T> , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T , ID extends java.io.Serializable > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> , RepositoryInformation org.springframework.data.mongodb.repository.support.RepositoryInformation ) { java.util.Optional<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>> < ? extends MongoPersistentEntity < ? > > java.util.Optional<? extends org.springframework.data.mongodb.repository.support.MongoPersistentEntity<?>> = org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> . getPersistentEntity ( java.lang.Class<T> ) ; if ( ! java.util.Optional<> . boolean ( ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<T> . java.lang.String ( ) ) ) ; } return new MappingMongoEntityInformation < T , ID > ( ( MongoPersistentEntity < T > ) java.util.Optional<> . get ( ) , org.springframework.data.mongodb.repository.support.RepositoryInformation != null ? ( java.lang.Class<ID> < ID > ) org.springframework.data.mongodb.repository.support.RepositoryInformation . getIdType ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.RepositoryQuery org.springframework.data.mongodb.repository.support.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.mongodb.repository.support.RepositoryMetadata , ProjectionFactory org.springframework.data.mongodb.repository.support.ProjectionFactory , NamedQueries org.springframework.data.mongodb.repository.support.NamedQueries ) { ReactiveMongoQueryMethod org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod = new ReactiveMongoQueryMethod ( java.lang.reflect.Method , org.springframework.data.mongodb.repository.support.RepositoryMetadata , org.springframework.data.mongodb.repository.support.ProjectionFactory , org.springframework.data.mongodb.repository.support.MappingContext<,org.springframework.data.mongodb.repository.support.MongoPersistentProperty> ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod . getNamedQueryName ( ) ; if ( org.springframework.data.mongodb.repository.support.NamedQueries . hasQuery ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.NamedQueries . getQuery ( java.lang.String ) ; return new ReactiveStringBasedMongoQuery ( java.lang.String , org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod , org.springframework.data.mongodb.repository.support.ReactiveMongoOperations , org.springframework.data.mongodb.repository.support.SpelExpressionParser , org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) ; } else if ( org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod . hasAnnotatedQuery ( ) ) { return new ReactiveStringBasedMongoQuery ( org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod , org.springframework.data.mongodb.repository.support.ReactiveMongoOperations , org.springframework.data.mongodb.repository.support.SpelExpressionParser , org.springframework.data.mongodb.repository.support.EvaluationContextProvider ) ; } else { return new ReactivePartTreeMongoQuery ( org.springframework.data.mongodb.repository.support.ReactiveMongoQueryMethod , org.springframework.data.mongodb.repository.support.ReactiveMongoOperations ) ; } }  <METHOD_END>
