<METHOD_START> @ Before public void void ( ) { org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource = StoredProcedureAttributeSource . INSTANCE ; when ( org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> . getJavaType ( ) ) . thenReturn ( User .class ) ; when ( org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> . getEntityName ( ) ) . thenReturn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( StoredProcedureAttributes . SYNTHETIC_OUTPUT_PARAMETER_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( StoredProcedureAttributes . SYNTHETIC_OUTPUT_PARAMETER_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( StoredProcedureAttributes . SYNTHETIC_OUTPUT_PARAMETER_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( StoredProcedureAttributes . SYNTHETIC_OUTPUT_PARAMETER_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( StoredProcedureAttributes . SYNTHETIC_OUTPUT_PARAMETER_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StoredProcedureAttributes org.springframework.data.jpa.repository.query.StoredProcedureAttributes = org.springframework.data.jpa.repository.query.StoredProcedureAttributeSource . createFrom ( java.lang.reflect.Method ( STRING , java.lang.Integer .class ) , org.springframework.data.jpa.repository.query.JpaEntityMetadata<org.springframework.data.jpa.repository.query.User> ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getProcedureName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterType ( ) , is ( typeCompatibleWith ( java.lang.Integer .class ) ) ) ; assertThat ( org.springframework.data.jpa.repository.query.StoredProcedureAttributes . getOutputParameterName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return ReflectionUtils . findMethod ( org.springframework.data.jpa.repository.query.StoredProcedureAttributeSourceUnitTests.DummyRepository .class , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ Procedure ( STRING ) java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ Procedure ( procedureName = STRING ) java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ Procedure java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ Procedure ( name = STRING ) java.lang.Integer java.lang.Integer ( @ Param ( STRING ) java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ Procedure java.lang.Integer java.lang.Integer ( @ Param ( STRING ) java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ org.springframework.data.jpa.repository.query.StoredProcedureAttributeSourceUnitTests.ComposedProcedureUsingAliasFor ( java.lang.String = STRING ) java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> @ org.springframework.data.jpa.repository.query.StoredProcedureAttributeSourceUnitTests.ComposedProcedureUsingAliasFor ( java.lang.String = STRING ) java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer );  <METHOD_END>
