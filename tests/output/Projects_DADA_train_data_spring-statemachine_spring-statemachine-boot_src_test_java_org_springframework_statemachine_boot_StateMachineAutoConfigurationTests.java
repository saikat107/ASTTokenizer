<METHOD_START> @ After public void void ( ) { if ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext != null ) { org.springframework.statemachine.boot.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.boot.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( StateMachineAutoConfiguration .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.boot.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext , STRING ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( StateMachineAutoConfiguration .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.statemachine.boot.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.boot.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . register ( StateMachineAutoConfiguration .class , org.springframework.statemachine.boot.StateMachineAutoConfigurationTests.Config1 .class ) ; org.springframework.statemachine.boot.AnnotationConfigApplicationContext . refresh ( ) ; StateMachine org.springframework.statemachine.boot.StateMachine = org.springframework.statemachine.boot.AnnotationConfigApplicationContext . getBean ( StateMachine .class ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , org.springframework.statemachine.boot.StateMachine ) ; java.lang.Object java.lang.Object = TestUtils . readField ( STRING , java.lang.Object ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = TestUtils . readField ( STRING , java.lang.Object ) ; assertThat ( java.util.List<java.lang.Object> , notNullValue ( ) ) ; assertThat ( java.util.List<java.lang.Object> . int ( ) , is ( NUMBER ) ) ; assertThat ( java.util.List<java.lang.Object> . java.lang.Object ( NUMBER ) , instanceOf ( BootStateMachineMonitor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.boot.StateMachineStateConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.boot.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.boot.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.boot.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
