<METHOD_START> public void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { this . java.util.Map<?,?> = java.util.Map<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.Class<? extends java.util.Map> < ? extends java.util.Map > java.lang.Class<? extends java.util.Map> ) { if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! java.util.Map .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . java.lang.Class<? extends java.util.Map> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<java.util.Map> < java.util.Map > java.lang.Class<java.util.Map> ( ) { return java.util.Map .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( ) { if ( this . java.util.Map<,> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = null ; if ( this . java.lang.Class<> != null ) { java.util.Map<java.lang.Object,java.lang.Object> = BeanUtils . instantiateClass ( this . java.lang.Class<> ) ; } else { java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> <> ( this . java.util.Map<,> . int ( ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = null ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( this . java.lang.Class<> != null ) { ResolvableType org.springframework.beans.factory.config.ResolvableType = ResolvableType . forClass ( this . java.lang.Class<> ) . asMap ( ) ; java.lang.Class<?> = org.springframework.beans.factory.config.ResolvableType . resolveGeneric ( NUMBER ) ; java.lang.Class<?> = org.springframework.beans.factory.config.ResolvableType . resolveGeneric ( NUMBER ) ; } if ( java.lang.Class<> != null || java.lang.Class<> != null ) { TypeConverter org.springframework.beans.factory.config.TypeConverter = getBeanTypeConverter ( ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : this . java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.config.TypeConverter . convertIfNecessary ( java.util.Map.Entry<,> . getKey ( ) , java.lang.Class<> ) ; java.lang.Object java.lang.Object = org.springframework.beans.factory.config.TypeConverter . convertIfNecessary ( java.util.Map.Entry<,> . getValue ( ) , java.lang.Class<> ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; } } else { java.util.Map<java.lang.Object,java.lang.Object> . void ( this . java.util.Map<,> ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
