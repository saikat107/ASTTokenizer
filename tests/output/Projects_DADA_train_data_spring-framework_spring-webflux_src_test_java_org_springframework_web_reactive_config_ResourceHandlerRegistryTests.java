<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.reactive.config.ResourceHandlerRegistry = new ResourceHandlerRegistry ( new GenericApplicationContext ( ) ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration = this . org.springframework.web.reactive.config.ResourceHandlerRegistry . addResourceHandler ( STRING ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration . addResourceLocations ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.config.ResourceHandlerRegistry = new ResourceHandlerRegistry ( new GenericApplicationContext ( ) ) ; assertNull ( this . org.springframework.web.reactive.config.ResourceHandlerRegistry . getHandlerMapping ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockServerWebExchange org.springframework.web.reactive.config.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.config.MockServerWebExchange . getAttributes ( ) . put ( HandlerMapping . PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE , STRING ) ; ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) ; org.springframework.web.reactive.config.ResourceWebHandler . handle ( org.springframework.web.reactive.config.MockServerWebExchange ) . block ( java.time.Duration . java.time.Duration ( NUMBER ) ) ; StepVerifier . create ( org.springframework.web.reactive.config.MockServerWebExchange . getResponse ( ) . getBody ( ) ) . consumeNextWith ( buf -> assertEquals ( STRING , DataBufferTestUtils . dumpString ( buf , StandardCharsets . UTF_8 ) ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) . getCacheControl ( ) , Matchers . nullValue ( ) ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration . setCacheControl ( CacheControl . noCache ( ) . cachePrivate ( ) ) ; assertThat ( org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) . getCacheControl ( ) . getHeaderValue ( ) , Matchers . equalTo ( CacheControl . noCache ( ) . cachePrivate ( ) . getHeaderValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( java.lang.Integer . int - NUMBER , this . org.springframework.web.reactive.config.ResourceHandlerRegistry . getHandlerMapping ( ) . getOrder ( ) ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistry . setOrder ( NUMBER ) ; assertEquals ( NUMBER , this . org.springframework.web.reactive.config.ResourceHandlerRegistry . getHandlerMapping ( ) . getOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( this . org.springframework.web.reactive.config.ResourceHandlerRegistry . hasMappingForPattern ( STRING ) ) ; assertFalse ( this . org.springframework.web.reactive.config.ResourceHandlerRegistry . hasMappingForPattern ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceResolver org.springframework.web.reactive.config.ResourceResolver = Mockito . mock ( ResourceResolver .class ) ; ResourceTransformer org.springframework.web.reactive.config.ResourceTransformer = Mockito . mock ( ResourceTransformer .class ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration . resourceChain ( true ) . addResolver ( org.springframework.web.reactive.config.ResourceResolver ) . addTransformer ( org.springframework.web.reactive.config.ResourceTransformer ) ; ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) ; java.util.List<org.springframework.web.reactive.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.config.ResourceResolver> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.reactive.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceResolver .class ) ) ; CachingResourceResolver org.springframework.web.reactive.config.CachingResourceResolver = ( CachingResourceResolver ) java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) ; assertThat ( org.springframework.web.reactive.config.CachingResourceResolver . getCache ( ) , Matchers . instanceOf ( ConcurrentMapCache .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . equalTo ( org.springframework.web.reactive.config.ResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.reactive.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.config.ResourceTransformer> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . equalTo ( org.springframework.web.reactive.config.ResourceTransformer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.reactive.config.ResourceHandlerRegistration . resourceChain ( false ) ; ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) ; java.util.List<org.springframework.web.reactive.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.config.ResourceResolver> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.reactive.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.config.ResourceTransformer> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { VersionResourceResolver org.springframework.web.reactive.config.VersionResourceResolver = new VersionResourceResolver ( ) . addFixedVersionStrategy ( STRING , STRING STRING ) . addContentVersionStrategy ( STRING ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration . resourceChain ( true ) . addResolver ( org.springframework.web.reactive.config.VersionResourceResolver ) . addTransformer ( new AppCacheManifestTransformer ( ) ) ; ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) ; java.util.List<org.springframework.web.reactive.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.config.ResourceResolver> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.reactive.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.VersionResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( WebJarsResourceResolver .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . instanceOf ( PathResourceResolver .class ) ) ; java.util.List<org.springframework.web.reactive.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.config.ResourceTransformer> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CachingResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( CssLinkResourceTransformer .class ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . instanceOf ( AppCacheManifestTransformer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CachingResourceResolver org.springframework.web.reactive.config.CachingResourceResolver = Mockito . mock ( CachingResourceResolver .class ) ; VersionResourceResolver org.springframework.web.reactive.config.VersionResourceResolver = Mockito . mock ( VersionResourceResolver .class ) ; WebJarsResourceResolver org.springframework.web.reactive.config.WebJarsResourceResolver = Mockito . mock ( WebJarsResourceResolver .class ) ; PathResourceResolver org.springframework.web.reactive.config.PathResourceResolver = new PathResourceResolver ( ) ; CachingResourceTransformer org.springframework.web.reactive.config.CachingResourceTransformer = Mockito . mock ( CachingResourceTransformer .class ) ; AppCacheManifestTransformer org.springframework.web.reactive.config.AppCacheManifestTransformer = Mockito . mock ( AppCacheManifestTransformer .class ) ; CssLinkResourceTransformer org.springframework.web.reactive.config.CssLinkResourceTransformer = new CssLinkResourceTransformer ( ) ; this . org.springframework.web.reactive.config.ResourceHandlerRegistration . setCacheControl ( CacheControl . maxAge ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . resourceChain ( false ) . addResolver ( org.springframework.web.reactive.config.CachingResourceResolver ) . addResolver ( org.springframework.web.reactive.config.VersionResourceResolver ) . addResolver ( org.springframework.web.reactive.config.WebJarsResourceResolver ) . addResolver ( org.springframework.web.reactive.config.PathResourceResolver ) . addTransformer ( org.springframework.web.reactive.config.CachingResourceTransformer ) . addTransformer ( org.springframework.web.reactive.config.AppCacheManifestTransformer ) . addTransformer ( org.springframework.web.reactive.config.CssLinkResourceTransformer ) ; ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler = org.springframework.web.reactive.config.ResourceWebHandler ( STRING ) ; java.util.List<org.springframework.web.reactive.config.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.config.ResourceResolver> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceResolvers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . toString ( ) , java.util.List<org.springframework.web.reactive.config.ResourceResolver> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.CachingResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.VersionResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.WebJarsResourceResolver ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceResolver> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.PathResourceResolver ) ) ; java.util.List<org.springframework.web.reactive.config.ResourceTransformer> < ResourceTransformer > java.util.List<org.springframework.web.reactive.config.ResourceTransformer> = org.springframework.web.reactive.config.ResourceWebHandler . getResourceTransformers ( ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> , Matchers . hasSize ( NUMBER ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.CachingResourceTransformer ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.AppCacheManifestTransformer ) ) ; assertThat ( java.util.List<org.springframework.web.reactive.config.ResourceTransformer> . get ( NUMBER ) , Matchers . sameInstance ( org.springframework.web.reactive.config.CssLinkResourceTransformer ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.config.ResourceWebHandler org.springframework.web.reactive.config.ResourceWebHandler ( java.lang.String java.lang.String ) { SimpleUrlHandlerMapping org.springframework.web.reactive.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) this . org.springframework.web.reactive.config.ResourceHandlerRegistry . getHandlerMapping ( ) ; return ( ResourceWebHandler ) org.springframework.web.reactive.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( java.lang.String ) ; }  <METHOD_END>
