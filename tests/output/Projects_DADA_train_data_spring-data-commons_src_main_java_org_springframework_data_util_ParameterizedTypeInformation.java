<METHOD_START> public void ( java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType , TypeDiscoverer < ? > org.springframework.data.util.TypeDiscoverer<?> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> < java.lang.reflect.TypeVariable<?> < ? > , java.lang.reflect.Type > java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ) { super( java.lang.reflect.ParameterizedType , org.springframework.data.util.TypeDiscoverer<> , java.util.Map<java.lang.reflect.TypeVariable<?>,java.lang.reflect.Type> ); this . java.lang.reflect.ParameterizedType = java.lang.reflect.ParameterizedType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( ) { if ( java.util.Map .class . boolean ( getType ( ) ) ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ; if ( java.lang.reflect.Type[] . int > NUMBER ) { return java.util.Optional . java.util.Optional ( createInfo ( java.lang.reflect.Type[] [ NUMBER ] ) ) ; } } java.lang.Class<?> < ? > java.lang.Class<?> = getType ( ) ; java.util.Set<java.lang.reflect.Type> < java.lang.reflect.Type > java.util.Set<java.lang.reflect.Type> = new java.util.HashSet<java.lang.reflect.Type> <> ( ) ; java.util.Optional . java.util.Optional<java.lang.reflect.Type> ( java.lang.Class<> . java.lang.reflect.Type ( ) ) . void ( java.util.Set<java.lang.reflect.Type> :: boolean ) ; java.util.Set<java.lang.reflect.Type> . boolean ( java.util.Arrays . java.util.List<java.lang.reflect.Type> ( java.lang.Class<> . java.lang.reflect.Type[] ( ) ) ) ; java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> = java.util.Set<java.lang.reflect.Type> . java.util.stream.Stream<java.lang.reflect.Type> ( ) . java.util.stream.Stream<java.lang.Object> ( java.lang.reflect.Type -> Pair . of ( java.lang.reflect.Type , resolveType ( java.lang.reflect.Type ) ) ) . filter ( it -> Map .class . isAssignableFrom ( it . getSecond ( ) ) ) .< TypeInformation < ? > > map ( it -> { ParameterizedType parameterizedSupertype = ( ParameterizedType ) it . getFirst ( ) ; Type [] arguments = parameterizedSupertype . getActualTypeArguments ( ) ; return createInfo ( arguments [ NUMBER ] ) ; } ) . findFirst ( ) ; return java.util.Optional<org.springframework.data.util.TypeInformation<?>> . isPresent ( ) ? java.util.Optional<org.springframework.data.util.TypeInformation<?>> : super. doGetMapValueType ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> ( ) { java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = new java.util.ArrayList<org.springframework.data.util.TypeInformation<?>> <> ( ) ; for ( java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ) { java.util.List<org.springframework.data.util.TypeInformation<?>> . add ( createInfo ( java.lang.reflect.Type ) ) ; } return java.util.List<org.springframework.data.util.TypeInformation<?>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeInformation < ? > org.springframework.data.util.TypeInformation<?> ) { if ( this . boolean ( org.springframework.data.util.TypeInformation<> ) ) { return true ; } java.lang.Class<T> < T > java.lang.Class<T> = getType ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.util.TypeInformation<> . getType ( ) ; if ( ! java.lang.Class<T> . boolean ( java.lang.Class<> ) ) { return false ; } TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = java.lang.Class<T> . boolean ( java.lang.Class<> ) ? org.springframework.data.util.TypeInformation<> : org.springframework.data.util.TypeInformation<> . getSuperTypeInformation ( java.lang.Class<T> ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = java.util.List<org.springframework.data.util.TypeInformation<?>> ( ) ; java.util.List<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> = org.springframework.data.util.TypeInformation<> . getTypeArguments ( ) ; if ( java.util.List<org.springframework.data.util.TypeInformation<?>> . size ( ) != java.util.List<org.springframework.data.util.TypeInformation<?>> . size ( ) ) { return false ; } for ( int int = NUMBER ; int < java.util.List<org.springframework.data.util.TypeInformation<?>> . size ( ) ; int ++ ) { if ( ! java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( int ) . isAssignableFrom ( java.util.List<org.springframework.data.util.TypeInformation<?>> . get ( int ) ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.util.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( ) { return java.util.Optional . java.util.Optional ( createInfo ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) [ NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == this ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.data.util.ParameterizedTypeInformation ) ) { return false ; } org.springframework.data.util.ParameterizedTypeInformation<?> < ? > org.springframework.data.util.ParameterizedTypeInformation<?> = ( org.springframework.data.util.ParameterizedTypeInformation<?> < ? > ) java.lang.Object ; if ( this . boolean ( ) && org.springframework.data.util.ParameterizedTypeInformation<> . boolean ( ) ) { return this . java.lang.reflect.ParameterizedType . boolean ( org.springframework.data.util.ParameterizedTypeInformation<> . java.lang.reflect.ParameterizedType ) ; } return super. boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return boolean ( ) ? this . java.lang.reflect.ParameterizedType . int ( ) : super. int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , getType ( ) . getName ( ) , StringUtils . collectionToCommaDelimitedString ( java.util.List<org.springframework.data.util.TypeInformation<?>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( java.lang.Boolean != null ) { return java.lang.Boolean ; } java.lang.reflect.Type [] java.lang.reflect.Type[] = java.lang.reflect.ParameterizedType . java.lang.reflect.Type[] ( ) ; if ( java.lang.reflect.Type[] . int == NUMBER ) { return boolean ( false ) ; } for ( java.lang.reflect.Type java.lang.reflect.Type : java.lang.reflect.Type[] ) { TypeInformation < ? > org.springframework.data.util.TypeInformation<?> = createInfo ( java.lang.reflect.Type ) ; if ( org.springframework.data.util.TypeInformation<> instanceof org.springframework.data.util.ParameterizedTypeInformation ) { if ( ! ( ( org.springframework.data.util.ParameterizedTypeInformation<?> < ? > ) org.springframework.data.util.TypeInformation<> ) . boolean ( ) ) { return boolean ( false ) ; } } if ( ! ( org.springframework.data.util.TypeInformation<> instanceof ClassTypeInformation ) ) { return boolean ( false ) ; } } return boolean ( true ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( boolean boolean ) { this . java.lang.Boolean = boolean ; return boolean ; }  <METHOD_END>
