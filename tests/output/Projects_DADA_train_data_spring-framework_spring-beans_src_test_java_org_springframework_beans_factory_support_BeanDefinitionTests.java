<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( STRING ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) == org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) == org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) == org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) , STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) , STRING ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) , STRING ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) == org.springframework.beans.factory.support.RootBeanDefinition . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( STRING ) ; BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.beans.factory.support.RootBeanDefinition , STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; assertTrue ( ! org.springframework.beans.factory.support.RootBeanDefinition . equals ( org.springframework.beans.factory.support.RootBeanDefinition ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . setAbstract ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.beans.factory.support.RootBeanDefinition . setScope ( STRING ) ; BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = new BeanDefinitionHolder ( org.springframework.beans.factory.support.RootBeanDefinition , STRING ) ; assertTrue ( org.springframework.beans.factory.support.BeanDefinitionHolder . equals ( org.springframework.beans.factory.support.BeanDefinitionHolder ) ) ; assertTrue ( org.springframework.beans.factory.support.BeanDefinitionHolder . equals ( org.springframework.beans.factory.support.BeanDefinitionHolder ) ) ; assertTrue ( org.springframework.beans.factory.support.BeanDefinitionHolder . hashCode ( ) == org.springframework.beans.factory.support.BeanDefinitionHolder . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , new java.lang.Integer ( NUMBER ) ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . setQualifiedElement ( java.lang.Class<? extends org.springframework.beans.factory.support.BeanDefinitionTests> ( ) ) ; GenericBeanDefinition org.springframework.beans.factory.support.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.beans.factory.support.GenericBeanDefinition . setParentName ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition . overrideFrom ( org.springframework.beans.factory.support.GenericBeanDefinition ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . getArgumentCount ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.RootBeanDefinition . getPropertyValues ( ) . size ( ) ) ; assertEquals ( org.springframework.beans.factory.support.RootBeanDefinition , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , null ) . setValue ( new java.lang.Integer ( NUMBER ) ) ; assertEquals ( new java.lang.Integer ( NUMBER ) , org.springframework.beans.factory.support.RootBeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , null ) . getValue ( ) ) ; assertEquals ( java.lang.Class<? extends org.springframework.beans.factory.support.BeanDefinitionTests> ( ) , org.springframework.beans.factory.support.RootBeanDefinition . getQualifiedElement ( ) ) ; }  <METHOD_END>
