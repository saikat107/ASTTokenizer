<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> < java.lang.String , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > > java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> < java.lang.String , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > > java.util.Map.Entry<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> : java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . getKey ( ) , java.util.Map.Entry<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) { if ( org.springframework.cache.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.cache.interceptor.Log . debug ( STRING + java.lang.String + STRING + java.util.Collection<org.springframework.cache.interceptor.CacheOperation> + STRING ) ; } this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . put ( java.lang.String , java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . get ( java.lang.String ) ; if ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> == null ) { java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . keySet ( ) ) { if ( boolean ( java.lang.String , java.lang.String ) && ( java.lang.String == null || java.lang.String . int ( ) <= java.lang.String . int ( ) ) ) { java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> . get ( java.lang.String ) ; java.lang.String = java.lang.String ; } } } return java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.cache.interceptor.NameMatchCacheOperationSource ) ) { return false ; } org.springframework.cache.interceptor.NameMatchCacheOperationSource org.springframework.cache.interceptor.NameMatchCacheOperationSource = ( org.springframework.cache.interceptor.NameMatchCacheOperationSource ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> , org.springframework.cache.interceptor.NameMatchCacheOperationSource . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.cache.interceptor.NameMatchCacheOperationSource .class . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.cache.interceptor.NameMatchCacheOperationSource> ( ) . java.lang.String ( ) + STRING + this . java.util.Map<java.lang.String,java.util.Collection<org.springframework.cache.interceptor.CacheOperation>> ; }  <METHOD_END>
