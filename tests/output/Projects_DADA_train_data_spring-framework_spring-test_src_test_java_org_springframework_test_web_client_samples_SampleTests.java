<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.client.samples.RestTemplate = new RestTemplate ( ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer = MockRestServiceServer . bindTo ( this . org.springframework.test.web.client.samples.RestTemplate ) . ignoreExpectOrder ( true ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) Person org.springframework.test.web.client.samples.Person = this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( manyTimes ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) Person org.springframework.test.web.client.samples.Person = this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( once ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( never ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( once ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( never ( ) , requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( java.lang.String , MediaType . APPLICATION_JSON ) ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.test.web.client.samples.Resource = new ClassPathResource ( STRING , this . java.lang.Class<? extends org.springframework.test.web.client.samples.SampleTests> ( ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( org.springframework.test.web.client.samples.Resource , MediaType . APPLICATION_JSON ) ) ; @ java.lang.SuppressWarnings ( STRING ) Person org.springframework.test.web.client.samples.Person = this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , Person .class , NUMBER ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; this . org.springframework.test.web.client.samples.MockRestServiceServer . expect ( requestTo ( STRING ) ) . andExpect ( method ( HttpMethod . GET ) ) . andRespond ( withSuccess ( STRING , MediaType . TEXT_PLAIN ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String = this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , java.lang.String .class ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.String java.lang.String = this . org.springframework.test.web.client.samples.RestTemplate . getForObject ( STRING , java.lang.String .class ) ; try { this . org.springframework.test.web.client.samples.MockRestServiceServer . verify ( ) ; } catch ( java.lang.AssertionError java.lang.AssertionError ) { assertTrue ( java.lang.AssertionError . java.lang.String ( ) , java.lang.AssertionError . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
