<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.hateoas.ResponseEntity<java.lang.String> = this . sample.hateoas.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.hateoas.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.hateoas.ResponseEntity<java.lang.String> . getBody ( ) ) . startsWith ( STRING + STRING ) ; assertThat ( sample.hateoas.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.hateoas.HttpHeaders = new HttpHeaders ( ) ; sample.hateoas.HttpHeaders . set ( HttpHeaders . ACCEPT , STRING ) ; HttpEntity < ? > sample.hateoas.HttpEntity<?> = new HttpEntity <> ( sample.hateoas.HttpHeaders ) ; ResponseEntity < java.lang.String > sample.hateoas.ResponseEntity<java.lang.String> = this . sample.hateoas.TestRestTemplate . exchange ( STRING , HttpMethod . GET , sample.hateoas.HttpEntity<> , java.lang.String .class ) ; assertThat ( sample.hateoas.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.hateoas.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) . isEqualTo ( MediaType . parseMediaType ( STRING ) ) ; }  <METHOD_END>
