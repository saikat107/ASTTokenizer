<METHOD_START> @ Test @ WithMockUser ( roles = { STRING } ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) ) ; org.springframework.statemachine.security.ActionSecurityTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . sendEvent ( org.springframework.statemachine.security.ActionSecurityTests.Events . org.springframework.statemachine.security.ActionSecurityTests.Events ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestSecAction . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ WithMockUser public void void ( ) java.lang.Exception { assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) ) ; org.springframework.statemachine.security.ActionSecurityTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . sendEvent ( org.springframework.statemachine.security.ActionSecurityTests.Events . org.springframework.statemachine.security.ActionSecurityTests.Events ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.security.StateMachine<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . getState ( ) . getIds ( ) , containsInAnyOrder ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) ) ; assertThat ( org.springframework.statemachine.security.ActionSecurityTests.TestSecAction . int ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( AuthenticationManagerBuilder org.springframework.statemachine.security.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.statemachine.security.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.StateMachineConfigurationConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineConfigurationConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . withConfiguration ( ) . listener ( org.springframework.statemachine.security.ActionSecurityTests.TestListener ( ) ) . autoStartup ( true ) . and ( ) . withSecurity ( ) . enabled ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.StateMachineStateConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineStateConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . withStates ( ) . initial ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) . state ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) . state ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.TestSecAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.StateMachineTransitionConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> )				throws java.lang.Exception { org.springframework.statemachine.security.StateMachineTransitionConfigurer<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> . withExternal ( ) . source ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) . target ( org.springframework.statemachine.security.ActionSecurityTests.States . org.springframework.statemachine.security.ActionSecurityTests.States ) . event ( org.springframework.statemachine.security.ActionSecurityTests.Events . org.springframework.statemachine.security.ActionSecurityTests.Events ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.security.ActionSecurityTests.TestListener org.springframework.statemachine.security.ActionSecurityTests.TestListener ( ) { return new org.springframework.statemachine.security.ActionSecurityTests.TestListener ( ) ; }  <METHOD_END>
<METHOD_START> @ Scope ( proxyMode = ScopedProxyMode . TARGET_CLASS ) @ Bean public org.springframework.statemachine.security.ActionSecurityTests.TestSecAction org.springframework.statemachine.security.ActionSecurityTests.TestSecAction ( ) { return new org.springframework.statemachine.security.ActionSecurityTests.TestSecAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Secured ( STRING ) @ java.lang.Override public void void ( StateContext < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.StateContext<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> ) { int ++ ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.State<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> , State < org.springframework.statemachine.security.ActionSecurityTests.States , org.springframework.statemachine.security.ActionSecurityTests.Events > org.springframework.statemachine.security.State<org.springframework.statemachine.security.ActionSecurityTests.States,org.springframework.statemachine.security.ActionSecurityTests.Events> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
