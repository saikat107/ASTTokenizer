<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , MqttPahoClientFactory org.springframework.integration.mqtt.outbound.MqttPahoClientFactory ) { super( java.lang.String , java.lang.String ); this . org.springframework.integration.mqtt.outbound.MqttPahoClientFactory = org.springframework.integration.mqtt.outbound.MqttPahoClientFactory ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , MqttPahoClientFactory org.springframework.integration.mqtt.outbound.MqttPahoClientFactory ) { super( null , java.lang.String ); this . org.springframework.integration.mqtt.outbound.MqttPahoClientFactory = org.springframework.integration.mqtt.outbound.MqttPahoClientFactory ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( java.lang.String , java.lang.String , new DefaultMqttPahoClientFactory ( ) ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.mqtt.outbound.ApplicationEventPublisher ) { this . org.springframework.integration.mqtt.outbound.ApplicationEventPublisher = org.springframework.integration.mqtt.outbound.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; Assert . state ( getConverter ( ) instanceof MqttMessageConverter , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { try { IMqttAsyncClient org.springframework.integration.mqtt.outbound.IMqttAsyncClient = this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient ; if ( org.springframework.integration.mqtt.outbound.IMqttAsyncClient != null ) { org.springframework.integration.mqtt.outbound.IMqttAsyncClient . disconnect ( ) . waitForCompletion ( this . int ) ; org.springframework.integration.mqtt.outbound.IMqttAsyncClient . close ( ) ; this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient = null ; } } catch ( MqttException org.springframework.integration.mqtt.outbound.MqttException ) { logger . error ( STRING , org.springframework.integration.mqtt.outbound.MqttException ) ; } }  <METHOD_END>
<METHOD_START> private synchronized org.springframework.integration.mqtt.outbound.IMqttAsyncClient org.springframework.integration.mqtt.outbound.IMqttAsyncClient ( ) org.springframework.integration.mqtt.outbound.MqttException { if ( this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient != null && ! this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient . isConnected ( ) ) { this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient . close ( ) ; this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient = null ; } if ( this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient == null ) { try { MqttConnectOptions org.springframework.integration.mqtt.outbound.MqttConnectOptions = this . org.springframework.integration.mqtt.outbound.MqttPahoClientFactory . getConnectionOptions ( ) ; Assert . state ( this . getUrl ( ) != null || org.springframework.integration.mqtt.outbound.MqttConnectOptions . getServerURIs ( ) != null , STRING ) ; IMqttAsyncClient org.springframework.integration.mqtt.outbound.IMqttAsyncClient = this . org.springframework.integration.mqtt.outbound.MqttPahoClientFactory . getAsyncClientInstance ( this . getUrl ( ) , this . getClientId ( ) ) ; incrementClientInstance ( ) ; org.springframework.integration.mqtt.outbound.IMqttAsyncClient . setCallback ( this ) ; org.springframework.integration.mqtt.outbound.IMqttAsyncClient . connect ( org.springframework.integration.mqtt.outbound.MqttConnectOptions ) . waitForCompletion ( this . int ) ; this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient = org.springframework.integration.mqtt.outbound.IMqttAsyncClient ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } catch ( MqttException org.springframework.integration.mqtt.outbound.MqttException ) { throw new MessagingException ( STRING , org.springframework.integration.mqtt.outbound.MqttException ) ; } } return this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.mqtt.outbound.Message<?> ) throws java.lang.Exception { Assert . isInstanceOf ( MqttMessage .class , java.lang.Object ) ; IMqttAsyncClient org.springframework.integration.mqtt.outbound.IMqttAsyncClient = org.springframework.integration.mqtt.outbound.IMqttAsyncClient ( ) ; IMqttDeliveryToken org.springframework.integration.mqtt.outbound.IMqttDeliveryToken = org.springframework.integration.mqtt.outbound.IMqttAsyncClient . publish ( java.lang.String , ( MqttMessage ) java.lang.Object ) ; if ( ! this . boolean ) { org.springframework.integration.mqtt.outbound.IMqttDeliveryToken . waitForCompletion ( this . int ) ; } else if ( this . boolean && this . org.springframework.integration.mqtt.outbound.ApplicationEventPublisher != null ) { this . org.springframework.integration.mqtt.outbound.ApplicationEventPublisher . publishEvent ( new MqttMessageSentEvent ( this , org.springframework.integration.mqtt.outbound.Message<> , java.lang.String , org.springframework.integration.mqtt.outbound.IMqttDeliveryToken . getMessageId ( ) , getClientId ( ) , getClientInstance ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( IMqttDeliveryToken org.springframework.integration.mqtt.outbound.IMqttDeliveryToken ) { if ( this . boolean && this . boolean && this . org.springframework.integration.mqtt.outbound.ApplicationEventPublisher != null ) { this . org.springframework.integration.mqtt.outbound.ApplicationEventPublisher . publishEvent ( new MqttMessageDeliveredEvent ( this , org.springframework.integration.mqtt.outbound.IMqttDeliveryToken . getMessageId ( ) , getClientId ( ) , getClientInstance ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING ) ; this . org.springframework.integration.mqtt.outbound.IMqttAsyncClient = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , MqttMessage org.springframework.integration.mqtt.outbound.MqttMessage ) throws java.lang.Exception {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IMqttDeliveryToken org.springframework.integration.mqtt.outbound.IMqttDeliveryToken ) { void ( org.springframework.integration.mqtt.outbound.IMqttDeliveryToken ) ; }  <METHOD_END>
