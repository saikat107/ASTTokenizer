<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { if ( ! boolean ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ) { return java.lang.String[] ; } try { AutoConfigurationMetadata org.springframework.boot.autoconfigure.AutoConfigurationMetadata = AutoConfigurationMetadataLoader . loadMetadata ( this . java.lang.ClassLoader ) ; AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes = org.springframework.boot.autoconfigure.AnnotationAttributes ( org.springframework.boot.autoconfigure.AnnotationMetadata ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.AnnotationMetadata , org.springframework.boot.autoconfigure.AnnotationAttributes ) ; java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> ) ; java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( org.springframework.boot.autoconfigure.AnnotationMetadata , org.springframework.boot.autoconfigure.AnnotationAttributes ) ; void ( java.util.List<java.lang.String> , java.util.Set<java.lang.String> ) ; java.util.List<java.lang.String> . boolean ( java.util.Set<java.lang.String> ) ; java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.util.List<java.lang.String> , org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) ; void ( java.util.List<java.lang.String> , java.util.Set<java.lang.String> ) ; return java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { return true ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.autoconfigure.AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata ) { java.lang.String java.lang.String = java.lang.Class<?> ( ) . java.lang.String ( ) ; AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.boot.autoconfigure.AnnotationMetadata . getAnnotationAttributes ( java.lang.String , true ) ) ; Assert . notNull ( org.springframework.boot.autoconfigure.AnnotationAttributes , STRING + org.springframework.boot.autoconfigure.AnnotationMetadata . getClassName ( ) + STRING + ClassUtils . getShortName ( java.lang.String ) + STRING ) ; return org.springframework.boot.autoconfigure.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return EnableAutoConfiguration .class ; }  <METHOD_END>
<METHOD_START> protected java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata , AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = SpringFactoriesLoader . loadFactoryNames ( java.lang.Class<?> ( ) , java.lang.ClassLoader ( ) ) ; Assert . notEmpty ( java.util.List<java.lang.String> , STRING + STRING ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return EnableAutoConfiguration .class ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.util.Set<java.lang.String> . int ( ) ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( ClassUtils . isPresent ( java.lang.String , java.lang.Class<? extends org.springframework.boot.autoconfigure.AutoConfigurationImportSelector> ( ) . java.lang.ClassLoader ( ) ) && ! java.util.List<java.lang.String> . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { void ( java.util.List<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( java.lang.String . java.lang.String ( STRING ) ) ; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.StringBuilder ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( AnnotationMetadata org.springframework.boot.autoconfigure.AnnotationMetadata , AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ( org.springframework.boot.autoconfigure.AnnotationAttributes , STRING ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( org.springframework.boot.autoconfigure.AnnotationAttributes . getStringArray ( STRING ) ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.List<java.lang.String> ( ) ) ; return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { if ( org.springframework.boot.autoconfigure.Environment ( ) instanceof ConfigurableEnvironment ) { RelaxedPropertyResolver org.springframework.boot.autoconfigure.RelaxedPropertyResolver = new RelaxedPropertyResolver ( this . org.springframework.boot.autoconfigure.Environment , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.autoconfigure.RelaxedPropertyResolver . getSubProperties ( STRING ) ; if ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.String . boolean ( ) || java.lang.String . boolean ( STRING ) && java.lang.Object != null ) { java.util.List<java.lang.String> . boolean ( new java.util.HashSet <> ( java.util.Arrays . java.util.List ( StringUtils . tokenizeToStringArray ( java.lang.String . java.lang.String ( java.lang.Object ) , STRING ) ) ) ) ; } } return java.util.List<java.lang.String> ; } RelaxedPropertyResolver org.springframework.boot.autoconfigure.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.Environment ( ) , STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.boot.autoconfigure.RelaxedPropertyResolver . getProperty ( STRING , java.lang.String [] .class ) ; return ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] == null ? new java.lang.String [ NUMBER ] : java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , AutoConfigurationMetadata org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) throws java.io.IOException { java.util.List<java.lang.String> = new AutoConfigurationSorter ( org.springframework.boot.autoconfigure.MetadataReaderFactory ( ) , org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) . getInPriorityOrder ( java.util.List<java.lang.String> ) ; return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , AutoConfigurationMetadata org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) { long long = java.lang.System . long ( ) ; java.lang.String [] java.lang.String[] = java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ; boolean [] boolean[] = new boolean [ java.lang.String[] . int ] ; boolean boolean = false ; for ( AutoConfigurationImportFilter org.springframework.boot.autoconfigure.AutoConfigurationImportFilter : java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> ( ) ) { void ( org.springframework.boot.autoconfigure.AutoConfigurationImportFilter ) ; boolean [] boolean[] = org.springframework.boot.autoconfigure.AutoConfigurationImportFilter . match ( java.lang.String[] , org.springframework.boot.autoconfigure.AutoConfigurationMetadata ) ; for ( int int = NUMBER ; int < boolean[] . int ; int ++ ) { if ( ! boolean[] [ int ] ) { boolean[] [ int ] = true ; boolean = true ; } } } if ( ! boolean ) { return java.util.List<java.lang.String> ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( java.lang.String[] . int ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( ! boolean[] [ int ] ) { java.util.List<java.lang.String> . boolean ( java.lang.String[] [ int ] ) ; } } if ( org.springframework.boot.autoconfigure.Log . isTraceEnabled ( ) ) { int int = java.util.List<java.lang.String> . int ( ) - java.util.List<java.lang.String> . int ( ) ; org.springframework.boot.autoconfigure.Log . trace ( STRING + int + STRING + java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( java.lang.System . long ( ) - long ) + STRING ) ; } return new java.util.ArrayList<java.lang.String> <> ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> < AutoConfigurationImportFilter > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportFilter> ( ) { return SpringFactoriesLoader . loadFactories ( AutoConfigurationImportFilter .class , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.MetadataReaderFactory org.springframework.boot.autoconfigure.MetadataReaderFactory ( ) { try { return org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ( ) . getBean ( SharedMetadataReaderFactoryContextInitializer . BEAN_NAME , MetadataReaderFactory .class ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.NoSuchBeanDefinitionException ) { return new CachingMetadataReaderFactory ( this . org.springframework.boot.autoconfigure.ResourceLoader ) ; } }  <METHOD_END>
<METHOD_START> protected final < T > java.util.List<T> < T > java.util.List<T> ( java.util.List<T> < T > java.util.List<T> ) { return new java.util.ArrayList<T> <> ( new java.util.LinkedHashSet<T> <> ( java.util.List<T> ) ) ; }  <METHOD_END>
<METHOD_START> protected final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( AnnotationAttributes org.springframework.boot.autoconfigure.AnnotationAttributes , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = org.springframework.boot.autoconfigure.AnnotationAttributes . getStringArray ( java.lang.String ) ; return java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] == null ? new java.lang.String [ NUMBER ] : java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> < AutoConfigurationImportListener > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> = java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> ( ) ; if ( ! java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> . isEmpty ( ) ) { AutoConfigurationImportEvent org.springframework.boot.autoconfigure.AutoConfigurationImportEvent = new AutoConfigurationImportEvent ( this , java.util.List<java.lang.String> , java.util.Set<java.lang.String> ) ; for ( AutoConfigurationImportListener org.springframework.boot.autoconfigure.AutoConfigurationImportListener : java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> ) { void ( org.springframework.boot.autoconfigure.AutoConfigurationImportListener ) ; org.springframework.boot.autoconfigure.AutoConfigurationImportListener . onAutoConfigurationImportEvent ( org.springframework.boot.autoconfigure.AutoConfigurationImportEvent ) ; } } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> < AutoConfigurationImportListener > java.util.List<org.springframework.boot.autoconfigure.AutoConfigurationImportListener> ( ) { return SpringFactoriesLoader . loadFactories ( AutoConfigurationImportListener .class , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Aware ) { if ( java.lang.Object instanceof BeanClassLoaderAware ) { ( ( BeanClassLoaderAware ) java.lang.Object ) . setBeanClassLoader ( this . java.lang.ClassLoader ) ; } if ( java.lang.Object instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) java.lang.Object ) . setBeanFactory ( this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ) ; } if ( java.lang.Object instanceof EnvironmentAware ) { ( ( EnvironmentAware ) java.lang.Object ) . setEnvironment ( this . org.springframework.boot.autoconfigure.Environment ) ; } if ( java.lang.Object instanceof ResourceLoaderAware ) { ( ( ResourceLoaderAware ) java.lang.Object ) . setResourceLoader ( this . org.springframework.boot.autoconfigure.ResourceLoader ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.boot.autoconfigure.BeanFactory ) throws org.springframework.boot.autoconfigure.BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory .class , org.springframework.boot.autoconfigure.BeanFactory ) ; this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.boot.autoconfigure.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ( ) { return this . org.springframework.boot.autoconfigure.ConfigurableListableBeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.autoconfigure.Environment ) { this . org.springframework.boot.autoconfigure.Environment = org.springframework.boot.autoconfigure.Environment ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.Environment org.springframework.boot.autoconfigure.Environment ( ) { return this . org.springframework.boot.autoconfigure.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.boot.autoconfigure.ResourceLoader ) { this . org.springframework.boot.autoconfigure.ResourceLoader = org.springframework.boot.autoconfigure.ResourceLoader ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.autoconfigure.ResourceLoader org.springframework.boot.autoconfigure.ResourceLoader ( ) { return this . org.springframework.boot.autoconfigure.ResourceLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return Ordered . LOWEST_PRECEDENCE - NUMBER ; }  <METHOD_END>
