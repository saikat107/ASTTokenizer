<METHOD_START> public void ( MethodParameter org.springframework.core.convert.MethodParameter ) { this . org.springframework.core.convert.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.convert.MethodParameter ) ; this . java.lang.Class<?> = this . org.springframework.core.convert.ResolvableType . resolve ( org.springframework.core.convert.MethodParameter . getParameterType ( ) ) ; this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter = new org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter ( org.springframework.core.convert.MethodParameter . getParameterIndex ( ) == - NUMBER ? org.springframework.core.convert.MethodParameter . getMethodAnnotations ( ) : org.springframework.core.convert.MethodParameter . getParameterAnnotations ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Field java.lang.reflect.Field ) { this . org.springframework.core.convert.ResolvableType = ResolvableType . forField ( java.lang.reflect.Field ) ; this . java.lang.Class<?> = this . org.springframework.core.convert.ResolvableType . resolve ( java.lang.reflect.Field . java.lang.Class<?> ( ) ) ; this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter = new org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter ( java.lang.reflect.Field . java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Property org.springframework.core.convert.Property ) { Assert . notNull ( org.springframework.core.convert.Property , STRING ) ; this . org.springframework.core.convert.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.core.convert.Property . getMethodParameter ( ) ) ; this . java.lang.Class<?> = this . org.springframework.core.convert.ResolvableType . resolve ( org.springframework.core.convert.Property . getType ( ) ) ; this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter = new org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter ( org.springframework.core.convert.Property . getAnnotations ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( ResolvableType org.springframework.core.convert.ResolvableType , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { this . org.springframework.core.convert.ResolvableType = org.springframework.core.convert.ResolvableType ; this . java.lang.Class<?> = ( java.lang.Class<> != null ? java.lang.Class<> : org.springframework.core.convert.ResolvableType . resolve ( java.lang.Object .class ) ) ; this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter = new org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter ( java.lang.annotation.Annotation[] ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ClassUtils . resolvePrimitiveIfNecessary ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.ResolvableType org.springframework.core.convert.ResolvableType ( ) { return this . org.springframework.core.convert.ResolvableType ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return ( this . org.springframework.core.convert.ResolvableType != null ? this . org.springframework.core.convert.ResolvableType . getSource ( ) : null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null ) { return this ; } ResolvableType org.springframework.core.convert.ResolvableType = ResolvableType . forType ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , org.springframework.core.convert.ResolvableType ( ) ) ; return new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.ResolvableType , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { return null ; } Assert . isAssignable ( java.lang.Class<> , java.lang.Class<?> ( ) ) ; return new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.ResolvableType ( ) . as ( java.lang.Class<> ) , java.lang.Class<> , java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ClassUtils . getQualifiedName ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter . java.lang.annotation.Annotation[] ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { if ( this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter . boolean ( ) ) { return false ; } return AnnotatedElementUtils . isAnnotated ( this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T extends java.lang.annotation.Annotation > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { if ( this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter . boolean ( ) ) { return null ; } return AnnotatedElementUtils . getMergedAnnotation ( this . org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { boolean boolean = org.springframework.core.convert.TypeDescriptor . java.lang.Class<?> ( ) . boolean ( java.lang.Class<?> ( ) ) ; if ( ! boolean ) { return false ; } if ( boolean ( ) && org.springframework.core.convert.TypeDescriptor . boolean ( ) ) { return org.springframework.core.convert.TypeDescriptor ( ) . boolean ( org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) ; } else if ( boolean ( ) && org.springframework.core.convert.TypeDescriptor . boolean ( ) ) { return boolean ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) ; } else if ( boolean ( ) && org.springframework.core.convert.TypeDescriptor . boolean ( ) ) { return boolean ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) && boolean ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { if ( org.springframework.core.convert.TypeDescriptor == null || org.springframework.core.convert.TypeDescriptor == null ) { return true ; } return org.springframework.core.convert.TypeDescriptor . boolean ( org.springframework.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Collection .class . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( ) { if ( org.springframework.core.convert.ResolvableType ( ) . isArray ( ) ) { return new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.ResolvableType ( ) . getComponentType ( ) , null , java.lang.annotation.Annotation[] ( ) ) ; } if ( java.util.stream.Stream .class . boolean ( java.lang.Class<?> ( ) ) ) { return org.springframework.core.convert.TypeDescriptor ( this , org.springframework.core.convert.ResolvableType ( ) . as ( java.util.stream.Stream .class ) . getGeneric ( NUMBER ) ) ; } return org.springframework.core.convert.TypeDescriptor ( this , org.springframework.core.convert.ResolvableType ( ) . asCollection ( ) . getGeneric ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object ) { return org.springframework.core.convert.TypeDescriptor ( java.lang.Object , org.springframework.core.convert.TypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.util.Map .class . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( ) { Assert . state ( boolean ( ) , STRING ) ; return org.springframework.core.convert.TypeDescriptor ( this , org.springframework.core.convert.ResolvableType ( ) . asMap ( ) . getGeneric ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object ) { return org.springframework.core.convert.TypeDescriptor ( java.lang.Object , org.springframework.core.convert.TypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( ) { Assert . state ( boolean ( ) , STRING ) ; return org.springframework.core.convert.TypeDescriptor ( this , org.springframework.core.convert.ResolvableType ( ) . asMap ( ) . getGeneric ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object ) { return org.springframework.core.convert.TypeDescriptor ( java.lang.Object , org.springframework.core.convert.TypeDescriptor ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object , org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { if ( org.springframework.core.convert.TypeDescriptor != null ) { return org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( java.lang.Object ) ; } if ( java.lang.Object != null ) { return org.springframework.core.convert.TypeDescriptor ( java.lang.Object ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.convert.TypeDescriptor ) ) { return false ; } org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor = ( org.springframework.core.convert.TypeDescriptor ) java.lang.Object ; if ( java.lang.Class<?> ( ) != org.springframework.core.convert.TypeDescriptor . java.lang.Class<?> ( ) ) { return false ; } if ( ! boolean ( org.springframework.core.convert.TypeDescriptor ) ) { return false ; } if ( boolean ( ) || boolean ( ) ) { return ObjectUtils . nullSafeEquals ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) ; } else if ( boolean ( ) ) { return ( ObjectUtils . nullSafeEquals ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) && ObjectUtils . nullSafeEquals ( org.springframework.core.convert.TypeDescriptor ( ) , org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.TypeDescriptor ( ) ) ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[] ( ) ; java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = org.springframework.core.convert.TypeDescriptor . java.lang.annotation.Annotation[] ( ) ; if ( java.lang.annotation.Annotation[] == java.lang.annotation.Annotation[] ) { return true ; } if ( java.lang.annotation.Annotation[] . int != java.lang.annotation.Annotation[] . int ) { return false ; } if ( java.lang.annotation.Annotation[] . int > NUMBER ) { for ( int int = NUMBER ; int < java.lang.annotation.Annotation[] . int ; int ++ ) { if ( ! boolean ( java.lang.annotation.Annotation[] [ int ] , java.lang.annotation.Annotation[] [ int ] ) ) { return false ; } } } return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.annotation.Annotation java.lang.annotation.Annotation , java.lang.annotation.Annotation java.lang.annotation.Annotation ) { return ( java.lang.annotation.Annotation == java.lang.annotation.Annotation || ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) == java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) && java.lang.annotation.Annotation . boolean ( java.lang.annotation.Annotation ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Class<?> ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) ) . java.lang.StringBuilder ( ' ' ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.core.convert.ResolvableType ( ) . toString ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Object java.lang.Object ) { return ( java.lang.Object != null ? org.springframework.core.convert.TypeDescriptor ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) : null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Object .class ; } org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor = java.util.Map<java.lang.Class<?>,org.springframework.core.convert.TypeDescriptor> . org.springframework.core.convert.TypeDescriptor ( java.lang.Class<> ) ; return ( org.springframework.core.convert.TypeDescriptor != null ? org.springframework.core.convert.TypeDescriptor : new org.springframework.core.convert.TypeDescriptor ( ResolvableType . forClass ( java.lang.Class<> ) , null , null ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( ! java.util.Collection .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } ResolvableType org.springframework.core.convert.ResolvableType = ( org.springframework.core.convert.TypeDescriptor != null ? org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.ResolvableType : null ) ; return new org.springframework.core.convert.TypeDescriptor ( ResolvableType . forClassWithGenerics ( java.lang.Class<> , org.springframework.core.convert.ResolvableType ) , null , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.Class<?> < ? > java.lang.Class<?> , org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { Assert . notNull ( java.lang.Class<> , STRING ) ; if ( ! java.util.Map .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } ResolvableType org.springframework.core.convert.ResolvableType = ( org.springframework.core.convert.TypeDescriptor != null ? org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.ResolvableType : null ) ; ResolvableType org.springframework.core.convert.ResolvableType = ( org.springframework.core.convert.TypeDescriptor != null ? org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.ResolvableType : null ) ; return new org.springframework.core.convert.TypeDescriptor ( ResolvableType . forClassWithGenerics ( java.lang.Class<> , org.springframework.core.convert.ResolvableType , org.springframework.core.convert.ResolvableType ) , null , null ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ) { if ( org.springframework.core.convert.TypeDescriptor == null ) { return null ; } return new org.springframework.core.convert.TypeDescriptor ( ResolvableType . forArrayComponent ( org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.ResolvableType ) , null , org.springframework.core.convert.TypeDescriptor . java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( MethodParameter org.springframework.core.convert.MethodParameter , int int ) { if ( org.springframework.core.convert.MethodParameter . getNestingLevel ( ) != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } return org.springframework.core.convert.TypeDescriptor ( new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.MethodParameter ) , int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( java.lang.reflect.Field java.lang.reflect.Field , int int ) { return org.springframework.core.convert.TypeDescriptor ( new org.springframework.core.convert.TypeDescriptor ( java.lang.reflect.Field ) , int ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( Property org.springframework.core.convert.Property , int int ) { return org.springframework.core.convert.TypeDescriptor ( new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.Property ) , int ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor , int int ) { ResolvableType org.springframework.core.convert.ResolvableType = org.springframework.core.convert.TypeDescriptor . org.springframework.core.convert.ResolvableType ; for ( int int = NUMBER ; int < int ; int ++ ) { if ( java.lang.Object .class == org.springframework.core.convert.ResolvableType . getType ( ) ) { } else { org.springframework.core.convert.ResolvableType = org.springframework.core.convert.ResolvableType . getNested ( NUMBER ) ; } } if ( org.springframework.core.convert.ResolvableType == ResolvableType . NONE ) { return null ; } return org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.TypeDescriptor , org.springframework.core.convert.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.TypeDescriptor org.springframework.core.convert.TypeDescriptor , ResolvableType org.springframework.core.convert.ResolvableType ) { if ( org.springframework.core.convert.ResolvableType . resolve ( ) == null ) { return null ; } return new org.springframework.core.convert.TypeDescriptor ( org.springframework.core.convert.ResolvableType , null , org.springframework.core.convert.TypeDescriptor . java.lang.annotation.Annotation[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ) { this . java.lang.annotation.Annotation[] = java.lang.annotation.Annotation[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( ) ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) == java.lang.Class<> ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T extends java.lang.annotation.Annotation > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ( ) ) { if ( java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) == java.lang.Class<T> ) { return ( T ) java.lang.annotation.Annotation ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return ( this . java.lang.annotation.Annotation[] != null ? this . java.lang.annotation.Annotation[] : java.lang.annotation.Annotation[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] ( ) { return java.lang.annotation.Annotation[] ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ObjectUtils . isEmpty ( this . java.lang.annotation.Annotation[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter && java.util.Arrays . boolean ( this . java.lang.annotation.Annotation[] , ( ( org.springframework.core.convert.TypeDescriptor.AnnotatedElementAdapter ) java.lang.Object ) . java.lang.annotation.Annotation[] ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.Arrays . int ( this . java.lang.annotation.Annotation[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.core.convert.TypeDescriptor .this . java.lang.String ( ) ; }  <METHOD_END>
