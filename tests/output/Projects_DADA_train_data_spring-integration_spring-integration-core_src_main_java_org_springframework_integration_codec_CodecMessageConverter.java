<METHOD_START> public void ( Codec org.springframework.integration.codec.Codec ) { this . org.springframework.integration.codec.Codec = org.springframework.integration.codec.Codec ; this . java.lang.Class<?> = GenericMessage .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.codec.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { try { return this . org.springframework.integration.codec.Codec . encode ( org.springframework.integration.codec.Message<> ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( org.springframework.integration.codec.Message<> , STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.codec.Message<?> < ? > org.springframework.integration.codec.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.codec.MessageHeaders ) { Assert . isInstanceOf ( byte [] .class , java.lang.Object ) ; try { Message < ? > org.springframework.integration.codec.Message<?> = ( Message < ? > ) this . org.springframework.integration.codec.Codec . decode ( ( byte [] ) java.lang.Object , this . java.lang.Class<> ) ; if ( org.springframework.integration.codec.MessageHeaders != null ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.codec.AbstractIntegrationMessageBuilder<?> = getMessageBuilderFactory ( ) . fromMessage ( org.springframework.integration.codec.Message<> ) ; org.springframework.integration.codec.AbstractIntegrationMessageBuilder<> . copyHeaders ( org.springframework.integration.codec.MessageHeaders ) ; return org.springframework.integration.codec.AbstractIntegrationMessageBuilder<> . build ( ) ; } else { return org.springframework.integration.codec.Message<> ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
