<METHOD_START> public void void ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> < ServerWebExchange > java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> ) { Assert . notNull ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> , STRING ) ; this . java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> = this . java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> != null ? this . java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> . andThen ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> ) : java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> < ServerWebExchange > java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.ServerWebExchange> ) { this . java.util.Map<java.lang.String,java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange>> . compute ( java.lang.String , ( s , value ) -> value != null ? value . andThen ( mutator ) : mutator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.test.web.reactive.server.Mono<java.lang.Void> ( ServerWebExchange org.springframework.test.web.reactive.server.ServerWebExchange , WebFilterChain org.springframework.test.web.reactive.server.WebFilterChain ) { if ( this . java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> != null ) { org.springframework.test.web.reactive.server.ServerWebExchange = this . java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> . apply ( org.springframework.test.web.reactive.server.ServerWebExchange ) ; } java.lang.String java.lang.String = WiretapConnector . getRequestId ( org.springframework.test.web.reactive.server.ServerWebExchange . getRequest ( ) . getHeaders ( ) ) ; java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> < ServerWebExchange , ServerWebExchange > java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> = this . java.util.Map<java.lang.String,java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange>> . remove ( java.lang.String ) ; if ( java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> != null ) { org.springframework.test.web.reactive.server.ServerWebExchange = java.util.function.Function<org.springframework.test.web.reactive.server.ServerWebExchange,org.springframework.test.web.reactive.server.ServerWebExchange> . apply ( org.springframework.test.web.reactive.server.ServerWebExchange ) ; } return org.springframework.test.web.reactive.server.WebFilterChain . filter ( org.springframework.test.web.reactive.server.ServerWebExchange ) ; }  <METHOD_END>
