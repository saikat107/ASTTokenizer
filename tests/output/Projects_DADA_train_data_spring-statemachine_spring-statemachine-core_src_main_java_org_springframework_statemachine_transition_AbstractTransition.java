<METHOD_START> public void ( State < S , E > org.springframework.statemachine.transition.State<S,E> , State < S , E > org.springframework.statemachine.transition.State<S,E> , java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> , E E , TransitionKind org.springframework.statemachine.transition.TransitionKind , Guard < S , E > org.springframework.statemachine.transition.Guard<S,E> , Trigger < S , E > org.springframework.statemachine.transition.Trigger<S,E> ) { this( org.springframework.statemachine.transition.State<S,E> , org.springframework.statemachine.transition.State<S,E> , java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> , E , org.springframework.statemachine.transition.TransitionKind , org.springframework.statemachine.transition.Guard<S,E> , org.springframework.statemachine.transition.Trigger<S,E> , null ); }  <METHOD_END>
<METHOD_START> public void ( State < S , E > org.springframework.statemachine.transition.State<S,E> , State < S , E > org.springframework.statemachine.transition.State<S,E> , java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> , E E , TransitionKind org.springframework.statemachine.transition.TransitionKind , Guard < S , E > org.springframework.statemachine.transition.Guard<S,E> , Trigger < S , E > org.springframework.statemachine.transition.Trigger<S,E> , SecurityRule org.springframework.statemachine.transition.SecurityRule ) { Assert . notNull ( org.springframework.statemachine.transition.TransitionKind , STRING ) ; this . org.springframework.statemachine.transition.State<S,E> = org.springframework.statemachine.transition.State<S,E> ; this . org.springframework.statemachine.transition.State<S,E> = org.springframework.statemachine.transition.State<S,E> ; this . java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> = java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> ; this . org.springframework.statemachine.transition.TransitionKind = org.springframework.statemachine.transition.TransitionKind ; this . org.springframework.statemachine.transition.Guard<S,E> = org.springframework.statemachine.transition.Guard<S,E> ; this . org.springframework.statemachine.transition.Trigger<S,E> = org.springframework.statemachine.transition.Trigger<S,E> ; this . org.springframework.statemachine.transition.SecurityRule = org.springframework.statemachine.transition.SecurityRule ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.transition.State<S,E> < S , E > org.springframework.statemachine.transition.State<S,E> ( ) { return org.springframework.statemachine.transition.State<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.transition.Trigger<S,E> < S , E > org.springframework.statemachine.transition.Trigger<S,E> ( ) { return org.springframework.statemachine.transition.Trigger<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( StateContext < S , E > org.springframework.statemachine.transition.StateContext<S,E> ) { if ( org.springframework.statemachine.transition.Guard<S,E> != null ) { try { if ( ! org.springframework.statemachine.transition.Guard<S,E> . evaluate ( org.springframework.statemachine.transition.StateContext<S,E> ) ) { return false ; } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.transition.Log . warn ( STRING , java.lang.Throwable ) ; return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.transition.TransitionKind org.springframework.statemachine.transition.TransitionKind ( ) { return org.springframework.statemachine.transition.TransitionKind ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.transition.SecurityRule org.springframework.statemachine.transition.SecurityRule ( ) { return org.springframework.statemachine.transition.SecurityRule ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.transition.State<S,E> < S , E > org.springframework.statemachine.transition.State<S,E> ( ) { return org.springframework.statemachine.transition.State<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> < Action < S , E > > java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> ( ) { return java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ActionListener < S , E > org.springframework.statemachine.transition.ActionListener<S,E> ) { synchronized ( this ) { if ( this . org.springframework.statemachine.transition.CompositeActionListener<S,E> == null ) { this . org.springframework.statemachine.transition.CompositeActionListener<S,E> = new CompositeActionListener <> ( ) ; } this . org.springframework.statemachine.transition.CompositeActionListener<S,E> . register ( org.springframework.statemachine.transition.ActionListener<S,E> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ActionListener < S , E > org.springframework.statemachine.transition.ActionListener<S,E> ) { synchronized ( this ) { if ( this . org.springframework.statemachine.transition.CompositeActionListener<S,E> != null ) { this . org.springframework.statemachine.transition.CompositeActionListener<S,E> . unregister ( org.springframework.statemachine.transition.ActionListener<S,E> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( StateContext < S , E > org.springframework.statemachine.transition.StateContext<S,E> ) { if ( java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> == null ) { return; } for ( Action < S , E > org.springframework.statemachine.transition.Action<S,E> : java.util.Collection<org.springframework.statemachine.transition.Action<S,E>> ) { long long = java.lang.System . long ( ) ; org.springframework.statemachine.transition.Action<S,E> . execute ( org.springframework.statemachine.transition.StateContext<S,E> ) ; if ( this . org.springframework.statemachine.transition.CompositeActionListener<S,E> != null ) { this . org.springframework.statemachine.transition.CompositeActionListener<S,E> . onExecute ( org.springframework.statemachine.transition.StateContext<S,E> . getStateMachine ( ) , org.springframework.statemachine.transition.Action<S,E> , java.lang.System . long ( ) - long ) ; } } }  <METHOD_END>
