<METHOD_START> @ java.lang.Override public org.springframework.data.solr.repository.config.SolrClientFactory org.springframework.data.solr.repository.config.SolrClientFactory ( ) { return server ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.solr.repository.config.CustomConversions org.springframework.data.solr.repository.config.CustomConversions ( ) { CustomConversions org.springframework.data.solr.repository.config.CustomConversions = org.springframework.data.solr.repository.config.CustomConversions ; return org.springframework.data.solr.repository.config.CustomConversions ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.data.solr.repository.config.BeansException , java.lang.IllegalArgumentException , java.lang.Exception { SimpleSolrRepository org.springframework.data.solr.repository.config.SimpleSolrRepository = ( SimpleSolrRepository ) ( ( org . springframework . org.springframework.aop . org.springframework.aop . org.springframework.aop ) new org . springframework . org.springframework.beans . org.springframework.beans ( java.lang.reflect.Proxy . java.lang.reflect.InvocationHandler ( org.springframework.data.solr.repository.config.EnableSolrRepositoriesWithPredefinedConvertersUnitTests.ProductRepository ) ) . getPropertyValue ( STRING ) ) . getTargetSource ( ) . getTarget ( ) ; assertThat ( ( ( MappingSolrConverter ) ( ( SolrTemplate ) org.springframework.data.solr.repository.config.SimpleSolrRepository . getSolrOperations ( ) ) . getConverter ( ) ) . getCustomConversions ( ) , sameInstance ( org.springframework.data.solr.repository.config.CustomConversions ) ) ; }  <METHOD_END>
