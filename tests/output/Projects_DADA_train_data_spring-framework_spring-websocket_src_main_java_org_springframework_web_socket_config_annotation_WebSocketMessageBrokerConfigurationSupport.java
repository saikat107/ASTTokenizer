<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.config.annotation.SimpAnnotationMethodMessageHandler org.springframework.web.socket.config.annotation.SimpAnnotationMethodMessageHandler ( ) { return new WebSocketAnnotationMethodMessageHandler ( clientInboundChannel ( ) , clientOutboundChannel ( ) , brokerMessagingTemplate ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.config.annotation.SimpUserRegistry org.springframework.web.socket.config.annotation.SimpUserRegistry ( ) { return new DefaultSimpUserRegistry ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.HandlerMapping org.springframework.web.socket.config.annotation.HandlerMapping ( ) { WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandler ( org.springframework.web.socket.config.annotation.WebSocketHandler ( ) ) ; WebMvcStompEndpointRegistry org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry = new WebMvcStompEndpointRegistry ( org.springframework.web.socket.config.annotation.WebSocketHandler , org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ( ) , messageBrokerTaskScheduler ( ) ) ; org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry . setApplicationContext ( getApplicationContext ( ) ) ; void ( org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry ) ; return org.springframework.web.socket.config.annotation.WebMvcStompEndpointRegistry . getHandlerMapping ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ( ) { return new SubProtocolWebSocketHandler ( clientInboundChannel ( ) , clientOutboundChannel ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.config.annotation.WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ( WebSocketHandler org.springframework.web.socket.config.annotation.WebSocketHandler ) { for ( WebSocketHandlerDecoratorFactory org.springframework.web.socket.config.annotation.WebSocketHandlerDecoratorFactory : org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ( ) . getDecoratorFactories ( ) ) { org.springframework.web.socket.config.annotation.WebSocketHandler = org.springframework.web.socket.config.annotation.WebSocketHandlerDecoratorFactory . decorate ( org.springframework.web.socket.config.annotation.WebSocketHandler ) ; } return org.springframework.web.socket.config.annotation.WebSocketHandler ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.socket.config.annotation.WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ( ) { if ( this . org.springframework.web.socket.config.annotation.WebSocketTransportRegistration == null ) { this . org.springframework.web.socket.config.annotation.WebSocketTransportRegistration = new WebSocketTransportRegistration ( ) ; void ( this . org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) ; } return this . org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ; }  <METHOD_END>
<METHOD_START> protected void void ( WebSocketTransportRegistration org.springframework.web.socket.config.annotation.WebSocketTransportRegistration ) {	}  <METHOD_END>
<METHOD_START> protected abstract void void ( StompEndpointRegistry org.springframework.web.socket.config.annotation.StompEndpointRegistry );  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.web.socket.config.annotation.CustomScopeConfigurer org.springframework.web.socket.config.annotation.CustomScopeConfigurer ( ) { CustomScopeConfigurer org.springframework.web.socket.config.annotation.CustomScopeConfigurer = new CustomScopeConfigurer ( ) ; org.springframework.web.socket.config.annotation.CustomScopeConfigurer . addScope ( STRING , new SimpSessionScope ( ) ) ; return org.springframework.web.socket.config.annotation.CustomScopeConfigurer ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats ( ) { AbstractBrokerMessageHandler org.springframework.web.socket.config.annotation.AbstractBrokerMessageHandler = stompBrokerRelayMessageHandler ( ) ; StompBrokerRelayMessageHandler org.springframework.web.socket.config.annotation.StompBrokerRelayMessageHandler = ( org.springframework.web.socket.config.annotation.AbstractBrokerMessageHandler instanceof StompBrokerRelayMessageHandler ? ( StompBrokerRelayMessageHandler ) org.springframework.web.socket.config.annotation.AbstractBrokerMessageHandler : null ) ; org.springframework.web.socket.config.annotation.HandlerMapping ( ) ; WebSocketMessageBrokerStats org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats = new WebSocketMessageBrokerStats ( ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . setSubProtocolWebSocketHandler ( ( SubProtocolWebSocketHandler ) org.springframework.web.socket.config.annotation.WebSocketHandler ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . setStompBrokerRelay ( org.springframework.web.socket.config.annotation.StompBrokerRelayMessageHandler ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . setInboundChannelExecutor ( clientInboundChannelExecutor ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . setOutboundChannelExecutor ( clientOutboundChannelExecutor ( ) ) ; org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats . setSockJsTaskScheduler ( messageBrokerTaskScheduler ( ) ) ; return org.springframework.web.socket.config.annotation.WebSocketMessageBrokerStats ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.socket.config.annotation.MappingJackson2MessageConverter org.springframework.web.socket.config.annotation.MappingJackson2MessageConverter ( ) { MappingJackson2MessageConverter org.springframework.web.socket.config.annotation.MappingJackson2MessageConverter = super. createJacksonConverter ( ) ; org.springframework.web.socket.config.annotation.MappingJackson2MessageConverter . setObjectMapper ( Jackson2ObjectMapperBuilder . json ( ) . applicationContext ( this . getApplicationContext ( ) ) . build ( ) ) ; return org.springframework.web.socket.config.annotation.MappingJackson2MessageConverter ; }  <METHOD_END>
