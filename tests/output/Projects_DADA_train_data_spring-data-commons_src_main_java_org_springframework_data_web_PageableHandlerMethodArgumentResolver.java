<METHOD_START> public void ( ) { this( ( SortArgumentResolver ) null ); }  <METHOD_END>
<METHOD_START> public void ( SortHandlerMethodArgumentResolver org.springframework.data.web.SortHandlerMethodArgumentResolver ) { this( ( SortArgumentResolver ) org.springframework.data.web.SortHandlerMethodArgumentResolver ); }  <METHOD_END>
<METHOD_START> public void ( SortArgumentResolver org.springframework.data.web.SortArgumentResolver ) { this . org.springframework.data.web.SortArgumentResolver = org.springframework.data.web.SortArgumentResolver == null ? org.springframework.data.web.SortHandlerMethodArgumentResolver : org.springframework.data.web.SortArgumentResolver ; }  <METHOD_END>
<METHOD_START> public void void ( Pageable org.springframework.data.web.Pageable ) { Assert . notNull ( org.springframework.data.web.Pageable , STRING ) ; this . org.springframework.data.web.Pageable = org.springframework.data.web.Pageable ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Pageable org.springframework.data.web.Pageable ) { return org.springframework.data.web.Pageable == null ? false : org.springframework.data.web.Pageable . equals ( org.springframework.data.web.Pageable ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String == null ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String == null ? java.lang.String : java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.data.web.MethodParameter ) { return Pageable .class . boolean ( org.springframework.data.web.MethodParameter . getParameterType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.Pageable org.springframework.data.web.Pageable ( MethodParameter org.springframework.data.web.MethodParameter , ModelAndViewContainer org.springframework.data.web.ModelAndViewContainer , NativeWebRequest org.springframework.data.web.NativeWebRequest , WebDataBinderFactory org.springframework.data.web.WebDataBinderFactory ) { assertPageableUniqueness ( org.springframework.data.web.MethodParameter ) ; java.util.Optional<org.springframework.data.web.Pageable> < Pageable > java.util.Optional<org.springframework.data.web.Pageable> = org.springframework.data.web.Pageable ( org.springframework.data.web.MethodParameter ) . toOptional ( ) ; java.lang.String java.lang.String = org.springframework.data.web.NativeWebRequest . getParameter ( java.lang.String ( java.lang.String , org.springframework.data.web.MethodParameter ) ) ; java.lang.String java.lang.String = org.springframework.data.web.NativeWebRequest . getParameter ( java.lang.String ( java.lang.String , org.springframework.data.web.MethodParameter ) ) ; java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> = java.util.Optional<java.lang.Integer> ( java.lang.String , java.lang.Integer . int , true ) ; java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> = java.util.Optional<java.lang.Integer> ( java.lang.String , int , false ) ; if ( ! ( java.util.Optional<java.lang.Integer> . boolean ( ) && java.util.Optional<java.lang.Integer> . boolean ( ) ) && ! java.util.Optional<org.springframework.data.web.Pageable> . isPresent ( ) ) { return null ; } int int = java.util.Optional<java.lang.Integer> . java.lang.Integer ( ( ) java.util.Optional<org.springframework.data.web.Pageable> . map ( Pageable :: getPageNumber ) . orElseThrow ( java.lang.IllegalStateException ::new ) ) ; int int = java.util.Optional<java.lang.Integer> . java.lang.Integer ( ( ) java.util.Optional<org.springframework.data.web.Pageable> . map ( Pageable :: getPageSize ) . orElseThrow ( java.lang.IllegalStateException ::new ) ) ; int = int < NUMBER ? java.util.Optional<org.springframework.data.web.Pageable> . map ( Pageable :: getPageSize ) . orElseThrow ( java.lang.IllegalStateException ::new ) : int ; int = int > int ? int : int ; Sort org.springframework.data.web.Sort = org.springframework.data.web.SortArgumentResolver . resolveArgument ( org.springframework.data.web.MethodParameter , org.springframework.data.web.ModelAndViewContainer , org.springframework.data.web.NativeWebRequest , org.springframework.data.web.WebDataBinderFactory ) ; return PageRequest . of ( int , int , org.springframework.data.web.Sort . isSorted ( ) ? org.springframework.data.web.Sort : java.util.Optional<org.springframework.data.web.Pageable> . map ( Pageable :: getSort ) . orElseGet ( Sort :: unsorted ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String , MethodParameter org.springframework.data.web.MethodParameter ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; if ( org.springframework.data.web.MethodParameter != null && org.springframework.data.web.MethodParameter . hasParameterAnnotation ( Qualifier .class ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.data.web.MethodParameter . getParameterAnnotation ( Qualifier .class ) . value ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.web.Pageable org.springframework.data.web.Pageable ( MethodParameter org.springframework.data.web.MethodParameter ) { if ( org.springframework.data.web.MethodParameter . hasParameterAnnotation ( PageableDefault .class ) ) { return org.springframework.data.web.Pageable ( org.springframework.data.web.MethodParameter ) ; } return org.springframework.data.web.Pageable ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.Pageable org.springframework.data.web.Pageable ( MethodParameter org.springframework.data.web.MethodParameter ) { PageableDefault org.springframework.data.web.PageableDefault = org.springframework.data.web.MethodParameter . getParameterAnnotation ( PageableDefault .class ) ; java.lang.Integer java.lang.Integer = org.springframework.data.web.PageableDefault . page ( ) ; java.lang.Integer java.lang.Integer = getSpecificPropertyOrDefaultFromValue ( org.springframework.data.web.PageableDefault , STRING ) ; if ( java.lang.Integer < NUMBER ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.web.MethodParameter . getMethod ( ) ; throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.reflect.Method ) ) ; } if ( org.springframework.data.web.PageableDefault . sort ( ) . length == NUMBER ) { return PageRequest . of ( java.lang.Integer , java.lang.Integer ) ; } return PageRequest . of ( java.lang.Integer , java.lang.Integer , org.springframework.data.web.PageableDefault . direction ( ) , org.springframework.data.web.PageableDefault . sort ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Integer> < java.lang.Integer > java.util.Optional<java.lang.Integer> ( java.lang.String java.lang.String , int int , boolean boolean ) { if ( ! StringUtils . hasText ( java.lang.String ) ) { return java.util.Optional . java.util.Optional<java.lang.Integer> ( ) ; } try { int int = java.lang.Integer . int ( java.lang.String ) - ( boolean && boolean ? NUMBER : NUMBER ) ; return java.util.Optional . java.util.Optional<java.lang.Integer> ( int < NUMBER ? NUMBER : int > int ? int : int ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { return java.util.Optional . java.util.Optional<java.lang.Integer> ( NUMBER ) ; } }  <METHOD_END>
