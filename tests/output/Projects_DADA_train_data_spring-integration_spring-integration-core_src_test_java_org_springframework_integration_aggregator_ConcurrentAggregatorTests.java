<METHOD_START> @ Before public void void ( ) { this . org.springframework.integration.aggregator.TaskExecutor = new SimpleAsyncTaskExecutor ( ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler = new AggregatingMessageHandler ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.MultiplyingProcessor ( ) , this . org.springframework.integration.aggregator.MessageGroupStore ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new SimpleSequenceSizeReleaseStrategy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( java.util.concurrent.CountDownLatch . long ( ) , is ( NUMBER ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( org.springframework.integration.aggregator.Message<> . getPayload ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , STRING ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , STRING ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) . void ( ) ; new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) . void ( ) ; new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) . void ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<> ) ; assertEquals ( STRING , org.springframework.integration.aggregator.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask = new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNull ( STRING , org.springframework.integration.aggregator.Message<> ) ; this . org.springframework.integration.aggregator.MessageGroupStore . expireMessageGroups ( - NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( STRING , org.springframework.integration.aggregator.Message<> ) ; assertEquals ( org.springframework.integration.aggregator.Message<> , org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.aggregator.AggregatingMessageHandler . setSendPartialResultOnExpiry ( true ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask = new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ; org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask = new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( STRING , NUMBER , java.util.concurrent.CountDownLatch . long ( ) ) ; this . org.springframework.integration.aggregator.MessageGroupStore . expireMessageGroups ( - NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( STRING , org.springframework.integration.aggregator.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.Message<> . getPayload ( ) ) ; assertNull ( org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask . java.lang.Exception ( ) ) ; assertNull ( org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask . java.lang.Exception ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.lang.Integer > org.springframework.integration.aggregator.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<java.lang.Integer> ) ; assertThat ( org.springframework.integration.aggregator.Message<java.lang.Integer> . getPayload ( ) , is ( NUMBER ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.lang.Integer > org.springframework.integration.aggregator.Message<java.lang.Integer> = ( Message < java.lang.Integer > ) org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.aggregator.Message<java.lang.Integer> ) ; assertThat ( org.springframework.integration.aggregator.Message<java.lang.Integer> . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . setDiscardChannel ( org.springframework.integration.aggregator.QueueChannel ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<?> ( NUMBER , NUMBER , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertNull ( org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageHandlingException .class ) public void void ( ) java.lang.InterruptedException { Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , null , NUMBER , NUMBER , new QueueChannel ( ) , null ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { QueueChannel org.springframework.integration.aggregator.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( NUMBER , STRING , NUMBER , NUMBER , org.springframework.integration.aggregator.QueueChannel , null ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.aggregator.AggregatingMessageHandler . setReleaseStrategy ( new SequenceSizeReleaseStrategy ( ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; this . org.springframework.integration.aggregator.TaskExecutor . execute ( new org.springframework.integration.aggregator.ConcurrentAggregatorTests.AggregatorTestTask ( this . org.springframework.integration.aggregator.AggregatingMessageHandler , org.springframework.integration.aggregator.Message<> , java.util.concurrent.CountDownLatch ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.QueueChannel . receive ( NUMBER ) ; assertNotNull ( STRING , org.springframework.integration.aggregator.Message<> ) ; assertThat ( org.springframework.integration.aggregator.Message<> . getPayload ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.aggregator.Message<?> < ? > org.springframework.integration.aggregator.Message<?> ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , int int , int int , MessageChannel org.springframework.integration.aggregator.MessageChannel , java.lang.String java.lang.String ) { MessageBuilder < java.lang.Object > org.springframework.integration.aggregator.MessageBuilder<java.lang.Object> = MessageBuilder . withPayload ( java.lang.Object ) . setCorrelationId ( java.lang.Object ) . setSequenceSize ( int ) . setSequenceNumber ( int ) . setReplyChannel ( org.springframework.integration.aggregator.MessageChannel ) ; if ( java.lang.String != null ) { org.springframework.integration.aggregator.MessageBuilder<java.lang.Object> . setHeader ( MessageHeaders . ID , java.lang.String ) ; } return org.springframework.integration.aggregator.MessageBuilder<java.lang.Object> . build ( ) ; }  <METHOD_END>
<METHOD_START> void ( MessageHandler org.springframework.integration.aggregator.MessageHandler , Message < ? > org.springframework.integration.aggregator.Message<?> , java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch ) { this . org.springframework.integration.aggregator.MessageHandler = org.springframework.integration.aggregator.MessageHandler ; this . org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<> ; this . java.util.concurrent.CountDownLatch = java.util.concurrent.CountDownLatch ; }  <METHOD_END>
<METHOD_START> public java.lang.Exception java.lang.Exception ( ) { return this . java.lang.Exception ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { this . org.springframework.integration.aggregator.MessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { this . java.lang.Exception = java.lang.Exception ; } finally { this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { java.lang.Integer java.lang.Integer = NUMBER ; for ( Message < ? > org.springframework.integration.aggregator.Message<?> : org.springframework.integration.aggregator.MessageGroup . getMessages ( ) ) { java.lang.Integer *= ( java.lang.Integer ) org.springframework.integration.aggregator.Message<> . getPayload ( ) ; } return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MessageGroup org.springframework.integration.aggregator.MessageGroup ) { return null ; }  <METHOD_END>
