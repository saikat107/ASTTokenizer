<METHOD_START> public void ( IntegrationWebSocketContainer org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer ) { this( org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer , new SubProtocolHandlerRegistry ( new PassThruSubProtocolHandler ( ) ) ); }  <METHOD_END>
<METHOD_START> public void ( IntegrationWebSocketContainer org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer , SubProtocolHandlerRegistry org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry ) { Assert . notNull ( org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer , STRING ) ; Assert . notNull ( org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry , STRING ) ; this . org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer = org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer ; this . boolean = org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer instanceof ClientWebSocketContainer ; this . org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry = org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry . getSubProtocols ( ) ; this . org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer . addSupportedProtocols ( java.util.List<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.List<java.lang.String> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> < MessageConverter > java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> ) { Assert . noNullElements ( java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . toArray ( ) , STRING ) ; this . java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> = new java.util.ArrayList<org.springframework.integration.websocket.outbound.MessageConverter> < MessageConverter > ( java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> ) ) { java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> < MessageConverter > java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> = this . org.springframework.integration.websocket.outbound.CompositeMessageConverter . getConverters ( ) ; if ( this . boolean ) { java.util.ListIterator<org.springframework.integration.websocket.outbound.MessageConverter> < MessageConverter > java.util.ListIterator<org.springframework.integration.websocket.outbound.MessageConverter> = this . java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . listIterator ( this . java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . size ( ) ) ; while ( java.util.ListIterator<org.springframework.integration.websocket.outbound.MessageConverter> . hasPrevious ( ) ) { MessageConverter org.springframework.integration.websocket.outbound.MessageConverter = java.util.ListIterator<org.springframework.integration.websocket.outbound.MessageConverter> . previous ( ) ; java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . add ( NUMBER , org.springframework.integration.websocket.outbound.MessageConverter ) ; } } else { java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . clear ( ) ; java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> . addAll ( this . java.util.List<org.springframework.integration.websocket.outbound.MessageConverter> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.websocket.outbound.Message<?> ) throws java.lang.Exception { java.lang.String java.lang.String = null ; if ( ! this . boolean ) { java.lang.String = this . org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry . resolveSessionId ( org.springframework.integration.websocket.outbound.Message<> ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } } WebSocketSession org.springframework.integration.websocket.outbound.WebSocketSession = this . org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer . getSession ( java.lang.String ) ; try { SimpMessageHeaderAccessor org.springframework.integration.websocket.outbound.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . wrap ( org.springframework.integration.websocket.outbound.Message<> ) ; org.springframework.integration.websocket.outbound.SimpMessageHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.integration.websocket.outbound.SimpMessageHeaderAccessor . setMessageTypeIfNotSet ( SimpMessageType . MESSAGE ) ; Message < ? > org.springframework.integration.websocket.outbound.Message<?> = this . org.springframework.integration.websocket.outbound.CompositeMessageConverter . toMessage ( org.springframework.integration.websocket.outbound.Message<> . getPayload ( ) , org.springframework.integration.websocket.outbound.SimpMessageHeaderAccessor . getMessageHeaders ( ) ) ; this . org.springframework.integration.websocket.outbound.SubProtocolHandlerRegistry . findProtocolHandler ( org.springframework.integration.websocket.outbound.WebSocketSession ) . handleMessageToClient ( org.springframework.integration.websocket.outbound.WebSocketSession , org.springframework.integration.websocket.outbound.Message<> ) ; } catch ( SessionLimitExceededException org.springframework.integration.websocket.outbound.SessionLimitExceededException ) { try { logger . error ( STRING + java.lang.String + STRING , org.springframework.integration.websocket.outbound.SessionLimitExceededException ) ; this . org.springframework.integration.websocket.outbound.IntegrationWebSocketContainer . closeSession ( org.springframework.integration.websocket.outbound.WebSocketSession , org.springframework.integration.websocket.outbound.SessionLimitExceededException . getStatus ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING + java.lang.String + STRING , java.lang.Exception ) ; } } }  <METHOD_END>
