<METHOD_START> @ Factory public static org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> < Message < ? > > org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( Message < ? > org.springframework.integration.json.Message<?> ) { return new MessageMatcher ( org.springframework.integration.json.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; org.springframework.integration.json.JsonInboundMessageMapper . setMapToPayload ( true ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertEquals ( java.lang.String , org.springframework.integration.json.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; Message < TestBean > org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> = MessageBuilder . withPayload ( org.springframework.integration.json.TestBean ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( TestBean .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<org.springframework.integration.json.TestBean> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.integration.json.TestBean ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( TestBean .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; org.springframework.integration.json.JsonInboundMessageMapper . setMapToPayload ( true ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertEquals ( org.springframework.integration.json.TestBean , org.springframework.integration.json.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , org.springframework.integration.json.TestBean ) . build ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , TestBean .class ) ; org.springframework.integration.json.JsonInboundMessageMapper . setHeaderTypes ( java.util.Map<java.lang.String,java.lang.Class<?>> ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + STRING ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; Message < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.json.Message<java.util.List<java.lang.String>> = MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.reflect.Type java.lang.reflect.Type = new ParameterizedTypeReference < java.util.List<java.lang.String> < java.lang.String > > ( ) {		} . getType ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.reflect.Type , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<java.util.List<java.lang.String>> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; java.util.List<org.springframework.integration.json.TestBean> < TestBean > java.util.List<org.springframework.integration.json.TestBean> = java.util.Arrays . java.util.List ( org.springframework.integration.json.TestBean , org.springframework.integration.json.TestBean ) ; Message < java.util.List<org.springframework.integration.json.TestBean> < TestBean > > org.springframework.integration.json.Message<java.util.List<org.springframework.integration.json.TestBean>> = MessageBuilder . withPayload ( java.util.List<org.springframework.integration.json.TestBean> ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; java.lang.reflect.Type java.lang.reflect.Type = new ParameterizedTypeReference < java.util.List<org.springframework.integration.json.TestBean> < TestBean > > ( ) {		} . getType ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.reflect.Type , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<java.util.List<org.springframework.integration.json.TestBean>> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING ; Message < java.lang.String > org.springframework.integration.json.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertThat ( org.springframework.integration.json.Message<> , org.springframework.integration.json.Matcher<org.springframework.integration.json.Message<?>> ( org.springframework.integration.json.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; try { org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; try { org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; org.springframework.integration.json.JsonInboundMessageMapper . setMapToPayload ( true ) ; try { org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( TestBean .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; org.springframework.integration.json.JsonInboundMessageMapper . setMapToPayload ( true ) ; Message < ? > org.springframework.integration.json.Message<?> = org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; assertEquals ( org.springframework.integration.json.TestBean , org.springframework.integration.json.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.Long .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; try { org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.integration.json.TestBean = new TestBean ( ) ; java.util.UUID java.util.UUID = java.util.UUID . java.util.UUID ( ) ; java.lang.String java.lang.String = STRING + java.util.UUID + STRING + java.lang.String ( org.springframework.integration.json.TestBean ) + STRING ; JsonInboundMessageMapper org.springframework.integration.json.JsonInboundMessageMapper = new JsonInboundMessageMapper ( java.lang.String .class , org.springframework.integration.json.JsonMessageParser<?> ( ) ) ; java.util.Map<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > java.util.Map<java.lang.String,java.lang.Class<?>> = new java.util.HashMap<java.lang.String,java.lang.Class<?>> < java.lang.String , java.lang.Class<?> < ? > > ( ) ; java.util.Map<java.lang.String,java.lang.Class<?>> . java.lang.Class<?> ( STRING , java.lang.Long .class ) ; org.springframework.integration.json.JsonInboundMessageMapper . setHeaderTypes ( java.util.Map<java.lang.String,java.lang.Class<?>> ) ; try { org.springframework.integration.json.JsonInboundMessageMapper . toMessage ( java.lang.String ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( TestBean org.springframework.integration.json.TestBean ) throws java.lang.Exception { return this . org.springframework.integration.json.JsonObjectMapper<,> . toJson ( org.springframework.integration.json.TestBean ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.json.JsonMessageParser<?> < ? > org.springframework.integration.json.JsonMessageParser<?> ( )  <METHOD_END>
