<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( MessageChannel org.springframework.integration.endpoint.MessageChannel , MessageHandler org.springframework.integration.endpoint.MessageHandler ) { this( org.springframework.integration.endpoint.MessageChannel , org.springframework.integration.endpoint.MessageHandler instanceof Subscriber ? ( Subscriber < Message < ? > > ) org.springframework.integration.endpoint.MessageHandler : new org.springframework.integration.endpoint.ReactiveConsumer.MessageHandlerSubscriber ( org.springframework.integration.endpoint.MessageHandler ) ); }  <METHOD_END>
<METHOD_START> public void ( MessageChannel org.springframework.integration.endpoint.MessageChannel , final Subscriber < Message < ? > > org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> ) { Assert . notNull ( org.springframework.integration.endpoint.MessageChannel , STRING ) ; Assert . notNull ( org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> , STRING ) ; this . org.springframework.integration.endpoint.Publisher<org.springframework.integration.endpoint.Message<java.lang.Object>> = MessageChannelReactiveUtils . toPublisher ( org.springframework.integration.endpoint.MessageChannel ) ; this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> = org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> ; this . org.springframework.integration.endpoint.Lifecycle = org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> instanceof Lifecycle ? ( Lifecycle ) org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> : null ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.integration.endpoint.ErrorHandler ) { this . org.springframework.integration.endpoint.ErrorHandler = org.springframework.integration.endpoint.ErrorHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.endpoint.ErrorHandler == null ) { Assert . notNull ( getBeanFactory ( ) , STRING ) ; this . org.springframework.integration.endpoint.ErrorHandler = new MessagePublishingErrorHandler ( new BeanFactoryChannelResolver ( getBeanFactory ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.endpoint.Lifecycle != null ) { this . org.springframework.integration.endpoint.Lifecycle . start ( ) ; } this . org.springframework.integration.endpoint.Publisher<org.springframework.integration.endpoint.Message<java.lang.Object>> . subscribe ( new BaseSubscriber < Message < ? > > ( ) { private final org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> < Message < ? > > org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> = org.springframework.integration.endpoint.ReactiveConsumer .this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> ; public void void ( Subscription org.springframework.integration.endpoint.Subscription ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onSubscribe ( org.springframework.integration.endpoint.Subscription ) ; org.springframework.integration.endpoint.ReactiveConsumer .this . org.springframework.integration.endpoint.Subscription = org.springframework.integration.endpoint.Subscription ; } public void void ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { try { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onNext ( org.springframework.integration.endpoint.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.endpoint.ReactiveConsumer .this . org.springframework.integration.endpoint.ErrorHandler . handleError ( java.lang.Exception ) ; void ( java.lang.Exception ) ; } } public void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onError ( java.lang.Throwable ) ; } public void void ( ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onComplete ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> public void void ( Subscription org.springframework.integration.endpoint.Subscription ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onSubscribe ( org.springframework.integration.endpoint.Subscription ) ; org.springframework.integration.endpoint.ReactiveConsumer .this . org.springframework.integration.endpoint.Subscription = org.springframework.integration.endpoint.Subscription ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { try { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onNext ( org.springframework.integration.endpoint.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.endpoint.ReactiveConsumer .this . org.springframework.integration.endpoint.ErrorHandler . handleError ( java.lang.Exception ) ; void ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Throwable java.lang.Throwable ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onError ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.integration.endpoint.Subscriber<org.springframework.integration.endpoint.Message<?>> . onComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.endpoint.Subscription != null ) { this . org.springframework.integration.endpoint.Subscription . cancel ( ) ; } if ( this . org.springframework.integration.endpoint.Lifecycle != null ) { this . org.springframework.integration.endpoint.Lifecycle . stop ( ) ; } }  <METHOD_END>
<METHOD_START> void ( MessageHandler org.springframework.integration.endpoint.MessageHandler ) { Assert . notNull ( org.springframework.integration.endpoint.MessageHandler , STRING ) ; this . org.springframework.integration.endpoint.MessageHandler = org.springframework.integration.endpoint.MessageHandler ; this . java.util.function.Consumer<org.springframework.integration.endpoint.Message<?>> = this . org.springframework.integration.endpoint.MessageHandler :: handleMessage ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Subscription org.springframework.integration.endpoint.Subscription ) { this . org.springframework.integration.endpoint.Subscription = org.springframework.integration.endpoint.Subscription ; org.springframework.integration.endpoint.Subscription . request ( java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.endpoint.Message<?> ) { this . java.util.function.Consumer<org.springframework.integration.endpoint.Message<?>> . accept ( org.springframework.integration.endpoint.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable == null ) { throw Exceptions . argumentIsNullException ( ) ; } void ( ) ; Operators . onErrorDropped ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.endpoint.Subscription != null ) { this . org.springframework.integration.endpoint.Subscription = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Subscription org.springframework.integration.endpoint.Subscription = this . org.springframework.integration.endpoint.Subscription ; if ( org.springframework.integration.endpoint.Subscription != null ) { this . org.springframework.integration.endpoint.Subscription = null ; org.springframework.integration.endpoint.Subscription . cancel ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.endpoint.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageHandler ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.endpoint.MessageHandler instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageHandler ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.endpoint.MessageHandler instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.endpoint.MessageHandler ) . isRunning ( ) ; }  <METHOD_END>
