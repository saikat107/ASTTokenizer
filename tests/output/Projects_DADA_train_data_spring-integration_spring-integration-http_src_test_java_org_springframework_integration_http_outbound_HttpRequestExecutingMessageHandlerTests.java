<METHOD_START> public static org.springframework.integration.http.outbound.ParameterizedTypeReference<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > org.springframework.integration.http.outbound.ParameterizedTypeReference<java.util.List<java.lang.String>> ( ) { return new ParameterizedTypeReference < java.util.List<java.lang.String> < java.lang.String > > ( ) {		} ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.String> ) . build ( ) ; QueueChannel org.springframework.integration.http.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setOutputChannel ( org.springframework.integration.http.outbound.QueueChannel ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertNotNull ( org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . iterator ( ) . next ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . iterator ( ) . next ( ) ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; QueueChannel org.springframework.integration.http.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setOutputChannel ( org.springframework.integration.http.outbound.QueueChannel ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . get ( NUMBER ) . toString ( ) ) ; assertEquals ( MediaType . MULTIPART_FORM_DATA , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( NUMBER , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( NUMBER , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( NUMBER , new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.Object,java.lang.Object> ) . build ( ) ; QueueChannel org.springframework.integration.http.outbound.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setOutputChannel ( org.springframework.integration.http.outbound.QueueChannel ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof java.util.Map<?,?> < ? , ? > ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; assertEquals ( STRING , java.util.Map<,> . get ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.Map<,> . get ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) . getType ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new int [] { NUMBER , NUMBER , NUMBER } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.lang.Object java.lang.Object = java.util.List<> . get ( NUMBER ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) ; int [] int[] = ( int [] ) java.lang.Object ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; assertEquals ( NUMBER , int[] [ NUMBER ] ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . MULTIPART_FORM_DATA , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.Object [] { null , NUMBER , null } ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . MULTIPART_FORM_DATA , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( null ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( null ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( null ) ; java.util.List<java.lang.Object> . boolean ( NUMBER ) ; java.util.List<java.lang.Object> . boolean ( null ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; assertEquals ( NUMBER , java.util.List<> . get ( NUMBER ) ) ; assertNull ( java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . MULTIPART_FORM_DATA , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.String> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections . java.util.List ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.List<java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections . java.util.List ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Collections . java.util.List<org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City> ( new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.City ( STRING ) ) ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) . java.lang.String ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( MediaType . MULTIPART_FORM_DATA , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , null ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , null ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof MultiValueMap < ? , ? > ) ; MultiValueMap < ? , ? > org.springframework.integration.http.outbound.MultiValueMap<?,?> = ( MultiValueMap < ? , ? > ) java.lang.Object ; assertTrue ( org.springframework.integration.http.outbound.MultiValueMap<,> . containsKey ( STRING ) ) ; assertTrue ( org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . size ( ) == NUMBER ) ; assertNull ( org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . get ( NUMBER ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) ; assertEquals ( STRING , java.util.List<> . get ( NUMBER ) ) ; assertTrue ( org.springframework.integration.http.outbound.MultiValueMap<,> . containsKey ( STRING ) ) ; assertTrue ( org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . size ( ) == NUMBER ) ; assertNull ( org.springframework.integration.http.outbound.MultiValueMap<,> . get ( STRING ) . get ( NUMBER ) ) ; assertEquals ( MediaType . APPLICATION_FORM_URLENCODED , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; byte [] byte[] = STRING . byte[] ( ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( byte[] ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof byte [] ) ; assertEquals ( STRING , new java.lang.String ( byte[] ) ) ; assertEquals ( MediaType . APPLICATION_OCTET_STREAM , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( mock ( javax.xml.transform.Source .class ) ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> = org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.outbound.HttpEntity<> . getBody ( ) ; assertTrue ( java.lang.Object instanceof javax.xml.transform.Source ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.outbound.HttpEntity<> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . GET ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setExtractPayload ( true ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . GET ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . POST ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setExtractPayload ( true ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; new DirectFieldAccessor ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) . setPropertyValue ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . GET ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( mock ( javax.xml.transform.Source .class ) ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) . getHeaders ( ) . getContentType ( ) ) ; } org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . HEAD ) ; org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( mock ( javax.xml.transform.Source .class ) ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) . getHeaders ( ) . getContentType ( ) ) ; } org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . DELETE ) ; org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( mock ( javax.xml.transform.Source .class ) ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) . getHeaders ( ) . getContentType ( ) ) ; } org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . TRACE ) ; org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( mock ( javax.xml.transform.Source .class ) ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; assertNull ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . get ( ) . getHeaders ( ) . getContentType ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.net.URISyntaxException { ConfigurableApplicationContext org.springframework.integration.http.outbound.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests> ( ) ) ; MessageChannel org.springframework.integration.http.outbound.MessageChannel = org.springframework.integration.http.outbound.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; RestTemplate org.springframework.integration.http.outbound.RestTemplate = org.springframework.integration.http.outbound.ConfigurableApplicationContext . getBean ( STRING , RestTemplate .class ) ; org.springframework.integration.http.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; Mockito . verify ( org.springframework.integration.http.outbound.RestTemplate ) . exchange ( Mockito . eq ( new java.net.URI ( STRING ) ) , Mockito . eq ( HttpMethod . POST ) , Mockito . any ( HttpEntity .class ) , Mockito .< java.lang.Class<java.lang.Object> < java.lang.Object > > eq ( null ) ) ; org.springframework.integration.http.outbound.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , java.net.URISyntaxException { ConfigurableApplicationContext org.springframework.integration.http.outbound.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests> ( ) ) ; MessageChannel org.springframework.integration.http.outbound.MessageChannel = org.springframework.integration.http.outbound.ConfigurableApplicationContext . getBean ( STRING , MessageChannel .class ) ; RestTemplate org.springframework.integration.http.outbound.RestTemplate = org.springframework.integration.http.outbound.ConfigurableApplicationContext . getBean ( STRING , RestTemplate .class ) ; org.springframework.integration.http.outbound.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; PollableChannel org.springframework.integration.http.outbound.PollableChannel = org.springframework.integration.http.outbound.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = org.springframework.integration.http.outbound.PollableChannel . receive ( ) ; assertEquals ( HttpStatus . OK , ( ( ResponseEntity < ? > ) org.springframework.integration.http.outbound.Message<> . getPayload ( ) ) . getStatusCode ( ) ) ; Mockito . verify ( org.springframework.integration.http.outbound.RestTemplate ) . exchange ( Mockito . eq ( new java.net.URI ( STRING ) ) , Mockito . eq ( HttpMethod . POST ) , Mockito . any ( HttpEntity .class ) , Mockito . eq ( new ParameterizedTypeReference < java.util.List<java.lang.String> < java.lang.String > > ( ) {				} ) ) ; org.springframework.integration.http.outbound.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( new SpelExpressionParser ( ) . parseExpression ( STRING ) , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , java.lang.String ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleRequestMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} assertEquals ( java.lang.String , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate = new org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ( ) ; HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( new SpelExpressionParser ( ) . parseExpression ( STRING ) , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setEncodeUri ( false ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleRequestMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) {		} assertEquals ( STRING , org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.MockRestTemplate . java.util.concurrent.atomic.AtomicReference<java.lang.String> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . GET ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setExpectedResponseType ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandlerTests.Foo .class ) ; java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.outbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> . add ( new SerializingHttpMessageConverter ( ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setMessageConverters ( java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; RestTemplate org.springframework.integration.http.outbound.RestTemplate = TestUtils . getPropertyValue ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler , STRING , RestTemplate .class ) ; HttpHeaders org.springframework.integration.http.outbound.HttpHeaders = org.springframework.integration.http.outbound.HttpHeaders ( org.springframework.integration.http.outbound.RestTemplate ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertTrue ( org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) != null ) ; assertTrue ( org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) . size ( ) > NUMBER ) ; assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; java.util.List<org.springframework.integration.http.outbound.MediaType> < MediaType > java.util.List<org.springframework.integration.http.outbound.MediaType> = org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) ; assertTrue ( java.util.List<org.springframework.integration.http.outbound.MediaType> != null && java.util.List<org.springframework.integration.http.outbound.MediaType> . size ( ) > NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.http.outbound.MediaType> . get ( NUMBER ) . getType ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.http.outbound.MediaType> . get ( NUMBER ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler = new HttpRequestExecutingMessageHandler ( STRING ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setHttpMethod ( HttpMethod . GET ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setExtractPayload ( false ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setExpectedResponseType ( GenericMessage .class ) ; java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.outbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( ) ; java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> . add ( new SerializingHttpMessageConverter ( ) ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setMessageConverters ( java.util.List<org.springframework.integration.http.outbound.HttpMessageConverter<?>> ) ; void ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) ; org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . afterPropertiesSet ( ) ; RestTemplate org.springframework.integration.http.outbound.RestTemplate = TestUtils . getPropertyValue ( org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler , STRING , RestTemplate .class ) ; HttpHeaders org.springframework.integration.http.outbound.HttpHeaders = org.springframework.integration.http.outbound.HttpHeaders ( org.springframework.integration.http.outbound.RestTemplate ) ; Message < ? > org.springframework.integration.http.outbound.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; java.lang.Exception java.lang.Exception = null ; try { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . handleMessage ( org.springframework.integration.http.outbound.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception = java.lang.Exception ; } assertTrue ( org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) != null ) ; assertTrue ( org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) . size ( ) > NUMBER ) ; assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; java.util.List<org.springframework.integration.http.outbound.MediaType> < MediaType > java.util.List<org.springframework.integration.http.outbound.MediaType> = org.springframework.integration.http.outbound.HttpHeaders . getAccept ( ) ; assertTrue ( java.util.List<org.springframework.integration.http.outbound.MediaType> != null && java.util.List<org.springframework.integration.http.outbound.MediaType> . size ( ) > NUMBER ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.http.outbound.MediaType> . get ( NUMBER ) . getType ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.http.outbound.MediaType> . get ( NUMBER ) . getSubtype ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpRequestExecutingMessageHandler org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler ) { org.springframework.integration.http.outbound.HttpRequestExecutingMessageHandler . setBeanFactory ( mock ( BeanFactory .class ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.outbound.HttpHeaders org.springframework.integration.http.outbound.HttpHeaders ( RestTemplate org.springframework.integration.http.outbound.RestTemplate ) throws java.io.IOException { HttpHeaders org.springframework.integration.http.outbound.HttpHeaders = new HttpHeaders ( ) ; ClientHttpRequestFactory org.springframework.integration.http.outbound.ClientHttpRequestFactory = mock ( ClientHttpRequestFactory .class ) ; ClientHttpRequest org.springframework.integration.http.outbound.ClientHttpRequest = mock ( ClientHttpRequest .class ) ; when ( org.springframework.integration.http.outbound.ClientHttpRequest . getHeaders ( ) ) . thenReturn ( org.springframework.integration.http.outbound.HttpHeaders ) ; when ( org.springframework.integration.http.outbound.ClientHttpRequestFactory . createRequest ( any ( java.net.URI .class ) , any ( HttpMethod .class ) ) ) . thenReturn ( org.springframework.integration.http.outbound.ClientHttpRequest ) ; ClientHttpResponse org.springframework.integration.http.outbound.ClientHttpResponse = mock ( ClientHttpResponse .class ) ; when ( org.springframework.integration.http.outbound.ClientHttpResponse . getStatusCode ( ) ) . thenReturn ( HttpStatus . NOT_FOUND ) ; when ( org.springframework.integration.http.outbound.ClientHttpResponse . getStatusText ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.http.outbound.ClientHttpResponse . getBody ( ) ) . thenReturn ( new java.io.ByteArrayInputStream ( new byte [ NUMBER ] ) ) ; HttpHeaders org.springframework.integration.http.outbound.HttpHeaders = new HttpHeaders ( ) ; when ( org.springframework.integration.http.outbound.ClientHttpResponse . getHeaders ( ) ) . thenReturn ( org.springframework.integration.http.outbound.HttpHeaders ) ; when ( org.springframework.integration.http.outbound.ClientHttpRequest . execute ( ) ) . thenReturn ( org.springframework.integration.http.outbound.ClientHttpResponse ) ; org.springframework.integration.http.outbound.RestTemplate . setRequestFactory ( org.springframework.integration.http.outbound.ClientHttpRequestFactory ) ; return org.springframework.integration.http.outbound.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.integration.http.outbound.ResponseEntity<T> < T > org.springframework.integration.http.outbound.ResponseEntity<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod , HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.integration.http.outbound.RestClientException { this . java.util.concurrent.atomic.AtomicReference<java.lang.String> . void ( java.net.URI . java.lang.String ( ) ) ; this . java.util.concurrent.atomic.AtomicReference<org.springframework.integration.http.outbound.HttpEntity<?>> . set ( org.springframework.integration.http.outbound.HttpEntity<> ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.integration.http.outbound.ResponseEntity<T> < T > org.springframework.integration.http.outbound.ResponseEntity<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod , HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.integration.http.outbound.RestClientException { return new ResponseEntity < T > ( HttpStatus . OK ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.integration.http.outbound.ResponseEntity<T> < T > org.springframework.integration.http.outbound.ResponseEntity<T> ( java.net.URI java.net.URI , HttpMethod org.springframework.integration.http.outbound.HttpMethod , HttpEntity < ? > org.springframework.integration.http.outbound.HttpEntity<?> , ParameterizedTypeReference < T > org.springframework.integration.http.outbound.ParameterizedTypeReference<T> ) throws org.springframework.integration.http.outbound.RestClientException { return new ResponseEntity < T > ( HttpStatus . OK ) ; }  <METHOD_END>
