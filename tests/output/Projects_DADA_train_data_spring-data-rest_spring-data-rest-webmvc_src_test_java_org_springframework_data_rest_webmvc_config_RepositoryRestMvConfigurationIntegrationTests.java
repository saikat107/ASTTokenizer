<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.data.rest.webmvc.config.AbstractApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.ExtendingConfiguration .class ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { if ( org.springframework.data.rest.webmvc.config.AbstractApplicationContext != null ) { org.springframework.data.rest.webmvc.config.AbstractApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( LinkDiscoverers .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( PageableHandlerMethodArgumentResolver .class ) ; org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING , HttpMessageConverter .class ) ; ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING , ObjectMapper .class ) ; org.springframework.data.rest.webmvc.config.ObjectMapper . writeValueAsString ( new RepositoryLinksResource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HateoasPageableHandlerMethodArgumentResolver org.springframework.data.rest.webmvc.config.HateoasPageableHandlerMethodArgumentResolver = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( HateoasPageableHandlerMethodArgumentResolver .class ) ; UriComponentsBuilder org.springframework.data.rest.webmvc.config.UriComponentsBuilder = UriComponentsBuilder . newInstance ( ) ; org.springframework.data.rest.webmvc.config.HateoasPageableHandlerMethodArgumentResolver . enhance ( org.springframework.data.rest.webmvc.config.UriComponentsBuilder , null , PageRequest . of ( NUMBER , NUMBER , Direction . ASC , STRING ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.rest.webmvc.config.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.data.rest.webmvc.config.UriComponentsBuilder . build ( ) . getQueryParams ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.MultiValueMap<java.lang.String,java.lang.String> . containsKey ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.config.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) . get ( NUMBER ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample = new org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample ( ) ; org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample . java.util.Date = new java.util.Date ( ) ; ObjectMapper org.springframework.data.rest.webmvc.config.ObjectMapper = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING , ObjectMapper .class ) ; DateFormatter org.springframework.data.rest.webmvc.config.DateFormatter = new DateFormatter ( ) ; org.springframework.data.rest.webmvc.config.DateFormatter . setPattern ( STRING ) ; org.springframework.data.rest.webmvc.config.DateFormatter . setTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; java.lang.Object java.lang.Object = JsonPath . read ( org.springframework.data.rest.webmvc.config.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample ) , STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.lang.String .class ) ; assertThat ( java.lang.Object ) . isEqualTo ( org.springframework.data.rest.webmvc.config.DateFormatter . print ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.Sample . java.util.Date , java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NoSuchBeanDefinitionException .class ) public void void ( ) { org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( PersistentEntityJackson2Module .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.rest.webmvc.config.MappingJackson2HttpMessageConverter> < MappingJackson2HttpMessageConverter > java.util.Collection<org.springframework.data.rest.webmvc.config.MappingJackson2HttpMessageConverter> = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBeansOfType ( MappingJackson2HttpMessageConverter .class ) . values ( ) ; java.util.Collection<org.springframework.data.rest.webmvc.config.MappingJackson2HttpMessageConverter> . forEach ( converter -> { assertThat ( converter ) . isInstanceOfAny ( TypeConstrainedMappingJackson2HttpMessageConverter .class , AlpsJsonHttpMessageConverter .class ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent .class ) ; java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> = org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent . java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> . get ( NUMBER ) . getSupportedMediaTypes ( ) ) . contains ( MediaTypes . HAL_JSON ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> . get ( NUMBER ) . getSupportedMediaTypes ( ) ) . contains ( RestMediaTypes . SCHEMA_JSON ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.data.rest.webmvc.config.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.NonHalConfiguration .class ) ; org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent = org.springframework.data.rest.webmvc.config.AnnotationConfigApplicationContext . getBean ( org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent .class ) ; org.springframework.data.rest.webmvc.config.AnnotationConfigApplicationContext . close ( ) ; java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> = org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent . java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> . get ( NUMBER ) . getSupportedMediaTypes ( ) ) . contains ( RestMediaTypes . SCHEMA_JSON ) ; assertThat ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> . get ( NUMBER ) . getSupportedMediaTypes ( ) ) . contains ( MediaTypes . HAL_JSON ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConversionService org.springframework.data.rest.webmvc.config.ConversionService = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING , ConversionService .class ) ; assertThat ( org.springframework.data.rest.webmvc.config.ConversionService . canConvert ( java.lang.String .class , Point .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.ConversionService . canConvert ( Point .class , java.lang.String .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.ConversionService . canConvert ( java.lang.String .class , Distance .class ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.config.ConversionService . canConvert ( Distance .class , java.lang.String .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageSourceAccessor org.springframework.data.rest.webmvc.config.MessageSourceAccessor = org.springframework.data.rest.webmvc.config.AbstractApplicationContext . getBean ( STRING , MessageSourceAccessor .class ) ; java.lang.Object java.lang.Object = ReflectionTestUtils . getField ( org.springframework.data.rest.webmvc.config.MessageSourceAccessor , STRING ) ; assertThat ( ( java.lang.String ) ReflectionTestUtils . getField ( java.lang.Object , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.rest.webmvc.config.DefaultRelProvider org.springframework.data.rest.webmvc.config.DefaultRelProvider ( ) { return new DefaultRelProvider ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent ( ) { return new org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . setDefaultPageSize ( NUMBER ) ; org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . setMaxPageSize ( NUMBER ) ; org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . setPageParamName ( STRING ) ; org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . setLimitParamName ( STRING ) ; org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . setSortParamName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent ( ) { return new org.springframework.data.rest.webmvc.config.RepositoryRestMvConfigurationIntegrationTests.CollectingComponent ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RepositoryRestConfiguration org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration ) { org.springframework.data.rest.webmvc.config.RepositoryRestConfiguration . useHalAsDefaultJsonMediaType ( false ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ) { this . java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> = java.util.List<org.springframework.data.rest.webmvc.config.HttpMessageConverter<?>> ; }  <METHOD_END>
