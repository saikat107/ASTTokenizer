<METHOD_START> @ Test public void void ( ) { MultipartConfigFactory org.springframework.boot.web.servlet.MultipartConfigFactory = new MultipartConfigFactory ( ) ; MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.MultipartConfigFactory . createMultipartConfig ( ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getLocation ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxFileSize ( ) ) . isEqualTo ( - NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxRequestSize ( ) ) . isEqualTo ( - NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getFileSizeThreshold ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultipartConfigFactory org.springframework.boot.web.servlet.MultipartConfigFactory = new MultipartConfigFactory ( ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setLocation ( STRING ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setMaxFileSize ( NUMBER ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setMaxRequestSize ( NUMBER ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setFileSizeThreshold ( NUMBER ) ; MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.MultipartConfigFactory . createMultipartConfig ( ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getLocation ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxFileSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxRequestSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getFileSizeThreshold ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultipartConfigFactory org.springframework.boot.web.servlet.MultipartConfigFactory = new MultipartConfigFactory ( ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setMaxFileSize ( STRING ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setMaxRequestSize ( STRING ) ; org.springframework.boot.web.servlet.MultipartConfigFactory . setFileSizeThreshold ( STRING ) ; MultipartConfigElement org.springframework.boot.web.servlet.MultipartConfigElement = org.springframework.boot.web.servlet.MultipartConfigFactory . createMultipartConfig ( ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxFileSize ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getMaxRequestSize ( ) ) . isEqualTo ( NUMBER * NUMBER ) ; assertThat ( org.springframework.boot.web.servlet.MultipartConfigElement . getFileSizeThreshold ( ) ) . isEqualTo ( NUMBER * NUMBER * NUMBER ) ; }  <METHOD_END>
