<METHOD_START> protected void ( ) { super( MediaType . APPLICATION_XML , MediaType . TEXT_XML , new MediaType ( STRING , STRING ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpInputMessage org.springframework.http.converter.xml.HttpInputMessage ) throws java.io.IOException { return T ( java.lang.Class<> , org.springframework.http.converter.xml.HttpInputMessage . getHeaders ( ) , new javax.xml.transform.stream.StreamSource ( org.springframework.http.converter.xml.HttpInputMessage . getBody ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( T T , HttpOutputMessage org.springframework.http.converter.xml.HttpOutputMessage ) throws java.io.IOException { void ( T , org.springframework.http.converter.xml.HttpOutputMessage . getHeaders ( ) , new javax.xml.transform.stream.StreamResult ( org.springframework.http.converter.xml.HttpOutputMessage . getBody ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( javax.xml.transform.Source javax.xml.transform.Source , javax.xml.transform.Result javax.xml.transform.Result ) throws javax.xml.transform.TransformerException { this . javax.xml.transform.TransformerFactory . javax.xml.transform.Transformer ( ) . void ( javax.xml.transform.Source , javax.xml.transform.Result ) ; }  <METHOD_END>
<METHOD_START> protected abstract T T ( java.lang.Class<? extends T> < ? extends T > java.lang.Class<? extends T> , HttpHeaders org.springframework.http.converter.xml.HttpHeaders , javax.xml.transform.Source javax.xml.transform.Source )			throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( T T , HttpHeaders org.springframework.http.converter.xml.HttpHeaders , javax.xml.transform.Result javax.xml.transform.Result )			throws java.io.IOException ;  <METHOD_END>
