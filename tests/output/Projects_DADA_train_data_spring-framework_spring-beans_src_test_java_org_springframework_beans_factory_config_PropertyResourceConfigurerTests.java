<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; { org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; } { org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; } org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getAge ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setBeanNameSeparator ( STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getAge ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.IndexedTestBean . getMap ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( org.springframework.beans.factory.config.PropertyResourceConfigurerTests.PropertiesHolder .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer ; org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; org.springframework.beans.factory.config.PropertyResourceConfigurerTests.PropertiesHolder org.springframework.beans.factory.config.PropertyResourceConfigurerTests.PropertiesHolder = ( org.springframework.beans.factory.config.PropertyResourceConfigurerTests.PropertiesHolder ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.PropertyResourceConfigurerTests.PropertiesHolder . java.util.Properties ( ) . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setLocation ( org.springframework.beans.factory.config.Resource ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getAge ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setLocations ( org.springframework.beans.factory.config.Resource , org.springframework.beans.factory.config.Resource ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setIgnoreResourceNotFound ( true ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getAge ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setLocation ( org.springframework.beans.factory.config.Resource ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getAge ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = BeanDefinitionBuilder . genericBeanDefinition ( IndexedTestBean .class ) . getBeanDefinition ( ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.BeanDefinition ) ; org.springframework.beans.factory.config.PropertyResourceConfigurerTests.ConvertingOverrideConfigurer org.springframework.beans.factory.config.PropertyResourceConfigurerTests.ConvertingOverrideConfigurer = new org.springframework.beans.factory.config.PropertyResourceConfigurerTests.ConvertingOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyResourceConfigurerTests.ConvertingOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyResourceConfigurerTests.ConvertingOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; IndexedTestBean org.springframework.beans.factory.config.IndexedTestBean = ( IndexedTestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.IndexedTestBean . getArray ( ) [ NUMBER ] . getName ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.beans.factory.config.IndexedTestBean . getList ( ) . get ( NUMBER ) ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; { PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setIgnoreInvalidKeys ( true ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; assertEquals ( STRING , org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) . getName ( ) ) ; } { PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setOrder ( NUMBER ) ; try { org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; } catch ( BeanInitializationException org.springframework.beans.factory.config.BeanInitializationException ) { assertTrue ( org.springframework.beans.factory.config.BeanInitializationException . getMessage ( ) . toLowerCase ( ) . contains ( STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; { PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setOrder ( NUMBER ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; } { PropertyOverrideConfigurer org.springframework.beans.factory.config.PropertyOverrideConfigurer = new PropertyOverrideConfigurer ( ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setIgnoreInvalidKeys ( true ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyOverrideConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; } TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) { java.util.Map java.util.Map = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; if ( boolean ) { MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , java.util.Map ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; ChildBeanDefinition org.springframework.beans.factory.config.ChildBeanDefinition = new ChildBeanDefinition ( STRING , org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.ChildBeanDefinition ) ; } else { MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , new RuntimeBeanReference ( STRING ) ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , java.util.Map ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; } ConstructorArgumentValues org.springframework.beans.factory.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , STRING ) ; org.springframework.beans.factory.config.ConstructorArgumentValues . addGenericArgumentValue ( STRING ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , new java.lang.String [] { STRING , STRING } ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new ManagedList <> ( ) ; java.util.List<java.lang.Object> . boolean ( STRING ) ; java.util.List<java.lang.Object> . boolean ( new RuntimeBeanReference ( STRING ) ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , java.util.List<java.lang.Object> ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = new ManagedSet <> ( ) ; java.util.Set<java.lang.Object> . boolean ( STRING ) ; java.util.Set<java.lang.Object> . boolean ( new RuntimeBeanReference ( STRING ) ) ; java.util.Set<java.lang.Object> . boolean ( new TypedStringValue ( STRING , java.lang.Integer .class ) ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , java.util.Set<java.lang.Object> ) ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new ManagedMap <> ( ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( new TypedStringValue ( STRING ) , new TypedStringValue ( STRING ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( new TypedStringValue ( STRING ) , new RuntimeBeanReference ( STRING ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , new RuntimeBeanReference ( STRING ) ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , STRING ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.beans.factory.config.RootBeanDefinition . setPropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues = new MutablePropertyValues ( org.springframework.beans.factory.config.MutablePropertyValues ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( STRING , new BeanDefinitionHolder ( new ChildBeanDefinition ( STRING , org.springframework.beans.factory.config.MutablePropertyValues ) , STRING ) ) ; org.springframework.beans.factory.config.MutablePropertyValues . add ( STRING , java.util.Map<java.lang.Object,java.lang.Object> ) ; RootBeanDefinition org.springframework.beans.factory.config.RootBeanDefinition = new RootBeanDefinition ( TestBean .class , org.springframework.beans.factory.config.ConstructorArgumentValues , org.springframework.beans.factory.config.MutablePropertyValues ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.beans.factory.config.RootBeanDefinition ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean . getSpouse ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getStringArray ( ) . length ) ; assertEquals ( java.lang.System . java.lang.String ( STRING ) , org.springframework.beans.factory.config.TestBean . getStringArray ( ) [ NUMBER ] ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getStringArray ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getFriends ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getFriends ( ) . iterator ( ) . next ( ) ) ; assertEquals ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean . getFriends ( ) . toArray ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getSomeSet ( ) . size ( ) ) ; assertTrue ( org.springframework.beans.factory.config.TestBean . getSomeSet ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.beans.factory.config.TestBean . getSomeSet ( ) . contains ( org.springframework.beans.factory.config.TestBean ) ) ; assertTrue ( org.springframework.beans.factory.config.TestBean . getSomeSet ( ) . contains ( new java.lang.Integer ( NUMBER ) ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . size ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertEquals ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.TestBean . getSomeMap ( ) . get ( STRING ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( null , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( java.lang.System . java.lang.String ( STRING ) , org.springframework.beans.factory.config.TestBean . getCountry ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( java.lang.System . java.lang.String ( STRING ) , org.springframework.beans.factory.config.TestBean . getCountry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.System . java.lang.String ( STRING ) , org.springframework.beans.factory.config.TestBean . getCountry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getCountry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setSystemPropertiesMode ( PropertyPlaceholderConfigurer . SYSTEM_PROPERTIES_MODE_OVERRIDE ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( java.lang.System . java.lang.String ( STRING ) , org.springframework.beans.factory.config.TestBean . getCountry ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setSystemPropertiesMode ( PropertyPlaceholderConfigurer . SYSTEM_PROPERTIES_MODE_NEVER ) ; try { org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.config.BeanDefinitionStoreException ) { assertTrue ( org.springframework.beans.factory.config.BeanDefinitionStoreException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; try { org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.config.BeanDefinitionStoreException ) { assertTrue ( org.springframework.beans.factory.config.BeanDefinitionStoreException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setIgnoreUnresolvablePlaceholders ( true ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setNullValue ( STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setNullValue ( STRING ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertNull ( org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.beans.factory.config.TestBean , org.springframework.beans.factory.config.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.beans.factory.config.TestBean ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.DefaultListableBeanFactory . getAliases ( STRING ) . length ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; try { org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.beans.factory.config.BeanDefinitionStoreException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.beans.factory.config.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; PropertyPlaceholderConfigurer org.springframework.beans.factory.config.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PreferencesPlaceholderConfigurer org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer = new PreferencesPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setProperties ( java.util.Properties ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . afterPropertiesSet ( ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PreferencesPlaceholderConfigurer org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer = new PreferencesPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setSystemTreePath ( STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setUserTreePath ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . afterPropertiesSet ( ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.beans.factory.config.DefaultListableBeanFactory . registerBeanDefinition ( STRING , genericBeanDefinition ( TestBean .class ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . addPropertyValue ( STRING , STRING ) . getBeanDefinition ( ) ) ; PreferencesPlaceholderConfigurer org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer = new PreferencesPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setSystemTreePath ( STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . setUserTreePath ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING , STRING ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . afterPropertiesSet ( ) ; org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.beans.factory.config.DefaultListableBeanFactory ) ; TestBean org.springframework.beans.factory.config.TestBean = ( TestBean ) org.springframework.beans.factory.config.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.config.TestBean . getAge ( ) ) ; assertEquals ( STRING , org.springframework.beans.factory.config.TestBean . getTouchy ( ) ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; java.util.prefs.Preferences . java.util.prefs.Preferences ( ) . java.util.prefs.Preferences ( STRING ) . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return java.util.Properties ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.prefs.Preferences java.util.prefs.Preferences ( ) { return this . java.util.prefs.Preferences ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.prefs.Preferences java.util.prefs.Preferences ( ) { return this . java.util.prefs.Preferences ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( null , STRING ); }  <METHOD_END>
<METHOD_START> protected void ( java.util.prefs.AbstractPreferences java.util.prefs.AbstractPreferences , java.lang.String java.lang.String ) { super( java.util.prefs.AbstractPreferences , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.util.prefs.BackingStoreException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) java.util.prefs.BackingStoreException { return java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.lang.String> ( ) . java.lang.String[] ( new java.lang.String [ java.util.Map<java.lang.String,java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String [] java.lang.String[] ( ) java.util.prefs.BackingStoreException { return java.util.Map<java.lang.String,java.util.prefs.AbstractPreferences> . java.util.Set<java.lang.String> ( ) . java.lang.String[] ( new java.lang.String [ java.util.Map<java.lang.String,java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.prefs.AbstractPreferences java.util.prefs.AbstractPreferences ( java.lang.String java.lang.String ) { java.util.prefs.AbstractPreferences java.util.prefs.AbstractPreferences = java.util.Map<java.lang.String,java.util.prefs.AbstractPreferences> . java.util.prefs.AbstractPreferences ( java.lang.String ) ; if ( java.util.prefs.AbstractPreferences == null ) { java.util.prefs.AbstractPreferences = new org.springframework.beans.factory.config.PropertyResourceConfigurerTests.MockPreferences ( this , java.lang.String ) ; java.util.Map<java.lang.String,java.util.prefs.AbstractPreferences> . java.util.prefs.AbstractPreferences ( java.lang.String , java.util.prefs.AbstractPreferences ) ; } return java.util.prefs.AbstractPreferences ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.util.prefs.BackingStoreException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.util.prefs.BackingStoreException {		}  <METHOD_END>
