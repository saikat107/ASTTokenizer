<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( java.util.Collections . java.util.Set ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; new TemplateAvailabilityProviders ( ( ApplicationContext ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.boot.autoconfigure.template.ApplicationContext = mock ( ApplicationContext .class ) ; given ( org.springframework.boot.autoconfigure.template.ApplicationContext . getClassLoader ( ) ) . willReturn ( this . java.lang.ClassLoader ) ; TemplateAvailabilityProviders org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( org.springframework.boot.autoconfigure.template.ApplicationContext ) ; assertThat ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProviders ( ) ) . isNotEmpty ( ) ; verify ( org.springframework.boot.autoconfigure.template.ApplicationContext ) . getClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; new TemplateAvailabilityProviders ( ( java.lang.ClassLoader ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TemplateAvailabilityProviders org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( this . java.lang.ClassLoader ) ; assertThat ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProviders ( ) ) . isNotEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; new TemplateAvailabilityProviders ( ( java.util.Collection<org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider> < TemplateAvailabilityProvider > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TemplateAvailabilityProviders org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( java.util.Collections . java.util.Set ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ) ; assertThat ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProviders ( ) ) . containsOnly ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( null , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , null , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , null , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.autoconfigure.template.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider = this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; assertThat ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) . isNull ( ) ; verify ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ) . willReturn ( true ) ; TemplateAvailabilityProvider org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider = this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; assertThat ( org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) . isSameAs ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ) . willReturn ( true ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; verify ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider , times ( NUMBER ) ) . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; verify ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider , times ( NUMBER ) ) . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ) . willReturn ( true ) ; this . org.springframework.boot.autoconfigure.template.MockEnvironment . setProperty ( STRING , STRING ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders . getProvider ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; verify ( this . org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider , times ( NUMBER ) ) . isTemplateAvailable ( this . java.lang.String , this . org.springframework.boot.autoconfigure.template.MockEnvironment , this . java.lang.ClassLoader , this . org.springframework.boot.autoconfigure.template.ResourceLoader ) ; }  <METHOD_END>
