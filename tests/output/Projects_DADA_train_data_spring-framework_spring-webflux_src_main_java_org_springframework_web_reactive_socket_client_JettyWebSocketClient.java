<METHOD_START> public void ( ) { this . org.eclipse.jetty.websocket.client.WebSocketClient = new org . org.eclipse . org.eclipse . org.eclipse . org.eclipse . org.eclipse ( ) ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public void ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.websocket.client.WebSocketClient ) { this . org.eclipse.jetty.websocket.client.WebSocketClient = org.eclipse.jetty.websocket.client.WebSocketClient ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public org . org.eclipse . org.eclipse . org.eclipse . org.eclipse . org.eclipse.jetty.websocket.client.WebSocketClient org.eclipse.jetty.websocket.client.WebSocketClient ( ) { return this . org.eclipse.jetty.websocket.client.WebSocketClient ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { return; } synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) ) { try { this . boolean = true ; this . org.eclipse.jetty.websocket.client.WebSocketClient . start ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { return; } synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { try { this . boolean = false ; this . org.eclipse.jetty.websocket.client.WebSocketClient . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return this . boolean ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , new HttpHeaders ( ) , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> = MonoProcessor . create ( ) ; return Mono . fromCallable ( ( ) { String [] protocols = beforeHandshake ( url , headers , handler ) ; ClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest ( ) ; upgradeRequest . setSubProtocols ( protocols ) ; Object jettyHandler = createJettyHandler ( url , handler , completionMono ) ; UpgradeListener upgradeListener = new DefaultUpgradeListener ( headers ) ; return this . jettyClient . connect ( jettyHandler , url , upgradeRequest , upgradeListener ) ; } ) . then ( org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler , MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> ) { return new JettyWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.client.WebSocketHandler , session -> { UpgradeResponse response = session . getUpgradeResponse ( ) ; HttpHeaders responseHeaders = new HttpHeaders ( ) ; response . getHeaders ( ) . forEach ( responseHeaders :: put ) ; HandshakeInfo info = afterHandshake ( url , responseHeaders ) ; return new JettyWebSocketSession ( session , info , this . bufferFactory , completion ) ; } ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ) { this . org.springframework.web.reactive.socket.client.HttpHeaders = org.springframework.web.reactive.socket.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( UpgradeRequest org.springframework.web.reactive.socket.client.UpgradeRequest ) { this . org.springframework.web.reactive.socket.client.HttpHeaders . forEach ( org.springframework.web.reactive.socket.client.UpgradeRequest :: setHeader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( UpgradeResponse org.springframework.web.reactive.socket.client.UpgradeResponse ) {		}  <METHOD_END>
