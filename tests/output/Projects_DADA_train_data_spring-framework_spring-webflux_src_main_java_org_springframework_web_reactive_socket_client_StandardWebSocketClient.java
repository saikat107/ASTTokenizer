<METHOD_START> public void ( ) { this( ContainerProvider . getWebSocketContainer ( ) ); }  <METHOD_END>
<METHOD_START> public void ( WebSocketContainer org.springframework.web.reactive.socket.client.WebSocketContainer ) { this . org.springframework.web.reactive.socket.client.WebSocketContainer = org.springframework.web.reactive.socket.client.WebSocketContainer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.client.WebSocketContainer org.springframework.web.reactive.socket.client.WebSocketContainer ( ) { return this . org.springframework.web.reactive.socket.client.WebSocketContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , new HttpHeaders ( ) , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { return org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , org.springframework.web.reactive.socket.client.WebSocketHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.socket.client.Mono<java.lang.Void> ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> = MonoProcessor . create ( ) ; return Mono . fromCallable ( ( ) { String [] subProtocols = beforeHandshake ( url , requestHeaders , handler ) ; DefaultConfigurator configurator = new DefaultConfigurator ( requestHeaders ) ; Endpoint endpoint = createEndpoint ( url , handler , completionMono , configurator ) ; ClientEndpointConfig config = createEndpointConfig ( configurator , subProtocols ) ; return this . webSocketContainer . connectToServer ( endpoint , config , url ) ; } ) . subscribeOn ( Schedulers . elastic ( ) ) . then ( org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.StandardWebSocketHandlerAdapter org.springframework.web.reactive.socket.client.StandardWebSocketHandlerAdapter ( java.net.URI java.net.URI , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler , MonoProcessor < java.lang.Void > org.springframework.web.reactive.socket.client.MonoProcessor<java.lang.Void> , org.springframework.web.reactive.socket.client.StandardWebSocketClient.DefaultConfigurator org.springframework.web.reactive.socket.client.StandardWebSocketClient.DefaultConfigurator ) { return new StandardWebSocketHandlerAdapter ( org.springframework.web.reactive.socket.client.WebSocketHandler , session -> { HttpHeaders responseHeaders = configurator . getResponseHeaders ( ) ; HandshakeInfo info = afterHandshake ( url , responseHeaders ) ; return new StandardWebSocketSession ( session , info , this . bufferFactory , completion ) ; } ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.socket.client.ClientEndpointConfig org.springframework.web.reactive.socket.client.ClientEndpointConfig ( Configurator org.springframework.web.reactive.socket.client.Configurator , java.lang.String [] java.lang.String[] ) { return ClientEndpointConfig . Builder . create ( ) . configurator ( org.springframework.web.reactive.socket.client.Configurator ) . preferredSubprotocols ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ) { this . org.springframework.web.reactive.socket.client.HttpHeaders = org.springframework.web.reactive.socket.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.socket.client.HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ( ) { return this . org.springframework.web.reactive.socket.client.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> . void ( this . org.springframework.web.reactive.socket.client.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HandshakeResponse org.springframework.web.reactive.socket.client.HandshakeResponse ) { org.springframework.web.reactive.socket.client.HandshakeResponse . getHeaders ( ) . forEach ( this . org.springframework.web.reactive.socket.client.HttpHeaders :: put ) ; }  <METHOD_END>
