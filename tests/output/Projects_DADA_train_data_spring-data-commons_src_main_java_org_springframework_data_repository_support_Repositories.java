<METHOD_START> private void ( ) { this . java.util.Optional<org.springframework.data.repository.support.BeanFactory> = java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; this . java.util.Map<java.lang.Class<?>,java.lang.String> = java.util.Collections . java.util.Map<java.lang.Class<?>,java.lang.String> ( ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> = java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ListableBeanFactory org.springframework.data.repository.support.ListableBeanFactory ) { Assert . notNull ( org.springframework.data.repository.support.ListableBeanFactory , STRING ) ; this . java.util.Optional<org.springframework.data.repository.support.BeanFactory> = java.util.Optional . java.util.Optional ( org.springframework.data.repository.support.ListableBeanFactory ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> = new java.util.HashMap <> ( ) ; this . java.util.Map<java.lang.Class<?>,java.lang.String> = new java.util.HashMap<java.lang.Class<?>,java.lang.String> <> ( ) ; void ( org.springframework.data.repository.support.ListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> private void void ( ListableBeanFactory org.springframework.data.repository.support.ListableBeanFactory ) { for ( java.lang.String java.lang.String : BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.data.repository.support.ListableBeanFactory , RepositoryFactoryInformation .class , false , false ) ) { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private synchronized void void ( java.lang.String java.lang.String ) { RepositoryFactoryInformation org.springframework.data.repository.support.RepositoryFactoryInformation = java.util.Optional<org.springframework.data.repository.support.BeanFactory> . get ( ) . getBean ( java.lang.String , RepositoryFactoryInformation .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( org.springframework.data.repository.support.RepositoryFactoryInformation . getRepositoryInformation ( ) . getDomainType ( ) ) ; RepositoryInformation org.springframework.data.repository.support.RepositoryInformation = org.springframework.data.repository.support.RepositoryFactoryInformation . getRepositoryInformation ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = org.springframework.data.repository.support.RepositoryInformation . getAlternativeDomainTypes ( ) ; java.lang.String java.lang.String = BeanFactoryUtils . transformedBeanName ( java.lang.String ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> <> ( java.util.Set<java.lang.Class<?>> . int ( ) + NUMBER ) ; java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; java.util.Set<java.lang.Class<?>> . boolean ( java.util.Set<java.lang.Class<?>> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { this . java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> . put ( java.lang.Class<> , org.springframework.data.repository.support.RepositoryFactoryInformation ) ; this . java.util.Map<java.lang.Class<?>,java.lang.String> . java.lang.String ( java.lang.Class<> , java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; return java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> . containsKey ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> = java.util.Optional . java.util.Optional<java.lang.String> ( java.util.Map<java.lang.Class<?>,java.lang.String> . java.lang.String ( java.lang.Class<> ) ) ; return java.util.Optional<org.springframework.data.repository.support.BeanFactory> . flatMap ( it -> repositoryBeanName . map ( it :: getBean ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> < java.lang.Object , java.io.Serializable > org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; RepositoryFactoryInformation < java.lang.Object , java.io.Serializable > org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> = java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> . get ( java.lang.Class<> ) ; if ( org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> != null ) { return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ; } if ( ! java.lang.Class<> . boolean ( java.lang.Object .class ) ) { return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<> . java.lang.Class<? super > ( ) ) ; } return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T , S extends java.io.Serializable > org.springframework.data.repository.support.EntityInformation<T,S> < T , S > org.springframework.data.repository.support.EntityInformation<T,S> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; return ( EntityInformation < T , S > ) org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<> ) . getEntityInformation ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; RepositoryFactoryInformation < java.lang.Object , java.io.Serializable > org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> = org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<> ) ; return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> == org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ? java.util.Optional . java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> ( ) : java.util.Optional . java.util.Optional ( org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> . getRepositoryInformation ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.support.RepositoryInformation org.springframework.data.repository.support.RepositoryInformation ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> ( java.lang.Class<> ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING + domainType . getName ( ) + STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> < RepositoryInformation > java.util.Optional<org.springframework.data.repository.support.RepositoryInformation> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> . values ( ) . stream ( ) . map ( RepositoryFactoryInformation :: getRepositoryInformation ) . filter ( information -> information . getRepositoryInterface ( ) . equals ( repositoryInterface ) ) . findFirst ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.support.PersistentEntity<?,?> < ? , ? > org.springframework.data.repository.support.PersistentEntity<?,?> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<> ) . getPersistentEntity ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.repository.support.QueryMethod> < QueryMethod > java.util.List<org.springframework.data.repository.support.QueryMethod> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , java.lang.String ) ; return org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable> ( java.lang.Class<> ) . getQueryMethods ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Iterator<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Iterator<java.lang.Class<?>> ( ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.repository.support.RepositoryFactoryInformation<java.lang.Object,java.io.Serializable>> . keySet ( ) . iterator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.support.EntityInformation<java.lang.Object,java.io.Serializable> < java.lang.Object , java.io.Serializable > org.springframework.data.repository.support.EntityInformation<java.lang.Object,java.io.Serializable> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.support.RepositoryInformation org.springframework.data.repository.support.RepositoryInformation ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.repository.support.PersistentEntity<?,?> < ? , ? > org.springframework.data.repository.support.PersistentEntity<?,?> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.repository.support.QueryMethod> < QueryMethod > java.util.List<org.springframework.data.repository.support.QueryMethod> ( ) { return java.util.Collections . java.util.List<org.springframework.data.repository.support.QueryMethod> ( ) ; }  <METHOD_END>
