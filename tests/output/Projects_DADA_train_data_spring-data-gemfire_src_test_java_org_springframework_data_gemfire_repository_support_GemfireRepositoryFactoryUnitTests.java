<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.repository.support.Region<K,V> < K , V > org.springframework.data.gemfire.repository.support.Region<K,V> ( Region < K , V > org.springframework.data.gemfire.repository.support.Region<K,V> , java.lang.String java.lang.String , java.lang.Class<K> < K > java.lang.Class<K> , java.lang.Class<V> < V > java.lang.Class<V> ) { when ( org.springframework.data.gemfire.repository.support.Region<K,V> . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.support.RegionAttributes ) ; when ( org.springframework.data.gemfire.repository.support.Region<K,V> . getFullPath ( ) ) . thenReturn ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; when ( org.springframework.data.gemfire.repository.support.Region<K,V> . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.repository.support.RegionAttributes . getKeyConstraint ( ) ) . thenReturn ( java.lang.Class<K> ) ; when ( org.springframework.data.gemfire.repository.support.RegionAttributes . getValueConstraint ( ) ) . thenReturn ( java.lang.Class<V> ) ; return org.springframework.data.gemfire.repository.support.Region<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < K , V > org.springframework.data.gemfire.repository.support.Region<K,V> < K , V > org.springframework.data.gemfire.repository.support.Region<K,V> ( java.lang.String java.lang.String , java.lang.Class<K> < K > java.lang.Class<K> , java.lang.Class<V> < V > java.lang.Class<V> ) { return org.springframework.data.gemfire.repository.support.Region ( mock ( Region .class , java.lang.String ) , java.lang.String , java.lang.Class<K> , java.lang.Class<V> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.support.RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.Class<?> < ? > java.lang.Class<?> ) { RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata = mock ( RepositoryMetadata .class ) ; when ( org.springframework.data.gemfire.repository.support.RepositoryMetadata . getDomainType ( ) ) . then ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; } } ) ; when ( org.springframework.data.gemfire.repository.support.RepositoryMetadata . getIdType ( ) ) . then ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; } } ) ; when ( org.springframework.data.gemfire.repository.support.RepositoryMetadata . getRepositoryInterface ( ) ) . then ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; } } ) ; return org.springframework.data.gemfire.repository.support.RepositoryMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( InvocationOnMock org.springframework.data.gemfire.repository.support.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.gemfire.repository.support.Region ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> , STRING , java.lang.Object .class , java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( STRING ) ; new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( STRING ) ; new GemfireRepositoryFactory ( null , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> ( ) , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getRepositoryRegionName ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.PersonRepository .class ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> ( ) , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getRepositoryRegionName ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.SampleCustomGemfireRepository .class ) , is ( nullValue ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata = org.springframework.data.gemfire.repository.support.RepositoryMetadata ( Person .class , java.lang.Long .class , org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.PersonRepository .class ) ; Region < java.lang.Long , Person > org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> ( STRING , java.lang.Long .class , Person .class ) ; java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> , org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> ) ; GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate = org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getTemplate ( org.springframework.data.gemfire.repository.support.RepositoryMetadata ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate , is ( notNullValue ( GemfireTemplate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate .< java.lang.Long , Person > getRegion ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> ) ) ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Long,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.repository.support.RegionAttributes , times ( NUMBER ) ) . getKeyConstraint ( ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getDomainType ( ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getIdType ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata = org.springframework.data.gemfire.repository.support.RepositoryMetadata ( Person .class , java.lang.Long .class , org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.SampleCustomGemfireRepository .class ) ; java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> = java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.repository.support.Region<?,?>> ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) ; GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.lang.Iterable<org.springframework.data.gemfire.repository.support.Region<?,?>> , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate = org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getTemplate ( org.springframework.data.gemfire.repository.support.RepositoryMetadata ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate , is ( notNullValue ( GemfireTemplate .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.support.GemfireTemplate . getRegion ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) ) ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getDomainType ( ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getIdType ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata = org.springframework.data.gemfire.repository.support.RepositoryMetadata ( Person .class , java.lang.Long .class , org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.PersonRepository .class ) ; Region < java.lang.String , Person > org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> = org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> ( STRING , java.lang.String .class , Person .class ) ; GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.repository.support.Region<?,?>> ( org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> ) , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; try { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , java.lang.String .class . java.lang.String ( ) , java.lang.Long .class . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getTemplate ( org.springframework.data.gemfire.repository.support.RepositoryMetadata ) ; } finally { verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getDomainType ( ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getIdType ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.String,org.springframework.data.gemfire.repository.support.Person> , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.repository.support.RegionAttributes , times ( NUMBER ) ) . getKeyConstraint ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryMetadata org.springframework.data.gemfire.repository.support.RepositoryMetadata = org.springframework.data.gemfire.repository.support.RepositoryMetadata ( Person .class , java.lang.Long .class , org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.PersonRepository .class ) ; GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.repository.support.Region<?,?>> ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) , org.springframework.data.gemfire.repository.support.GemfireMappingContext ) ; try { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , Person .class . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getTemplate ( org.springframework.data.gemfire.repository.support.RepositoryMetadata ) ; } finally { verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , times ( NUMBER ) ) . getDomainType ( ) ; verify ( org.springframework.data.gemfire.repository.support.RepositoryMetadata , never ( ) ) . getIdType ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> , times ( NUMBER ) ) . getName ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.repository.support.RegionAttributes ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.repository.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.support.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) , new GemfireMappingContext ( ) ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getRepository ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.SamplePagingAndSortingRepository .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireRepositoryFactory org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory = new GemfireRepositoryFactory ( java.util.Collections .< Region < ? , ? > > java.util.List<org.springframework.data.gemfire.repository.support.Region<?,?>> ( org.springframework.data.gemfire.repository.support.Region<java.lang.Object,java.lang.Object> ) , new GemfireMappingContext ( ) ) ; org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . setRepositoryBaseClass ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.CustomBaseRepository .class ) ; GemfireRepository < ? , ? > org.springframework.data.gemfire.repository.support.GemfireRepository<?,?> = org.springframework.data.gemfire.repository.support.GemfireRepositoryFactory . getRepository ( org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.SampleCustomGemfireRepository .class , new org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.SampleCustomRepositoryImpl ( ) ) ; assertThat ( ( ( Advised ) org.springframework.data.gemfire.repository.support.GemfireRepository<,> ) . getTargetClass ( ) , is ( equalTo ( ( java.lang.Class ) org.springframework.data.gemfire.repository.support.GemfireRepositoryFactoryUnitTests.CustomBaseRepository .class ) ) ) ; }  <METHOD_END>
<METHOD_START> public void ( GemfireTemplate org.springframework.data.gemfire.repository.support.GemfireTemplate , EntityInformation < T , ID > org.springframework.data.gemfire.repository.support.EntityInformation<T,ID> ) { super( org.springframework.data.gemfire.repository.support.GemfireTemplate , org.springframework.data.gemfire.repository.support.EntityInformation<T,ID> ); }  <METHOD_END>
<METHOD_START> void void ( T T );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final T T ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
