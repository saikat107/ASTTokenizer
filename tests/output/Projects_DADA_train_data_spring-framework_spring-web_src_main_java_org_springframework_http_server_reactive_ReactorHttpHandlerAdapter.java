<METHOD_START> public void ( HttpHandler org.springframework.http.server.reactive.HttpHandler ) { Assert . notNull ( org.springframework.http.server.reactive.HttpHandler , STRING ) ; this . org.springframework.http.server.reactive.HttpHandler = org.springframework.http.server.reactive.HttpHandler ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( HttpServerRequest org.springframework.http.server.reactive.HttpServerRequest , HttpServerResponse org.springframework.http.server.reactive.HttpServerResponse ) { NettyDataBufferFactory org.springframework.http.server.reactive.NettyDataBufferFactory = new NettyDataBufferFactory ( org.springframework.http.server.reactive.HttpServerResponse . alloc ( ) ) ; ReactorServerHttpRequest org.springframework.http.server.reactive.ReactorServerHttpRequest = new ReactorServerHttpRequest ( org.springframework.http.server.reactive.HttpServerRequest , org.springframework.http.server.reactive.NettyDataBufferFactory ) ; ReactorServerHttpResponse org.springframework.http.server.reactive.ReactorServerHttpResponse = new ReactorServerHttpResponse ( org.springframework.http.server.reactive.HttpServerResponse , org.springframework.http.server.reactive.NettyDataBufferFactory ) ; return this . org.springframework.http.server.reactive.HttpHandler . handle ( org.springframework.http.server.reactive.ReactorServerHttpRequest , org.springframework.http.server.reactive.ReactorServerHttpResponse ) . otherwise ( ex -> { logger . error ( STRING , ex ) ; response . status ( HttpResponseStatus . INTERNAL_SERVER_ERROR ) ; return Mono . empty ( ) ; } ) . doOnSuccess ( aVoid -> logger . debug ( STRING ) ) ; }  <METHOD_END>
