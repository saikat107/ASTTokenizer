<METHOD_START> @ Primary @ Bean public org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.context.transaction.PlatformTransactionManager org.springframework.test.context.transaction.PlatformTransactionManager ( ) { return new DataSourceTransactionManager ( javax.sql.DataSource ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . generateUniqueName ( true ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return new EmbeddedDatabaseBuilder ( ) . generateUniqueName ( true ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( javax.sql.DataSource javax.sql.DataSource ) { this . org.springframework.test.context.transaction.JdbcTemplate = new JdbcTemplate ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ BeforeTransaction public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Transactional public void void ( ) { TransactionTestUtils . assertInTransaction ( true ) ; ClassPathResource org.springframework.test.context.transaction.ClassPathResource = new ClassPathResource ( STRING ) ; new ResourceDatabasePopulator ( org.springframework.test.context.transaction.ClassPathResource ) . execute ( org.springframework.test.context.transaction.JdbcTemplate . getDataSource ( ) ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { assertEquals ( STRING , int , JdbcTestUtils . countRowsInTable ( this . org.springframework.test.context.transaction.JdbcTemplate , STRING ) ) ; }  <METHOD_END>
