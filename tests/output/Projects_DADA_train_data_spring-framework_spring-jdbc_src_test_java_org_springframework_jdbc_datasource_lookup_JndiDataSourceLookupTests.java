<METHOD_START> @ Test public void void ( ) java.lang.Exception { final javax.sql.DataSource javax.sql.DataSource = new StubDataSource ( ) ; JndiDataSourceLookup org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup = new JndiDataSourceLookup ( ) { @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { assertEquals ( java.lang.String , java.lang.String ) ; return java.lang.Class<T> . T ( javax.sql.DataSource ) ; } } ; javax.sql.DataSource javax.sql.DataSource = org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup . getDataSource ( java.lang.String ) ; assertNotNull ( STRING , javax.sql.DataSource ) ; assertSame ( javax.sql.DataSource , javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { assertEquals ( java.lang.String , java.lang.String ) ; return java.lang.Class<T> . T ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DataSourceLookupFailureException .class ) public void void ( ) java.lang.Exception { JndiDataSourceLookup org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup = new JndiDataSourceLookup ( ) { @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { assertEquals ( java.lang.String , java.lang.String ) ; throw new javax.naming.NamingException ( ) ; } } ; org.springframework.jdbc.datasource.lookup.JndiDataSourceLookup . getDataSource ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws javax.naming.NamingException { assertEquals ( java.lang.String , java.lang.String ) ; throw new javax.naming.NamingException ( ) ; }  <METHOD_END>
