<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { try { int int = java.lang.String . int ( '-' ) ; if ( int != - NUMBER ) { void ( java.lang.Integer . int ( java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ) ) ; } else { void ( java.lang.Integer . int ( java.lang.String ) ) ; } } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + STRING + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. validateConfiguration ( ) ; if ( isSubscriptionDurable ( ) && this . int != NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.jms.listener.JMSException { if ( ! this . boolean ) { try { establishSharedConnection ( ) ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { logger . debug ( STRING , org.springframework.jms.listener.JMSException ) ; return; } void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.jms.listener.JMSException { super. doStart ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Connection org.springframework.jms.listener.Connection ) throws org.springframework.jms.listener.JMSException { super. prepareSharedConnection ( org.springframework.jms.listener.Connection ) ; org.springframework.jms.listener.Connection . setExceptionListener ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JMSException org.springframework.jms.listener.JMSException ) { invokeExceptionListener ( org.springframework.jms.listener.JMSException ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + org.springframework.jms.listener.JMSException ) ; } try { synchronized ( this . java.lang.Object ) { this . java.util.Set<org.springframework.jms.listener.Session> = null ; this . java.util.Set<org.springframework.jms.listener.MessageConsumer> = null ; } refreshSharedConnection ( ) ; void ( ) ; logger . info ( STRING ) ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { logger . debug ( STRING , org.springframework.jms.listener.JMSException ) ; logger . error ( STRING , org.springframework.jms.listener.JMSException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) org.springframework.jms.listener.JMSException { synchronized ( this . java.lang.Object ) { if ( this . java.util.Set<org.springframework.jms.listener.MessageConsumer> == null ) { this . java.util.Set<org.springframework.jms.listener.Session> = new java.util.HashSet <> ( this . int ) ; this . java.util.Set<org.springframework.jms.listener.MessageConsumer> = new java.util.HashSet <> ( this . int ) ; Connection org.springframework.jms.listener.Connection = getSharedConnection ( ) ; for ( int int = NUMBER ; int < this . int ; int ++ ) { Session org.springframework.jms.listener.Session = createSession ( org.springframework.jms.listener.Connection ) ; MessageConsumer org.springframework.jms.listener.MessageConsumer = org.springframework.jms.listener.MessageConsumer ( org.springframework.jms.listener.Session ) ; this . java.util.Set<org.springframework.jms.listener.Session> . add ( org.springframework.jms.listener.Session ) ; this . java.util.Set<org.springframework.jms.listener.MessageConsumer> . add ( org.springframework.jms.listener.MessageConsumer ) ; } } } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.MessageConsumer org.springframework.jms.listener.MessageConsumer ( final Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { Destination org.springframework.jms.listener.Destination = getDestination ( ) ; if ( org.springframework.jms.listener.Destination == null ) { org.springframework.jms.listener.Destination = resolveDestinationName ( org.springframework.jms.listener.Session , getDestinationName ( ) ) ; } MessageConsumer org.springframework.jms.listener.MessageConsumer = createConsumer ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Destination ) ; if ( this . java.util.concurrent.Executor != null ) { org.springframework.jms.listener.MessageConsumer . setMessageListener ( new MessageListener ( ) { @ java.lang.Override public void void ( final Message org.springframework.jms.listener.Message ) { java.util.concurrent.Executor . void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; } } ) ; } } ) ; } else { org.springframework.jms.listener.MessageConsumer . setMessageListener ( new MessageListener ( ) { @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { void ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; } } ) ; } return org.springframework.jms.listener.MessageConsumer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final Message org.springframework.jms.listener.Message ) { java.util.concurrent.Executor . void ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { void ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.jms.listener.Message ) { void ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Message org.springframework.jms.listener.Message , Session org.springframework.jms.listener.Session ) { boolean boolean = isExposeListenerSession ( ) ; if ( boolean ) { TransactionSynchronizationManager . bindResource ( getConnectionFactory ( ) , new LocallyExposedJmsResourceHolder ( org.springframework.jms.listener.Session ) ) ; } try { executeListener ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } finally { if ( boolean ) { TransactionSynchronizationManager . unbindResource ( getConnectionFactory ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.jms.listener.JMSException { synchronized ( this . java.lang.Object ) { if ( this . java.util.Set<org.springframework.jms.listener.MessageConsumer> != null ) { logger . debug ( STRING ) ; for ( MessageConsumer org.springframework.jms.listener.MessageConsumer : this . java.util.Set<org.springframework.jms.listener.MessageConsumer> ) { JmsUtils . closeMessageConsumer ( org.springframework.jms.listener.MessageConsumer ) ; } logger . debug ( STRING ) ; for ( Session org.springframework.jms.listener.Session : this . java.util.Set<org.springframework.jms.listener.Session> ) { JmsUtils . closeSession ( org.springframework.jms.listener.Session ) ; } } } }  <METHOD_END>
