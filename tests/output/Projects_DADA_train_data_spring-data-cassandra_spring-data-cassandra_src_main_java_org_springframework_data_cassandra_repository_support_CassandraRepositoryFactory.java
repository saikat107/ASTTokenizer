<METHOD_START> public void ( CassandraOperations org.springframework.data.cassandra.repository.support.CassandraOperations ) { Assert . notNull ( org.springframework.data.cassandra.repository.support.CassandraOperations , STRING ) ; this . org.springframework.data.cassandra.repository.support.CassandraOperations = org.springframework.data.cassandra.repository.support.CassandraOperations ; this . org.springframework.data.cassandra.repository.support.CassandraMappingContext = org.springframework.data.cassandra.repository.support.CassandraOperations . getConverter ( ) . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.cassandra.repository.support.RepositoryMetadata ) { return SimpleCassandraRepository .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( RepositoryInformation org.springframework.data.cassandra.repository.support.RepositoryInformation ) { CassandraEntityInformation < ? , java.io.Serializable > org.springframework.data.cassandra.repository.support.CassandraEntityInformation<?,java.io.Serializable> = org.springframework.data.cassandra.repository.support.CassandraEntityInformation ( org.springframework.data.cassandra.repository.support.RepositoryInformation . getDomainType ( ) ) ; return getTargetRepositoryViaReflection ( org.springframework.data.cassandra.repository.support.RepositoryInformation , org.springframework.data.cassandra.repository.support.CassandraEntityInformation<,java.io.Serializable> , org.springframework.data.cassandra.repository.support.CassandraOperations ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T , ID extends java.io.Serializable > org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> < T , ID > org.springframework.data.cassandra.repository.support.CassandraEntityInformation<T,ID> ( java.lang.Class<T> < T > java.lang.Class<T> ) { CassandraPersistentEntity < ? > org.springframework.data.cassandra.repository.support.CassandraPersistentEntity<?> = org.springframework.data.cassandra.repository.support.CassandraMappingContext . getRequiredPersistentEntity ( java.lang.Class<T> ) ; return new MappingCassandraEntityInformation <> ( ( CassandraPersistentEntity < T > ) org.springframework.data.cassandra.repository.support.CassandraPersistentEntity<> , org.springframework.data.cassandra.repository.support.CassandraOperations . getConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Optional<org.springframework.data.cassandra.repository.support.QueryLookupStrategy> < QueryLookupStrategy > java.util.Optional<org.springframework.data.cassandra.repository.support.QueryLookupStrategy> ( Key org.springframework.data.cassandra.repository.support.Key , EvaluationContextProvider org.springframework.data.cassandra.repository.support.EvaluationContextProvider ) { return java.util.Optional . java.util.Optional<T> ( new org.springframework.data.cassandra.repository.support.CassandraRepositoryFactory.CassandraQueryLookupStrategy ( org.springframework.data.cassandra.repository.support.CassandraOperations , org.springframework.data.cassandra.repository.support.EvaluationContextProvider , org.springframework.data.cassandra.repository.support.CassandraMappingContext ) ) ; }  <METHOD_END>
<METHOD_START> void ( CassandraOperations org.springframework.data.cassandra.repository.support.CassandraOperations , EvaluationContextProvider org.springframework.data.cassandra.repository.support.EvaluationContextProvider , CassandraMappingContext org.springframework.data.cassandra.repository.support.CassandraMappingContext ) { this . org.springframework.data.cassandra.repository.support.CassandraOperations = org.springframework.data.cassandra.repository.support.CassandraOperations ; this . org.springframework.data.cassandra.repository.support.EvaluationContextProvider = org.springframework.data.cassandra.repository.support.EvaluationContextProvider ; this . org.springframework.data.cassandra.repository.support.CassandraMappingContext = org.springframework.data.cassandra.repository.support.CassandraMappingContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.repository.support.RepositoryQuery org.springframework.data.cassandra.repository.support.RepositoryQuery ( java.lang.reflect.Method java.lang.reflect.Method , RepositoryMetadata org.springframework.data.cassandra.repository.support.RepositoryMetadata , ProjectionFactory org.springframework.data.cassandra.repository.support.ProjectionFactory , NamedQueries org.springframework.data.cassandra.repository.support.NamedQueries ) { CassandraQueryMethod org.springframework.data.cassandra.repository.support.CassandraQueryMethod = new CassandraQueryMethod ( java.lang.reflect.Method , org.springframework.data.cassandra.repository.support.RepositoryMetadata , org.springframework.data.cassandra.repository.support.ProjectionFactory , org.springframework.data.cassandra.repository.support.CassandraMappingContext ) ; java.lang.String java.lang.String = org.springframework.data.cassandra.repository.support.CassandraQueryMethod . getNamedQueryName ( ) ; if ( org.springframework.data.cassandra.repository.support.NamedQueries . hasQuery ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.data.cassandra.repository.support.NamedQueries . getQuery ( java.lang.String ) ; return new StringBasedCassandraQuery ( java.lang.String , org.springframework.data.cassandra.repository.support.CassandraQueryMethod , org.springframework.data.cassandra.repository.support.CassandraOperations , org.springframework.data.cassandra.repository.support.SpelExpressionParser , org.springframework.data.cassandra.repository.support.EvaluationContextProvider ) ; } else if ( org.springframework.data.cassandra.repository.support.CassandraQueryMethod . hasAnnotatedQuery ( ) ) { return new StringBasedCassandraQuery ( org.springframework.data.cassandra.repository.support.CassandraQueryMethod , org.springframework.data.cassandra.repository.support.CassandraOperations , org.springframework.data.cassandra.repository.support.SpelExpressionParser , org.springframework.data.cassandra.repository.support.EvaluationContextProvider ) ; } else { return new PartTreeCassandraQuery ( org.springframework.data.cassandra.repository.support.CassandraQueryMethod , org.springframework.data.cassandra.repository.support.CassandraOperations ) ; } }  <METHOD_END>
