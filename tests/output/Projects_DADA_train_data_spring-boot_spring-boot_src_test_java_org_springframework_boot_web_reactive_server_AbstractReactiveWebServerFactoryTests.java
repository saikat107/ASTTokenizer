<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.web.reactive.server.WebServer != null ) { try { this . org.springframework.boot.web.reactive.server.WebServer . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } } }  <METHOD_END>
<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.web.reactive.server.WebServer = org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory ( ) . getWebServer ( new org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactoryTests.EchoHandler ( ) ) ; this . org.springframework.boot.web.reactive.server.WebServer . start ( ) ; assertThat ( this . org.springframework.boot.web.reactive.server.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; Mono < java.lang.String > org.springframework.boot.web.reactive.server.Mono<java.lang.String> = org.springframework.boot.web.reactive.server.WebClient ( ) . post ( ) . uri ( STRING ) . contentType ( MediaType . TEXT_PLAIN ) . body ( BodyInserters . fromObject ( STRING ) ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; assertThat ( org.springframework.boot.web.reactive.server.Mono<java.lang.String> . block ( ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.web.reactive.server.WebServer . stop ( ) ; Mono < ClientResponse > org.springframework.boot.web.reactive.server.Mono<org.springframework.boot.web.reactive.server.ClientResponse> = org.springframework.boot.web.reactive.server.WebClient ( ) . post ( ) . uri ( STRING ) . contentType ( MediaType . TEXT_PLAIN ) . body ( BodyInserters . fromObject ( STRING ) ) . exchange ( ) ; StepVerifier . create ( org.springframework.boot.web.reactive.server.Mono<org.springframework.boot.web.reactive.server.ClientResponse> ) . expectError ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractReactiveWebServerFactory org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory = org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory ( ) ; int int = SocketUtils . findAvailableTcpPort ( NUMBER ) ; org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory . setPort ( int ) ; this . org.springframework.boot.web.reactive.server.WebServer = org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactory . getWebServer ( new org.springframework.boot.web.reactive.server.AbstractReactiveWebServerFactoryTests.EchoHandler ( ) ) ; this . org.springframework.boot.web.reactive.server.WebServer . start ( ) ; Mono < java.lang.String > org.springframework.boot.web.reactive.server.Mono<java.lang.String> = WebClient . create ( STRING + int ) . post ( ) . uri ( STRING ) . contentType ( MediaType . TEXT_PLAIN ) . body ( BodyInserters . fromObject ( STRING ) ) . exchange ( ) . then ( response -> response . bodyToMono ( String .class ) ) ; assertThat ( org.springframework.boot.web.reactive.server.Mono<java.lang.String> . block ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.web.reactive.server.WebServer . getPort ( ) ) . isEqualTo ( int ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.web.reactive.server.WebClient org.springframework.boot.web.reactive.server.WebClient ( ) { return WebClient . create ( STRING + this . org.springframework.boot.web.reactive.server.WebServer . getPort ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.web.reactive.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.boot.web.reactive.server.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.boot.web.reactive.server.ServerHttpRequest , ServerHttpResponse org.springframework.boot.web.reactive.server.ServerHttpResponse ) { org.springframework.boot.web.reactive.server.ServerHttpResponse . setStatusCode ( HttpStatus . OK ) ; return org.springframework.boot.web.reactive.server.ServerHttpResponse . writeWith ( org.springframework.boot.web.reactive.server.ServerHttpRequest . getBody ( ) ) ; }  <METHOD_END>
