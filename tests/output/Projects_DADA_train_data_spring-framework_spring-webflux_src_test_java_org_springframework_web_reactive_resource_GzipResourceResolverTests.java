<METHOD_START> @ BeforeClass public static void void ( ) java.io.IOException { void ( STRING ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.String java.lang.String ) throws java.io.IOException { Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING , org.springframework.web.reactive.resource.GzipResourceResolverTests .class ) ; Resource org.springframework.web.reactive.resource.Resource = new FileSystemResource ( org.springframework.web.reactive.resource.Resource . createRelative ( java.lang.String ) . getFile ( ) ) ; java.nio.file.Path java.nio.file.Path = java.nio.file.Paths . java.nio.file.Path ( org.springframework.web.reactive.resource.Resource . getFile ( ) . getAbsolutePath ( ) + STRING ) ; java.nio.file.Files . boolean ( java.nio.file.Path ) ; java.io.File java.io.File = java.nio.file.Files . java.nio.file.Path ( java.nio.file.Path ) . java.io.File ( ) ; java.util.zip.GZIPOutputStream java.util.zip.GZIPOutputStream = new java.util.zip.GZIPOutputStream ( new java.io.FileOutputStream ( java.io.File ) ) ; FileCopyUtils . copy ( org.springframework.web.reactive.resource.Resource . getInputStream ( ) , java.util.zip.GZIPOutputStream ) ; java.io.File . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { Cache org.springframework.web.reactive.resource.Cache = new ConcurrentMapCache ( STRING ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> < java.lang.String , VersionStrategy > java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> = new java.util.HashMap<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> <> ( ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> . put ( STRING , new ContentVersionStrategy ( ) ) ; VersionResourceResolver org.springframework.web.reactive.resource.VersionResourceResolver = new VersionResourceResolver ( ) ; org.springframework.web.reactive.resource.VersionResourceResolver . setStrategyMap ( java.util.Map<java.lang.String,org.springframework.web.reactive.resource.VersionStrategy> ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = new java.util.ArrayList<org.springframework.web.reactive.resource.ResourceResolver> <> ( ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new CachingResourceResolver ( org.springframework.web.reactive.resource.Cache ) ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new GzipResourceResolver ( ) ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( org.springframework.web.reactive.resource.VersionResourceResolver ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; this . org.springframework.web.reactive.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = java.lang.String + STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getDescription ( ) , org.springframework.web.reactive.resource.Resource . getDescription ( ) ) ; assertEquals ( new ClassPathResource ( STRING + java.lang.String ) . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; assertTrue ( STRING + org.springframework.web.reactive.resource.Resource + STRING + HttpResource .class , org.springframework.web.reactive.resource.Resource instanceof HttpResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = java.lang.String + STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getDescription ( ) , org.springframework.web.reactive.resource.Resource . getDescription ( ) ) ; assertEquals ( new ClassPathResource ( STRING + java.lang.String ) . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; assertTrue ( STRING + org.springframework.web.reactive.resource.Resource + STRING + HttpResource .class , org.springframework.web.reactive.resource.Resource instanceof HttpResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . header ( STRING , STRING ) . toExchange ( ) ; java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = java.lang.String + STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getDescription ( ) , org.springframework.web.reactive.resource.Resource . getDescription ( ) ) ; assertEquals ( new ClassPathResource ( STRING + java.lang.String ) . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; assertTrue ( STRING + org.springframework.web.reactive.resource.Resource + STRING + HttpResource .class , org.springframework.web.reactive.resource.Resource instanceof HttpResource ) ; org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getDescription ( ) , org.springframework.web.reactive.resource.Resource . getDescription ( ) ) ; assertEquals ( new ClassPathResource ( STRING + java.lang.String ) . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; assertFalse ( STRING + org.springframework.web.reactive.resource.Resource + STRING + HttpResource .class , org.springframework.web.reactive.resource.Resource instanceof HttpResource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( null , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = java.lang.String + STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.GzipResourceResolverTests> ( ) ) ; assertEquals ( org.springframework.web.reactive.resource.Resource . getDescription ( ) , org.springframework.web.reactive.resource.Resource . getDescription ( ) ) ; assertEquals ( new ClassPathResource ( STRING + java.lang.String ) . getFilename ( ) , org.springframework.web.reactive.resource.Resource . getFilename ( ) ) ; assertTrue ( STRING + org.springframework.web.reactive.resource.Resource + STRING + HttpResource .class , org.springframework.web.reactive.resource.Resource instanceof HttpResource ) ; }  <METHOD_END>
