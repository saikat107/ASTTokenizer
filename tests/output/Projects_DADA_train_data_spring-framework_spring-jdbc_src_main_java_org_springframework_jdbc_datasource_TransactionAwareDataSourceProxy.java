<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { super( javax.sql.DataSource ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { javax.sql.DataSource javax.sql.DataSource = getTargetDataSource ( ) ; Assert . state ( javax.sql.DataSource != null , STRING ) ; return java.sql.Connection ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> protected java.sql.Connection java.sql.Connection ( javax.sql.DataSource javax.sql.DataSource ) { return ( java.sql.Connection ) java.lang.reflect.Proxy . java.lang.Object ( ConnectionProxy .class . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { ConnectionProxy .class } , new org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy.TransactionAwareInvocationHandler ( javax.sql.DataSource ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( javax.sql.DataSource javax.sql.DataSource ) { return ( ! TransactionSynchronizationManager . isSynchronizationActive ( ) || ! this . boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return ( java.lang.Object == java.lang.Object[] [ NUMBER ] ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.lang.System . int ( java.lang.Object ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; if ( this . java.sql.Connection != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . java.sql.Connection . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( this . javax.sql.DataSource ) . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return java.lang.Object ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { if ( ( ( java.lang.Class<?> < ? > ) java.lang.Object[] [ NUMBER ] ) . boolean ( java.lang.Object ) ) { return true ; } } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { DataSourceUtils . doReleaseConnection ( this . java.sql.Connection , this . javax.sql.DataSource ) ; this . boolean = true ; return null ; } else if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return this . boolean ; } if ( this . java.sql.Connection == null ) { if ( this . boolean ) { throw new java.sql.SQLException ( STRING ) ; } if ( boolean ( this . javax.sql.DataSource ) ) { this . java.sql.Connection = DataSourceUtils . doGetConnection ( this . javax.sql.DataSource ) ; } } java.sql.Connection java.sql.Connection = this . java.sql.Connection ; if ( java.sql.Connection == null ) { java.sql.Connection = DataSourceUtils . doGetConnection ( this . javax.sql.DataSource ) ; } if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { return java.sql.Connection ; } try { java.lang.Object java.lang.Object = java.lang.reflect.Method . java.lang.Object ( java.sql.Connection , java.lang.Object[] ) ; if ( java.lang.Object instanceof java.sql.Statement ) { DataSourceUtils . applyTransactionTimeout ( ( java.sql.Statement ) java.lang.Object , this . javax.sql.DataSource ) ; } return java.lang.Object ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } finally { if ( java.sql.Connection != this . java.sql.Connection ) { DataSourceUtils . doReleaseConnection ( java.sql.Connection , this . javax.sql.DataSource ) ; } } }  <METHOD_END>
