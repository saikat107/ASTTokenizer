<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = findAvailablePort ( ) ; org.springframework.data.gemfire.function.execution.ProcessWrapper = run ( ServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) , getServerContextXmlFileLocation ( org.springframework.data.gemfire.function.execution.FunctionIntegrationTests .class ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.function.execution.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> . put ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireOnRegionOperations org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations = new GemfireOnRegionFunctionTemplate ( org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> ) ; org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations . execute ( STRING ) ; org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations . executeWithNoResult ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { GemfireOnRegionOperations org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations = new GemfireOnRegionFunctionTemplate ( org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> ) ; java.lang.Object java.lang.Object = org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations . executeAndExtract ( STRING ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Object instanceof java.util.Map ) ; java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = ( java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ) java.lang.Object ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING ) . int ( ) ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING ) . int ( ) ) ; java.lang.Object = org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations . executeAndExtract ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Object instanceof java.util.List ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) java.lang.Object ; assertFalse ( java.util.List<> . boolean ( ) ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.util.List<> ) { assertEquals ( int ++ , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Object java.lang.Object = new GemfireOnRegionFunctionTemplate ( org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> ) . executeAndExtract ( STRING , new int [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } ) ; assertTrue ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) , java.lang.Object instanceof int [] ) ; assertEquals ( NUMBER , ( ( int [] ) java.lang.Object ) . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireOnRegionOperations org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations = new GemfireOnRegionFunctionTemplate ( org.springframework.data.gemfire.function.execution.Region<java.lang.String,java.lang.Integer> ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations .< java.lang.Integer > execute ( STRING , STRING ) . iterator ( ) . next ( ) . intValue ( ) ) ; assertFalse ( org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations .< java.lang.Integer > execute ( STRING , java.util.Collections . java.util.Set<java.lang.String> ( STRING ) , STRING ) . iterator ( ) . hasNext ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations .< java.lang.Integer > execute ( STRING , STRING , STRING ) . iterator ( ) . next ( ) . intValue ( ) ) ; assertEquals ( NUMBER , org.springframework.data.gemfire.function.execution.GemfireOnRegionOperations .< java.lang.Integer > executeAndExtract ( STRING , STRING , STRING ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING ) public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , @ RegionData java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { return java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING ) public java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String , java.lang.String java.lang.String , @ RegionData java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { if ( java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) != null && java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) != null ) { return java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) + java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( java.lang.String ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING ) public java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ( java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> ) { return java.util.List<java.lang.Integer> ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING ) public java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( @ RegionData java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ) { if ( java.util.Map<java.lang.String,java.lang.Integer> . int ( ) == NUMBER ) { return null ; } return new java.util.HashMap<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > ( java.util.Map<java.lang.String,java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction ( id = STRING ) public int [] int[] ( int [] int[] ) { return int[] ; }  <METHOD_END>
<METHOD_START> @ GemfireFunction public void void ( ) {		}  <METHOD_END>
