<METHOD_START> public abstract void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.jms.listener.Destination ) { Assert . notNull ( org.springframework.jms.listener.Destination , STRING ) ; this . java.lang.Object = org.springframework.jms.listener.Destination ; if ( org.springframework.jms.listener.Destination instanceof Topic && ! ( org.springframework.jms.listener.Destination instanceof Queue ) ) { setPubSubDomain ( true ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.Destination org.springframework.jms.listener.Destination ( ) { return ( this . java.lang.Object instanceof Destination ? ( Destination ) this . java.lang.Object : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . java.lang.Object instanceof java.lang.String ? ( java.lang.String ) this . java.lang.Object : null ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.Object . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; this . java.lang.Object = java.lang.Object ; if ( this . java.lang.String == null ) { this . java.lang.String = java.lang.String ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { if ( ! ( java.lang.Object instanceof MessageListener || java.lang.Object instanceof SessionAwareMessageListener ) ) { throw new java.lang.IllegalArgumentException ( STRING + MessageListener .class . java.lang.String ( ) + STRING + SessionAwareMessageListener .class . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof SubscriptionNameProvider ) { return ( ( SubscriptionNameProvider ) java.lang.Object ) . getSubscriptionName ( ) ; } else { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; if ( boolean ) { setPubSubDomain ( true ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; if ( boolean ) { setPubSubDomain ( true ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return ( this . boolean ? this . java.lang.String : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( this . java.lang.Boolean != null ) { return java.lang.Boolean ; } else { return isPubSubDomain ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.jms.listener.MessageConverter ) { this . org.springframework.jms.listener.MessageConverter = org.springframework.jms.listener.MessageConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.MessageConverter org.springframework.jms.listener.MessageConverter ( ) { return this . org.springframework.jms.listener.MessageConverter ; }  <METHOD_END>
<METHOD_START> public void void ( ExceptionListener org.springframework.jms.listener.ExceptionListener ) { this . org.springframework.jms.listener.ExceptionListener = org.springframework.jms.listener.ExceptionListener ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.ExceptionListener org.springframework.jms.listener.ExceptionListener ( ) { return this . org.springframework.jms.listener.ExceptionListener ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.jms.listener.ErrorHandler ) { this . org.springframework.jms.listener.ErrorHandler = org.springframework.jms.listener.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.ErrorHandler org.springframework.jms.listener.ErrorHandler ( ) { return this . org.springframework.jms.listener.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { void ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.listener.Session , Message org.springframework.jms.listener.Message ) { try { void ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.listener.Session , Message org.springframework.jms.listener.Message ) throws org.springframework.jms.listener.JMSException { if ( ! boolean ( ) && ! isRunning ( ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + STRING + org.springframework.jms.listener.Message ) ; } void ( org.springframework.jms.listener.Session ) ; throw new org.springframework.jms.listener.AbstractMessageListenerContainer.MessageRejectedWhileStoppingException ( ) ; } try { void ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { void ( org.springframework.jms.listener.Session , org.springframework.jms.listener.JMSException ) ; throw org.springframework.jms.listener.JMSException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( org.springframework.jms.listener.Session , java.lang.RuntimeException ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { void ( org.springframework.jms.listener.Session , java.lang.Error ) ; throw java.lang.Error ; } void ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( Session org.springframework.jms.listener.Session , Message org.springframework.jms.listener.Message ) throws org.springframework.jms.listener.JMSException { java.lang.Object java.lang.Object = java.lang.Object ( ) ; if ( java.lang.Object instanceof SessionAwareMessageListener ) { void ( ( SessionAwareMessageListener ) java.lang.Object , org.springframework.jms.listener.Session , org.springframework.jms.listener.Message ) ; } else if ( java.lang.Object instanceof MessageListener ) { void ( ( MessageListener ) java.lang.Object , org.springframework.jms.listener.Message ) ; } else if ( java.lang.Object != null ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( SessionAwareMessageListener org.springframework.jms.listener.SessionAwareMessageListener , Session org.springframework.jms.listener.Session , Message org.springframework.jms.listener.Message )			throws org.springframework.jms.listener.JMSException { Connection org.springframework.jms.listener.Connection = null ; Session org.springframework.jms.listener.Session = null ; try { Session org.springframework.jms.listener.Session = org.springframework.jms.listener.Session ; if ( ! boolean ( ) ) { org.springframework.jms.listener.Connection = createConnection ( ) ; org.springframework.jms.listener.Session = createSession ( org.springframework.jms.listener.Connection ) ; org.springframework.jms.listener.Session = org.springframework.jms.listener.Session ; } org.springframework.jms.listener.SessionAwareMessageListener . onMessage ( org.springframework.jms.listener.Message , org.springframework.jms.listener.Session ) ; if ( org.springframework.jms.listener.Session != org.springframework.jms.listener.Session ) { if ( org.springframework.jms.listener.Session . getTransacted ( ) && boolean ( org.springframework.jms.listener.Session ) ) { JmsUtils . commitIfNecessary ( org.springframework.jms.listener.Session ) ; } } } finally { JmsUtils . closeSession ( org.springframework.jms.listener.Session ) ; JmsUtils . closeConnection ( org.springframework.jms.listener.Connection ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( MessageListener org.springframework.jms.listener.MessageListener , Message org.springframework.jms.listener.Message ) throws org.springframework.jms.listener.JMSException { org.springframework.jms.listener.MessageListener . onMessage ( org.springframework.jms.listener.Message ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.listener.Session , Message org.springframework.jms.listener.Message ) throws org.springframework.jms.listener.JMSException { if ( org.springframework.jms.listener.Session . getTransacted ( ) ) { if ( boolean ( org.springframework.jms.listener.Session ) ) { JmsUtils . commitIfNecessary ( org.springframework.jms.listener.Session ) ; } } else if ( org.springframework.jms.listener.Message != null && isClientAcknowledge ( org.springframework.jms.listener.Session ) ) { org.springframework.jms.listener.Message . acknowledge ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.listener.Session ) throws org.springframework.jms.listener.JMSException { if ( org.springframework.jms.listener.Session . getTransacted ( ) ) { if ( boolean ( org.springframework.jms.listener.Session ) ) { JmsUtils . rollbackIfNecessary ( org.springframework.jms.listener.Session ) ; } } else if ( isClientAcknowledge ( org.springframework.jms.listener.Session ) ) { org.springframework.jms.listener.Session . recover ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( Session org.springframework.jms.listener.Session , java.lang.Throwable java.lang.Throwable ) throws org.springframework.jms.listener.JMSException { try { if ( org.springframework.jms.listener.Session . getTransacted ( ) ) { if ( boolean ( org.springframework.jms.listener.Session ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING , java.lang.Throwable ) ; } JmsUtils . rollbackIfNecessary ( org.springframework.jms.listener.Session ) ; } } else if ( isClientAcknowledge ( org.springframework.jms.listener.Session ) ) { org.springframework.jms.listener.Session . recover ( ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { logger . debug ( STRING , java.lang.IllegalStateException ) ; } catch ( JMSException org.springframework.jms.listener.JMSException ) { logger . error ( STRING , java.lang.Throwable ) ; throw org.springframework.jms.listener.JMSException ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { logger . error ( STRING , java.lang.Throwable ) ; throw java.lang.RuntimeException ; } catch ( java.lang.Error java.lang.Error ) { logger . error ( STRING , java.lang.Throwable ) ; throw java.lang.Error ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( Session org.springframework.jms.listener.Session ) { return isSessionTransacted ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.MessageConsumer org.springframework.jms.listener.MessageConsumer ( Session org.springframework.jms.listener.Session , Destination org.springframework.jms.listener.Destination ) throws org.springframework.jms.listener.JMSException { if ( isPubSubDomain ( ) && org.springframework.jms.listener.Destination instanceof Topic ) { if ( boolean ( ) ) { java.lang.reflect.Method java.lang.reflect.Method = ( boolean ( ) ? java.lang.reflect.Method : java.lang.reflect.Method ) ; try { return ( MessageConsumer ) java.lang.reflect.Method . java.lang.Object ( org.springframework.jms.listener.Session , org.springframework.jms.listener.Destination , java.lang.String ( ) , java.lang.String ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof JMSException ) { throw ( JMSException ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } ReflectionUtils . handleInvocationTargetException ( java.lang.reflect.InvocationTargetException ) ; return null ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.IllegalAccessException . java.lang.String ( ) ) ; } } else if ( boolean ( ) ) { return org.springframework.jms.listener.Session . createDurableSubscriber ( ( Topic ) org.springframework.jms.listener.Destination , java.lang.String ( ) , java.lang.String ( ) , boolean ( ) ) ; } else { return org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.Destination , java.lang.String ( ) , boolean ( ) ) ; } } else { return org.springframework.jms.listener.Session . createConsumer ( org.springframework.jms.listener.Destination , java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof org.springframework.jms.listener.AbstractMessageListenerContainer.MessageRejectedWhileStoppingException ) { return; } if ( java.lang.Throwable instanceof JMSException ) { void ( ( JMSException ) java.lang.Throwable ) ; } if ( isActive ( ) ) { void ( java.lang.Throwable ) ; } else { logger . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( JMSException org.springframework.jms.listener.JMSException ) { ExceptionListener org.springframework.jms.listener.ExceptionListener = org.springframework.jms.listener.ExceptionListener ( ) ; if ( org.springframework.jms.listener.ExceptionListener != null ) { org.springframework.jms.listener.ExceptionListener . onException ( org.springframework.jms.listener.JMSException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { ErrorHandler org.springframework.jms.listener.ErrorHandler = org.springframework.jms.listener.ErrorHandler ( ) ; if ( org.springframework.jms.listener.ErrorHandler != null ) { org.springframework.jms.listener.ErrorHandler . handleError ( java.lang.Throwable ) ; } else { logger . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
