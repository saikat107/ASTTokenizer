<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { super( java.util.concurrent.Executor ); }  <METHOD_END>
<METHOD_START> public void ( java.util.concurrent.Executor java.util.concurrent.Executor , AsyncUncaughtExceptionHandler org.springframework.scheduling.annotation.AsyncUncaughtExceptionHandler ) { super( java.util.concurrent.Executor , org.springframework.scheduling.annotation.AsyncUncaughtExceptionHandler ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method ) { Async org.springframework.scheduling.annotation.Async = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Async .class ) ; if ( org.springframework.scheduling.annotation.Async == null ) { org.springframework.scheduling.annotation.Async = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method . java.lang.Class<?> ( ) , Async .class ) ; } return ( org.springframework.scheduling.annotation.Async != null ? org.springframework.scheduling.annotation.Async . value ( ) : null ) ; }  <METHOD_END>
