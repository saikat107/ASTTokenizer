<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.util.UriTemplate . getVariableNames ( ) ; assertEquals ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( STRING , STRING ) ; assertEquals ( STRING , new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( new int [] { NUMBER , NUMBER , NUMBER } ) ; assertEquals ( new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; org.springframework.web.util.UriTemplate . expand ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) , org.springframework.web.util.UriTemplate . getVariableNames ( ) ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertEquals ( new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.HashMap<java.lang.String,java.lang.Integer> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( java.util.Map<java.lang.String,java.lang.Integer> ) ; assertEquals ( STRING , new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( java.util.Map<java.lang.String,java.lang.String> ) ; assertEquals ( STRING , new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; org.springframework.web.util.UriTemplate . expand ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( STRING ) ; assertEquals ( STRING , new java.net.URI ( STRING ) , java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( STRING , org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.util.UriTemplate . matches ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( STRING , org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; assertFalse ( STRING , org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.UriTemplate . match ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.UriTemplate . match ( STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.UriTemplate . match ( STRING ) ; assertEquals ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.UriTemplate . match ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = org.springframework.web.util.UriTemplate . match ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; assertEquals ( STRING , java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; assertTrue ( org.springframework.web.util.UriTemplate . matches ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( STRING ) ; assertEquals ( STRING , java.net.URI . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriTemplate org.springframework.web.util.UriTemplate = new UriTemplate ( STRING ) ; java.net.URI java.net.URI = org.springframework.web.util.UriTemplate . expand ( STRING ) ; assertEquals ( STRING , java.net.URI . java.lang.String ( ) ) ; }  <METHOD_END>
