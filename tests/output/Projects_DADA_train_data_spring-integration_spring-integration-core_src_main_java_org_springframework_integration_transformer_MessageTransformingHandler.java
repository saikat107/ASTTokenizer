<METHOD_START> public void ( Transformer org.springframework.integration.transformer.Transformer ) { Assert . notNull ( org.springframework.integration.transformer.Transformer , STRING ) ; this . org.springframework.integration.transformer.Transformer = org.springframework.integration.transformer.Transformer ; this . setRequiresReply ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . org.springframework.integration.transformer.Transformer instanceof NamedComponent ) ? ( ( NamedComponent ) this . org.springframework.integration.transformer.Transformer ) . getComponentType ( ) : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . getBeanFactory ( ) != null && this . org.springframework.integration.transformer.Transformer instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.transformer.Transformer ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.transformer.Transformer instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.transformer.Transformer ) . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.transformer.Transformer instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.integration.transformer.Transformer ) . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . org.springframework.integration.transformer.Transformer instanceof Lifecycle ) || ( ( Lifecycle ) this . org.springframework.integration.transformer.Transformer ) . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.transformer.Message<?> ) { try { return this . org.springframework.integration.transformer.Transformer . transform ( org.springframework.integration.transformer.Message<> ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessageTransformationException ) { throw ( MessageTransformationException ) java.lang.Exception ; } throw new MessageTransformationException ( org.springframework.integration.transformer.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
