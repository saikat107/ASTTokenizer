<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> = org.springframework.integration.channel.interceptor.AbstractMessageChannel . getChannelInterceptors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . size ( ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor1 .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor2 .class ) ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor1 .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor2 .class ) ) ) ; java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> = org.springframework.integration.channel.interceptor.AbstractMessageChannel . getChannelInterceptors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . size ( ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( WireTap .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor2 .class ) ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( WireTap .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor2 .class ) ) ) ; java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> = org.springframework.integration.channel.interceptor.AbstractMessageChannel . getChannelInterceptors ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . size ( ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( WireTap .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor1 .class ) ) ) ; assertThat ( java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) , anyOf ( instanceOf ( WireTap .class ) , instanceOf ( org.springframework.integration.channel.interceptor.ImplicitConsumerChannelTests.Interceptor1 .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { this . org.springframework.integration.channel.interceptor.MessageChannel = org.springframework.integration.channel.interceptor.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.interceptor.MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ( ) { return org.springframework.integration.channel.interceptor.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , ChannelInterceptorAware org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) { return ! this . org.springframework.integration.channel.interceptor.MessageChannel . equals ( org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { this . org.springframework.integration.channel.interceptor.MessageChannel = org.springframework.integration.channel.interceptor.MessageChannel ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.channel.interceptor.MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ( ) { return org.springframework.integration.channel.interceptor.MessageChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , ChannelInterceptorAware org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) { return ! this . org.springframework.integration.channel.interceptor.MessageChannel . equals ( org.springframework.integration.channel.interceptor.ChannelInterceptorAware ) ; }  <METHOD_END>
