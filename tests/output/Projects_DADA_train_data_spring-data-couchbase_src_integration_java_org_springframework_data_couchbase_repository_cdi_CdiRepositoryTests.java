<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.cdi.CdiTestContainer = CdiTestContainerLoader . getCdiContainer ( ) ; org.springframework.data.couchbase.repository.cdi.CdiTestContainer . startApplicationScope ( ) ; org.springframework.data.couchbase.repository.cdi.CdiTestContainer . bootContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.cdi.CdiTestContainer . stopContexts ( ) ; org.springframework.data.couchbase.repository.cdi.CdiTestContainer . shutdownContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { CdiRepositoryClient org.springframework.data.couchbase.repository.cdi.CdiRepositoryClient = org.springframework.data.couchbase.repository.cdi.CdiTestContainer . getInstance ( CdiRepositoryClient .class ) ; org.springframework.data.couchbase.repository.cdi.CdiPersonRepository = org.springframework.data.couchbase.repository.cdi.CdiRepositoryClient . getCdiPersonRepository ( ) ; org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository = org.springframework.data.couchbase.repository.cdi.CdiRepositoryClient . getQualifiedPersonRepository ( ) ; org.springframework.data.couchbase.repository.cdi.Bucket = org.springframework.data.couchbase.repository.cdi.CdiRepositoryClient . getCouchbaseClient ( ) ; void ( org.springframework.data.couchbase.repository.cdi.Bucket ) ; }  <METHOD_END>
<METHOD_START> private void void ( Bucket org.springframework.data.couchbase.repository.cdi.Bucket ) { java.lang.String java.lang.String = STRING + Person .class . java.lang.String ( ) + STRING ; View org.springframework.data.couchbase.repository.cdi.View = DefaultView . create ( STRING , java.lang.String , STRING ) ; java.util.List<org.springframework.data.couchbase.repository.cdi.View> < View > java.util.List<org.springframework.data.couchbase.repository.cdi.View> = java.util.Collections . java.util.List ( org.springframework.data.couchbase.repository.cdi.View ) ; DesignDocument org.springframework.data.couchbase.repository.cdi.DesignDocument = DesignDocument . create ( STRING , java.util.List<org.springframework.data.couchbase.repository.cdi.View> ) ; org.springframework.data.couchbase.repository.cdi.Bucket . bucketManager ( ) . upsertDesignDocument ( org.springframework.data.couchbase.repository.cdi.DesignDocument ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.couchbase.repository.cdi.CdiPersonRepository ) ; org.springframework.data.couchbase.repository.cdi.CdiPersonRepository . deleteAll ( ) ; Person org.springframework.data.couchbase.repository.cdi.Person = new Person ( STRING , STRING ) ; org.springframework.data.couchbase.repository.cdi.CdiPersonRepository . save ( org.springframework.data.couchbase.repository.cdi.Person ) ; assertTrue ( org.springframework.data.couchbase.repository.cdi.CdiPersonRepository . exists ( org.springframework.data.couchbase.repository.cdi.Person . getId ( ) ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> < Person > java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> = org.springframework.data.couchbase.repository.cdi.CdiPersonRepository . findOne ( org.springframework.data.couchbase.repository.cdi.Person . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> . ifPresent ( actual -> { assertEquals ( bean . getName ( ) , actual . getName ( ) ) ; assertEquals ( bean . getId ( ) , actual . getId ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository ) ; org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository . deleteAll ( ) ; Person org.springframework.data.couchbase.repository.cdi.Person = new Person ( STRING , STRING ) ; org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository . save ( org.springframework.data.couchbase.repository.cdi.Person ) ; assertTrue ( org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository . exists ( org.springframework.data.couchbase.repository.cdi.Person . getId ( ) ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> < Person > java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> = org.springframework.data.couchbase.repository.cdi.QualifiedPersonRepository . findOne ( org.springframework.data.couchbase.repository.cdi.Person . getId ( ) ) ; assertTrue ( java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> . isPresent ( ) ) ; java.util.Optional<org.springframework.data.couchbase.repository.cdi.Person> . ifPresent ( actual -> { assertEquals ( bean . getName ( ) , actual . getName ( ) ) ; assertEquals ( bean . getId ( ) , actual . getId ( ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( NUMBER , org.springframework.data.couchbase.repository.cdi.CdiPersonRepository . returnTwo ( ) ) ; }  <METHOD_END>
