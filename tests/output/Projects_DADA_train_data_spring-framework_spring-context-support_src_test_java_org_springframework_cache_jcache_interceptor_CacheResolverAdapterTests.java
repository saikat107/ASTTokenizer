<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCacheInvocationContext < ? > org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> = org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> ( ) ; CacheResolverAdapter org.springframework.cache.jcache.interceptor.CacheResolverAdapter = new CacheResolverAdapter ( org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<> , STRING ) ) ; java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.jcache.interceptor.Cache> = org.springframework.cache.jcache.interceptor.CacheResolverAdapter . resolveCaches ( org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<> ) ; assertNotNull ( java.util.Collection<> ) ; assertEquals ( NUMBER , java.util.Collection<> . int ( ) ) ; assertEquals ( STRING , java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultCacheInvocationContext < ? > org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> = org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> ( ) ; CacheResolverAdapter org.springframework.cache.jcache.interceptor.CacheResolverAdapter = new CacheResolverAdapter ( org.springframework.cache.jcache.interceptor.CacheResolver ( org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<> , null ) ) ; org.springframework.cache.jcache.interceptor.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.cache.jcache.interceptor.CacheResolverAdapter . resolveCaches ( org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver ( CacheInvocationContext < ? extends java.lang.annotation.Annotation > org.springframework.cache.jcache.interceptor.CacheInvocationContext<? extends java.lang.annotation.Annotation> , java.lang.String java.lang.String ) { CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver = mock ( CacheResolver .class ) ; javax . javax.cache . javax.cache javax.cache.Cache ; if ( java.lang.String == null ) { javax.cache.Cache = null ; } else { javax.cache.Cache = mock ( javax . javax.cache . javax.cache .class ) ; given ( javax.cache.Cache . getName ( ) ) . willReturn ( java.lang.String ) ; } given ( org.springframework.cache.jcache.interceptor.CacheResolver . resolveCache ( org.springframework.cache.jcache.interceptor.CacheInvocationContext<> ) ) . willReturn ( javax.cache.Cache ) ; return org.springframework.cache.jcache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> < ? > org.springframework.cache.jcache.interceptor.DefaultCacheInvocationContext<?> ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.cache.jcache.interceptor.CacheResolverAdapterTests.Sample .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; CacheResult org.springframework.cache.jcache.interceptor.CacheResult = java.lang.reflect.Method . T ( CacheResult .class ) ; CacheMethodDetails < CacheResult > org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> = new DefaultCacheMethodDetails <> ( java.lang.reflect.Method , org.springframework.cache.jcache.interceptor.CacheResult , STRING ) ; CacheResultOperation org.springframework.cache.jcache.interceptor.CacheResultOperation = new CacheResultOperation ( org.springframework.cache.jcache.interceptor.CacheMethodDetails<org.springframework.cache.jcache.interceptor.CacheResult> , defaultCacheResolver , defaultKeyGenerator , defaultExceptionCacheResolver ) ; return new DefaultCacheInvocationContext <> ( org.springframework.cache.jcache.interceptor.CacheResultOperation , new org.springframework.cache.jcache.interceptor.CacheResolverAdapterTests.Sample ( ) , new java.lang.Object [] { STRING } ) ; }  <METHOD_END>
<METHOD_START> @ CacheResult public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
