<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; MessageConverter org.springframework.integration.amqp.config.MessageConverter = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageConverter .class ) ; MessageConverter org.springframework.integration.amqp.config.MessageConverter = TestUtils . getPropertyValue ( java.lang.Object , STRING , MessageConverter .class ) ; org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests.TestConverter org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests.TestConverter = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests.TestConverter .class ) ; assertSame ( org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests.TestConverter , org.springframework.integration.amqp.config.MessageConverter ) ; assertSame ( org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests.TestConverter , org.springframework.integration.amqp.config.MessageConverter ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ) ; assertTrue ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING ) ; assertSame ( java.lang.Object , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; Address org.springframework.integration.amqp.config.Address = TestUtils . getPropertyValue ( java.lang.Object , STRING , Address .class ) ; Address org.springframework.integration.amqp.config.Address = new Address ( STRING ) ; assertEquals ( org.springframework.integration.amqp.config.Address . getExchangeName ( ) , org.springframework.integration.amqp.config.Address . getExchangeName ( ) ) ; assertEquals ( org.springframework.integration.amqp.config.Address . getRoutingKey ( ) , org.springframework.integration.amqp.config.Address . getRoutingKey ( ) ) ; assertEquals ( org.springframework.integration.amqp.config.Address , org.springframework.integration.amqp.config.Address ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DirectChannel org.springframework.integration.amqp.config.DirectChannel = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , DirectChannel .class ) ; org.springframework.integration.amqp.config.DirectChannel . subscribe ( siMessage -> { org . springframework . messaging . Message < ? > replyMessage = MessageBuilder . fromMessage ( siMessage ) . setHeader ( STRING , STRING ) . build ( ) ; MessageChannel replyChannel = ( MessageChannel ) siMessage . getHeaders ( ) . getReplyChannel ( ) ; replyChannel . send ( replyMessage ) ; } ) ; final AmqpInboundGateway org.springframework.integration.amqp.config.AmqpInboundGateway = org.springframework.integration.amqp.config.ApplicationContext . getBean ( STRING , AmqpInboundGateway .class ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( AmqpInboundGateway .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; RabbitTemplate org.springframework.integration.amqp.config.RabbitTemplate = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundGateway , STRING , RabbitTemplate .class ) ; org.springframework.integration.amqp.config.RabbitTemplate = Mockito . spy ( org.springframework.integration.amqp.config.RabbitTemplate ) ; Mockito . doAnswer ( invocation -> { Object [] args = invocation . getArguments ( ) ; Message amqpReplyMessage = ( Message ) args [ NUMBER ] ; MessageProperties properties = amqpReplyMessage . getMessageProperties ( ) ; assertEquals ( STRING , properties . getHeaders ( ) . get ( STRING ) ) ; return null ; } ) . when ( org.springframework.integration.amqp.config.RabbitTemplate ) . send ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( Message .class ) , isNull ( ) ) ; ReflectionUtils . setField ( java.lang.reflect.Field , org.springframework.integration.amqp.config.AmqpInboundGateway , org.springframework.integration.amqp.config.RabbitTemplate ) ; AbstractMessageListenerContainer org.springframework.integration.amqp.config.AbstractMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AmqpInboundGateway , STRING , AbstractMessageListenerContainer .class ) ; ChannelAwareMessageListener org.springframework.integration.amqp.config.ChannelAwareMessageListener = TestUtils . getPropertyValue ( org.springframework.integration.amqp.config.AbstractMessageListenerContainer , STRING , ChannelAwareMessageListener .class ) ; MessageProperties org.springframework.integration.amqp.config.MessageProperties = new MessageProperties ( ) ; org.springframework.integration.amqp.config.MessageProperties . setAppId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setClusterId ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentEncoding ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentLength ( NUMBER ) ; org.springframework.integration.amqp.config.MessageProperties . setReplyTo ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setContentType ( STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; org.springframework.integration.amqp.config.MessageProperties . setHeader ( STRING , STRING ) ; Message org.springframework.integration.amqp.config.Message = new Message ( STRING . byte[] ( ) , org.springframework.integration.amqp.config.MessageProperties ) ; org.springframework.integration.amqp.config.ChannelAwareMessageListener . onMessage ( org.springframework.integration.amqp.config.Message , null ) ; Mockito . verify ( org.springframework.integration.amqp.config.RabbitTemplate , Mockito . times ( NUMBER ) ) . send ( Mockito . any ( java.lang.String .class ) , Mockito . any ( java.lang.String .class ) , Mockito . any ( Message .class ) , isNull ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.amqp.config.AmqpInboundGatewayParserTests> ( ) ) . close ( ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.amqp.config.BeanDefinitionParsingException ) { assertTrue ( org.springframework.integration.amqp.config.BeanDefinitionParsingException . getMessage ( ) . startsWith ( STRING + STRING ) ) ; } }  <METHOD_END>
