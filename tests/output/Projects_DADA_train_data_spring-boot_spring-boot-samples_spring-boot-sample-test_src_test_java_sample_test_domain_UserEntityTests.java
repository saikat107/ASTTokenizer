<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.test.domain.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . sample.test.domain.ExpectedException . expectMessage ( STRING ) ; new User ( null , sample.test.domain.VehicleIdentificationNumber ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.test.domain.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . sample.test.domain.ExpectedException . expectMessage ( STRING ) ; new User ( STRING , sample.test.domain.VehicleIdentificationNumber ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.test.domain.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . sample.test.domain.ExpectedException . expectMessage ( STRING ) ; new User ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { User sample.test.domain.User = this . sample.test.domain.TestEntityManager . persistFlushFind ( new User ( STRING , sample.test.domain.VehicleIdentificationNumber ) ) ; assertThat ( sample.test.domain.User . getUsername ( ) ) . isEqualTo ( STRING ) ; assertThat ( sample.test.domain.User . getVin ( ) ) . isEqualTo ( sample.test.domain.VehicleIdentificationNumber ) ; }  <METHOD_END>
