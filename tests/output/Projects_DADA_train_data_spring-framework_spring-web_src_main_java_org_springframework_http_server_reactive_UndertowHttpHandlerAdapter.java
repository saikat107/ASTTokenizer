<METHOD_START> public void ( HttpHandler org.springframework.http.server.reactive.HttpHandler ) { Assert . notNull ( org.springframework.http.server.reactive.HttpHandler , STRING ) ; this . org.springframework.http.server.reactive.HttpHandler = org.springframework.http.server.reactive.HttpHandler ; }  <METHOD_END>
<METHOD_START> public void void ( DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ) { Assert . notNull ( org.springframework.http.server.reactive.DataBufferFactory , STRING ) ; this . org.springframework.http.server.reactive.DataBufferFactory = org.springframework.http.server.reactive.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.DataBufferFactory org.springframework.http.server.reactive.DataBufferFactory ( ) { return this . org.springframework.http.server.reactive.DataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ) throws java.lang.Exception { ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest = new UndertowServerHttpRequest ( org.springframework.http.server.reactive.HttpServerExchange , org.springframework.http.server.reactive.DataBufferFactory ( ) ) ; ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse = new UndertowServerHttpResponse ( org.springframework.http.server.reactive.HttpServerExchange , org.springframework.http.server.reactive.DataBufferFactory ( ) ) ; org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.HandlerResultSubscriber org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.HandlerResultSubscriber = new org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.HandlerResultSubscriber ( org.springframework.http.server.reactive.HttpServerExchange ) ; this . org.springframework.http.server.reactive.HttpHandler . handle ( org.springframework.http.server.reactive.ServerHttpRequest , org.springframework.http.server.reactive.ServerHttpResponse ) . subscribe ( org.springframework.http.server.reactive.UndertowHttpHandlerAdapter.HandlerResultSubscriber ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpServerExchange org.springframework.http.server.reactive.HttpServerExchange ) { this . org.springframework.http.server.reactive.HttpServerExchange = org.springframework.http.server.reactive.HttpServerExchange ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Subscription org.springframework.http.server.reactive.Subscription ) { org.springframework.http.server.reactive.Subscription . request ( java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Void java.lang.Void ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.http.server.reactive.Log . error ( STRING , java.lang.Throwable ) ; if ( ! this . org.springframework.http.server.reactive.HttpServerExchange . isResponseStarted ( ) && this . org.springframework.http.server.reactive.HttpServerExchange . getStatusCode ( ) < NUMBER ) { this . org.springframework.http.server.reactive.HttpServerExchange . setStatusCode ( NUMBER ) ; } this . org.springframework.http.server.reactive.HttpServerExchange . endExchange ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.http.server.reactive.Log . debug ( STRING ) ; this . org.springframework.http.server.reactive.HttpServerExchange . endExchange ( ) ; }  <METHOD_END>
