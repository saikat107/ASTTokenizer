<METHOD_START> @ Before public void void ( ) { EmbeddedDatabaseConnection . override = null ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING + new java.util.Random ( ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { EmbeddedDatabaseConnection . override = null ; if ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceInitializer .class , PropertyPlaceholderAutoConfiguration .class , DataSourceProperties .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeanNamesForType ( javax.sql.DataSource .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( TwoDataSources .class , DataSourceInitializer .class , PropertyPlaceholderAutoConfiguration .class , DataSourceProperties .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBeanNamesForType ( javax.sql.DataSource .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource instanceof org . org.apache . org.apache . org.apache . org.apache . org.apache ) . isTrue ( ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; JdbcOperations org.springframework.boot.autoconfigure.jdbc.JdbcOperations = new JdbcTemplate ( javax.sql.DataSource ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.JdbcOperations . queryForObject ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerTests> ( ) , STRING ) , STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerTests> ( ) , STRING ) ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource instanceof org . org.apache . org.apache . org.apache . org.apache . org.apache ) . isTrue ( ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; JdbcOperations org.springframework.boot.autoconfigure.jdbc.JdbcOperations = new JdbcTemplate ( javax.sql.DataSource ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.JdbcOperations . queryForObject ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext , STRING , STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerTests> ( ) , STRING ) + STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerTests> ( ) , STRING ) , STRING + ClassUtils . addResourcePathToPackagePath ( java.lang.Class<? extends org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerTests> ( ) , STRING ) ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . register ( DataSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . refresh ( ) ; javax.sql.DataSource javax.sql.DataSource = this . org.springframework.boot.autoconfigure.jdbc.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ; assertThat ( javax.sql.DataSource instanceof org . org.apache . org.apache . org.apache . org.apache . org.apache ) . isTrue ( ) ; assertThat ( javax.sql.DataSource ) . isNotNull ( ) ; JdbcOperations org.springframework.boot.autoconfigure.jdbc.JdbcOperations = new JdbcTemplate ( javax.sql.DataSource ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.JdbcOperations . queryForObject ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jdbc.JdbcOperations . queryForObject ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception {		this.context.register(DataSourceAutoConfiguration.class,				PropertyPlaceholderAutoConfiguration.class);		EnvironmentTestUtils.addEnvironment(this.context,				"spring.datasource.initialize:true",				"spring.datasource.sqlScriptEncoding:UTF-8",				"spring.datasource.schema:" + ClassUtils						.addResourcePathToPackagePath(getClass(), "encoding-schema.sql"),				"spring.datasource.data:" + ClassUtils						.addResourcePathToPackagePath(getClass(), "encoding-data.  <METHOD_END>
