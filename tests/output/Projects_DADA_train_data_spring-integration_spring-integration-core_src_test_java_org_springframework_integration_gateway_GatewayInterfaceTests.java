<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.GatewayInterfaceTests.Foo .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = message -> { assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( Method ) message . getHeaders ( ) . get ( STRING ) , equalTo ( fooMethod ) ) ; assertThat ( ( String ) message . getPayload ( ) , equalTo ( STRING ) ) ; assertThat ( new MessageHeaderAccessor ( message ) . getErrorChannel ( ) , equalTo ( STRING ) ) ; called . set ( true ) ; } ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . void ( STRING ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING ) , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.GatewayInterfaceTests.Foo .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = message -> { assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( Method ) message . getHeaders ( ) . get ( STRING ) , equalTo ( fooMethod ) ) ; assertThat ( ( String ) message . getPayload ( ) , equalTo ( STRING ) ) ; called . set ( true ) ; } ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . void ( STRING ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . void ( STRING ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.GatewayInterfaceTests.Foo .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = message -> { assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( Method ) message . getHeaders ( ) . get ( STRING ) , equalTo ( bazMethod ) ) ; assertThat ( ( String ) message . getPayload ( ) , equalTo ( STRING ) ) ; called . set ( true ) ; } ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . void ( STRING ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; final java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class . java.lang.reflect.Method ( STRING , java.lang.String .class , java.lang.String .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = message -> { assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( String ) message . getHeaders ( ) . get ( STRING ) , equalTo ( STRING ) ) ; assertThat ( ( Method ) message . getHeaders ( ) . get ( STRING ) , equalTo ( quxMethod ) ) ; assertThat ( ( String ) message . getPayload ( ) , equalTo ( STRING ) ) ; called . set ( true ) ; } ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . void ( STRING , STRING ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Foo org.springframework.integration.gateway.GatewayInterfaceTests.Foo = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Foo .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Foo . void ( STRING ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Foo org.springframework.integration.gateway.GatewayInterfaceTests.Foo = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Foo .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Foo . void ( STRING ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; assertEquals ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar . int ( ) , org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) . hashCode ( ) ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . java.lang.String ( ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; assertTrue ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar . boolean ( org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ) ) ; GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean = new GatewayProxyFactoryBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; DefaultListableBeanFactory org.springframework.integration.gateway.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.gateway.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.gateway.DirectChannel ) ; org.springframework.integration.gateway.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.gateway.DirectChannel ) ; org.springframework.integration.gateway.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.gateway.DirectChannel ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . setBeanFactory ( org.springframework.integration.gateway.DefaultListableBeanFactory ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean . afterPropertiesSet ( ) ; assertFalse ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar . boolean ( org.springframework.integration.gateway.GatewayProxyFactoryBean . getObject ( ) ) ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = mock ( MessageHandler .class ) ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests.Bar> ( ) ; verify ( org.springframework.integration.gateway.MessageHandler , times ( NUMBER ) ) . handleMessage ( Mockito . any ( Message .class ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new GatewayProxyFactoryBean ( org.springframework.integration.gateway.GatewayInterfaceTests.NotAnInterface .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; DirectChannel org.springframework.integration.gateway.DirectChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , DirectChannel .class ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; MessageHandler org.springframework.integration.gateway.MessageHandler = message -> { assertThat ( ( String ) message . getPayload ( ) , equalTo ( STRING ) ) ; called . set ( true ) ; } ; org.springframework.integration.gateway.DirectChannel . subscribe ( org.springframework.integration.gateway.MessageHandler ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Baz org.springframework.integration.gateway.GatewayInterfaceTests.Baz = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Baz .class ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Baz . void ( STRING ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.gateway.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.gateway.GatewayInterfaceTests> ( ) ) ; org.springframework.integration.gateway.GatewayInterfaceTests.Bar org.springframework.integration.gateway.GatewayInterfaceTests.Bar = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( org.springframework.integration.gateway.GatewayInterfaceTests.Bar .class ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayInterfaceTests.Bar . java.lang.String ( STRING ) ; assertNull ( java.lang.String ) ; PollableChannel org.springframework.integration.gateway.PollableChannel = org.springframework.integration.gateway.ConfigurableApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.gateway.Message<?> = org.springframework.integration.gateway.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.gateway.Message<> ) ; MessagingException org.springframework.integration.gateway.MessagingException = ( MessagingException ) org.springframework.integration.gateway.Message<> . getPayload ( ) ; assertThat ( org.springframework.integration.gateway.MessagingException . getMessage ( ) , Matchers . startsWith ( STRING ) ) ; org.springframework.integration.gateway.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = java.util.Collections .< java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( NUMBER , NUMBER ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.gateway.GatewayInterfaceTests.Int2634Gateway . java.lang.Object ( java.util.Map<java.lang.Object,java.lang.Object> ) ; assertEquals ( java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Object ) ; java.lang.Object = this . org.springframework.integration.gateway.GatewayInterfaceTests.Int2634Gateway . java.lang.Object ( java.util.Map<java.lang.Object,java.lang.Object> ) ; assertEquals ( java.util.Map<java.lang.Object,java.lang.Object> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertSame ( org.springframework.integration.gateway.SimpleAsyncTaskExecutor , TestUtils . getPropertyValue ( org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING ) ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING ) ) ; java.util.concurrent.Future<java.lang.Thread> < java.lang.Thread > java.util.concurrent.Future<java.lang.Thread> = this . org.springframework.integration.gateway.GatewayInterfaceTests.Int2634Gateway . java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread . java.lang.Thread ( ) ) ; assertNotEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.Future<java.lang.Thread> . java.lang.Thread ( ) ) ; assertThat ( java.util.concurrent.Future<java.lang.Thread> . java.lang.Thread ( ) . java.lang.String ( ) , startsWith ( STRING ) ) ; java.util.concurrent.Future<java.lang.Thread> = this . org.springframework.integration.gateway.GatewayInterfaceTests.ExecGateway . java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread . java.lang.Thread ( ) ) ; assertNotEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.Future<java.lang.Thread> . java.lang.Thread ( ) ) ; assertThat ( java.util.concurrent.Future<java.lang.Thread> . java.lang.Thread ( ) . java.lang.String ( ) , startsWith ( STRING ) ) ; java.util.concurrent.Future<java.lang.Thread> = this . org.springframework.integration.gateway.GatewayInterfaceTests.NoExecGateway . java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread . java.lang.Thread ( ) ) ; assertEquals ( java.lang.Thread . java.lang.Thread ( ) , java.util.concurrent.Future<java.lang.Thread> . java.lang.Thread ( ) ) ; ListenableFuture < java.lang.Thread > org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> = this . org.springframework.integration.gateway.GatewayInterfaceTests.ExecGateway . org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> ( java.lang.Thread . java.lang.Thread ( ) ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > java.util.concurrent.atomic.AtomicReference<java.lang.Thread> = new java.util.concurrent.atomic.AtomicReference<java.lang.Thread> < java.lang.Thread > ( ) ; org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> . addCallback ( new ListenableFutureCallback < java.lang.Thread > ( ) { @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread ) ; java.util.concurrent.CountDownLatch . void ( ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {			} } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertThat ( org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> . get ( ) . getName ( ) , startsWith ( STRING ) ) ; assertNull ( this . org.springframework.integration.gateway.GatewayInterfaceTests.NotAGatewayByScanFilter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Thread java.lang.Thread ) { java.util.concurrent.atomic.AtomicReference<java.lang.Thread> . void ( java.lang.Thread ) ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) {			}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , this . org.springframework.integration.gateway.GatewayInterfaceTests.AutoCreateChannelService . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertNotNull ( this . org.springframework.integration.gateway.GatewayInterfaceTests.GatewayByAnnotationGPFB ) ; assertSame ( this . org.springframework.integration.gateway.SimpleAsyncTaskExecutor , this . org.springframework.integration.gateway.GatewayProxyFactoryBean . getAsyncExecutor ( ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.gateway.GatewayProxyFactoryBean , STRING ) ) ; java.util.Collection<org.springframework.integration.gateway.MessagingGatewaySupport> < MessagingGatewaySupport > java.util.Collection<org.springframework.integration.gateway.MessagingGatewaySupport> = this . org.springframework.integration.gateway.GatewayProxyFactoryBean . getGateways ( ) . values ( ) ; assertEquals ( NUMBER , java.util.Collection<org.springframework.integration.gateway.MessagingGatewaySupport> . size ( ) ) ; MessagingGatewaySupport org.springframework.integration.gateway.MessagingGatewaySupport = java.util.Collection<org.springframework.integration.gateway.MessagingGatewaySupport> . iterator ( ) . next ( ) ; assertSame ( this . org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.MessagingGatewaySupport . getRequestChannel ( ) ) ; assertSame ( this . org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.MessagingGatewaySupport . getReplyChannel ( ) ) ; assertSame ( this . org.springframework.integration.gateway.MessageChannel , org.springframework.integration.gateway.MessagingGatewaySupport . getErrorChannel ( ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( org.springframework.integration.gateway.MessagingGatewaySupport , STRING ) ; assertEquals ( STRING , TestUtils . getPropertyValue ( java.lang.Object , STRING ) ) ; java.util.Map java.util.Map = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map . int ( ) ) ; java.lang.Object java.lang.Object = java.util.Map . java.lang.Object ( STRING ) ; assertNotNull ( java.lang.Object ) ; assertThat ( java.lang.Object , instanceOf ( LiteralExpression .class ) ) ; assertEquals ( STRING , ( ( LiteralExpression ) java.lang.Object ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String , @ Header ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( MethodArgsHolder org.springframework.integration.gateway.MethodArgsHolder ) throws java.lang.Exception { return MessageBuilder . withPayload ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . org.springframework.integration.gateway.GatewayInterfaceTests.AutoCreateChannelGateway . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo public org.springframework.integration.gateway.MessageChannel org.springframework.integration.gateway.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ BridgeTo public org.springframework.integration.gateway.MessageChannel org.springframework.integration.gateway.MessageChannel ( ) { DirectChannel org.springframework.integration.gateway.DirectChannel = new DirectChannel ( ) ; org.springframework.integration.gateway.DirectChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( Message < ? > org.springframework.integration.gateway.Message<?> , MessageChannel org.springframework.integration.gateway.MessageChannel ) { java.lang.Object java.lang.Object ; if ( java.lang.Thread . java.lang.Thread ( ) . boolean ( org.springframework.integration.gateway.Message<> . getPayload ( ) ) ) { java.lang.Object = new AsyncResult < java.lang.Thread > ( java.lang.Thread . java.lang.Thread ( ) ) ; } else { java.lang.Object = java.lang.Thread . java.lang.Thread ( ) ; } return MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.gateway.Message<> . getHeaders ( ) ) . build ( ) ; } } ) ; return org.springframework.integration.gateway.DirectChannel ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.gateway.Message<?> < ? > org.springframework.integration.gateway.Message<?> ( Message < ? > org.springframework.integration.gateway.Message<?> , MessageChannel org.springframework.integration.gateway.MessageChannel ) { java.lang.Object java.lang.Object ; if ( java.lang.Thread . java.lang.Thread ( ) . boolean ( org.springframework.integration.gateway.Message<> . getPayload ( ) ) ) { java.lang.Object = new AsyncResult < java.lang.Thread > ( java.lang.Thread . java.lang.Thread ( ) ) ; } else { java.lang.Object = java.lang.Thread . java.lang.Thread ( ) ; } return MessageBuilder . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.gateway.Message<> . getHeaders ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.gateway.AsyncTaskExecutor org.springframework.integration.gateway.AsyncTaskExecutor ( ) { SimpleAsyncTaskExecutor org.springframework.integration.gateway.SimpleAsyncTaskExecutor = new SimpleAsyncTaskExecutor ( ) ; org.springframework.integration.gateway.SimpleAsyncTaskExecutor . setThreadNamePrefix ( STRING ) ; return org.springframework.integration.gateway.SimpleAsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.gateway.MessageHandler org.springframework.integration.gateway.MessageHandler ( ) { return new BridgeHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.gateway.GatewayProxyFactoryBean org.springframework.integration.gateway.GatewayProxyFactoryBean ( ) { return new AnnotationGatewayProxyFactoryBean ( org.springframework.integration.gateway.GatewayInterfaceTests.GatewayByAnnotationGPFB .class ) ; }  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING , payloadExpression = STRING ) java.lang.Object java.lang.Object ( java.util.Map<java.lang.Object,?> < java.lang.Object , ? > java.util.Map<java.lang.Object,?> );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) java.lang.Object java.lang.Object ( @ Payload java.util.Map<java.lang.Object,?> < java.lang.Object , ? > java.util.Map<java.lang.Object,?> );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) java.util.concurrent.Future<java.lang.Thread> < java.lang.Thread > java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread java.lang.Thread );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) java.util.concurrent.Future<java.lang.Thread> < java.lang.Thread > java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread java.lang.Thread );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> < java.lang.Thread > org.springframework.integration.gateway.ListenableFuture<java.lang.Thread> ( java.lang.Thread java.lang.Thread );  <METHOD_END>
<METHOD_START> @ Gateway ( requestChannel = STRING ) java.util.concurrent.Future<java.lang.Thread> < java.lang.Thread > java.util.concurrent.Future<java.lang.Thread> ( java.lang.Thread java.lang.Thread );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
