<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { this( boolean , new StandardEnvironment ( ) ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean , Environment org.springframework.context.annotation.Environment ) { if ( boolean ) { void ( ) ; } void ( org.springframework.context.annotation.Environment ) ; void ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( TypeFilter org.springframework.context.annotation.TypeFilter ) { this . java.util.List<org.springframework.context.annotation.TypeFilter> . add ( org.springframework.context.annotation.TypeFilter ) ; }  <METHOD_END>
<METHOD_START> public void void ( TypeFilter org.springframework.context.annotation.TypeFilter ) { this . java.util.List<org.springframework.context.annotation.TypeFilter> . add ( NUMBER , org.springframework.context.annotation.TypeFilter ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.util.List<org.springframework.context.annotation.TypeFilter> . clear ( ) ; this . java.util.List<org.springframework.context.annotation.TypeFilter> . clear ( ) ; if ( boolean ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( ) { this . java.util.List<org.springframework.context.annotation.TypeFilter> . add ( new AnnotationTypeFilter ( Component .class ) ) ; java.lang.ClassLoader java.lang.ClassLoader = org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider .class . java.lang.ClassLoader ( ) ; try { this . java.util.List<org.springframework.context.annotation.TypeFilter> . add ( new AnnotationTypeFilter ( ( ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) , false ) ) ; org.springframework.context.annotation.Log . debug ( STRING ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } try { this . java.util.List<org.springframework.context.annotation.TypeFilter> . add ( new AnnotationTypeFilter ( ( ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > ) ClassUtils . forName ( STRING , java.lang.ClassLoader ) ) , false ) ) ; org.springframework.context.annotation.Log . debug ( STRING ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { } }  <METHOD_END>
<METHOD_START> public void void ( Environment org.springframework.context.annotation.Environment ) { Assert . notNull ( org.springframework.context.annotation.Environment , STRING ) ; this . org.springframework.context.annotation.Environment = org.springframework.context.annotation.Environment ; this . org.springframework.context.annotation.ConditionEvaluator = null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.context.annotation.Environment org.springframework.context.annotation.Environment ( ) { return this . org.springframework.context.annotation.Environment ; }  <METHOD_END>
<METHOD_START> protected org.springframework.context.annotation.BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ResourceLoader org.springframework.context.annotation.ResourceLoader ) { this . org.springframework.context.annotation.ResourcePatternResolver = ResourcePatternUtils . getResourcePatternResolver ( org.springframework.context.annotation.ResourceLoader ) ; this . org.springframework.context.annotation.MetadataReaderFactory = new CachingMetadataReaderFactory ( org.springframework.context.annotation.ResourceLoader ) ; this . org.springframework.context.annotation.CandidateComponentsIndex = CandidateComponentsIndexLoader . loadIndex ( this . org.springframework.context.annotation.ResourcePatternResolver . getClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.ResourceLoader org.springframework.context.annotation.ResourceLoader ( ) { return this . org.springframework.context.annotation.ResourcePatternResolver ; }  <METHOD_END>
<METHOD_START> public void void ( MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ) { this . org.springframework.context.annotation.MetadataReaderFactory = org.springframework.context.annotation.MetadataReaderFactory ; }  <METHOD_END>
<METHOD_START> public final org.springframework.context.annotation.MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ( ) { return this . org.springframework.context.annotation.MetadataReaderFactory ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { return java.util.Set<org.springframework.context.annotation.BeanDefinition> ( java.lang.String ) ; } else { return java.util.Set<org.springframework.context.annotation.BeanDefinition> ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { if ( this . org.springframework.context.annotation.CandidateComponentsIndex == null ) { return false ; } for ( TypeFilter org.springframework.context.annotation.TypeFilter : this . java.util.List<org.springframework.context.annotation.TypeFilter> ) { if ( ! boolean ( org.springframework.context.annotation.TypeFilter ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( TypeFilter org.springframework.context.annotation.TypeFilter ) { if ( org.springframework.context.annotation.TypeFilter instanceof AnnotationTypeFilter ) { java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = ( ( AnnotationTypeFilter ) org.springframework.context.annotation.TypeFilter ) . getAnnotationType ( ) ; return ( AnnotationUtils . isAnnotationDeclaredLocally ( Indexed .class , java.lang.Class<> ) || java.lang.Class<> . java.lang.String ( ) . boolean ( STRING ) ) ; } if ( org.springframework.context.annotation.TypeFilter instanceof AssignableTypeFilter ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( AssignableTypeFilter ) org.springframework.context.annotation.TypeFilter ) . getTargetType ( ) ; return AnnotationUtils . isAnnotationDeclaredLocally ( Indexed .class , java.lang.Class<> ) ; } return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( TypeFilter org.springframework.context.annotation.TypeFilter ) { if ( org.springframework.context.annotation.TypeFilter instanceof AnnotationTypeFilter ) { return ( ( AnnotationTypeFilter ) org.springframework.context.annotation.TypeFilter ) . getAnnotationType ( ) . getName ( ) ; } if ( org.springframework.context.annotation.TypeFilter instanceof AssignableTypeFilter ) { return ( ( AssignableTypeFilter ) org.springframework.context.annotation.TypeFilter ) . getTargetType ( ) . getName ( ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = new java.util.LinkedHashSet<org.springframework.context.annotation.BeanDefinition> <> ( ) ; try { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( TypeFilter org.springframework.context.annotation.TypeFilter : this . java.util.List<org.springframework.context.annotation.TypeFilter> ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.context.annotation.TypeFilter ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.context.annotation.TypeFilter ) ; } java.util.Set<java.lang.String> . boolean ( this . org.springframework.context.annotation.CandidateComponentsIndex . getCandidateTypes ( java.lang.String , java.lang.String ) ) ; } boolean boolean = org.springframework.context.annotation.Log . isTraceEnabled ( ) ; boolean boolean = org.springframework.context.annotation.Log . isDebugEnabled ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { MetadataReader org.springframework.context.annotation.MetadataReader = this . org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; if ( boolean ( org.springframework.context.annotation.MetadataReader ) ) { AnnotatedGenericBeanDefinition org.springframework.context.annotation.AnnotatedGenericBeanDefinition = new AnnotatedGenericBeanDefinition ( org.springframework.context.annotation.MetadataReader . getAnnotationMetadata ( ) ) ; if ( boolean ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ) { if ( boolean ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String ) ; } java.util.Set<org.springframework.context.annotation.BeanDefinition> . add ( org.springframework.context.annotation.AnnotatedGenericBeanDefinition ) ; } else { if ( boolean ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String ) ; } } } else { if ( boolean ) { org.springframework.context.annotation.Log . trace ( STRING + java.lang.String ) ; } } } } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING , java.io.IOException ) ; } return java.util.Set<org.springframework.context.annotation.BeanDefinition> ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.context.annotation.BeanDefinition> < BeanDefinition > java.util.Set<org.springframework.context.annotation.BeanDefinition> = new java.util.LinkedHashSet<org.springframework.context.annotation.BeanDefinition> <> ( ) ; try { java.lang.String java.lang.String = ResourcePatternResolver . CLASSPATH_ALL_URL_PREFIX + java.lang.String ( java.lang.String ) + '/' + this . java.lang.String ; Resource [] org.springframework.context.annotation.Resource[] = this . org.springframework.context.annotation.ResourcePatternResolver . getResources ( java.lang.String ) ; boolean boolean = org.springframework.context.annotation.Log . isTraceEnabled ( ) ; boolean boolean = org.springframework.context.annotation.Log . isDebugEnabled ( ) ; for ( Resource org.springframework.context.annotation.Resource : org.springframework.context.annotation.Resource[] ) { if ( boolean ) { org.springframework.context.annotation.Log . trace ( STRING + org.springframework.context.annotation.Resource ) ; } if ( org.springframework.context.annotation.Resource . isReadable ( ) ) { try { MetadataReader org.springframework.context.annotation.MetadataReader = this . org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( org.springframework.context.annotation.Resource ) ; if ( boolean ( org.springframework.context.annotation.MetadataReader ) ) { ScannedGenericBeanDefinition org.springframework.context.annotation.ScannedGenericBeanDefinition = new ScannedGenericBeanDefinition ( org.springframework.context.annotation.MetadataReader ) ; org.springframework.context.annotation.ScannedGenericBeanDefinition . setResource ( org.springframework.context.annotation.Resource ) ; org.springframework.context.annotation.ScannedGenericBeanDefinition . setSource ( org.springframework.context.annotation.Resource ) ; if ( boolean ( org.springframework.context.annotation.ScannedGenericBeanDefinition ) ) { if ( boolean ) { org.springframework.context.annotation.Log . debug ( STRING + org.springframework.context.annotation.Resource ) ; } java.util.Set<org.springframework.context.annotation.BeanDefinition> . add ( org.springframework.context.annotation.ScannedGenericBeanDefinition ) ; } else { if ( boolean ) { org.springframework.context.annotation.Log . debug ( STRING + org.springframework.context.annotation.Resource ) ; } } } else { if ( boolean ) { org.springframework.context.annotation.Log . trace ( STRING + org.springframework.context.annotation.Resource ) ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new BeanDefinitionStoreException ( STRING + org.springframework.context.annotation.Resource , java.lang.Throwable ) ; } } else { if ( boolean ) { org.springframework.context.annotation.Log . trace ( STRING + org.springframework.context.annotation.Resource ) ; } } } } catch ( java.io.IOException java.io.IOException ) { throw new BeanDefinitionStoreException ( STRING , java.io.IOException ) ; } return java.util.Set<org.springframework.context.annotation.BeanDefinition> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return ClassUtils . convertClassNameToResourcePath ( this . org.springframework.context.annotation.Environment . resolveRequiredPlaceholders ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MetadataReader org.springframework.context.annotation.MetadataReader ) throws java.io.IOException { for ( TypeFilter org.springframework.context.annotation.TypeFilter : this . java.util.List<org.springframework.context.annotation.TypeFilter> ) { if ( org.springframework.context.annotation.TypeFilter . match ( org.springframework.context.annotation.MetadataReader , this . org.springframework.context.annotation.MetadataReaderFactory ) ) { return false ; } } for ( TypeFilter org.springframework.context.annotation.TypeFilter : this . java.util.List<org.springframework.context.annotation.TypeFilter> ) { if ( org.springframework.context.annotation.TypeFilter . match ( org.springframework.context.annotation.MetadataReader , this . org.springframework.context.annotation.MetadataReaderFactory ) ) { return boolean ( org.springframework.context.annotation.MetadataReader ) ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MetadataReader org.springframework.context.annotation.MetadataReader ) { if ( this . org.springframework.context.annotation.ConditionEvaluator == null ) { this . org.springframework.context.annotation.ConditionEvaluator = new ConditionEvaluator ( org.springframework.context.annotation.BeanDefinitionRegistry ( ) , org.springframework.context.annotation.Environment ( ) , org.springframework.context.annotation.ResourceLoader ( ) ) ; } return ! this . org.springframework.context.annotation.ConditionEvaluator . shouldSkip ( org.springframework.context.annotation.MetadataReader . getAnnotationMetadata ( ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) ; return ( org.springframework.context.annotation.AnnotationMetadata . isIndependent ( ) && ( org.springframework.context.annotation.AnnotationMetadata . isConcrete ( ) || ( org.springframework.context.annotation.AnnotationMetadata . isAbstract ( ) && org.springframework.context.annotation.AnnotationMetadata . hasAnnotatedMethods ( Lookup .class . java.lang.String ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { if ( this . org.springframework.context.annotation.MetadataReaderFactory instanceof CachingMetadataReaderFactory ) { ( ( CachingMetadataReaderFactory ) this . org.springframework.context.annotation.MetadataReaderFactory ) . clearCache ( ) ; } }  <METHOD_END>
