<METHOD_START> @ Test public void void ( ) { ConcurrentMetadataStore org.springframework.integration.handler.advice.ConcurrentMetadataStore = new SimpleMetadataStore ( ) ; ExpressionEvaluatingMessageProcessor < java.lang.String > org.springframework.integration.handler.advice.ExpressionEvaluatingMessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor <> ( new SpelExpressionParser ( ) . parseExpression ( STRING ) ) ; BeanFactory org.springframework.integration.handler.advice.BeanFactory = Mockito . mock ( BeanFactory .class ) ; org.springframework.integration.handler.advice.ExpressionEvaluatingMessageProcessor<java.lang.String> . setBeanFactory ( org.springframework.integration.handler.advice.BeanFactory ) ; IdempotentReceiverInterceptor org.springframework.integration.handler.advice.IdempotentReceiverInterceptor = new IdempotentReceiverInterceptor ( new MetadataStoreSelector ( org.springframework.integration.handler.advice.ExpressionEvaluatingMessageProcessor<java.lang.String> , org.springframework.integration.handler.advice.ConcurrentMetadataStore ) ) ; org.springframework.integration.handler.advice.IdempotentReceiverInterceptor . setThrowExceptionOnRejection ( true ) ; java.util.concurrent.atomic.AtomicReference<org.springframework.integration.handler.advice.Message<?>> < Message < ? > > java.util.concurrent.atomic.AtomicReference<org.springframework.integration.handler.advice.Message<?>> = new java.util.concurrent.atomic.AtomicReference<org.springframework.integration.handler.advice.Message<?>> <> ( ) ; MessageHandler org.springframework.integration.handler.advice.MessageHandler = java.util.concurrent.atomic.AtomicReference<org.springframework.integration.handler.advice.Message<?>> :: set ; ProxyFactory org.springframework.integration.handler.advice.ProxyFactory = new ProxyFactory ( org.springframework.integration.handler.advice.MessageHandler ) ; org.springframework.integration.handler.advice.ProxyFactory . addAdvice ( org.springframework.integration.handler.advice.IdempotentReceiverInterceptor ) ; org.springframework.integration.handler.advice.MessageHandler = ( MessageHandler ) org.springframework.integration.handler.advice.ProxyFactory . getProxy ( ) ; org.springframework.integration.handler.advice.MessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.handler.advice.ConcurrentMetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; assertNotNull ( org.springframework.integration.handler.advice.ConcurrentMetadataStore . get ( STRING ) ) ; try { org.springframework.integration.handler.advice.MessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageRejectedException .class ) ) ; } org.springframework.integration.handler.advice.IdempotentReceiverInterceptor . setThrowExceptionOnRejection ( false ) ; org.springframework.integration.handler.advice.MessageHandler . handleMessage ( new GenericMessage <> ( STRING ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicReference<org.springframework.integration.handler.advice.Message<?>> . get ( ) . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . DUPLICATE_MESSAGE , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( org.springframework.integration.handler.advice.ConcurrentMetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.handler.advice.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; this . org.springframework.integration.handler.advice.MessageChannel . send ( org.springframework.integration.handler.advice.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.handler.advice.Message<?> = this . org.springframework.integration.handler.advice.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.advice.Message<> ) ; assertEquals ( NUMBER , this . org.springframework.integration.handler.advice.IdempotentReceiverTests.FooAdvice . int ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.handler.advice.MetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; assertNotNull ( this . org.springframework.integration.handler.advice.MetadataStore . get ( STRING ) ) ; try { this . org.springframework.integration.handler.advice.MessageChannel . send ( org.springframework.integration.handler.advice.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , instanceOf ( MessageRejectedException .class ) ) ; } this . org.springframework.integration.handler.advice.IdempotentReceiverInterceptor . setThrowExceptionOnRejection ( false ) ; this . org.springframework.integration.handler.advice.MessageChannel . send ( org.springframework.integration.handler.advice.Message<java.lang.String> ) ; org.springframework.integration.handler.advice.Message<?> = this . org.springframework.integration.handler.advice.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.advice.Message<> ) ; assertEquals ( NUMBER , this . org.springframework.integration.handler.advice.IdempotentReceiverTests.FooAdvice . int ) ; assertTrue ( org.springframework.integration.handler.advice.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . DUPLICATE_MESSAGE , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.handler.advice.MetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; org.springframework.integration.handler.advice.Message<java.lang.String> = new GenericMessage <> ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.handler.advice.MessageChannel . send ( org.springframework.integration.handler.advice.Message<java.lang.String> ) ; org.springframework.integration.handler.advice.Message<?> = this . org.springframework.integration.handler.advice.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.advice.Message<> ) ; } assertTrue ( org.springframework.integration.handler.advice.Message<> . getHeaders ( ) . get ( IntegrationMessageHeaderAccessor . DUPLICATE_MESSAGE , java.lang.Boolean .class ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.handler.advice.MetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; assertNotNull ( this . org.springframework.integration.handler.advice.MetadataStore . get ( STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.handler.advice.MetadataStore , STRING , java.util.Map .class ) . size ( ) ) ; assertNotNull ( this . org.springframework.integration.handler.advice.MetadataStore . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.handler.advice.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.handler.advice.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.handler.advice.ExecutionCallback . execute ( ) ; }  <METHOD_END>
