<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.undertow.HttpHeaders = new HttpHeaders ( ) ; sample.undertow.HttpHeaders . set ( STRING , STRING ) ; HttpEntity < ? > sample.undertow.HttpEntity<?> = new HttpEntity <> ( sample.undertow.HttpHeaders ) ; ResponseEntity < byte [] > sample.undertow.ResponseEntity<byte[]> = this . sample.undertow.TestRestTemplate . exchange ( STRING , HttpMethod . GET , sample.undertow.HttpEntity<> , byte [] .class ) ; assertThat ( sample.undertow.ResponseEntity<byte[]> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; java.util.zip.GZIPInputStream java.util.zip.GZIPInputStream = new java.util.zip.GZIPInputStream ( new java.io.ByteArrayInputStream ( sample.undertow.ResponseEntity<byte[]> . getBody ( ) ) ) ; try { assertThat ( StreamUtils . copyToString ( java.util.zip.GZIPInputStream , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ) . isEqualTo ( STRING ) ; } finally { java.util.zip.GZIPInputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { ResponseEntity < java.lang.String > sample.undertow.ResponseEntity<java.lang.String> = this . sample.undertow.TestRestTemplate . getForEntity ( java.lang.String , java.lang.String .class ) ; assertThat ( sample.undertow.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.undertow.ResponseEntity<java.lang.String> . getBody ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
