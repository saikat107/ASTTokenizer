<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.couchbase.repository.index.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.index.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.index.IndexManager ) ; org.springframework.data.couchbase.repository.index.CouchbaseOperations = org.springframework.data.couchbase.repository.index.RepositoryOperationsMapping . getDefault ( ) ; org.springframework.data.couchbase.repository.index.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.index.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.index.IndexManager ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedUserRepository org.springframework.data.couchbase.repository.index.IndexedUserRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( IndexedUserRepository .class ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . name ( ) ; N1qlQuery org.springframework.data.couchbase.repository.index.N1qlQuery = N1qlQuery . simple ( STRING + java.lang.String + STRING ) ; N1qlQueryResult org.springframework.data.couchbase.repository.index.N1qlQueryResult = org.springframework.data.couchbase.repository.index.CouchbaseOperations . queryN1QL ( org.springframework.data.couchbase.repository.index.N1qlQuery ) ; assertTrue ( org.springframework.data.couchbase.repository.index.N1qlQueryResult . finalSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedUserRepository org.springframework.data.couchbase.repository.index.IndexedUserRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( IndexedUserRepository .class ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . name ( ) ; N1qlQuery org.springframework.data.couchbase.repository.index.N1qlQuery = N1qlQuery . simple ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; N1qlQueryResult org.springframework.data.couchbase.repository.index.N1qlQueryResult = org.springframework.data.couchbase.repository.index.CouchbaseOperations . queryN1QL ( org.springframework.data.couchbase.repository.index.N1qlQuery ) ; assertTrue ( org.springframework.data.couchbase.repository.index.N1qlQueryResult . finalSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedUserRepository org.springframework.data.couchbase.repository.index.IndexedUserRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( IndexedUserRepository .class ) ; DesignDocument org.springframework.data.couchbase.repository.index.DesignDocument = null ; try { org.springframework.data.couchbase.repository.index.DesignDocument = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . bucketManager ( ) . getDesignDocument ( java.lang.String ) ; } catch( DesignDocumentDoesNotExistException org.springframework.data.couchbase.repository.index.DesignDocumentDoesNotExistException ) {    } assertNotNull ( org.springframework.data.couchbase.repository.index.DesignDocument ) ; for ( View org.springframework.data.couchbase.repository.index.View : org.springframework.data.couchbase.repository.index.DesignDocument . views ( ) ) { if ( org.springframework.data.couchbase.repository.index.View . name ( ) . equals ( java.lang.String ) ) return; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnotherIndexedUserRepository org.springframework.data.couchbase.repository.index.AnotherIndexedUserRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( AnotherIndexedUserRepository .class ) ; java.lang.String java.lang.String = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . name ( ) ; N1qlQuery org.springframework.data.couchbase.repository.index.N1qlQuery = N1qlQuery . simple ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; N1qlQueryResult org.springframework.data.couchbase.repository.index.N1qlQueryResult = org.springframework.data.couchbase.repository.index.CouchbaseOperations . queryN1QL ( org.springframework.data.couchbase.repository.index.N1qlQuery ) ; assertFalse ( org.springframework.data.couchbase.repository.index.N1qlQueryResult . finalSuccess ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnotherIndexedUserRepository org.springframework.data.couchbase.repository.index.AnotherIndexedUserRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( AnotherIndexedUserRepository .class ) ; DesignDocument org.springframework.data.couchbase.repository.index.DesignDocument = null ; try { org.springframework.data.couchbase.repository.index.DesignDocument = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . bucketManager ( ) . getDesignDocument ( java.lang.String ) ; } catch( DesignDocumentDoesNotExistException org.springframework.data.couchbase.repository.index.DesignDocumentDoesNotExistException ) { } if ( org.springframework.data.couchbase.repository.index.DesignDocument != null ) { for ( View org.springframework.data.couchbase.repository.index.View : org.springframework.data.couchbase.repository.index.DesignDocument . views ( ) ) { if ( org.springframework.data.couchbase.repository.index.View . name ( ) . equals ( java.lang.String ) ) fail ( STRING + java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IndexedFooRepository . IndexedFooRepository IndexedFooRepository.Foo = new IndexedFooRepository . IndexedFooRepository ( STRING , STRING , NUMBER ) ; IndexedFooRepository . IndexedFooRepository IndexedFooRepository.Foo = new IndexedFooRepository . IndexedFooRepository ( STRING , STRING , NUMBER ) ; IndexedFooRepository org.springframework.data.couchbase.repository.index.IndexedFooRepository = org.springframework.data.couchbase.repository.index.RepositoryFactorySupport . getRepository ( IndexedFooRepository .class ) ; DesignDocument org.springframework.data.couchbase.repository.index.DesignDocument = org.springframework.data.couchbase.repository.index.CouchbaseOperations . getCouchbaseBucket ( ) . bucketManager ( ) . getDesignDocument ( STRING ) ; assertNotNull ( org.springframework.data.couchbase.repository.index.DesignDocument ) ; boolean boolean = false ; for ( View org.springframework.data.couchbase.repository.index.View : org.springframework.data.couchbase.repository.index.DesignDocument . views ( ) ) { if ( org.springframework.data.couchbase.repository.index.View . name ( ) . equals ( STRING ) ) { boolean = true ; break; } } assertTrue ( STRING , boolean ) ; org.springframework.data.couchbase.repository.index.IndexedFooRepository . save ( IndexedFooRepository.Foo ) ; org.springframework.data.couchbase.repository.index.IndexedFooRepository . save ( IndexedFooRepository.Foo ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : org.springframework.data.couchbase.repository.index.IndexedFooRepository . findAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) { int ++ ; } assertEquals ( NUMBER , int ) ; int = NUMBER ; for ( java.lang.Object java.lang.Object : org.springframework.data.couchbase.repository.index.IndexedFooRepository . findAll ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ) { int ++ ; } assertEquals ( NUMBER , int ) ; }  <METHOD_END>
