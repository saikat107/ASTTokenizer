<METHOD_START> public void ( ) { this( HttpAsyncClients . createSystem ( ) ); }  <METHOD_END>
<METHOD_START> public void ( CloseableHttpAsyncClient org.springframework.http.client.CloseableHttpAsyncClient ) { super(); Assert . notNull ( org.springframework.http.client.CloseableHttpAsyncClient , STRING ) ; this . org.springframework.http.client.CloseableHttpAsyncClient = org.springframework.http.client.CloseableHttpAsyncClient ; }  <METHOD_END>
<METHOD_START> public void ( CloseableHttpClient org.springframework.http.client.CloseableHttpClient , CloseableHttpAsyncClient org.springframework.http.client.CloseableHttpAsyncClient ) { super( org.springframework.http.client.CloseableHttpClient ); Assert . notNull ( org.springframework.http.client.CloseableHttpAsyncClient , STRING ) ; this . org.springframework.http.client.CloseableHttpAsyncClient = org.springframework.http.client.CloseableHttpAsyncClient ; }  <METHOD_END>
<METHOD_START> public void void ( CloseableHttpAsyncClient org.springframework.http.client.CloseableHttpAsyncClient ) { this . org.springframework.http.client.CloseableHttpAsyncClient = org.springframework.http.client.CloseableHttpAsyncClient ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.client.CloseableHttpAsyncClient org.springframework.http.client.CloseableHttpAsyncClient ( ) { return this . org.springframework.http.client.CloseableHttpAsyncClient ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { CloseableHttpAsyncClient org.springframework.http.client.CloseableHttpAsyncClient = org.springframework.http.client.CloseableHttpAsyncClient ( ) ; if ( ! org.springframework.http.client.CloseableHttpAsyncClient . isRunning ( ) ) { org.springframework.http.client.CloseableHttpAsyncClient . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { HttpAsyncClient org.springframework.http.client.HttpAsyncClient = org.springframework.http.client.CloseableHttpAsyncClient ( ) ; void ( ) ; HttpUriRequest org.springframework.http.client.HttpUriRequest = createHttpUriRequest ( org.springframework.http.client.HttpMethod , java.net.URI ) ; postProcessHttpRequest ( org.springframework.http.client.HttpUriRequest ) ; HttpContext org.springframework.http.client.HttpContext = createHttpContext ( org.springframework.http.client.HttpMethod , java.net.URI ) ; if ( org.springframework.http.client.HttpContext == null ) { org.springframework.http.client.HttpContext = HttpClientContext . create ( ) ; } if ( org.springframework.http.client.HttpContext . getAttribute ( HttpClientContext . REQUEST_CONFIG ) == null ) { RequestConfig org.springframework.http.client.RequestConfig = null ; if ( org.springframework.http.client.HttpUriRequest instanceof Configurable ) { org.springframework.http.client.RequestConfig = ( ( Configurable ) org.springframework.http.client.HttpUriRequest ) . getConfig ( ) ; } if ( org.springframework.http.client.RequestConfig == null ) { org.springframework.http.client.RequestConfig = createRequestConfig ( org.springframework.http.client.HttpAsyncClient ) ; } if ( org.springframework.http.client.RequestConfig != null ) { org.springframework.http.client.HttpContext . setAttribute ( HttpClientContext . REQUEST_CONFIG , org.springframework.http.client.RequestConfig ) ; } } return new HttpComponentsAsyncClientHttpRequest ( org.springframework.http.client.HttpAsyncClient , org.springframework.http.client.HttpUriRequest , org.springframework.http.client.HttpContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { try { super. destroy ( ) ; } finally { org.springframework.http.client.CloseableHttpAsyncClient ( ) . close ( ) ; } }  <METHOD_END>
