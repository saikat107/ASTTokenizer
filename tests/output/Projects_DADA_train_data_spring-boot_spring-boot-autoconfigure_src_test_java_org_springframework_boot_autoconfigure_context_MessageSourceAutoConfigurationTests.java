<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.context.MessageSourceAutoConfigurationTests.Config .class , MessageSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( MessageSourceAutoConfiguration .class ) . isFallbackToSystemLocale ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( MessageSourceAutoConfiguration .class ) . isFallbackToSystemLocale ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( MessageSourceAutoConfiguration .class ) . isAlwaysUseMessageFormat ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getBean ( MessageSourceAutoConfiguration .class ) . isAlwaysUseMessageFormat ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.context.MessageSourceAutoConfigurationTests.CustomMessageSource .class , MessageSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , null , null ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.boot.autoconfigure.context.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.context.ConfigurableApplicationContext . refresh ( ) ; try { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . setParent ( org.springframework.boot.autoconfigure.context.ConfigurableApplicationContext ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( MessageSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . getMessage ( STRING , null , STRING , java.util.Locale . java.util.Locale ) ) . isEqualTo ( STRING ) ; } finally { org.springframework.boot.autoconfigure.context.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . register ( MessageSourceAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.context.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.context.MessageSource org.springframework.boot.autoconfigure.context.MessageSource ( ) { return new MessageSource ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.util.Locale java.util.Locale )						throws org.springframework.boot.autoconfigure.context.NoSuchMessageException { return java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( MessageSourceResolvable org.springframework.boot.autoconfigure.context.MessageSourceResolvable , java.util.Locale java.util.Locale ) throws org.springframework.boot.autoconfigure.context.NoSuchMessageException { return org.springframework.boot.autoconfigure.context.MessageSourceResolvable . getCodes ( ) [ NUMBER ] ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.lang.String java.lang.String , java.util.Locale java.util.Locale ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] , java.util.Locale java.util.Locale )						throws org.springframework.boot.autoconfigure.context.NoSuchMessageException { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( MessageSourceResolvable org.springframework.boot.autoconfigure.context.MessageSourceResolvable , java.util.Locale java.util.Locale ) throws org.springframework.boot.autoconfigure.context.NoSuchMessageException { return org.springframework.boot.autoconfigure.context.MessageSourceResolvable . getCodes ( ) [ NUMBER ] ; }  <METHOD_END>
