<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer = new DefaultServletWebServerFactoryCustomizer ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties ) ; }  <METHOD_END>
<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . first ( ) . isInstanceOf ( AccessLogValve .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( AccessLogValve ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ) . getFileDateFormat ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( AccessLogValve ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ) . getFileDateFormat ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( AccessLogValve ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ) . isBuffered ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( AccessLogValve ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ) . isBuffered ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; ServerProperties . ServerProperties ServerProperties.Tomcat = this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) ; assertThat ( ServerProperties.Tomcat . getRedirectContextRoot ( ) ) . isEqualTo ( false ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; Context org.springframework.boot.autoconfigure.web.servlet.Context = mock ( Context .class ) ; for ( TomcatContextCustomizer org.springframework.boot.autoconfigure.web.servlet.TomcatContextCustomizer : org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getTomcatContextCustomizers ( ) ) { org.springframework.boot.autoconfigure.web.servlet.TomcatContextCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.Context ) ; } verify ( org.springframework.boot.autoconfigure.web.servlet.Context ) . setMapperContextRootRedirectEnabled ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory = mock ( ConfigurableServletWebServerFactory .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory , never ( ) ) . setContextPath ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory = mock ( ConfigurableServletWebServerFactory .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) . setDisplayName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory = mock ( ConfigurableServletWebServerFactory .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setDisplayName ( STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) . setDisplayName ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory = mock ( ConfigurableServletWebServerFactory .class ) ; ServletContext org.springframework.boot.autoconfigure.web.servlet.ServletContext = mock ( ServletContext .class ) ; SessionCookieConfig org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig = mock ( SessionCookieConfig .class ) ; given ( org.springframework.boot.autoconfigure.web.servlet.ServletContext . getSessionCookieConfig ( ) ) . willReturn ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; void ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServletContext ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) . setSessionTimeout ( NUMBER ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ServletContext ) . setSessionTrackingModes ( java.util.EnumSet . java.util.EnumSet ( SessionTrackingMode . COOKIE , SessionTrackingMode . URL ) ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setName ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setDomain ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setPath ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setComment ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setHttpOnly ( true ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setSecure ( true ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) . setMaxAge ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory = mock ( ConfigurableServletWebServerFactory .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setPort ( NUMBER ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) . setPort ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getDisplayName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ) . getTomcat ( ) . getEngine ( ) . getBackgroundProcessorDelay ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( ( ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ) . getTomcat ( ) . getEngine ( ) . getBackgroundProcessorDelay ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setUseForwardHeaders ( true ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . hasSize ( NUMBER ) ; Valve org.springframework.boot.autoconfigure.web.servlet.Valve = org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Valve ) . isInstanceOf ( RemoteIpValve .class ) ; RemoteIpValve org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve = ( RemoteIpValve ) org.springframework.boot.autoconfigure.web.servlet.Valve ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getProtocolHeader ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getProtocolHeaderHttpsValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getRemoteIpHeader ( ) ) . isEqualTo ( STRING ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getInternalProxies ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) ) . hasSize ( NUMBER ) ; Valve org.springframework.boot.autoconfigure.web.servlet.Valve = org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getEngineValves ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.Valve ) . isInstanceOf ( RemoteIpValve .class ) ; RemoteIpValve org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve = ( RemoteIpValve ) org.springframework.boot.autoconfigure.web.servlet.Valve ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getProtocolHeader ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getProtocolHeaderHttpsValue ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getRemoteIpHeader ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getPortHeader ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . getInternalProxies ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( NUMBER ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; TomcatWebServer org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer = ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . start ( ) ; try { assertThat ( ( ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . getTomcat ( ) . getConnector ( ) . getProtocolHandler ( ) ) . getBacklog ( ) ) . isEqualTo ( NUMBER ) ; } finally { org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( NUMBER ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; TomcatWebServer org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer = ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . start ( ) ; try { assertThat ( ( ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . getTomcat ( ) . getConnector ( ) . getProtocolHandler ( ) ) . getMaxConnections ( ) ) . isEqualTo ( NUMBER ) ; } finally { org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( NUMBER ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; TomcatWebServer org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer = ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . start ( ) ; try { assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . getTomcat ( ) . getConnector ( ) . getMaxPostSize ( ) ) . isEqualTo ( NUMBER ) ; } finally { org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( NUMBER ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; TomcatWebServer org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer = ( TomcatWebServer ) org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getWebServer ( ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . start ( ) ; try { assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . getTomcat ( ) . getConnector ( ) . getMaxPostSize ( ) ) . isEqualTo ( - NUMBER ) ; } finally { org.springframework.boot.autoconfigure.web.servlet.TomcatWebServer . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory = spy ( new UndertowServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogEnabled ( true ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogPattern ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogPrefix ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogSuffix ( STRING ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogDirectory ( new java.io.File ( STRING ) ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setAccessLogRotate ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getMinSpareThreads ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory = new TomcatServletWebServerFactory ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getTldSkipPatterns ( ) ) . contains ( java.lang.String[] ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getTldSkipPatterns ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory = spy ( new UndertowServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setUseForwardHeaders ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setUseForwardHeaders ( true ) ; UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory = spy ( new UndertowServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setUseForwardHeaders ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory = spy ( new UndertowServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) . setUseForwardHeaders ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory = spy ( new JettyServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) . setUseForwardHeaders ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . setUseForwardHeaders ( true ) ; JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory = spy ( new JettyServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) . setUseForwardHeaders ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . setEnvironment ( new MockEnvironment ( ) . withProperty ( STRING , STRING ) ) ; JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory = spy ( new JettyServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) . setUseForwardHeaders ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory = spy ( new JettyServletWebServerFactory ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) . setSessionStoreDir ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory = mock ( UndertowServletWebServerFactory .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer . customize ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) ; verify ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , never ( ) ) . setAccessLogEnabled ( anyBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory , ServletContext org.springframework.boot.autoconfigure.web.servlet.ServletContext ) throws org.springframework.boot.autoconfigure.web.servlet.ServletException { verify ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory , atLeastOnce ( ) ) . addInitializers ( this . org.springframework.boot.autoconfigure.web.servlet.ArgumentCaptor<org.springframework.boot.autoconfigure.web.servlet.ServletContextInitializer[]> . capture ( ) ) ; for ( java.lang.Object java.lang.Object : this . org.springframework.boot.autoconfigure.web.servlet.ArgumentCaptor<org.springframework.boot.autoconfigure.web.servlet.ServletContextInitializer[]> . getAllValues ( ) ) { if ( java.lang.Object instanceof ServletContextInitializer ) { ( ( ServletContextInitializer ) java.lang.Object ) . onStartup ( org.springframework.boot.autoconfigure.web.servlet.ServletContext ) ; } else { for ( ServletContextInitializer org.springframework.boot.autoconfigure.web.servlet.ServletContextInitializer : ( ServletContextInitializer [] ) java.lang.Object ) { org.springframework.boot.autoconfigure.web.servlet.ServletContextInitializer . onStartup ( org.springframework.boot.autoconfigure.web.servlet.ServletContext ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { new RelaxedDataBinder ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties , STRING ) . bind ( new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.String> ) ) ; }  <METHOD_END>
