<METHOD_START> public void ( WebSocketClient org.springframework.integration.websocket.WebSocketClient , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { Assert . notNull ( org.springframework.integration.websocket.WebSocketClient , STRING ) ; this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager = new org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager ( org.springframework.integration.websocket.WebSocketClient , java.lang.String , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.websocket.WebSocketHttpHeaders . setOrigin ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . notNull ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ; HttpHeaders org.springframework.integration.websocket.HttpHeaders = new HttpHeaders ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.integration.websocket.HttpHeaders . add ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.String ) ; } } void ( org.springframework.integration.websocket.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> public void void ( HttpHeaders org.springframework.integration.websocket.HttpHeaders ) { this . org.springframework.integration.websocket.WebSocketHttpHeaders . putAll ( org.springframework.integration.websocket.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.websocket.WebSocketSession org.springframework.integration.websocket.WebSocketSession ( java.lang.String java.lang.String ) { if ( boolean ( ) ) { if ( ! boolean ( ) && ! this . boolean ) { void ( ) ; void ( ) ; } try { this . java.util.concurrent.CountDownLatch . boolean ( this . int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { logger . error ( STRING ) ; } this . boolean = false ; } try { if ( this . java.lang.Throwable != null ) { throw new java.lang.IllegalStateException ( this . java.lang.Throwable ) ; } Assert . state ( this . org.springframework.integration.websocket.WebSocketSession != null , STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { void ( ) ; throw java.lang.IllegalStateException ; } return this . org.springframework.integration.websocket.WebSocketSession ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . setAutoStartup ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . setPhase ( int ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . isAutoStartup ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . getPhase ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( ! boolean ( ) ) { this . org.springframework.integration.websocket.WebSocketSession = null ; this . java.lang.Throwable = null ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { this . org.springframework.integration.websocket.ClientWebSocketContainer.IntegrationWebSocketConnectionManager . stop ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> void ( WebSocketClient org.springframework.integration.websocket.WebSocketClient , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { super( java.lang.String , java.lang.Object[] ); this . org.springframework.integration.websocket.WebSocketClient = org.springframework.integration.websocket.WebSocketClient ; this . boolean = ( ( org.springframework.integration.websocket.WebSocketClient instanceof Lifecycle ) && ! ( ( Lifecycle ) org.springframework.integration.websocket.WebSocketClient ) . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { ( ( Lifecycle ) this . org.springframework.integration.websocket.WebSocketClient ) . start ( ) ; } org.springframework.integration.websocket.ClientWebSocketContainer .this . boolean = true ; super. startInternal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . boolean ) { ( ( Lifecycle ) this . org.springframework.integration.websocket.WebSocketClient ) . stop ( ) ; } try { super. stopInternal ( ) ; } finally { org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession = null ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.lang.Throwable = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { logger . info ( STRING + getUri ( ) ) ; org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketHttpHeaders . setSecWebSocketProtocol ( getSubProtocols ( ) ) ; ListenableFuture < WebSocketSession > org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> = this . org.springframework.integration.websocket.WebSocketClient . doHandshake ( org.springframework.integration.websocket.ClientWebSocketContainer .this . webSocketHandler , org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketHttpHeaders , getUri ( ) ) ; org.springframework.integration.websocket.ListenableFuture<org.springframework.integration.websocket.WebSocketSession> . addCallback ( new ListenableFutureCallback < WebSocketSession > ( ) { @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession ) { org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession = org.springframework.integration.websocket.WebSocketSession ; logger . info ( STRING ) ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.util.concurrent.CountDownLatch . void ( ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.lang.Throwable = java.lang.Throwable ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.integration.websocket.WebSocketSession ) { org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession = org.springframework.integration.websocket.WebSocketSession ; logger . info ( STRING ) ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.lang.Throwable = java.lang.Throwable ; org.springframework.integration.websocket.ClientWebSocketContainer .this . java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { if ( org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession != null ) { org.springframework.integration.websocket.ClientWebSocketContainer .this . closeSession ( org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession , CloseStatus . NORMAL ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return ( ( org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession != null ) && ( org.springframework.integration.websocket.ClientWebSocketContainer .this . org.springframework.integration.websocket.WebSocketSession . isOpen ( ) ) ) ; }  <METHOD_END>
