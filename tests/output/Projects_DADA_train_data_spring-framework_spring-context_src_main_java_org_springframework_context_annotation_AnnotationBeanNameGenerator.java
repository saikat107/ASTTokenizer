<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { if ( org.springframework.context.annotation.BeanDefinition instanceof AnnotatedBeanDefinition ) { java.lang.String java.lang.String = java.lang.String ( ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return java.lang.String ; } } return java.lang.String ( org.springframework.context.annotation.BeanDefinition , org.springframework.context.annotation.BeanDefinitionRegistry ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.context.annotation.AnnotationMetadata . getAnnotationTypes ( ) ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , java.lang.String ) ; if ( boolean ( java.lang.String , org.springframework.context.annotation.AnnotationMetadata . getMetaAnnotationTypes ( java.lang.String ) , org.springframework.context.annotation.AnnotationAttributes ) ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.AnnotationAttributes . get ( STRING ) ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( StringUtils . hasLength ( java.lang.String ) ) { if ( java.lang.String != null && ! java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } java.lang.String = java.lang.String ; } } } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { boolean boolean = java.lang.String . boolean ( java.lang.String ) || ( java.util.Set<java.lang.String> != null && java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) || java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; return ( boolean && java.util.Map<java.lang.String,java.lang.Object> != null && java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { return java.lang.String ( org.springframework.context.annotation.BeanDefinition ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { java.lang.String java.lang.String = ClassUtils . getShortName ( org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) ) ; return java.beans.Introspector . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
