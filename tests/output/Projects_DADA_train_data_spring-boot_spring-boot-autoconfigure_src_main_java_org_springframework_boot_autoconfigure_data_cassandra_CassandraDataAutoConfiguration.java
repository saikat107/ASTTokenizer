<METHOD_START> public void ( BeanFactory org.springframework.boot.autoconfigure.data.cassandra.BeanFactory , CassandraProperties org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties , Cluster org.springframework.boot.autoconfigure.data.cassandra.Cluster , Environment org.springframework.boot.autoconfigure.data.cassandra.Environment ) { this . org.springframework.boot.autoconfigure.data.cassandra.BeanFactory = org.springframework.boot.autoconfigure.data.cassandra.BeanFactory ; this . org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties = org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties ; this . org.springframework.boot.autoconfigure.data.cassandra.Cluster = org.springframework.boot.autoconfigure.data.cassandra.Cluster ; this . org.springframework.boot.autoconfigure.data.cassandra.PropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.data.cassandra.Environment , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext ( ) java.lang.ClassNotFoundException { BasicCassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext = new BasicCassandraMappingContext ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = EntityScanPackages . get ( this . org.springframework.boot.autoconfigure.data.cassandra.BeanFactory ) . getPackageNames ( ) ; if ( java.util.List<java.lang.String> . boolean ( ) && AutoConfigurationPackages . has ( this . org.springframework.boot.autoconfigure.data.cassandra.BeanFactory ) ) { java.util.List<java.lang.String> = AutoConfigurationPackages . get ( this . org.springframework.boot.autoconfigure.data.cassandra.BeanFactory ) ; } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext . setInitialEntitySet ( CassandraEntityClassScanner . scan ( java.util.List<java.lang.String> ) ) ; } if ( StringUtils . hasText ( this . org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties . getKeyspaceName ( ) ) ) { org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext . setUserTypeResolver ( new SimpleUserTypeResolver ( this . org.springframework.boot.autoconfigure.data.cassandra.Cluster , this . org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties . getKeyspaceName ( ) ) ) ; } return org.springframework.boot.autoconfigure.data.cassandra.BasicCassandraMappingContext ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter ( CassandraMappingContext org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext ) { return new MappingCassandraConverter ( org.springframework.boot.autoconfigure.data.cassandra.CassandraMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( Session .class ) public org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean ( CassandraConverter org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter )			throws java.lang.Exception { CassandraSessionFactoryBean org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean = new CassandraSessionFactoryBean ( ) ; org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean . setCluster ( this . org.springframework.boot.autoconfigure.data.cassandra.Cluster ) ; org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean . setConverter ( org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter ) ; org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean . setKeyspaceName ( this . org.springframework.boot.autoconfigure.data.cassandra.CassandraProperties . getKeyspaceName ( ) ) ; SchemaAction org.springframework.boot.autoconfigure.data.cassandra.SchemaAction = this . org.springframework.boot.autoconfigure.data.cassandra.PropertyResolver . getProperty ( STRING , SchemaAction .class , SchemaAction . NONE ) ; org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean . setSchemaAction ( org.springframework.boot.autoconfigure.data.cassandra.SchemaAction ) ; return org.springframework.boot.autoconfigure.data.cassandra.CassandraSessionFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.data.cassandra.CassandraTemplate org.springframework.boot.autoconfigure.data.cassandra.CassandraTemplate ( Session org.springframework.boot.autoconfigure.data.cassandra.Session , CassandraConverter org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter ) throws java.lang.Exception { return new CassandraTemplate ( org.springframework.boot.autoconfigure.data.cassandra.Session , org.springframework.boot.autoconfigure.data.cassandra.CassandraConverter ) ; }  <METHOD_END>
