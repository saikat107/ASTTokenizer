<METHOD_START> void ( QueryMethod org.springframework.data.repository.query.QueryMethod , ProjectionFactory org.springframework.data.repository.query.ProjectionFactory ) { this( org.springframework.data.repository.query.QueryMethod , org.springframework.data.repository.query.ProjectionFactory , org.springframework.data.repository.query.QueryMethod . getReturnedObjectType ( ) ); }  <METHOD_END>
<METHOD_START> private void ( QueryMethod org.springframework.data.repository.query.QueryMethod , ProjectionFactory org.springframework.data.repository.query.ProjectionFactory , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( org.springframework.data.repository.query.QueryMethod , STRING ) ; Assert . notNull ( org.springframework.data.repository.query.ProjectionFactory , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . org.springframework.data.repository.query.QueryMethod = org.springframework.data.repository.query.QueryMethod ; this . org.springframework.data.repository.query.ReturnedType = ReturnedType . of ( java.lang.Class<> , org.springframework.data.repository.query.QueryMethod . getDomainClass ( ) , org.springframework.data.repository.query.ProjectionFactory ) ; this . org.springframework.data.repository.query.ResultProcessor.ProjectingConverter = new org.springframework.data.repository.query.ResultProcessor.ProjectingConverter ( this . org.springframework.data.repository.query.ReturnedType , org.springframework.data.repository.query.ProjectionFactory ) ; this . org.springframework.data.repository.query.ProjectionFactory = org.springframework.data.repository.query.ProjectionFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.ResultProcessor org.springframework.data.repository.query.ResultProcessor ( ParameterAccessor org.springframework.data.repository.query.ParameterAccessor ) { Assert . notNull ( org.springframework.data.repository.query.ParameterAccessor , STRING ) ; return org.springframework.data.repository.query.ParameterAccessor . getDynamicProjection ( ) . map ( it -> new ResultProcessor ( method , factory , it ) ) . orElse ( this ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.ReturnedType org.springframework.data.repository.query.ReturnedType ( ) { return org.springframework.data.repository.query.ReturnedType ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.Object java.lang.Object ) { return T ( java.lang.Object , org.springframework.data.repository.query.ResultProcessor.NoOpConverter . org.springframework.data.repository.query.ResultProcessor.NoOpConverter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Object java.lang.Object , Converter < java.lang.Object , java.lang.Object > org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> ) { if ( java.lang.Object == null || org.springframework.data.repository.query.ReturnedType . isInstance ( java.lang.Object ) || ! org.springframework.data.repository.query.ReturnedType . isProjecting ( ) ) { return ( T ) java.lang.Object ; } Assert . notNull ( org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> , STRING ) ; org.springframework.data.repository.query.ResultProcessor.ChainingConverter org.springframework.data.repository.query.ResultProcessor.ChainingConverter = org.springframework.data.repository.query.ResultProcessor.ChainingConverter . of ( org.springframework.data.repository.query.ReturnedType . getReturnedType ( ) , org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> ) . and ( this . org.springframework.data.repository.query.ResultProcessor.ProjectingConverter ) ; if ( java.lang.Object instanceof Slice && org.springframework.data.repository.query.QueryMethod . isPageQuery ( ) || org.springframework.data.repository.query.QueryMethod . isSliceQuery ( ) ) { return ( T ) ( ( Slice < ? > ) java.lang.Object ) . map ( org.springframework.data.repository.query.ResultProcessor.ChainingConverter :: java.lang.Object ) ; } if ( java.lang.Object instanceof java.util.Collection && org.springframework.data.repository.query.QueryMethod . isCollectionQuery ( ) ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( java.util.Collection<> ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Collection<java.lang.Object> . boolean ( org.springframework.data.repository.query.ReturnedType . isInstance ( java.lang.Object ) ? java.lang.Object : org.springframework.data.repository.query.ResultProcessor.ChainingConverter . java.lang.Object ( java.lang.Object ) ) ; } return ( T ) java.util.Collection<java.lang.Object> ; } if ( java.lang.Object instanceof java.util.stream.Stream && org.springframework.data.repository.query.QueryMethod . isStreamQuery ( ) ) { return ( T ) ( ( java.util.stream.Stream<java.lang.Object> < java.lang.Object > ) java.lang.Object ) . java.util.stream.Stream<java.lang.Object> ( java.lang.Object -> org.springframework.data.repository.query.ReturnedType . isInstance ( java.lang.Object ) ? java.lang.Object : org.springframework.data.repository.query.ResultProcessor.ChainingConverter . java.lang.Object ( java.lang.Object ) ) ; } if ( ReactiveWrapperConverters . supports ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ( T ) ReactiveWrapperConverters . map ( java.lang.Object , org.springframework.data.repository.query.ResultProcessor.ChainingConverter :: java.lang.Object ) ; } return ( T ) org.springframework.data.repository.query.ResultProcessor.ChainingConverter . java.lang.Object ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.util.Collection<?> < ? > java.util.Collection<?> ) { try { return CollectionFactory . createCollection ( java.util.Collection<> . java.lang.Class<? extends java.util.Collection> ( ) , java.util.Collection<> . int ( ) ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { return CollectionFactory . createApproximateCollection ( java.util.Collection<> , java.util.Collection<> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.query.ResultProcessor.ChainingConverter org.springframework.data.repository.query.ResultProcessor.ChainingConverter ( final Converter < java.lang.Object , java.lang.Object > org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> ) { Assert . notNull ( org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> , STRING ) ; return new org.springframework.data.repository.query.ResultProcessor.ChainingConverter ( java.lang.Class<> , source -> { Object intermediate = ChainingConverter .this . convert ( source ) ; return targetType . isInstance ( intermediate ) ? intermediate : converter . convert ( intermediate ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return org.springframework.data.repository.query.Converter<java.lang.Object,java.lang.Object> . convert ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.repository.query.ReturnedType . getReturnedType ( ) ; if ( java.lang.Class<> . boolean ( ) ) { return org.springframework.data.repository.query.ProjectionFactory . createProjection ( java.lang.Class<> , java.lang.Object ( java.lang.Object ) ) ; } return org.springframework.data.repository.query.ConversionService . convert ( java.lang.Object , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object != null && java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.Object = java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ; } if ( java.lang.Object instanceof java.util.Collection ) { return java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.Collection<?> < ? > ) java.lang.Object , org.springframework.data.repository.query.ReturnedType . getInputProperties ( ) ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.Collection<?> < ? > java.util.Collection<?> , java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { int int = NUMBER ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( java.util.Collection<> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.List<java.lang.String> . java.lang.String ( int ++ ) , java.lang.Object ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
