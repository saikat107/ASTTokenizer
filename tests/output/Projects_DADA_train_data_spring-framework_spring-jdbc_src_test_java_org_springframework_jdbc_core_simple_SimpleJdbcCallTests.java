<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.sql.Connection = mock ( java.sql.Connection .class ) ; java.sql.DatabaseMetaData = mock ( java.sql.DatabaseMetaData .class ) ; javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.CallableStatement = mock ( java.sql.CallableStatement .class ) ; given ( java.sql.Connection . java.sql.DatabaseMetaData ( ) ) . willReturn ( java.sql.DatabaseMetaData ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; java.sql.SQLException java.sql.SQLException = new java.sql.SQLException ( STRING , STRING ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willThrow ( java.sql.SQLException ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING + java.lang.String + STRING ) ) . willReturn ( java.sql.CallableStatement ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( java.lang.String ) ; org.springframework.jdbc.core.simple.ExpectedException . expect ( BadSqlGrammarException .class ) ; org.springframework.jdbc.core.simple.ExpectedException . expect ( exceptionCause ( sameInstance ( java.sql.SQLException ) ) ) ; try { org.springframework.jdbc.core.simple.SimpleJdbcCall . execute ( ) ; } finally { verify ( java.sql.CallableStatement ) . close ( ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( java.lang.String ) ; org.springframework.jdbc.core.simple.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . addDeclaredParameter ( new SqlParameter ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . declareParameters ( new SqlParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) , new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeObject ( java.lang.Number .class , new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER ) . addValue ( STRING , NUMBER ) ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( false ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . declareParameters ( new SqlParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) , new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeObject ( java.lang.Number .class , NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( false ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeObject ( java.lang.Number .class , new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER ) . addValue ( STRING , NUMBER ) ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( false ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withProcedureName ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeObject ( java.lang.Number .class , NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( false ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withFunctionName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . declareParameters ( new SqlOutParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeFunction ( java.lang.Number .class , new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER ) . addValue ( STRING , NUMBER ) ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( true ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withFunctionName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . declareParameters ( new SqlOutParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeFunction ( java.lang.Number .class , NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( true ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withFunctionName ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeFunction ( java.lang.Number .class , new MapSqlParameterSource ( ) . addValue ( STRING , NUMBER ) . addValue ( STRING , NUMBER ) ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( true ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withFunctionName ( STRING ) ; java.lang.Number java.lang.Number = org.springframework.jdbc.core.simple.SimpleJdbcCall . executeFunction ( java.lang.Number .class , NUMBER , NUMBER ) ; assertEquals ( NUMBER , java.lang.Number . int ( ) ) ; void ( true ) ; verify ( java.sql.Connection , atLeastOnce ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withFunctionName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . compile ( ) ; void ( org.springframework.jdbc.core.simple.SimpleJdbcCall , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withNamedBinding ( ) . withFunctionName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . compile ( ) ; void ( org.springframework.jdbc.core.simple.SimpleJdbcCall , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall = new SimpleJdbcCall ( javax.sql.DataSource ) . withNamedBinding ( ) . withProcedureName ( STRING ) ; org.springframework.jdbc.core.simple.SimpleJdbcCall . compile ( ) ; void ( org.springframework.jdbc.core.simple.SimpleJdbcCall , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( SimpleJdbcCall org.springframework.jdbc.core.simple.SimpleJdbcCall , java.lang.String java.lang.String ) { Assert . assertEquals ( STRING , java.lang.String , org.springframework.jdbc.core.simple.SimpleJdbcCall . getCallString ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.sql.SQLException { given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.CallableStatement . boolean ( ) ) . willReturn ( false ) ; given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; if ( boolean ) { given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING ) ) . willReturn ( java.sql.CallableStatement ) ; } else { given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING ) ) . willReturn ( java.sql.CallableStatement ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.sql.SQLException { if ( boolean ) { verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; } else { verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , NUMBER ) ; } verify ( java.sql.CallableStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . java.lang.String ( ) ) . willReturn ( STRING ) ; given ( java.sql.DatabaseMetaData . boolean ( ) ) . willReturn ( true ) ; given ( java.sql.DatabaseMetaData . java.sql.ResultSet ( STRING , STRING , STRING ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.DatabaseMetaData . java.sql.ResultSet ( STRING , STRING , STRING , null ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , true , false ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER ) ; if ( boolean ) { given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( null , STRING , STRING ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER , NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING ) ) . willReturn ( java.sql.CallableStatement ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; } else { given ( java.sql.ResultSet . java.lang.String ( STRING ) ) . willReturn ( STRING , STRING , STRING ) ; given ( java.sql.ResultSet . int ( STRING ) ) . willReturn ( NUMBER , NUMBER , NUMBER ) ; given ( java.sql.Connection . java.sql.CallableStatement ( STRING ) ) . willReturn ( java.sql.CallableStatement ) ; given ( java.sql.CallableStatement . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; } given ( java.sql.CallableStatement . int ( ) ) . willReturn ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = java.sql.DatabaseMetaData . java.sql.ResultSet ( STRING , STRING , STRING ) ; java.sql.ResultSet java.sql.ResultSet = java.sql.DatabaseMetaData . java.sql.ResultSet ( STRING , STRING , STRING , null ) ; if ( boolean ) { verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; } else { verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . setObject ( NUMBER , NUMBER , NUMBER ) ; verify ( java.sql.CallableStatement ) . registerOutParameter ( NUMBER , NUMBER ) ; } verify ( java.sql.CallableStatement ) . close ( ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
