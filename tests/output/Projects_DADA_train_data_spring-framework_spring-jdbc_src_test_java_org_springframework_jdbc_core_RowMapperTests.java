<METHOD_START> @ Before public void void ( ) java.sql.SQLException { given ( java.sql.Connection . java.sql.Statement ( ) ) . willReturn ( java.sql.Statement ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( anyString ( ) ) ) . willReturn ( java.sql.PreparedStatement ) ; given ( java.sql.Statement . java.sql.ResultSet ( anyString ( ) ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . java.lang.String ( NUMBER ) ) . willReturn ( STRING , STRING ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER , NUMBER ) ; org.springframework.jdbc.core.JdbcTemplate . setDataSource ( new SingleConnectionDataSource ( java.sql.Connection , false ) ) ; org.springframework.jdbc.core.JdbcTemplate . setExceptionTranslator ( new SQLStateSQLExceptionTranslator ( ) ) ; org.springframework.jdbc.core.JdbcTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { verify ( java.sql.ResultSet ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { assertNotNull ( java.util.List<org.springframework.jdbc.core.TestBean> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.jdbc.core.TestBean> . size ( ) ) ; TestBean org.springframework.jdbc.core.TestBean = java.util.List<org.springframework.jdbc.core.TestBean> . get ( NUMBER ) ; TestBean org.springframework.jdbc.core.TestBean = java.util.List<org.springframework.jdbc.core.TestBean> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.jdbc.core.TestBean . getName ( ) ) ; assertEquals ( STRING , org.springframework.jdbc.core.TestBean . getName ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.TestBean . getAge ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.core.TestBean . getAge ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.util.List<org.springframework.jdbc.core.TestBean> = org.springframework.jdbc.core.JdbcTemplate . query ( STRING , org.springframework.jdbc.core.RowMapper<org.springframework.jdbc.core.TestBean> ) ; verify ( java.sql.Statement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.util.List<org.springframework.jdbc.core.TestBean> = org.springframework.jdbc.core.JdbcTemplate . query ( con -> preparedStatement , org.springframework.jdbc.core.RowMapper<org.springframework.jdbc.core.TestBean> ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.util.List<org.springframework.jdbc.core.TestBean> = org.springframework.jdbc.core.JdbcTemplate . query ( STRING , ps -> ps . setString ( NUMBER , STRING ) , org.springframework.jdbc.core.RowMapper<org.springframework.jdbc.core.TestBean> ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.util.List<org.springframework.jdbc.core.TestBean> = org.springframework.jdbc.core.JdbcTemplate . query ( STRING , new java.lang.Object [] { STRING , STRING } , org.springframework.jdbc.core.RowMapper<org.springframework.jdbc.core.TestBean> ) ; java.sql.PreparedStatement . void ( NUMBER , STRING ) ; java.sql.PreparedStatement . void ( NUMBER , STRING ) ; java.sql.PreparedStatement . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.util.List<org.springframework.jdbc.core.TestBean> = org.springframework.jdbc.core.JdbcTemplate . query ( STRING , new java.lang.Object [] { STRING , STRING } , new int [] { java.sql.Types . int , java.sql.Types . int } , org.springframework.jdbc.core.RowMapper<org.springframework.jdbc.core.TestBean> ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . setString ( NUMBER , STRING ) ; verify ( java.sql.PreparedStatement ) . close ( ) ; }  <METHOD_END>
