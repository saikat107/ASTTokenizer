<METHOD_START> @ java.lang.Override public void void ( ClassLoadHelper org.springframework.scheduling.quartz.ClassLoadHelper , SchedulerSignaler org.springframework.scheduling.quartz.SchedulerSignaler )			throws org.springframework.scheduling.quartz.SchedulerConfigException { this . javax.sql.DataSource = SchedulerFactoryBean . getConfigTimeDataSource ( ) ; if ( this . javax.sql.DataSource == null ) { throw new SchedulerConfigException ( STRING + STRING ) ; } setDataSource ( java.lang.String + getInstanceName ( ) ) ; setDontSetAutoCommitFalse ( true ) ; DBConnectionManager . getInstance ( ) . addConnectionProvider ( java.lang.String + getInstanceName ( ) , new ConnectionProvider ( ) { @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return DataSourceUtils . doGetConnection ( javax.sql.DataSource ) ; } @ java.lang.Override public void void ( ) { } public void void ( ) { } } ) ; javax.sql.DataSource javax.sql.DataSource = SchedulerFactoryBean . getConfigTimeNonTransactionalDataSource ( ) ; final javax.sql.DataSource javax.sql.DataSource = ( javax.sql.DataSource != null ? javax.sql.DataSource : this . javax.sql.DataSource ) ; setNonManagedTXDataSource ( java.lang.String + getInstanceName ( ) ) ; DBConnectionManager . getInstance ( ) . addConnectionProvider ( java.lang.String + getInstanceName ( ) , new ConnectionProvider ( ) { @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return javax.sql.DataSource . java.sql.Connection ( ) ; } @ java.lang.Override public void void ( ) { } public void void ( ) { } } ) ; try { java.lang.String java.lang.String = JdbcUtils . extractDatabaseMetaData ( this . javax.sql.DataSource , STRING ) . toString ( ) ; java.lang.String = JdbcUtils . commonDatabaseName ( java.lang.String ) ; if ( java.lang.String != null && java.lang.String . java.lang.String ( ) . boolean ( STRING ) ) { setUseDBLocks ( false ) ; setLockHandler ( new SimpleSemaphore ( ) ) ; } } catch ( MetaDataAccessException org.springframework.scheduling.quartz.MetaDataAccessException ) { logWarnIfNonZero ( NUMBER , STRING ) ; } super. initialize ( org.springframework.scheduling.quartz.ClassLoadHelper , org.springframework.scheduling.quartz.SchedulerSignaler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return DataSourceUtils . doGetConnection ( javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return javax.sql.DataSource . java.sql.Connection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.sql.Connection java.sql.Connection ) { DataSourceUtils . releaseConnection ( java.sql.Connection , this . javax.sql.DataSource ) ; }  <METHOD_END>
