<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( JsonSchemaFormat org.springframework.data.rest.core.config.JsonSchemaFormat , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { Assert . notNull ( org.springframework.data.rest.core.config.JsonSchemaFormat , STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Map<java.lang.Class<?>,org.springframework.data.rest.core.config.JsonSchemaFormat> . put ( java.lang.Class<> , org.springframework.data.rest.core.config.JsonSchemaFormat ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.core.config.JsonSchemaFormat org.springframework.data.rest.core.config.JsonSchemaFormat ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Map<java.lang.Class<?>,org.springframework.data.rest.core.config.JsonSchemaFormat> . get ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Map<java.lang.Class<?>,java.util.regex.Pattern> . java.util.regex.Pattern ( java.lang.Class<> , java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.regex.Pattern java.util.regex.Pattern ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; for ( java.util.Map.Entry<java.lang.Class<?>,java.util.regex.Pattern> < java.lang.Class<?> < ? > , java.util.regex.Pattern > java.util.Map.Entry<java.lang.Class<?>,java.util.regex.Pattern> : this . java.util.Map<java.lang.Class<?>,java.util.regex.Pattern> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.util.regex.Pattern>> ( ) ) { if ( java.util.Map.Entry<java.lang.Class<?>,java.util.regex.Pattern> . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ) { return java.util.Map.Entry<java.lang.Class<?>,java.util.regex.Pattern> . java.util.regex.Pattern ( ) ; } } return this . java.util.Map<java.lang.Class<?>,java.util.regex.Pattern> . java.util.regex.Pattern ( java.lang.Class<> ) ; }  <METHOD_END>
