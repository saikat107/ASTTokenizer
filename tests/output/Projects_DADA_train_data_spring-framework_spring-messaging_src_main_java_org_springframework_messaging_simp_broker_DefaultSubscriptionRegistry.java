<METHOD_START> public void void ( PathMatcher org.springframework.messaging.simp.broker.PathMatcher ) { this . org.springframework.messaging.simp.broker.PathMatcher = org.springframework.messaging.simp.broker.PathMatcher ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.PathMatcher org.springframework.messaging.simp.broker.PathMatcher ( ) { return this . org.springframework.messaging.simp.broker.PathMatcher ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { Expression org.springframework.messaging.simp.broker.Expression = null ; MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = org.springframework.messaging.simp.broker.Message<> . getHeaders ( ) ; java.lang.String java.lang.String = SimpMessageHeaderAccessor . getFirstNativeHeader ( java.lang.String ( ) , org.springframework.messaging.simp.broker.MessageHeaders ) ; if ( java.lang.String != null ) { try { org.springframework.messaging.simp.broker.Expression = this . org.springframework.messaging.simp.broker.ExpressionParser . parseExpression ( java.lang.String ) ; this . boolean = true ; if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String , java.lang.Throwable ) ; } } } this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String , java.lang.String , java.lang.String , org.springframework.messaging.simp.broker.Expression ) ; this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.DestinationCache . void ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo != null ) { java.lang.String java.lang.String = org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . java.lang.String ( java.lang.String ) ; if ( java.lang.String != null ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.DestinationCache . void ( java.lang.String , java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo != null ) { this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.DestinationCache . void ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.DestinationCache . org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> ( java.lang.String , org.springframework.messaging.simp.broker.Message<> ) ; return org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , org.springframework.messaging.simp.broker.Message<> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { if ( ! this . boolean ) { return org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ; } EvaluationContext org.springframework.messaging.simp.broker.EvaluationContext = null ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; for ( java.lang.String java.lang.String : org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) ) { for ( java.lang.String java.lang.String : org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo == null ) { continue; } org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription = org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription == null ) { continue; } Expression org.springframework.messaging.simp.broker.Expression = org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription . org.springframework.messaging.simp.broker.Expression ( ) ; if ( org.springframework.messaging.simp.broker.Expression == null ) { org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; continue; } if ( org.springframework.messaging.simp.broker.EvaluationContext == null ) { org.springframework.messaging.simp.broker.EvaluationContext = new StandardEvaluationContext ( org.springframework.messaging.simp.broker.Message<> ) ; org.springframework.messaging.simp.broker.EvaluationContext . getPropertyAccessors ( ) . add ( new org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SimpMessageHeaderPropertyAccessor ( ) ) ; } try { if ( org.springframework.messaging.simp.broker.Expression . getValue ( org.springframework.messaging.simp.broker.EvaluationContext , boolean .class ) ) { org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } catch ( SpelEvaluationException org.springframework.messaging.simp.broker.SpelEvaluationException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.messaging.simp.broker.SpelEvaluationException . getMessage ( ) ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } } } return org.springframework.messaging.simp.broker.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.DestinationCache + STRING + this . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , LinkedMultiValueMap < java.lang.String , java.lang.String > > java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> ) { if ( int ( ) > int ( ) ) { java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . remove ( java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getKey ( ) ) ; return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.simp.broker.Message<?> ) { LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> = this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . get ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> == null ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> ) { org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; for ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo : org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionRegistry . java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> ( ) ) { for ( java.lang.String java.lang.String : org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . java.util.Set<java.lang.String> ( ) ) { if ( org.springframework.messaging.simp.broker.PathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { for ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription : org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ) { org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . add ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . java.lang.String , org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription . java.lang.String ( ) ) ; } } } } if ( ! org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . deepCopy ( ) ) ; this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> ) ; } } } return org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , LinkedMultiValueMap < java.lang.String , java.lang.String > > java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> : this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getKey ( ) ; if ( org.springframework.messaging.simp.broker.PathMatcher ( ) . match ( java.lang.String , java.lang.String ) ) { LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getValue ( ) ; org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . deepCopy ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , LinkedMultiValueMap < java.lang.String , java.lang.String > > java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> : this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getKey ( ) ; LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getValue ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) ; if ( java.util.List<java.lang.String> != null ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; if ( java.util.List<java.lang.String> . boolean ( ) ) { org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . remove ( java.lang.String ) ; } if ( org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . deepCopy ( ) ) ; } } } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . remove ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . remove ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , LinkedMultiValueMap < java.lang.String , java.lang.String > > java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> : this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getKey ( ) ; LinkedMultiValueMap < java.lang.String , java.lang.String > org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> = java.util.Map.Entry<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . getValue ( ) ; if ( org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . remove ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . java.lang.String ( ) ) != null ) { if ( org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . isEmpty ( ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } else { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . put ( java.lang.String , org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String> . deepCopy ( ) ) ; } } } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . remove ( java.lang.String ) ; this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . remove ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.util.Map<java.lang.String,org.springframework.messaging.simp.broker.LinkedMultiValueMap<java.lang.String,java.lang.String>> . size ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String java.lang.String ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> < org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo > java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> ( ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . java.util.Collection<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , Expression org.springframework.messaging.simp.broker.Expression ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo == null ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = new org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String , org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ) ; if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo != null ) { org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo = org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ; } } org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo . void ( java.lang.String , java.lang.String , org.springframework.messaging.simp.broker.Expression ) ; return org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String java.lang.String ) { return this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.SessionSubscriptionInfo> . int ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> < org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription > java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ( java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<java.lang.String> ( ) ) { java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> < org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription > java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> = this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; if ( java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> != null ) { for ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription : java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ) { if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription . java.lang.String ( ) . boolean ( java.lang.String ) ) { return org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ; } } } } return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , Expression org.springframework.messaging.simp.broker.Expression ) { java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> < org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription > java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> = this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; if ( java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> == null ) { synchronized ( this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> ) { java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> = this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; if ( java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> == null ) { java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> = new java.util.concurrent.CopyOnWriteArraySet<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> <> ( ) ; this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String , java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ) ; } } } java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> . boolean ( new org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ( java.lang.String , org.springframework.messaging.simp.broker.Expression ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<java.lang.String> ( ) ) { java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> < org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription > java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> = this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; if ( java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> != null ) { for ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription : java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ) { if ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription . java.lang.String ( ) . boolean ( java.lang.String ) && java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> . boolean ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ) ) { synchronized ( this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> ) { if ( java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> . boolean ( ) ) { this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> . java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription> ( java.lang.String ) ; } } return java.lang.String ; } } } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING + this . java.util.Map<java.lang.String,java.util.Set<org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription>> + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , Expression org.springframework.messaging.simp.broker.Expression ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.messaging.simp.broker.Expression = org.springframework.messaging.simp.broker.Expression ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.simp.broker.Expression org.springframework.messaging.simp.broker.Expression ( ) { return this . org.springframework.messaging.simp.broker.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( this == java.lang.Object || ( java.lang.Object instanceof org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription && this . java.lang.String . boolean ( ( ( org.springframework.messaging.simp.broker.DefaultSubscriptionRegistry.Subscription ) java.lang.Object ) . java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return new java.lang.Class<?> < ? > [] { MessageHeaders .class } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.messaging.simp.broker.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.simp.broker.TypedValue org.springframework.messaging.simp.broker.TypedValue ( EvaluationContext org.springframework.messaging.simp.broker.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.messaging.simp.broker.AccessException { MessageHeaders org.springframework.messaging.simp.broker.MessageHeaders = ( MessageHeaders ) java.lang.Object ; SimpMessageHeaderAccessor org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor = MessageHeaderAccessor . getAccessor ( org.springframework.messaging.simp.broker.MessageHeaders , SimpMessageHeaderAccessor .class ) ; java.lang.Object java.lang.Object ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.Object = org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getDestination ( ) ; } else { java.lang.Object = org.springframework.messaging.simp.broker.SimpMessageHeaderAccessor . getFirstNativeHeader ( java.lang.String ) ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.messaging.simp.broker.MessageHeaders . get ( java.lang.String ) ; } } return new TypedValue ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.messaging.simp.broker.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.messaging.simp.broker.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) {		}  <METHOD_END>
