<METHOD_START> public void ( ) { this( null ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,? extends org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , ? extends HeaderValueMessageProcessor < ? > > java.util.Map<java.lang.String,? extends org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> ) { this . java.util.Map<java.lang.String,? extends org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> = ( java.util.Map<java.lang.String,> != null ) ? java.util.Map<java.lang.String,> : new java.util.HashMap<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<java.lang.Object>> < java.lang.String , HeaderValueMessageProcessor < java.lang.Object > > ( ) ; }  <METHOD_END>
<METHOD_START> public < T > void void ( MessageProcessor < T > org.springframework.integration.transformer.MessageProcessor<T> ) { this . org.springframework.integration.transformer.MessageProcessor<?> = org.springframework.integration.transformer.MessageProcessor<T> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.transformer.Message<?> < ? > org.springframework.integration.transformer.Message<?> ( Message < ? > org.springframework.integration.transformer.Message<?> ) { try { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( org.springframework.integration.transformer.Message<> . getHeaders ( ) ) ; this . void ( org.springframework.integration.transformer.Message<> , java.util.Map<java.lang.String,java.lang.Object> ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,? extends org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , ? extends HeaderValueMessageProcessor < ? > > java.util.Map.Entry<java.lang.String,? extends org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> : this . java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ; HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> = java.util.Map.Entry<java.lang.String,> . getValue ( ) ; java.lang.Boolean java.lang.Boolean = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . isOverwrite ( ) ; if ( java.lang.Boolean == null ) { java.lang.Boolean = this . boolean ; } boolean boolean = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) == null ; if ( boolean || java.lang.Boolean ) { java.lang.Object java.lang.Object = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . processMessage ( org.springframework.integration.transformer.Message<> ) ; if ( java.lang.Object != null || ! this . boolean ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } } return this . getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.transformer.Message<> . getPayload ( ) ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( org.springframework.integration.transformer.Message<> , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.transformer.Message<?> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( this . org.springframework.integration.transformer.MessageProcessor<> != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.transformer.MessageProcessor<> . processMessage ( org.springframework.integration.transformer.Message<> ) ; if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; for ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getKey ( ) ; if ( java.lang.Object instanceof java.lang.String ) { if ( this . boolean || java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.Object ) == null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ( java.lang.String ) java.lang.Object , java.util.Map.Entry<,> . getValue ( ) ) ; } } else if ( org.springframework.integration.transformer.Log . isDebugEnabled ( ) ) { org.springframework.integration.transformer.Log . debug ( STRING + java.lang.Object ) ; } } } else if ( org.springframework.integration.transformer.Log . isDebugEnabled ( ) ) { org.springframework.integration.transformer.Log . debug ( STRING + java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { boolean boolean = this . boolean ; for ( HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> : this . java.util.Map<java.lang.String,> . java.util.Collection<> ( ) ) { if ( org.springframework.integration.transformer.HeaderValueMessageProcessor<> instanceof BeanFactoryAware && this . getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) org.springframework.integration.transformer.HeaderValueMessageProcessor<> ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } java.lang.Boolean java.lang.Boolean = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . isOverwrite ( ) ; if ( java.lang.Boolean != null ) { boolean |= java.lang.Boolean ; } } if ( this . org.springframework.integration.transformer.MessageProcessor<> != null && this . org.springframework.integration.transformer.MessageProcessor<> instanceof BeanFactoryAware && this . getBeanFactory ( ) != null ) { ( ( BeanFactoryAware ) this . org.springframework.integration.transformer.MessageProcessor<> ) . setBeanFactory ( this . getBeanFactory ( ) ) ; } if ( ! boolean && ! this . boolean ) { org.springframework.integration.transformer.Log . warn ( this . getComponentName ( ) + STRING ) ; } }  <METHOD_END>
