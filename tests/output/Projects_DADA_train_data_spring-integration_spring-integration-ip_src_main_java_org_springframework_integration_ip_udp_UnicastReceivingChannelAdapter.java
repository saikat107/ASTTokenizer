<METHOD_START> public void ( int int ) { super( int ); this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( false ) ; }  <METHOD_END>
<METHOD_START> public void ( int int , boolean boolean ) { super( int ); this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { if ( this . java.net.DatagramSocket == null ) { return super. getPort ( ) ; } else { return this . java.net.DatagramSocket . int ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onInit ( ) ; this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setBeanFactory ( this . getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.net.DatagramSocket ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . int ( ) ) ; } setListening ( true ) ; while ( this . isActive ( ) ) { try { boolean ( java.net.DatagramPacket ( ) ) ; } catch ( java.net.SocketTimeoutException java.net.SocketTimeoutException ) { } catch ( java.net.SocketException java.net.SocketException ) { this . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } throw new MessagingException ( STRING , java.lang.Exception ) ; } } this . setListening ( false ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> ) { MessageHeaders org.springframework.integration.ip.udp.MessageHeaders = org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.ip.udp.MessageHeaders . get ( IpHeaders . ACK_ID ) ; byte [] byte[] = java.lang.Object . java.lang.String ( ) . byte[] ( ) ; java.lang.String java.lang.String = ( ( java.lang.String ) org.springframework.integration.ip.udp.MessageHeaders . get ( IpHeaders . ACK_ADDRESS ) ) . java.lang.String ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( ! java.util.regex.Matcher . boolean ( ) ) { throw new MessagingException ( org.springframework.integration.ip.udp.Message<byte[]> , STRING + java.lang.String ) ; } java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; int int = java.lang.Integer . int ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ; java.net.InetSocketAddress java.net.InetSocketAddress = new java.net.InetSocketAddress ( java.lang.String , int ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.Object + STRING + java.lang.String ) ; } try { java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int , java.net.InetSocketAddress ) ; java.net.DatagramSocket java.net.DatagramSocket = new java.net.DatagramSocket ( ) ; if ( this . int > NUMBER ) { java.net.DatagramSocket . void ( this . int ) ; } java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; java.net.DatagramSocket . void ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( org.springframework.integration.ip.udp.Message<byte[]> , STRING + java.lang.String , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( final java.net.DatagramPacket java.net.DatagramPacket ) { java.util.concurrent.Executor java.util.concurrent.Executor = getTaskExecutor ( ) ; if ( java.util.concurrent.Executor != null ) { try { java.util.concurrent.Executor . void ( ( ) void ( java.net.DatagramPacket ) ) ; } catch ( java.util.concurrent.RejectedExecutionException java.util.concurrent.RejectedExecutionException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } void ( java.net.DatagramPacket ) ; } } return true ; }  <METHOD_END>
<METHOD_START> protected void void ( final java.net.DatagramPacket java.net.DatagramPacket ) { Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = null ; try { org.springframework.integration.ip.udp.Message<byte[]> = this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . toMessage ( java.net.DatagramPacket ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.udp.Message<byte[]> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; } if ( org.springframework.integration.ip.udp.Message<byte[]> != null ) { if ( org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . containsKey ( IpHeaders . ACK_ADDRESS ) ) { void ( org.springframework.integration.ip.udp.Message<byte[]> ) ; } sendMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; } }  <METHOD_END>
<METHOD_START> protected java.net.DatagramPacket java.net.DatagramPacket ( ) java.lang.Exception { java.net.DatagramSocket java.net.DatagramSocket = this . java.net.DatagramSocket ( ) ; final byte [] byte[] = new byte [ this . getReceiveBufferSize ( ) ] ; java.net.DatagramPacket java.net.DatagramPacket = new java.net.DatagramPacket ( byte[] , byte[] . int ) ; java.net.DatagramSocket . void ( java.net.DatagramPacket ) ; return java.net.DatagramPacket ; }  <METHOD_END>
<METHOD_START> public void void ( java.net.DatagramSocket java.net.DatagramSocket ) { this . java.net.DatagramSocket = java.net.DatagramSocket ; }  <METHOD_END>
<METHOD_START> protected java.net.DatagramSocket java.net.DatagramSocket ( ) { return this . java.net.DatagramSocket ; }  <METHOD_END>
<METHOD_START> public synchronized java.net.DatagramSocket java.net.DatagramSocket ( ) { if ( this . java.net.DatagramSocket == null ) { try { java.net.DatagramSocket java.net.DatagramSocket = null ; java.lang.String java.lang.String = this . getLocalAddress ( ) ; int int = super. getPort ( ) ; if ( java.lang.String == null ) { java.net.DatagramSocket = int == NUMBER ? new java.net.DatagramSocket ( ) : new java.net.DatagramSocket ( int ) ; } else { java.net.InetAddress java.net.InetAddress = java.net.InetAddress . java.net.InetAddress ( java.lang.String ) ; java.net.DatagramSocket = new java.net.DatagramSocket ( new java.net.InetSocketAddress ( java.net.InetAddress , int ) ) ; } void ( java.net.DatagramSocket ) ; this . java.net.DatagramSocket = java.net.DatagramSocket ; } catch ( java.io.IOException java.io.IOException ) { throw new MessagingException ( STRING , java.io.IOException ) ; } } return this . java.net.DatagramSocket ; }  <METHOD_END>
<METHOD_START> protected void void ( java.net.DatagramSocket java.net.DatagramSocket )			throws java.net.SocketException { java.net.DatagramSocket . void ( this . getSoTimeout ( ) ) ; int int = this . getSoReceiveBufferSize ( ) ; if ( int > NUMBER ) { java.net.DatagramSocket . void ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStop ( ) ; try { java.net.DatagramSocket java.net.DatagramSocket = this . java.net.DatagramSocket ; this . java.net.DatagramSocket = null ; java.net.DatagramSocket . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLookupHost ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
