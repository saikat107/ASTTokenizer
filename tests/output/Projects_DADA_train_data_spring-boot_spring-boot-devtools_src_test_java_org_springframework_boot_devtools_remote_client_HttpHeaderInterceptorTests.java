<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . byte[] = new byte [] {} ; this . org.springframework.boot.devtools.remote.client.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.boot.devtools.remote.client.HttpRequest = new ServletServerHttpRequest ( this . org.springframework.boot.devtools.remote.client.MockHttpServletRequest ) ; this . java.lang.String = STRING ; this . java.lang.String = STRING ; given ( this . org.springframework.boot.devtools.remote.client.ClientHttpRequestExecution . execute ( this . org.springframework.boot.devtools.remote.client.HttpRequest , this . byte[] ) ) . willReturn ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse ) ; this . org.springframework.boot.devtools.remote.client.HttpHeaderInterceptor = new HttpHeaderInterceptor ( this . java.lang.String , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderInterceptor ( null , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderInterceptor ( STRING , this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderInterceptor ( this . java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new HttpHeaderInterceptor ( this . java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { ClientHttpResponse org.springframework.boot.devtools.remote.client.ClientHttpResponse = this . org.springframework.boot.devtools.remote.client.HttpHeaderInterceptor . intercept ( this . org.springframework.boot.devtools.remote.client.HttpRequest , this . byte[] , this . org.springframework.boot.devtools.remote.client.ClientHttpRequestExecution ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.HttpRequest . getHeaders ( ) . getFirst ( this . java.lang.String ) ) . isEqualTo ( this . java.lang.String ) ; assertThat ( org.springframework.boot.devtools.remote.client.ClientHttpResponse ) . isEqualTo ( this . org.springframework.boot.devtools.remote.client.ClientHttpResponse ) ; }  <METHOD_END>
