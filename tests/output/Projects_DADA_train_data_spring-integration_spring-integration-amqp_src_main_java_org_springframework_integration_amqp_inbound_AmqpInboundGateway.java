<METHOD_START> public void ( AbstractMessageListenerContainer org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer ) { this( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , new RabbitTemplate ( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . getConnectionFactory ( ) ) , false ); }  <METHOD_END>
<METHOD_START> public void ( AbstractMessageListenerContainer org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.inbound.AmqpTemplate ) { this( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , org.springframework.integration.amqp.inbound.AmqpTemplate , true ); }  <METHOD_END>
<METHOD_START> private void ( AbstractMessageListenerContainer org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , AmqpTemplate org.springframework.integration.amqp.inbound.AmqpTemplate , boolean boolean ) { Assert . notNull ( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer , STRING ) ; Assert . notNull ( org.springframework.integration.amqp.inbound.AmqpTemplate , STRING ) ; Assert . isNull ( org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . getMessageListener ( ) , STRING + STRING + STRING ) ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer = org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . setAutoStartup ( false ) ; this . org.springframework.integration.amqp.inbound.AmqpTemplate = org.springframework.integration.amqp.inbound.AmqpTemplate ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.integration.amqp.inbound.MessageConverter ) { Assert . notNull ( org.springframework.integration.amqp.inbound.MessageConverter , STRING ) ; this . org.springframework.integration.amqp.inbound.MessageConverter = org.springframework.integration.amqp.inbound.MessageConverter ; if ( ! this . boolean ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.inbound.AmqpTemplate ) . setMessageConverter ( org.springframework.integration.amqp.inbound.MessageConverter ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AmqpHeaderMapper org.springframework.integration.amqp.inbound.AmqpHeaderMapper ) { Assert . notNull ( org.springframework.integration.amqp.inbound.AmqpHeaderMapper , STRING ) ; this . org.springframework.integration.amqp.inbound.AmqpHeaderMapper = org.springframework.integration.amqp.inbound.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.amqp.inbound.Address = new Address ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . setMessageListener ( ( ChannelAwareMessageListener ) ( message , channel ) -> { Object payload = this . amqpMessageConverter . fromMessage ( message ) ; Map < String , Object > headers = this . headerMapper . toHeadersFromRequest ( message . getMessageProperties ( ) ) ; if ( this . messageListenerContainer . getAcknowledgeMode ( ) == AcknowledgeMode . MANUAL ) { headers . put ( AmqpHeaders . DELIVERY_TAG , message . getMessageProperties ( ) . getDeliveryTag ( ) ) ; headers . put ( AmqpHeaders . CHANNEL , channel ) ; } org . springframework . messaging . Message < ? > request = getMessageBuilderFactory ( ) . withPayload ( payload ) . copyHeaders ( headers ) . build ( ) ; final org . springframework . messaging . Message < ? > reply = sendAndReceiveMessage ( request ) ; if ( reply != null ) { Address replyTo ; String replyToProperty = message . getMessageProperties ( ) . getReplyTo ( ) ; if ( replyToProperty != null ) { replyTo = new Address ( replyToProperty ) ; } else { replyTo = AmqpInboundGateway .this . defaultReplyTo ; } MessagePostProcessor messagePostProcessor = message1 -> { MessageProperties messageProperties = message1 . getMessageProperties ( ) ; String contentEncoding = messageProperties . getContentEncoding ( ) ; long contentLength = messageProperties . getContentLength ( ) ; String contentType = messageProperties . getContentType ( ) ; this . headerMapper . fromHeadersToReply ( reply . getHeaders ( ) , messageProperties ) ; messageProperties . setReplyTo ( null ) ; if ( StringUtils . hasText ( contentEncoding ) ) { messageProperties . setContentEncoding ( contentEncoding ) ; } messageProperties . setContentLength ( contentLength ) ; if ( contentType != null ) { messageProperties . setContentType ( contentType ) ; } return message1 ; } ; if ( replyTo != null ) { this . amqpTemplate . convertAndSend ( replyTo . getExchangeName ( ) , replyTo . getRoutingKey ( ) , reply . getPayload ( ) , messagePostProcessor ) ; } else { if ( ! this . amqpTemplateExplicitlySet ) { throw new IllegalStateException ( STRING + STRING ) ; } else { this . amqpTemplate . convertAndSend ( reply . getPayload ( ) , messagePostProcessor ) ; } } } } ) ; this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . afterPropertiesSet ( ) ; if ( ! this . boolean ) { ( ( RabbitTemplate ) this . org.springframework.integration.amqp.inbound.AmqpTemplate ) . afterPropertiesSet ( ) ; } super. onInit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.amqp.inbound.AbstractMessageListenerContainer . stop ( ) ; }  <METHOD_END>
