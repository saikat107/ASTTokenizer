<METHOD_START> public void ( Project org.springframework.boot.ant.Project ) { setProject ( org.springframework.boot.ant.Project ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.ant.BuildException { java.lang.String java.lang.String = this . java.lang.String ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.lang.String ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { throw new BuildException ( STRING + this . java.io.File ) ; } } void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { if ( this . java.io.File == null ) { throw new BuildException ( STRING ) ; } if ( ! this . java.io.File . boolean ( ) ) { throw new BuildException ( STRING + this . java.io.File + STRING ) ; } try { if ( this . java.io.File . boolean ( ) ) { return MainClassFinder . findSingleMainClass ( this . java.io.File , java.lang.String ) ; } return MainClassFinder . findSingleMainClass ( new java.util.jar.JarFile ( this . java.io.File ) , STRING , java.lang.String ) ; } catch ( java.io.IOException java.io.IOException ) { throw new BuildException ( java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { if ( StringUtils . hasText ( this . java.lang.String ) ) { getProject ( ) . setProperty ( this . java.lang.String , java.lang.String ) ; } else { log ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
