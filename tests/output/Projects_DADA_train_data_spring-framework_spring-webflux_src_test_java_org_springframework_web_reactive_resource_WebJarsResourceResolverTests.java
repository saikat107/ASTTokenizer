<METHOD_START> @ Before public void void ( ) { this . java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.List ( new ClassPathResource ( STRING ) ) ; this . org.springframework.web.reactive.resource.WebJarsResourceResolver = new WebJarsResourceResolver ( ) ; this . org.springframework.web.reactive.resource.ResourceResolverChain = mock ( ResourceResolverChain .class ) ; this . org.springframework.web.reactive.resource.ServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.WebJarsResourceResolverTests> ( ) ) ) ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( java.lang.String ) ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertEquals ( java.lang.String , java.lang.String ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.WebJarsResourceResolverTests> ( ) ) ) ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertNull ( java.lang.String ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , never ( ) ) . resolveUrlPath ( STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( java.lang.String ) ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertEquals ( java.lang.String , java.lang.String ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertNull ( java.lang.String ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , never ( ) ) . resolveUrlPath ( null , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Resource org.springframework.web.reactive.resource.Resource = mock ( Resource .class ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.WebJarsResourceResolverTests> ( ) ) ) ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertNull ( org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , never ( ) ) . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , null , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . java.util.List<org.springframework.web.reactive.resource.Resource> = java.util.List ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.WebJarsResourceResolverTests> ( ) ) ) ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . empty ( ) ) ; Resource org.springframework.web.reactive.resource.Resource = mock ( Resource .class ) ; java.lang.String java.lang.String = STRING ; given ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ) . willReturn ( Mono . just ( org.springframework.web.reactive.resource.Resource ) ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.WebJarsResourceResolver . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> , this . org.springframework.web.reactive.resource.ResourceResolverChain ) . block ( java.time.Duration ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; verify ( this . org.springframework.web.reactive.resource.ResourceResolverChain , times ( NUMBER ) ) . resolveResource ( this . org.springframework.web.reactive.resource.ServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) ; }  <METHOD_END>
