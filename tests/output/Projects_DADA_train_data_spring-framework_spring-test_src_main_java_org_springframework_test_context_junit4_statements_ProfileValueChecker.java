<METHOD_START> public void ( Statement org.springframework.test.context.junit4.statements.Statement , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( org.springframework.test.context.junit4.statements.Statement , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . org.springframework.test.context.junit4.statements.Statement = org.springframework.test.context.junit4.statements.Statement ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Throwable { if ( this . java.lang.reflect.Method == null ) { if ( ! ProfileValueUtils . isTestEnabledInThisEnvironment ( this . java.lang.Class<> ) ) { java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotatedElementUtils . findMergedAnnotation ( this . java.lang.Class<> , IfProfileValue .class ) ; throw new AssumptionViolatedException ( java.lang.String . java.lang.String ( STRING , java.lang.annotation.Annotation , this . java.lang.Class<> . java.lang.String ( ) ) ) ; } } else { if ( ! ProfileValueUtils . isTestEnabledInThisEnvironment ( this . java.lang.reflect.Method , this . java.lang.Class<> ) ) { throw new AssumptionViolatedException ( java.lang.String . java.lang.String ( STRING , this . java.lang.reflect.Method ) ) ; } } this . org.springframework.test.context.junit4.statements.Statement . evaluate ( ) ; }  <METHOD_END>
