<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler = mock ( PersistentEntityResourceAssembler .class ) ; this . org.springframework.data.rest.webmvc.RootResourceInformation = getResourceInformation ( Book .class ) ; this . org.springframework.data.rest.webmvc.TestDataPopulator . populateRepositories ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Book org.springframework.data.rest.webmvc.Book = org.springframework.data.rest.webmvc.BookRepository . findAll ( ) . iterator ( ) . next ( ) ; assertThat ( org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController . followPropertyReference ( org.springframework.data.rest.webmvc.RootResourceInformation , book . id , STRING , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) . getStatusCode ( ) , is ( HttpStatus . OK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = ResourceNotFoundException .class ) public void void ( ) java.lang.Exception { Book org.springframework.data.rest.webmvc.Book = org.springframework.data.rest.webmvc.BookRepository . findAll ( ) . iterator ( ) . next ( ) ; org.springframework.data.rest.webmvc.RepositoryPropertyReferenceController . followPropertyReference ( org.springframework.data.rest.webmvc.RootResourceInformation , book . id , STRING , org.springframework.data.rest.webmvc.PersistentEntityResourceAssembler ) ; }  <METHOD_END>
