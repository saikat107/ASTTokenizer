<METHOD_START> @ Before public void void ( ) { org.springframework.integration.aggregator.AggregatingMessageHandler = new AggregatingMessageHandler ( org.springframework.integration.aggregator.MessageGroupProcessor , org.springframework.integration.aggregator.MessageGroupStore , org.springframework.integration.aggregator.CorrelationStrategy , org.springframework.integration.aggregator.ReleaseStrategy ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setOutputChannel ( org.springframework.integration.aggregator.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; when ( org.springframework.integration.aggregator.CorrelationStrategy . getCorrelationKey ( isA ( Message .class ) ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( any ( MessageGroup .class ) ) ) . thenReturn ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; when ( org.springframework.integration.aggregator.MessageChannel . send ( any ( Message .class ) ) ) . thenReturn ( true ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.CorrelationStrategy ) . getCorrelationKey ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.CorrelationStrategy ) . getCorrelationKey ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageGroupProcessor ) . processMessageGroup ( isA ( SimpleMessageGroup .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { doAnswer ( new ThrowsException ( new java.lang.RuntimeException ( STRING ) ) ) . when ( org.springframework.integration.aggregator.MessageGroupProcessor ) . processMessageGroup ( isA ( SimpleMessageGroup .class ) ) ; java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; when ( org.springframework.integration.aggregator.CorrelationStrategy . getCorrelationKey ( isA ( Message .class ) ) ) . thenReturn ( java.lang.String ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . setExpireGroupsUponCompletion ( true ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; try { org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.aggregator.MessageHandlingException ) { assertEquals ( NUMBER , org.springframework.integration.aggregator.MessageGroupStore . getMessageGroup ( java.lang.String ) . size ( ) ) ; } verify ( org.springframework.integration.aggregator.CorrelationStrategy ) . getCorrelationKey ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.CorrelationStrategy ) . getCorrelationKey ( org.springframework.integration.aggregator.Message<> ) ; verify ( org.springframework.integration.aggregator.MessageGroupProcessor ) . processMessageGroup ( isA ( SimpleMessageGroup .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; final Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; final Message < ? > org.springframework.integration.aggregator.Message<?> = org.springframework.integration.aggregator.Message<?> ( java.lang.String , NUMBER , NUMBER ) ; final java.util.List<org.springframework.integration.aggregator.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.Message<?>> = new java.util.ArrayList<org.springframework.integration.aggregator.Message<?>> < Message < ? > > ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; when ( org.springframework.integration.aggregator.CorrelationStrategy . getCorrelationKey ( isA ( Message .class ) ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.integration.aggregator.MessageGroupProcessor . processMessageGroup ( any ( MessageGroup .class ) ) ) . thenReturn ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; when ( org.springframework.integration.aggregator.MessageChannel . send ( any ( Message .class ) ) ) . thenReturn ( true ) ; org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; java.util.concurrent.CountDownLatch . void ( ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message<> ) ; java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) . java.util.concurrent.Future<?> ( ( ) { org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; java.util.List<org.springframework.integration.aggregator.Message<?>> . add ( org.springframework.integration.aggregator.Message<> ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , org.springframework.integration.aggregator.MessageGroupStore . expireMessageGroups ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final Message < ? > org.springframework.integration.aggregator.Message<?> = MessageBuilder . withPayload ( STRING ) . build ( ) ; when ( org.springframework.integration.aggregator.CorrelationStrategy . getCorrelationKey ( isA ( Message .class ) ) ) . thenReturn ( null ) ; try { org.springframework.integration.aggregator.AggregatingMessageHandler . handleMessage ( org.springframework.integration.aggregator.Message<> ) ; fail ( STRING ) ; } catch ( MessageHandlingException org.springframework.integration.aggregator.MessageHandlingException ) { java.lang.Throwable java.lang.Throwable = org.springframework.integration.aggregator.MessageHandlingException . getCause ( ) ; boolean boolean = java.lang.Throwable instanceof java.lang.IllegalStateException && java.lang.Throwable . java.lang.String ( ) . java.lang.String ( ) . boolean ( STRING ) ; if ( ! boolean ) { throw org.springframework.integration.aggregator.MessageHandlingException ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.aggregator.Message<?> < ? > org.springframework.integration.aggregator.Message<?> ( java.lang.String java.lang.String , int int , int int ) { return MessageBuilder . withPayload ( STRING + int ) . setCorrelationId ( java.lang.String ) . setSequenceNumber ( int ) . setSequenceSize ( int ) . build ( ) ; }  <METHOD_END>
