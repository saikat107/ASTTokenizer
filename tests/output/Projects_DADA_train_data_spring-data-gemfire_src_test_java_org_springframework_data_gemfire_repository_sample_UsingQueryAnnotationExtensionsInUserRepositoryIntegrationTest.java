<METHOD_START> protected static org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( java.lang.String java.lang.String ) { return new User ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected static java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> ( java.lang.String ... java.lang.String[] ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = new java.util.ArrayList<org.springframework.data.gemfire.repository.sample.User> < User > ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> . add ( org.springframework.data.gemfire.repository.sample.User ( java.lang.String ) ) ; } return java.util.List<org.springframework.data.gemfire.repository.sample.User> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( User org.springframework.data.gemfire.repository.sample.User ) { return org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> , org.springframework.data.gemfire.repository.sample.User ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.sample.User org.springframework.data.gemfire.repository.sample.User ( Region < java.lang.String , User > org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> , User org.springframework.data.gemfire.repository.sample.User ) { org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> . put ( org.springframework.data.gemfire.repository.sample.User . getUsername ( ) , org.springframework.data.gemfire.repository.sample.User ) ; return org.springframework.data.gemfire.repository.sample.User ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { assertThat ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> , is ( notNullValue ( ) ) ) ; if ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> . isEmpty ( ) ) { assertThat ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; org.springframework.data.gemfire.repository.sample.User ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.repository.sample.Region<java.lang.String,org.springframework.data.gemfire.repository.sample.User> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UsingQueryAnnotationExtensionsInUserRepository . findBy ( STRING ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . isEmpty ( ) , is ( false ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . get ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UsingQueryAnnotationExtensionsInUserRepository . findDistinctByUsernameLikeOrderByUsernameAsc ( STRING ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . isEmpty ( ) , is ( false ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , is ( equalTo ( java.util.List<org.springframework.data.gemfire.repository.sample.User> ( STRING , STRING , STRING , STRING , STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.gemfire.repository.sample.User> < User > java.util.List<org.springframework.data.gemfire.repository.sample.User> = org.springframework.data.gemfire.repository.sample.UsingQueryAnnotationExtensionsInUserRepository . findDistinctByUsernameLikeOrderByUsernameAsc ( STRING ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . isEmpty ( ) , is ( false ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.User> . get ( NUMBER ) , is ( equalTo ( org.springframework.data.gemfire.repository.sample.User ( STRING ) ) ) ) ; }  <METHOD_END>
