<METHOD_START> private void ( ) {}  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.BigDecimalToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.BigDecimalToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.StringToBigDecimalConverter . org.springframework.data.mongodb.core.convert.MongoConverters.StringToBigDecimalConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.BigIntegerToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.BigIntegerToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.StringToBigIntegerConverter . org.springframework.data.mongodb.core.convert.MongoConverters.StringToBigIntegerConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.URLToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.URLToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.StringToURLConverter . org.springframework.data.mongodb.core.convert.MongoConverters.StringToURLConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.DocumentToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.DocumentToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.TermToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.TermToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.NamedMongoScriptToDocumentConverter . org.springframework.data.mongodb.core.convert.MongoConverters.NamedMongoScriptToDocumentConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.DocumentToNamedMongoScriptConverter . org.springframework.data.mongodb.core.convert.MongoConverters.DocumentToNamedMongoScriptConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.CurrencyToStringConverter . org.springframework.data.mongodb.core.convert.MongoConverters.CurrencyToStringConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.StringToCurrencyConverter . org.springframework.data.mongodb.core.convert.MongoConverters.StringToCurrencyConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.AtomicIntegerToIntegerConverter . org.springframework.data.mongodb.core.convert.MongoConverters.AtomicIntegerToIntegerConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.AtomicLongToLongConverter . org.springframework.data.mongodb.core.convert.MongoConverters.AtomicLongToLongConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.LongToAtomicLongConverter . org.springframework.data.mongodb.core.convert.MongoConverters.LongToAtomicLongConverter ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.data.mongodb.core.convert.MongoConverters.IntegerToAtomicIntegerConverter . org.springframework.data.mongodb.core.convert.MongoConverters.IntegerToAtomicIntegerConverter ) ; return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ObjectId org.springframework.data.mongodb.core.convert.ObjectId ) { return org.springframework.data.mongodb.core.convert.ObjectId == null ? null : org.springframework.data.mongodb.core.convert.ObjectId . toString ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.ObjectId org.springframework.data.mongodb.core.convert.ObjectId ( java.lang.String java.lang.String ) { return StringUtils . hasText ( java.lang.String ) ? new ObjectId ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> public java.math.BigInteger java.math.BigInteger ( ObjectId org.springframework.data.mongodb.core.convert.ObjectId ) { return org.springframework.data.mongodb.core.convert.ObjectId == null ? null : new java.math.BigInteger ( org.springframework.data.mongodb.core.convert.ObjectId . toString ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.convert.ObjectId org.springframework.data.mongodb.core.convert.ObjectId ( java.math.BigInteger java.math.BigInteger ) { return java.math.BigInteger == null ? null : new ObjectId ( java.math.BigInteger . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.math.BigDecimal java.math.BigDecimal ) { return java.math.BigDecimal == null ? null : java.math.BigDecimal . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.math.BigDecimal java.math.BigDecimal ( java.lang.String java.lang.String ) { return StringUtils . hasText ( java.lang.String ) ? new java.math.BigDecimal ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.math.BigInteger java.math.BigInteger ) { return java.math.BigInteger == null ? null : java.math.BigInteger . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.math.BigInteger java.math.BigInteger ( java.lang.String java.lang.String ) { return StringUtils . hasText ( java.lang.String ) ? new java.math.BigInteger ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( java.net.URL java.net.URL ) { return java.net.URL == null ? null : java.net.URL . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { try { return java.lang.String == null ? null : new java.net.URL ( java.lang.String ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new ConversionFailedException ( org.springframework.data.mongodb.core.convert.TypeDescriptor , org.springframework.data.mongodb.core.convert.TypeDescriptor , java.lang.String , java.net.MalformedURLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Document org.springframework.data.mongodb.core.convert.Document ) { if ( org.springframework.data.mongodb.core.convert.Document == null ) { return null ; } return org.springframework.data.mongodb.core.convert.Document . toJson ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( Term org.springframework.data.mongodb.core.convert.Term ) { return org.springframework.data.mongodb.core.convert.Term == null ? null : org.springframework.data.mongodb.core.convert.Term . getFormatted ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.NamedMongoScript org.springframework.data.mongodb.core.convert.NamedMongoScript ( Document org.springframework.data.mongodb.core.convert.Document ) { if ( org.springframework.data.mongodb.core.convert.Document == null ) { return null ; } java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.Document . get ( STRING ) . toString ( ) ; java.lang.Object java.lang.Object = org.springframework.data.mongodb.core.convert.Document . get ( STRING ) ; return new NamedMongoScript ( java.lang.String , ( ( Code ) java.lang.Object ) . getCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( NamedMongoScript org.springframework.data.mongodb.core.convert.NamedMongoScript ) { if ( org.springframework.data.mongodb.core.convert.NamedMongoScript == null ) { return new Document ( ) ; } Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , org.springframework.data.mongodb.core.convert.NamedMongoScript . getName ( ) ) ; org.springframework.data.mongodb.core.convert.Document . put ( STRING , new Code ( org.springframework.data.mongodb.core.convert.NamedMongoScript . getCode ( ) ) ) ; return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.util.Currency java.util.Currency ) { return java.util.Currency == null ? null : java.util.Currency . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Currency java.util.Currency ( java.lang.String java.lang.String ) { return StringUtils . hasText ( java.lang.String ) ? java.util.Currency . java.util.Currency ( java.lang.String ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends java.lang.Number > org.springframework.data.mongodb.core.convert.Converter<java.lang.Number,T> < java.lang.Number , T > org.springframework.data.mongodb.core.convert.Converter<java.lang.Number,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.data.mongodb.core.convert.MongoConverters.NumberToNumberConverterFactory.NumberToNumberConverter<T> < T > ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.mongodb.core.convert.TypeDescriptor , TypeDescriptor org.springframework.data.mongodb.core.convert.TypeDescriptor ) { return ! org.springframework.data.mongodb.core.convert.TypeDescriptor . equals ( org.springframework.data.mongodb.core.convert.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; this . java.lang.Class<T> = java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( java.lang.Number java.lang.Number ) { if ( java.lang.Number instanceof java.util.concurrent.atomic.AtomicInteger ) { return NumberUtils . convertNumberToTargetClass ( ( ( java.util.concurrent.atomic.AtomicInteger ) java.lang.Number ) . int ( ) , this . java.lang.Class<T> ) ; } if ( java.lang.Number instanceof java.util.concurrent.atomic.AtomicLong ) { return NumberUtils . convertNumberToTargetClass ( ( ( java.util.concurrent.atomic.AtomicLong ) java.lang.Number ) . long ( ) , this . java.lang.Class<T> ) ; } return NumberUtils . convertNumberToTargetClass ( java.lang.Number , this . java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Long java.lang.Long ( java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong ) { return NumberUtils . convertNumberToTargetClass ( java.util.concurrent.atomic.AtomicLong , java.lang.Long .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ) { return NumberUtils . convertNumberToTargetClass ( java.util.concurrent.atomic.AtomicInteger , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.atomic.AtomicLong java.util.concurrent.atomic.AtomicLong ( java.lang.Long java.lang.Long ) { return java.lang.Long != null ? new java.util.concurrent.atomic.AtomicLong ( java.lang.Long ) : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( java.lang.Integer java.lang.Integer ) { return java.lang.Integer != null ? new java.util.concurrent.atomic.AtomicInteger ( java.lang.Integer ) : null ; }  <METHOD_END>
