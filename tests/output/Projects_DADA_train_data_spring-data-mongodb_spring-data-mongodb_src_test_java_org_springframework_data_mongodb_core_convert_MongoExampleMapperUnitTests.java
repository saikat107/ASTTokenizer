<METHOD_START> @ Before public void void ( ) { this . org.springframework.data.mongodb.core.convert.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter = new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.convert.MongoDbFactory ) , org.springframework.data.mongodb.core.convert.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.convert.MappingMongoConverter . afterPropertiesSet ( ) ; this . org.springframework.data.mongodb.core.convert.MongoExampleMapper = new MongoExampleMapper ( org.springframework.data.mongodb.core.convert.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; java.util.List java.util.List = ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , java.util.List ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , new org . org.bson . org.bson ( STRING , new java.lang.String [] { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . java.lang.Class<? extends org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument> ( ) . java.lang.String ( ) } ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument , matching ( ) . withIncludeNullValues ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument .class ) ) , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withStringMatcher ( StringMatcher . STARTING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withStringMatcher ( StringMatcher . STARTING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING + java.util.regex.Pattern . java.lang.String ( STRING ) ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withStringMatcher ( StringMatcher . ENDING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withStringMatcher ( StringMatcher . REGEX ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withStringMatcher ( StringMatcher . ENDING ) . withIgnoreCase ( ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , new org . org.bson . org.bson ( STRING , STRING ) . append ( STRING , STRING ) ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withIgnoreCase ( ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , new org . org.bson . org.bson ( STRING , java.util.regex.Pattern . java.lang.String ( STRING ) ) . append ( STRING , STRING ) ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.ReferenceDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.ReferenceDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.ReferenceDocument . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( WithDBRef .class ) ) ; com . com.mongodb . com.mongodb com.mongodb.DBRef = getTypedValue ( org.bson.Document , STRING , com . com.mongodb . com.mongodb .class ) ; assertThat ( com.mongodb.DBRef . getId ( ) , Is .< java.lang.Object > is ( STRING ) ) ; assertThat ( com.mongodb.DBRef . getCollectionName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassWithGeoTypes org.springframework.data.mongodb.core.convert.ClassWithGeoTypes = new ClassWithGeoTypes ( ) ; probe . legacyPoint = new Point ( NUMBER , NUMBER ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.ClassWithGeoTypes ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( WithDBRef .class ) ) ; assertThat ( org.bson.Document . get ( STRING ) , Is .< java.lang.Object > is ( NUMBER ) ) ; assertThat ( org.bson.Document . get ( STRING ) , Is .< java.lang.Object > is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withIgnorePaths ( STRING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withIgnorePaths ( STRING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument , matching ( ) . withIgnorePaths ( STRING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument . org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument , matching ( ) . withIgnorePaths ( STRING ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.WrapperDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < ? > org.springframework.data.mongodb.core.convert.Example<?> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , matching ( ) . withMatcher ( STRING , GenericPropertyMatchers . contains ( ) ) ) ; IsBsonObject < Bson > org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> = isBsonObject ( ) . containing ( STRING , STRING ) . containing ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<> , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) , is ( org.springframework.data.mongodb.core.convert.IsBsonObject<org.springframework.data.mongodb.core.convert.Bson> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.HierachicalDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.HierachicalDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.HierachicalDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.HierachicalDocument . java.lang.String = STRING ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.HierachicalDocument ) , org.springframework.data.mongodb.core.convert.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument .class ) ) ; assertThat ( org.bson.Document , isBsonObject ( ) . containing ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument = new org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument ( ) ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument . java.lang.String = STRING ; Example < org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument > org.springframework.data.mongodb.core.convert.Example<org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument> = Example . of ( org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument , ExampleMatcher . matchingAny ( ) ) ; assertThat ( org.springframework.data.mongodb.core.convert.MongoExampleMapper . getMappedExample ( org.springframework.data.mongodb.core.convert.Example<org.springframework.data.mongodb.core.convert.MongoExampleMapperUnitTests.FlatDocument> ) , isBsonObject ( ) . containing ( STRING ) . containing ( STRING ) ) ; }  <METHOD_END>
