<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { void ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { LoadTimeWeaver org.springframework.context.weaving.LoadTimeWeaver = org.springframework.context.weaving.LoadTimeWeaver ( java.lang.ClassLoader ) ; if ( org.springframework.context.weaving.LoadTimeWeaver != null ) { if ( org.springframework.context.weaving.Log . isInfoEnabled ( ) ) { org.springframework.context.weaving.Log . info ( STRING + org.springframework.context.weaving.LoadTimeWeaver . getClass ( ) . getName ( ) ) ; } this . org.springframework.context.weaving.LoadTimeWeaver = org.springframework.context.weaving.LoadTimeWeaver ; } else if ( InstrumentationLoadTimeWeaver . isInstrumentationAvailable ( ) ) { org.springframework.context.weaving.Log . info ( STRING ) ; this . org.springframework.context.weaving.LoadTimeWeaver = new InstrumentationLoadTimeWeaver ( java.lang.ClassLoader ) ; } else { try { this . org.springframework.context.weaving.LoadTimeWeaver = new ReflectiveLoadTimeWeaver ( java.lang.ClassLoader ) ; if ( org.springframework.context.weaving.Log . isInfoEnabled ( ) ) { org.springframework.context.weaving.Log . info ( STRING + this . org.springframework.context.weaving.LoadTimeWeaver . getInstrumentableClassLoader ( ) . getClass ( ) . getName ( ) ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new java.lang.IllegalStateException ( java.lang.IllegalStateException . java.lang.String ( ) + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.context.weaving.LoadTimeWeaver org.springframework.context.weaving.LoadTimeWeaver ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.String java.lang.String = java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) ; try { if ( java.lang.String . boolean ( STRING ) ) { return new WebLogicLoadTimeWeaver ( java.lang.ClassLoader ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return new GlassFishLoadTimeWeaver ( java.lang.ClassLoader ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return new TomcatLoadTimeWeaver ( java.lang.ClassLoader ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return new JBossLoadTimeWeaver ( java.lang.ClassLoader ) ; } else if ( java.lang.String . boolean ( STRING ) ) { return new WebSphereLoadTimeWeaver ( java.lang.ClassLoader ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { if ( org.springframework.context.weaving.Log . isInfoEnabled ( ) ) { org.springframework.context.weaving.Log . info ( STRING + java.lang.IllegalStateException . java.lang.String ( ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.context.weaving.LoadTimeWeaver instanceof InstrumentationLoadTimeWeaver ) { if ( org.springframework.context.weaving.Log . isInfoEnabled ( ) ) { org.springframework.context.weaving.Log . info ( STRING + this . org.springframework.context.weaving.LoadTimeWeaver . getInstrumentableClassLoader ( ) . getClass ( ) . getName ( ) ) ; } ( ( InstrumentationLoadTimeWeaver ) this . org.springframework.context.weaving.LoadTimeWeaver ) . removeTransformers ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { this . org.springframework.context.weaving.LoadTimeWeaver . addTransformer ( java.lang.instrument.ClassFileTransformer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . org.springframework.context.weaving.LoadTimeWeaver . getInstrumentableClassLoader ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . org.springframework.context.weaving.LoadTimeWeaver . getThrowawayClassLoader ( ) ; }  <METHOD_END>
