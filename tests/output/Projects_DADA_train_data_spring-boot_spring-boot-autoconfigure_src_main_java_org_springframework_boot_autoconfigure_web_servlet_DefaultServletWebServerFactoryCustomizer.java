<METHOD_START> public void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties = org.springframework.boot.autoconfigure.web.servlet.ServerProperties ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Environment org.springframework.boot.autoconfigure.web.servlet.Environment ) { this . org.springframework.boot.autoconfigure.web.servlet.Environment = org.springframework.boot.autoconfigure.web.servlet.Environment ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getPort ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setPort ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getPort ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getAddress ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setAddress ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getAddress ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) . getContextPath ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setContextPath ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) . getContextPath ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getDisplayName ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setDisplayName ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getDisplayName ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSession ( ) . getTimeout ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setSessionTimeout ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSession ( ) . getTimeout ( ) ) ; } org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setPersistSession ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSession ( ) . isPersistent ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setSessionStoreDir ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSession ( ) . getStoreDir ( ) ) ; if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSsl ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setSsl ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSsl ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setJsp ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) . getJsp ( ) ) ; } if ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getCompression ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setCompression ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getCompression ( ) ) ; } org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . setServerHeader ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServerHeader ( ) ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory instanceof TomcatServletWebServerFactory ) { org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer.TomcatCustomizer . void ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties , this . org.springframework.boot.autoconfigure.web.servlet.Environment , ( TomcatServletWebServerFactory ) org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory instanceof JettyServletWebServerFactory ) { org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer.JettyCustomizer . void ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties , this . org.springframework.boot.autoconfigure.web.servlet.Environment , ( JettyServletWebServerFactory ) org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory instanceof UndertowServletWebServerFactory ) { org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer.UndertowCustomizer . void ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties , this . org.springframework.boot.autoconfigure.web.servlet.Environment , ( UndertowServletWebServerFactory ) org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory ) ; } org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . addInitializers ( new org.springframework.boot.autoconfigure.web.servlet.DefaultServletWebServerFactoryCustomizer.SessionConfiguringInitializer ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getSession ( ) ) ) ; org.springframework.boot.autoconfigure.web.servlet.ConfigurableServletWebServerFactory . addInitializers ( new InitParameterConfiguringServletContextInitializer ( this . org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getServlet ( ) . getContextParameters ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , Environment org.springframework.boot.autoconfigure.web.servlet.Environment ) { if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . isUseForwardHeaders ( ) != null ) { return org.springframework.boot.autoconfigure.web.servlet.ServerProperties . isUseForwardHeaders ( ) ; } CloudPlatform org.springframework.boot.autoconfigure.web.servlet.CloudPlatform = CloudPlatform . getActive ( org.springframework.boot.autoconfigure.web.servlet.Environment ) ; return ( org.springframework.boot.autoconfigure.web.servlet.CloudPlatform == null ? false : org.springframework.boot.autoconfigure.web.servlet.CloudPlatform . isUsingForwardHeaders ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.boot.autoconfigure.web.servlet.Session ) { this . org.springframework.boot.autoconfigure.web.servlet.Session = org.springframework.boot.autoconfigure.web.servlet.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.boot.autoconfigure.web.servlet.ServletContext ) throws org.springframework.boot.autoconfigure.web.servlet.ServletException { if ( this . org.springframework.boot.autoconfigure.web.servlet.Session . getTrackingModes ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.ServletContext . setSessionTrackingModes ( java.util.Set<javax.servlet.SessionTrackingMode> ( this . org.springframework.boot.autoconfigure.web.servlet.Session . getTrackingModes ( ) ) ) ; } void ( org.springframework.boot.autoconfigure.web.servlet.ServletContext . getSessionCookieConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( SessionCookieConfig org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig ) { Session . Session Session.Cookie = this . org.springframework.boot.autoconfigure.web.servlet.Session . getCookie ( ) ; if ( Session.Cookie . getName ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setName ( Session.Cookie . getName ( ) ) ; } if ( Session.Cookie . getDomain ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setDomain ( Session.Cookie . getDomain ( ) ) ; } if ( Session.Cookie . getPath ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setPath ( Session.Cookie . getPath ( ) ) ; } if ( Session.Cookie . getComment ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setComment ( Session.Cookie . getComment ( ) ) ; } if ( Session.Cookie . getHttpOnly ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setHttpOnly ( Session.Cookie . getHttpOnly ( ) ) ; } if ( Session.Cookie . getSecure ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setSecure ( Session.Cookie . getSecure ( ) ) ; } if ( Session.Cookie . getMaxAge ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.SessionCookieConfig . setMaxAge ( Session.Cookie . getMaxAge ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.Set<javax.servlet.SessionTrackingMode> < javax . javax.servlet . javax.servlet > java.util.Set<javax.servlet.SessionTrackingMode> ( java.util.Set<Session.SessionTrackingMode> < Session . Session > java.util.Set<Session.SessionTrackingMode> ) { if ( java.util.Set<Session.SessionTrackingMode> == null ) { return null ; } java.util.Set<javax.servlet.SessionTrackingMode> < javax . javax.servlet . javax.servlet > java.util.Set<javax.servlet.SessionTrackingMode> = new java.util.LinkedHashSet<javax.servlet.SessionTrackingMode> <> ( ) ; for ( Session . Session Session.SessionTrackingMode : java.util.Set<Session.SessionTrackingMode> ) { java.util.Set<javax.servlet.SessionTrackingMode> . add ( javax . javax.servlet . SessionTrackingMode . valueOf ( Session.SessionTrackingMode . name ( ) ) ) ; } return java.util.Set<javax.servlet.SessionTrackingMode> ; }  <METHOD_END>
<METHOD_START> public static void void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , Environment org.springframework.boot.autoconfigure.web.servlet.Environment , TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) { ServerProperties . ServerProperties ServerProperties.Tomcat = org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) ; if ( ServerProperties.Tomcat . getBasedir ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . setBaseDirectory ( ServerProperties.Tomcat . getBasedir ( ) ) ; } org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . setBackgroundProcessorDelay ( ServerProperties.Tomcat . getBackgroundProcessorDelay ( ) ) ; void ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties , org.springframework.boot.autoconfigure.web.servlet.Environment , org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; if ( ServerProperties.Tomcat . getMaxThreads ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getMaxThreads ( ) ) ; } if ( ServerProperties.Tomcat . getMinSpareThreads ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getMinSpareThreads ( ) ) ; } int int = ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) > NUMBER ? org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) : ServerProperties.Tomcat . getMaxHttpHeaderSize ( ) ) ; if ( int > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , int ) ; } if ( ServerProperties.Tomcat . getMaxHttpPostSize ( ) != NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getMaxHttpPostSize ( ) ) ; } if ( ServerProperties.Tomcat . getAccesslog ( ) . isEnabled ( ) ) { void ( ServerProperties.Tomcat , org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) ; } if ( ServerProperties.Tomcat . getUriEncoding ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . setUriEncoding ( ServerProperties.Tomcat . getUriEncoding ( ) ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) != null ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) ) ; } if ( ServerProperties.Tomcat . getRedirectContextRoot ( ) != null ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getRedirectContextRoot ( ) ) ; } if ( ServerProperties.Tomcat . getMaxConnections ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getMaxConnections ( ) ) ; } if ( ServerProperties.Tomcat . getAcceptCount ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , ServerProperties.Tomcat . getAcceptCount ( ) ) ; } if ( ! ObjectUtils . isEmpty ( ServerProperties.Tomcat . getAdditionalTldSkipPatterns ( ) ) ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . getTldSkipPatterns ( ) . addAll ( ServerProperties.Tomcat . getAdditionalTldSkipPatterns ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setBacklog ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setBacklog ( int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setMaxConnections ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setMaxConnections ( int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setConnectionTimeout ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol < ? > org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<?> = ( AbstractProtocol < ? > ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol<> . setConnectionTimeout ( int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , Environment org.springframework.boot.autoconfigure.web.servlet.Environment , TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) { java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getProtocolHeader ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getRemoteIpHeader ( ) ; if ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) || boolean ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties , org.springframework.boot.autoconfigure.web.servlet.Environment ) ) { RemoteIpValve org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve = new RemoteIpValve ( ) ; org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . setProtocolHeader ( StringUtils . hasLength ( java.lang.String ) ? java.lang.String : STRING ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . setRemoteIpHeader ( java.lang.String ) ; } org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . setInternalProxies ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getInternalProxies ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . setPortHeader ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getPortHeader ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve . setProtocolHeaderHttpsValue ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getTomcat ( ) . getProtocolHeaderHttpsValue ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addEngineValves ( org.springframework.boot.autoconfigure.web.servlet.RemoteIpValve ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol = ( AbstractProtocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol . setMaxThreads ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol = ( AbstractProtocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol . setMaxThreads ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol = ( AbstractProtocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol . setMinSpareThreads ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractProtocol ) { AbstractProtocol org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol = ( AbstractProtocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractProtocol . setMinSpareThreads ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractHttp11Protocol ) { AbstractHttp11Protocol org.springframework.boot.autoconfigure.web.servlet.AbstractHttp11Protocol = ( AbstractHttp11Protocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractHttp11Protocol . setMaxHttpHeaderSize ( int ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { ProtocolHandler org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler = org.springframework.boot.autoconfigure.web.servlet.Connector . getProtocolHandler ( ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler instanceof AbstractHttp11Protocol ) { AbstractHttp11Protocol org.springframework.boot.autoconfigure.web.servlet.AbstractHttp11Protocol = ( AbstractHttp11Protocol ) org.springframework.boot.autoconfigure.web.servlet.ProtocolHandler ; org.springframework.boot.autoconfigure.web.servlet.AbstractHttp11Protocol . setMaxHttpHeaderSize ( int ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addConnectorCustomizers ( new TomcatConnectorCustomizer ( ) { @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { org.springframework.boot.autoconfigure.web.servlet.Connector . setMaxPostSize ( int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Connector org.springframework.boot.autoconfigure.web.servlet.Connector ) { org.springframework.boot.autoconfigure.web.servlet.Connector . setMaxPostSize ( int ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ServerProperties . ServerProperties ServerProperties.Tomcat , TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory ) { AccessLogValve org.springframework.boot.autoconfigure.web.servlet.AccessLogValve = new AccessLogValve ( ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setPattern ( ServerProperties.Tomcat . getAccesslog ( ) . getPattern ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setDirectory ( ServerProperties.Tomcat . getAccesslog ( ) . getDirectory ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setPrefix ( ServerProperties.Tomcat . getAccesslog ( ) . getPrefix ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setSuffix ( ServerProperties.Tomcat . getAccesslog ( ) . getSuffix ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setRenameOnRotate ( ServerProperties.Tomcat . getAccesslog ( ) . isRenameOnRotate ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setFileDateFormat ( ServerProperties.Tomcat . getAccesslog ( ) . getFileDateFormat ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setRequestAttributesEnabled ( ServerProperties.Tomcat . getAccesslog ( ) . isRequestAttributesEnabled ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setRotatable ( ServerProperties.Tomcat . getAccesslog ( ) . isRotate ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.AccessLogValve . setBuffered ( ServerProperties.Tomcat . getAccesslog ( ) . isBuffered ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addEngineValves ( org.springframework.boot.autoconfigure.web.servlet.AccessLogValve ) ; }  <METHOD_END>
<METHOD_START> private static void void ( TomcatServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory , final boolean boolean ) { org.springframework.boot.autoconfigure.web.servlet.TomcatServletWebServerFactory . addContextCustomizers ( new TomcatContextCustomizer ( ) { @ java.lang.Override public void void ( Context org.springframework.boot.autoconfigure.web.servlet.Context ) { org.springframework.boot.autoconfigure.web.servlet.Context . setMapperContextRootRedirectEnabled ( boolean ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Context org.springframework.boot.autoconfigure.web.servlet.Context ) { org.springframework.boot.autoconfigure.web.servlet.Context . setMapperContextRootRedirectEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> protected static void void ( final ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , Environment org.springframework.boot.autoconfigure.web.servlet.Environment , UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory ) { ServerProperties . ServerProperties ServerProperties.Undertow = org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getUndertow ( ) ; ServerProperties . ServerProperties . ServerProperties ServerProperties.Undertow.Accesslog = ServerProperties.Undertow . getAccesslog ( ) ; if ( ServerProperties.Undertow . getBufferSize ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setBufferSize ( ServerProperties.Undertow . getBufferSize ( ) ) ; } if ( ServerProperties.Undertow . getIoThreads ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setIoThreads ( ServerProperties.Undertow . getIoThreads ( ) ) ; } if ( ServerProperties.Undertow . getWorkerThreads ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setWorkerThreads ( ServerProperties.Undertow . getWorkerThreads ( ) ) ; } if ( ServerProperties.Undertow . getDirectBuffers ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setDirectBuffers ( ServerProperties.Undertow . getDirectBuffers ( ) ) ; } if ( ServerProperties.Undertow . getAccesslog ( ) . getEnabled ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogEnabled ( ServerProperties.Undertow.Accesslog . getEnabled ( ) ) ; } org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogDirectory ( ServerProperties.Undertow.Accesslog . getDir ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogPattern ( ServerProperties.Undertow.Accesslog . getPattern ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogPrefix ( ServerProperties.Undertow.Accesslog . getPrefix ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogSuffix ( ServerProperties.Undertow.Accesslog . getSuffix ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setAccessLogRotate ( ServerProperties.Undertow.Accesslog . isRotate ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . setUseForwardHeaders ( boolean ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties , org.springframework.boot.autoconfigure.web.servlet.Environment ) ) ; if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) ) ; } if ( ServerProperties.Undertow . getMaxHttpPostSize ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , ServerProperties.Undertow . getMaxHttpPostSize ( ) ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) != null ) { void ( org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . addBuilderCustomizers ( new UndertowBuilderCustomizer ( ) { @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setSocketOption ( UndertowOptions . NO_REQUEST_TIMEOUT , int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setSocketOption ( UndertowOptions . NO_REQUEST_TIMEOUT , int ) ; }  <METHOD_END>
<METHOD_START> private static void void ( UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . addBuilderCustomizers ( new UndertowBuilderCustomizer ( ) { @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setServerOption ( UndertowOptions . MAX_HEADER_SIZE , int ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setServerOption ( UndertowOptions . MAX_HEADER_SIZE , int ) ; }  <METHOD_END>
<METHOD_START> private static void void ( UndertowServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory , final long long ) { org.springframework.boot.autoconfigure.web.servlet.UndertowServletWebServerFactory . addBuilderCustomizers ( new UndertowBuilderCustomizer ( ) { @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setServerOption ( UndertowOptions . MAX_ENTITY_SIZE , long ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Undertow . Undertow Undertow.Builder ) { Undertow.Builder . setServerOption ( UndertowOptions . MAX_ENTITY_SIZE , long ) ; }  <METHOD_END>
<METHOD_START> public static void void ( final ServerProperties org.springframework.boot.autoconfigure.web.servlet.ServerProperties , Environment org.springframework.boot.autoconfigure.web.servlet.Environment , JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory ) { ServerProperties . ServerProperties ServerProperties.Jetty = org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getJetty ( ) ; org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . setUseForwardHeaders ( boolean ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties , org.springframework.boot.autoconfigure.web.servlet.Environment ) ) ; if ( ServerProperties.Jetty . getAcceptors ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . setAcceptors ( ServerProperties.Jetty . getAcceptors ( ) ) ; } if ( ServerProperties.Jetty . getSelectors ( ) != null ) { org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . setSelectors ( ServerProperties.Jetty . getSelectors ( ) ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getMaxHttpHeaderSize ( ) ) ; } if ( ServerProperties.Jetty . getMaxHttpPostSize ( ) > NUMBER ) { void ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , ServerProperties.Jetty . getMaxHttpPostSize ( ) ) ; } if ( org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) != null ) { void ( org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , org.springframework.boot.autoconfigure.web.servlet.ServerProperties . getConnectionTimeout ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . addServerCustomizers ( new JettyServerCustomizer ( ) { @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { for ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector : org.springframework.boot.autoconfigure.web.servlet.Server . getConnectors ( ) ) { if ( org.eclipse.jetty.server.Connector instanceof AbstractConnector ) { ( ( AbstractConnector ) org.eclipse.jetty.server.Connector ) . setIdleTimeout ( int ) ; } } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { for ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector : org.springframework.boot.autoconfigure.web.servlet.Server . getConnectors ( ) ) { if ( org.eclipse.jetty.server.Connector instanceof AbstractConnector ) { ( ( AbstractConnector ) org.eclipse.jetty.server.Connector ) . setIdleTimeout ( int ) ; } } }  <METHOD_END>
<METHOD_START> private static void void ( JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . addServerCustomizers ( new JettyServerCustomizer ( ) { @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { for ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector : org.springframework.boot.autoconfigure.web.servlet.Server . getConnectors ( ) ) { try { for ( ConnectionFactory org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory : org.eclipse.jetty.server.Connector . getConnectionFactories ( ) ) { if ( org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory instanceof HttpConfiguration . HttpConfiguration ) { void ( ( HttpConfiguration . HttpConfiguration ) org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory ) ; } } } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { void ( org.eclipse.jetty.server.Connector , int ) ; } } } private void void ( HttpConfiguration . HttpConfiguration HttpConfiguration.ConnectionFactory ) { HttpConfiguration org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration = HttpConfiguration.ConnectionFactory . getHttpConfiguration ( ) ; org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration . setRequestHeaderSize ( int ) ; org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration . setResponseHeaderSize ( int ) ; } private void void ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector , int int ) { try { org.eclipse.jetty.server.Connector . getClass ( ) . getMethod ( STRING , int .class ) . invoke ( org.eclipse.jetty.server.Connector , int ) ; org.eclipse.jetty.server.Connector . getClass ( ) . getMethod ( STRING , int .class ) . invoke ( org.eclipse.jetty.server.Connector , int ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { for ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector : org.springframework.boot.autoconfigure.web.servlet.Server . getConnectors ( ) ) { try { for ( ConnectionFactory org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory : org.eclipse.jetty.server.Connector . getConnectionFactories ( ) ) { if ( org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory instanceof HttpConfiguration . HttpConfiguration ) { void ( ( HttpConfiguration . HttpConfiguration ) org.springframework.boot.autoconfigure.web.servlet.ConnectionFactory ) ; } } } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { void ( org.eclipse.jetty.server.Connector , int ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( HttpConfiguration . HttpConfiguration HttpConfiguration.ConnectionFactory ) { HttpConfiguration org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration = HttpConfiguration.ConnectionFactory . getHttpConfiguration ( ) ; org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration . setRequestHeaderSize ( int ) ; org.springframework.boot.autoconfigure.web.servlet.HttpConfiguration . setResponseHeaderSize ( int ) ; }  <METHOD_END>
<METHOD_START> private void void ( org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.jetty.server.Connector , int int ) { try { org.eclipse.jetty.server.Connector . getClass ( ) . getMethod ( STRING , int .class ) . invoke ( org.eclipse.jetty.server.Connector , int ) ; org.eclipse.jetty.server.Connector . getClass ( ) . getMethod ( STRING , int .class ) . invoke ( org.eclipse.jetty.server.Connector , int ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( JettyServletWebServerFactory org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory , final int int ) { org.springframework.boot.autoconfigure.web.servlet.JettyServletWebServerFactory . addServerCustomizers ( new JettyServerCustomizer ( ) { @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { void ( int , org.springframework.boot.autoconfigure.web.servlet.Server . getHandlers ( ) ) ; } private void void ( int int , Handler ... org.springframework.boot.autoconfigure.web.servlet.Handler[] ) { for ( Handler org.springframework.boot.autoconfigure.web.servlet.Handler : org.springframework.boot.autoconfigure.web.servlet.Handler[] ) { if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof ContextHandler ) { ( ( ContextHandler ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . setMaxFormContentSize ( int ) ; } else if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof HandlerWrapper ) { void ( int , ( ( HandlerWrapper ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . getHandler ( ) ) ; } else if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof HandlerCollection ) { void ( int , ( ( HandlerCollection ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . getHandlers ( ) ) ; } } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Server org.springframework.boot.autoconfigure.web.servlet.Server ) { void ( int , org.springframework.boot.autoconfigure.web.servlet.Server . getHandlers ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int , Handler ... org.springframework.boot.autoconfigure.web.servlet.Handler[] ) { for ( Handler org.springframework.boot.autoconfigure.web.servlet.Handler : org.springframework.boot.autoconfigure.web.servlet.Handler[] ) { if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof ContextHandler ) { ( ( ContextHandler ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . setMaxFormContentSize ( int ) ; } else if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof HandlerWrapper ) { void ( int , ( ( HandlerWrapper ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . getHandler ( ) ) ; } else if ( org.springframework.boot.autoconfigure.web.servlet.Handler instanceof HandlerCollection ) { void ( int , ( ( HandlerCollection ) org.springframework.boot.autoconfigure.web.servlet.Handler ) . getHandlers ( ) ) ; } } }  <METHOD_END>
