<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory = new MockClientHttpRequestFactory ( ) ; this . org.springframework.boot.devtools.remote.client.ClassPathChangeUploader = new ClassPathChangeUploader ( STRING , this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new ClassPathChangeUploader ( null , this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new ClassPathChangeUploader ( STRING , this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new ClassPathChangeUploader ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.remote.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.remote.client.ExpectedException . expectMessage ( STRING ) ; new ClassPathChangeUploader ( STRING , this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.remote.client.TemporaryFolder . newFolder ( ) ; ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent = org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ( java.io.File ) ; this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . willRespond ( HttpStatus . OK ) ; this . org.springframework.boot.devtools.remote.client.ClassPathChangeUploader . onApplicationEvent ( org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . getExecutedRequests ( ) ) . hasSize ( NUMBER ) ; MockClientHttpRequest org.springframework.boot.devtools.remote.client.MockClientHttpRequest = this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . getExecutedRequests ( ) . get ( NUMBER ) ; void ( java.io.File , org.springframework.boot.devtools.remote.client.MockClientHttpRequest ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.devtools.remote.client.TemporaryFolder . newFolder ( ) ; ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent = org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ( java.io.File ) ; this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . willRespond ( new java.net.ConnectException ( ) ) ; this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . willRespond ( HttpStatus . OK ) ; this . org.springframework.boot.devtools.remote.client.ClassPathChangeUploader . onApplicationEvent ( org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ) ; assertThat ( this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . getExecutedRequests ( ) ) . hasSize ( NUMBER ) ; void ( java.io.File , this . org.springframework.boot.devtools.remote.client.MockClientHttpRequestFactory . getExecutedRequests ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , MockClientHttpRequest org.springframework.boot.devtools.remote.client.MockClientHttpRequest )			throws java.io.IOException , java.lang.ClassNotFoundException { ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles = org.springframework.boot.devtools.remote.client.ClassLoaderFiles ( org.springframework.boot.devtools.remote.client.MockClientHttpRequest . getBodyAsBytes ( ) ) ; java.util.Collection<org.springframework.boot.devtools.remote.client.SourceFolder> < SourceFolder > java.util.Collection<org.springframework.boot.devtools.remote.client.SourceFolder> = org.springframework.boot.devtools.remote.client.ClassLoaderFiles . getSourceFolders ( ) ; assertThat ( java.util.Collection<org.springframework.boot.devtools.remote.client.SourceFolder> . size ( ) ) . isEqualTo ( NUMBER ) ; SourceFolder org.springframework.boot.devtools.remote.client.SourceFolder = java.util.Collection<org.springframework.boot.devtools.remote.client.SourceFolder> . iterator ( ) . next ( ) ; assertThat ( org.springframework.boot.devtools.remote.client.SourceFolder . getName ( ) ) . isEqualTo ( java.io.File . java.lang.String ( ) ) ; java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> < ClassLoaderFile > java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> = org.springframework.boot.devtools.remote.client.SourceFolder . getFiles ( ) . iterator ( ) ; void ( java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> . next ( ) , STRING , ClassLoaderFile . Kind . ADDED ) ; void ( java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> . next ( ) , STRING , ClassLoaderFile . Kind . MODIFIED ) ; void ( java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> . next ( ) , null , ClassLoaderFile . Kind . DELETED ) ; assertThat ( java.util.Iterator<org.springframework.boot.devtools.remote.client.ClassLoaderFile> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ClassLoaderFile org.springframework.boot.devtools.remote.client.ClassLoaderFile , java.lang.String java.lang.String , Kind org.springframework.boot.devtools.remote.client.Kind ) { assertThat ( org.springframework.boot.devtools.remote.client.ClassLoaderFile . getContents ( ) ) . isEqualTo ( java.lang.String == null ? null : java.lang.String . byte[] ( ) ) ; assertThat ( org.springframework.boot.devtools.remote.client.ClassLoaderFile . getKind ( ) ) . isEqualTo ( org.springframework.boot.devtools.remote.client.Kind ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ( java.io.File java.io.File )			throws java.io.IOException { java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> = new java.util.LinkedHashSet<org.springframework.boot.devtools.remote.client.ChangedFile> <> ( ) ; java.io.File java.io.File = java.io.File ( java.io.File , STRING ) ; java.io.File java.io.File = java.io.File ( java.io.File , STRING ) ; java.io.File java.io.File = java.io.File ( java.io.File , STRING ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . ADD ) ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . MODIFY ) ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> . add ( new ChangedFile ( java.io.File , java.io.File , Type . DELETE ) ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> < ChangedFiles > java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> = new java.util.LinkedHashSet<org.springframework.boot.devtools.remote.client.ChangedFiles> <> ( ) ; java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> . add ( new ChangedFiles ( java.io.File , java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFile> ) ) ; ClassPathChangedEvent org.springframework.boot.devtools.remote.client.ClassPathChangedEvent = new ClassPathChangedEvent ( this , java.util.Set<org.springframework.boot.devtools.remote.client.ChangedFiles> , false ) ; return org.springframework.boot.devtools.remote.client.ClassPathChangedEvent ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( ) , java.io.File ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.devtools.remote.client.ClassLoaderFiles org.springframework.boot.devtools.remote.client.ClassLoaderFiles ( byte [] byte[] )			throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( new java.io.ByteArrayInputStream ( byte[] ) ) ; return ( ClassLoaderFiles ) java.io.ObjectInputStream . java.lang.Object ( ) ; }  <METHOD_END>
