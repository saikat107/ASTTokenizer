<METHOD_START> @ Before public void void ( ) { org.springframework.integration.ws.SimpleWebServiceInboundGateway . setRequestChannel ( org.springframework.integration.ws.MessageChannel ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . setReplyChannel ( org.springframework.integration.ws.MessageChannel ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . start ( ) ; when ( org.springframework.integration.ws.MessageContext . getResponse ( ) ) . thenReturn ( org.springframework.integration.ws.WebServiceMessage ) ; when ( org.springframework.integration.ws.WebServiceMessage . getPayloadResult ( ) ) . thenReturn ( javax.xml.transform.Result ) ; when ( org.springframework.integration.ws.MessageContext . getRequest ( ) ) . thenReturn ( org.springframework.integration.ws.WebServiceMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.integration.ws.MessageChannel . send ( isA ( Message .class ) , eq ( NUMBER ) ) ) . thenAnswer ( org.springframework.integration.ws.Answer<java.lang.Boolean> ( org.springframework.integration.ws.MessageChannel ) ) ; when ( org.springframework.integration.ws.WebServiceMessage . getPayloadSource ( ) ) . thenReturn ( javax.xml.transform.Source ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . start ( ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . invoke ( org.springframework.integration.ws.MessageContext ) ; verify ( org.springframework.integration.ws.MessageChannel ) . send ( org.springframework.integration.ws.Message<?> ( javax.xml.transform.Source ) , eq ( NUMBER ) ) ; assertTrue ( java.io.StringWriter . java.lang.String ( ) . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageDeliveryException .class ) public void void ( ) java.lang.Exception { org.springframework.integration.ws.SimpleWebServiceInboundGateway . setRequestTimeout ( NUMBER ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . setReplyTimeout ( NUMBER ) ; when ( org.springframework.integration.ws.MessageChannel . send ( isA ( Message .class ) , anyLong ( ) ) ) . thenReturn ( false ) ; when ( org.springframework.integration.ws.WebServiceMessage . getPayloadSource ( ) ) . thenReturn ( javax.xml.transform.Source ) ; org.springframework.integration.ws.SimpleWebServiceInboundGateway . invoke ( org.springframework.integration.ws.MessageContext ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ws.Message<?> < ? > org.springframework.integration.ws.Message<?> ( final java.lang.Object java.lang.Object ) { return argThat ( new HamcrestArgumentMatcher <> ( new BaseMatcher < Message < ? > > ( ) { @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) . equals ( java.lang.Object ) ; } @ java.lang.Override public void void ( Description org.springframework.integration.ws.Description ) { org.springframework.integration.ws.Description . appendText ( STRING + java.lang.Object ) ; } } ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( ( Message < ? > ) java.lang.Object ) . getPayload ( ) . equals ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Description org.springframework.integration.ws.Description ) { org.springframework.integration.ws.Description . appendText ( STRING + java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.ws.Answer<java.lang.Boolean> < java.lang.Boolean > org.springframework.integration.ws.Answer<java.lang.Boolean> ( final MessageChannel org.springframework.integration.ws.MessageChannel ) { return invocation -> { replyChannel . send ( ( Message < ? > ) invocation . getArguments ( ) [ NUMBER ] ) ; return true ; } ; }  <METHOD_END>
