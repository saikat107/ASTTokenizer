<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( null , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( null , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( null , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( null , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , java.util.Map<?,?> ( STRING , STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , java.util.Map<?,?> ( STRING , STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , java.util.Map<?,?> ( STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( STRING . byte[] ( ) , java.io.File ) ; DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( java.io.File , null ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { DefaultLaunchScript org.springframework.boot.loader.tools.DefaultLaunchScript = new DefaultLaunchScript ( null , java.util.Map<?,?> ( java.lang.String + STRING ) ) ; java.lang.String java.lang.String = new java.lang.String ( org.springframework.boot.loader.tools.DefaultLaunchScript . toByteArray ( ) ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ( java.lang.String ... java.lang.String[] ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
