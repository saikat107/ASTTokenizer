<METHOD_START> public void ( ShadowMatch org.springframework.aop.aspectj.ShadowMatch ) { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; this . org.springframework.aop.aspectj.Test = ( Test ) java.lang.reflect.Field . java.lang.Object ( org.springframework.aop.aspectj.ShadowMatch ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new java.lang.IllegalStateException ( java.lang.IllegalAccessException ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.aop.aspectj.Test != null && new org.springframework.aop.aspectj.RuntimeTestWalker.SubtypeSensitiveVarTypeTestVisitor ( ) . boolean ( this . org.springframework.aop.aspectj.Test ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . org.springframework.aop.aspectj.Test != null && new org.springframework.aop.aspectj.RuntimeTestWalker.ThisInstanceOfResidueTestVisitor ( java.lang.Class<> ) . boolean ( this . org.springframework.aop.aspectj.Test ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( this . org.springframework.aop.aspectj.Test != null && new org.springframework.aop.aspectj.RuntimeTestWalker.TargetInstanceOfResidueTestVisitor ( java.lang.Class<> ) . boolean ( this . org.springframework.aop.aspectj.Test ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( And org.springframework.aop.aspectj.And ) { org.springframework.aop.aspectj.And . getLeft ( ) . accept ( this ) ; org.springframework.aop.aspectj.And . getRight ( ) . accept ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Or org.springframework.aop.aspectj.Or ) { org.springframework.aop.aspectj.Or . getLeft ( ) . accept ( this ) ; org.springframework.aop.aspectj.Or . getRight ( ) . accept ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Not org.springframework.aop.aspectj.Not ) { org.springframework.aop.aspectj.Not . getBody ( ) . accept ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Instanceof org.springframework.aop.aspectj.Instanceof ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Literal org.springframework.aop.aspectj.Literal ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Call org.springframework.aop.aspectj.Call ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FieldGetCall org.springframework.aop.aspectj.FieldGetCall ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HasAnnotation org.springframework.aop.aspectj.HasAnnotation ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MatchingContextBasedTest org.springframework.aop.aspectj.MatchingContextBasedTest ) {		}  <METHOD_END>
<METHOD_START> protected int int ( ReflectionVar org.springframework.aop.aspectj.ReflectionVar ) { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; return ( java.lang.Integer ) java.lang.reflect.Field . java.lang.Object ( org.springframework.aop.aspectj.ReflectionVar ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new java.lang.IllegalStateException ( java.lang.IllegalAccessException ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean , int int ) { this . java.lang.Class<?> = java.lang.Class<> ; this . boolean = boolean ; this . int = int ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Test org.springframework.aop.aspectj.Test ) { org.springframework.aop.aspectj.Test . accept ( this ) ; return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Instanceof org.springframework.aop.aspectj.Instanceof ) { int int = int ( ( ReflectionVar ) org.springframework.aop.aspectj.Instanceof . getVar ( ) ) ; if ( int != this . int ) { return; } java.lang.Class<?> < ? > java.lang.Class<?> = null ; ResolvedType org.springframework.aop.aspectj.ResolvedType = ( ResolvedType ) org.springframework.aop.aspectj.Instanceof . getType ( ) ; if ( org.springframework.aop.aspectj.ResolvedType instanceof ReferenceType ) { ReferenceTypeDelegate org.springframework.aop.aspectj.ReferenceTypeDelegate = ( ( ReferenceType ) org.springframework.aop.aspectj.ResolvedType ) . getDelegate ( ) ; if ( org.springframework.aop.aspectj.ReferenceTypeDelegate instanceof ReflectionBasedReferenceTypeDelegate ) { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; java.lang.Class<?> = ( java.lang.Class<?> < ? > ) java.lang.reflect.Field . java.lang.Object ( org.springframework.aop.aspectj.ReferenceTypeDelegate ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new java.lang.IllegalStateException ( java.lang.IllegalAccessException ) ; } } } try { if ( java.lang.Class<> == null ) { java.lang.Class<?> = ClassUtils . forName ( org.springframework.aop.aspectj.ResolvedType . getName ( ) , this . java.lang.Class<> . java.lang.ClassLoader ( ) ) ; } this . boolean = java.lang.Class<> . boolean ( this . java.lang.Class<> ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { this . boolean = false ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> , false , int ); }  <METHOD_END>
<METHOD_START> public boolean boolean ( Test org.springframework.aop.aspectj.Test ) { return boolean ( org.springframework.aop.aspectj.Test ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> , true , int ); }  <METHOD_END>
<METHOD_START> public boolean boolean ( Test org.springframework.aop.aspectj.Test ) { return boolean ( org.springframework.aop.aspectj.Test ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( Test org.springframework.aop.aspectj.Test ) { org.springframework.aop.aspectj.Test . accept ( this ) ; return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Instanceof org.springframework.aop.aspectj.Instanceof ) { ReflectionVar org.springframework.aop.aspectj.ReflectionVar = ( ReflectionVar ) org.springframework.aop.aspectj.Instanceof . getVar ( ) ; java.lang.Object java.lang.Object = org.springframework.aop.aspectj.ReflectionVar . getBindingAtJoinPoint ( this . java.lang.Object , this . java.lang.Object , this . java.lang.Object[] ) ; if ( java.lang.Object == this . java.lang.Object || java.lang.Object == this . java.lang.Object ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HasAnnotation org.springframework.aop.aspectj.HasAnnotation ) { ReflectionVar org.springframework.aop.aspectj.ReflectionVar = ( ReflectionVar ) org.springframework.aop.aspectj.HasAnnotation . getVar ( ) ; int int = int ( org.springframework.aop.aspectj.ReflectionVar ) ; if ( int == int || int == int || int == int ) { this . boolean = true ; } }  <METHOD_END>
