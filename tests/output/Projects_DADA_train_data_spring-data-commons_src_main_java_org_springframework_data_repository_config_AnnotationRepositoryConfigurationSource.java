<METHOD_START> public void ( AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> , ResourceLoader org.springframework.data.repository.config.ResourceLoader , Environment org.springframework.data.repository.config.Environment ) { super( org.springframework.data.repository.config.Environment ); Assert . notNull ( org.springframework.data.repository.config.AnnotationMetadata , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.repository.config.ResourceLoader , STRING ) ; this . org.springframework.data.repository.config.AnnotationAttributes = new AnnotationAttributes ( org.springframework.data.repository.config.AnnotationMetadata . getAnnotationAttributes ( java.lang.Class<> . java.lang.String ( ) ) ) ; this . org.springframework.data.repository.config.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> ) ; this . org.springframework.data.repository.config.AnnotationMetadata = org.springframework.data.repository.config.AnnotationMetadata ; this . org.springframework.data.repository.config.ResourceLoader = org.springframework.data.repository.config.ResourceLoader ; this . boolean = boolean ( org.springframework.data.repository.config.AnnotationAttributes ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( AnnotationAttributes org.springframework.data.repository.config.AnnotationAttributes ) { for ( java.lang.String java.lang.String : java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) { if ( org.springframework.data.repository.config.AnnotationAttributes . getAnnotationArray ( java.lang.String ) . length > NUMBER ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { java.lang.String [] java.lang.String[] = org.springframework.data.repository.config.AnnotationAttributes . getStringArray ( STRING ) ; java.lang.String [] java.lang.String[] = org.springframework.data.repository.config.AnnotationAttributes . getStringArray ( java.lang.String ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.data.repository.config.AnnotationAttributes . getClassArray ( java.lang.String ) ; if ( java.lang.String[] . int == NUMBER && java.lang.String[] . int == NUMBER && java.lang.Class<?>[] . int == NUMBER ) { java.lang.String java.lang.String = org.springframework.data.repository.config.AnnotationMetadata . getClassName ( ) ; return java.util.Collections . java.util.Set ( ClassUtils . getPackageName ( java.lang.String ) ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { java.util.Set<java.lang.String> . boolean ( ClassUtils . getPackageName ( java.lang.Class<> ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.data.repository.config.AnnotationAttributes . get ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional<java.lang.String> ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return org.springframework.data.repository.config.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) { return java.util.Set<org.springframework.data.repository.config.TypeFilter> ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.lang.Iterable<org.springframework.data.repository.config.TypeFilter> ( ) { return java.util.Set<org.springframework.data.repository.config.TypeFilter> ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.Set<org.springframework.data.repository.config.TypeFilter> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.Set<org.springframework.data.repository.config.TypeFilter> = new java.util.HashSet<org.springframework.data.repository.config.TypeFilter> <> ( ) ; AnnotationAttributes [] org.springframework.data.repository.config.AnnotationAttributes[] = org.springframework.data.repository.config.AnnotationAttributes . getAnnotationArray ( java.lang.String ) ; for ( AnnotationAttributes org.springframework.data.repository.config.AnnotationAttributes : org.springframework.data.repository.config.AnnotationAttributes[] ) { java.util.Set<org.springframework.data.repository.config.TypeFilter> . addAll ( java.util.List<org.springframework.data.repository.config.TypeFilter> ( org.springframework.data.repository.config.AnnotationAttributes ) ) ; } return java.util.Set<org.springframework.data.repository.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.data.repository.config.AnnotationAttributes . getString ( java.lang.String ) ; return StringUtils . hasText ( java.lang.String ) ? java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) : java.util.Optional . java.util.Optional<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.data.repository.config.AnnotationAttributes . getClass ( java.lang.String ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( ) { if ( ! org.springframework.data.repository.config.AnnotationAttributes . containsKey ( java.lang.String ) ) { return java.util.Optional . java.util.Optional<java.lang.String> ( ) ; } java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = org.springframework.data.repository.config.AnnotationAttributes . getClass ( java.lang.String ) ; return DefaultRepositoryBaseClass .class . boolean ( java.lang.Class<> ) ? java.util.Optional . java.util.Optional<java.lang.String> ( ) : java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.config.AnnotationAttributes org.springframework.data.repository.config.AnnotationAttributes ( ) { return org.springframework.data.repository.config.AnnotationAttributes ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.repository.config.AnnotationMetadata org.springframework.data.repository.config.AnnotationMetadata ( ) { return org.springframework.data.repository.config.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.repository.config.TypeFilter> ( AnnotationAttributes org.springframework.data.repository.config.AnnotationAttributes ) { java.util.List<org.springframework.data.repository.config.TypeFilter> < TypeFilter > java.util.List<org.springframework.data.repository.config.TypeFilter> = new java.util.ArrayList<org.springframework.data.repository.config.TypeFilter> <> ( ) ; FilterType org.springframework.data.repository.config.FilterType = org.springframework.data.repository.config.AnnotationAttributes . getEnum ( STRING ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : org.springframework.data.repository.config.AnnotationAttributes . getClassArray ( STRING ) ) { switch ( org.springframework.data.repository.config.FilterType ) { case ANNOTATION : Assert . isAssignable ( java.lang.annotation.Annotation .class , java.lang.Class<> , STRING + STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.lang.Class<java.lang.annotation.Annotation> = ( java.lang.Class<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > ) java.lang.Class<> ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new AnnotationTypeFilter ( java.lang.Class<java.lang.annotation.Annotation> ) ) ; break; case ASSIGNABLE_TYPE : java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new AssignableTypeFilter ( java.lang.Class<> ) ) ; break; case CUSTOM : Assert . isAssignable ( TypeFilter .class , java.lang.Class<> , STRING + STRING ) ; java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( BeanUtils . instantiateClass ( java.lang.Class<> , TypeFilter .class ) ) ; break; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.repository.config.FilterType ) ; } } for ( java.lang.String java.lang.String : java.lang.String[] ( org.springframework.data.repository.config.AnnotationAttributes ) ) { java.lang.String java.lang.String = org.springframework.data.repository.config.FilterType . toString ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new RegexPatternTypeFilter ( java.util.regex.Pattern . java.util.regex.Pattern ( java.lang.String ) ) ) ; } else if ( STRING . boolean ( java.lang.String ) ) { java.util.List<org.springframework.data.repository.config.TypeFilter> . add ( new AspectJTypeFilter ( java.lang.String , this . org.springframework.data.repository.config.ResourceLoader . getClassLoader ( ) ) ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.repository.config.FilterType ) ; } } return java.util.List<org.springframework.data.repository.config.TypeFilter> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.repository.config.AnnotationAttributes . containsKey ( java.lang.String ) && org.springframework.data.repository.config.AnnotationAttributes . getBoolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.data.repository.config.AnnotationAttributes . getString ( java.lang.String ) ; return StringUtils . hasText ( java.lang.String ) ? java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) : java.util.Optional . java.util.Optional<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( AnnotationAttributes org.springframework.data.repository.config.AnnotationAttributes ) { try { return org.springframework.data.repository.config.AnnotationAttributes . getStringArray ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { return new java.lang.String [ NUMBER ] ; } }  <METHOD_END>
