<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) , org.springframework.integration.core.ClassPathXmlApplicationContext ) ; IdGenerator org.springframework.integration.core.IdGenerator = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , IdGenerator .class ) ; MessageChannel org.springframework.integration.core.MessageChannel = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.core.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; verify ( org.springframework.integration.core.IdGenerator , atLeastOnce ( ) ) . generateId ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; GenericXmlApplicationContext org.springframework.integration.core.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . load ( STRING ) ; org.springframework.integration.core.GenericXmlApplicationContext . setParent ( org.springframework.integration.core.ClassPathXmlApplicationContext ) ; org.springframework.integration.core.GenericXmlApplicationContext . refresh ( ) ; IdGenerator org.springframework.integration.core.IdGenerator = org.springframework.integration.core.GenericXmlApplicationContext . getBean ( STRING , IdGenerator .class ) ; MessageChannel org.springframework.integration.core.MessageChannel = org.springframework.integration.core.GenericXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.core.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; verify ( org.springframework.integration.core.IdGenerator , atLeastOnce ( ) ) . generateId ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . close ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) , org.springframework.integration.core.ClassPathXmlApplicationContext ) ; IdGenerator org.springframework.integration.core.IdGenerator = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , IdGenerator .class ) ; MessageChannel org.springframework.integration.core.MessageChannel = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.core.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; verify ( org.springframework.integration.core.IdGenerator , atLeastOnce ( ) ) . generateId ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) , org.springframework.integration.core.ClassPathXmlApplicationContext ) ; IdGenerator org.springframework.integration.core.IdGenerator = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , IdGenerator .class ) ; Mockito . reset ( org.springframework.integration.core.IdGenerator ) ; MessageChannel org.springframework.integration.core.MessageChannel = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.core.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; verify ( org.springframework.integration.core.IdGenerator , atLeastOnce ( ) ) . generateId ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) , org.springframework.integration.core.ClassPathXmlApplicationContext ) ; IdGenerator org.springframework.integration.core.IdGenerator = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , IdGenerator .class ) ; Mockito . reset ( org.springframework.integration.core.IdGenerator ) ; MessageChannel org.springframework.integration.core.MessageChannel = org.springframework.integration.core.ClassPathXmlApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.core.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER ) ) ; verify ( org.springframework.integration.core.IdGenerator , atLeastOnce ( ) ) . generateId ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathXmlApplicationContext org.springframework.integration.core.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.core.MessageIdGenerationTests> ( ) ) ; GenericXmlApplicationContext org.springframework.integration.core.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . load ( STRING ) ; org.springframework.integration.core.GenericXmlApplicationContext . setParent ( org.springframework.integration.core.ClassPathXmlApplicationContext ) ; org.springframework.integration.core.GenericXmlApplicationContext . refresh ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . close ( ) ; GenericXmlApplicationContext org.springframework.integration.core.GenericXmlApplicationContext = new GenericXmlApplicationContext ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . load ( STRING ) ; org.springframework.integration.core.GenericXmlApplicationContext . setParent ( org.springframework.integration.core.ClassPathXmlApplicationContext ) ; org.springframework.integration.core.GenericXmlApplicationContext . refresh ( ) ; org.springframework.integration.core.ClassPathXmlApplicationContext . close ( ) ; org.springframework.integration.core.GenericXmlApplicationContext . close ( ) ; this . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { int int = NUMBER ; StopWatch org.springframework.integration.core.StopWatch = new StopWatch ( ) ; org.springframework.integration.core.StopWatch . start ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { new GenericMessage < java.lang.Integer > ( NUMBER ) ; } org.springframework.integration.core.StopWatch . stop ( ) ; double double = org.springframework.integration.core.StopWatch . getTotalTimeSeconds ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( MessageHeaders .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , null , ( IdGenerator ) ( ) TimeBasedUUIDGenerator . generateId ( ) ) ; org.springframework.integration.core.StopWatch = new StopWatch ( ) ; org.springframework.integration.core.StopWatch . start ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { new GenericMessage < java.lang.Integer > ( NUMBER ) ; } org.springframework.integration.core.StopWatch . stop ( ) ; double double = org.springframework.integration.core.StopWatch . getTotalTimeSeconds ( ) ; org.springframework.integration.core.Log . info ( STRING + int + STRING + STRING + double + STRING ) ; org.springframework.integration.core.Log . info ( STRING + int + STRING + STRING + double + STRING ) ; org.springframework.integration.core.Log . info ( STRING + double / double + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( MessageHeaders .class , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; assertNull ( STRING , java.lang.reflect.Field . java.lang.Object ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.UUID java.util.UUID ( ) { return java.util.UUID . java.util.UUID ( ( ( java.lang.System . long ( ) - java.lang.System . long ( ) ) + STRING ) . byte[] ( ) ) ; }  <METHOD_END>
