<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.simp.SimpSessionScope = new SimpSessionScope ( ) ; this . org.springframework.messaging.simp.ObjectFactory = Mockito . mock ( ObjectFactory .class ) ; this . org.springframework.messaging.simp.SimpAttributes = new SimpAttributes ( STRING , new java.util.concurrent.ConcurrentHashMap <> ( ) ) ; SimpAttributesContextHolder . setAttributes ( this . org.springframework.messaging.simp.SimpAttributes ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { SimpAttributesContextHolder . resetAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.SimpAttributes . setAttribute ( STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.simp.SimpSessionScope . get ( STRING , this . org.springframework.messaging.simp.ObjectFactory ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { given ( this . org.springframework.messaging.simp.ObjectFactory . getObject ( ) ) . willReturn ( STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.simp.SimpSessionScope . get ( STRING , this . org.springframework.messaging.simp.ObjectFactory ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; assertThat ( this . org.springframework.messaging.simp.SimpAttributes . getAttribute ( STRING ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.simp.SimpAttributes . setAttribute ( STRING , STRING ) ; java.lang.Object java.lang.Object = this . org.springframework.messaging.simp.SimpSessionScope . remove ( STRING ) ; assertThat ( java.lang.Object , is ( STRING ) ) ; assertThat ( this . org.springframework.messaging.simp.SimpAttributes . getAttribute ( STRING ) , nullValue ( ) ) ; java.lang.Object = this . org.springframework.messaging.simp.SimpSessionScope . remove ( STRING ) ; assertThat ( java.lang.Object , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Runnable java.lang.Runnable = Mockito . mock ( java.lang.Runnable .class ) ; this . org.springframework.messaging.simp.SimpSessionScope . registerDestructionCallback ( STRING , java.lang.Runnable ) ; this . org.springframework.messaging.simp.SimpAttributes . sessionCompleted ( ) ; verify ( java.lang.Runnable , times ( NUMBER ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( this . org.springframework.messaging.simp.SimpSessionScope . getConversationId ( ) , is ( STRING ) ) ; }  <METHOD_END>
