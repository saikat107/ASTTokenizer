<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> protected java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.lang.Exception { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = java.io.ByteArrayOutputStream ( org.springframework.remoting.httpinvoker.RemoteInvocation ) ; if ( org.springframework.remoting.httpinvoker.Log . isDebugEnabled ( ) ) { org.springframework.remoting.httpinvoker.Log . debug ( STRING + org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration . getServiceUrl ( ) + STRING + java.io.ByteArrayOutputStream . int ( ) ) ; } return org.springframework.remoting.httpinvoker.RemoteInvocationResult ( org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream ) ; }  <METHOD_END>
<METHOD_START> protected java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation ) throws java.io.IOException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( int ) ; void ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.ByteArrayOutputStream ) ; return java.io.ByteArrayOutputStream ; }  <METHOD_END>
<METHOD_START> protected void void ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.ObjectOutputStream java.io.ObjectOutputStream = new java.io.ObjectOutputStream ( java.io.OutputStream ( java.io.OutputStream ) ) ; try { void ( org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.ObjectOutputStream ) ; } finally { java.io.ObjectOutputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.OutputStream java.io.OutputStream ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { return java.io.OutputStream ; }  <METHOD_END>
<METHOD_START> protected void void ( RemoteInvocation org.springframework.remoting.httpinvoker.RemoteInvocation , java.io.ObjectOutputStream java.io.ObjectOutputStream ) throws java.io.IOException { java.io.ObjectOutputStream . void ( org.springframework.remoting.httpinvoker.RemoteInvocation ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( HttpInvokerClientConfiguration org.springframework.remoting.httpinvoker.HttpInvokerClientConfiguration , java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream )			throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String )			throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream java.io.ObjectInputStream = java.io.ObjectInputStream ( java.io.InputStream ( java.io.InputStream ) , java.lang.String ) ; try { return org.springframework.remoting.httpinvoker.RemoteInvocationResult ( java.io.ObjectInputStream ) ; } finally { java.io.ObjectInputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> protected java.io.InputStream java.io.InputStream ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { return java.io.InputStream ; }  <METHOD_END>
<METHOD_START> protected java.io.ObjectInputStream java.io.ObjectInputStream ( java.io.InputStream java.io.InputStream , java.lang.String java.lang.String ) throws java.io.IOException { return new CodebaseAwareObjectInputStream ( java.io.InputStream , java.lang.ClassLoader ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.httpinvoker.RemoteInvocationResult org.springframework.remoting.httpinvoker.RemoteInvocationResult ( java.io.ObjectInputStream java.io.ObjectInputStream )			throws java.io.IOException , java.lang.ClassNotFoundException { java.lang.Object java.lang.Object = java.io.ObjectInputStream . java.lang.Object ( ) ; if ( ! ( java.lang.Object instanceof RemoteInvocationResult ) ) { throw new java.rmi.RemoteException ( STRING + RemoteInvocationResult .class . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( RemoteInvocationResult ) java.lang.Object ; }  <METHOD_END>
