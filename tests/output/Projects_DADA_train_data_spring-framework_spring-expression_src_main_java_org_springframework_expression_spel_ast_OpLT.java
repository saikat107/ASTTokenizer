<METHOD_START> public void ( int int , SpelNodeImpl ... org.springframework.expression.spel.ast.SpelNodeImpl[] ) { super( STRING , int , org.springframework.expression.spel.ast.SpelNodeImpl[] ); this . exitTypeDescriptor = STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.BooleanTypedValue org.springframework.expression.spel.ast.BooleanTypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { java.lang.Object java.lang.Object = getLeftOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; java.lang.Object java.lang.Object = getRightOperand ( ) . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; this . leftActualDescriptor = CodeFlow . toDescriptorFromObject ( java.lang.Object ) ; this . rightActualDescriptor = CodeFlow . toDescriptorFromObject ( java.lang.Object ) ; if ( java.lang.Object instanceof java.lang.Number && java.lang.Object instanceof java.lang.Number ) { java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; java.lang.Number java.lang.Number = ( java.lang.Number ) java.lang.Object ; if ( java.lang.Number instanceof java.math.BigDecimal || java.lang.Number instanceof java.math.BigDecimal ) { java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; java.math.BigDecimal java.math.BigDecimal = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigDecimal .class ) ; return BooleanTypedValue . forValue ( java.math.BigDecimal . int ( java.math.BigDecimal ) < NUMBER ) ; } else if ( java.lang.Number instanceof java.lang.Double || java.lang.Number instanceof java.lang.Double ) { return BooleanTypedValue . forValue ( java.lang.Number . double ( ) < java.lang.Number . double ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Float || java.lang.Number instanceof java.lang.Float ) { return BooleanTypedValue . forValue ( java.lang.Number . float ( ) < java.lang.Number . float ( ) ) ; } else if ( java.lang.Number instanceof java.math.BigInteger || java.lang.Number instanceof java.math.BigInteger ) { java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; java.math.BigInteger java.math.BigInteger = NumberUtils . convertNumberToTargetClass ( java.lang.Number , java.math.BigInteger .class ) ; return BooleanTypedValue . forValue ( java.math.BigInteger . int ( java.math.BigInteger ) < NUMBER ) ; } else if ( java.lang.Number instanceof java.lang.Long || java.lang.Number instanceof java.lang.Long ) { return BooleanTypedValue . forValue ( java.lang.Number . long ( ) < java.lang.Number . long ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Integer || java.lang.Number instanceof java.lang.Integer ) { return BooleanTypedValue . forValue ( java.lang.Number . int ( ) < java.lang.Number . int ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Short || java.lang.Number instanceof java.lang.Short ) { return BooleanTypedValue . forValue ( java.lang.Number . short ( ) < java.lang.Number . short ( ) ) ; } else if ( java.lang.Number instanceof java.lang.Byte || java.lang.Number instanceof java.lang.Byte ) { return BooleanTypedValue . forValue ( java.lang.Number . byte ( ) < java.lang.Number . byte ( ) ) ; } else { return BooleanTypedValue . forValue ( java.lang.Number . double ( ) < java.lang.Number . double ( ) ) ; } } if ( java.lang.Object instanceof java.lang.CharSequence && java.lang.Object instanceof java.lang.CharSequence ) { java.lang.Object = java.lang.Object . java.lang.String ( ) ; java.lang.Object = java.lang.Object . java.lang.String ( ) ; } return BooleanTypedValue . forValue ( org.springframework.expression.spel.ast.ExpressionState . getTypeComparator ( ) . compare ( java.lang.Object , java.lang.Object ) < NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return isCompilableOperatorUsingNumerics ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodVisitor org.springframework.expression.spel.ast.MethodVisitor , CodeFlow org.springframework.expression.spel.ast.CodeFlow ) { generateComparisonCode ( org.springframework.expression.spel.ast.MethodVisitor , org.springframework.expression.spel.ast.CodeFlow , IFGE , IF_ICMPGE ) ; }  <METHOD_END>
