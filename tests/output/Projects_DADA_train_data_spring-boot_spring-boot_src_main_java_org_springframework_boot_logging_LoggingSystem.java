<METHOD_START> public abstract void void ( )  <METHOD_END>
<METHOD_START> public void void ( LoggingInitializationContext org.springframework.boot.logging.LoggingInitializationContext , java.lang.String java.lang.String , LogFile org.springframework.boot.logging.LogFile ) {	}  <METHOD_END>
<METHOD_START> public void void ( ) {	}  <METHOD_END>
<METHOD_START> public java.lang.Runnable java.lang.Runnable ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.boot.logging.LogLevel> < LogLevel > java.util.Set<org.springframework.boot.logging.LogLevel> ( ) { return java.util.EnumSet . java.util.EnumSet<E> ( LogLevel .class ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.logging.LogLevel ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.logging.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.LoggerConfiguration> ( ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.logging.LoggerConfiguration org.springframework.boot.logging.LoggerConfiguration ( java.lang.String java.lang.String ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.logging.LoggingSystem org.springframework.boot.logging.LoggingSystem ( java.lang.ClassLoader java.lang.ClassLoader ) { java.lang.String java.lang.String = java.lang.System . java.lang.String ( java.lang.String ) ; if ( StringUtils . hasLength ( java.lang.String ) ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return new org.springframework.boot.logging.LoggingSystem.NoOpLoggingSystem ( ) ; } return org.springframework.boot.logging.LoggingSystem ( java.lang.ClassLoader , java.lang.String ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { if ( ClassUtils . isPresent ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.ClassLoader ) ) { return org.springframework.boot.logging.LoggingSystem ( java.lang.ClassLoader , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.boot.logging.LoggingSystem org.springframework.boot.logging.LoggingSystem ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; return ( org.springframework.boot.logging.LoggingSystem ) java.lang.Class<> . java.lang.reflect.Constructor<> ( java.lang.ClassLoader .class ) . newInstance ( java.lang.ClassLoader ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , LogLevel org.springframework.boot.logging.LogLevel ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.logging.LoggerConfiguration> < LoggerConfiguration > java.util.List<org.springframework.boot.logging.LoggerConfiguration> ( ) { return java.util.Collections . java.util.List<org.springframework.boot.logging.LoggerConfiguration> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.logging.LoggerConfiguration org.springframework.boot.logging.LoggerConfiguration ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
