<METHOD_START> public void ( ReactiveMongoQueryMethod org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , ReactiveMongoOperations org.springframework.data.mongodb.repository.query.ReactiveMongoOperations ) { super( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod , org.springframework.data.mongodb.repository.query.ReactiveMongoOperations ); this . org.springframework.data.mongodb.repository.query.ResultProcessor = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getResultProcessor ( ) ; this . org.springframework.data.mongodb.repository.query.PartTree = new PartTree ( org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . getName ( ) , org.springframework.data.mongodb.repository.query.ResultProcessor . getReturnedType ( ) . getDomainType ( ) ) ; this . boolean = org.springframework.data.mongodb.repository.query.ReactiveMongoQueryMethod . isGeoNearQuery ( ) ; this . org.springframework.data.mongodb.repository.query.MappingContext<?,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> = org.springframework.data.mongodb.repository.query.ReactiveMongoOperations . getConverter ( ) . getMappingContext ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.PartTree org.springframework.data.mongodb.repository.query.PartTree ( ) { return org.springframework.data.mongodb.repository.query.PartTree ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) { MongoQueryCreator org.springframework.data.mongodb.repository.query.MongoQueryCreator = new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , boolean ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.MongoQueryCreator . createQuery ( ) ; if ( org.springframework.data.mongodb.repository.query.PartTree . isLimiting ( ) ) { org.springframework.data.mongodb.repository.query.Query . limit ( org.springframework.data.mongodb.repository.query.PartTree . getMaxResults ( ) ) ; } TextCriteria org.springframework.data.mongodb.repository.query.TextCriteria = org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor . getFullText ( ) ; if ( org.springframework.data.mongodb.repository.query.TextCriteria != null ) { org.springframework.data.mongodb.repository.query.Query . addCriteria ( org.springframework.data.mongodb.repository.query.TextCriteria ) ; } java.lang.String java.lang.String = getQueryMethod ( ) . getFieldSpecification ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { ReturnedType org.springframework.data.mongodb.repository.query.ReturnedType = org.springframework.data.mongodb.repository.query.ResultProcessor . withDynamicProjection ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) . getReturnedType ( ) ; if ( org.springframework.data.mongodb.repository.query.ReturnedType . isProjecting ( ) ) { org.springframework.data.mongodb.repository.query.ReturnedType . getInputProperties ( ) . forEach ( org.springframework.data.mongodb.repository.query.Query . fields ( ) :: include ) ; } return org.springframework.data.mongodb.repository.query.Query ; } try { BasicQuery org.springframework.data.mongodb.repository.query.BasicQuery = new BasicQuery ( org.springframework.data.mongodb.repository.query.Query . getQueryObject ( ) , Document . parse ( java.lang.String ) ) ; org.springframework.data.mongodb.repository.query.BasicQuery . setSortObject ( org.springframework.data.mongodb.repository.query.Query . getSortObject ( ) ) ; return org.springframework.data.mongodb.repository.query.BasicQuery ; } catch ( JSONParseException org.springframework.data.mongodb.repository.query.JSONParseException ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , getQueryMethod ( ) ) , org.springframework.data.mongodb.repository.query.JSONParseException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) { return new MongoQueryCreator ( org.springframework.data.mongodb.repository.query.PartTree , org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor , org.springframework.data.mongodb.repository.query.MappingContext<,org.springframework.data.mongodb.repository.query.MongoPersistentProperty> , false ) . createQuery ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return org.springframework.data.mongodb.repository.query.PartTree . isCountProjection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return org.springframework.data.mongodb.repository.query.PartTree . isDelete ( ) ; }  <METHOD_END>
