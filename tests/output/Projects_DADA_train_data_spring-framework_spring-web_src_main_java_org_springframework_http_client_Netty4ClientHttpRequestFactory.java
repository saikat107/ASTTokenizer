<METHOD_START> public void ( ) { int int = java.lang.Runtime . java.lang.Runtime ( ) . int ( ) * NUMBER ; this . org.springframework.http.client.EventLoopGroup = new NioEventLoopGroup ( int ) ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( EventLoopGroup org.springframework.http.client.EventLoopGroup ) { Assert . notNull ( org.springframework.http.client.EventLoopGroup , STRING ) ; this . org.springframework.http.client.EventLoopGroup = org.springframework.http.client.EventLoopGroup ; this . boolean = false ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( SslContext org.springframework.http.client.SslContext ) { this . org.springframework.http.client.SslContext = org.springframework.http.client.SslContext ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.http.client.SslContext == null ) { this . org.springframework.http.client.SslContext = org.springframework.http.client.SslContext ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.SslContext org.springframework.http.client.SslContext ( ) { try { return SslContextBuilder . forClient ( ) . build ( ) ; } catch ( javax.net.ssl.SSLException javax.net.ssl.SSLException ) { throw new java.lang.IllegalStateException ( STRING , javax.net.ssl.SSLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpRequest org.springframework.http.client.ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { return org.springframework.http.client.Netty4ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.AsyncClientHttpRequest org.springframework.http.client.AsyncClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) throws java.io.IOException { return org.springframework.http.client.Netty4ClientHttpRequest ( java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.Netty4ClientHttpRequest org.springframework.http.client.Netty4ClientHttpRequest ( java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { return new Netty4ClientHttpRequest ( org.springframework.http.client.Bootstrap ( java.net.URI ) , java.net.URI , org.springframework.http.client.HttpMethod ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.Bootstrap org.springframework.http.client.Bootstrap ( java.net.URI java.net.URI ) { boolean boolean = ( java.net.URI . int ( ) == NUMBER || STRING . boolean ( java.net.URI . java.lang.String ( ) ) ) ; if ( boolean ) { return org.springframework.http.client.Bootstrap ( java.net.URI , true ) ; } else { if ( this . org.springframework.http.client.Bootstrap == null ) { this . org.springframework.http.client.Bootstrap = org.springframework.http.client.Bootstrap ( java.net.URI , false ) ; } return this . org.springframework.http.client.Bootstrap ; } }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.Bootstrap org.springframework.http.client.Bootstrap ( java.net.URI java.net.URI , boolean boolean ) { Bootstrap org.springframework.http.client.Bootstrap = new Bootstrap ( ) ; org.springframework.http.client.Bootstrap . group ( this . org.springframework.http.client.EventLoopGroup ) . channel ( NioSocketChannel .class ) . handler ( new ChannelInitializer < SocketChannel > ( ) { @ java.lang.Override protected void void ( SocketChannel org.springframework.http.client.SocketChannel ) throws java.lang.Exception { void ( org.springframework.http.client.SocketChannel . config ( ) ) ; ChannelPipeline org.springframework.http.client.ChannelPipeline = org.springframework.http.client.SocketChannel . pipeline ( ) ; if ( boolean ) { Assert . notNull ( org.springframework.http.client.SslContext , STRING ) ; org.springframework.http.client.ChannelPipeline . addLast ( org.springframework.http.client.SslContext . newHandler ( org.springframework.http.client.SocketChannel . alloc ( ) , java.net.URI . java.lang.String ( ) , java.net.URI . int ( ) ) ) ; } org.springframework.http.client.ChannelPipeline . addLast ( new HttpClientCodec ( ) ) ; org.springframework.http.client.ChannelPipeline . addLast ( new HttpObjectAggregator ( int ) ) ; if ( int > NUMBER ) { org.springframework.http.client.ChannelPipeline . addLast ( new ReadTimeoutHandler ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } } } ) ; return org.springframework.http.client.Bootstrap ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( SocketChannel org.springframework.http.client.SocketChannel ) throws java.lang.Exception { void ( org.springframework.http.client.SocketChannel . config ( ) ) ; ChannelPipeline org.springframework.http.client.ChannelPipeline = org.springframework.http.client.SocketChannel . pipeline ( ) ; if ( boolean ) { Assert . notNull ( org.springframework.http.client.SslContext , STRING ) ; org.springframework.http.client.ChannelPipeline . addLast ( org.springframework.http.client.SslContext . newHandler ( org.springframework.http.client.SocketChannel . alloc ( ) , java.net.URI . java.lang.String ( ) , java.net.URI . int ( ) ) ) ; } org.springframework.http.client.ChannelPipeline . addLast ( new HttpClientCodec ( ) ) ; org.springframework.http.client.ChannelPipeline . addLast ( new HttpObjectAggregator ( int ) ) ; if ( int > NUMBER ) { org.springframework.http.client.ChannelPipeline . addLast ( new ReadTimeoutHandler ( int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( SocketChannelConfig org.springframework.http.client.SocketChannelConfig ) { if ( this . int >= NUMBER ) { org.springframework.http.client.SocketChannelConfig . setConnectTimeoutMillis ( this . int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.InterruptedException { if ( this . boolean ) { this . org.springframework.http.client.EventLoopGroup . shutdownGracefully ( ) . sync ( ) ; } }  <METHOD_END>
