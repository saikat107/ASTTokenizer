<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandlerMethodMapping ( ) ; this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler ( ) ; this . java.lang.reflect.Method = org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . java.lang.Class<? extends org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler> ( ) . java.lang.reflect.Method ( STRING ) ; this . java.lang.reflect.Method = org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . java.lang.Class<? extends org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler> ( ) . java.lang.reflect.Method ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , java.lang.String ) ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.servlet.handler.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , STRING ) ) ; assertEquals ( java.lang.reflect.Method , org.springframework.web.servlet.handler.HandlerMethod . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( STRING , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.web.servlet.handler.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler .class ) ; AbstractHandlerMethodMapping < java.lang.String > org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandlerMethodMapping ( ) ; org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . setApplicationContext ( new StaticApplicationContext ( org.springframework.web.servlet.handler.StaticApplicationContext ) ) ; org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . afterPropertiesSet ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerMethods ( ) . size ( ) ) ; AbstractHandlerMethodMapping < java.lang.String > org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandlerMethodMapping ( ) ; org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . setDetectHandlerMethodsInAncestorContexts ( true ) ; org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . setApplicationContext ( new StaticApplicationContext ( org.springframework.web.servlet.handler.StaticApplicationContext ) ) ; org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . afterPropertiesSet ( ) ; assertEquals ( NUMBER , org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerMethods ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; java.util.List java.util.List = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ; assertNotNull ( java.util.List ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertEquals ( java.lang.String , java.util.List . java.lang.Object ( NUMBER ) ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = new HandlerMethod ( this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = new HandlerMethod ( this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; java.lang.String java.lang.String = this . java.lang.reflect.Method . java.lang.String ( ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMethod> < HandlerMethod > java.util.List<org.springframework.web.servlet.handler.HandlerMethod> = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getHandlerMethodsByMappingName ( java.lang.String ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.handler.HandlerMethod> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . size ( ) ) ; assertEquals ( org.springframework.web.servlet.handler.HandlerMethod , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . get ( NUMBER ) ) ; java.lang.String java.lang.String = this . java.lang.reflect.Method . java.lang.String ( ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMethod> = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getHandlerMethodsByMappingName ( java.lang.String ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.handler.HandlerMethod> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . size ( ) ) ; assertEquals ( org.springframework.web.servlet.handler.HandlerMethod , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . get ( NUMBER ) ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( STRING + org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . int ( ) + java.lang.String , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . get ( NUMBER ) ) ; org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( STRING + org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . int ( ) + java.lang.String , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler ( ) ; org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler = new org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler ( ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = new HandlerMethod ( org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; java.util.List java.util.List = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ; assertNotNull ( java.util.List ) ; assertEquals ( NUMBER , java.util.List . int ( ) ) ; assertEquals ( java.lang.String , java.util.List . java.lang.Object ( NUMBER ) ) ; java.lang.String java.lang.String = this . java.lang.reflect.Method . java.lang.String ( ) ; java.util.List<org.springframework.web.servlet.handler.HandlerMethod> < HandlerMethod > java.util.List<org.springframework.web.servlet.handler.HandlerMethod> = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getHandlerMethodsByMappingName ( java.lang.String ) ; assertNotNull ( java.util.List<org.springframework.web.servlet.handler.HandlerMethod> ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . size ( ) ) ; assertEquals ( org.springframework.web.servlet.handler.HandlerMethod , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . get ( NUMBER ) ) ; assertEquals ( org.springframework.web.servlet.handler.HandlerMethod , java.util.List<org.springframework.web.servlet.handler.HandlerMethod> . get ( NUMBER ) ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( STRING + org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . int ( ) + java.lang.String , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . get ( NUMBER ) ) ; org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( STRING + org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler . int ( ) + java.lang.String , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = new HandlerMethod ( this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , this . org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler , this . java.lang.reflect.Method ) ; assertNotNull ( this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , java.lang.String ) ) ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . unregisterMapping ( java.lang.String ) ; assertNull ( org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , java.lang.String ) ) ) ; assertNull ( this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getMappingsByUrl ( java.lang.String ) ) ; assertNull ( this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getHandlerMethodsByMappingName ( this . java.lang.reflect.Method . java.lang.String ( ) ) ) ; assertNull ( this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; StaticWebApplicationContext org.springframework.web.servlet.handler.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.handler.StaticWebApplicationContext . registerSingleton ( java.lang.String , org.springframework.web.servlet.handler.HandlerMethodMappingTests.MyHandler .class ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . setApplicationContext ( org.springframework.web.servlet.handler.StaticWebApplicationContext ) ; this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . registerMapping ( java.lang.String , java.lang.String , this . java.lang.reflect.Method ) ; HandlerMethod org.springframework.web.servlet.handler.HandlerMethod = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getHandlerInternal ( new MockHttpServletRequest ( STRING , java.lang.String ) ) ; CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = this . org.springframework.web.servlet.handler.AbstractHandlerMethodMapping<java.lang.String> . getMappingRegistry ( ) . getCorsConfiguration ( org.springframework.web.servlet.handler.HandlerMethod ) ; assertNotNull ( org.springframework.web.servlet.handler.CorsConfiguration ) ; assertEquals ( STRING + java.lang.String . int ( ) + this . java.lang.reflect.Method . java.lang.String ( ) , org.springframework.web.servlet.handler.CorsConfiguration . getAllowedOrigins ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { setHandlerMethodMappingNamingStrategy ( new org.springframework.web.servlet.handler.HandlerMethodMappingTests.SimpleMappingNamingStrategy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; return java.lang.String . boolean ( STRING ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { return ( this . org.springframework.web.servlet.handler.PathMatcher . isPattern ( java.lang.String ) ? java.util.Collections .< java.lang.String > java.util.Set<java.lang.String> ( ) : java.util.Collections . java.util.Set<java.lang.String> ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.handler.CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.String java.lang.String ) { CorsConfiguration org.springframework.web.servlet.handler.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.web.servlet.handler.CorsConfiguration . setAllowedOrigins ( java.util.Collections . java.util.List<java.lang.String> ( STRING + java.lang.Object . int ( ) + java.lang.reflect.Method . java.lang.String ( ) ) ) ; return org.springframework.web.servlet.handler.CorsConfiguration ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( java.lang.String java.lang.String , HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { java.lang.String java.lang.String = this . org.springframework.web.servlet.handler.UrlPathHelper . getLookupPathForRequest ( org.springframework.web.servlet.handler.HttpServletRequest ) ; return this . org.springframework.web.servlet.handler.PathMatcher . match ( java.lang.String , java.lang.String ) ? java.lang.String : null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Comparator<java.lang.String> < java.lang.String > java.util.Comparator<java.lang.String> ( HttpServletRequest org.springframework.web.servlet.handler.HttpServletRequest ) { java.lang.String java.lang.String = this . org.springframework.web.servlet.handler.UrlPathHelper . getLookupPathForRequest ( org.springframework.web.servlet.handler.HttpServletRequest ) ; return this . org.springframework.web.servlet.handler.PathMatcher . getPatternComparator ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( HandlerMethod org.springframework.web.servlet.handler.HandlerMethod , java.lang.String java.lang.String ) { return org.springframework.web.servlet.handler.HandlerMethod . getMethod ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ RequestMapping public void void ( ) {		}  <METHOD_END>
