<METHOD_START> public void ( java.lang.String java.lang.String ) { this( org.springframework.integration.handler.LoggingHandler.Level ( java.lang.String ) ); }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.handler.LoggingHandler.Level org.springframework.integration.handler.LoggingHandler.Level ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; try { return org.springframework.integration.handler.LoggingHandler.Level . org.springframework.integration.handler.LoggingHandler.Level ( java.lang.String . java.lang.String ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + StringUtils . arrayToCommaDelimitedString ( org.springframework.integration.handler.LoggingHandler.Level . org.springframework.integration.handler.LoggingHandler.Level[] ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( org.springframework.integration.handler.LoggingHandler.Level org.springframework.integration.handler.LoggingHandler.Level ) { void ( org.springframework.integration.handler.LoggingHandler.Level ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; void ( EXPRESSION_PARSER . parseExpression ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.handler.Expression ) { Assert . isTrue ( ! ( this . boolean ) , STRING ) ; this . boolean = true ; this . org.springframework.integration.handler.Expression = org.springframework.integration.handler.Expression ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.handler.LoggingHandler.Level org.springframework.integration.handler.LoggingHandler.Level ( ) { return this . org.springframework.integration.handler.LoggingHandler.Level ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.handler.LoggingHandler.Level org.springframework.integration.handler.LoggingHandler.Level ) { void ( org.springframework.integration.handler.LoggingHandler.Level ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.integration.handler.LoggingHandler.Level org.springframework.integration.handler.LoggingHandler.Level ) { Assert . notNull ( org.springframework.integration.handler.LoggingHandler.Level , STRING ) ; this . org.springframework.integration.handler.LoggingHandler.Level = org.springframework.integration.handler.LoggingHandler.Level ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.handler.Log = LogFactory . getLog ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { Assert . isTrue ( ! ( this . boolean ) , STRING ) ; this . boolean = true ; this . org.springframework.integration.handler.Expression = boolean ? EXPRESSION_PARSER . parseExpression ( STRING ) : EXPRESSION_PARSER . parseExpression ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; this . org.springframework.integration.handler.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Message < ? > org.springframework.integration.handler.Message<?> ) throws java.lang.Exception { switch ( this . org.springframework.integration.handler.LoggingHandler.Level ) { case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isFatalEnabled ( ) ) { this . org.springframework.integration.handler.Log . fatal ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isErrorEnabled ( ) ) { this . org.springframework.integration.handler.Log . error ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.handler.Log . warn ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.handler.Log . info ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.handler.Log . debug ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; case org.springframework.integration.handler.LoggingHandler.Level : if ( this . org.springframework.integration.handler.Log . isTraceEnabled ( ) ) { this . org.springframework.integration.handler.Log . trace ( java.lang.Object ( org.springframework.integration.handler.Message<> ) ) ; } break; default: throw new java.lang.IllegalStateException ( STRING + this . org.springframework.integration.handler.LoggingHandler.Level + STRING ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { java.lang.Object java.lang.Object = this . org.springframework.integration.handler.Expression . getValue ( this . org.springframework.integration.handler.EvaluationContext , org.springframework.integration.handler.Message<> ) ; return java.lang.Object instanceof java.lang.Throwable ? java.lang.String ( ( java.lang.Throwable ) java.lang.Object ) : java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Throwable java.lang.Throwable ) { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; if ( java.lang.Throwable instanceof AggregateMessageDeliveryException ) { java.io.StringWriter . java.io.StringWriter ( java.lang.Throwable . java.lang.String ( ) ) ; for ( java.lang.Exception java.lang.Exception : ( ( AggregateMessageDeliveryException ) java.lang.Throwable ) . getAggregatedExceptions ( ) ) { void ( java.lang.Exception , java.io.StringWriter ) ; } } else { void ( java.lang.Throwable , java.io.StringWriter ) ; } return java.io.StringWriter . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.io.Writer java.io.Writer ) { java.lang.Throwable . void ( new java.io.PrintWriter ( java.io.Writer , true ) ) ; }  <METHOD_END>
