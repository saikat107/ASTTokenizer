<METHOD_START> public void ( IndexOperationsProvider org.springframework.data.mongodb.repository.support.IndexOperationsProvider ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.IndexOperationsProvider , STRING ) ; this . org.springframework.data.mongodb.repository.support.IndexOperationsProvider = org.springframework.data.mongodb.repository.support.IndexOperationsProvider ; }  <METHOD_END>
<METHOD_START> public void void ( PartTreeMongoQuery org.springframework.data.mongodb.repository.support.PartTreeMongoQuery ) { PartTree org.springframework.data.mongodb.repository.support.PartTree = org.springframework.data.mongodb.repository.support.PartTreeMongoQuery . getTree ( ) ; Index org.springframework.data.mongodb.repository.support.Index = new Index ( ) ; org.springframework.data.mongodb.repository.support.Index . named ( org.springframework.data.mongodb.repository.support.PartTreeMongoQuery . getQueryMethod ( ) . getName ( ) ) ; Sort org.springframework.data.mongodb.repository.support.Sort = org.springframework.data.mongodb.repository.support.PartTree . getSort ( ) ; for ( Part org.springframework.data.mongodb.repository.support.Part : org.springframework.data.mongodb.repository.support.PartTree . getParts ( ) ) { if ( java.util.Set<org.springframework.data.mongodb.repository.support.Type> . contains ( org.springframework.data.mongodb.repository.support.Part . getType ( ) ) ) { return; } java.lang.String java.lang.String = org.springframework.data.mongodb.repository.support.Part . getProperty ( ) . toDotPath ( ) ; Direction org.springframework.data.mongodb.repository.support.Direction = org.springframework.data.mongodb.repository.support.Direction ( org.springframework.data.mongodb.repository.support.Sort , java.lang.String ) ; org.springframework.data.mongodb.repository.support.Index . on ( java.lang.String , org.springframework.data.mongodb.repository.support.Direction ) ; } if ( org.springframework.data.mongodb.repository.support.Sort != null ) { for ( Order org.springframework.data.mongodb.repository.support.Order : org.springframework.data.mongodb.repository.support.Sort ) { org.springframework.data.mongodb.repository.support.Index . on ( org.springframework.data.mongodb.repository.support.Order . getProperty ( ) , org.springframework.data.mongodb.repository.support.Order . getDirection ( ) ) ; } } MongoEntityMetadata < ? > org.springframework.data.mongodb.repository.support.MongoEntityMetadata<?> = org.springframework.data.mongodb.repository.support.PartTreeMongoQuery . getQueryMethod ( ) . getEntityInformation ( ) ; org.springframework.data.mongodb.repository.support.IndexOperationsProvider . indexOps ( org.springframework.data.mongodb.repository.support.MongoEntityMetadata<> . getCollectionName ( ) ) . ensureIndex ( org.springframework.data.mongodb.repository.support.Index ) ; org.springframework.data.mongodb.repository.support.Logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.repository.support.Index ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.repository.support.Direction org.springframework.data.mongodb.repository.support.Direction ( Sort org.springframework.data.mongodb.repository.support.Sort , java.lang.String java.lang.String ) { if ( org.springframework.data.mongodb.repository.support.Sort == null ) { return Direction . DESC ; } Order org.springframework.data.mongodb.repository.support.Order = org.springframework.data.mongodb.repository.support.Sort . getOrderFor ( java.lang.String ) ; return org.springframework.data.mongodb.repository.support.Order == null ? Direction . DESC : org.springframework.data.mongodb.repository.support.Order . isAscending ( ) ? Direction . ASC : Direction . DESC ; }  <METHOD_END>
