<METHOD_START> @ BeforeTransaction public void void ( ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; boolean = false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Rollback ( value = false ) public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> @ AfterTransaction public void void ( ) { if ( boolean ) { assertFalse ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; } assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; assertFalse ( java.util.Map<java.lang.String,java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
