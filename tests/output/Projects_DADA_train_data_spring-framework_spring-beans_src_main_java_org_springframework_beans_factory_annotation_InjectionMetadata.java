<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> < org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement > java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) { this . java.lang.Class<?> = java.lang.Class<> ; this . java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> = java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ; }  <METHOD_END>
<METHOD_START> public void void ( RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition ) { java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> < org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement > java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> = new java.util.LinkedHashSet<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> <> ( this . java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> . int ( ) ) ; for ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement : this . java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) { java.lang.reflect.Member java.lang.reflect.Member = org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement . java.lang.reflect.Member ( ) ; if ( ! org.springframework.beans.factory.annotation.RootBeanDefinition . isExternallyManagedConfigMember ( java.lang.reflect.Member ) ) { org.springframework.beans.factory.annotation.RootBeanDefinition . registerExternallyManagedConfigMember ( java.lang.reflect.Member ) ; java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> . boolean ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement ) ; if ( org.springframework.beans.factory.annotation.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.annotation.Log . debug ( STRING + this . java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement ) ; } } } this . java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> = java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , PropertyValues org.springframework.beans.factory.annotation.PropertyValues ) throws java.lang.Throwable { java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> < org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement > java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> = ( this . java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> != null ? this . java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> : this . java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) ; if ( ! java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> . boolean ( ) ) { boolean boolean = org.springframework.beans.factory.annotation.Log . isDebugEnabled ( ) ; for ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement : java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) { if ( boolean ) { org.springframework.beans.factory.annotation.Log . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement ) ; } org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement . void ( java.lang.Object , java.lang.String , org.springframework.beans.factory.annotation.PropertyValues ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( PropertyValues org.springframework.beans.factory.annotation.PropertyValues ) { java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> < org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement > java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> = ( this . java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> != null ? this . java.util.Set<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> : this . java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) ; if ( ! java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> . boolean ( ) ) { for ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement : java.util.Collection<org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ) { org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement . void ( org.springframework.beans.factory.annotation.PropertyValues ) ; } } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( org.springframework.beans.factory.annotation.InjectionMetadata org.springframework.beans.factory.annotation.InjectionMetadata , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( org.springframework.beans.factory.annotation.InjectionMetadata == null || org.springframework.beans.factory.annotation.InjectionMetadata . java.lang.Class<> != java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.reflect.Member java.lang.reflect.Member , java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { this . java.lang.reflect.Member = java.lang.reflect.Member ; this . boolean = ( java.lang.reflect.Member instanceof java.lang.reflect.Field ) ; this . java.beans.PropertyDescriptor = java.beans.PropertyDescriptor ; }  <METHOD_END>
<METHOD_START> public final java.lang.reflect.Member java.lang.reflect.Member ( ) { return this . java.lang.reflect.Member ; }  <METHOD_END>
<METHOD_START> protected final java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . boolean ) { return ( ( java.lang.reflect.Field ) this . java.lang.reflect.Member ) . java.lang.Class<?> ( ) ; } else if ( this . java.beans.PropertyDescriptor != null ) { return this . java.beans.PropertyDescriptor . java.lang.Class<?> ( ) ; } else { return ( ( java.lang.reflect.Method ) this . java.lang.reflect.Member ) . java.lang.Class<?>[] ( ) [ NUMBER ] ; } }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( this . boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( java.lang.reflect.Field ) this . java.lang.reflect.Member ) . java.lang.Class<?> ( ) ; if ( ! ( java.lang.Class<> . boolean ( java.lang.Class<> ) || java.lang.Class<> . boolean ( java.lang.Class<> ) ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( this . java.beans.PropertyDescriptor != null ? this . java.beans.PropertyDescriptor . java.lang.Class<?> ( ) : ( ( java.lang.reflect.Method ) this . java.lang.reflect.Member ) . java.lang.Class<?>[] ( ) [ NUMBER ] ) ; if ( ! ( java.lang.Class<> . boolean ( java.lang.Class<> ) || java.lang.Class<> . boolean ( java.lang.Class<> ) ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<> + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , PropertyValues org.springframework.beans.factory.annotation.PropertyValues ) throws java.lang.Throwable { if ( this . boolean ) { java.lang.reflect.Field java.lang.reflect.Field = ( java.lang.reflect.Field ) this . java.lang.reflect.Member ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; java.lang.reflect.Field . void ( java.lang.Object , java.lang.Object ( java.lang.Object , java.lang.String ) ) ; } else { if ( boolean ( org.springframework.beans.factory.annotation.PropertyValues ) ) { return; } try { java.lang.reflect.Method java.lang.reflect.Method = ( java.lang.reflect.Method ) this . java.lang.reflect.Member ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object ( java.lang.Object , java.lang.String ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( PropertyValues org.springframework.beans.factory.annotation.PropertyValues ) { if ( this . java.lang.Boolean != null ) { return this . java.lang.Boolean ; } if ( org.springframework.beans.factory.annotation.PropertyValues == null ) { this . java.lang.Boolean = false ; return false ; } synchronized ( org.springframework.beans.factory.annotation.PropertyValues ) { if ( this . java.lang.Boolean != null ) { return this . java.lang.Boolean ; } if ( this . java.beans.PropertyDescriptor != null ) { if ( org.springframework.beans.factory.annotation.PropertyValues . contains ( this . java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { this . java.lang.Boolean = true ; return true ; } else if ( org.springframework.beans.factory.annotation.PropertyValues instanceof MutablePropertyValues ) { ( ( MutablePropertyValues ) org.springframework.beans.factory.annotation.PropertyValues ) . registerProcessedProperty ( this . java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } this . java.lang.Boolean = false ; return false ; } }  <METHOD_END>
<METHOD_START> protected void void ( PropertyValues org.springframework.beans.factory.annotation.PropertyValues ) { if ( org.springframework.beans.factory.annotation.PropertyValues == null ) { return; } synchronized ( org.springframework.beans.factory.annotation.PropertyValues ) { if ( java.lang.Boolean . java.lang.Boolean . boolean ( this . java.lang.Boolean ) && this . java.beans.PropertyDescriptor != null && org.springframework.beans.factory.annotation.PropertyValues instanceof MutablePropertyValues ) { ( ( MutablePropertyValues ) org.springframework.beans.factory.annotation.PropertyValues ) . clearProcessedProperty ( this . java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement ) ) { return false ; } org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement = ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement ) java.lang.Object ; return this . java.lang.reflect.Member . boolean ( org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement . java.lang.reflect.Member ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.reflect.Member . java.lang.Class<? extends java.lang.reflect.Member> ( ) . int ( ) * NUMBER + this . java.lang.reflect.Member . java.lang.String ( ) . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.beans.factory.annotation.InjectionMetadata.InjectedElement> ( ) . java.lang.String ( ) + STRING + this . java.lang.reflect.Member ; }  <METHOD_END>
