<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobExplorer .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchProperties .class ) . getInitializer ( ) . isEnabled ( ) ) . isTrue ( ) ; assertThat ( new JdbcTemplate ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . queryForList ( STRING ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestCustomConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobExplorer .class ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JobExplorer ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.EmptyConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , EmbeddedDataSourceConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBeanNamesForType ( JobLauncher .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBeanNamesForType ( JobRepository .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.JobConfiguration .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncherCommandLineRunner .class ) . run ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) . getLastJobExecution ( STRING , new JobParameters ( ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.NamedJobConfigurationWithRegisteredJob .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; JobRepository org.springframework.boot.autoconfigure.batch.JobRepository = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncherCommandLineRunner .class ) . run ( ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JobRepository . getLastJobExecution ( STRING , new JobParameters ( ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.NamedJobConfigurationWithLocalJob .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncherCommandLineRunner .class ) . run ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) . getLastJobExecution ( STRING , new JobParameters ( ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.JobConfiguration .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBeanNamesForType ( CommandLineRunner .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchProperties .class ) . getInitializer ( ) . isEnabled ( ) ) . isFalse ( ) ; this . org.springframework.boot.autoconfigure.batch.ExpectedException . expect ( BadSqlGrammarException .class ) ; new JdbcTemplate ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . queryForList ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; PlatformTransactionManager org.springframework.boot.autoconfigure.batch.PlatformTransactionManager = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ; assertThat ( org.springframework.boot.autoconfigure.batch.PlatformTransactionManager . toString ( ) . contains ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( EntityManagerFactory .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) . getLastJobExecution ( STRING , new JobParameters ( ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchProperties .class ) . getInitializer ( ) . isEnabled ( ) ) . isTrue ( ) ; assertThat ( new JdbcTemplate ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . queryForList ( STRING ) ) . isEmpty ( ) ; JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobExplorer .class ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JobExplorer . findRunningJobExecutions ( STRING ) ) . isEmpty ( ) ; JobRepository org.springframework.boot.autoconfigure.batch.JobRepository = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JobRepository . getLastJobExecution ( STRING , new JobParameters ( ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchProperties .class ) . getInitializer ( ) . isEnabled ( ) ) . isFalse ( ) ; this . org.springframework.boot.autoconfigure.batch.ExpectedException . expect ( BadSqlGrammarException .class ) ; new JdbcTemplate ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( javax.sql.DataSource .class ) ) . queryForList ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , HibernateJpaAutoConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchConfigurer .class ) ; JpaTransactionManager org.springframework.boot.autoconfigure.batch.JpaTransactionManager = JpaTransactionManager .class . org.springframework.boot.autoconfigure.batch.JpaTransactionManager ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchConfigurer .class ) . getTransactionManager ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JpaTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.batch.JpaTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.BatchAutoConfigurationTests.TestConfiguration .class , EmbeddedDataSourceConfiguration .class , BatchAutoConfiguration .class , TransactionAutoConfiguration .class , PropertyPlaceholderAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchConfigurer .class ) ; DataSourceTransactionManager org.springframework.boot.autoconfigure.batch.DataSourceTransactionManager = DataSourceTransactionManager .class . org.springframework.boot.autoconfigure.batch.DataSourceTransactionManager ( this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( BatchConfigurer .class ) . getTransactionManager ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.batch.DataSourceTransactionManager . getDefaultTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.batch.DataSourceTransactionManager . isRollbackOnCommitFailure ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobRepository org.springframework.boot.autoconfigure.batch.JobRepository ( ) java.lang.Exception { if ( this . org.springframework.boot.autoconfigure.batch.JobRepository == null ) { this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean . afterPropertiesSet ( ) ; this . org.springframework.boot.autoconfigure.batch.JobRepository = this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean . getObject ( ) ; } return this . org.springframework.boot.autoconfigure.batch.JobRepository ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.PlatformTransactionManager org.springframework.boot.autoconfigure.batch.PlatformTransactionManager ( ) java.lang.Exception { return new ResourcelessTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobLauncher org.springframework.boot.autoconfigure.batch.JobLauncher ( ) java.lang.Exception { SimpleJobLauncher org.springframework.boot.autoconfigure.batch.SimpleJobLauncher = new SimpleJobLauncher ( ) ; org.springframework.boot.autoconfigure.batch.SimpleJobLauncher . setJobRepository ( this . org.springframework.boot.autoconfigure.batch.JobRepository ) ; return org.springframework.boot.autoconfigure.batch.SimpleJobLauncher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer ( ) java.lang.Exception { MapJobExplorerFactoryBean org.springframework.boot.autoconfigure.batch.MapJobExplorerFactoryBean = new MapJobExplorerFactoryBean ( this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean ) ; org.springframework.boot.autoconfigure.batch.MapJobExplorerFactoryBean . afterPropertiesSet ( ) ; return org.springframework.boot.autoconfigure.batch.MapJobExplorerFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.batch.JobRegistryBeanPostProcessor org.springframework.boot.autoconfigure.batch.JobRegistryBeanPostProcessor ( ) { JobRegistryBeanPostProcessor org.springframework.boot.autoconfigure.batch.JobRegistryBeanPostProcessor = new JobRegistryBeanPostProcessor ( ) ; org.springframework.boot.autoconfigure.batch.JobRegistryBeanPostProcessor . setJobRegistry ( this . org.springframework.boot.autoconfigure.batch.JobRegistry ) ; return org.springframework.boot.autoconfigure.batch.JobRegistryBeanPostProcessor ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.batch.Job org.springframework.boot.autoconfigure.batch.Job ( ) { AbstractJob org.springframework.boot.autoconfigure.batch.AbstractJob = new AbstractJob ( STRING ) { @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; } @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; } } ; org.springframework.boot.autoconfigure.batch.AbstractJob . setJobRepository ( this . org.springframework.boot.autoconfigure.batch.JobRepository ) ; return org.springframework.boot.autoconfigure.batch.AbstractJob ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.batch.Job org.springframework.boot.autoconfigure.batch.Job ( ) { AbstractJob org.springframework.boot.autoconfigure.batch.AbstractJob = new AbstractJob ( STRING ) { @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; } @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; } } ; org.springframework.boot.autoconfigure.batch.AbstractJob . setJobRepository ( this . org.springframework.boot.autoconfigure.batch.JobRepository ) ; return org.springframework.boot.autoconfigure.batch.AbstractJob ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.batch.Job org.springframework.boot.autoconfigure.batch.Job ( ) { AbstractJob org.springframework.boot.autoconfigure.batch.AbstractJob = new AbstractJob ( ) { @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; } @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; } @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; } } ; org.springframework.boot.autoconfigure.batch.AbstractJob . setJobRepository ( this . org.springframework.boot.autoconfigure.batch.JobRepository ) ; return org.springframework.boot.autoconfigure.batch.AbstractJob ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.Step org.springframework.boot.autoconfigure.batch.Step ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( JobExecution org.springframework.boot.autoconfigure.batch.JobExecution )						throws org.springframework.boot.autoconfigure.batch.JobExecutionException { org.springframework.boot.autoconfigure.batch.JobExecution . setStatus ( BatchStatus . COMPLETED ) ; }  <METHOD_END>
