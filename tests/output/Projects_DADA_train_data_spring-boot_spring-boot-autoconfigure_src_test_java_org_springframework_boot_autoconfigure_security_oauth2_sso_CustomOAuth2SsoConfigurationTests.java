<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.security.oauth2.sso.MockMvc = MockMvcBuilders . webAppContextSetup ( this . org.springframework.boot.autoconfigure.security.oauth2.sso.WebApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.oauth2.sso.Filter ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.oauth2.sso.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) . andExpect ( header ( ) . string ( STRING , startsWith ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.oauth2.sso.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isFound ( ) ) . andExpect ( header ( ) . string ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.oauth2.sso.MockMvc . perform ( get ( STRING ) . header ( STRING , STRING ) ) . andExpect ( status ( ) . isUnauthorized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.oauth2.sso.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpSecurity org.springframework.boot.autoconfigure.security.oauth2.sso.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.oauth2.sso.HttpSecurity . antMatcher ( STRING ) . authorizeRequests ( ) . antMatchers ( STRING ) . permitAll ( ) . anyRequest ( ) . authenticated ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
