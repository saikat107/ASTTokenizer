<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.lang.Class<? extends java.util.Collection> < ? extends java.util.Collection > java.lang.Class<? extends java.util.Collection> ) { this( java.lang.Class<> , false ); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( java.lang.Class<? extends java.util.Collection> < ? extends java.util.Collection > java.lang.Class<? extends java.util.Collection> , boolean boolean ) { if ( java.lang.Class<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( ! java.util.Collection .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } this . java.lang.Class<? extends java.util.Collection> = java.lang.Class<> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { if ( java.lang.Object == null && this . boolean ) { super. void ( java.util.Collection<java.lang.Object> ( this . java.lang.Class<> , NUMBER ) ) ; } else if ( java.lang.Object == null || ( this . java.lang.Class<> . boolean ( java.lang.Object ) && ! boolean ( ) ) ) { super. void ( java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( this . java.lang.Class<> , java.util.Collection<> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object ) ) ; } super. void ( java.util.Collection<java.lang.Object> ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { int int = java.lang.reflect.Array . int ( java.lang.Object ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( this . java.lang.Class<> , int ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.reflect.Array . java.lang.Object ( java.lang.Object , int ) ) ) ; } super. void ( java.util.Collection<java.lang.Object> ) ; } else { java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = java.util.Collection<java.lang.Object> ( this . java.lang.Class<> , NUMBER ) ; java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object ) ) ; super. void ( java.util.Collection<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( java.lang.Class<? extends java.util.Collection> < ? extends java.util.Collection > java.lang.Class<? extends java.util.Collection> , int int ) { if ( ! java.lang.Class<> . boolean ( ) ) { try { return ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.Throwable ) ; } } else if ( java.util.List .class == java.lang.Class<> ) { return new java.util.ArrayList<java.lang.Object> <> ( int ) ; } else if ( java.util.SortedSet .class == java.lang.Class<> ) { return new java.util.TreeSet<java.lang.Object> <> ( ) ; } else { return new java.util.LinkedHashSet<java.lang.Object> <> ( int ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
