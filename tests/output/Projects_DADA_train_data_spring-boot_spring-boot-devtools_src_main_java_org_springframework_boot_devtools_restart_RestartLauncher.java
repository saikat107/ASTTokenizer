<METHOD_START> void ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] , java.lang.Thread.UncaughtExceptionHandler java.lang.Thread.UncaughtExceptionHandler ) { this . java.lang.String = java.lang.String ; this . java.lang.String[] = java.lang.String[] ; void ( STRING ) ; void ( java.lang.Thread.UncaughtExceptionHandler ) ; void ( false ) ; void ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.ClassLoader ( ) . java.lang.Class<?> ( this . java.lang.String ) ; java.lang.reflect.Method java.lang.reflect.Method = java.lang.Class<> . java.lang.reflect.Method ( STRING , java.lang.String [] .class ) ; java.lang.reflect.Method . java.lang.Object ( null , new java.lang.Object [] { this . java.lang.String[] } ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; java.lang.Thread.UncaughtExceptionHandler ( ) . void ( this , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Throwable java.lang.Throwable ( ) { return this . java.lang.Throwable ; }  <METHOD_END>
