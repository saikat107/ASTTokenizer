<METHOD_START> protected org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( java.lang.String java.lang.String ) { try { return ResolvableType . forField ( org.springframework.context.event.AbstractApplicationEventListenerTests.TestEvents .class . java.lang.reflect.Field ( java.lang.String ) ) ; } catch ( java.lang.NoSuchFieldException java.lang.NoSuchFieldException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , T T ) { super( java.lang.Object ); this . T = T ; }  <METHOD_END>
<METHOD_START> public T T ( ) { return this . T ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , T T ) { super( java.lang.Object , T ); this . org.springframework.context.event.ResolvableType = ResolvableType . forClassWithGenerics ( java.lang.Class<? extends org.springframework.context.event.AbstractApplicationEventListenerTests.SmartGenericTestEvent> ( ) , T . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.event.ResolvableType org.springframework.context.event.ResolvableType ( ) { return this . org.springframework.context.event.ResolvableType ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { super( java.lang.Object , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.Long java.lang.Long ) { super( java.lang.Object , java.lang.Long ); }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<T> < T > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<T> ( T T ) { return new org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<T> <> ( this , T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<?> < ? > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<?> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<java.lang.Object> < java.lang.Object > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<java.lang.Object> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<? extends java.lang.RuntimeException> < ? extends java.lang.RuntimeException > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<? extends java.lang.RuntimeException> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<java.lang.String> < java.lang.String > org.springframework.context.event.AbstractApplicationEventListenerTests.GenericTestEvent<java.lang.String> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.event.ApplicationEvent ) {		}  <METHOD_END>
