<METHOD_START> void ( java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> ) { this . java.util.List<java.lang.Object> = new java.util.LinkedList<java.lang.Object> < java.lang.Object > ( java.util.Set<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { this . java.util.List<java.lang.Object> . void ( ) ; this . java.util.List<java.lang.Object> . boolean ( java.util.List<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( ) { return this . java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IntegrationFlowDefinition < ? > org.springframework.integration.dsl.IntegrationFlowDefinition<?> ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( ! this . boolean ) { java.util.ListIterator<java.lang.Object> < java.lang.Object > java.util.ListIterator<java.lang.Object> = this . java.util.List<java.lang.Object> . java.util.ListIterator<java.lang.Object> ( this . java.util.List<java.lang.Object> . int ( ) ) ; this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . clear ( ) ; while ( java.util.ListIterator<java.lang.Object> . boolean ( ) ) { java.lang.Object java.lang.Object = java.util.ListIterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof SmartLifecycle ) { this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . add ( ( SmartLifecycle ) java.lang.Object ) ; ( ( SmartLifecycle ) java.lang.Object ) . start ( ) ; } } this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { if ( this . boolean ) { org.springframework.integration.dsl.StandardIntegrationFlow.AggregatingCallback org.springframework.integration.dsl.StandardIntegrationFlow.AggregatingCallback = new org.springframework.integration.dsl.StandardIntegrationFlow.AggregatingCallback ( this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . size ( ) , java.lang.Runnable ) ; java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> < SmartLifecycle > java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> = this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . listIterator ( this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . size ( ) ) ; while ( java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> . hasPrevious ( ) ) { SmartLifecycle org.springframework.integration.dsl.SmartLifecycle = java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> . previous ( ) ; if ( org.springframework.integration.dsl.SmartLifecycle . isRunning ( ) ) { org.springframework.integration.dsl.SmartLifecycle . stop ( org.springframework.integration.dsl.StandardIntegrationFlow.AggregatingCallback ) ; } else { org.springframework.integration.dsl.StandardIntegrationFlow.AggregatingCallback . void ( ) ; } } this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean ) { java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> < SmartLifecycle > java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> = this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . listIterator ( this . java.util.List<org.springframework.integration.dsl.SmartLifecycle> . size ( ) ) ; while ( java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> . hasPrevious ( ) ) { java.util.ListIterator<org.springframework.integration.dsl.SmartLifecycle> . previous ( ) . stop ( ) ; } this . boolean = false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> void ( int int , java.lang.Runnable java.lang.Runnable ) { this . java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( int ) ; this . java.lang.Runnable = java.lang.Runnable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.concurrent.atomic.AtomicInteger . int ( ) <= NUMBER ) { this . java.lang.Runnable . void ( ) ; } }  <METHOD_END>
