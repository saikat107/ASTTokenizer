<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor = new AutoRegionLookupBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.config.support.Region<?,?> < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> ( java.lang.String java.lang.String ) { Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> = mock ( Region .class ) ; when ( org.springframework.data.gemfire.config.support.Region<,> . getFullPath ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.config.support.Region<,> . getName ( ) ) . thenReturn ( java.lang.String ( java.lang.String ) ) ; return org.springframework.data.gemfire.config.support.Region<,> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { int int = java.lang.String . int ( Region . SEPARATOR ) ; return ( int > - NUMBER ? java.lang.String . java.lang.String ( int + NUMBER ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . getBeanFactory ( ) ) . isSameAs ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactory org.springframework.data.gemfire.config.support.BeanFactory = mock ( BeanFactory .class ) ; org.springframework.data.gemfire.config.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.config.support.BeanFactory . getClass ( ) . getName ( ) , ConfigurableListableBeanFactory .class . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( org.springframework.data.gemfire.config.support.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectMessage ( java.lang.String . java.lang.String ( STRING , ConfigurableListableBeanFactory .class . java.lang.String ( ) ) ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.config.support.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . getBeanFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . postProcessBeforeInitialization ( java.lang.Object , STRING ) ) . isSameAs ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; AutoRegionLookupBeanPostProcessor org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor = spy ( this . org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ) . isSameAs ( java.lang.Object ) ; verify ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor , never ( ) ) . registerCacheRegionsAsBeans ( any ( GemFireCache .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> = CollectionUtils . asSet ( org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) , org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) , org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ) ; final java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> = new java.util.HashSet<org.springframework.data.gemfire.config.support.Region<?,?>> < Region < ? , ? > > ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> . size ( ) ) ; AutoRegionLookupBeanPostProcessor org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor = new AutoRegionLookupBeanPostProcessor ( ) { @ java.lang.Override void void ( Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> ) { java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> . add ( org.springframework.data.gemfire.config.support.Region<,> ) ; } } ; GemFireCache org.springframework.data.gemfire.config.support.GemFireCache = mock ( GemFireCache .class ) ; when ( org.springframework.data.gemfire.config.support.GemFireCache . rootRegions ( ) ) . thenReturn ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . registerCacheRegionsAsBeans ( org.springframework.data.gemfire.config.support.GemFireCache ) ; assertThat ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) . isEqualTo ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) ; verify ( org.springframework.data.gemfire.config.support.GemFireCache , times ( NUMBER ) ) . rootRegions ( ) ; for ( Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> : java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) { verifyZeroInteractions ( org.springframework.data.gemfire.config.support.Region<,> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> ) { java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> . add ( org.springframework.data.gemfire.config.support.Region<,> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.config.support.Region<,> . subregions ( anyBoolean ( ) ) ) . thenReturn ( java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ( ) ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . containsBean ( anyString ( ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . registerCacheRegionAsBean ( org.springframework.data.gemfire.config.support.Region<,> ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( STRING ) , eq ( org.springframework.data.gemfire.config.support.Region<,> ) ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . subregions ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; Region < ? , ? > org.springframework.data.gemfire.config.support.Region<?,?> = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.config.support.Region<,> . subregions ( anyBoolean ( ) ) ) . thenReturn ( CollectionUtils .< Region < ? , ? > > asSet ( org.springframework.data.gemfire.config.support.Region<,> ) ) ; when ( org.springframework.data.gemfire.config.support.Region<,> . subregions ( anyBoolean ( ) ) ) . thenReturn ( java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ( ) ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . containsBean ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . containsBean ( eq ( STRING ) ) ) . thenReturn ( false ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . registerCacheRegionAsBean ( org.springframework.data.gemfire.config.support.Region<,> ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . containsBean ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , never ( ) ) . registerSingleton ( eq ( STRING ) , eq ( org.springframework.data.gemfire.config.support.Region<,> ) ) ; verify ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , times ( NUMBER ) ) . registerSingleton ( eq ( STRING ) , eq ( org.springframework.data.gemfire.config.support.Region<,> ) ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . subregions ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , never ( ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.config.support.Region<,> , times ( NUMBER ) ) . subregions ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . setBeanFactory ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . registerCacheRegionAsBean ( null ) ; verifyZeroInteractions ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.config.support.Region = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . getBeanName ( org.springframework.data.gemfire.config.support.Region ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.config.support.Region , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.config.support.Region , never ( ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.config.support.Region = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . getBeanName ( org.springframework.data.gemfire.config.support.Region ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.config.support.Region , times ( NUMBER ) ) . getFullPath ( ) ; verify ( org.springframework.data.gemfire.config.support.Region , times ( NUMBER ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> = CollectionUtils . asSet ( org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) , org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ) ; Region org.springframework.data.gemfire.config.support.Region = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.config.support.Region . subregions ( anyBoolean ( ) ) ) . thenReturn ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . nullSafeSubregions ( org.springframework.data.gemfire.config.support.Region ) ) . isEqualTo ( java.util.Set<org.springframework.data.gemfire.config.support.Region<?,?>> ) ; verify ( org.springframework.data.gemfire.config.support.Region , times ( NUMBER ) ) . subregions ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.config.support.Region = org.springframework.data.gemfire.config.support.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.config.support.Region . subregions ( anyBoolean ( ) ) ) . thenReturn ( null ) ; assertThat ( org.springframework.data.gemfire.config.support.AutoRegionLookupBeanPostProcessor . nullSafeSubregions ( org.springframework.data.gemfire.config.support.Region ) ) . isEqualTo ( java.util.Collections . java.util.Set<java.lang.Object> ( ) ) ; verify ( org.springframework.data.gemfire.config.support.Region , times ( NUMBER ) ) . subregions ( eq ( false ) ) ; }  <METHOD_END>
