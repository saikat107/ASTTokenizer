<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithValueFieldAndPlaceholderConfigurer .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.System . java.lang.String ( STRING ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithValueFieldAndStaticPlaceholderConfigurer .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.System . java.lang.String ( STRING ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithValueField .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithPlaceholderConfigurer .class ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; java.lang.System . java.lang.String ( STRING ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithValueField .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithPlaceholderConfigurer .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ConfigurationClassWithPlaceholderConfigurerBeanTests.ConfigWithValueField .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; TestBean org.springframework.context.annotation.configuration.TestBean = org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( TestBean .class ) ; assertThat ( org.springframework.context.annotation.configuration.TestBean . getName ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.configuration.ITestBean org.springframework.context.annotation.configuration.ITestBean ( ) { return new TestBean ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer org.springframework.context.annotation.configuration.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
