<METHOD_START> public void ( MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod , MongoOperations org.springframework.data.mongodb.repository.query.MongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.query.MongoOperations , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , STRING ) ; this . org.springframework.data.mongodb.repository.query.MongoQueryMethod = org.springframework.data.mongodb.repository.query.MongoQueryMethod ; this . org.springframework.data.mongodb.repository.query.MongoOperations = org.springframework.data.mongodb.repository.query.MongoOperations ; this . org.springframework.data.mongodb.repository.query.EntityInstantiators = new EntityInstantiators ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.query.MongoQueryMethod org.springframework.data.mongodb.repository.query.MongoQueryMethod ( ) { return org.springframework.data.mongodb.repository.query.MongoQueryMethod ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor = new MongoParametersParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoQueryMethod , java.lang.Object[] ) ; Query org.springframework.data.mongodb.repository.query.Query = org.springframework.data.mongodb.repository.query.Query ( new ConvertingParameterAccessor ( org.springframework.data.mongodb.repository.query.MongoOperations . getConverter ( ) , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ) ; org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.Query ) ; ResultProcessor org.springframework.data.mongodb.repository.query.ResultProcessor = org.springframework.data.mongodb.repository.query.MongoQueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.repository.query.MongoQueryMethod . getEntityInformation ( ) . getCollectionName ( ) ; MongoQueryExecution org.springframework.data.mongodb.repository.query.MongoQueryExecution = org.springframework.data.mongodb.repository.query.MongoQueryExecution ( org.springframework.data.mongodb.repository.query.Query , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , new ResultProcessingConverter ( org.springframework.data.mongodb.repository.query.ResultProcessor , org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.EntityInstantiators ) ) ; return org.springframework.data.mongodb.repository.query.MongoQueryExecution . execute ( org.springframework.data.mongodb.repository.query.Query , org.springframework.data.mongodb.repository.query.ResultProcessor . getReturnedType ( ) . getDomainType ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.MongoQueryExecution org.springframework.data.mongodb.repository.query.MongoQueryExecution ( Query org.springframework.data.mongodb.repository.query.Query , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor , Converter < java.lang.Object , java.lang.Object > org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) { if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isStreamQuery ( ) ) { return new StreamExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; } return new ResultProcessingExecution ( org.springframework.data.mongodb.repository.query.MongoQueryExecution ( org.springframework.data.mongodb.repository.query.Query , org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) , org.springframework.data.mongodb.repository.query.Converter<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.query.MongoQueryExecution org.springframework.data.mongodb.repository.query.MongoQueryExecution ( Query org.springframework.data.mongodb.repository.query.Query , MongoParameterAccessor org.springframework.data.mongodb.repository.query.MongoParameterAccessor ) { if ( boolean ( ) ) { return new DeleteExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoQueryMethod ) ; } else if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isGeoNearQuery ( ) && org.springframework.data.mongodb.repository.query.MongoQueryMethod . isPageQuery ( ) ) { return new PagingGeoNearExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.MongoQueryMethod . getReturnType ( ) , this ) ; } else if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isGeoNearQuery ( ) ) { return new GeoNearExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor , org.springframework.data.mongodb.repository.query.MongoQueryMethod . getReturnType ( ) ) ; } else if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isSliceQuery ( ) ) { return new SlicedExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ) ; } else if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isCollectionQuery ( ) ) { return new CollectionExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ) ; } else if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . isPageQuery ( ) ) { return new PagedExecution ( org.springframework.data.mongodb.repository.query.MongoOperations , org.springframework.data.mongodb.repository.query.MongoParameterAccessor . getPageable ( ) ) ; } else if ( boolean ( ) ) { return new CountExecution ( org.springframework.data.mongodb.repository.query.MongoOperations ) ; } else if ( boolean ( ) ) { return new ExistsExecution ( org.springframework.data.mongodb.repository.query.MongoOperations ) ; } else { return new SingleEntityExecution ( org.springframework.data.mongodb.repository.query.MongoOperations ) ; } }  <METHOD_END>
<METHOD_START> org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( Query org.springframework.data.mongodb.repository.query.Query ) { if ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . hasQueryMetaAttributes ( ) ) { org.springframework.data.mongodb.repository.query.Query . setMeta ( org.springframework.data.mongodb.repository.query.MongoQueryMethod . getQueryMetaAttributes ( ) ) ; } return org.springframework.data.mongodb.repository.query.Query ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) { return org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.Query ( org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.data.mongodb.repository.query.Query org.springframework.data.mongodb.repository.query.Query ( ConvertingParameterAccessor org.springframework.data.mongodb.repository.query.ConvertingParameterAccessor );  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( )  <METHOD_END>
