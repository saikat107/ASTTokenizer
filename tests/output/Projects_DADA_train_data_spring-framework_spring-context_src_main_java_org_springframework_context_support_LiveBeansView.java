<METHOD_START> static void void ( ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ) { java.lang.String java.lang.String = org.springframework.context.support.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( java.lang.String ) ; if ( java.lang.String != null ) { synchronized ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) { if ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> . isEmpty ( ) ) { try { javax.management.MBeanServer javax.management.MBeanServer = java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) ; java.lang.String = org.springframework.context.support.ConfigurableApplicationContext . getApplicationName ( ) ; javax.management.MBeanServer . javax.management.ObjectInstance ( new org.springframework.context.support.LiveBeansView ( ) , new javax.management.ObjectName ( java.lang.String , java.lang.String , java.lang.String ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationContextException ( STRING , java.lang.Throwable ) ; } } java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> . add ( org.springframework.context.support.ConfigurableApplicationContext ) ; } } }  <METHOD_END>
<METHOD_START> static void void ( ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ) { synchronized ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) { if ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> . remove ( org.springframework.context.support.ConfigurableApplicationContext ) && java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> . isEmpty ( ) ) { try { javax.management.MBeanServer javax.management.MBeanServer = java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) ; java.lang.String java.lang.String = org.springframework.context.support.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( java.lang.String ) ; javax.management.MBeanServer . void ( new javax.management.ObjectName ( java.lang.String , java.lang.String , java.lang.String ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ApplicationContextException ( STRING , java.lang.Throwable ) ; } finally { java.lang.String = null ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.context.support.ApplicationContext ) { Assert . isTrue ( org.springframework.context.support.ApplicationContext instanceof ConfigurableApplicationContext , STRING ) ; this . org.springframework.context.support.ConfigurableApplicationContext = ( ConfigurableApplicationContext ) org.springframework.context.support.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> < ConfigurableApplicationContext > java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ; if ( this . org.springframework.context.support.ConfigurableApplicationContext != null ) { java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> = java.util.Collections . java.util.Set ( this . org.springframework.context.support.ConfigurableApplicationContext ) ; } else { java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> = java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ( ) ; } return java.lang.String ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> < ConfigurableApplicationContext > java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ( ) { synchronized ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) { return new java.util.LinkedHashSet <> ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> < ConfigurableApplicationContext > java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; for ( java.util.Iterator<org.springframework.context.support.ConfigurableApplicationContext> < ConfigurableApplicationContext > java.util.Iterator<org.springframework.context.support.ConfigurableApplicationContext> = java.util.Set<org.springframework.context.support.ConfigurableApplicationContext> . iterator ( ) ; java.util.Iterator<org.springframework.context.support.ConfigurableApplicationContext> . hasNext ( ) ;) { ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext = java.util.Iterator<org.springframework.context.support.ConfigurableApplicationContext> . next ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.context.support.ConfigurableApplicationContext . getId ( ) ) . append ( STRING ) ; if ( org.springframework.context.support.ConfigurableApplicationContext . getParent ( ) != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.context.support.ConfigurableApplicationContext . getParent ( ) . getId ( ) ) . append ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory = org.springframework.context.support.ConfigurableApplicationContext . getBeanFactory ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanDefinitionNames ( ) ; boolean boolean = false ; for ( java.lang.String java.lang.String : java.lang.String[] ) { BeanDefinition org.springframework.context.support.BeanDefinition = org.springframework.context.support.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( boolean ( java.lang.String , org.springframework.context.support.BeanDefinition , org.springframework.context.support.ConfigurableListableBeanFactory ) ) { if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; void ( java.lang.StringBuilder , org.springframework.context.support.ConfigurableListableBeanFactory . getAliases ( java.lang.String ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.String java.lang.String = org.springframework.context.support.BeanDefinition . getScope ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = BeanDefinition . SCOPE_SINGLETON ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.support.ConfigurableListableBeanFactory . getType ( java.lang.String ) ; if ( java.lang.Class<> != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.Class<> . java.lang.String ( ) ) . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ( org.springframework.context.support.BeanDefinition ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; void ( java.lang.StringBuilder , org.springframework.context.support.ConfigurableListableBeanFactory . getDependenciesForBean ( java.lang.String ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; boolean = true ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; if ( java.util.Iterator<org.springframework.context.support.ConfigurableApplicationContext> . hasNext ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , BeanDefinition org.springframework.context.support.BeanDefinition , ConfigurableBeanFactory org.springframework.context.support.ConfigurableBeanFactory ) { return ( org.springframework.context.support.BeanDefinition . getRole ( ) != BeanDefinition . ROLE_INFRASTRUCTURE && ( ! org.springframework.context.support.BeanDefinition . isLazyInit ( ) || org.springframework.context.support.ConfigurableBeanFactory . containsSingleton ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( BeanDefinition org.springframework.context.support.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.context.support.BeanDefinition . getResourceDescription ( ) ; if ( java.lang.String == null ) { return null ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String . int ( ) + NUMBER ) ; for ( int int = NUMBER ; int < java.lang.String . int ( ) ; int ++ ) { char char = java.lang.String . char ( int ) ; if ( char == '\\' ) { java.lang.StringBuilder . java.lang.StringBuilder ( '/' ) ; } else if ( char == '"' ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( '"' ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( char ) ; } } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.StringBuilder java.lang.StringBuilder , java.lang.String [] java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( '[' ) ; if ( java.lang.String[] . int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\"' ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ) ; if ( java.lang.String[] . int > NUMBER ) { java.lang.StringBuilder . java.lang.StringBuilder ( '\"' ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( ']' ) ; }  <METHOD_END>
