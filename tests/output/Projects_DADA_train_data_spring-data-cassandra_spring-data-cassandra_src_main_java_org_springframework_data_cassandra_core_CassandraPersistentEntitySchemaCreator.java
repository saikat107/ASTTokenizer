<METHOD_START> public void ( CassandraMappingContext org.springframework.data.cassandra.core.CassandraMappingContext , CassandraAdminOperations org.springframework.data.cassandra.core.CassandraAdminOperations ) { Assert . notNull ( org.springframework.data.cassandra.core.CassandraAdminOperations , STRING ) ; Assert . notNull ( org.springframework.data.cassandra.core.CassandraMappingContext , STRING ) ; this . org.springframework.data.cassandra.core.CassandraAdminOperations = org.springframework.data.cassandra.core.CassandraAdminOperations ; this . org.springframework.data.cassandra.core.CassandraMappingContext = org.springframework.data.cassandra.core.CassandraMappingContext ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { java.util.List<org.springframework.data.cassandra.core.CreateTableSpecification> ( boolean ) . forEach ( specification -> cassandraAdminOperations . getCqlOperations ( ) . execute ( CreateTableCqlGenerator . toCql ( specification ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.cassandra.core.CreateTableSpecification> < CreateTableSpecification > java.util.List<org.springframework.data.cassandra.core.CreateTableSpecification> ( boolean boolean ) { return org.springframework.data.cassandra.core.CassandraMappingContext . getTableEntities ( ) . stream ( ) . map ( entity -> mappingContext . getCreateTableSpecificationFor ( entity ) . ifNotExists ( ifNotExists ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> ( boolean ) . forEach ( specification -> cassandraAdminOperations . getCqlOperations ( ) . execute ( CreateUserTypeCqlGenerator . toCql ( specification ) ) ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> < CreateUserTypeSpecification > java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> ( boolean boolean ) { java.util.Collection<? extends org.springframework.data.cassandra.core.CassandraPersistentEntity<?>> < ? extends CassandraPersistentEntity < ? > > java.util.Collection<? extends org.springframework.data.cassandra.core.CassandraPersistentEntity<?>> = new java.util.ArrayList <> ( org.springframework.data.cassandra.core.CassandraMappingContext . getUserDefinedTypeEntities ( ) ) ; java.util.Map<org.springframework.data.cassandra.core.CqlIdentifier,org.springframework.data.cassandra.core.CassandraPersistentEntity<?>> < CqlIdentifier , CassandraPersistentEntity < ? > > java.util.Map<org.springframework.data.cassandra.core.CqlIdentifier,org.springframework.data.cassandra.core.CassandraPersistentEntity<?>> = java.util.Collection<> . java.util.stream.Stream<> ( ) . java.lang.Object ( java.util.stream.Collectors . java.util.stream.Collector ( CassandraPersistentEntity :: getTableName , entity -> entity ) ) ; java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> < CreateUserTypeSpecification > java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> = new java.util.ArrayList<org.springframework.data.cassandra.core.CreateUserTypeSpecification> <> ( ) ; java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> < CqlIdentifier > java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> = new java.util.HashSet<org.springframework.data.cassandra.core.CqlIdentifier> <> ( ) ; java.util.Collection<> . void ( entity -> { java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> < CqlIdentifier > java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> = new java.util.LinkedHashSet<org.springframework.data.cassandra.core.CqlIdentifier> <> ( ) ; java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> . add ( entity . getTableName ( ) ) ; void ( entity , java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> ) ; java.util.List<org.springframework.data.cassandra.core.CqlIdentifier> < CqlIdentifier > java.util.List<org.springframework.data.cassandra.core.CqlIdentifier> = new java.util.ArrayList <> ( java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> ) ; java.util.Collections . void ( java.util.List<org.springframework.data.cassandra.core.CqlIdentifier> ) ; java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> . addAll ( java.util.List<org.springframework.data.cassandra.core.CqlIdentifier> . stream ( ) . filter ( java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> :: add ) . map ( identifier -> mappingContext . getCreateUserTypeSpecificationFor ( byTableName . get ( identifier ) ) . ifNotExists ( ifNotExists ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ; } ) ; return java.util.List<org.springframework.data.cassandra.core.CreateUserTypeSpecification> ; }  <METHOD_END>
<METHOD_START> private void void ( CassandraPersistentEntity < ? > org.springframework.data.cassandra.core.CassandraPersistentEntity<?> , final java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> < CqlIdentifier > java.util.Set<org.springframework.data.cassandra.core.CqlIdentifier> ) { org.springframework.data.cassandra.core.CassandraPersistentEntity<> . getPersistentProperties ( ) . map ( org.springframework.data.cassandra.core.CassandraMappingContext :: getPersistentEntity ) . flatMap ( Optionals :: toStream ) . filter ( CassandraPersistentEntity :: isUserDefinedType ) . forEach ( persistentEntity -> { if ( seen . add ( persistentEntity . getTableName ( ) ) ) { visitUserTypes ( persistentEntity , seen ) ; } } ) ; }  <METHOD_END>
