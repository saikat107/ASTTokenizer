<METHOD_START> public void void ( java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ) { AnnotationAwareOrderComparator . sort ( java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ) ; this . java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> = java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> < ClientHttpRequestInterceptor > java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ( ) { return java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.support.ClientHttpRequestFactory org.springframework.http.client.support.ClientHttpRequestFactory ( ) { ClientHttpRequestFactory org.springframework.http.client.support.ClientHttpRequestFactory = super. getRequestFactory ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ( ) ) ) { return new InterceptingClientHttpRequestFactory ( org.springframework.http.client.support.ClientHttpRequestFactory , java.util.List<org.springframework.http.client.support.ClientHttpRequestInterceptor> ( ) ) ; } else { return org.springframework.http.client.support.ClientHttpRequestFactory ; } }  <METHOD_END>
