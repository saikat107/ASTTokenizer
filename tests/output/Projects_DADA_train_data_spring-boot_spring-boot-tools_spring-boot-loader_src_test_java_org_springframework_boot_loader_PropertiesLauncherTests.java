<METHOD_START> @ Before public void void ( ) java.io.IOException { MockitoAnnotations . initMocks ( this ) ; java.lang.System . java.lang.String ( STRING , new java.io.File ( STRING ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.System . java.lang.String ( STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getHomeDirectory ( ) ) . isEqualTo ( new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getHomeDirectory ( ) ) . isEqualTo ( new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.loader.ExpectedException . expectMessage ( STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getHomeDirectory ( ) ) . isNotEqualTo ( new java.io.File ( java.lang.System . java.lang.String ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , java.net.URLClassLoader .class . java.lang.String ( ) ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , java.net.URLClassLoader .class . java.lang.String ( ) ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) . toString ( ) ) . isEqualTo ( STRING ) ; org.springframework.boot.loader.PropertiesLauncher . launch ( new java.lang.String [ NUMBER ] ) ; void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , org.springframework.boot.loader.PropertiesLauncherTests.TestLoader .class . java.lang.String ( ) ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; java.lang.ClassLoader java.lang.ClassLoader = org.springframework.boot.loader.PropertiesLauncher . createClassLoader ( java.util.Collections .< Archive > java.util.List<org.springframework.boot.loader.Archive> ( ) ) ; assertThat ( java.lang.ClassLoader ) . isNotNull ( ) ; assertThat ( java.lang.ClassLoader . java.lang.Class<? extends java.lang.ClassLoader> ( ) . java.lang.String ( ) ) . isEqualTo ( org.springframework.boot.loader.PropertiesLauncherTests.TestLoader .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; new PropertiesLauncher ( ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( java.util.Arrays . java.util.List ( org.springframework.boot.loader.PropertiesLauncher . getArgs ( STRING ) ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , this . org.springframework.boot.loader.TemporaryFolder . getRoot ( ) . getAbsolutePath ( ) ) ; java.util.jar.Manifest java.util.jar.Manifest = new java.util.jar.Manifest ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.Object ( java.util.jar.Attributes . java.util.jar.Attributes.Name . java.util.jar.Attributes.Name , STRING ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING , STRING ) ; java.io.File java.io.File = new java.io.File ( this . org.springframework.boot.loader.TemporaryFolder . getRoot ( ) , STRING ) ; java.io.File . java.io.File ( ) . boolean ( ) ; java.util.jar.Manifest . void ( new java.io.FileOutputStream ( java.io.File ) ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( ( java.util.List<java.lang.String> < java.lang.String > ) ReflectionTestUtils . getField ( org.springframework.boot.loader.PropertiesLauncher , STRING ) ) . containsExactly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; PropertiesLauncher org.springframework.boot.loader.PropertiesLauncher = new PropertiesLauncher ( ) ; assertThat ( org.springframework.boot.loader.PropertiesLauncher . getMainClass ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { int int = NUMBER ; boolean boolean = false ; while ( ! boolean && int < NUMBER ) { int ++ ; java.lang.Thread . void ( NUMBER ) ; boolean = this . org.springframework.boot.loader.InternalOutputCapture . toString ( ) . contains ( java.lang.String ) ; } assertThat ( boolean ) . as ( STRING + java.lang.String + STRING ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { super( new java.net.URL [ NUMBER ] , java.lang.ClassLoader ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return super. java.lang.Class<?> ( java.lang.String ) ; }  <METHOD_END>
