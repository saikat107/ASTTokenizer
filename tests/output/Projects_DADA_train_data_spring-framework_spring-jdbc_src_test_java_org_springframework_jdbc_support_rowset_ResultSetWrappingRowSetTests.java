<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet = new ResultSetWrappingSqlRowSet ( java.sql.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , java.math.BigDecimal . java.math.BigDecimal ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , java.math.BigDecimal . java.math.BigDecimal ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , new java.sql.Timestamp ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , new java.sql.Timestamp ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , new java.sql.Date ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , new java.sql.Date ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , new java.sql.Time ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , new java.sql.Time ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , new java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , NUMBER , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = java.sql.ResultSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { int .class } ) ; java.lang.reflect.Method java.lang.reflect.Method = ResultSetWrappingSqlRowSet .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] { java.lang.String .class } ) ; void ( java.lang.reflect.Method , java.lang.reflect.Method , STRING , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws java.lang.Exception { if ( java.lang.Object instanceof java.lang.String ) { given ( java.sql.ResultSet . int ( ( java.lang.String ) java.lang.Object ) ) . willReturn ( NUMBER ) ; given ( java.lang.reflect.Method . java.lang.Object ( java.sql.ResultSet , NUMBER ) ) . willReturn ( java.lang.Object ) . willThrow ( new java.sql.SQLException ( STRING ) ) ; } else { given ( java.lang.reflect.Method . java.lang.Object ( java.sql.ResultSet , java.lang.Object ) ) . willReturn ( java.lang.Object ) . willThrow ( new java.sql.SQLException ( STRING ) ) ; } java.lang.reflect.Method . java.lang.Object ( org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet , java.lang.Object ) ; try { java.lang.reflect.Method . java.lang.Object ( org.springframework.jdbc.support.rowset.ResultSetWrappingSqlRowSet , java.lang.Object ) ; fail ( STRING ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { assertEquals ( InvalidResultSetAccessException .class , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; } }  <METHOD_END>
