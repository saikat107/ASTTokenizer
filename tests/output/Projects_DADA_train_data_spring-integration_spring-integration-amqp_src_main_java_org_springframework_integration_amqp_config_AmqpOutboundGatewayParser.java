<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.amqp.config.BeanDefinitionBuilder org.springframework.integration.amqp.config.BeanDefinitionBuilder ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.integration.amqp.config.ParserContext ) { BeanDefinitionBuilder org.springframework.integration.amqp.config.BeanDefinitionBuilder ; boolean boolean = org.w3c.dom.Element . java.lang.String ( ) . boolean ( STRING ) ; if ( boolean ) { org.springframework.integration.amqp.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( AsyncAmqpOutboundGateway .class ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING ; } org.springframework.integration.amqp.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; } else { org.springframework.integration.amqp.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( AmqpOutboundEndpoint .class ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING ; } org.springframework.integration.amqp.config.BeanDefinitionBuilder . addConstructorArgReference ( java.lang.String ) ; org.springframework.integration.amqp.config.BeanDefinitionBuilder . addPropertyValue ( STRING , true ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , true ) ; BeanDefinition org.springframework.integration.amqp.config.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefIfAttributeDefined ( STRING , org.w3c.dom.Element ) ; if ( org.springframework.integration.amqp.config.BeanDefinition != null ) { org.springframework.integration.amqp.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.amqp.config.BeanDefinition ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , true ) ; BeanDefinition org.springframework.integration.amqp.config.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefIfAttributeDefined ( STRING , org.w3c.dom.Element ) ; if ( org.springframework.integration.amqp.config.BeanDefinition != null ) { org.springframework.integration.amqp.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.amqp.config.BeanDefinition ) ; } IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; BeanDefinition org.springframework.integration.amqp.config.BeanDefinition = IntegrationNamespaceUtils . createExpressionDefIfAttributeDefined ( STRING , org.w3c.dom.Element ) ; if ( org.springframework.integration.amqp.config.BeanDefinition != null ) { org.springframework.integration.amqp.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.amqp.config.BeanDefinition ) ; } IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; IntegrationNamespaceUtils . setReferenceIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING ) ; BeanDefinitionBuilder org.springframework.integration.amqp.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( DefaultAmqpHeaderMapper .class ) ; org.springframework.integration.amqp.config.BeanDefinitionBuilder . setFactoryMethod ( STRING ) ; IntegrationNamespaceUtils . configureHeaderMapper ( org.w3c.dom.Element , org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.springframework.integration.amqp.config.ParserContext , org.springframework.integration.amqp.config.BeanDefinitionBuilder , null ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; IntegrationNamespaceUtils . setValueIfAttributeDefined ( org.springframework.integration.amqp.config.BeanDefinitionBuilder , org.w3c.dom.Element , STRING , STRING ) ; return org.springframework.integration.amqp.config.BeanDefinitionBuilder ; }  <METHOD_END>
