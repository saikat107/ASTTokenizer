<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer org.springframework.integration.websocket.ServerWebSocketContainer ( HandshakeHandler org.springframework.integration.websocket.HandshakeHandler ) { this . org.springframework.integration.websocket.HandshakeHandler = org.springframework.integration.websocket.HandshakeHandler ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer org.springframework.integration.websocket.ServerWebSocketContainer ( HandshakeInterceptor ... org.springframework.integration.websocket.HandshakeInterceptor[] ) { Assert . notNull ( org.springframework.integration.websocket.HandshakeInterceptor[] , STRING ) ; Assert . noNullElements ( org.springframework.integration.websocket.HandshakeInterceptor[] , STRING ) ; this . org.springframework.integration.websocket.HandshakeInterceptor[] = java.util.Arrays . java.lang.Object[] ( org.springframework.integration.websocket.HandshakeInterceptor[] , interceptors . length ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer org.springframework.integration.websocket.ServerWebSocketContainer ( WebSocketHandlerDecoratorFactory ... org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] ) { Assert . notNull ( org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] , STRING ) ; Assert . noNullElements ( org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] , STRING ) ; this . org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] = java.util.Arrays . java.lang.Object[] ( org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] , factories . length ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer org.springframework.integration.websocket.ServerWebSocketContainer ( java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer org.springframework.integration.websocket.ServerWebSocketContainer ( org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ... org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions[] ) { if ( ObjectUtils . isEmpty ( org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions[] ) ) { this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions = new org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( ) ; } else { Assert . state ( org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions[] . int == NUMBER , STRING ) ; this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions = org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions[] [ NUMBER ] ; } return this ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ) { this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions = org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketHandlerRegistry org.springframework.integration.websocket.WebSocketHandlerRegistry ) { WebSocketHandler org.springframework.integration.websocket.WebSocketHandler = this . webSocketHandler ; if ( this . org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] != null ) { for ( WebSocketHandlerDecoratorFactory org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory : this . org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory[] ) { org.springframework.integration.websocket.WebSocketHandler = org.springframework.integration.websocket.WebSocketHandlerDecoratorFactory . decorate ( org.springframework.integration.websocket.WebSocketHandler ) ; } } WebSocketHandlerRegistration org.springframework.integration.websocket.WebSocketHandlerRegistration = org.springframework.integration.websocket.WebSocketHandlerRegistry . addHandler ( org.springframework.integration.websocket.WebSocketHandler , this . java.lang.String[] ) . setHandshakeHandler ( this . org.springframework.integration.websocket.HandshakeHandler ) . addInterceptors ( this . org.springframework.integration.websocket.HandshakeInterceptor[] ) . setAllowedOrigins ( this . java.lang.String[] ) ; if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions != null ) { SockJsServiceRegistration org.springframework.integration.websocket.SockJsServiceRegistration = org.springframework.integration.websocket.WebSocketHandlerRegistration . withSockJS ( ) ; if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setWebSocketEnabled ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.String != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setClientLibraryUrl ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.String ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setDisconnectDelay ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setHeartbeatTime ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Integer != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setHttpMessageCacheSize ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Integer ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setHeartbeatTime ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Long ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setSessionCookieNeeded ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Integer != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setStreamBytesLimit ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Integer ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.TransportHandler[] != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setTransportHandlers ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.TransportHandler[] ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.TaskScheduler != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setTaskScheduler ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.TaskScheduler ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.SockJsMessageCodec != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setMessageCodec ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . org.springframework.integration.websocket.SockJsMessageCodec ) ; } if ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean != null ) { org.springframework.integration.websocket.SockJsServiceRegistration . setSupressCors ( this . org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions . java.lang.Boolean ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( TaskScheduler org.springframework.integration.websocket.TaskScheduler ) { this . org.springframework.integration.websocket.TaskScheduler = org.springframework.integration.websocket.TaskScheduler ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( int int ) { this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( int int ) { this . java.lang.Integer = int ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( TransportHandler ... org.springframework.integration.websocket.TransportHandler[] ) { this . org.springframework.integration.websocket.TransportHandler[] = org.springframework.integration.websocket.TransportHandler[] ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( SockJsMessageCodec org.springframework.integration.websocket.SockJsMessageCodec ) { this . org.springframework.integration.websocket.SockJsMessageCodec = org.springframework.integration.websocket.SockJsMessageCodec ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions org.springframework.integration.websocket.ServerWebSocketContainer.SockJsServiceOptions ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
