<METHOD_START> @ Before public void void ( ) { org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.DirectChannel ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.config.annotation.QueueChannel ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithBooleanPrimitive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithin ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithinTwice ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithout ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertFalse ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithin ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithinTwice ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , java.util.Arrays . java.util.List<org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice> ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithin ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice ( ) ; org.springframework.integration.config.annotation.TestApplicationContext . registerBean ( STRING , new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice [] { org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice } ) ; void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithAdviceDiscardWithinTwice ( ) ) ; EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.TestApplicationContext . getBean ( STRING ) ; java.util.List<?> < ? > java.util.List<?> = TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.util.List .class ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertSame ( org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestAdvice , java.util.List<> . get ( NUMBER ) ) ; assertTrue ( TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithBooleanWrapperClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithStringReturnType ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.integration.config.annotation.FilterAnnotationPostProcessorTests.TestFilterWithVoidReturnType ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object ) { org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( java.lang.Object , STRING ) ; org.springframework.integration.config.annotation.TestApplicationContext . refresh ( ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.annotation.Message<?> = org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.annotation.Message<> ) ; org.springframework.integration.config.annotation.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNull ( org.springframework.integration.config.annotation.QueueChannel . receive ( NUMBER ) ) ; org.springframework.integration.config.annotation.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING ) public boolean boolean ( java.lang.String java.lang.String ) { return ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING , adviceChain = STRING ) public boolean boolean ( java.lang.String java.lang.String ) { return ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING , adviceChain = { STRING , STRING } ) public boolean boolean ( java.lang.String java.lang.String ) { return ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING , adviceChain = STRING , discardWithinAdvice = STRING ) public boolean boolean ( java.lang.String java.lang.String ) { return ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING ) public java.lang.Boolean java.lang.Boolean ( java.lang.String java.lang.String ) { return ! java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING ) public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Filter ( inputChannel = STRING , outputChannel = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.config.annotation.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.config.annotation.Message<?> ) throws java.lang.Exception { return org.springframework.integration.config.annotation.ExecutionCallback . execute ( ) ; }  <METHOD_END>
