<METHOD_START> public void void ( CacheOperationSource ... org.springframework.cache.interceptor.CacheOperationSource[] ) { Assert . notEmpty ( org.springframework.cache.interceptor.CacheOperationSource[] , STRING ) ; this . org.springframework.cache.interceptor.CacheOperationSource = ( cacheOperationSources . length > NUMBER ? new CompositeCacheOperationSource ( org.springframework.cache.interceptor.CacheOperationSource[] ) : org.springframework.cache.interceptor.CacheOperationSource[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.interceptor.CacheOperationSource org.springframework.cache.interceptor.CacheOperationSource ( ) { return this . org.springframework.cache.interceptor.CacheOperationSource ; }  <METHOD_END>
<METHOD_START> public void void ( KeyGenerator org.springframework.cache.interceptor.KeyGenerator ) { this . org.springframework.cache.interceptor.KeyGenerator = org.springframework.cache.interceptor.KeyGenerator ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.interceptor.KeyGenerator org.springframework.cache.interceptor.KeyGenerator ( ) { return this . org.springframework.cache.interceptor.KeyGenerator ; }  <METHOD_END>
<METHOD_START> public void void ( CacheManager org.springframework.cache.interceptor.CacheManager ) { this . org.springframework.cache.interceptor.CacheResolver = new SimpleCacheResolver ( org.springframework.cache.interceptor.CacheManager ) ; }  <METHOD_END>
<METHOD_START> public void void ( CacheResolver org.springframework.cache.interceptor.CacheResolver ) { Assert . notNull ( org.springframework.cache.interceptor.CacheResolver , STRING ) ; this . org.springframework.cache.interceptor.CacheResolver = org.springframework.cache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.cache.interceptor.CacheResolver org.springframework.cache.interceptor.CacheResolver ( ) { return this . org.springframework.cache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.cache.interceptor.BeanFactory ) { this . org.springframework.cache.interceptor.BeanFactory = org.springframework.cache.interceptor.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( org.springframework.cache.interceptor.CacheOperationSource ( ) != null , STRING + STRING ) ; Assert . state ( getErrorHandler ( ) != null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.cache.interceptor.CacheResolver ( ) == null ) { try { void ( this . org.springframework.cache.interceptor.BeanFactory . getBean ( CacheManager .class ) ) ; } catch ( NoUniqueBeanDefinitionException org.springframework.cache.interceptor.NoUniqueBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING + STRING + STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.cache.interceptor.NoSuchBeanDefinitionException ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } } this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; return ClassUtils . getQualifiedMethodName ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( CacheOperationInvocationContext < CacheOperation > org.springframework.cache.interceptor.CacheOperationInvocationContext<org.springframework.cache.interceptor.CacheOperation> , CacheResolver org.springframework.cache.interceptor.CacheResolver ) { java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> = org.springframework.cache.interceptor.CacheResolver . resolveCaches ( org.springframework.cache.interceptor.CacheOperationInvocationContext<org.springframework.cache.interceptor.CacheOperation> ) ; if ( java.util.Collection<> . boolean ( ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.cache.interceptor.CacheOperationInvocationContext<org.springframework.cache.interceptor.CacheOperation> . getOperation ( ) + STRING + org.springframework.cache.interceptor.CacheResolver + STRING ) ; } return java.util.Collection<> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ( CacheOperation org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ( org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method , java.lang.Class<> ) ; return new org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata , java.lang.Object[] , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ( CacheOperation org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey = new org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey ( org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method , java.lang.Class<> ) ; org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata = this . java.util.Map<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata> . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey ) ; if ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata == null ) { KeyGenerator org.springframework.cache.interceptor.KeyGenerator ; if ( StringUtils . hasText ( org.springframework.cache.interceptor.CacheOperation . getKeyGenerator ( ) ) ) { org.springframework.cache.interceptor.KeyGenerator = java.lang.Object ( org.springframework.cache.interceptor.CacheOperation . getKeyGenerator ( ) , KeyGenerator .class ) ; } else { org.springframework.cache.interceptor.KeyGenerator = org.springframework.cache.interceptor.KeyGenerator ( ) ; } CacheResolver org.springframework.cache.interceptor.CacheResolver ; if ( StringUtils . hasText ( org.springframework.cache.interceptor.CacheOperation . getCacheResolver ( ) ) ) { org.springframework.cache.interceptor.CacheResolver = java.lang.Object ( org.springframework.cache.interceptor.CacheOperation . getCacheResolver ( ) , CacheResolver .class ) ; } else if ( StringUtils . hasText ( org.springframework.cache.interceptor.CacheOperation . getCacheManager ( ) ) ) { CacheManager org.springframework.cache.interceptor.CacheManager = java.lang.Object ( org.springframework.cache.interceptor.CacheOperation . getCacheManager ( ) , CacheManager .class ) ; org.springframework.cache.interceptor.CacheResolver = new SimpleCacheResolver ( org.springframework.cache.interceptor.CacheManager ) ; } else { org.springframework.cache.interceptor.CacheResolver = org.springframework.cache.interceptor.CacheResolver ( ) ; } org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata = new org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ( org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method , java.lang.Class<> , org.springframework.cache.interceptor.KeyGenerator , org.springframework.cache.interceptor.CacheResolver ) ; this . java.util.Map<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata> . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey , org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ) ; } return org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ; }  <METHOD_END>
<METHOD_START> protected < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { return BeanFactoryAnnotationUtils . qualifiedBeanOfType ( this . org.springframework.cache.interceptor.BeanFactory , java.lang.Class<T> , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . java.util.Map<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata> . void ( ) ; this . org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . clear ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( CacheOperationInvoker org.springframework.cache.interceptor.CacheOperationInvoker , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) { if ( this . boolean ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.Object ) ; java.util.Collection<org.springframework.cache.interceptor.CacheOperation> < CacheOperation > java.util.Collection<org.springframework.cache.interceptor.CacheOperation> = org.springframework.cache.interceptor.CacheOperationSource ( ) . getCacheOperations ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> ) ) { return java.lang.Object ( org.springframework.cache.interceptor.CacheOperationInvoker , java.lang.reflect.Method , new org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts ( java.util.Collection<org.springframework.cache.interceptor.CacheOperation> , java.lang.reflect.Method , java.lang.Object[] , java.lang.Object , java.lang.Class<> ) ) ; } } return org.springframework.cache.interceptor.CacheOperationInvoker . invoke ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( CacheOperationInvoker org.springframework.cache.interceptor.CacheOperationInvoker ) { return org.springframework.cache.interceptor.CacheOperationInvoker . invoke ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = AopProxyUtils . ultimateTargetClass ( java.lang.Object ) ; if ( java.lang.Class<> == null && java.lang.Object != null ) { java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final CacheOperationInvoker org.springframework.cache.interceptor.CacheOperationInvoker , java.lang.reflect.Method java.lang.reflect.Method , org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts ) { if ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . boolean ( ) ) { org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CacheableOperation .class ) . iterator ( ) . next ( ) ; if ( boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , CacheOperationExpressionEvaluator . NO_RESULT ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , CacheOperationExpressionEvaluator . NO_RESULT ) ; Cache org.springframework.cache.interceptor.Cache = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) . java.util.Iterator<> ( ) . next ( ) ; try { return java.lang.Object ( java.lang.reflect.Method , org.springframework.cache.interceptor.Cache . get ( java.lang.Object , new java.util.concurrent.Callable<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Object ( java.lang.Object ( org.springframework.cache.interceptor.CacheOperationInvoker ) ) ; } } ) ) ; } catch ( Cache . Cache Cache.ValueRetrievalException ) { throw ( CacheOperationInvoker . CacheOperationInvoker ) Cache.ValueRetrievalException . getCause ( ) ; } } else { return java.lang.Object ( org.springframework.cache.interceptor.CacheOperationInvoker ) ; } } void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CacheEvictOperation .class ) , true , CacheOperationExpressionEvaluator . NO_RESULT ) ; Cache . Cache Cache.ValueWrapper = Cache.ValueWrapper ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CacheableOperation .class ) ) ; java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> < org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest > java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> = new java.util.LinkedList<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> <> ( ) ; if ( Cache.ValueWrapper == null ) { void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CacheableOperation .class ) , CacheOperationExpressionEvaluator . NO_RESULT , java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> ) ; } java.lang.Object java.lang.Object ; java.lang.Object java.lang.Object ; if ( Cache.ValueWrapper != null && java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> . boolean ( ) && ! boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts ) ) { java.lang.Object = Cache.ValueWrapper . get ( ) ; java.lang.Object = java.lang.Object ( java.lang.reflect.Method , java.lang.Object ) ; } else { java.lang.Object = java.lang.Object ( org.springframework.cache.interceptor.CacheOperationInvoker ) ; java.lang.Object = java.lang.Object ( java.lang.Object ) ; } void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CachePutOperation .class ) , java.lang.Object , java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> ) ; for ( org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest : java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> ) { org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest . void ( java.lang.Object ) ; } void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CacheEvictOperation .class ) , false , java.lang.Object ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.Object ( java.lang.Object ( org.springframework.cache.interceptor.CacheOperationInvoker ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object java.lang.Object ) { if ( java.lang.reflect.Method . java.lang.Class<?> ( ) == java.util.Optional .class && ( java.lang.Object == null || java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) != java.util.Optional .class ) ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { return ObjectUtils . unwrapOptional ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts ) { java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts . java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( CachePutOperation .class ) ; java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> = new java.util.ArrayList<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> <> ( ) ; for ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext : java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { try { if ( ! org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . boolean ( CacheOperationExpressionEvaluator . RESULT_UNAVAILABLE ) ) { java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ) ; } } catch ( VariableNotAvailableException org.springframework.cache.interceptor.VariableNotAvailableException ) { } } return ( java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . int ( ) != java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> , boolean boolean , java.lang.Object java.lang.Object ) { for ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext : java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { CacheEvictOperation org.springframework.cache.interceptor.CacheEvictOperation = ( CacheEvictOperation ) org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ; if ( boolean == org.springframework.cache.interceptor.CacheEvictOperation . isBeforeInvocation ( ) && boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ) { void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , org.springframework.cache.interceptor.CacheEvictOperation , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , CacheEvictOperation org.springframework.cache.interceptor.CacheEvictOperation , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = null ; for ( Cache org.springframework.cache.interceptor.Cache : org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) ) { if ( org.springframework.cache.interceptor.CacheEvictOperation . isCacheWide ( ) ) { void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , org.springframework.cache.interceptor.CacheEvictOperation , null ) ; doClear ( org.springframework.cache.interceptor.Cache ) ; } else { if ( java.lang.Object == null ) { java.lang.Object = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.lang.Object ( java.lang.Object ) ; } void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , org.springframework.cache.interceptor.CacheEvictOperation , java.lang.Object ) ; doEvict ( org.springframework.cache.interceptor.Cache , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , CacheEvictOperation org.springframework.cache.interceptor.CacheEvictOperation , java.lang.Object java.lang.Object ) { if ( org.springframework.cache.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.cache.interceptor.Log . trace ( STRING + ( java.lang.Object != null ? STRING + java.lang.Object + STRING : STRING ) + STRING + org.springframework.cache.interceptor.CacheEvictOperation + STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> private Cache . Cache.ValueWrapper Cache.ValueWrapper ( java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { java.lang.Object java.lang.Object = CacheOperationExpressionEvaluator . NO_RESULT ; for ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext : java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { if ( boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ; Cache . Cache Cache.ValueWrapper = Cache.ValueWrapper ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ; if ( Cache.ValueWrapper != null ) { return Cache.ValueWrapper ; } else { if ( org.springframework.cache.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.cache.interceptor.Log . trace ( STRING + java.lang.Object + STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<java.lang.String> ( ) ) ; } } } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> , java.lang.Object java.lang.Object , java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> < org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> ) { for ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext : java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { if ( boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ; java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest> . boolean ( new org.springframework.cache.interceptor.CacheAspectSupport.CachePutRequest ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object ) ) ; } } }  <METHOD_END>
<METHOD_START> private Cache . Cache.ValueWrapper Cache.ValueWrapper ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object java.lang.Object ) { for ( Cache org.springframework.cache.interceptor.Cache : org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) ) { Cache . Cache Cache.ValueWrapper = doGet ( org.springframework.cache.interceptor.Cache , java.lang.Object ) ; if ( Cache.ValueWrapper != null ) { if ( org.springframework.cache.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.cache.interceptor.Log . trace ( STRING + java.lang.Object + STRING + org.springframework.cache.interceptor.Cache . getName ( ) + STRING ) ; } return Cache.ValueWrapper ; } } return null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object java.lang.Object ) { boolean boolean = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . boolean ( java.lang.Object ) ; if ( ! boolean && org.springframework.cache.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.cache.interceptor.Log . trace ( STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method + STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ) ; } return boolean ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.lang.Object ( java.lang.Object ) ; if ( java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING + STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ) ; } if ( org.springframework.cache.interceptor.Log . isTraceEnabled ( ) ) { org.springframework.cache.interceptor.Log . trace ( STRING + java.lang.Object + STRING + org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<? extends org.springframework.cache.interceptor.CacheOperation> < ? extends CacheOperation > java.util.Collection<? extends org.springframework.cache.interceptor.CacheOperation> , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { for ( CacheOperation org.springframework.cache.interceptor.CacheOperation : java.util.Collection<> ) { this . org.springframework.cache.interceptor.MultiValueMap<java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . add ( org.springframework.cache.interceptor.CacheOperation . getClass ( ) , org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ( org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method , java.lang.Object[] , java.lang.Object , java.lang.Class<> ) ) ; } this . boolean = boolean ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation> < ? extends CacheOperation > java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation> ) { java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> = this . org.springframework.cache.interceptor.MultiValueMap<java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . get ( java.lang.Class<> ) ; return ( java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> != null ? java.util.Collection<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> : java.util.Collections . java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> < org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext > java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> = this . org.springframework.cache.interceptor.MultiValueMap<java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . get ( CacheableOperation .class ) ; if ( java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> == null ) { return false ; } boolean boolean = false ; for ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext : java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ) { if ( ( ( CacheableOperation ) org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheOperation ( ) ) . isSync ( ) ) { boolean = true ; break; } } if ( boolean ) { if ( this . org.springframework.cache.interceptor.MultiValueMap<java.lang.Class<? extends org.springframework.cache.interceptor.CacheOperation>,org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . size ( ) > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method + STRING ) ; } if ( java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . int ( ) > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method + STRING ) ; } org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext = java.util.List<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> . java.util.Iterator<org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext> ( ) . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ( ) ; CacheableOperation org.springframework.cache.interceptor.CacheableOperation = ( CacheableOperation ) org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . org.springframework.cache.interceptor.CacheOperation ( ) ; if ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) . int ( ) > NUMBER ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.cache.interceptor.CacheableOperation + STRING ) ; } if ( StringUtils . hasText ( org.springframework.cache.interceptor.CacheableOperation . getUnless ( ) ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.cache.interceptor.CacheableOperation + STRING ) ; } return true ; } return false ; }  <METHOD_END>
<METHOD_START> public void ( CacheOperation org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , KeyGenerator org.springframework.cache.interceptor.KeyGenerator , CacheResolver org.springframework.cache.interceptor.CacheResolver ) { this . org.springframework.cache.interceptor.CacheOperation = org.springframework.cache.interceptor.CacheOperation ; this . java.lang.reflect.Method = java.lang.reflect.Method ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.cache.interceptor.KeyGenerator = org.springframework.cache.interceptor.KeyGenerator ; this . org.springframework.cache.interceptor.CacheResolver = org.springframework.cache.interceptor.CacheResolver ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata , java.lang.Object [] java.lang.Object[] , java.lang.Object java.lang.Object ) { this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata ; this . java.lang.Object[] = java.lang.Object[] ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method , java.lang.Object[] ) ; this . java.lang.Object = java.lang.Object ; this . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> = org.springframework.cache.interceptor.CacheAspectSupport .this . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( this , org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheResolver ) ; this . java.util.Collection<java.lang.String> = java.util.Collection<java.lang.String> ( this . java.util.Collection<> ) ; this . org.springframework.cache.interceptor.AnnotatedElementKey = new AnnotatedElementKey ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method , org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.interceptor.CacheOperation org.springframework.cache.interceptor.CacheOperation ( ) { return this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return this . java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) { if ( ! java.lang.reflect.Method . boolean ( ) ) { return java.lang.Object[] ; } java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( java.lang.Object[] [ java.lang.Object[] . int - NUMBER ] ) ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ java.lang.Object[] . int - NUMBER + java.lang.Object[] . int ] ; java.lang.System . void ( java.lang.Object[] , NUMBER , java.lang.Object[] , NUMBER , java.lang.Object[] . int - NUMBER ) ; java.lang.System . void ( java.lang.Object[] , NUMBER , java.lang.Object[] , java.lang.Object[] . int - NUMBER , java.lang.Object[] . int ) ; return java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { if ( StringUtils . hasText ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation . getCondition ( ) ) ) { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object ) ; return org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . condition ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation . getCondition ( ) , this . org.springframework.cache.interceptor.AnnotatedElementKey , org.springframework.cache.interceptor.EvaluationContext ) ; } return true ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = STRING ; if ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation instanceof CacheableOperation ) { java.lang.String = ( ( CacheableOperation ) this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ) . getUnless ( ) ; } else if ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation instanceof CachePutOperation ) { java.lang.String = ( ( CachePutOperation ) this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation ) . getUnless ( ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object ) ; return ! org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . unless ( java.lang.String , this . org.springframework.cache.interceptor.AnnotatedElementKey , org.springframework.cache.interceptor.EvaluationContext ) ; } return true ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( StringUtils . hasText ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation . getKey ( ) ) ) { EvaluationContext org.springframework.cache.interceptor.EvaluationContext = org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object ) ; return org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . key ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.CacheOperation . getKey ( ) , this . org.springframework.cache.interceptor.AnnotatedElementKey , org.springframework.cache.interceptor.EvaluationContext ) ; } return this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . org.springframework.cache.interceptor.KeyGenerator . generate ( this . java.lang.Object , this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method , this . java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.interceptor.EvaluationContext org.springframework.cache.interceptor.EvaluationContext ( java.lang.Object java.lang.Object ) { return org.springframework.cache.interceptor.CacheOperationExpressionEvaluator . createEvaluationContext ( this . java.util.Collection<> , this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.reflect.Method , this . java.lang.Object[] , this . java.lang.Object , this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationMetadata . java.lang.Class<> , java.lang.Object , org.springframework.cache.interceptor.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) { return this . java.util.Collection<> ; }  <METHOD_END>
<METHOD_START> protected java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( java.util.Collection<? extends org.springframework.cache.interceptor.Cache> < ? extends Cache > java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ) { java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Cache org.springframework.cache.interceptor.Cache : java.util.Collection<> ) { java.util.Collection<java.lang.String> . boolean ( org.springframework.cache.interceptor.Cache . getName ( ) ) ; } return java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext , java.lang.Object java.lang.Object ) { this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext = org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { if ( this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . boolean ( java.lang.Object ) ) { for ( Cache org.springframework.cache.interceptor.Cache : this . org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext . java.util.Collection<? extends org.springframework.cache.interceptor.Cache> ( ) ) { doPut ( org.springframework.cache.interceptor.Cache , this . java.lang.Object , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void ( CacheOperation org.springframework.cache.interceptor.CacheOperation , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { this . org.springframework.cache.interceptor.CacheOperation = org.springframework.cache.interceptor.CacheOperation ; this . org.springframework.cache.interceptor.AnnotatedElementKey = new AnnotatedElementKey ( java.lang.reflect.Method , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey ) ) { return false ; } org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey = ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey ) java.lang.Object ; return ( this . org.springframework.cache.interceptor.CacheOperation . equals ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey . org.springframework.cache.interceptor.CacheOperation ) && this . org.springframework.cache.interceptor.AnnotatedElementKey . equals ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey . org.springframework.cache.interceptor.AnnotatedElementKey ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ( this . org.springframework.cache.interceptor.CacheOperation . hashCode ( ) * NUMBER + this . org.springframework.cache.interceptor.AnnotatedElementKey . hashCode ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . org.springframework.cache.interceptor.CacheOperation + STRING + this . org.springframework.cache.interceptor.AnnotatedElementKey ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey ) { int int = this . org.springframework.cache.interceptor.CacheOperation . getName ( ) . compareTo ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey . org.springframework.cache.interceptor.CacheOperation . getName ( ) ) ; if ( int == NUMBER ) { int = this . org.springframework.cache.interceptor.AnnotatedElementKey . compareTo ( org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationCacheKey . org.springframework.cache.interceptor.AnnotatedElementKey ) ; } return int ; }  <METHOD_END>
