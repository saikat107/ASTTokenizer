<METHOD_START> public void ( SftpRemoteFileTemplate org.springframework.integration.sftp.outbound.SftpRemoteFileTemplate ) { super( org.springframework.integration.sftp.outbound.SftpRemoteFileTemplate ); }  <METHOD_END>
<METHOD_START> public void ( SftpRemoteFileTemplate org.springframework.integration.sftp.outbound.SftpRemoteFileTemplate , FileExistsMode org.springframework.integration.sftp.outbound.FileExistsMode ) { super( org.springframework.integration.sftp.outbound.SftpRemoteFileTemplate , org.springframework.integration.sftp.outbound.FileExistsMode ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < LsEntry > org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) { this( new SftpRemoteFileTemplate ( org.springframework.integration.sftp.outbound.SessionFactory<org.springframework.integration.sftp.outbound.LsEntry> ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RemoteFileTemplate < LsEntry > org.springframework.integration.sftp.outbound.RemoteFileTemplate<org.springframework.integration.sftp.outbound.LsEntry> , final java.lang.String java.lang.String , final int int ) { org.springframework.integration.sftp.outbound.RemoteFileTemplate<org.springframework.integration.sftp.outbound.LsEntry> . executeWithClient ( ( ClientCallbackWithoutResult < ChannelSftp > ) client -> { try { client . chmod ( chmod , path ) ; } catch ( SftpException e ) { throw new GeneralSftpException ( STRING , e ) ; } } ) ; }  <METHOD_END>
