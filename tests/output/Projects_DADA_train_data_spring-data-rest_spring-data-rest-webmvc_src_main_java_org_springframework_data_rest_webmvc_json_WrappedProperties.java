<METHOD_START> private void ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ) { this . java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.rest.webmvc.json.WrappedProperties org.springframework.data.rest.webmvc.json.WrappedProperties ( PersistentEntities org.springframework.data.rest.webmvc.json.PersistentEntities , PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> , STRING ) ; org.springframework.data.rest.webmvc.json.WrappedProperties.JacksonUnwrappedPropertiesResolver org.springframework.data.rest.webmvc.json.WrappedProperties.JacksonUnwrappedPropertiesResolver = new org.springframework.data.rest.webmvc.json.WrappedProperties.JacksonUnwrappedPropertiesResolver ( org.springframework.data.rest.webmvc.json.PersistentEntities , org.springframework.data.rest.webmvc.json.ObjectMapper ) ; return new org.springframework.data.rest.webmvc.json.WrappedProperties ( org.springframework.data.rest.webmvc.json.WrappedProperties.JacksonUnwrappedPropertiesResolver . java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.rest.webmvc.json.WrappedProperties org.springframework.data.rest.webmvc.json.WrappedProperties ( ) { return new org.springframework.data.rest.webmvc.json.WrappedProperties ( java.util.Collections . java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . containsKey ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return boolean ( java.lang.String ) ? java.util.Collections . java.util.List ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . get ( java.lang.String ) ) : java.util.Collections .< PersistentProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( java.lang.Class<> , NameTransformer . NOP , false ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( java.lang.Class<?> < ? > java.lang.Class<?> , NameTransformer org.springframework.data.rest.webmvc.json.NameTransformer , boolean boolean ) { return org.springframework.data.rest.webmvc.json.PersistentEntities . getPersistentEntity ( java.lang.Class<> ) . map ( entity -> { Map < String , List < PersistentProperty < ? > > > mapping = new HashMap < String , List < PersistentProperty < ? > > > ( ) ; for ( BeanPropertyDefinition property : getMappedProperties ( entity ) ) { Optionals . ifAllPresent ( entity . getPersistentProperty ( property . getInternalName ( ) ) , findAnnotatedMember ( property ) , ( prop , member ) -> { if ( isJsonUnwrapped ( member ) ) { mapping . putAll ( findUnwrappedPropertyPaths ( nameTransformer , member , prop ) ) ; } else if ( considerRegularProperties ) { mapping . put ( nameTransformer . transform ( property . getName ( ) ) , Collections .< PersistentProperty < ? > > singletonList ( prop ) ) ; } } ) ; } return mapping ; } ) . orElse ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( NameTransformer org.springframework.data.rest.webmvc.json.NameTransformer , AnnotatedMember org.springframework.data.rest.webmvc.json.AnnotatedMember , PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> ) { java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> = new java.util.HashMap<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > ( ) ; NameTransformer org.springframework.data.rest.webmvc.json.NameTransformer = NameTransformer . chainedTransformer ( org.springframework.data.rest.webmvc.json.NameTransformer , org.springframework.data.rest.webmvc.json.AnnotationIntrospector . findUnwrappingNameTransformer ( org.springframework.data.rest.webmvc.json.AnnotatedMember ) ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> = java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ( org.springframework.data.rest.webmvc.json.AnnotatedMember . getRawType ( ) , org.springframework.data.rest.webmvc.json.NameTransformer , true ) ; for ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> < java.lang.String , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > > java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> : java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . entrySet ( ) ) { java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> < PersistentProperty < ? > > ( ) ; java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> . add ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ; java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> . addAll ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . getValue ( ) ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . put ( java.util.Map.Entry<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> . getKey ( ) , java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>> ) ; } return java.util.Map<java.lang.String,java.util.List<org.springframework.data.rest.webmvc.json.PersistentProperty<?>>> ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> < BeanPropertyDefinition > java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> ( PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> ) { java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> < BeanPropertyDefinition > java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> = org.springframework.data.rest.webmvc.json.BeanDescription ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getType ( ) ) . findProperties ( ) ; java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> < BeanPropertyDefinition > java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> < BeanPropertyDefinition > ( java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> . size ( ) ) ; for ( BeanPropertyDefinition org.springframework.data.rest.webmvc.json.BeanPropertyDefinition : java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> ) { Optionals . ifAllPresent ( java.util.Optional<org.springframework.data.rest.webmvc.json.AnnotatedMember> ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) , org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getPersistentProperty ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getInternalName ( ) ) , ( member , prop ) -> withInternalName . add ( property ) ) ; } return java.util.List<org.springframework.data.rest.webmvc.json.BeanPropertyDefinition> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.json.BeanDescription org.springframework.data.rest.webmvc.json.BeanDescription ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.rest.webmvc.json.ClassIntrospector . forDeserialization ( org.springframework.data.rest.webmvc.json.ObjectMapper . getDeserializationConfig ( ) , org.springframework.data.rest.webmvc.json.ObjectMapper . constructType ( java.lang.Class<> ) , org.springframework.data.rest.webmvc.json.ObjectMapper . getDeserializationConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<org.springframework.data.rest.webmvc.json.AnnotatedMember> < AnnotatedMember > java.util.Optional<org.springframework.data.rest.webmvc.json.AnnotatedMember> ( BeanPropertyDefinition org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) { if ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getPrimaryMember ( ) != null ) { return java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getPrimaryMember ( ) ) ; } if ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getGetter ( ) != null ) { return java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getGetter ( ) ) ; } if ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getSetter ( ) != null ) { return java.util.Optional . java.util.Optional ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getSetter ( ) ) ; } return java.util.Optional . java.util.Optional<org.springframework.data.rest.webmvc.json.AnnotatedMember> ( ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( AnnotatedMember org.springframework.data.rest.webmvc.json.AnnotatedMember ) { return org.springframework.data.rest.webmvc.json.AnnotatedMember . hasAnnotation ( JsonUnwrapped .class ) && org.springframework.data.rest.webmvc.json.AnnotatedMember . getAnnotation ( JsonUnwrapped .class ) . enabled ( ) ; }  <METHOD_END>
