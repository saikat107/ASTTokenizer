<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , java.lang.String ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.Iterable<java.lang.String> ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( java.lang.String , STRING , java.lang.String , java.lang.String ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , Sort org.springframework.data.jpa.repository.query.Sort ) { return java.lang.String ( java.lang.String , org.springframework.data.jpa.repository.query.Sort , java.lang.String ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , Sort org.springframework.data.jpa.repository.query.Sort , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; if ( null == org.springframework.data.jpa.repository.query.Sort || ! org.springframework.data.jpa.repository.query.Sort . iterator ( ) . hasNext ( ) ) { return java.lang.String ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; if ( ! java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( java.lang.String ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( java.lang.String ) ; for ( Order org.springframework.data.jpa.repository.query.Order : org.springframework.data.jpa.repository.query.Sort ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ( java.util.Set<java.lang.String> , java.util.Set<java.lang.String> , java.lang.String , org.springframework.data.jpa.repository.query.Order ) ) . append ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) - NUMBER , java.lang.StringBuilder . int ( ) ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> , java.lang.String java.lang.String , Order org.springframework.data.jpa.repository.query.Order ) { java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.Order . getProperty ( ) ; void ( org.springframework.data.jpa.repository.query.Order ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ( org.springframework.data.jpa.repository.query.Order ) ) ; } boolean boolean = ! java.lang.String . boolean ( STRING ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String . java.lang.String ( STRING ) ) ) { boolean = false ; break; } } java.lang.String java.lang.String = boolean && StringUtils . hasText ( java.lang.String ) ? java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) : java.lang.String ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.Order . isIgnoreCase ( ) ? java.lang.String . java.lang.String ( STRING , java.lang.String ) : java.lang.String ; return java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ( org.springframework.data.jpa.repository.query.Order ) ) ; }  <METHOD_END>
<METHOD_START> static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( int ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; while ( java.util.regex.Matcher . boolean ( ) ) { java.lang.String java.lang.String = java.util.regex.Matcher . java.lang.String ( NUMBER ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Order org.springframework.data.jpa.repository.query.Order ) { return org.springframework.data.jpa.repository.query.Order . getDirection ( ) . name ( ) . toLowerCase ( java.util.Locale . java.util.Locale ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; return java.util.regex.Matcher . boolean ( ) ? java.util.regex.Matcher . java.lang.String ( NUMBER ) : null ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.String java.lang.String , java.lang.Iterable<T> < T > java.lang.Iterable<T> , EntityManager org.springframework.data.jpa.repository.query.EntityManager ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.Iterable<T> , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.EntityManager , STRING ) ; java.util.Iterator<T> < T > java.util.Iterator<T> = java.lang.Iterable<T> . java.util.Iterator<T> ( ) ; if ( ! java.util.Iterator<T> . boolean ( ) ) { return org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.String ) ; } java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; int int = NUMBER ; while ( java.util.Iterator<T> . boolean ( ) ) { java.util.Iterator<T> . T ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( STRING , java.lang.String , ++ int ) ) ; if ( java.util.Iterator<T> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } Query org.springframework.data.jpa.repository.query.Query = org.springframework.data.jpa.repository.query.EntityManager . createQuery ( java.lang.StringBuilder . java.lang.String ( ) ) ; java.util.Iterator<T> = java.lang.Iterable<T> . java.util.Iterator<T> ( ) ; int = NUMBER ; while ( java.util.Iterator<T> . boolean ( ) ) { org.springframework.data.jpa.repository.query.Query . setParameter ( ++ int , java.util.Iterator<T> . T ( ) ) ; } return org.springframework.data.jpa.repository.query.Query ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; java.lang.String java.lang.String = null ; if ( java.lang.String == null ) { java.lang.String java.lang.String = java.util.regex.Matcher . boolean ( ) ? java.util.regex.Matcher . java.lang.String ( int ) : null ; boolean boolean = java.lang.String != null && StringUtils . hasText ( java.lang.String ) && ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ; java.lang.String java.lang.String = boolean ? java.lang.String : java.lang.String ; java.lang.String = java.util.regex.Matcher . java.lang.String ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } else { java.lang.String = java.util.regex.Matcher . java.lang.String ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } return java.lang.String . java.lang.String ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Query org.springframework.data.jpa.repository.query.Query ) { Assert . notNull ( org.springframework.data.jpa.repository.query.Query , STRING ) ; for ( Parameter < ? > org.springframework.data.jpa.repository.query.Parameter<?> : org.springframework.data.jpa.repository.query.Query . getParameters ( ) ) { java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.Parameter<> . getName ( ) ; if ( java.lang.String != null && java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String ) { return StringUtils . hasText ( java.lang.String ) && java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public static java.util.List<javax.persistence.criteria.Order> < javax . javax.persistence . javax.persistence . javax.persistence > java.util.List<javax.persistence.criteria.Order> ( Sort org.springframework.data.jpa.repository.query.Sort , Root < ? > org.springframework.data.jpa.repository.query.Root<?> , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder ) { java.util.List<javax.persistence.criteria.Order> < javax . javax.persistence . javax.persistence . javax.persistence > java.util.List<javax.persistence.criteria.Order> = new java.util.ArrayList<javax.persistence.criteria.Order> < javax . javax.persistence . javax.persistence . javax.persistence > ( ) ; if ( org.springframework.data.jpa.repository.query.Sort == null ) { return java.util.List<javax.persistence.criteria.Order> ; } Assert . notNull ( org.springframework.data.jpa.repository.query.Root<> , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.CriteriaBuilder , STRING ) ; for ( org . springframework . data . org.springframework.data.domain . org.springframework.data.domain . org.springframework.data.domain org.springframework.data.domain.Sort.Order : org.springframework.data.jpa.repository.query.Sort ) { java.util.List<javax.persistence.criteria.Order> . add ( javax.persistence.criteria.Order ( org.springframework.data.domain.Sort.Order , org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.CriteriaBuilder ) ) ; } return java.util.List<javax.persistence.criteria.Order> ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; return java.util.regex.Matcher . boolean ( ) ? java.util.regex.Matcher . java.lang.String ( NUMBER ) : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static javax . javax.persistence . javax.persistence . javax.persistence.criteria.Order javax.persistence.criteria.Order ( Order org.springframework.data.jpa.repository.query.Order , Root < ? > org.springframework.data.jpa.repository.query.Root<?> , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder ) { PropertyPath org.springframework.data.jpa.repository.query.PropertyPath = PropertyPath . from ( org.springframework.data.jpa.repository.query.Order . getProperty ( ) , org.springframework.data.jpa.repository.query.Root<> . getJavaType ( ) ) ; Expression < ? > org.springframework.data.jpa.repository.query.Expression<?> = org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.PropertyPath ) ; if ( org.springframework.data.jpa.repository.query.Order . isIgnoreCase ( ) && java.lang.String .class . boolean ( org.springframework.data.jpa.repository.query.Expression<> . getJavaType ( ) ) ) { Expression < java.lang.String > org.springframework.data.jpa.repository.query.Expression<java.lang.String> = org.springframework.data.jpa.repository.query.CriteriaBuilder . lower ( ( Expression < java.lang.String > ) org.springframework.data.jpa.repository.query.Expression<> ) ; return org.springframework.data.jpa.repository.query.Order . isAscending ( ) ? org.springframework.data.jpa.repository.query.CriteriaBuilder . asc ( org.springframework.data.jpa.repository.query.Expression<java.lang.String> ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . desc ( org.springframework.data.jpa.repository.query.Expression<java.lang.String> ) ; } else { return org.springframework.data.jpa.repository.query.Order . isAscending ( ) ? org.springframework.data.jpa.repository.query.CriteriaBuilder . asc ( org.springframework.data.jpa.repository.query.Expression<> ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . desc ( org.springframework.data.jpa.repository.query.Expression<> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static < T > org.springframework.data.jpa.repository.query.Expression<T> < T > org.springframework.data.jpa.repository.query.Expression<T> ( From < ? , ? > org.springframework.data.jpa.repository.query.From<?,?> , PropertyPath org.springframework.data.jpa.repository.query.PropertyPath ) { Bindable < ? > org.springframework.data.jpa.repository.query.Bindable<?> = null ; Bindable < ? > org.springframework.data.jpa.repository.query.Bindable<?> = org.springframework.data.jpa.repository.query.From<,> . getModel ( ) ; java.lang.String java.lang.String = org.springframework.data.jpa.repository.query.PropertyPath . getSegment ( ) ; if ( org.springframework.data.jpa.repository.query.Bindable<> instanceof ManagedType ) { */ org.springframework.data.jpa.repository.query.Bindable<?> = ( Bindable < ? > ) ( ( ManagedType < ? > ) org.springframework.data.jpa.repository.query.Bindable<> ) . getAttribute ( java.lang.String ) ; } else { org.springframework.data.jpa.repository.query.Bindable<?> = org.springframework.data.jpa.repository.query.From<,> . get ( java.lang.String ) . getModel ( ) ; } if ( boolean ( org.springframework.data.jpa.repository.query.Bindable<> , org.springframework.data.jpa.repository.query.Bindable<> instanceof PluralAttribute ) && ! boolean ( org.springframework.data.jpa.repository.query.From<,> , java.lang.String ) ) { Join < ? , ? > org.springframework.data.jpa.repository.query.Join<?,?> = org.springframework.data.jpa.repository.query.Join<?,?> ( org.springframework.data.jpa.repository.query.From<,> , java.lang.String ) ; return ( Expression < T > ) ( org.springframework.data.jpa.repository.query.PropertyPath . hasNext ( ) ? org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ( org.springframework.data.jpa.repository.query.Join<,> , org.springframework.data.jpa.repository.query.PropertyPath . next ( ) ) : org.springframework.data.jpa.repository.query.Join<,> ) ; } else { Path < java.lang.Object > org.springframework.data.jpa.repository.query.Path<java.lang.Object> = org.springframework.data.jpa.repository.query.From<,> . get ( java.lang.String ) ; return ( Expression < T > ) ( org.springframework.data.jpa.repository.query.PropertyPath . hasNext ( ) ? org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ( org.springframework.data.jpa.repository.query.Path<java.lang.Object> , org.springframework.data.jpa.repository.query.PropertyPath . next ( ) ) : org.springframework.data.jpa.repository.query.Path<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( Bindable < ? > org.springframework.data.jpa.repository.query.Bindable<?> , boolean boolean ) { if ( org.springframework.data.jpa.repository.query.Bindable<> == null && boolean ) { return true ; } if ( ! ( org.springframework.data.jpa.repository.query.Bindable<> instanceof Attribute ) ) { return false ; } Attribute < ? , ? > org.springframework.data.jpa.repository.query.Attribute<?,?> = ( Attribute < ? , ? > ) org.springframework.data.jpa.repository.query.Bindable<> ; if ( ! java.util.Map<org.springframework.data.jpa.repository.query.PersistentAttributeType,java.lang.Class<? extends java.lang.annotation.Annotation>> . containsKey ( org.springframework.data.jpa.repository.query.Attribute<,> . getPersistentAttributeType ( ) ) ) { return false ; } java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> = java.util.Map<org.springframework.data.jpa.repository.query.PersistentAttributeType,java.lang.Class<? extends java.lang.annotation.Annotation>> . get ( org.springframework.data.jpa.repository.query.Attribute<,> . getPersistentAttributeType ( ) ) ; if ( java.lang.Class<> == null ) { return true ; } java.lang.reflect.Member java.lang.reflect.Member = org.springframework.data.jpa.repository.query.Attribute<,> . getJavaMember ( ) ; if ( ! ( java.lang.reflect.Member instanceof java.lang.reflect.AnnotatedElement ) ) { return true ; } java.lang.annotation.Annotation java.lang.annotation.Annotation = AnnotationUtils . getAnnotation ( ( java.lang.reflect.AnnotatedElement ) java.lang.reflect.Member , java.lang.Class<> ) ; return java.lang.annotation.Annotation == null ? true : ( java.lang.Boolean ) AnnotationUtils . getValue ( java.lang.annotation.Annotation , STRING ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.jpa.repository.query.Expression<java.lang.Object> < java.lang.Object > org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ( Path < java.lang.Object > org.springframework.data.jpa.repository.query.Path<java.lang.Object> , PropertyPath org.springframework.data.jpa.repository.query.PropertyPath ) { Path < java.lang.Object > org.springframework.data.jpa.repository.query.Path<java.lang.Object> = org.springframework.data.jpa.repository.query.Path<java.lang.Object> . get ( org.springframework.data.jpa.repository.query.PropertyPath . getSegment ( ) ) ; return org.springframework.data.jpa.repository.query.PropertyPath . hasNext ( ) ? org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ( org.springframework.data.jpa.repository.query.Path<java.lang.Object> , org.springframework.data.jpa.repository.query.PropertyPath . next ( ) ) : org.springframework.data.jpa.repository.query.Path<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.query.Join<?,?> < ? , ? > org.springframework.data.jpa.repository.query.Join<?,?> ( From < ? , ? > org.springframework.data.jpa.repository.query.From<?,?> , java.lang.String java.lang.String ) { for ( Join < ? , ? > org.springframework.data.jpa.repository.query.Join<?,?> : org.springframework.data.jpa.repository.query.From<,> . getJoins ( ) ) { boolean boolean = org.springframework.data.jpa.repository.query.Join<,> . getAttribute ( ) . getName ( ) . equals ( java.lang.String ) ; if ( boolean && org.springframework.data.jpa.repository.query.Join<,> . getJoinType ( ) . equals ( JoinType . LEFT ) ) { return org.springframework.data.jpa.repository.query.Join<,> ; } } return org.springframework.data.jpa.repository.query.From<,> . join ( java.lang.String , JoinType . LEFT ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( From < ? , ? > org.springframework.data.jpa.repository.query.From<?,?> , java.lang.String java.lang.String ) { for ( Fetch < ? , ? > org.springframework.data.jpa.repository.query.Fetch<?,?> : org.springframework.data.jpa.repository.query.From<,> . getFetches ( ) ) { boolean boolean = org.springframework.data.jpa.repository.query.Fetch<,> . getAttribute ( ) . getName ( ) . equals ( java.lang.String ) ; if ( boolean && org.springframework.data.jpa.repository.query.Fetch<,> . getJoinType ( ) . equals ( JoinType . LEFT ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private static void void ( Order org.springframework.data.jpa.repository.query.Order ) { if ( org.springframework.data.jpa.repository.query.Order instanceof JpaOrder && ( ( JpaOrder ) org.springframework.data.jpa.repository.query.Order ) . isUnsafe ( ) ) { return; } if ( java.util.regex.Pattern . java.util.regex.Matcher ( org.springframework.data.jpa.repository.query.Order . getProperty ( ) ) . find ( ) ) { throw new InvalidDataAccessApiUsageException ( java.lang.String . java.lang.String ( java.lang.String , org.springframework.data.jpa.repository.query.Order ) ) ; } }  <METHOD_END>
