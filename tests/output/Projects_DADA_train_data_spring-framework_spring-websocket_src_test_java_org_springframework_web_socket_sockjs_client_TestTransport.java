<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.TransportType> < TransportType > java.util.List<org.springframework.web.socket.sockjs.client.TransportType> ( ) { return java.util.Collections . java.util.List ( TransportType . WEBSOCKET ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.client.TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest ( ) { return this . org.springframework.web.socket.sockjs.client.TransportRequest ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . org.springframework.web.socket.sockjs.client.ListenableFuture != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.socket.sockjs.client.ListenableFutureCallback<org.springframework.web.socket.sockjs.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.sockjs.client.ListenableFutureCallback<org.springframework.web.socket.sockjs.client.WebSocketSession> ( ) { ArgumentCaptor < ListenableFutureCallback > org.springframework.web.socket.sockjs.client.ArgumentCaptor<org.springframework.web.socket.sockjs.client.ListenableFutureCallback> = ArgumentCaptor . forClass ( ListenableFutureCallback .class ) ; verify ( this . org.springframework.web.socket.sockjs.client.ListenableFuture ) . addCallback ( org.springframework.web.socket.sockjs.client.ArgumentCaptor<org.springframework.web.socket.sockjs.client.ListenableFutureCallback> . capture ( ) ) ; return org.springframework.web.socket.sockjs.client.ArgumentCaptor<org.springframework.web.socket.sockjs.client.ListenableFutureCallback> . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> < WebSocketSession > org.springframework.web.socket.sockjs.client.ListenableFuture<org.springframework.web.socket.sockjs.client.WebSocketSession> ( TransportRequest org.springframework.web.socket.sockjs.client.TransportRequest , WebSocketHandler org.springframework.web.socket.sockjs.client.WebSocketHandler ) { this . org.springframework.web.socket.sockjs.client.TransportRequest = org.springframework.web.socket.sockjs.client.TransportRequest ; this . org.springframework.web.socket.sockjs.client.ListenableFuture = mock ( ListenableFuture .class ) ; return this . org.springframework.web.socket.sockjs.client.ListenableFuture ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.client.TransportType> < TransportType > java.util.List<org.springframework.web.socket.sockjs.client.TransportType> ( ) { return ( boolean ( ) ? java.util.Collections . java.util.List ( TransportType . XHR ) : java.util.Arrays . java.util.List ( TransportType . XHR_STREAMING , TransportType . XHR ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders , TextMessage org.springframework.web.socket.sockjs.client.TextMessage ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.socket.sockjs.client.HttpHeaders ) { return null ; }  <METHOD_END>
