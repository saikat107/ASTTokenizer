<METHOD_START> @ Test public void void ( ) { void ( java.lang.IllegalArgumentException .class , STRING , STRING ) ; new ExecutableMongoScript ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( java.lang.IllegalArgumentException .class , STRING , STRING ) ; new ExecutableMongoScript ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; ExecutableMongoScript org.springframework.data.mongodb.core.script.ExecutableMongoScript = new ExecutableMongoScript ( java.lang.String ) ; assertThat ( org.springframework.data.mongodb.core.script.ExecutableMongoScript . getCode ( ) , notNullValue ( ) ) ; assertThat ( org.springframework.data.mongodb.core.script.ExecutableMongoScript . getCode ( ) . toString ( ) , equalTo ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { org.springframework.data.mongodb.core.script.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.mongodb.core.script.ExpectedException . expectMessage ( java.lang.String ) ; } } }  <METHOD_END>
