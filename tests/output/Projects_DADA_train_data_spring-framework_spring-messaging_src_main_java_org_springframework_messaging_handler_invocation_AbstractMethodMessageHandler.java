<METHOD_START> public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { this . java.util.Collection<java.lang.String> . void ( ) ; if ( java.util.Collection<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { java.lang.String = java.lang.String . java.lang.String ( ) ; this . java.util.Collection<java.lang.String> . boolean ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return this . java.util.Collection<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> . clear ( ) ; if ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> != null ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> . addAll ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ( ) { return this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> . clear ( ) ; if ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> != null ) { this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> . addAll ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( ) { return this . java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ) { if ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> == null ) { this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . clear ( ) ; return; } this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ( ) { return this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . getResolvers ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) { if ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> == null ) { this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . clear ( ) ; return; } this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . addHandlers ( java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( ) { return this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . getReturnValueHandlers ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.messaging.handler.invocation.ApplicationContext ) { this . org.springframework.messaging.handler.invocation.ApplicationContext = org.springframework.messaging.handler.invocation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> public org.springframework.messaging.handler.invocation.ApplicationContext org.springframework.messaging.handler.invocation.ApplicationContext ( ) { return this . org.springframework.messaging.handler.invocation.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . getResolvers ( ) . isEmpty ( ) ) { this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite . addResolvers ( java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ( ) ) ; } if ( this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . getReturnValueHandlers ( ) . isEmpty ( ) ) { this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . addHandlers ( java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( ) ) ; } for ( java.lang.String java.lang.String : this . org.springframework.messaging.handler.invocation.ApplicationContext . getBeanNamesForType ( java.lang.Object .class ) ) { if ( ! java.lang.String . boolean ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = null ; try { java.lang.Class<?> = org.springframework.messaging.handler.invocation.ApplicationContext ( ) . getType ( java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING + java.lang.String + STRING , java.lang.Throwable ) ; } } if ( java.lang.Class<> != null && boolean ( java.lang.Class<> ) ) { void ( java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> protected abstract java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> < ? extends HandlerMethodArgumentResolver > java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolver> ( )  <METHOD_END>
<METHOD_START> protected abstract java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> < ? extends HandlerMethodReturnValueHandler > java.util.List<? extends org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandler> ( )  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected final void void ( final java.lang.Object java.lang.Object ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object instanceof java.lang.String ? this . org.springframework.messaging.handler.invocation.ApplicationContext . getType ( ( java.lang.String ) java.lang.Object ) : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; final java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Class<> ) ; java.util.Map<java.lang.reflect.Method,T> < java.lang.reflect.Method , T > java.util.Map<java.lang.reflect.Method,T> = MethodIntrospector . selectMethods ( java.lang.Class<> , new MethodIntrospector . MethodIntrospector < T > ( ) { @ Override public T inspect ( Method method ) { return getMappingForMethod ( method , userType ) ; } } ) ; if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( java.util.Map<java.lang.reflect.Method,T> . int ( ) + STRING + java.lang.Class<> + STRING + java.util.Map<java.lang.reflect.Method,T> ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.reflect.Method,T> < java.lang.reflect.Method , T > java.util.Map.Entry<java.lang.reflect.Method,T> : java.util.Map<java.lang.reflect.Method,T> . java.util.Set<java.util.Map.Entry<java.lang.reflect.Method,T>> ( ) ) { void ( java.lang.Object , java.util.Map.Entry<java.lang.reflect.Method,T> . java.lang.reflect.Method ( ) , java.util.Map.Entry<java.lang.reflect.Method,T> . T ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Override public T inspect ( Method method ) { return getMappingForMethod ( method , userType ) ; }  <METHOD_END>
<METHOD_START> protected abstract T T ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , T T ) { Assert . notNull ( T , STRING ) ; HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod = org.springframework.messaging.handler.invocation.HandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod = this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> . get ( T ) ; if ( org.springframework.messaging.handler.invocation.HandlerMethod != null && ! org.springframework.messaging.handler.invocation.HandlerMethod . equals ( org.springframework.messaging.handler.invocation.HandlerMethod ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.messaging.handler.invocation.HandlerMethod . getBean ( ) + STRING + org.springframework.messaging.handler.invocation.HandlerMethod + STRING + T + STRING + org.springframework.messaging.handler.invocation.HandlerMethod . getBean ( ) + STRING + org.springframework.messaging.handler.invocation.HandlerMethod + STRING ) ; } this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> . put ( T , org.springframework.messaging.handler.invocation.HandlerMethod ) ; if ( org.springframework.messaging.handler.invocation.Log . isInfoEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . info ( STRING + T + STRING + org.springframework.messaging.handler.invocation.HandlerMethod ) ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ( T ) ) { this . org.springframework.messaging.handler.invocation.MultiValueMap<java.lang.String,T> . add ( java.lang.String , T ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.handler.invocation.HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; org.springframework.messaging.handler.invocation.HandlerMethod = new HandlerMethod ( java.lang.String , this . org.springframework.messaging.handler.invocation.ApplicationContext . getAutowireCapableBeanFactory ( ) , java.lang.reflect.Method ) ; } else { org.springframework.messaging.handler.invocation.HandlerMethod = new HandlerMethod ( java.lang.Object , java.lang.reflect.Method ) ; } return org.springframework.messaging.handler.invocation.HandlerMethod ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( T T );  <METHOD_END>
<METHOD_START> protected void void ( MessagingAdviceBean org.springframework.messaging.handler.invocation.MessagingAdviceBean , AbstractExceptionHandlerMethodResolver org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver ) { this . java.util.Map<org.springframework.messaging.handler.invocation.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver> . put ( org.springframework.messaging.handler.invocation.MessagingAdviceBean , org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> < T , HandlerMethod > java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> ( ) { return java.util.Collections . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> ( this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> ) throws org.springframework.messaging.handler.invocation.MessagingException { java.lang.String java.lang.String = java.lang.String ( org.springframework.messaging.handler.invocation.Message<> ) ; if ( java.lang.String == null ) { return; } java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { return; } MessageHeaderAccessor org.springframework.messaging.handler.invocation.MessageHeaderAccessor = MessageHeaderAccessor . getMutableAccessor ( org.springframework.messaging.handler.invocation.Message<> ) ; org.springframework.messaging.handler.invocation.MessageHeaderAccessor . setHeader ( DestinationPatternsMessageCondition . LOOKUP_DESTINATION_HEADER , java.lang.String ) ; org.springframework.messaging.handler.invocation.MessageHeaderAccessor . setLeaveMutable ( true ) ; org.springframework.messaging.handler.invocation.Message<?> = MessageBuilder . createMessage ( org.springframework.messaging.handler.invocation.Message<> . getPayload ( ) , org.springframework.messaging.handler.invocation.MessageHeaderAccessor . getMessageHeaders ( ) ) ; if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING + org.springframework.messaging.handler.invocation.MessageHeaderAccessor . getShortLogMessage ( org.springframework.messaging.handler.invocation.Message<> . getPayload ( ) ) ) ; } void ( org.springframework.messaging.handler.invocation.Message<> , java.lang.String ) ; org.springframework.messaging.handler.invocation.MessageHeaderAccessor . setImmutable ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.String java.lang.String ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> );  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } if ( CollectionUtils . isEmpty ( this . java.util.Collection<java.lang.String> ) ) { return java.lang.String ; } for ( java.lang.String java.lang.String : this . java.util.Collection<java.lang.String> ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return java.lang.String . java.lang.String ( java.lang.String . int ( ) ) ; } } return null ; }  <METHOD_END>
<METHOD_START> protected void void ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> , java.lang.String java.lang.String ) { java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> < org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match > java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> = new java.util.ArrayList<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> < org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match > ( ) ; java.util.List<T> < T > java.util.List<T> = this . org.springframework.messaging.handler.invocation.MultiValueMap<java.lang.String,T> . get ( java.lang.String ) ; if ( java.util.List<T> != null ) { void ( java.util.List<T> , org.springframework.messaging.handler.invocation.Message<> , java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> ) ; } if ( java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . boolean ( ) ) { java.util.Set<T> < T > java.util.Set<T> = this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> . keySet ( ) ; void ( java.util.Set<T> , org.springframework.messaging.handler.invocation.Message<> , java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> ) ; } if ( java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . boolean ( ) ) { void ( this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> . keySet ( ) , java.lang.String , org.springframework.messaging.handler.invocation.Message<> ) ; return; } java.util.Comparator<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> < org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match > java.util.Comparator<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> = new org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.MatchComparator ( java.util.Comparator<T> ( org.springframework.messaging.handler.invocation.Message<> ) ) ; java.util.Collections . void ( java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> , java.util.Comparator<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> ) ; if ( org.springframework.messaging.handler.invocation.Log . isTraceEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . trace ( STRING + java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . int ( ) + STRING + java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> ) ; } org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match = java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match ( NUMBER ) ; if ( java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . int ( ) > NUMBER ) { org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match = java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match ( NUMBER ) ; if ( java.util.Comparator<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . int ( org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match , org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match ) == NUMBER ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . org.springframework.messaging.handler.invocation.HandlerMethod . getMethod ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . org.springframework.messaging.handler.invocation.HandlerMethod . getMethod ( ) ; throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING + java.lang.reflect.Method + STRING + java.lang.reflect.Method + STRING ) ; } } void ( org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . T , org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.String , org.springframework.messaging.handler.invocation.Message<> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Collection<T> < T > java.util.Collection<T> , Message < ? > org.springframework.messaging.handler.invocation.Message<?> , java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> < org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match > java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> ) { for ( T T : java.util.Collection<T> ) { T T = T ( T , org.springframework.messaging.handler.invocation.Message<> ) ; if ( T != null ) { java.util.List<org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match> . boolean ( new org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match ( T , this . java.util.Map<T,org.springframework.messaging.handler.invocation.HandlerMethod> . get ( T ) ) ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract T T ( T T , Message < ? > org.springframework.messaging.handler.invocation.Message<?> );  <METHOD_END>
<METHOD_START> protected void void ( java.util.Set<T> < T > java.util.Set<T> , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.handler.invocation.Message<?> ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.util.Comparator<T> < T > java.util.Comparator<T> ( Message < ? > org.springframework.messaging.handler.invocation.Message<?> );  <METHOD_END>
<METHOD_START> protected void void ( T T , HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.String java.lang.String , Message < ? > org.springframework.messaging.handler.invocation.Message<?> ) { if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING + org.springframework.messaging.handler.invocation.HandlerMethod . getShortLogMessage ( ) ) ; } org.springframework.messaging.handler.invocation.HandlerMethod = org.springframework.messaging.handler.invocation.HandlerMethod . createWithResolvedBean ( ) ; InvocableHandlerMethod org.springframework.messaging.handler.invocation.InvocableHandlerMethod = new InvocableHandlerMethod ( org.springframework.messaging.handler.invocation.HandlerMethod ) ; org.springframework.messaging.handler.invocation.InvocableHandlerMethod . setMessageMethodArgumentResolvers ( this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite ) ; try { java.lang.Object java.lang.Object = org.springframework.messaging.handler.invocation.InvocableHandlerMethod . invoke ( org.springframework.messaging.handler.invocation.Message<> ) ; MethodParameter org.springframework.messaging.handler.invocation.MethodParameter = org.springframework.messaging.handler.invocation.HandlerMethod . getReturnType ( ) ; if ( void .class == org.springframework.messaging.handler.invocation.MethodParameter . getParameterType ( ) ) { return; } if ( this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . isAsyncReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter ) ) { ListenableFuture < ? > org.springframework.messaging.handler.invocation.ListenableFuture<?> = this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . toListenableFuture ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter ) ; if ( org.springframework.messaging.handler.invocation.ListenableFuture<> != null ) { org.springframework.messaging.handler.invocation.ListenableFuture<> . addCallback ( new org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.ReturnValueListenableFutureCallback ( org.springframework.messaging.handler.invocation.InvocableHandlerMethod , org.springframework.messaging.handler.invocation.Message<> ) ) ; } } else { this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . handleReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter , org.springframework.messaging.handler.invocation.Message<> ) ; } } catch ( java.lang.Exception java.lang.Exception ) { void ( org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.Exception , org.springframework.messaging.handler.invocation.Message<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.messaging.handler.invocation.Log . isErrorEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . error ( STRING + org.springframework.messaging.handler.invocation.Message<> , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.Exception java.lang.Exception , Message < ? > org.springframework.messaging.handler.invocation.Message<?> ) { InvocableHandlerMethod org.springframework.messaging.handler.invocation.InvocableHandlerMethod = org.springframework.messaging.handler.invocation.InvocableHandlerMethod ( org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.Exception ) ; if ( org.springframework.messaging.handler.invocation.InvocableHandlerMethod == null ) { org.springframework.messaging.handler.invocation.Log . error ( STRING , java.lang.Exception ) ; return; } org.springframework.messaging.handler.invocation.InvocableHandlerMethod . setMessageMethodArgumentResolvers ( this . org.springframework.messaging.handler.invocation.HandlerMethodArgumentResolverComposite ) ; if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING + org.springframework.messaging.handler.invocation.InvocableHandlerMethod . getShortLogMessage ( ) ) ; } try { java.lang.Object java.lang.Object = org.springframework.messaging.handler.invocation.InvocableHandlerMethod . invoke ( org.springframework.messaging.handler.invocation.Message<> , java.lang.Exception , org.springframework.messaging.handler.invocation.HandlerMethod ) ; MethodParameter org.springframework.messaging.handler.invocation.MethodParameter = org.springframework.messaging.handler.invocation.InvocableHandlerMethod . getReturnType ( ) ; if ( void .class == org.springframework.messaging.handler.invocation.MethodParameter . getParameterType ( ) ) { return; } this . org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . handleReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter , org.springframework.messaging.handler.invocation.Message<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.messaging.handler.invocation.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.messaging.handler.invocation.InvocableHandlerMethod org.springframework.messaging.handler.invocation.InvocableHandlerMethod ( HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod , java.lang.Exception java.lang.Exception ) { if ( org.springframework.messaging.handler.invocation.Log . isDebugEnabled ( ) ) { org.springframework.messaging.handler.invocation.Log . debug ( STRING + java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) . java.lang.String ( ) ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.messaging.handler.invocation.HandlerMethod . getBeanType ( ) ; AbstractExceptionHandlerMethodResolver org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver = this . java.util.Map<java.lang.Class<?>,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver> . get ( java.lang.Class<> ) ; if ( org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver == null ) { org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver = org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver ( java.lang.Class<> ) ; this . java.util.Map<java.lang.Class<?>,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver> . put ( java.lang.Class<> , org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver ) ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ; if ( java.lang.reflect.Method != null ) { return new InvocableHandlerMethod ( org.springframework.messaging.handler.invocation.HandlerMethod . getBean ( ) , java.lang.reflect.Method ) ; } for ( MessagingAdviceBean org.springframework.messaging.handler.invocation.MessagingAdviceBean : this . java.util.Map<org.springframework.messaging.handler.invocation.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver> . keySet ( ) ) { if ( org.springframework.messaging.handler.invocation.MessagingAdviceBean . isApplicableToBeanType ( java.lang.Class<> ) ) { org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver = this . java.util.Map<org.springframework.messaging.handler.invocation.MessagingAdviceBean,org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver> . get ( org.springframework.messaging.handler.invocation.MessagingAdviceBean ) ; java.lang.reflect.Method = org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver . resolveMethod ( java.lang.Exception ) ; if ( java.lang.reflect.Method != null ) { return new InvocableHandlerMethod ( org.springframework.messaging.handler.invocation.MessagingAdviceBean . resolveBean ( ) , java.lang.reflect.Method ) ; } } } return null ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver org.springframework.messaging.handler.invocation.AbstractExceptionHandlerMethodResolver ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler> ( ) . java.lang.String ( ) + STRING + java.util.Collection<java.lang.String> ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public void ( T T , HandlerMethod org.springframework.messaging.handler.invocation.HandlerMethod ) { this . T = T ; this . org.springframework.messaging.handler.invocation.HandlerMethod = org.springframework.messaging.handler.invocation.HandlerMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . T . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Comparator<T> < T > java.util.Comparator<T> ) { this . java.util.Comparator<T> = java.util.Comparator<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match , org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match ) { return this . java.util.Comparator<T> . int ( org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . T , org.springframework.messaging.handler.invocation.AbstractMethodMessageHandler<T>.Match . T ) ; }  <METHOD_END>
<METHOD_START> public void ( InvocableHandlerMethod org.springframework.messaging.handler.invocation.InvocableHandlerMethod , Message < ? > org.springframework.messaging.handler.invocation.Message<?> ) { this . org.springframework.messaging.handler.invocation.InvocableHandlerMethod = org.springframework.messaging.handler.invocation.InvocableHandlerMethod ; this . org.springframework.messaging.handler.invocation.Message<?> = org.springframework.messaging.handler.invocation.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { try { MethodParameter org.springframework.messaging.handler.invocation.MethodParameter = this . org.springframework.messaging.handler.invocation.InvocableHandlerMethod . getAsyncReturnValueType ( java.lang.Object ) ; org.springframework.messaging.handler.invocation.HandlerMethodReturnValueHandlerComposite . handleReturnValue ( java.lang.Object , org.springframework.messaging.handler.invocation.MethodParameter , this . org.springframework.messaging.handler.invocation.Message<> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) { java.lang.Exception java.lang.Exception = ( java.lang.Throwable instanceof java.lang.Exception ? ( java.lang.Exception ) java.lang.Throwable : new java.lang.IllegalStateException ( java.lang.Throwable ) ) ; void ( this . org.springframework.messaging.handler.invocation.InvocableHandlerMethod , java.lang.Exception , this . org.springframework.messaging.handler.invocation.Message<> ) ; }  <METHOD_END>
