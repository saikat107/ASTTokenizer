<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.cassandra.core.ReactiveSessionFactory = new DefaultReactiveSessionFactory ( org.springframework.cassandra.core.ReactiveSession ) ; this . org.springframework.cassandra.core.ReactiveCqlTemplate = new ReactiveCqlTemplate ( org.springframework.cassandra.core.ReactiveSessionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( ( ReactiveSessionCallback < java.lang.String > ) session -> { session . close ( ) ; return Mono . just ( STRING ) ; } ) ; verify ( org.springframework.cassandra.core.ReactiveSession , never ( ) ) . close ( ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( ( ReactiveSessionCallback < java.lang.String > ) session -> { throw new InvalidQueryException ( STRING ) ; } ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectError ( CassandraInvalidQueryException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; Mono < java.lang.Boolean > org.springframework.cassandra.core.Mono<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.Boolean> ) . expectNext ( false ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; Mono < java.lang.Boolean > org.springframework.cassandra.core.Mono<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.Boolean> ) . expectError ( CassandraConnectionFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , reactiveCqlTemplate -> { StepVerifier . create ( reactiveCqlTemplate . execute ( STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { Mono < ReactiveResultSet > org.springframework.cassandra.core.Mono<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForResultSet ( STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<org.springframework.cassandra.core.ReactiveResultSet> . flatMap ( ReactiveResultSet :: rows ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING , STRING , STRING ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , reactiveCqlTemplate -> { Flux < String > flux = reactiveCqlTemplate . query ( STRING , ( row , index ) -> row . getString ( NUMBER ) ) ; StepVerifier . create ( flux ) . expectNext ( STRING , STRING , STRING ) . verifyComplete ( ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( STRING , resultSet -> Mono . just ( resultSet . wasApplied ( ) ) ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectNext ( true ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( STRING , resultSet -> Mono . just ( resultSet . wasApplied ( ) ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectError ( CassandraConnectionFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . empty ( ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> null ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectError ( IncorrectResultSizeDataAccessException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , java.lang.String .class ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForFlux ( STRING , java.lang.String .class ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING , STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForRows ( STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNext ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Mono < java.lang.Boolean > org.springframework.cassandra.core.Mono<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.Boolean> ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true , false ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( Flux . just ( STRING , STRING ) ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectNext ( true ) . expectNext ( false ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession , times ( NUMBER ) ) . execute ( any ( Statement .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , reactiveCqlTemplate -> { StepVerifier . create ( reactiveCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . queryForResultSet ( new SimpleStatement ( STRING ) ) . flatMap ( ReactiveResultSet :: rows ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING , STRING , STRING ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER , ConsistencyLevel . ONE , DowngradingConsistencyRetryPolicy . INSTANCE , reactiveCqlTemplate -> { Flux < String > flux = reactiveCqlTemplate . query ( new SimpleStatement ( STRING ) , ( row , index ) -> row . getString ( NUMBER ) ) ; StepVerifier . create ( flux . collectList ( ) ) . consumeNextWith ( rows -> { assertThat ( rows ) . hasSize ( NUMBER ) . contains ( STRING , STRING , STRING ) ; } ) . verifyComplete ( ) ; verify ( session ) . execute ( any ( Statement .class ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( new SimpleStatement ( STRING ) , resultSet -> Mono . just ( resultSet . wasApplied ( ) ) ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectNext ( true ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( any ( Statement .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( new SimpleStatement ( STRING ) , resultSet -> Mono . just ( resultSet . wasApplied ( ) ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectError ( CassandraConnectionFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . empty ( ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> null ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , ( row , rowNum ) -> STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectError ( IncorrectResultSizeDataAccessException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForFlux ( new SimpleStatement ( STRING ) , java.lang.String .class ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING , STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForRows ( new SimpleStatement ( STRING ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNext ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( any ( Statement .class ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; StepVerifier . create ( org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( new SimpleStatement ( STRING ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , ( session , ps ) -> { return session . execute ( ps . bind ( STRING ) ) . flatMap ( ReactiveResultSet :: rows ) ; } ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( null , null , null , org.springframework.cassandra.core.ReactiveCqlTemplate -> { Mono < java.lang.Boolean > org.springframework.cassandra.core.Mono<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , STRING ) ; when ( this . org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( this . org.springframework.cassandra.core.BoundStatement ) ; when ( this . org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.Boolean> ) . expectNext ( true ) . verifyComplete ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( anyString ( ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; Flux < ReactiveResultSet > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , ( session , ps ) -> session . execute ( ps . bind ( ) ) ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> ) . expectNext ( org.springframework.cassandra.core.ReactiveResultSet ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . prepare ( anyString ( ) ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( org.springframework.cassandra.core.BoundStatement ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; Flux < ReactiveResultSet > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( session -> Mono . just ( preparedStatement ) , ( session , ps ) -> session . execute ( boundStatement ) ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> ) . expectNext ( org.springframework.cassandra.core.ReactiveResultSet ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession ) . execute ( org.springframework.cassandra.core.BoundStatement ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < ReactiveResultSet > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( session -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } , ( session , ps ) -> session . execute ( boundStatement ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> ) . expectError ( CassandraConnectionFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Flux < ReactiveResultSet > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( session -> Mono . just ( preparedStatement ) , ( session , ps ) -> { throw new NoHostAvailableException ( Collections . emptyMap ( ) ) ; } ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.ReactiveResultSet> ) . expectError ( CassandraConnectionFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.PreparedStatement . bind ( ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( session -> Mono . just ( preparedStatement ) , ReactiveResultSet :: rows ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNext ( org.springframework.cassandra.core.Row ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( session -> Mono . just ( preparedStatement ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , ReactiveResultSet :: rows ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNext ( org.springframework.cassandra.core.Row ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . query ( session -> Mono . just ( preparedStatement ) , ps -> { ps . bind ( STRING , STRING ) ; return boundStatement ; } , ( row , rowNum ) -> row ) ; verifyZeroInteractions ( org.springframework.cassandra.core.ReactiveSession ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNext ( org.springframework.cassandra.core.Row ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.PreparedStatement ) . bind ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . empty ( ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , ( row , rowNum ) -> STRING , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectError ( IncorrectResultSizeDataAccessException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING ) ; Mono < java.lang.String > org.springframework.cassandra.core.Mono<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForObject ( STRING , java.lang.String .class , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.String> ) . expectNext ( STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; when ( org.springframework.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.cassandra.core.ColumnDefinitions ) ; when ( org.springframework.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( STRING , STRING ) ; Flux < java.lang.String > org.springframework.cassandra.core.Flux<java.lang.String> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForFlux ( STRING , java.lang.String .class , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.String> ) . expectNext ( STRING , STRING ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; Flux < Row > org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> = org.springframework.cassandra.core.ReactiveCqlTemplate . queryForRows ( STRING , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<org.springframework.cassandra.core.Row> ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Mono < java.lang.Boolean > org.springframework.cassandra.core.Mono<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , STRING ) ; StepVerifier . create ( org.springframework.cassandra.core.Mono<java.lang.Boolean> ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.cassandra.core.ReactiveSession . prepare ( STRING ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.PreparedStatement ) ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.PreparedStatement . bind ( STRING ) ) . thenReturn ( org.springframework.cassandra.core.BoundStatement ) ; when ( org.springframework.cassandra.core.ReactiveSession . execute ( org.springframework.cassandra.core.BoundStatement ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( org.springframework.cassandra.core.ReactiveResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Flux < java.lang.Boolean > org.springframework.cassandra.core.Flux<java.lang.Boolean> = org.springframework.cassandra.core.ReactiveCqlTemplate . execute ( STRING , Flux . just ( new java.lang.Object [] { STRING } , new java.lang.Object [] { STRING } ) ) ; StepVerifier . create ( org.springframework.cassandra.core.Flux<java.lang.Boolean> ) . expectNext ( true , true ) . verifyComplete ( ) ; verify ( org.springframework.cassandra.core.ReactiveSession , atMost ( NUMBER ) ) . prepare ( STRING ) ; verify ( org.springframework.cassandra.core.ReactiveSession , times ( NUMBER ) ) . execute ( org.springframework.cassandra.core.BoundStatement ) ; }  <METHOD_END>
<METHOD_START> private < T > void void ( java.lang.Integer java.lang.Integer , com . com.datastax . com.datastax . com.datastax . com.datastax com.datastax.driver.core.ConsistencyLevel , com . com.datastax . com.datastax . com.datastax . com.datastax . com.datastax com.datastax.driver.core.policies.RetryPolicy , java.util.function.Consumer<org.springframework.cassandra.core.ReactiveCqlTemplate> < ReactiveCqlTemplate > java.util.function.Consumer<org.springframework.cassandra.core.ReactiveCqlTemplate> ) { java.lang.String [] java.lang.String[] = { STRING , STRING , STRING } ; when ( this . org.springframework.cassandra.core.ReactiveSession . execute ( ( Statement ) any ( ) ) ) . thenReturn ( Mono . just ( org.springframework.cassandra.core.ReactiveResultSet ) ) ; when ( this . org.springframework.cassandra.core.ReactiveResultSet . rows ( ) ) . thenReturn ( Flux . just ( org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row , org.springframework.cassandra.core.Row ) ) ; when ( this . org.springframework.cassandra.core.Row . getString ( NUMBER ) ) . thenReturn ( java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] , java.lang.String[] [ NUMBER ] ) ; when ( this . org.springframework.cassandra.core.ReactiveSession . prepare ( anyString ( ) ) ) . thenReturn ( Mono . just ( this . org.springframework.cassandra.core.PreparedStatement ) ) ; ReactiveCqlTemplate org.springframework.cassandra.core.ReactiveCqlTemplate = new ReactiveCqlTemplate ( ) ; org.springframework.cassandra.core.ReactiveCqlTemplate . setSessionFactory ( this . org.springframework.cassandra.core.ReactiveSessionFactory ) ; if ( java.lang.Integer != null ) { org.springframework.cassandra.core.ReactiveCqlTemplate . setFetchSize ( java.lang.Integer ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { org.springframework.cassandra.core.ReactiveCqlTemplate . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( com.datastax.driver.core.ConsistencyLevel != null ) { org.springframework.cassandra.core.ReactiveCqlTemplate . setConsistencyLevel ( com.datastax.driver.core.ConsistencyLevel ) ; } java.util.function.Consumer<org.springframework.cassandra.core.ReactiveCqlTemplate> . accept ( org.springframework.cassandra.core.ReactiveCqlTemplate ) ; ArgumentCaptor < Statement > org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> = ArgumentCaptor . forClass ( Statement .class ) ; verify ( this . org.springframework.cassandra.core.ReactiveSession ) . execute ( org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . capture ( ) ) ; Statement org.springframework.cassandra.core.Statement = org.springframework.cassandra.core.ArgumentCaptor<org.springframework.cassandra.core.Statement> . getValue ( ) ; if ( org.springframework.cassandra.core.Statement instanceof PreparedStatement || org.springframework.cassandra.core.Statement instanceof BoundStatement ) { if ( java.lang.Integer != null ) { verify ( org.springframework.cassandra.core.Statement ) . setFetchSize ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { verify ( org.springframework.cassandra.core.Statement ) . setRetryPolicy ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( com.datastax.driver.core.ConsistencyLevel != null ) { verify ( org.springframework.cassandra.core.Statement ) . setConsistencyLevel ( com.datastax.driver.core.ConsistencyLevel ) ; } } else { if ( java.lang.Integer != null ) { assertThat ( org.springframework.cassandra.core.Statement . getFetchSize ( ) ) . isEqualTo ( java.lang.Integer . int ( ) ) ; } if ( com.datastax.driver.core.policies.RetryPolicy != null ) { assertThat ( org.springframework.cassandra.core.Statement . getRetryPolicy ( ) ) . isEqualTo ( com.datastax.driver.core.policies.RetryPolicy ) ; } if ( com.datastax.driver.core.ConsistencyLevel != null ) { assertThat ( org.springframework.cassandra.core.Statement . getConsistencyLevel ( ) ) . isEqualTo ( com.datastax.driver.core.ConsistencyLevel ) ; } } }  <METHOD_END>
