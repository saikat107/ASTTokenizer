<METHOD_START> public void ( PartTree org.springframework.data.jpa.repository.query.PartTree , ReturnedType org.springframework.data.jpa.repository.query.ReturnedType , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , ParameterMetadataProvider org.springframework.data.jpa.repository.query.ParameterMetadataProvider ) { super( org.springframework.data.jpa.repository.query.PartTree ); this . org.springframework.data.jpa.repository.query.PartTree = org.springframework.data.jpa.repository.query.PartTree ; CriteriaQuery < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ReturnedType ) ; this . org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.CriteriaBuilder ; this . org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . distinct ( org.springframework.data.jpa.repository.query.PartTree . isDistinct ( ) ) ; this . org.springframework.data.jpa.repository.query.Root<?> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . from ( org.springframework.data.jpa.repository.query.ReturnedType . getDomainType ( ) ) ; this . org.springframework.data.jpa.repository.query.ParameterMetadataProvider = org.springframework.data.jpa.repository.query.ParameterMetadataProvider ; this . org.springframework.data.jpa.repository.query.ReturnedType = org.springframework.data.jpa.repository.query.ReturnedType ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , ReturnedType org.springframework.data.jpa.repository.query.ReturnedType ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.jpa.repository.query.ReturnedType . getTypeToRead ( ) ; return java.lang.Class<> == null || org.springframework.data.jpa.repository.query.PartTree . isExistsProjection ( ) ? org.springframework.data.jpa.repository.query.CriteriaBuilder . createTupleQuery ( ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> < ParameterMetadata < ? > > java.util.List<org.springframework.data.jpa.repository.query.ParameterMetadata<?>> ( ) { return org.springframework.data.jpa.repository.query.ParameterMetadataProvider . getExpressions ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( Part org.springframework.data.jpa.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.jpa.repository.query.Predicate ( org.springframework.data.jpa.repository.query.Part , org.springframework.data.jpa.repository.query.Root<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( Part org.springframework.data.jpa.repository.query.Part , Predicate org.springframework.data.jpa.repository.query.Predicate , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.jpa.repository.query.CriteriaBuilder . and ( org.springframework.data.jpa.repository.query.Predicate , org.springframework.data.jpa.repository.query.Predicate ( org.springframework.data.jpa.repository.query.Part , org.springframework.data.jpa.repository.query.Root<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( Predicate org.springframework.data.jpa.repository.query.Predicate , Predicate org.springframework.data.jpa.repository.query.Predicate ) { return org.springframework.data.jpa.repository.query.CriteriaBuilder . or ( org.springframework.data.jpa.repository.query.Predicate , org.springframework.data.jpa.repository.query.Predicate ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( Predicate org.springframework.data.jpa.repository.query.Predicate , Sort org.springframework.data.jpa.repository.query.Sort ) { return org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( org.springframework.data.jpa.repository.query.Predicate , org.springframework.data.jpa.repository.query.Sort , org.springframework.data.jpa.repository.query.CriteriaQuery<> , org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.Root<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> ( Predicate org.springframework.data.jpa.repository.query.Predicate , Sort org.springframework.data.jpa.repository.query.Sort , CriteriaQuery < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> , CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , Root < ? > org.springframework.data.jpa.repository.query.Root<?> ) { if ( org.springframework.data.jpa.repository.query.ReturnedType . needsCustomConstruction ( ) ) { java.util.List<org.springframework.data.jpa.repository.query.Selection<?>> < Selection < ? > > java.util.List<org.springframework.data.jpa.repository.query.Selection<?>> = new java.util.ArrayList<org.springframework.data.jpa.repository.query.Selection<?>> < Selection < ? > > ( ) ; for ( java.lang.String java.lang.String : org.springframework.data.jpa.repository.query.ReturnedType . getInputProperties ( ) ) { PropertyPath org.springframework.data.jpa.repository.query.PropertyPath = PropertyPath . from ( java.lang.String , org.springframework.data.jpa.repository.query.ReturnedType . getDomainType ( ) ) ; java.util.List<org.springframework.data.jpa.repository.query.Selection<?>> . add ( toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.PropertyPath ) . alias ( java.lang.String ) ) ; } org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . multiselect ( java.util.List<org.springframework.data.jpa.repository.query.Selection<?>> ) ; } else if ( org.springframework.data.jpa.repository.query.PartTree . isExistsProjection ( ) ) { if ( org.springframework.data.jpa.repository.query.Root<> . getModel ( ) . hasSingleIdAttribute ( ) ) { SingularAttribute < ? , ? > org.springframework.data.jpa.repository.query.SingularAttribute<?,?> = org.springframework.data.jpa.repository.query.Root<> . getModel ( ) . getId ( org.springframework.data.jpa.repository.query.Root<> . getModel ( ) . getIdType ( ) . getJavaType ( ) ) ; org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . multiselect ( org.springframework.data.jpa.repository.query.Root<> . get ( ( SingularAttribute ) org.springframework.data.jpa.repository.query.SingularAttribute<,> ) . alias ( org.springframework.data.jpa.repository.query.SingularAttribute<,> . getName ( ) ) ) ; } else { org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . multiselect ( org.springframework.data.jpa.repository.query.Root<> . getModel ( ) . getIdClassAttributes ( ) . stream ( ) . map ( it -> ( Selection < ? > ) root . get ( ( SingularAttribute ) it ) . alias ( it . getName ( ) ) ) . collect ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ; } } else { org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . select ( ( Root ) org.springframework.data.jpa.repository.query.Root<> ) ; } CriteriaQuery < ? extends java.lang.Object > org.springframework.data.jpa.repository.query.CriteriaQuery<? extends java.lang.Object> = org.springframework.data.jpa.repository.query.CriteriaQuery<> . orderBy ( QueryUtils . toOrders ( org.springframework.data.jpa.repository.query.Sort , org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.CriteriaBuilder ) ) ; return org.springframework.data.jpa.repository.query.Predicate == null ? org.springframework.data.jpa.repository.query.CriteriaQuery<> : org.springframework.data.jpa.repository.query.CriteriaQuery<> . where ( org.springframework.data.jpa.repository.query.Predicate ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( Part org.springframework.data.jpa.repository.query.Part , Root < ? > org.springframework.data.jpa.repository.query.Root<?> ) { return new org.springframework.data.jpa.repository.query.JpaQueryCreator.PredicateBuilder ( org.springframework.data.jpa.repository.query.Part , org.springframework.data.jpa.repository.query.Root<> ) . org.springframework.data.jpa.repository.query.Predicate ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Part org.springframework.data.jpa.repository.query.Part , Root < ? > org.springframework.data.jpa.repository.query.Root<?> ) { Assert . notNull ( org.springframework.data.jpa.repository.query.Part , STRING ) ; Assert . notNull ( org.springframework.data.jpa.repository.query.Root<> , STRING ) ; this . org.springframework.data.jpa.repository.query.Part = org.springframework.data.jpa.repository.query.Part ; this . org.springframework.data.jpa.repository.query.Root<?> = org.springframework.data.jpa.repository.query.Root<> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( ) { PropertyPath org.springframework.data.jpa.repository.query.PropertyPath = org.springframework.data.jpa.repository.query.Part . getProperty ( ) ; Type org.springframework.data.jpa.repository.query.Type = org.springframework.data.jpa.repository.query.Part . getType ( ) ; switch ( org.springframework.data.jpa.repository.query.Type ) { case BETWEEN : ParameterMetadata < java.lang.Comparable > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Comparable> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part ) ; ParameterMetadata < java.lang.Comparable > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Comparable> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part ) ; return org.springframework.data.jpa.repository.query.CriteriaBuilder . between ( org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) , org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Comparable> . getExpression ( ) , org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Comparable> . getExpression ( ) ) ; case AFTER : case GREATER_THAN : return org.springframework.data.jpa.repository.query.CriteriaBuilder . greaterThan ( org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) , org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.lang.Comparable .class ) . getExpression ( ) ) ; case GREATER_THAN_EQUAL : return org.springframework.data.jpa.repository.query.CriteriaBuilder . greaterThanOrEqualTo ( org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) , org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.lang.Comparable .class ) . getExpression ( ) ) ; case BEFORE : case LESS_THAN : return org.springframework.data.jpa.repository.query.CriteriaBuilder . lessThan ( org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) , org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.lang.Comparable .class ) . getExpression ( ) ) ; case LESS_THAN_EQUAL : return org.springframework.data.jpa.repository.query.CriteriaBuilder . lessThanOrEqualTo ( org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) , org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.lang.Comparable .class ) . getExpression ( ) ) ; case IS_NULL : return org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) . isNull ( ) ; case IS_NOT_NULL : return org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) . isNotNull ( ) ; case NOT_IN : return org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) . in ( org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.util.Collection .class ) . getExpression ( ) ) . not ( ) ; case IN : return org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) . in ( org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.util.Collection .class ) . getExpression ( ) ) ; case STARTING_WITH : case ENDING_WITH : case CONTAINING : case NOT_CONTAINING : if ( org.springframework.data.jpa.repository.query.PropertyPath . getLeafProperty ( ) . isCollection ( ) ) { Expression < java.util.Collection<java.lang.Object> < java.lang.Object > > org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.PropertyPath ) ; ParameterExpression < java.lang.Object > org.springframework.data.jpa.repository.query.ParameterExpression<java.lang.Object> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part ) . getExpression ( ) ; return org.springframework.data.jpa.repository.query.Type . equals ( NOT_CONTAINING ) ? org.springframework.data.jpa.repository.query.Predicate ( org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ParameterExpression<java.lang.Object> , org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> ) : org.springframework.data.jpa.repository.query.Predicate ( org.springframework.data.jpa.repository.query.CriteriaBuilder , org.springframework.data.jpa.repository.query.ParameterExpression<java.lang.Object> , org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> ) ; } case LIKE : case NOT_LIKE : Expression < java.lang.String > org.springframework.data.jpa.repository.query.Expression<java.lang.String> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ; Expression < java.lang.String > org.springframework.data.jpa.repository.query.Expression<java.lang.String> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Expression<java.lang.String> ) ; Expression < java.lang.String > org.springframework.data.jpa.repository.query.Expression<java.lang.String> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part , java.lang.String .class ) . getExpression ( ) ) ; Predicate org.springframework.data.jpa.repository.query.Predicate = org.springframework.data.jpa.repository.query.CriteriaBuilder . like ( org.springframework.data.jpa.repository.query.Expression<java.lang.String> , org.springframework.data.jpa.repository.query.Expression<java.lang.String> ) ; return org.springframework.data.jpa.repository.query.Type . equals ( NOT_LIKE ) || org.springframework.data.jpa.repository.query.Type . equals ( NOT_CONTAINING ) ? org.springframework.data.jpa.repository.query.Predicate . not ( ) : org.springframework.data.jpa.repository.query.Predicate ; case TRUE : Expression < java.lang.Boolean > org.springframework.data.jpa.repository.query.Expression<java.lang.Boolean> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ; return org.springframework.data.jpa.repository.query.CriteriaBuilder . isTrue ( org.springframework.data.jpa.repository.query.Expression<java.lang.Boolean> ) ; case FALSE : Expression < java.lang.Boolean > org.springframework.data.jpa.repository.query.Expression<java.lang.Boolean> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ; return org.springframework.data.jpa.repository.query.CriteriaBuilder . isFalse ( org.springframework.data.jpa.repository.query.Expression<java.lang.Boolean> ) ; case SIMPLE_PROPERTY : ParameterMetadata < java.lang.Object > org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> = org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part ) ; Expression < java.lang.Object > org.springframework.data.jpa.repository.query.Expression<java.lang.Object> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ; return org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> . isIsNullParameter ( ) ? org.springframework.data.jpa.repository.query.Expression<java.lang.Object> . isNull ( ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . equal ( org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Expression<java.lang.Object> ) , org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.ParameterMetadata<java.lang.Object> . getExpression ( ) ) ) ; case NEGATING_SIMPLE_PROPERTY : return org.springframework.data.jpa.repository.query.CriteriaBuilder . notEqual ( org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ) , org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.ParameterMetadataProvider . next ( org.springframework.data.jpa.repository.query.Part ) . getExpression ( ) ) ) ; case IS_EMPTY : case IS_NOT_EMPTY : if ( ! org.springframework.data.jpa.repository.query.PropertyPath . getLeafProperty ( ) . isCollection ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } Expression < java.util.Collection<java.lang.Object> < java.lang.Object > > org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> = org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.PropertyPath ) ; return org.springframework.data.jpa.repository.query.Type . equals ( IS_NOT_EMPTY ) ? org.springframework.data.jpa.repository.query.CriteriaBuilder . isNotEmpty ( org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> ) : org.springframework.data.jpa.repository.query.CriteriaBuilder . isEmpty ( org.springframework.data.jpa.repository.query.Expression<java.util.Collection<java.lang.Object>> ) ; default: throw new java.lang.IllegalArgumentException ( STRING + org.springframework.data.jpa.repository.query.Type ) ; } }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , Expression < T > org.springframework.data.jpa.repository.query.Expression<T> , Expression < java.util.Collection<T> < T > > org.springframework.data.jpa.repository.query.Expression<java.util.Collection<T>> ) { return org.springframework.data.jpa.repository.query.CriteriaBuilder . isMember ( org.springframework.data.jpa.repository.query.Expression<T> , org.springframework.data.jpa.repository.query.Expression<java.util.Collection<T>> ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.query.Predicate org.springframework.data.jpa.repository.query.Predicate ( CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder , Expression < T > org.springframework.data.jpa.repository.query.Expression<T> , Expression < java.util.Collection<T> < T > > org.springframework.data.jpa.repository.query.Expression<java.util.Collection<T>> ) { return org.springframework.data.jpa.repository.query.CriteriaBuilder . isNotMember ( org.springframework.data.jpa.repository.query.Expression<T> , org.springframework.data.jpa.repository.query.Expression<java.util.Collection<T>> ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.query.Expression<T> < T > org.springframework.data.jpa.repository.query.Expression<T> ( Expression < ? extends T > org.springframework.data.jpa.repository.query.Expression<? extends T> ) { switch ( org.springframework.data.jpa.repository.query.Part . shouldIgnoreCase ( ) ) { case ALWAYS : Assert . state ( boolean ( org.springframework.data.jpa.repository.query.Expression<> ) , STRING + org.springframework.data.jpa.repository.query.Expression<> . getJavaType ( ) . getName ( ) + STRING + org.springframework.data.jpa.repository.query.Part . getProperty ( ) . getSegment ( ) + STRING ) ; return ( Expression < T > ) org.springframework.data.jpa.repository.query.CriteriaBuilder . upper ( ( Expression < java.lang.String > ) org.springframework.data.jpa.repository.query.Expression<> ) ; case WHEN_POSSIBLE : if ( boolean ( org.springframework.data.jpa.repository.query.Expression<> ) ) { return ( Expression < T > ) org.springframework.data.jpa.repository.query.CriteriaBuilder . upper ( ( Expression < java.lang.String > ) org.springframework.data.jpa.repository.query.Expression<> ) ; } case NEVER : default: return ( Expression < T > ) org.springframework.data.jpa.repository.query.Expression<> ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Expression < ? > org.springframework.data.jpa.repository.query.Expression<?> ) { return java.lang.String .class . boolean ( org.springframework.data.jpa.repository.query.Expression<> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> < ? extends java.lang.Comparable > org.springframework.data.jpa.repository.query.Expression<? extends java.lang.Comparable> ( Root < ? > org.springframework.data.jpa.repository.query.Root<?> , Part org.springframework.data.jpa.repository.query.Part ) { return org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.query.Expression<T> < T > org.springframework.data.jpa.repository.query.Expression<T> ( Root < ? > org.springframework.data.jpa.repository.query.Root<?> , Part org.springframework.data.jpa.repository.query.Part ) { return toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<> , org.springframework.data.jpa.repository.query.Part . getProperty ( ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.jpa.repository.query.Expression<T> < T > org.springframework.data.jpa.repository.query.Expression<T> ( Path < ? > org.springframework.data.jpa.repository.query.Path<?> , PropertyPath org.springframework.data.jpa.repository.query.PropertyPath ) { Path < java.lang.Object > org.springframework.data.jpa.repository.query.Path<java.lang.Object> = org.springframework.data.jpa.repository.query.Path<> . get ( org.springframework.data.jpa.repository.query.PropertyPath . getSegment ( ) ) ; return ( Expression < T > ) ( org.springframework.data.jpa.repository.query.PropertyPath . hasNext ( ) ? org.springframework.data.jpa.repository.query.Expression ( org.springframework.data.jpa.repository.query.Path<java.lang.Object> , org.springframework.data.jpa.repository.query.PropertyPath . next ( ) ) : org.springframework.data.jpa.repository.query.Path<java.lang.Object> ) ; }  <METHOD_END>
