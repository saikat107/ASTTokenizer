<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( Scope . LOCAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getScope ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . LOCAL_DESTROY , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( Scope . LOCAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getScope ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . NONE , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNotNull ( STRING , org.springframework.data.gemfire.config.xml.Region ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getName ( ) ) ; assertEquals ( STRING , org.springframework.data.gemfire.config.xml.Region . getFullPath ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) ) ; assertEquals ( DataPolicy . NORMAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( Scope . LOCAL , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getScope ( ) ) ; assertNotNull ( org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) ) ; assertEquals ( EvictionAction . OVERFLOW_TO_DISK , org.springframework.data.gemfire.config.xml.Region . getAttributes ( ) . getEvictionAttributes ( ) . getAction ( ) ) ; }  <METHOD_END>
