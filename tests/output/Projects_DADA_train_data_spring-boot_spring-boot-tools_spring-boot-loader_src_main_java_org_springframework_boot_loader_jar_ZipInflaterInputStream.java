<METHOD_START> void ( java.io.InputStream java.io.InputStream , int int ) { super( java.io.InputStream , new java.util.zip.Inflater ( true ) , int ( int ) ); this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { if ( this . int < NUMBER ) { return super. int ( ) ; } return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( byte [] byte[] , int int , int int ) throws java.io.IOException { int int = super. int ( byte[] , int , int ) ; if ( int != - NUMBER ) { this . int -= int ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.io.IOException { try { super. void ( ) ; } catch ( java.io.EOFException java.io.EOFException ) { if ( this . boolean ) { throw java.io.EOFException ; } this . int = NUMBER ; this . byte[] [ NUMBER ] = NUMBER ; this . boolean = true ; this . java.util.zip.Inflater . void ( this . byte[] , NUMBER , this . int ) ; } }  <METHOD_END>
<METHOD_START> private static int int ( long long ) { long += NUMBER ; long = ( long > NUMBER ? NUMBER : long ) ; long = ( long <= NUMBER ? NUMBER : long ) ; return ( int ) long ; }  <METHOD_END>
