<METHOD_START> @ java.lang.SafeVarargs private static < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( T ... T[] ) { return ( T[] == null ? java.util.Collections . java.util.List<T> ( ) : java.util.Arrays . java.util.List<T> ( T[] ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { return ( java.lang.Iterable<T> != null ? java.lang.Iterable<T> : java.util.Collections :: java.util.Iterator<T> ) ; }  <METHOD_END>
<METHOD_START> public void ( CassandraOperations org.springframework.data.cassandra.core.CassandraOperations ) { Assert . notNull ( org.springframework.data.cassandra.core.CassandraOperations , STRING ) ; this . org.springframework.data.cassandra.core.CassandraOperations = org.springframework.data.cassandra.core.CassandraOperations ; this . org.springframework.data.cassandra.core.Batch = QueryBuilder . batch ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { org.springframework.data.cassandra.core.CassandraOperations . getCqlOperations ( ) . execute ( org.springframework.data.cassandra.core.Batch ) ; return; } void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( long long ) { void ( ) ; org.springframework.data.cassandra.core.Batch . using ( QueryBuilder . timestamp ( long ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Object ... java.lang.Object[] ) { return org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<java.lang.Object> ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { void ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ( java.lang.Iterable<> ) ) { Assert . notNull ( java.lang.Object , STRING ) ; org.springframework.data.cassandra.core.Batch . add ( QueryUtils . createInsertQuery ( java.lang.String ( java.lang.Object ) , java.lang.Object , null , org.springframework.data.cassandra.core.CassandraOperations . getConverter ( ) ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Object ... java.lang.Object[] ) { return org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<java.lang.Object> ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { void ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ( java.lang.Iterable<> ) ) { Assert . notNull ( java.lang.Object , STRING ) ; org.springframework.data.cassandra.core.Batch . add ( QueryUtils . createUpdateQuery ( java.lang.String ( java.lang.Object ) , java.lang.Object , null , org.springframework.data.cassandra.core.CassandraOperations . getConverter ( ) ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Object ... java.lang.Object[] ) { return org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<java.lang.Object> ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { void ( ) ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ( java.lang.Iterable<> ) ) { Assert . notNull ( java.lang.Object , STRING ) ; org.springframework.data.cassandra.core.Batch . add ( QueryUtils . createDeleteQuery ( java.lang.String ( java.lang.Object ) , java.lang.Object , null , org.springframework.data.cassandra.core.CassandraOperations . getConverter ( ) ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . state ( ! java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return org.springframework.data.cassandra.core.CassandraOperations . getTableName ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) . toCql ( ) ; }  <METHOD_END>
