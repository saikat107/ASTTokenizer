<METHOD_START> private void void ( ThemeResolver org.springframework.web.servlet.theme.ThemeResolver , boolean boolean , java.lang.String java.lang.String ) { MockServletContext org.springframework.web.servlet.theme.MockServletContext = new MockServletContext ( ) ; MockHttpServletRequest org.springframework.web.servlet.theme.MockHttpServletRequest = new MockHttpServletRequest ( org.springframework.web.servlet.theme.MockServletContext ) ; MockHttpServletResponse org.springframework.web.servlet.theme.MockHttpServletResponse = new MockHttpServletResponse ( ) ; java.lang.String java.lang.String = org.springframework.web.servlet.theme.ThemeResolver . resolveThemeName ( org.springframework.web.servlet.theme.MockHttpServletRequest ) ; assertEquals ( java.lang.String , java.lang.String ) ; try { org.springframework.web.servlet.theme.ThemeResolver . setThemeName ( org.springframework.web.servlet.theme.MockHttpServletRequest , org.springframework.web.servlet.theme.MockHttpServletResponse , java.lang.String ) ; if ( ! boolean ) fail ( STRING ) ; java.lang.String = org.springframework.web.servlet.theme.ThemeResolver . resolveThemeName ( org.springframework.web.servlet.theme.MockHttpServletRequest ) ; assertEquals ( java.lang.String , java.lang.String ) ; org.springframework.web.servlet.theme.ThemeResolver . setThemeName ( org.springframework.web.servlet.theme.MockHttpServletRequest , org.springframework.web.servlet.theme.MockHttpServletResponse , null ) ; java.lang.String = org.springframework.web.servlet.theme.ThemeResolver . resolveThemeName ( org.springframework.web.servlet.theme.MockHttpServletRequest ) ; assertEquals ( java.lang.String , java.lang.String ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { if ( boolean ) fail ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new FixedThemeResolver ( ) , false , AbstractThemeResolver . ORIGINAL_DEFAULT_THEME_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new CookieThemeResolver ( ) , true , AbstractThemeResolver . ORIGINAL_DEFAULT_THEME_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new SessionThemeResolver ( ) , true , AbstractThemeResolver . ORIGINAL_DEFAULT_THEME_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SessionThemeResolver org.springframework.web.servlet.theme.SessionThemeResolver = new SessionThemeResolver ( ) ; org.springframework.web.servlet.theme.SessionThemeResolver . setDefaultThemeName ( java.lang.String ) ; void ( org.springframework.web.servlet.theme.SessionThemeResolver , true , java.lang.String ) ; }  <METHOD_END>
