<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.handler.MessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.MessageHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNull ( org.springframework.integration.handler.Message<> ) ; assertTrue ( java.util.List .class . boolean ( org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ) ; assertEquals ( NUMBER , ( ( java.util.List<?> < ? > ) org.springframework.integration.handler.Message<> . getPayload ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.handler.MessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ) ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.MessageHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNull ( org.springframework.integration.handler.Message<> ) ; assertThat ( org.springframework.integration.handler.Message<> . getPayload ( ) , is ( instanceOf ( java.util.Set .class ) ) ) ; assertEquals ( NUMBER , ( ( java.util.Set<?> < ? > ) org.springframework.integration.handler.Message<> . getPayload ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageHandler org.springframework.integration.handler.MessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.lang.String [] { STRING , STRING } ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.MessageHandler . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNull ( org.springframework.integration.handler.Message<> ) ; assertTrue ( org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) . isArray ( ) ) ; assertEquals ( NUMBER , ( ( java.lang.String [] ) org.springframework.integration.handler.Message<> . getPayload ( ) ) . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.lang.String [] { STRING , STRING } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMessageSplitter org.springframework.integration.handler.AbstractMessageSplitter = new AbstractMessageSplitter ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.AbstractMessageSplitter . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMessageSplitter org.springframework.integration.handler.AbstractMessageSplitter = new AbstractMessageSplitter ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ) ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.AbstractMessageSplitter . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Arrays . java.util.List<java.lang.String> ( new java.lang.String [] { STRING , STRING } ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractMessageSplitter org.springframework.integration.handler.AbstractMessageSplitter = new AbstractMessageSplitter ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.lang.String [] { STRING , STRING } ; } } ; QueueChannel org.springframework.integration.handler.QueueChannel = new QueueChannel ( ) ; Message < ? > org.springframework.integration.handler.Message<?> = MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.handler.QueueChannel ) . build ( ) ; org.springframework.integration.handler.AbstractMessageSplitter . handleMessage ( org.springframework.integration.handler.Message<> ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; Message < ? > org.springframework.integration.handler.Message<?> = org.springframework.integration.handler.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertNotNull ( org.springframework.integration.handler.Message<> ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( java.lang.String .class , org.springframework.integration.handler.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.handler.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.handler.Message<?> ) { return new java.lang.String [] { STRING , STRING } ; }  <METHOD_END>
