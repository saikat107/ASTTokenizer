<METHOD_START> public void ( ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>> < ConnectInterceptor < ? > > > org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>> < DisconnectInterceptor < ? > > > org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>> < ProviderSignInInterceptor < ? > > > org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>>> ) { this . java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>> = org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>> = org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>> = org.springframework.boot.autoconfigure.social.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ConnectController .class ) public org.springframework.boot.autoconfigure.social.ConnectController org.springframework.boot.autoconfigure.social.ConnectController ( ConnectionFactoryLocator org.springframework.boot.autoconfigure.social.ConnectionFactoryLocator , ConnectionRepository org.springframework.boot.autoconfigure.social.ConnectionRepository ) { ConnectController org.springframework.boot.autoconfigure.social.ConnectController = new ConnectController ( org.springframework.boot.autoconfigure.social.ConnectionFactoryLocator , org.springframework.boot.autoconfigure.social.ConnectionRepository ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>> ) ) { org.springframework.boot.autoconfigure.social.ConnectController . setConnectInterceptors ( this . java.util.List<org.springframework.boot.autoconfigure.social.ConnectInterceptor<?>> ) ; } if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>> ) ) { org.springframework.boot.autoconfigure.social.ConnectController . setDisconnectInterceptors ( this . java.util.List<org.springframework.boot.autoconfigure.social.DisconnectInterceptor<?>> ) ; } return org.springframework.boot.autoconfigure.social.ConnectController ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean @ ConditionalOnProperty ( prefix = STRING , name = STRING ) public org.springframework.boot.autoconfigure.social.BeanNameViewResolver org.springframework.boot.autoconfigure.social.BeanNameViewResolver ( ) { BeanNameViewResolver org.springframework.boot.autoconfigure.social.BeanNameViewResolver = new BeanNameViewResolver ( ) ; org.springframework.boot.autoconfigure.social.BeanNameViewResolver . setOrder ( Ordered . HIGHEST_PRECEDENCE ) ; return org.springframework.boot.autoconfigure.social.BeanNameViewResolver ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( SignInAdapter .class ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.social.ProviderSignInController org.springframework.boot.autoconfigure.social.ProviderSignInController ( ConnectionFactoryLocator org.springframework.boot.autoconfigure.social.ConnectionFactoryLocator , UsersConnectionRepository org.springframework.boot.autoconfigure.social.UsersConnectionRepository , SignInAdapter org.springframework.boot.autoconfigure.social.SignInAdapter ) { ProviderSignInController org.springframework.boot.autoconfigure.social.ProviderSignInController = new ProviderSignInController ( org.springframework.boot.autoconfigure.social.ConnectionFactoryLocator , org.springframework.boot.autoconfigure.social.UsersConnectionRepository , org.springframework.boot.autoconfigure.social.SignInAdapter ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>> ) ) { org.springframework.boot.autoconfigure.social.ProviderSignInController . setSignInInterceptors ( this . java.util.List<org.springframework.boot.autoconfigure.social.ProviderSignInInterceptor<?>> ) ; } return org.springframework.boot.autoconfigure.social.ProviderSignInController ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.social.UserIdSource org.springframework.boot.autoconfigure.social.UserIdSource ( ) { return new UserIdSource ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.social.UserIdSource org.springframework.boot.autoconfigure.social.UserIdSource ( ) { return new org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration.SecurityContextUserIdSource ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.social.SpringSocialDialect org.springframework.boot.autoconfigure.social.SpringSocialDialect ( ) { return new SpringSocialDialect ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { SecurityContext org.springframework.boot.autoconfigure.social.SecurityContext = SecurityContextHolder . getContext ( ) ; Authentication org.springframework.boot.autoconfigure.social.Authentication = org.springframework.boot.autoconfigure.social.SecurityContext . getAuthentication ( ) ; Assert . state ( org.springframework.boot.autoconfigure.social.Authentication != null , STRING + STRING ) ; return org.springframework.boot.autoconfigure.social.Authentication . getName ( ) ; }  <METHOD_END>
