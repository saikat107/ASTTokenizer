<METHOD_START> @ BeforeClass public static void void ( ) { resetContextCache ( ) ; java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; java.util.concurrent.atomic.AtomicInteger . void ( NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithCleanMethodsAndDefaultModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithCleanMethodsAndDefaultModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithAfterEachTestMethodModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithAfterEachTestMethodModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( NUMBER ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.InheritedClassLevelDirtiesContextWithDirtyMethodsTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; void ( ) ; void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.ClassLevelDirtiesContextWithCleanMethodsAndAfterClassModeTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , int int ) { final int int = NUMBER ; final int int = int ; final int int = int ; final TrackingTestNGTestListener org.springframework.test.context.cache.TrackingTestNGTestListener = new TrackingTestNGTestListener ( ) ; final TestNG org.springframework.test.context.cache.TestNG = new TestNG ( ) ; org.springframework.test.context.cache.TestNG . addListener ( ( ITestNGListener ) org.springframework.test.context.cache.TrackingTestNGTestListener ) ; org.springframework.test.context.cache.TestNG . setTestClasses ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } ) ; org.springframework.test.context.cache.TestNG . setVerbose ( NUMBER ) ; org.springframework.test.context.cache.TestNG . run ( ) ; assertEquals ( STRING + java.lang.Class<> + STRING , int , listener . testFailureCount ) ; assertEquals ( STRING + java.lang.Class<> + STRING , int , listener . testStartCount ) ; assertEquals ( STRING + java.lang.Class<> + STRING , int , listener . testSuccessCount ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { void ( org.springframework.test.context.cache.ClassLevelDirtiesContextTestNGTests.CleanTestCase .class , NUMBER ) ; assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { assertContextCacheStatistics ( STRING , NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { org . org.testng . Assert . assertNotNull ( this . org.springframework.test.context.cache.ApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ org . org.testng . org.testng . org.testng @ DirtiesContext void void ( ) { void ( ) ; }  <METHOD_END>
