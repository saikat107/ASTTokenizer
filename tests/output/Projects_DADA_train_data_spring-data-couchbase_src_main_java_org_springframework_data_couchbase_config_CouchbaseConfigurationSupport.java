<METHOD_START> protected java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> ( ) java.lang.ClassNotFoundException { java.lang.String java.lang.String = java.lang.String ( ) ; java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.HashSet<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { ClassPathScanningCandidateComponentProvider org.springframework.data.couchbase.config.ClassPathScanningCandidateComponentProvider = new ClassPathScanningCandidateComponentProvider ( false ) ; org.springframework.data.couchbase.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Document .class ) ) ; org.springframework.data.couchbase.config.ClassPathScanningCandidateComponentProvider . addIncludeFilter ( new AnnotationTypeFilter ( Persistent .class ) ) ; for ( BeanDefinition org.springframework.data.couchbase.config.BeanDefinition : org.springframework.data.couchbase.config.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ) { java.util.Set<java.lang.Class<?>> . boolean ( ClassUtils . forName ( org.springframework.data.couchbase.config.BeanDefinition . getBeanClassName ( ) , AbstractReactiveCouchbaseConfiguration .class . java.lang.ClassLoader ( ) ) ) ; } } return java.util.Set<java.lang.Class<?>> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return MappingCouchbaseConverter . TYPEKEY_DEFAULT ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = BeanNames . COUCHBASE_MAPPING_CONVERTER ) public org.springframework.data.couchbase.config.MappingCouchbaseConverter org.springframework.data.couchbase.config.MappingCouchbaseConverter ( ) java.lang.Exception { MappingCouchbaseConverter org.springframework.data.couchbase.config.MappingCouchbaseConverter = new MappingCouchbaseConverter ( org.springframework.data.couchbase.config.CouchbaseMappingContext ( ) , java.lang.String ( ) ) ; org.springframework.data.couchbase.config.MappingCouchbaseConverter . setCustomConversions ( org.springframework.data.couchbase.config.CustomConversions ( ) ) ; return org.springframework.data.couchbase.config.MappingCouchbaseConverter ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = BeanNames . COUCHBASE_TRANSLATION_SERVICE ) public org.springframework.data.couchbase.config.TranslationService org.springframework.data.couchbase.config.TranslationService ( ) { final JacksonTranslationService org.springframework.data.couchbase.config.JacksonTranslationService = new JacksonTranslationService ( ) ; org.springframework.data.couchbase.config.JacksonTranslationService . afterPropertiesSet ( ) ; return org.springframework.data.couchbase.config.JacksonTranslationService ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = BeanNames . COUCHBASE_MAPPING_CONTEXT ) public org.springframework.data.couchbase.config.CouchbaseMappingContext org.springframework.data.couchbase.config.CouchbaseMappingContext ( ) java.lang.Exception { CouchbaseMappingContext org.springframework.data.couchbase.config.CouchbaseMappingContext = new CouchbaseMappingContext ( ) ; org.springframework.data.couchbase.config.CouchbaseMappingContext . setInitialEntitySet ( java.util.Set<java.lang.Class<?>> ( ) ) ; org.springframework.data.couchbase.config.CouchbaseMappingContext . setSimpleTypeHolder ( org.springframework.data.couchbase.config.CustomConversions ( ) . getSimpleTypeHolder ( ) ) ; org.springframework.data.couchbase.config.CouchbaseMappingContext . setFieldNamingStrategy ( org.springframework.data.couchbase.config.FieldNamingStrategy ( ) ) ; return org.springframework.data.couchbase.config.CouchbaseMappingContext ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = BeanNames . COUCHBASE_CUSTOM_CONVERSIONS ) public org.springframework.data.couchbase.config.CustomConversions org.springframework.data.couchbase.config.CustomConversions ( ) { return new CustomConversions ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = BeanNames . COUCHBASE_INDEX_MANAGER ) public org.springframework.data.couchbase.config.IndexManager org.springframework.data.couchbase.config.IndexManager ( ) { return new IndexManager ( false , false , false ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.data.couchbase.config.CouchbaseConfigurationSupport> ( ) . java.lang.Package ( ) . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.config.FieldNamingStrategy org.springframework.data.couchbase.config.FieldNamingStrategy ( ) { return boolean ( ) ? new CamelCaseAbbreviatingFieldNamingStrategy ( ) : PropertyNameFieldNamingStrategy . INSTANCE ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.config.Consistency org.springframework.data.couchbase.config.Consistency ( ) { return Consistency . DEFAULT_CONSISTENCY ; }  <METHOD_END>
