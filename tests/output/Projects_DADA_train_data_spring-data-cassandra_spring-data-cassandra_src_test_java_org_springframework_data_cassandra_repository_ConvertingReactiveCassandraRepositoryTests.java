<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { Person .class . java.lang.Package ( ) . java.lang.String ( ) } ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { KeyspaceMetadata org.springframework.data.cassandra.repository.KeyspaceMetadata = org.springframework.data.cassandra.repository.Session . getCluster ( ) . getMetadata ( ) . getKeyspace ( org.springframework.data.cassandra.repository.Session . getLoggedKeyspace ( ) ) ; TableMetadata org.springframework.data.cassandra.repository.TableMetadata = org.springframework.data.cassandra.repository.KeyspaceMetadata . getTable ( STRING ) ; if ( org.springframework.data.cassandra.repository.TableMetadata . getIndex ( STRING ) == null ) { org.springframework.data.cassandra.repository.Session . execute ( STRING ) ; java.lang.Thread . void ( NUMBER ) ; } StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.MixedPersonRepository . deleteAll ( ) ) . verifyComplete ( ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; org.springframework.data.cassandra.repository.Person = new Person ( STRING , STRING , STRING ) ; StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.MixedPersonRepository . save ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person , org.springframework.data.cassandra.repository.Person ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonRepostitory . exists ( org.springframework.data.cassandra.repository.Person . getId ( ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonRepostitory . org.springframework.data.cassandra.repository.Publisher<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . expectNext ( org.springframework.data.cassandra.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonRepostitory . org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonDto> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . firstname ) . isEqualTo ( boyd . getFirstname ( ) ) ; assertThat ( actual . lastname ) . isEqualTo ( boyd . getLastname ( ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava1PersonRepostitory . exists ( org.springframework.data.cassandra.repository.Person . getId ( ) ) . test ( ) . awaitTerminalEvent ( ) . assertResult ( true ) . assertCompleted ( ) . assertNoErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava1PersonRepostitory . exists ( Single . just ( org.springframework.data.cassandra.repository.Person . getId ( ) ) ) . test ( ) . awaitTerminalEvent ( ) . assertResult ( true ) . assertCompleted ( ) . assertNoErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava1PersonRepostitory . org.springframework.data.cassandra.repository.Observable<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . awaitTerminalEvent ( ) . assertValueCount ( NUMBER ) . assertNoErrors ( ) . assertCompleted ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> < org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson > java.util.List<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> = org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava1PersonRepostitory . org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . awaitTerminalEvent ( ) . assertValueCount ( NUMBER ) . assertCompleted ( ) . assertNoErrors ( ) . getOnNextEvents ( ) ; org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson = java.util.List<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> . org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson ( NUMBER ) ; assertThat ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson . java.lang.String ( ) ) . isEqualTo ( org.springframework.data.cassandra.repository.Person . getFirstname ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava1PersonRepostitory . org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . awaitTerminalEvent ( ) . assertValue ( org.springframework.data.cassandra.repository.Person ) . assertNoErrors ( ) . assertCompleted ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . exists ( org.springframework.data.cassandra.repository.Person . getId ( ) ) . test ( ) . assertValue ( true ) . assertNoErrors ( ) . assertComplete ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . exists ( io . reactivex . Single . just ( org.springframework.data.cassandra.repository.Person . getId ( ) ) ) . test ( ) . assertValue ( true ) . assertNoErrors ( ) . assertComplete ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . org.springframework.data.cassandra.repository.Flowable<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . assertValueCount ( NUMBER ) . assertNoErrors ( ) . assertComplete ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . findProjectedByLastname ( Maybe . just ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . test ( ) . assertValue ( actual -> { assertThat ( actual . getFirstname ( ) ) . isEqualTo ( carter . getFirstname ( ) ) ; return true ; } ) . assertComplete ( ) . assertNoErrors ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . findProjectedByLastname ( Single . just ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) . test ( ) . assertValue ( actual -> { assertThat ( actual . getFirstname ( ) ) . isEqualTo ( carter . getFirstname ( ) ) ; return true ; } ) . assertComplete ( ) . assertNoErrors ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.RxJava2PersonRepostitory . org.springframework.data.cassandra.repository.Maybe<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . assertValue ( org.springframework.data.cassandra.repository.Person ) . assertNoErrors ( ) . assertComplete ( ) . awaitTerminalEvent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.MixedPersonRepository . org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> ( org.springframework.data.cassandra.repository.Person . getLastname ( ) ) . test ( ) . awaitTerminalEvent ( ) . assertValue ( org.springframework.data.cassandra.repository.Person ) . assertCompleted ( ) . assertNoErrors ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.MixedPersonRepository . org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> ( Single . just ( this . org.springframework.data.cassandra.repository.Person . getLastname ( ) ) ) ) . expectNext ( org.springframework.data.cassandra.repository.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Publisher<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Publisher<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonDto> < org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonDto > org.springframework.data.cassandra.repository.Flux<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.PersonDto> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Observable<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Observable<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> < org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson > org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Flowable<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Flowable<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Maybe<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Maybe<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> io . io . io < org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson > findProjectedByLastname ( Maybe < java.lang.String > org.springframework.data.cassandra.repository.Maybe<java.lang.String> );  <METHOD_END>
<METHOD_START> io . io . io < org.springframework.data.cassandra.repository.ConvertingReactiveCassandraRepositoryTests.ProjectedPerson > findProjectedByLastname ( Single < java.lang.String > org.springframework.data.cassandra.repository.Single<java.lang.String> );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Single<org.springframework.data.cassandra.repository.Person> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> < Person > org.springframework.data.cassandra.repository.Mono<org.springframework.data.cassandra.repository.Person> ( Single < java.lang.String > org.springframework.data.cassandra.repository.Single<java.lang.String> );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
