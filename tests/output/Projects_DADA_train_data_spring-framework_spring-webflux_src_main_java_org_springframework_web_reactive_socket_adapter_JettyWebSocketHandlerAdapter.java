<METHOD_START> public void ( WebSocketHandler org.springframework.web.reactive.socket.adapter.WebSocketHandler , java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> < Session , JettyWebSocketSession > java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> ) { Assert . notNull ( org.springframework.web.reactive.socket.adapter.WebSocketHandler , STRING ) ; Assert . notNull ( java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> , STRING ) ; this . org.springframework.web.reactive.socket.adapter.WebSocketHandler = org.springframework.web.reactive.socket.adapter.WebSocketHandler ; this . java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> = java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> ; }  <METHOD_END>
<METHOD_START> @ OnWebSocketConnect public void void ( Session org.springframework.web.reactive.socket.adapter.Session ) { this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession = java.util.function.Function<org.springframework.web.reactive.socket.adapter.Session,org.springframework.web.reactive.socket.adapter.JettyWebSocketSession> . apply ( org.springframework.web.reactive.socket.adapter.Session ) ; this . org.springframework.web.reactive.socket.adapter.WebSocketHandler . handle ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession ) . subscribe ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession ) ; }  <METHOD_END>
<METHOD_START> @ OnWebSocketMessage public void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession != null ) { WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage = org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . TEXT , java.lang.String ) ; this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession . handleMessage ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) , org.springframework.web.reactive.socket.adapter.WebSocketMessage ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketMessage public void void ( byte [] byte[] , int int , int int ) { if ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession != null ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] , int , int ) ; WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage = org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . BINARY , java.nio.ByteBuffer ) ; org.springframework.web.reactive.socket.adapter.JettyWebSocketSession . handleMessage ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) , org.springframework.web.reactive.socket.adapter.WebSocketMessage ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketFrame public void void ( Frame org.springframework.web.reactive.socket.adapter.Frame ) { if ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession != null ) { if ( OpCode . PONG == org.springframework.web.reactive.socket.adapter.Frame . getOpCode ( ) ) { java.nio.ByteBuffer java.nio.ByteBuffer = ( org.springframework.web.reactive.socket.adapter.Frame . getPayload ( ) != null ? org.springframework.web.reactive.socket.adapter.Frame . getPayload ( ) : java.nio.ByteBuffer ) ; WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage = org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type . PONG , java.nio.ByteBuffer ) ; org.springframework.web.reactive.socket.adapter.JettyWebSocketSession . handleMessage ( org.springframework.web.reactive.socket.adapter.WebSocketMessage . getType ( ) , org.springframework.web.reactive.socket.adapter.WebSocketMessage ) ; } } }  <METHOD_END>
<METHOD_START> private < T > org.springframework.web.reactive.socket.adapter.WebSocketMessage org.springframework.web.reactive.socket.adapter.WebSocketMessage ( Type org.springframework.web.reactive.socket.adapter.Type , T T ) { WebSocketSession org.springframework.web.reactive.socket.adapter.WebSocketSession = this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession ; Assert . state ( org.springframework.web.reactive.socket.adapter.WebSocketSession != null , STRING ) ; if ( Type . TEXT . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { byte [] byte[] = ( ( java.lang.String ) T ) . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( byte[] ) ; return new WebSocketMessage ( Type . TEXT , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else if ( Type . BINARY . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( ( java.nio.ByteBuffer ) T ) ; return new WebSocketMessage ( Type . BINARY , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else if ( Type . PONG . equals ( org.springframework.web.reactive.socket.adapter.Type ) ) { DataBuffer org.springframework.web.reactive.socket.adapter.DataBuffer = org.springframework.web.reactive.socket.adapter.WebSocketSession . bufferFactory ( ) . wrap ( ( java.nio.ByteBuffer ) T ) ; return new WebSocketMessage ( Type . PONG , org.springframework.web.reactive.socket.adapter.DataBuffer ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + T ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketClose public void void ( int int , java.lang.String java.lang.String ) { if ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession != null ) { this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession . handleClose ( new CloseStatus ( int , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ OnWebSocketError public void void ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession != null ) { this . org.springframework.web.reactive.socket.adapter.JettyWebSocketSession . handleError ( java.lang.Throwable ) ; } }  <METHOD_END>
