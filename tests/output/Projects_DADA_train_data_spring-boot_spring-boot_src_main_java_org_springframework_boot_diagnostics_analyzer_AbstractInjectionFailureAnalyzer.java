<METHOD_START> @ java.lang.Override protected final org.springframework.boot.diagnostics.analyzer.FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( java.lang.Throwable java.lang.Throwable , T T ) { return org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( java.lang.Throwable , T , java.lang.String ( java.lang.Throwable ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Throwable java.lang.Throwable ) { UnsatisfiedDependencyException org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException = C ( java.lang.Throwable , UnsatisfiedDependencyException .class ) ; if ( org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException != null ) { return java.lang.String ( org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException ) ; } BeanInstantiationException org.springframework.boot.diagnostics.analyzer.BeanInstantiationException = C ( java.lang.Throwable , BeanInstantiationException .class ) ; if ( org.springframework.boot.diagnostics.analyzer.BeanInstantiationException != null ) { return java.lang.String ( org.springframework.boot.diagnostics.analyzer.BeanInstantiationException ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < C extends java.lang.Exception > C C ( java.lang.Throwable java.lang.Throwable , java.lang.Class<C> < C > java.lang.Class<C> ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable ; C C = null ; while ( java.lang.Throwable != null ) { if ( java.lang.Class<C> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ) { C = ( C ) java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } return C ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( UnsatisfiedDependencyException org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException ) { InjectionPoint org.springframework.boot.diagnostics.analyzer.InjectionPoint = org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException . getInjectionPoint ( ) ; if ( org.springframework.boot.diagnostics.analyzer.InjectionPoint != null ) { if ( org.springframework.boot.diagnostics.analyzer.InjectionPoint . getField ( ) != null ) { return java.lang.String . java.lang.String ( STRING , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getField ( ) . getName ( ) , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getField ( ) . getDeclaringClass ( ) . getName ( ) ) ; } if ( org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) != null ) { if ( org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getConstructor ( ) != null ) { return java.lang.String . java.lang.String ( STRING , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getParameterIndex ( ) , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getDeclaringClass ( ) . getName ( ) ) ; } return java.lang.String . java.lang.String ( STRING , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getParameterIndex ( ) , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getMethod ( ) . getName ( ) , org.springframework.boot.diagnostics.analyzer.InjectionPoint . getMethodParameter ( ) . getDeclaringClass ( ) . getName ( ) ) ; } } return org.springframework.boot.diagnostics.analyzer.UnsatisfiedDependencyException . getResourceDescription ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( BeanInstantiationException org.springframework.boot.diagnostics.analyzer.BeanInstantiationException ) { if ( org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getConstructingMethod ( ) != null ) { return java.lang.String . java.lang.String ( STRING , org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getConstructingMethod ( ) . getName ( ) , org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getConstructingMethod ( ) . getDeclaringClass ( ) . getName ( ) ) ; } if ( org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getConstructor ( ) != null ) { return java.lang.String . java.lang.String ( STRING , ClassUtils . getUserClass ( org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getConstructor ( ) . getDeclaringClass ( ) ) . getName ( ) ) ; } return org.springframework.boot.diagnostics.analyzer.BeanInstantiationException . getBeanClass ( ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.diagnostics.analyzer.FailureAnalysis org.springframework.boot.diagnostics.analyzer.FailureAnalysis ( java.lang.Throwable java.lang.Throwable , T T , java.lang.String java.lang.String );  <METHOD_END>
