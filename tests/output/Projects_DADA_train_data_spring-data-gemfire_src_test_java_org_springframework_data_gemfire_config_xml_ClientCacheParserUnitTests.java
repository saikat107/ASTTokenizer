<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . contains ( java.lang.String ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . contains ( java.lang.String ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( org.springframework.data.gemfire.config.xml.BeanDefinition , java.lang.String ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( java.lang.String ) . getValue ( ) ) . isEqualTo ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { assertThat ( new ClientCacheParser ( ) . getBeanClass ( org.w3c.dom.Element ) ) . isEqualTo ( ClientCacheFactoryBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.w3c.dom.NodeList org.w3c.dom.NodeList = mock ( org.w3c.dom.NodeList .class ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( null ) ; when ( org.w3c.dom.Element . org.w3c.dom.NodeList ( ) ) . thenReturn ( org.w3c.dom.NodeList ) ; when ( org.w3c.dom.NodeList . int ( ) ) . thenReturn ( NUMBER ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; final BeanDefinitionRegistry org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry = mock ( BeanDefinitionRegistry .class ) ; when ( org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry . containsBeanDefinition ( anyString ( ) ) ) . thenReturn ( false ) ; ClientCacheParser org.springframework.data.gemfire.config.xml.ClientCacheParser = new ClientCacheParser ( ) { @ java.lang.Override protected org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ( ParserContext org.springframework.data.gemfire.config.xml.ParserContext ) { return org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ; } } ; org.springframework.data.gemfire.config.xml.ClientCacheParser . doParse ( org.w3c.dom.Element , null , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; PropertyValues org.springframework.data.gemfire.config.xml.PropertyValues = org.springframework.data.gemfire.config.xml.BeanDefinition . getPropertyValues ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.PropertyValues ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ( ParserContext org.springframework.data.gemfire.config.xml.ParserContext ) { return org.springframework.data.gemfire.config.xml.BeanDefinitionRegistry ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.w3c.dom.Element . java.lang.String ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; BeanDefinitionBuilder org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( ) ; new ClientCacheParser ( ) . postProcessDynamicRegionSupport ( org.w3c.dom.Element , org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder ) ; BeanDefinition org.springframework.data.gemfire.config.xml.BeanDefinition = org.springframework.data.gemfire.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.config.xml.BeanDefinition ) . isNotNull ( ) ; void ( org.springframework.data.gemfire.config.xml.BeanDefinition , STRING , STRING ) ; verify ( org.w3c.dom.Element , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; }  <METHOD_END>
