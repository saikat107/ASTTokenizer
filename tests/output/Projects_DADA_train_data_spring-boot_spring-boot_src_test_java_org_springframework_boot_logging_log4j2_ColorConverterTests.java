<METHOD_START> @ BeforeClass public static void void ( ) { AnsiOutput . setEnabled ( AnsiOutput . Enabled . ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { AnsiOutput . setEnabled ( AnsiOutput . Enabled . DETECT ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent = new org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.log4j2.ColorConverter org.springframework.boot.logging.log4j2.ColorConverter ( java.lang.String java.lang.String ) { return ColorConverter . newInstance ( null , new java.lang.String [] { this . java.lang.String , java.lang.String } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( STRING ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent . void ( Level . FATAL ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( null ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent . void ( Level . ERROR ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( null ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent . void ( Level . WARN ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( null ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent . void ( Level . DEBUG ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( null ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent . void ( Level . TRACE ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; org.springframework.boot.logging.log4j2.ColorConverter ( null ) . format ( this . org.springframework.boot.logging.log4j2.ColorConverterTests.TestLogEvent , java.lang.StringBuilder ) ; assertThat ( java.lang.StringBuilder . java.lang.String ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.logging.log4j2.Level org.springframework.boot.logging.log4j2.Level ( ) { return this . org.springframework.boot.logging.log4j2.Level ; }  <METHOD_END>
<METHOD_START> public void void ( Level org.springframework.boot.logging.log4j2.Level ) { this . org.springframework.boot.logging.log4j2.Level = org.springframework.boot.logging.log4j2.Level ; }  <METHOD_END>
