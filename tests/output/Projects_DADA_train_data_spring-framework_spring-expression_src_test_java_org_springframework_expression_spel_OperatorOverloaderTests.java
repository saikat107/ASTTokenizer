<METHOD_START> @ Test public void void ( ) java.lang.Exception { evaluateAndCheckError ( STRING , SpelMessage . OPERATOR_NOT_SUPPORTED_BETWEEN_TYPES ) ; StandardEvaluationContext org.springframework.expression.spel.StandardEvaluationContext = TestScenarioCreator . getTestEvaluationContext ( ) ; org.springframework.expression.spel.StandardEvaluationContext . setOperatorOverloader ( new org.springframework.expression.spel.OperatorOverloaderTests.StringAndBooleanAddition ( ) ) ; SpelExpression org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; org.springframework.expression.spel.SpelExpression = ( SpelExpression ) parser . parseExpression ( STRING ) ; assertEquals ( STRING , org.springframework.expression.spel.SpelExpression . getValue ( org.springframework.expression.spel.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Operation org.springframework.expression.spel.Operation , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.EvaluationException { if ( org.springframework.expression.spel.Operation == Operation . ADD ) { return ( ( java.lang.String ) java.lang.Object ) + ( ( java.lang.Boolean ) java.lang.Object ) . java.lang.String ( ) ; } else { return java.lang.Object ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Operation org.springframework.expression.spel.Operation , java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.expression.spel.EvaluationException { if ( java.lang.Object instanceof java.lang.String && java.lang.Object instanceof java.lang.Boolean ) { return true ; } return false ; }  <METHOD_END>
