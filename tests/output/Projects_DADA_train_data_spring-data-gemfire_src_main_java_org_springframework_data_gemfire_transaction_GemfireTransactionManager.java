<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ) { this . org.springframework.data.gemfire.transaction.GemFireCache = org.springframework.data.gemfire.transaction.GemFireCache ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( this . org.springframework.data.gemfire.transaction.GemFireCache , STRING ) ; this . org.springframework.data.gemfire.transaction.GemFireCache . setCopyOnRead ( boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) org.springframework.data.gemfire.transaction.TransactionException { return org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ( ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) TransactionSynchronizationManager . getResource ( org.springframework.data.gemfire.transaction.GemFireCache ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) throws org.springframework.data.gemfire.transaction.TransactionException { return ( ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ) java.lang.Object ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.data.gemfire.transaction.TransactionDefinition ) throws org.springframework.data.gemfire.transaction.TransactionException { try { org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject = ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ) java.lang.Object ; GemFireCache org.springframework.data.gemfire.transaction.GemFireCache = org.springframework.data.gemfire.transaction.GemFireCache ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.transaction.GemFireCache ) ) ; } CacheTransactionManager org.springframework.data.gemfire.transaction.CacheTransactionManager = org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) ; org.springframework.data.gemfire.transaction.CacheTransactionManager . begin ( ) ; TransactionId org.springframework.data.gemfire.transaction.TransactionId = org.springframework.data.gemfire.transaction.CacheTransactionManager . getTransactionId ( ) ; if ( org.springframework.data.gemfire.transaction.TransactionId != null ) { TransactionSynchronizationManager . bindResource ( org.springframework.data.gemfire.transaction.GemFireCache , org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( org.springframework.data.gemfire.transaction.TransactionId ) ) ) ; } } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new CannotCreateTransactionException ( java.lang.String . java.lang.String ( STRING , STRING , STRING ) , java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.gemfire.transaction.DefaultTransactionStatus ) throws org.springframework.data.gemfire.transaction.TransactionException { try { if ( org.springframework.data.gemfire.transaction.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING ) ; } org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) . commit ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new NoTransactionException ( STRING , java.lang.IllegalStateException ) ; } catch ( org . org.apache . org.apache . org.apache . org.apache org.apache.geode.cache.TransactionException ) { throw new GemfireTransactionCommitException ( STRING , org.apache.geode.cache.TransactionException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws org.springframework.data.gemfire.transaction.TransactionException { if ( org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) . suspend ( ) != null ) { TransactionSynchronizationManager . unbindResource ( org.springframework.data.gemfire.transaction.GemFireCache ( ) ) ; return ( ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ) java.lang.Object ) . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( null ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.data.gemfire.transaction.TransactionException { if ( java.lang.Object instanceof org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) { org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder = ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) java.lang.Object ; boolean boolean = ( boolean ( ) ? org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) . tryResume ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder . org.springframework.data.gemfire.transaction.TransactionId ( ) , java.lang.Long ( ) , java.util.concurrent.TimeUnit ( ) ) : org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) . tryResume ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder . org.springframework.data.gemfire.transaction.TransactionId ( ) ) ) ; if ( boolean ) { TransactionSynchronizationManager . bindResource ( org.springframework.data.gemfire.transaction.GemFireCache ( ) , ( ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ) java.lang.Object ) . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.gemfire.transaction.DefaultTransactionStatus ) throws org.springframework.data.gemfire.transaction.TransactionException { try { if ( org.springframework.data.gemfire.transaction.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING ) ; } org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) . rollback ( ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new NoTransactionException ( STRING , java.lang.IllegalStateException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { TransactionSynchronizationManager . unbindResource ( org.springframework.data.gemfire.transaction.GemFireCache ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.gemfire.transaction.DefaultTransactionStatus ) { ( ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ) org.springframework.data.gemfire.transaction.DefaultTransactionStatus . getTransaction ( ) ) . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public void void ( GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ) { this . org.springframework.data.gemfire.transaction.GemFireCache = org.springframework.data.gemfire.transaction.GemFireCache ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.transaction.GemFireCache org.springframework.data.gemfire.transaction.GemFireCache ( ) { return this . org.springframework.data.gemfire.transaction.GemFireCache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.transaction.CacheTransactionManager org.springframework.data.gemfire.transaction.CacheTransactionManager ( ) { return org.springframework.data.gemfire.transaction.GemFireCache ( ) . getCacheTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public < K , V > void void ( Region < K , V > org.springframework.data.gemfire.transaction.Region<K,V> ) { Assert . notNull ( org.springframework.data.gemfire.transaction.Region<K,V> , STRING ) ; this . org.springframework.data.gemfire.transaction.GemFireCache = ( GemFireCache ) org.springframework.data.gemfire.transaction.Region<K,V> . getRegionService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.data.gemfire.transaction.GemFireCache ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> protected java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { java.lang.Long java.lang.Long = java.lang.Long ( ) ; return ( java.lang.Long != null && java.lang.Long > NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) { this . java.util.concurrent.TimeUnit = java.util.concurrent.TimeUnit ; }  <METHOD_END>
<METHOD_START> protected java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ( ) { return java.util.Optional . java.util.Optional<java.util.concurrent.TimeUnit> ( this . java.util.concurrent.TimeUnit ) . java.util.concurrent.TimeUnit ( java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) { org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject = new org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ( ) ; org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject . void ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) ; return org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheTransactionObject ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) != null ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) { return this . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ; }  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) { this . org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder = org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) { org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder = org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) ; void ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) ; return org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) { void ( org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ) ; return org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( TransactionId org.springframework.data.gemfire.transaction.TransactionId ) { org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder = new org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ( ) ; org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder . org.springframework.data.gemfire.transaction.TransactionId = org.springframework.data.gemfire.transaction.TransactionId ; return org.springframework.data.gemfire.transaction.GemfireTransactionManager.CacheHolder ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.transaction.TransactionId org.springframework.data.gemfire.transaction.TransactionId ( ) { return this . org.springframework.data.gemfire.transaction.TransactionId ; }  <METHOD_END>
