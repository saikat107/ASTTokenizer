<METHOD_START> public void ( StompSessionManager org.springframework.integration.stomp.outbound.StompSessionManager ) { Assert . notNull ( org.springframework.integration.stomp.outbound.StompSessionManager , STRING ) ; this . org.springframework.integration.stomp.outbound.StompSessionManager = org.springframework.integration.stomp.outbound.StompSessionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.stomp.outbound.Expression = new ValueExpression < java.lang.String > ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.stomp.outbound.Expression ) { Assert . notNull ( org.springframework.integration.stomp.outbound.Expression , STRING ) ; this . org.springframework.integration.stomp.outbound.Expression = org.springframework.integration.stomp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( HeaderMapper < StompHeaders > org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> ) { Assert . notNull ( org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> , STRING ) ; this . org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> = org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.integration.stomp.outbound.EvaluationContext ) { this . org.springframework.integration.stomp.outbound.EvaluationContext = org.springframework.integration.stomp.outbound.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.stomp.outbound.ApplicationEventPublisher ) { this . org.springframework.integration.stomp.outbound.ApplicationEventPublisher = org.springframework.integration.stomp.outbound.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; if ( this . org.springframework.integration.stomp.outbound.EvaluationContext == null ) { this . org.springframework.integration.stomp.outbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final Message < ? > org.springframework.integration.stomp.outbound.Message<?> ) throws java.lang.Exception { try { org.springframework.integration.stomp.outbound.StompSession ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageDeliveryException ( org.springframework.integration.stomp.outbound.Message<> , STRING + this + STRING , java.lang.Exception ) ; } StompSession org.springframework.integration.stomp.outbound.StompSession = this . org.springframework.integration.stomp.outbound.StompSession ; StompHeaders org.springframework.integration.stomp.outbound.StompHeaders = new StompHeaders ( ) ; this . org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> . fromHeaders ( org.springframework.integration.stomp.outbound.Message<> . getHeaders ( ) , org.springframework.integration.stomp.outbound.StompHeaders ) ; if ( org.springframework.integration.stomp.outbound.StompHeaders . getDestination ( ) == null ) { Assert . state ( this . org.springframework.integration.stomp.outbound.Expression != null , STRING + STRING ) ; java.lang.String java.lang.String = this . org.springframework.integration.stomp.outbound.Expression . getValue ( this . org.springframework.integration.stomp.outbound.EvaluationContext , org.springframework.integration.stomp.outbound.Message<> , java.lang.String .class ) ; org.springframework.integration.stomp.outbound.StompHeaders . setDestination ( java.lang.String ) ; } final StompSession . StompSession StompSession.Receiptable = org.springframework.integration.stomp.outbound.StompSession . send ( org.springframework.integration.stomp.outbound.StompHeaders , org.springframework.integration.stomp.outbound.Message<> . getPayload ( ) ) ; if ( StompSession.Receiptable . getReceiptId ( ) != null ) { final java.lang.String java.lang.String = org.springframework.integration.stomp.outbound.StompHeaders . getDestination ( ) ; final ApplicationEventPublisher org.springframework.integration.stomp.outbound.ApplicationEventPublisher = this . org.springframework.integration.stomp.outbound.ApplicationEventPublisher ; if ( org.springframework.integration.stomp.outbound.ApplicationEventPublisher != null ) { StompSession.Receiptable . addReceiptTask ( ( ) { StompReceiptEvent event = new StompReceiptEvent ( StompMessageHandler .this , destination , receiptable . getReceiptId ( ) , StompCommand . SEND , false ) ; event . setMessage ( message ) ; applicationEventPublisher . publishEvent ( event ) ; } ) ; } StompSession.Receiptable . addReceiptLostTask ( ( ) { if ( applicationEventPublisher != null ) { StompReceiptEvent event = new StompReceiptEvent ( StompMessageHandler .this , destination , receiptable . getReceiptId ( ) , StompCommand . SEND , true ) ; event . setMessage ( message ) ; applicationEventPublisher . publishEvent ( event ) ; } else { logger . error ( STRING + receiptable . getReceiptId ( ) + STRING + message + STRING + destination + STRING ) ; } } ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.stomp.outbound.StompSession org.springframework.integration.stomp.outbound.StompSession ( ) java.lang.Exception { synchronized ( this . java.util.concurrent.Semaphore ) { if ( this . org.springframework.integration.stomp.outbound.StompSession == null || ! this . org.springframework.integration.stomp.outbound.StompSessionManager . isConnected ( ) ) { this . org.springframework.integration.stomp.outbound.StompSessionManager . disconnect ( this . org.springframework.integration.stomp.outbound.StompSessionHandler ) ; this . org.springframework.integration.stomp.outbound.StompSessionManager . connect ( this . org.springframework.integration.stomp.outbound.StompSessionHandler ) ; if ( ! this . java.util.concurrent.Semaphore . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) || this . org.springframework.integration.stomp.outbound.StompSession == null ) { if ( this . java.lang.Throwable != null ) { if ( this . java.lang.Throwable instanceof ConnectionLostException ) { throw ( ConnectionLostException ) this . java.lang.Throwable ; } else { throw new ConnectionLostException ( this . java.lang.Throwable . java.lang.String ( ) ) ; } } else { throw new ConnectionLostException ( STRING + this . long ) ; } } } return this . org.springframework.integration.stomp.outbound.StompSession ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . boolean = false ; this . org.springframework.integration.stomp.outbound.StompSessionManager . disconnect ( this . org.springframework.integration.stomp.outbound.StompSessionHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.outbound.StompSession , StompHeaders org.springframework.integration.stomp.outbound.StompHeaders ) { org.springframework.integration.stomp.outbound.StompMessageHandler .this . java.lang.Throwable = null ; org.springframework.integration.stomp.outbound.StompMessageHandler .this . org.springframework.integration.stomp.outbound.StompSession = org.springframework.integration.stomp.outbound.StompSession ; org.springframework.integration.stomp.outbound.StompMessageHandler .this . java.util.concurrent.Semaphore . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompHeaders org.springframework.integration.stomp.outbound.StompHeaders , java.lang.Object java.lang.Object ) { java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object == null ) { java.lang.Object = org.springframework.integration.stomp.outbound.StompHeaders . getFirst ( StompHeaderAccessor . STOMP_MESSAGE_HEADER ) ; } if ( java.lang.Object != null ) { Message < ? > org.springframework.integration.stomp.outbound.Message<?> = getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.stomp.outbound.StompMessageHandler .this . org.springframework.integration.stomp.outbound.HeaderMapper<org.springframework.integration.stomp.outbound.StompHeaders> . toHeaders ( org.springframework.integration.stomp.outbound.StompHeaders ) ) . build ( ) ; MessagingException org.springframework.integration.stomp.outbound.MessagingException = new MessageDeliveryException ( org.springframework.integration.stomp.outbound.Message<> , STRING ) ; logger . error ( STRING , org.springframework.integration.stomp.outbound.MessagingException ) ; if ( org.springframework.integration.stomp.outbound.StompMessageHandler .this . org.springframework.integration.stomp.outbound.ApplicationEventPublisher != null ) { org.springframework.integration.stomp.outbound.StompMessageHandler .this . org.springframework.integration.stomp.outbound.ApplicationEventPublisher . publishEvent ( new StompExceptionEvent ( org.springframework.integration.stomp.outbound.StompMessageHandler .this , org.springframework.integration.stomp.outbound.MessagingException ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.outbound.StompSession , StompCommand org.springframework.integration.stomp.outbound.StompCommand , StompHeaders org.springframework.integration.stomp.outbound.StompHeaders , byte [] byte[] , java.lang.Throwable java.lang.Throwable ) { Message < byte [] > org.springframework.integration.stomp.outbound.Message<byte[]> = MessageBuilder . createMessage ( byte[] , StompHeaderAccessor . create ( org.springframework.integration.stomp.outbound.StompCommand , org.springframework.integration.stomp.outbound.StompHeaders ) . getMessageHeaders ( ) ) ; logger . error ( STRING + org.springframework.integration.stomp.outbound.StompSession + STRING + org.springframework.integration.stomp.outbound.Message<byte[]> + STRING , java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.outbound.StompSession , java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.stomp.outbound.StompMessageHandler .this . java.lang.Throwable = java.lang.Throwable ; org.springframework.integration.stomp.outbound.StompMessageHandler .this . org.springframework.integration.stomp.outbound.StompSession = null ; }  <METHOD_END>
