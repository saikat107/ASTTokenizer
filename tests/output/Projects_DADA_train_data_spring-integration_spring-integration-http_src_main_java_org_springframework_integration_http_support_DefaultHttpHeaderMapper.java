<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.http.support.BeanFactory ) throws org.springframework.integration.http.support.BeansException { this . org.springframework.integration.http.support.BeanFactory = org.springframework.integration.http.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] == java.lang.String[] ) { this . boolean = true ; } else if ( java.lang.String[] == java.lang.String[] ) { this . boolean = true ; } this . java.lang.String[] = java.lang.String[] != null ? java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) : new java.lang.String [ NUMBER ] ; java.lang.String [] java.lang.String[] = new java.lang.String [ this . java.lang.String[] . int ] ; for ( int int = NUMBER ; int < this . java.lang.String[] . int ; int ++ ) { if ( java.lang.String . boolean ( this . java.lang.String[] [ int ] ) || java.lang.String . boolean ( this . java.lang.String[] [ int ] ) ) { java.lang.String[] [ int ] = this . java.lang.String[] [ int ] ; } else { java.lang.String[] [ int ] = this . java.lang.String[] [ int ] . java.lang.String ( ) ; } } this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , this . java.lang.String[] . int + NUMBER ) ; this . java.lang.String[] [ this . java.lang.String[] . int - NUMBER ] = MessageHeaders . CONTENT_TYPE . toLowerCase ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] != null ? java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) : new java.lang.String [ NUMBER ] ; this . java.lang.String[] = new java.lang.String [ this . java.lang.String[] . int ] ; for ( int int = NUMBER ; int < this . java.lang.String[] . int ; int ++ ) { if ( java.lang.String . boolean ( this . java.lang.String[] [ int ] ) || java.lang.String . boolean ( this . java.lang.String[] [ int ] ) ) { this . java.lang.String[] [ int ] = this . java.lang.String[] [ int ] ; } else { this . java.lang.String[] [ int ] = this . java.lang.String[] [ int ] . java.lang.String ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String [] java.lang.String[] ) { Assert . notNull ( java.lang.String[] , STRING ) ; this . java.lang.String[] = java.util.Arrays . java.lang.String[] ( java.lang.String[] , java.lang.String[] . int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = ( java.lang.String != null ) ? java.lang.String : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MessageHeaders org.springframework.integration.http.support.MessageHeaders , HttpHeaders org.springframework.integration.http.support.HttpHeaders ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , CollectionUtils . arrayToList ( this . java.lang.String[] ) ) ) ; } for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : org.springframework.integration.http.support.MessageHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; if ( this . boolean ( java.lang.String ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object != null ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && ! MessageHeaders . CONTENT_TYPE . equalsIgnoreCase ( java.lang.String ) ) { java.lang.String = StringUtils . startsWithIgnoreCase ( java.lang.String , this . java.lang.String ) ? java.lang.String : this . java.lang.String + java.lang.String ; } if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; } this . void ( org.springframework.integration.http.support.HttpHeaders , java.lang.String , java.lang.Object ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( HttpHeaders org.springframework.integration.http.support.HttpHeaders ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , CollectionUtils . arrayToList ( this . java.lang.String[] ) ) ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.integration.http.support.HttpHeaders . keySet ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( ) ; if ( this . boolean ( java.lang.String ) ) { if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) && ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = StringUtils . startsWithIgnoreCase ( java.lang.String , this . java.lang.String ) ? java.lang.String : this . java.lang.String + java.lang.String ; java.lang.Object java.lang.Object = org.springframework.integration.http.support.HttpHeaders . containsKey ( java.lang.String ) ? this . java.lang.Object ( org.springframework.integration.http.support.HttpHeaders , java.lang.String ) : this . java.lang.Object ( org.springframework.integration.http.support.HttpHeaders , java.lang.String ) ; if ( java.lang.Object != null ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; } this . void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object ) ; } } else { java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.http.support.HttpHeaders , java.lang.String ) ; if ( java.lang.Object != null ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.Object ) ) ; } if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String = MessageHeaders . CONTENT_TYPE ; } this . void ( java.util.Map<java.lang.String,java.lang.Object> , java.lang.String , java.lang.Object ) ; } } } } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . org.springframework.integration.http.support.BeanFactory != null ) { this . org.springframework.integration.http.support.ConversionService = IntegrationUtils . getConversionService ( this . org.springframework.integration.http.support.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String [] java.lang.String[] , java.lang.String java.lang.String ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = this . java.lang.String[] ; if ( this . boolean ) { if ( this . boolean ( this . java.lang.String[] , java.lang.String ) ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String ) ) ; } return false ; } } else if ( this . boolean ) { java.lang.String[] = this . java.lang.String[] ; if ( this . boolean ( this . java.lang.String[] , java.lang.String ) ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String ) ) ; } return false ; } } return this . boolean ( java.lang.String , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return this . boolean ( java.lang.String , this . java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] != null && java.lang.String[] . int > NUMBER ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } else if ( java.lang.String . boolean ( java.lang.String ) && java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } else if ( java.lang.String . boolean ( java.lang.String ) && java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } return true ; } } } if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.text.MessageFormat . java.lang.String ( STRING , java.lang.String ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> private void void ( HttpHeaders org.springframework.integration.http.support.HttpHeaders , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<> ) ) { java.util.List<org.springframework.integration.http.support.MediaType> < MediaType > java.util.List<org.springframework.integration.http.support.MediaType> = new java.util.ArrayList<org.springframework.integration.http.support.MediaType> < MediaType > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof MediaType ) { java.util.List<org.springframework.integration.http.support.MediaType> . add ( ( MediaType ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.util.List<org.springframework.integration.http.support.MediaType> . addAll ( MediaType . parseMediaTypes ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } org.springframework.integration.http.support.HttpHeaders . setAccept ( java.util.List<org.springframework.integration.http.support.MediaType> ) ; } } else if ( java.lang.Object instanceof MediaType ) { org.springframework.integration.http.support.HttpHeaders . setAccept ( java.util.Collections . java.util.List<T> ( ( MediaType ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { java.util.List<org.springframework.integration.http.support.MediaType> < MediaType > java.util.List<org.springframework.integration.http.support.MediaType> = new java.util.ArrayList<org.springframework.integration.http.support.MediaType> < MediaType > ( ) ; for ( java.lang.String java.lang.String : ( java.lang.String [] ) java.lang.Object ) { java.util.List<org.springframework.integration.http.support.MediaType> . add ( MediaType . parseMediaType ( java.lang.String ) ) ; } org.springframework.integration.http.support.HttpHeaders . setAccept ( java.util.List<org.springframework.integration.http.support.MediaType> ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setAccept ( MediaType . parseMediaTypes ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<> ) ) { java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = new java.util.ArrayList<java.nio.charset.Charset> < java.nio.charset.Charset > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof java.nio.charset.Charset ) { java.util.List<java.nio.charset.Charset> . boolean ( ( java.nio.charset.Charset ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset . java.nio.charset.Charset ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } org.springframework.integration.http.support.HttpHeaders . setAcceptCharset ( java.util.List<java.nio.charset.Charset> ) ; } } else if ( java.lang.Object instanceof java.nio.charset.Charset [] || java.lang.Object instanceof java.lang.String [] ) { java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = new java.util.ArrayList<java.nio.charset.Charset> < java.nio.charset.Charset > ( ) ; java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( java.lang.Object ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object instanceof java.nio.charset.Charset ) { java.util.List<java.nio.charset.Charset> . boolean ( ( java.nio.charset.Charset ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset . java.nio.charset.Charset ( ( java.lang.String ) java.lang.Object ) ) ; } } org.springframework.integration.http.support.HttpHeaders . setAcceptCharset ( java.util.List<java.nio.charset.Charset> ) ; } else if ( java.lang.Object instanceof java.nio.charset.Charset ) { org.springframework.integration.http.support.HttpHeaders . setAcceptCharset ( java.util.Collections . java.util.List<java.nio.charset.Charset> ( ( java.nio.charset.Charset ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( ( java.lang.String ) java.lang.Object ) ; java.util.List<java.nio.charset.Charset> < java.nio.charset.Charset > java.util.List<java.nio.charset.Charset> = new java.util.ArrayList<java.nio.charset.Charset> < java.nio.charset.Charset > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<java.nio.charset.Charset> . boolean ( java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String . java.lang.String ( ) ) ) ; } org.springframework.integration.http.support.HttpHeaders . setAcceptCharset ( java.util.List<java.nio.charset.Charset> ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<> ) ) { java.util.Set<org.springframework.integration.http.support.HttpMethod> < HttpMethod > java.util.Set<org.springframework.integration.http.support.HttpMethod> = new java.util.HashSet<org.springframework.integration.http.support.HttpMethod> < HttpMethod > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof HttpMethod ) { java.util.Set<org.springframework.integration.http.support.HttpMethod> . add ( ( HttpMethod ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.util.Set<org.springframework.integration.http.support.HttpMethod> . add ( HttpMethod . valueOf ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } org.springframework.integration.http.support.HttpHeaders . setAllow ( java.util.Set<org.springframework.integration.http.support.HttpMethod> ) ; } } else { if ( java.lang.Object instanceof HttpMethod ) { org.springframework.integration.http.support.HttpHeaders . setAllow ( java.util.Collections . java.util.Set<T> ( ( HttpMethod ) java.lang.Object ) ) ; } else if ( java.lang.Object instanceof HttpMethod [] ) { java.util.Set<org.springframework.integration.http.support.HttpMethod> < HttpMethod > java.util.Set<org.springframework.integration.http.support.HttpMethod> = new java.util.HashSet<org.springframework.integration.http.support.HttpMethod> < HttpMethod > ( ) ; java.util.Collections . boolean ( java.util.Set<org.springframework.integration.http.support.HttpMethod> , ( HttpMethod [] ) java.lang.Object ) ; org.springframework.integration.http.support.HttpHeaders . setAllow ( java.util.Set<org.springframework.integration.http.support.HttpMethod> ) ; } else if ( java.lang.Object instanceof java.lang.String || java.lang.Object instanceof java.lang.String [] ) { java.lang.String [] java.lang.String[] = ( java.lang.Object instanceof java.lang.String [] ) ? ( java.lang.String [] ) java.lang.Object : StringUtils . commaDelimitedListToStringArray ( ( java.lang.String ) java.lang.Object ) ; java.util.Set<org.springframework.integration.http.support.HttpMethod> < HttpMethod > java.util.Set<org.springframework.integration.http.support.HttpMethod> = new java.util.HashSet<org.springframework.integration.http.support.HttpMethod> < HttpMethod > ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.Set<org.springframework.integration.http.support.HttpMethod> . add ( HttpMethod . valueOf ( java.lang.String . java.lang.String ( ) ) ) ; } org.springframework.integration.http.support.HttpHeaders . setAllow ( java.util.Set<org.springframework.integration.http.support.HttpMethod> ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setCacheControl ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.http.support.HttpHeaders . setContentLength ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setContentLength ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( MessageHeaders . CONTENT_TYPE . equalsIgnoreCase ( java.lang.String ) ) { if ( java.lang.Object instanceof MediaType ) { org.springframework.integration.http.support.HttpHeaders . setContentType ( ( MediaType ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setContentType ( MediaType . parseMediaType ( ( java.lang.String ) java.lang.Object ) ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Date ) { org.springframework.integration.http.support.HttpHeaders . setDate ( ( ( java.util.Date ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.http.support.HttpHeaders . setDate ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { org.springframework.integration.http.support.HttpHeaders . setDate ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.integration.http.support.HttpHeaders . setDate ( this . long ( ( java.lang.String ) java.lang.Object , java.lang.String ) ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setETag ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Date ) { org.springframework.integration.http.support.HttpHeaders . setExpires ( ( ( java.util.Date ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.http.support.HttpHeaders . setExpires ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { org.springframework.integration.http.support.HttpHeaders . setExpires ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.integration.http.support.HttpHeaders . setExpires ( this . long ( ( java.lang.String ) java.lang.Object , java.lang.String ) ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Date ) { org.springframework.integration.http.support.HttpHeaders . setIfModifiedSince ( ( ( java.util.Date ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.http.support.HttpHeaders . setIfModifiedSince ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { org.springframework.integration.http.support.HttpHeaders . setIfModifiedSince ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.integration.http.support.HttpHeaders . setIfModifiedSince ( this . long ( ( java.lang.String ) java.lang.Object , java.lang.String ) ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = null ; if ( java.lang.Object instanceof java.util.Date ) { java.lang.String = this . java.lang.String ( ( ( java.util.Date ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { java.lang.String = this . java.lang.String ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { java.lang.String = this . java.lang.String ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { long long = this . long ( ( java.lang.String ) java.lang.Object , java.lang.String ) ; java.lang.String = this . java.lang.String ( long ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } org.springframework.integration.http.support.HttpHeaders . set ( java.lang.String , java.lang.String ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setIfNoneMatch ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { java.lang.String java.lang.String = StringUtils . arrayToCommaDelimitedString ( ( java.lang.String [] ) java.lang.Object ) ; org.springframework.integration.http.support.HttpHeaders . setIfNoneMatch ( java.lang.String ) ; } else if ( java.lang.Object instanceof java.util.Collection ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<> ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof java.lang.String ) { java.util.List<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } org.springframework.integration.http.support.HttpHeaders . setIfNoneMatch ( java.util.List<java.lang.String> ) ; } } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.util.Date ) { org.springframework.integration.http.support.HttpHeaders . setLastModified ( ( ( java.util.Date ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.Number ) { org.springframework.integration.http.support.HttpHeaders . setLastModified ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { org.springframework.integration.http.support.HttpHeaders . setLastModified ( java.lang.Long . long ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { org.springframework.integration.http.support.HttpHeaders . setLastModified ( this . long ( ( java.lang.String ) java.lang.Object , java.lang.String ) ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.net.URI ) { org.springframework.integration.http.support.HttpHeaders . setLocation ( ( java.net.URI ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { org.springframework.integration.http.support.HttpHeaders . setLocation ( new java.net.URI ( ( java.lang.String ) java.lang.Object ) ) ; } catch ( java.net.URISyntaxException java.net.URISyntaxException ) { throw new java.lang.IllegalArgumentException ( java.net.URISyntaxException ) ; } } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . setPragma ( ( java.lang.String ) java.lang.Object ) ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ( java.lang.Object != null ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ; throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> ) ; } } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.support.HttpHeaders . set ( java.lang.String , ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String [] ) { for ( java.lang.String java.lang.String : ( java.lang.String [] ) java.lang.Object ) { org.springframework.integration.http.support.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } } else if ( java.lang.Object instanceof java.lang.Iterable<?> < ? > ) { for ( java.lang.Object java.lang.Object : ( java.lang.Iterable<?> < ? > ) java.lang.Object ) { java.lang.String java.lang.String = null ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String = ( java.lang.String ) java.lang.Object ; } else { java.lang.String = this . java.lang.String ( java.lang.Object ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.http.support.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } else { org.springframework.integration.http.support.Log . warn ( STRING + java.lang.String + STRING + java.lang.Object + STRING + STRING ) ; } } } else { java.lang.String java.lang.String = this . java.lang.String ( java.lang.Object ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.http.support.HttpHeaders . set ( java.lang.String , java.lang.String ) ; } else { org.springframework.integration.http.support.Log . warn ( STRING + java.lang.String + STRING + java.lang.Object + STRING + STRING ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( HttpHeaders org.springframework.integration.http.support.HttpHeaders , java.lang.String java.lang.String ) { if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getAccept ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getAcceptCharset ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getAllow ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.integration.http.support.HttpHeaders . getCacheControl ( ) ; return ( StringUtils . hasText ( java.lang.String ) ) ? java.lang.String : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { long long = org.springframework.integration.http.support.HttpHeaders . getContentLength ( ) ; return ( long > - NUMBER ) ? long : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { long long = org.springframework.integration.http.support.HttpHeaders . getDate ( ) ; return ( long > - NUMBER ) ? long : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.integration.http.support.HttpHeaders . getETag ( ) ; return ( StringUtils . hasText ( java.lang.String ) ) ? java.lang.String : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { try { long long = org.springframework.integration.http.support.HttpHeaders . getExpires ( ) ; return ( long > - NUMBER ) ? long : null ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.http.support.Log . isDebugEnabled ( ) ) { org.springframework.integration.http.support.Log . debug ( java.lang.Exception . java.lang.String ( ) ) ; } return null ; } } else if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getIfNoneMatch ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { long long = org.springframework.integration.http.support.HttpHeaders . getIfModifiedSince ( ) ; return ( long > - NUMBER ) ? long : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.integration.http.support.HttpHeaders . getFirst ( java.lang.String ) ; return java.lang.String != null ? this . long ( java.lang.String , java.lang.String ) : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { long long = org.springframework.integration.http.support.HttpHeaders . getLastModified ( ) ; return ( long > - NUMBER ) ? long : null ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { return org.springframework.integration.http.support.HttpHeaders . getLocation ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { java.lang.String java.lang.String = org.springframework.integration.http.support.HttpHeaders . getPragma ( ) ; return ( StringUtils . hasText ( java.lang.String ) ) ? java.lang.String : null ; } return org.springframework.integration.http.support.HttpHeaders . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { if ( ObjectUtils . isArray ( java.lang.Object ) ) { java.lang.Object [] java.lang.Object[] = ObjectUtils . toObjectArray ( java.lang.Object ) ; if ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) ) { if ( java.lang.Object[] . int == NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object[] ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object[] [ NUMBER ] ) ; } } } else if ( java.lang.Object instanceof java.util.Collection<?> < ? > ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.util.Collection<?> < ? > ) java.lang.Object ; if ( ! CollectionUtils . isEmpty ( java.util.Collection<> ) ) { if ( java.util.Collection<> . int ( ) == NUMBER ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ) ; } else { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.util.Collection<> ) ; } } } else if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( this . org.springframework.integration.http.support.ConversionService != null && this . org.springframework.integration.http.support.ConversionService . canConvert ( TypeDescriptor . forObject ( java.lang.Object ) , TypeDescriptor . valueOf ( java.lang.String .class ) ) ) { return this . org.springframework.integration.http.support.ConversionService . convert ( java.lang.Object , java.lang.String .class ) ; } return null ; }  <METHOD_END>
<METHOD_START> private long long ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { for ( java.time.format.DateTimeFormatter java.time.format.DateTimeFormatter : java.time.format.DateTimeFormatter[] ) { try { return java.time.format.DateTimeFormatter . java.time.ZonedDateTime ( java.lang.String , java.time.ZonedDateTime :: java.time.ZonedDateTime ) . java.time.Instant ( ) . long ( ) ; } catch ( java.time.format.DateTimeParseException java.time.format.DateTimeParseException ) { } } throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( long long ) { return java.time.format.DateTimeFormatter[] [ NUMBER ] . java.lang.String ( java.time.Instant . java.time.Instant ( long ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.http.support.DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper ( ) { org.springframework.integration.http.support.DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new org.springframework.integration.http.support.DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; return org.springframework.integration.http.support.DefaultHttpHeaderMapper ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.http.support.DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper ( ) { org.springframework.integration.http.support.DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new org.springframework.integration.http.support.DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . void ( java.lang.String[] ) ; return org.springframework.integration.http.support.DefaultHttpHeaderMapper ; }  <METHOD_END>
