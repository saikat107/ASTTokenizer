<METHOD_START> public void ( Bson org.springframework.data.mongodb.core.convert.Bson ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.Bson , STRING ) ; if ( ! ( org.springframework.data.mongodb.core.convert.Bson instanceof Document ) && ! ( org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) ) { Assert . isInstanceOf ( Document .class , org.springframework.data.mongodb.core.convert.Bson , STRING ) ; } this . org.springframework.data.mongodb.core.convert.Bson = org.springframework.data.mongodb.core.convert.Bson ; }  <METHOD_END>
<METHOD_START> public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.lang.Object java.lang.Object ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) ; if ( ! java.lang.String . boolean ( STRING ) ) { BsonUtils . addToMap ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , java.lang.Object ) ; return; } java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; Bson org.springframework.data.mongodb.core.convert.Bson = this . org.springframework.data.mongodb.core.convert.Bson ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { org.springframework.data.mongodb.core.convert.Bson = org.springframework.data.mongodb.core.convert.Document ( java.lang.String , org.springframework.data.mongodb.core.convert.Bson ) ; } else { BsonUtils . addToMap ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.util.function.Supplier<java.util.Optional<java.lang.Object>> < java.util.Optional<java.lang.Object> < java.lang.Object > > java.util.function.Supplier<java.util.Optional<java.lang.Object>> ) { if ( boolean ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) ) { return; } java.util.function.Supplier<java.util.Optional<java.lang.Object>> . java.util.Optional<java.lang.Object> ( ) . void ( java.lang.Object -> void ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) ; if ( ! java.lang.String . boolean ( STRING ) ) { return BsonUtils . asMap ( this . org.springframework.data.mongodb.core.convert.Bson ) . get ( java.lang.String ) ; } java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String . java.lang.String[] ( STRING ) ) . java.util.Iterator<java.lang.String> ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = BsonUtils . asMap ( this . org.springframework.data.mongodb.core.convert.Bson ) ; java.lang.Object java.lang.Object = null ; while ( java.util.Map<java.lang.String,java.lang.Object> != null && java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( MongoPersistentProperty org.springframework.data.mongodb.core.convert.MongoPersistentProperty ) { Assert . notNull ( org.springframework.data.mongodb.core.convert.MongoPersistentProperty , STRING ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.convert.MongoPersistentProperty . getFieldName ( ) ; if ( ! java.lang.String . boolean ( STRING ) ) { if ( this . org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { return ( ( Document ) this . org.springframework.data.mongodb.core.convert.Bson ) . containsKey ( java.lang.String ) ; } if ( this . org.springframework.data.mongodb.core.convert.Bson instanceof DBObject ) { return ( ( DBObject ) this . org.springframework.data.mongodb.core.convert.Bson ) . containsField ( java.lang.String ) ; } } java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ; if ( this . org.springframework.data.mongodb.core.convert.Bson instanceof Document ) { java.util.Map<java.lang.String,java.lang.Object> = ( ( Document ) this . org.springframework.data.mongodb.core.convert.Bson ) ; } else { java.util.Map<java.lang.String,java.lang.Object> = ( ( DBObject ) this . org.springframework.data.mongodb.core.convert.Bson ) . toMap ( ) ; } java.lang.Object java.lang.Object = null ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String[] [ int - NUMBER ] ) ; java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object ) ; if ( java.util.Map<java.lang.String,java.lang.Object> == null ) { return false ; } } return java.util.Map<java.lang.String,java.lang.Object> . boolean ( java.lang.String[] [ java.lang.String[] . int - NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Document ) { return ( Document ) java.lang.Object ; } if ( java.lang.Object instanceof BasicDBObject ) { return ( BasicDBObject ) java.lang.Object ; } if ( java.lang.Object instanceof java.util.Map ) { return ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.lang.Object ; } return null ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.mongodb.core.convert.Document org.springframework.data.mongodb.core.convert.Document ( java.lang.String java.lang.String , Bson org.springframework.data.mongodb.core.convert.Bson ) { java.lang.Object java.lang.Object = BsonUtils . asMap ( org.springframework.data.mongodb.core.convert.Bson ) . get ( java.lang.String ) ; if ( java.lang.Object instanceof Document ) { return ( Document ) java.lang.Object ; } Document org.springframework.data.mongodb.core.convert.Document = new Document ( ) ; BsonUtils . addToMap ( org.springframework.data.mongodb.core.convert.Bson , java.lang.String , org.springframework.data.mongodb.core.convert.Document ) ; return org.springframework.data.mongodb.core.convert.Document ; }  <METHOD_END>
