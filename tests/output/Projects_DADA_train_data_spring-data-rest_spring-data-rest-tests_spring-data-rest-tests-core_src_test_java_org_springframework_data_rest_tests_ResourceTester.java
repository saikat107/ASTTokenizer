<METHOD_START> public static org.springframework.data.rest.tests.ResourceTester org.springframework.data.rest.tests.ResourceTester ( java.lang.Object java.lang.Object ) { assertThat ( java.lang.Object , is ( instanceOf ( ResourceSupport .class ) ) ) ; return new org.springframework.data.rest.tests.ResourceTester ( ( ResourceSupport ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void ( ResourceSupport org.springframework.data.rest.tests.ResourceSupport ) { Assert . notNull ( org.springframework.data.rest.tests.ResourceSupport , STRING ) ; this . org.springframework.data.rest.tests.ResourceSupport = org.springframework.data.rest.tests.ResourceSupport ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { assertThat ( org.springframework.data.rest.tests.ResourceSupport . getLinks ( ) . size ( ) , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.data.rest.tests.Link ( java.lang.String , java.lang.String == null ? null : is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.data.rest.tests.Link ( java.lang.String , java.lang.String == null ? null : endsWith ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private final org.springframework.data.rest.tests.Link org.springframework.data.rest.tests.Link ( java.lang.String java.lang.String , Matcher < java.lang.String > org.springframework.data.rest.tests.Matcher<java.lang.String> ) { Link org.springframework.data.rest.tests.Link = org.springframework.data.rest.tests.ResourceSupport . getLink ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING + org.springframework.data.rest.tests.ResourceSupport . getLinks ( ) , org.springframework.data.rest.tests.Link , is ( notNullValue ( ) ) ) ; if ( org.springframework.data.rest.tests.Matcher<java.lang.String> != null ) { assertThat ( org.springframework.data.rest.tests.Link . getHref ( ) , is ( org.springframework.data.rest.tests.Matcher<java.lang.String> ) ) ; } return org.springframework.data.rest.tests.Link ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.data.rest.tests.PagedResources<T> < T > org.springframework.data.rest.tests.PagedResources<T> ( ) { assertThat ( org.springframework.data.rest.tests.ResourceSupport , is ( instanceOf ( PagedResources .class ) ) ) ; return ( PagedResources < T > ) org.springframework.data.rest.tests.ResourceSupport ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.tests.ResourceTester org.springframework.data.rest.tests.ResourceTester ( ) { assertThat ( org.springframework.data.rest.tests.ResourceSupport , is ( instanceOf ( Resources .class ) ) ) ; java.lang.Object java.lang.Object = ( ( Resources < ? > ) org.springframework.data.rest.tests.ResourceSupport ) . getContent ( ) . iterator ( ) . next ( ) ; assertThat ( java.lang.Object , is ( instanceOf ( ResourceSupport .class ) ) ) ; return new org.springframework.data.rest.tests.ResourceTester ( ( ResourceSupport ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.data.rest.tests.ResourceTester.ContentResourceHandler org.springframework.data.rest.tests.ResourceTester.ContentResourceHandler ) { assertThat ( org.springframework.data.rest.tests.ResourceSupport , is ( instanceOf ( Resources .class ) ) ) ; for ( java.lang.Object java.lang.Object : ( ( Resources < ? > ) org.springframework.data.rest.tests.ResourceSupport ) . getContent ( ) ) { assertThat ( java.lang.Object , is ( instanceOf ( ResourceSupport .class ) ) ) ; org.springframework.data.rest.tests.ResourceTester.ContentResourceHandler . void ( org.springframework.data.rest.tests.ResourceTester ( java.lang.Object ) ) ; } }  <METHOD_END>
<METHOD_START> void void ( org.springframework.data.rest.tests.ResourceTester org.springframework.data.rest.tests.ResourceTester );  <METHOD_END>
<METHOD_START> public void ( Path org.springframework.data.rest.tests.Path ) { this . org.springframework.data.rest.tests.Path = org.springframework.data.rest.tests.Path ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( org.springframework.data.rest.tests.ResourceTester org.springframework.data.rest.tests.ResourceTester ) { java.lang.String java.lang.String = org.springframework.data.rest.tests.ResourceTester . org.springframework.data.rest.tests.Link ( STRING , null ) . getHref ( ) ; UriTemplate org.springframework.data.rest.tests.UriTemplate = new UriTemplate ( org.springframework.data.rest.tests.Path . toString ( ) ) ; assertThat ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.data.rest.tests.UriTemplate . toString ( ) ) , org.springframework.data.rest.tests.UriTemplate . matches ( java.lang.String ) , is ( true ) ) ; }  <METHOD_END>
