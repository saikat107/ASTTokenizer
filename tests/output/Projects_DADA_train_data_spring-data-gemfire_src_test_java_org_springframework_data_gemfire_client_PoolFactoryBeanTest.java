<METHOD_START> protected org.springframework.data.gemfire.client.ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint ( java.lang.String java.lang.String , int int ) { return new ConnectionEndpoint ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> protected java.net.InetSocketAddress java.net.InetSocketAddress ( java.lang.String java.lang.String , int int ) { return new java.net.InetSocketAddress ( java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { BeanFactory org.springframework.data.gemfire.client.BeanFactory = mock ( BeanFactory .class ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; final PoolFactory org.springframework.data.gemfire.client.PoolFactory = mock ( PoolFactory .class ) ; when ( org.springframework.data.gemfire.client.PoolFactory . create ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.client.Pool ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) { @ java.lang.Override protected org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( ) { return org.springframework.data.gemfire.client.PoolFactory ; } @ java.lang.Override boolean boolean ( ) { return false ; } } ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanFactory ( org.springframework.data.gemfire.client.BeanFactory ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setName ( null ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setFreeConnectionTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setIdleTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setKeepAlive ( false ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLoadConditioningInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLocators ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMinConnections ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMultiUserAuthentication ( false ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPingInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPrSingleHopEnabled ( true ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setReadTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServers ( java.util.Collections . java.util.List ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setStatisticInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionAckInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionEnabled ( true ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionMessageTrackingTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionRedundancy ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setThreadLocalConnections ( false ) ; org.springframework.data.gemfire.client.PoolFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getBeanFactory ( ) , is ( equalTo ( org.springframework.data.gemfire.client.BeanFactory ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getObject ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; verify ( org.springframework.data.gemfire.client.BeanFactory , times ( NUMBER ) ) . getBean ( eq ( ClientCache .class ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setFreeConnectionTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setIdleTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setLoadConditioningInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setMaxConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setMinConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setMultiuserAuthentication ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setPingInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setPRSingleHopEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setReadTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setRetryAttempts ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setServerGroup ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setStatisticInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setSubscriptionAckInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setSubscriptionEnabled ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setSubscriptionMessageTrackingTimeout ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setSubscriptionRedundancy ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . setThreadLocalConnections ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . addLocator ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . addServer ( eq ( STRING ) , eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.client.PoolFactory , times ( NUMBER ) ) . create ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.gemfire.client.PoolFactory org.springframework.data.gemfire.client.PoolFactory ( ) { return org.springframework.data.gemfire.client.PoolFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( null ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setName ( null ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getName ( ) , is ( nullValue ( ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setName ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . isDestroyed ( ) ) . thenReturn ( false ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.PoolFactoryBean . destroy ( ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.data.gemfire.client.PoolFactoryBean ) , is ( nullValue ( ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . releaseThreadLocalConnection ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . destroy ( eq ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; ReflectionUtils . setField ( PoolFactoryBean .class . java.lang.reflect.Field ( STRING ) , org.springframework.data.gemfire.client.PoolFactoryBean , false ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.PoolFactoryBean . destroy ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . isDestroyed ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . releaseThreadLocalConnection ( ) ; verify ( org.springframework.data.gemfire.client.Pool , never ( ) ) . destroy ( anyBoolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( null ) ; org.springframework.data.gemfire.client.PoolFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( Pool .class , new PoolFactoryBean ( ) . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( new PoolFactoryBean ( ) . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . addLocators ( org.springframework.data.gemfire.client.ConnectionEndpoint , org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLocators ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLocators ( java.util.Collections .< ConnectionEndpoint > java.util.List<org.springframework.data.gemfire.client.ConnectionEndpoint> ( ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getLocators ( ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . addServers ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; ConnectionEndpoint org.springframework.data.gemfire.client.ConnectionEndpoint = org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . addServers ( org.springframework.data.gemfire.client.ConnectionEndpoint , org.springframework.data.gemfire.client.ConnectionEndpoint ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServers ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . size ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . findOne ( STRING ) , is ( equalTo ( org.springframework.data.gemfire.client.ConnectionEndpoint ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServers ( java.util.Collections .< ConnectionEndpoint > java.util.List<org.springframework.data.gemfire.client.ConnectionEndpoint> ( ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getServers ( ) . isEmpty ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) , is ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setFreeConnectionTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setIdleTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLoadConditioningInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setLocators ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMinConnections ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setMultiUserAuthentication ( true ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPingInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPrSingleHopEnabled ( true ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setReadTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setRetryAttempts ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServerGroup ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setServers ( ArrayUtils . asArray ( org.springframework.data.gemfire.client.ConnectionEndpoint ( STRING , NUMBER ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setStatisticInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionAckInterval ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionEnabled ( true ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionMessageTrackingTimeout ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setSubscriptionRedundancy ( NUMBER ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setThreadLocalConnections ( false ) ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . isDestroyed ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getFreeConnectionTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getIdleTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getLoadConditioningInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getLocators ( ) , is ( equalTo ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getMaxConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getMinConnections ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getMultiuserAuthentication ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getName ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getPingInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getPRSingleHopEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getReadTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getRetryAttempts ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getServerGroup ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getServers ( ) , is ( equalTo ( java.util.Collections . java.util.List<java.net.InetSocketAddress> ( java.net.InetSocketAddress ( STRING , NUMBER ) ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSocketBufferSize ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getStatisticInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSubscriptionAckInterval ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSubscriptionEnabled ( ) , is ( equalTo ( true ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSubscriptionMessageTrackingTimeout ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getSubscriptionRedundancy ( ) , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getThreadLocalConnections ( ) , is ( equalTo ( false ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setName ( null ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) . getName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setBeanName ( STRING ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setName ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) . getName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; when ( org.springframework.data.gemfire.client.Pool . getPendingEventCount ( ) ) . thenReturn ( NUMBER ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( not ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getPendingEventCount ( ) , is ( equalTo ( NUMBER ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getPendingEventCount ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( STRING ) ; new PoolFactoryBean ( ) . getPool ( ) . getPendingEventCount ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; QueryService org.springframework.data.gemfire.client.QueryService = mock ( QueryService .class ) ; when ( org.springframework.data.gemfire.client.Pool . getQueryService ( ) ) . thenReturn ( org.springframework.data.gemfire.client.QueryService ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( not ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; assertThat ( org.springframework.data.gemfire.client.Pool . getQueryService ( ) , is ( equalTo ( org.springframework.data.gemfire.client.QueryService ) ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( STRING ) ; new PoolFactoryBean ( ) . getPool ( ) . getQueryService ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) { @ java.lang.Override public void void ( ) java.lang.Exception { throw new java.lang.IllegalStateException ( STRING ) ; } } ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( not ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.Pool . destroy ( ) ; org.springframework.data.gemfire.client.Pool . destroy ( true ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . destroy ( eq ( false ) ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . destroy ( eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) { @ java.lang.Override public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; throw new java.lang.IllegalStateException ( STRING ) ; } } ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.Pool . destroy ( ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; org.springframework.data.gemfire.client.Pool . destroy ( true ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; Pool org.springframework.data.gemfire.client.Pool = mock ( Pool .class ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( not ( sameInstance ( org.springframework.data.gemfire.client.Pool ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.PoolFactoryBean . setPool ( org.springframework.data.gemfire.client.Pool ) ; org.springframework.data.gemfire.client.Pool . releaseThreadLocalConnection ( ) ; verify ( org.springframework.data.gemfire.client.Pool , times ( NUMBER ) ) . releaseThreadLocalConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PoolFactoryBean org.springframework.data.gemfire.client.PoolFactoryBean = new PoolFactoryBean ( ) ; Pool org.springframework.data.gemfire.client.Pool = org.springframework.data.gemfire.client.PoolFactoryBean . getPool ( ) ; assertThat ( org.springframework.data.gemfire.client.Pool , is ( instanceOf ( PoolAdapter .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.client.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.client.ExpectedException . expectMessage ( STRING ) ; org.springframework.data.gemfire.client.Pool . releaseThreadLocalConnection ( ) ; }  <METHOD_END>
