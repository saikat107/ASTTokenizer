<METHOD_START> @ Before public void void ( ) { new java.io.File ( STRING ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( ! new java.io.File ( STRING ) . boolean ( ) ) ; new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.ftp.FtpParserInboundTests> ( ) ) . close ( ) ; assertTrue ( new java.io.File ( STRING ) . boolean ( ) ) ; assertTrue ( ! new java.io.File ( STRING ) . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( ! new java.io.File ( STRING ) . boolean ( ) ) ; try { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.ftp.FtpParserInboundTests> ( ) ) . close ( ) ; fail ( STRING ) ; } catch ( BeansException org.springframework.integration.ftp.BeansException ) { assertThat ( org.springframework.integration.ftp.BeansException , Matchers . instanceOf ( BeanCreationException .class ) ) ; java.lang.Throwable java.lang.Throwable = org.springframework.integration.ftp.BeansException . getCause ( ) ; assertThat ( java.lang.Throwable , Matchers . instanceOf ( BeanInitializationException .class ) ) ; java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; assertThat ( java.lang.Throwable , Matchers . instanceOf ( java.io.FileNotFoundException .class ) ) ; assertEquals ( STRING , java.lang.Throwable . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { new java.io.File ( STRING ) . boolean ( ) ; }  <METHOD_END>
