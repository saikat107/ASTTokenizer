<METHOD_START> public void ( ) { this( new PathMatchingResourcePatternResolver ( ) , null , true ); }  <METHOD_END>
<METHOD_START> public void ( ResourcePatternResolver org.springframework.core.io.support.ResourcePatternResolver , PropertyResolver org.springframework.core.io.support.PropertyResolver ) { this( org.springframework.core.io.support.ResourcePatternResolver , org.springframework.core.io.support.PropertyResolver , true ); }  <METHOD_END>
<METHOD_START> public void ( ResourcePatternResolver org.springframework.core.io.support.ResourcePatternResolver , PropertyResolver org.springframework.core.io.support.PropertyResolver , boolean boolean ) { Assert . notNull ( org.springframework.core.io.support.ResourcePatternResolver , STRING ) ; this . org.springframework.core.io.support.ResourcePatternResolver = org.springframework.core.io.support.ResourcePatternResolver ; this . org.springframework.core.io.support.PropertyResolver = org.springframework.core.io.support.PropertyResolver ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) . java.lang.String ( ) ; try { void ( this . org.springframework.core.io.support.ResourcePatternResolver . getResources ( java.lang.String ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.io.IOException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.IllegalArgumentException { if ( java.lang.Object instanceof java.util.Collection || ( java.lang.Object instanceof java.lang.Object [] && ! ( java.lang.Object instanceof Resource [] ) ) ) { java.util.Collection<?> < ? > java.util.Collection<?> = ( java.lang.Object instanceof java.util.Collection ? ( java.util.Collection<?> < ? > ) java.lang.Object : java.util.Arrays . java.util.List<java.lang.Object> ( ( java.lang.Object [] ) java.lang.Object ) ) ; java.util.List<org.springframework.core.io.support.Resource> < Resource > java.util.List<org.springframework.core.io.support.Resource> = new java.util.ArrayList<org.springframework.core.io.support.Resource> <> ( ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( ( java.lang.String ) java.lang.Object ) . java.lang.String ( ) ; try { Resource [] org.springframework.core.io.support.Resource[] = this . org.springframework.core.io.support.ResourcePatternResolver . getResources ( java.lang.String ) ; for ( Resource org.springframework.core.io.support.Resource : org.springframework.core.io.support.Resource[] ) { if ( ! java.util.List<org.springframework.core.io.support.Resource> . contains ( org.springframework.core.io.support.Resource ) ) { java.util.List<org.springframework.core.io.support.Resource> . add ( org.springframework.core.io.support.Resource ) ; } } } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.core.io.support.Log . isDebugEnabled ( ) ) { org.springframework.core.io.support.Log . debug ( STRING + java.lang.String + STRING , java.io.IOException ) ; } } } else if ( java.lang.Object instanceof Resource ) { Resource org.springframework.core.io.support.Resource = ( Resource ) java.lang.Object ; if ( ! java.util.List<org.springframework.core.io.support.Resource> . contains ( org.springframework.core.io.support.Resource ) ) { java.util.List<org.springframework.core.io.support.Resource> . add ( org.springframework.core.io.support.Resource ) ; } } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object + STRING + Resource .class . java.lang.String ( ) + STRING ) ; } } super. void ( java.util.List<org.springframework.core.io.support.Resource> . toArray ( new Resource [ java.util.List<org.springframework.core.io.support.Resource> . size ( ) ] ) ) ; } else { super. void ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . org.springframework.core.io.support.PropertyResolver == null ) { this . org.springframework.core.io.support.PropertyResolver = new StandardEnvironment ( ) ; } return ( this . boolean ? this . org.springframework.core.io.support.PropertyResolver . resolvePlaceholders ( java.lang.String ) : this . org.springframework.core.io.support.PropertyResolver . resolveRequiredPlaceholders ( java.lang.String ) ) ; }  <METHOD_END>
