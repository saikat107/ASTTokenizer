<METHOD_START> @ Before public void void ( ) java.lang.Exception { MappingCassandraConverter org.springframework.data.cassandra.core.MappingCassandraConverter = new MappingCassandraConverter ( ) ; CassandraTemplate org.springframework.data.cassandra.core.CassandraTemplate = new CassandraTemplate ( session , org.springframework.data.cassandra.core.MappingCassandraConverter ) ; org.springframework.data.cassandra.core.AsyncCassandraTemplate = new AsyncCassandraTemplate ( new AsyncCqlTemplate ( session ) , org.springframework.data.cassandra.core.MappingCassandraConverter ) ; SchemaTestUtils . potentiallyCreateTableFor ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( Person .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ) . isNull ( ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) ; ListenableFuture < java.lang.Long > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . count ( Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) ; org.springframework.data.cassandra.core.Person . setFirstname ( STRING ) ; Person org.springframework.data.cassandra.core.Person = java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNotNull ( ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) ; Person org.springframework.data.cassandra.core.Person = java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ) ; assertThat ( org.springframework.data.cassandra.core.Person ) . isNotNull ( ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ) ; java.lang.Boolean java.lang.Boolean = java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . deleteById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ; assertThat ( java.lang.Boolean ) . isTrue ( ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ) { try { return java.util.concurrent.Future<T> . T ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
