<METHOD_START> public void ( ) { ConfigurableMimeFileTypeMap org.springframework.mail.javamail.ConfigurableMimeFileTypeMap = new ConfigurableMimeFileTypeMap ( ) ; org.springframework.mail.javamail.ConfigurableMimeFileTypeMap . afterPropertiesSet ( ) ; this . javax.activation.FileTypeMap = org.springframework.mail.javamail.ConfigurableMimeFileTypeMap ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { this . java.util.Properties = java.util.Properties ; synchronized ( this ) { this . org.springframework.mail.javamail.Session = null ; } }  <METHOD_END>
<METHOD_START> public java.util.Properties java.util.Properties ( ) { return this . java.util.Properties ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( Session org.springframework.mail.javamail.Session ) { Assert . notNull ( org.springframework.mail.javamail.Session , STRING ) ; this . org.springframework.mail.javamail.Session = org.springframework.mail.javamail.Session ; }  <METHOD_END>
<METHOD_START> public synchronized org.springframework.mail.javamail.Session org.springframework.mail.javamail.Session ( ) { if ( this . org.springframework.mail.javamail.Session == null ) { this . org.springframework.mail.javamail.Session = Session . getInstance ( this . java.util.Properties ) ; } return this . org.springframework.mail.javamail.Session ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( javax.activation.FileTypeMap javax.activation.FileTypeMap ) { this . javax.activation.FileTypeMap = javax.activation.FileTypeMap ; }  <METHOD_END>
<METHOD_START> public javax.activation.FileTypeMap javax.activation.FileTypeMap ( ) { return this . javax.activation.FileTypeMap ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage ) throws org.springframework.mail.javamail.MailException { void ( new SimpleMailMessage [] { org.springframework.mail.javamail.SimpleMailMessage } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SimpleMailMessage ... org.springframework.mail.javamail.SimpleMailMessage[] ) throws org.springframework.mail.javamail.MailException { java.util.List<org.springframework.mail.javamail.MimeMessage> < MimeMessage > java.util.List<org.springframework.mail.javamail.MimeMessage> = new java.util.ArrayList <> ( simpleMessages . length ) ; for ( SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage : org.springframework.mail.javamail.SimpleMailMessage[] ) { MimeMailMessage org.springframework.mail.javamail.MimeMailMessage = new MimeMailMessage ( org.springframework.mail.javamail.MimeMessage ( ) ) ; org.springframework.mail.javamail.SimpleMailMessage . copyTo ( org.springframework.mail.javamail.MimeMailMessage ) ; java.util.List<org.springframework.mail.javamail.MimeMessage> . add ( org.springframework.mail.javamail.MimeMailMessage . getMimeMessage ( ) ) ; } void ( java.util.List<org.springframework.mail.javamail.MimeMessage> . toArray ( new MimeMessage [ java.util.List<org.springframework.mail.javamail.MimeMessage> . size ( ) ] ) , org.springframework.mail.javamail.SimpleMailMessage[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mail.javamail.MimeMessage org.springframework.mail.javamail.MimeMessage ( ) { return new SmartMimeMessage ( org.springframework.mail.javamail.Session ( ) , java.lang.String ( ) , javax.activation.FileTypeMap ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mail.javamail.MimeMessage org.springframework.mail.javamail.MimeMessage ( java.io.InputStream java.io.InputStream ) throws org.springframework.mail.javamail.MailException { try { return new MimeMessage ( org.springframework.mail.javamail.Session ( ) , java.io.InputStream ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MailParseException ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MailException { void ( new MimeMessage [] { org.springframework.mail.javamail.MimeMessage } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage ... org.springframework.mail.javamail.MimeMessage[] ) throws org.springframework.mail.javamail.MailException { void ( org.springframework.mail.javamail.MimeMessage[] , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator ) throws org.springframework.mail.javamail.MailException { void ( new MimeMessagePreparator [] { org.springframework.mail.javamail.MimeMessagePreparator } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessagePreparator ... org.springframework.mail.javamail.MimeMessagePreparator[] ) throws org.springframework.mail.javamail.MailException { try { java.util.List<org.springframework.mail.javamail.MimeMessage> < MimeMessage > java.util.List<org.springframework.mail.javamail.MimeMessage> = new java.util.ArrayList <> ( mimeMessagePreparators . length ) ; for ( MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator : org.springframework.mail.javamail.MimeMessagePreparator[] ) { MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.MimeMessage ( ) ; org.springframework.mail.javamail.MimeMessagePreparator . prepare ( org.springframework.mail.javamail.MimeMessage ) ; java.util.List<org.springframework.mail.javamail.MimeMessage> . add ( org.springframework.mail.javamail.MimeMessage ) ; } void ( java.util.List<org.springframework.mail.javamail.MimeMessage> . toArray ( new MimeMessage [ java.util.List<org.springframework.mail.javamail.MimeMessage> . size ( ) ] ) ) ; } catch ( MailException org.springframework.mail.javamail.MailException ) { throw org.springframework.mail.javamail.MailException ; } catch ( MessagingException org.springframework.mail.javamail.MessagingException ) { throw new MailParseException ( org.springframework.mail.javamail.MessagingException ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MailPreparationException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.mail.javamail.MessagingException { Transport org.springframework.mail.javamail.Transport = null ; try { org.springframework.mail.javamail.Transport = org.springframework.mail.javamail.Transport ( ) ; } finally { if ( org.springframework.mail.javamail.Transport != null ) { org.springframework.mail.javamail.Transport . close ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( MimeMessage [] org.springframework.mail.javamail.MimeMessage[] , java.lang.Object [] java.lang.Object[] ) throws org.springframework.mail.javamail.MailException { java.util.Map<java.lang.Object,java.lang.Exception> < java.lang.Object , java.lang.Exception > java.util.Map<java.lang.Object,java.lang.Exception> = new java.util.LinkedHashMap<java.lang.Object,java.lang.Exception> <> ( ) ; Transport org.springframework.mail.javamail.Transport = null ; try { for ( int int = NUMBER ; int < mimeMessages . length ; int ++ ) { if ( org.springframework.mail.javamail.Transport == null || ! org.springframework.mail.javamail.Transport . isConnected ( ) ) { if ( org.springframework.mail.javamail.Transport != null ) { try { org.springframework.mail.javamail.Transport . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } org.springframework.mail.javamail.Transport = null ; } try { org.springframework.mail.javamail.Transport = org.springframework.mail.javamail.Transport ( ) ; } catch ( AuthenticationFailedException org.springframework.mail.javamail.AuthenticationFailedException ) { throw new MailAuthenticationException ( org.springframework.mail.javamail.AuthenticationFailedException ) ; } catch ( java.lang.Exception java.lang.Exception ) { for ( int int = int ; int < mimeMessages . length ; int ++ ) { java.lang.Object java.lang.Object = ( java.lang.Object[] != null ? java.lang.Object[] [ int ] : org.springframework.mail.javamail.MimeMessage[] [ int ] ) ; java.util.Map<java.lang.Object,java.lang.Exception> . java.lang.Exception ( java.lang.Object , java.lang.Exception ) ; } throw new MailSendException ( STRING , java.lang.Exception , java.util.Map<java.lang.Object,java.lang.Exception> ) ; } } MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.MimeMessage[] [ int ] ; try { if ( org.springframework.mail.javamail.MimeMessage . getSentDate ( ) == null ) { org.springframework.mail.javamail.MimeMessage . setSentDate ( new java.util.Date ( ) ) ; } java.lang.String java.lang.String = org.springframework.mail.javamail.MimeMessage . getMessageID ( ) ; org.springframework.mail.javamail.MimeMessage . saveChanges ( ) ; if ( java.lang.String != null ) { org.springframework.mail.javamail.MimeMessage . setHeader ( java.lang.String , java.lang.String ) ; } org.springframework.mail.javamail.Transport . sendMessage ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.MimeMessage . getAllRecipients ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Object java.lang.Object = ( java.lang.Object[] != null ? java.lang.Object[] [ int ] : org.springframework.mail.javamail.MimeMessage ) ; java.util.Map<java.lang.Object,java.lang.Exception> . java.lang.Exception ( java.lang.Object , java.lang.Exception ) ; } } } finally { try { if ( org.springframework.mail.javamail.Transport != null ) { org.springframework.mail.javamail.Transport . close ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( ! java.util.Map<java.lang.Object,java.lang.Exception> . boolean ( ) ) { throw new MailSendException ( STRING , java.lang.Exception , java.util.Map<java.lang.Object,java.lang.Exception> ) ; } else { throw new MailSendException ( STRING , java.lang.Exception ) ; } } } if ( ! java.util.Map<java.lang.Object,java.lang.Exception> . boolean ( ) ) { throw new MailSendException ( java.util.Map<java.lang.Object,java.lang.Exception> ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( ) org.springframework.mail.javamail.MessagingException { java.lang.String java.lang.String = java.lang.String ( ) ; java.lang.String java.lang.String = java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = null ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = null ; } } Transport org.springframework.mail.javamail.Transport = org.springframework.mail.javamail.Transport ( org.springframework.mail.javamail.Session ( ) ) ; org.springframework.mail.javamail.Transport . connect ( java.lang.String ( ) , int ( ) , java.lang.String , java.lang.String ) ; return org.springframework.mail.javamail.Transport ; }  <METHOD_END>
<METHOD_START> protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { java.lang.String java.lang.String = java.lang.String ( ) ; if ( java.lang.String == null ) { java.lang.String = org.springframework.mail.javamail.Session . getProperty ( STRING ) ; if ( java.lang.String == null ) { java.lang.String = java.lang.String ; } } return org.springframework.mail.javamail.Session . getTransport ( java.lang.String ) ; }  <METHOD_END>
