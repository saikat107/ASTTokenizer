<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) MockRestResponseCreators . withSuccess ( ) . createResponse ( null ) ; assertEquals ( HttpStatus . OK , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withSuccess ( STRING , MediaType . TEXT_PLAIN ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . OK , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertArrayEquals ( STRING . byte[] ( ) , FileCopyUtils . copyToByteArray ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withSuccess ( STRING , null ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . OK , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . getContentType ( ) ) ; assertArrayEquals ( STRING . byte[] ( ) , FileCopyUtils . copyToByteArray ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = new java.net.URI ( STRING ) ; DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withCreatedEntity ( java.net.URI ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . CREATED , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertEquals ( java.net.URI , org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . getLocation ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withNoContent ( ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . NO_CONTENT , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withBadRequest ( ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . BAD_REQUEST , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withUnauthorizedRequest ( ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . UNAUTHORIZED , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withServerError ( ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultResponseCreator org.springframework.test.web.client.response.DefaultResponseCreator = MockRestResponseCreators . withStatus ( HttpStatus . FORBIDDEN ) ; MockClientHttpResponse org.springframework.test.web.client.response.MockClientHttpResponse = ( MockClientHttpResponse ) org.springframework.test.web.client.response.DefaultResponseCreator . createResponse ( null ) ; assertEquals ( HttpStatus . FORBIDDEN , org.springframework.test.web.client.response.MockClientHttpResponse . getStatusCode ( ) ) ; assertTrue ( org.springframework.test.web.client.response.MockClientHttpResponse . getHeaders ( ) . isEmpty ( ) ) ; assertNull ( org.springframework.test.web.client.response.MockClientHttpResponse . getBody ( ) ) ; }  <METHOD_END>
