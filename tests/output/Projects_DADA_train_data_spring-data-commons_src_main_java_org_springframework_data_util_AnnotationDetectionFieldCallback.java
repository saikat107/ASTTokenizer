<METHOD_START> public void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Field java.lang.reflect.Field ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { if ( this . java.util.Optional<java.lang.reflect.Field> . boolean ( ) ) { return; } if ( AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Field , java.lang.Class<> ) != null ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; this . java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional<java.lang.reflect.Field> ( java.lang.reflect.Field ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ( ) { return java.util.Optional<java.lang.reflect.Field> . java.util.Optional<java.lang.Class<?>> ( java.lang.reflect.Field :: java.lang.Class<?> ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.util.Optional<java.lang.Class<?>> ( ) . java.lang.Class<?> ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > java.util.Optional<T> < T > java.util.Optional<T> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; return java.util.Optional<java.lang.reflect.Field> . java.util.Optional<T> ( java.lang.reflect.Field -> ( T ) ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ) ; }  <METHOD_END>
