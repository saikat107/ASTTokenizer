<METHOD_START> @ Before public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( Person .class ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) {}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . ensureIndex ( new Index ( ) . on ( STRING , Direction . DESC ) . unique ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; MongoCollection < Document > org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollection ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( Person .class ) ) ; StepVerifier . create ( Flux . from ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . listIndexes ( ) ) . collectList ( ) ) . consumeNextWith ( indexInfo -> { assertThat ( indexInfo . size ( ) , is ( NUMBER ) ) ; Object indexKey = null ; boolean unique = false ; for ( Document ix : indexInfo ) { if ( STRING . equals ( ix . get ( STRING ) ) ) { indexKey = ix . get ( STRING ) ; unique = ( Boolean ) ix . get ( STRING ) ; } } assertThat ( ( ( Document ) indexKey ) , hasEntry ( STRING , - NUMBER ) ) ; assertThat ( unique , is ( true ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . ensureIndex ( new Index ( ) . on ( STRING , Direction . DESC ) . unique ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) . collectList ( ) ) . consumeNextWith ( indexInfos -> { assertThat ( indexInfos . size ( ) , is ( NUMBER ) ) ; IndexInfo ii = indexInfos . get ( NUMBER ) ; assertThat ( ii . isUnique ( ) , is ( true ) ) ; assertThat ( ii . isSparse ( ) , is ( false ) ) ; List < IndexField > indexFields = ii . getIndexFields ( ) ; IndexField field = indexFields . get ( NUMBER ) ; assertThat ( field , is ( IndexField . create ( STRING , Direction . DESC ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING + org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( Person .class ) + STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . dropAllIndexes ( ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory . getMongoDatabase ( ) . runCommand ( new org . org.bson . org.bson ( STRING , java.lang.String ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; ListIndexesPublisher < Document > org.springframework.data.mongodb.core.ListIndexesPublisher<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollection ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( Person .class ) ) . listIndexes ( ) ; StepVerifier . create ( Flux . from ( org.springframework.data.mongodb.core.ListIndexesPublisher<org.springframework.data.mongodb.core.Document> ) . collectList ( ) ) . consumeNextWith ( indexInfos -> { Document indexKey = null ; boolean unique = false ; for ( Document document : indexInfos ) { if ( STRING . equals ( document . get ( STRING ) ) ) { indexKey = ( org . bson . Document ) document . get ( STRING ) ; unique = ( Boolean ) document . get ( STRING ) ; } } assertThat ( indexKey , hasEntry ( STRING , - NUMBER ) ) ; assertThat ( unique , is ( true ) ) ; } ) . verifyComplete ( ) ; StepVerifier . create ( Flux . from ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . getIndexInfo ( ) . collectList ( ) ) ) . consumeNextWith ( indexInfos -> { IndexInfo info = indexInfos . get ( NUMBER ) ; assertThat ( info . isUnique ( ) , is ( true ) ) ; assertThat ( info . isSparse ( ) , is ( true ) ) ; List < IndexField > indexFields = info . getIndexFields ( ) ; IndexField field = indexFields . get ( NUMBER ) ; assertThat ( field , is ( IndexField . create ( STRING , Direction . DESC ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
