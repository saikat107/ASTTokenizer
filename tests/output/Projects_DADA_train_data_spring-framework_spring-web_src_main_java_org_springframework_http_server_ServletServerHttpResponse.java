<METHOD_START> public void ( HttpServletResponse org.springframework.http.server.HttpServletResponse ) { Assert . notNull ( org.springframework.http.server.HttpServletResponse , STRING ) ; this . org.springframework.http.server.HttpServletResponse = org.springframework.http.server.HttpServletResponse ; this . org.springframework.http.server.HttpHeaders = new org.springframework.http.server.ServletServerHttpResponse.ServletResponseHttpHeaders ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.HttpServletResponse org.springframework.http.server.HttpServletResponse ( ) { return this . org.springframework.http.server.HttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpStatus org.springframework.http.server.HttpStatus ) { Assert . notNull ( org.springframework.http.server.HttpStatus , STRING ) ; this . org.springframework.http.server.HttpServletResponse . setStatus ( org.springframework.http.server.HttpStatus . value ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.HttpHeaders org.springframework.http.server.HttpHeaders ( ) { return ( this . boolean ? HttpHeaders . readOnlyHttpHeaders ( this . org.springframework.http.server.HttpHeaders ) : this . org.springframework.http.server.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { this . boolean = true ; void ( ) ; return this . org.springframework.http.server.HttpServletResponse . getOutputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { void ( ) ; if ( this . boolean ) { this . org.springframework.http.server.HttpServletResponse . flushBuffer ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! this . boolean ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : this . org.springframework.http.server.HttpHeaders . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { this . org.springframework.http.server.HttpServletResponse . addHeader ( java.lang.String , java.lang.String ) ; } } if ( this . org.springframework.http.server.HttpServletResponse . getContentType ( ) == null && this . org.springframework.http.server.HttpHeaders . getContentType ( ) != null ) { this . org.springframework.http.server.HttpServletResponse . setContentType ( this . org.springframework.http.server.HttpHeaders . getContentType ( ) . toString ( ) ) ; } if ( this . org.springframework.http.server.HttpServletResponse . getCharacterEncoding ( ) == null && this . org.springframework.http.server.HttpHeaders . getContentType ( ) != null && this . org.springframework.http.server.HttpHeaders . getContentType ( ) . getCharset ( ) != null ) { this . org.springframework.http.server.HttpServletResponse . setCharacterEncoding ( this . org.springframework.http.server.HttpHeaders . getContentType ( ) . getCharset ( ) . name ( ) ) ; } this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return ( super. containsKey ( java.lang.Object ) || ( java.util.List<java.lang.String> ( java.lang.Object ) != null ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.http.server.HttpServletResponse . getHeader ( java.lang.String ) ; if ( java.lang.String != null ) { return java.lang.String ; } else { return super. getFirst ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Object java.lang.Object ) { Assert . isInstanceOf ( java.lang.String .class , java.lang.Object , STRING ) ; java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> = org.springframework.http.server.HttpServletResponse . getHeaders ( ( java.lang.String ) java.lang.Object ) ; boolean boolean = CollectionUtils . isEmpty ( java.util.Collection<java.lang.String> ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = super. get ( java.lang.Object ) ; boolean boolean = CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ; if ( boolean && boolean ) { return null ; } java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; if ( ! boolean ) { java.util.List<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ) ; } if ( ! boolean ) { java.util.List<java.lang.String> . boolean ( java.util.List<java.lang.String> ) ; } return java.util.List<java.lang.String> ; }  <METHOD_END>
