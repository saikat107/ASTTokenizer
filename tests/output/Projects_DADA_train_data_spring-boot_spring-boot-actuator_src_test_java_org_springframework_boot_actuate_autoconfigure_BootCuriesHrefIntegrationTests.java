<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { int int = int ( STRING , STRING , STRING , STRING ) ; assertThat ( java.lang.String ( STRING + int + STRING ) ) . isEqualTo ( STRING + int + STRING ) ; }  <METHOD_END>
<METHOD_START> private int int ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setClassLoader ( new java.lang.ClassLoader ( java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.BootCuriesHrefIntegrationTests> ( ) . java.lang.ClassLoader ( ) ) { @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return super. java.net.URL ( STRING ) ; } return super. java.net.URL ( java.lang.String ) ; } } ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.BootCuriesHrefIntegrationTests.TestConfiguration .class ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; return java.lang.Integer . int ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URL java.net.URL ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return super. java.net.URL ( STRING ) ; } return super. java.net.URL ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { ResponseEntity < java.lang.String > org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . getForEntity ( java.lang.String , java.lang.String .class ) ; JSONArray org.springframework.boot.actuate.autoconfigure.JSONArray = JsonPath . parse ( org.springframework.boot.actuate.autoconfigure.ResponseEntity<java.lang.String> . getBody ( ) ) . read ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.JSONArray ) . hasSize ( NUMBER ) ; return ( java.lang.String ) org.springframework.boot.actuate.autoconfigure.JSONArray . get ( NUMBER ) ; }  <METHOD_END>
