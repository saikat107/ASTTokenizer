<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( org.springframework.statemachine.StateMachineTests.Config1 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E2 ) . setHeader ( STRING , STRING ) . build ( ) ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E4 ) . setHeader ( STRING , STRING ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.StateMachineTests.Config2 .class ) ; context . refresh ( ) ; TestAction org.springframework.statemachine.TestAction = context . getBean ( STRING , TestAction .class ) ; TestAction org.springframework.statemachine.TestAction = context . getBean ( STRING , TestAction .class ) ; TestAction org.springframework.statemachine.TestAction = context . getBean ( STRING , TestAction .class ) ; TestAction org.springframework.statemachine.TestAction = context . getBean ( STRING , TestAction .class ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.StateMachineTests.TestListener org.springframework.statemachine.StateMachineTests.TestListener = new org.springframework.statemachine.StateMachineTests.TestListener ( ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineTests.TestListener ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( testAction2 . stateContexts . size ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction1 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction1 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( testAction2 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction2 . stateContexts . size ( ) , is ( NUMBER ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction3 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction3 . stateContexts . size ( ) , is ( NUMBER ) ) ; int int = testAction2 . stateContexts . size ( ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( testAction2 . stateContexts . size ( ) , is ( int ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER , NUMBER ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction4 . onExecuteLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( testAction4 . stateContexts . size ( ) , is ( NUMBER ) ) ; assertThat ( testAction2 . stateContexts . size ( ) , is ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.StateMachineTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.StateMachineTests.TestListener org.springframework.statemachine.StateMachineTests.TestListener = new org.springframework.statemachine.StateMachineTests.TestListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineTests.TestListener ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S20 , TestStates . S30 ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E2 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S2 , TestStates . S21 , TestStates . S30 ) ) ; org.springframework.statemachine.StateMachineTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E3 ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , containsInAnyOrder ( TestStates . S4 ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.StateMachineTests.Config4 .class ) ; context . refresh ( ) ; assertTrue ( context . containsBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE ) ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.StateMachineTests.TestListener2 org.springframework.statemachine.StateMachineTests.TestListener2 = new org.springframework.statemachine.StateMachineTests.TestListener2 ( ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.StateMachineTests.TestListener2 ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> , notNullValue ( ) ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; org.springframework.statemachine.StateMachineTests.TestListener2 . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener2 . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestListener2 . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { context . register ( BaseConfig .class , org.springframework.statemachine.StateMachineTests.Config5 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < TestStates , TestEvents > org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; assertThat ( org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener = new org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener ( ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; assertThat ( org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener . void ( ) ; org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( MessageBuilder . withPayload ( TestEvents . E1 ) . build ( ) ) ; assertThat ( org.springframework.statemachine.StateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . SI ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.StateMachineTests.TestStateEntryExitListener . java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { org.springframework.statemachine.Log . info ( STRING + java.lang.String + STRING + org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getMessageHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 , TestEvents . E4 ) . state ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.StateMachineTests.LoggingAction ( ) ) . action ( org.springframework.statemachine.StateMachineTests.LoggingAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) . action ( org.springframework.statemachine.StateMachineTests.LoggingAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E3 ) . action ( org.springframework.statemachine.StateMachineTests.LoggingAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S4 ) . target ( TestStates . S3 ) . event ( TestEvents . E4 ) . action ( org.springframework.statemachine.StateMachineTests.LoggingAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.StateMachineTests.LoggingAction org.springframework.statemachine.StateMachineTests.LoggingAction ( ) { return new org.springframework.statemachine.StateMachineTests.LoggingAction ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TaskExecutor org.springframework.statemachine.TaskExecutor ( ) { return new SyncTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) . state ( TestStates . S3 ) . state ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . action ( org.springframework.statemachine.TestAction ( ) ) . and ( ) . withInternal ( ) . source ( TestStates . S2 ) . timer ( NUMBER ) . action ( org.springframework.statemachine.TestAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S2 ) . target ( TestStates . S3 ) . event ( TestEvents . E2 ) . action ( org.springframework.statemachine.TestAction ( ) ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) . event ( TestEvents . E3 ) . action ( org.springframework.statemachine.TestAction ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestAction org.springframework.statemachine.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestAction org.springframework.statemachine.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestAction org.springframework.statemachine.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.TestAction org.springframework.statemachine.TestAction ( ) { return new TestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . state ( TestStates . SI ) . fork ( TestStates . S1 ) . state ( TestStates . S2 ) . end ( TestStates . SF ) . join ( TestStates . S3 ) . state ( TestStates . S4 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 ) . state ( TestStates . S21 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S30 ) . state ( TestStates . S30 ) . state ( TestStates . S31 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) . and ( ) . withExternal ( ) . source ( TestStates . S30 ) . target ( TestStates . S31 ) . event ( TestEvents . E3 ) . and ( ) . withFork ( ) . source ( TestStates . S1 ) . target ( TestStates . S20 ) . target ( TestStates . S30 ) . and ( ) . withJoin ( ) . source ( TestStates . S21 ) . source ( TestStates . S31 ) . target ( TestStates . S3 ) . and ( ) . withExternal ( ) . source ( TestStates . S3 ) . target ( TestStates . S4 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . SI ) . states ( java.util.EnumSet . java.util.EnumSet<E> ( TestStates .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . SI ) . target ( TestStates . SI ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < TestStates , TestEvents > org.springframework.statemachine.Transition<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Transition < java.lang.String , java.lang.String > org.springframework.statemachine.Transition<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { void ( int , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int , int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < TestStates , TestEvents > org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . add ( org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . clear ( ) ; java.util.List<org.springframework.statemachine.State<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents>> . clear ( ) ; }  <METHOD_END>
