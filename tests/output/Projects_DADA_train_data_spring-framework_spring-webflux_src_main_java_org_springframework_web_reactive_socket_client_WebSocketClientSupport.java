<METHOD_START> protected java.lang.String [] java.lang.String[] ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders , WebSocketHandler org.springframework.web.reactive.socket.client.WebSocketHandler ) { if ( org.springframework.web.reactive.socket.client.Log . isDebugEnabled ( ) ) { org.springframework.web.reactive.socket.client.Log . debug ( STRING + java.net.URI ) ; } return org.springframework.web.reactive.socket.client.WebSocketHandler . getSubProtocols ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.reactive.socket.client.HandshakeInfo org.springframework.web.reactive.socket.client.HandshakeInfo ( java.net.URI java.net.URI , HttpHeaders org.springframework.web.reactive.socket.client.HttpHeaders ) { if ( org.springframework.web.reactive.socket.client.Log . isDebugEnabled ( ) ) { org.springframework.web.reactive.socket.client.Log . debug ( STRING + java.net.URI + STRING + org.springframework.web.reactive.socket.client.HttpHeaders ) ; } java.lang.String java.lang.String = org.springframework.web.reactive.socket.client.HttpHeaders . getFirst ( java.lang.String ) ; return new HandshakeInfo ( java.net.URI , org.springframework.web.reactive.socket.client.HttpHeaders , Mono . empty ( ) , java.util.Optional . java.util.Optional<java.lang.String> ( java.lang.String ) ) ; }  <METHOD_END>
