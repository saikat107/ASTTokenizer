<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.support.utils.ConversionService org.springframework.integration.support.utils.ConversionService ( BeanFactory org.springframework.integration.support.utils.BeanFactory ) { return java.lang.Object ( org.springframework.integration.support.utils.BeanFactory , java.lang.String , ConversionService .class ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.support.utils.MessageBuilderFactory org.springframework.integration.support.utils.MessageBuilderFactory ( BeanFactory org.springframework.integration.support.utils.BeanFactory ) { MessageBuilderFactory org.springframework.integration.support.utils.MessageBuilderFactory = null ; if ( org.springframework.integration.support.utils.BeanFactory != null ) { try { org.springframework.integration.support.utils.MessageBuilderFactory = org.springframework.integration.support.utils.BeanFactory . getBean ( java.lang.String , MessageBuilderFactory .class ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( org.springframework.integration.support.utils.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.utils.Log . debug ( STRING + java.lang.String + STRING + java.lang.Exception . java.lang.String ( ) + STRING ) ; } } } else { if ( org.springframework.integration.support.utils.Log . isDebugEnabled ( ) ) { org.springframework.integration.support.utils.Log . debug ( STRING ) ; } if ( boolean ) { throw new java.lang.RuntimeException ( STRING ) ; } } if ( org.springframework.integration.support.utils.MessageBuilderFactory == null ) { org.springframework.integration.support.utils.MessageBuilderFactory = new DefaultMessageBuilderFactory ( ) ; } return org.springframework.integration.support.utils.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( BeanFactory org.springframework.integration.support.utils.BeanFactory , java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( org.springframework.integration.support.utils.BeanFactory , STRING ) ; if ( ! org.springframework.integration.support.utils.BeanFactory . containsBean ( java.lang.String ) ) { return null ; } return org.springframework.integration.support.utils.BeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public static byte [] byte[] ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { return java.lang.String != null ? java.lang.String . byte[] ( java.lang.String ) : null ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalArgumentException ( java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( byte [] byte[] , java.lang.String java.lang.String ) { try { return byte[] == null ? null : new java.lang.String ( byte[] , java.lang.String ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalArgumentException ( java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
