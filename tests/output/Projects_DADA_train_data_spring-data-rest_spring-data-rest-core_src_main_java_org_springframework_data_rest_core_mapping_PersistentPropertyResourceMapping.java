<METHOD_START> public void ( PersistentProperty < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> , ResourceMappings org.springframework.data.rest.core.mapping.ResourceMappings ) { Assert . notNull ( org.springframework.data.rest.core.mapping.PersistentProperty<> , STRING ) ; this . org.springframework.data.rest.core.mapping.PersistentProperty<?> = org.springframework.data.rest.core.mapping.PersistentProperty<> ; this . org.springframework.data.rest.core.mapping.ResourceMappings = org.springframework.data.rest.core.mapping.ResourceMappings ; this . java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> = org.springframework.data.rest.core.mapping.PersistentProperty<> . isAssociation ( ) ? org.springframework.data.rest.core.mapping.PersistentProperty<> . findAnnotation ( RestResource .class ) : java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; this . java.util.Optional<org.springframework.data.rest.core.mapping.Description> = org.springframework.data.rest.core.mapping.PersistentProperty<> . findAnnotation ( Description .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.Path org.springframework.data.rest.core.mapping.Path ( ) { return java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> . filter ( it -> StringUtils . hasText ( it . path ( ) ) ) . map ( it -> new Path ( it . path ( ) ) ) . orElseGet ( ( ) new Path ( property . getName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> . filter ( it -> StringUtils . hasText ( it . rel ( ) ) ) . map ( it -> it . rel ( ) ) . orElseGet ( ( ) property . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { if ( ! org.springframework.data.rest.core.mapping.PersistentProperty<> . isAssociation ( ) ) { return false ; } ResourceMapping org.springframework.data.rest.core.mapping.ResourceMapping = org.springframework.data.rest.core.mapping.ResourceMappings . getMetadataFor ( org.springframework.data.rest.core.mapping.PersistentProperty<> . getActualType ( ) ) ; return ! org.springframework.data.rest.core.mapping.ResourceMapping . isExported ( ) ? false : java.util.Optional<org.springframework.data.rest.core.mapping.RestResource> . map ( it -> it . exported ( ) ) . orElse ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.ResourceDescription org.springframework.data.rest.core.mapping.ResourceDescription ( ) { CollectionResourceMapping org.springframework.data.rest.core.mapping.CollectionResourceMapping = org.springframework.data.rest.core.mapping.ResourceMappings . getMetadataFor ( org.springframework.data.rest.core.mapping.PersistentProperty<> . getOwner ( ) . getType ( ) ) ; ResourceDescription org.springframework.data.rest.core.mapping.ResourceDescription = TypedResourceDescription . defaultFor ( org.springframework.data.rest.core.mapping.CollectionResourceMapping . getItemResourceRel ( ) , org.springframework.data.rest.core.mapping.PersistentProperty<> ) ; return Optionals .< ResourceDescription > firstNonEmpty ( ( ) description . map ( it -> new AnnotationBasedResourceDescription ( it , fallback ) ) , ( ) annotation . map ( it -> new AnnotationBasedResourceDescription ( it . description ( ) , fallback ) ) ) . orElse ( org.springframework.data.rest.core.mapping.ResourceDescription ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.core.mapping.PersistentProperty<?> < ? > org.springframework.data.rest.core.mapping.PersistentProperty<?> ( ) { return org.springframework.data.rest.core.mapping.PersistentProperty<> ; }  <METHOD_END>
