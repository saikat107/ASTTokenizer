<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.expression.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.expression.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , new RootBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ) ; org.springframework.integration.expression.GenericApplicationContext . registerBeanDefinition ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , new RootBeanDefinition ( ConversionServiceFactoryBean .class ) ) ; org.springframework.integration.expression.GenericApplicationContext . refresh ( ) ; StandardEvaluationContext org.springframework.integration.expression.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( org.springframework.integration.expression.GenericApplicationContext ) ; assertNotNull ( org.springframework.integration.expression.StandardEvaluationContext . getBeanResolver ( ) ) ; assertNotNull ( org.springframework.integration.expression.StandardEvaluationContext . getTypeConverter ( ) ) ; IntegrationEvaluationContextFactoryBean org.springframework.integration.expression.IntegrationEvaluationContextFactoryBean = org.springframework.integration.expression.GenericApplicationContext . getBean ( STRING + IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , IntegrationEvaluationContextFactoryBean .class ) ; assertSame ( org.springframework.integration.expression.StandardEvaluationContext . getTypeConverter ( ) , TestUtils . getPropertyValue ( org.springframework.integration.expression.IntegrationEvaluationContextFactoryBean , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.expression.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.expression.GenericApplicationContext . registerBeanDefinition ( IntegrationContextUtils . INTEGRATION_EVALUATION_CONTEXT_BEAN_NAME , new RootBeanDefinition ( IntegrationEvaluationContextFactoryBean .class ) ) ; org.springframework.integration.expression.GenericApplicationContext . refresh ( ) ; StandardEvaluationContext org.springframework.integration.expression.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( org.springframework.integration.expression.GenericApplicationContext ) ; assertNotNull ( org.springframework.integration.expression.StandardEvaluationContext . getBeanResolver ( ) ) ; TypeConverter org.springframework.integration.expression.TypeConverter = org.springframework.integration.expression.StandardEvaluationContext . getTypeConverter ( ) ; assertNotNull ( org.springframework.integration.expression.TypeConverter ) ; assertSame ( DefaultConversionService . getSharedInstance ( ) , TestUtils . getPropertyValue ( org.springframework.integration.expression.TypeConverter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.integration.expression.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.integration.expression.GenericApplicationContext . registerBeanDefinition ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME , new RootBeanDefinition ( ConversionServiceFactoryBean .class ) ) ; org.springframework.integration.expression.GenericApplicationContext . refresh ( ) ; StandardEvaluationContext org.springframework.integration.expression.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( org.springframework.integration.expression.GenericApplicationContext ) ; assertNotNull ( org.springframework.integration.expression.StandardEvaluationContext . getBeanResolver ( ) ) ; TypeConverter org.springframework.integration.expression.TypeConverter = org.springframework.integration.expression.StandardEvaluationContext . getTypeConverter ( ) ; assertNotNull ( org.springframework.integration.expression.TypeConverter ) ; assertNotSame ( DefaultConversionService . getSharedInstance ( ) , TestUtils . getPropertyValue ( org.springframework.integration.expression.TypeConverter , STRING ) ) ; assertSame ( org.springframework.integration.expression.GenericApplicationContext . getBean ( IntegrationUtils . INTEGRATION_CONVERSION_SERVICE_BEAN_NAME ) , TestUtils . getPropertyValue ( org.springframework.integration.expression.TypeConverter , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StandardEvaluationContext org.springframework.integration.expression.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( ) ; assertNull ( org.springframework.integration.expression.StandardEvaluationContext . getBeanResolver ( ) ) ; TypeConverter org.springframework.integration.expression.TypeConverter = org.springframework.integration.expression.StandardEvaluationContext . getTypeConverter ( ) ; assertNotNull ( org.springframework.integration.expression.TypeConverter ) ; assertSame ( DefaultConversionService . getSharedInstance ( ) , TestUtils . getPropertyValue ( org.springframework.integration.expression.TypeConverter , STRING ) ) ; }  <METHOD_END>
