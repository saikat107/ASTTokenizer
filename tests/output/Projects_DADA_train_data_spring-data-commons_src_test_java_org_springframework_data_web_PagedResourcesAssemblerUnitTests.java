<METHOD_START> @ Before public void void ( ) { WebTestUtils . initWebTest ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) ) . isNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { UriComponents org.springframework.data.web.UriComponents = UriComponentsBuilder . fromUriString ( STRING ) . build ( ) ; PagedResourcesAssembler < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> = new PagedResourcesAssembler <> ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , org.springframework.data.web.UriComponents ) ; PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) . getHref ( ) ) . startsWith ( org.springframework.data.web.UriComponents . toUriString ( ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) . getHref ( ) ) . startsWith ( org.springframework.data.web.UriComponents . toUriString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.web.Link = new Link ( STRING , STRING ) ; PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) , org.springframework.data.web.Link ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) . getHref ( ) ) . startsWith ( org.springframework.data.web.Link . getHref ( ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ) . isNotNull ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) . getHref ( ) ) . startsWith ( org.springframework.data.web.Link . getHref ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; AbstractPageRequest org.springframework.data.web.AbstractPageRequest = PageRequest . of ( NUMBER , NUMBER ) ; Page < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> = new PageImpl <> ( java.util.Collections . java.util.List<java.lang.Object> ( ) , org.springframework.data.web.AbstractPageRequest , NUMBER ) ; org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; Link org.springframework.data.web.Link = org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) ; assertThat ( org.springframework.data.web.Link . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResourceAssembler org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResourceAssembler = new org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResourceAssembler ( ) ; PagedResources < org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource > org.springframework.data.web.PagedResources<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) , org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResourceAssembler ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> . hasLink ( Link . REL_SELF ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> . hasLink ( Link . REL_NEXT ) ) . isTrue ( ) ; java.util.Collection<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> < org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource > java.util.Collection<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> = org.springframework.data.web.PagedResources<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> . getContent ( ) ; assertThat ( java.util.Collection<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Collection<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> . java.util.Iterator<org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource> ( ) . org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource ( ) . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver = new HateoasPageableHandlerMethodArgumentResolver ( ) ; org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver . setOneIndexedParameters ( true ) ; PagedResourcesAssembler < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> = new PagedResourcesAssembler <> ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , null ) ; PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . hasLink ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . hasLink ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( STRING ) ) ) . containsEntry ( STRING , STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.String> ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( STRING ) ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_SELF ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_NEXT ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_PREVIOUS ) . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < ? > org.springframework.data.web.PagedResources<?> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toEmptyResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> , org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person .class , null ) ; java.util.Collection<?> < ? > java.util.Collection<?> = org.springframework.data.web.PagedResources<> . getContent ( ) ; assertThat ( java.util.Collection<> ) . hasSize ( NUMBER ) ; java.lang.Object java.lang.Object = java.util.Collection<> . java.util.Iterator<> ( ) . next ( ) ; assertThat ( java.lang.Object ) . isInstanceOf ( EmbeddedWrapper .class ) ; assertThat ( ( ( EmbeddedWrapper ) java.lang.Object ) . getRelTargetType ( ) ) . isEqualTo ( org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toEmptyResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) , org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toEmptyResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> , null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_FIRST ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_LAST ) . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_FIRST ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_LAST ) . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( NUMBER ) ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_FIRST ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_LAST ) . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PagedResourcesAssembler < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> = new PagedResourcesAssembler <> ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , null ) ; org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . setForceFirstAndLastRels ( true ) ; PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> = org.springframework.data.web.PagedResourcesAssembler<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_FIRST ) . getHref ( ) ) . endsWith ( STRING ) ; assertThat ( org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>> . getLink ( Link . REL_LAST ) . getHref ( ) ) . endsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResourceAssembler < Page < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > , PagedResources < Resource < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > > > org.springframework.data.web.ResourceAssembler<org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>,org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>>> = new org.springframework.data.web.PagedResourcesAssemblerUnitTests.CustomPagedResourcesAssembler <> ( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , null ) ; assertThat ( org.springframework.data.web.ResourceAssembler<org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>,org.springframework.data.web.PagedResources<org.springframework.data.web.Resource<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person>>> . toResource ( org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ) ) . isInstanceOf ( org.springframework.data.web.PagedResourcesAssemblerUnitTests.CustomPagedResources .class ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> < org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person > org.springframework.data.web.Page<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( int int ) { Pageable org.springframework.data.web.Pageable = PageRequest . of ( int , NUMBER ) ; org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person = new org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person ( ) ; org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person . java.lang.String = STRING ; return new PageImpl <> ( java.util.Collections . java.util.List<org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person> ( org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person ) , org.springframework.data.web.Pageable , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( Link org.springframework.data.web.Link ) { UriComponents org.springframework.data.web.UriComponents = UriComponentsBuilder . fromUri ( java.net.URI . java.net.URI ( org.springframework.data.web.Link . expand ( ) . getHref ( ) ) ) . build ( ) ; return org.springframework.data.web.UriComponents . getQueryParams ( ) . toSingleValueMap ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource ( org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person ) { org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource = new org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource ( ) ; org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource . java.lang.String = org.springframework.data.web.PagedResourcesAssemblerUnitTests.Person . java.lang.String ; return org.springframework.data.web.PagedResourcesAssemblerUnitTests.PersonResource ; }  <METHOD_END>
<METHOD_START> public void ( HateoasPageableHandlerMethodArgumentResolver org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , UriComponents org.springframework.data.web.UriComponents ) { super( org.springframework.data.web.HateoasPageableHandlerMethodArgumentResolver , org.springframework.data.web.UriComponents ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < R extends org.springframework.data.web.ResourceSupport , S > org.springframework.data.web.PagedResources<R> < R > org.springframework.data.web.PagedResources<R> ( java.util.List<R> < R > java.util.List<R> , PageMetadata org.springframework.data.web.PageMetadata , Page < S > org.springframework.data.web.Page<S> ) { return new org.springframework.data.web.PagedResourcesAssemblerUnitTests.CustomPagedResources <> ( java.util.List<R> , org.springframework.data.web.PageMetadata ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<R> < R > java.util.Collection<R> , PageMetadata org.springframework.data.web.PageMetadata ) { super( java.util.Collection<R> , org.springframework.data.web.PageMetadata ); }  <METHOD_END>
