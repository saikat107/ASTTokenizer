<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( org.springframework.integration.config.ConfigurableApplicationContext ) ; assertEquals ( org.springframework.integration.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( STRING ) ) ; org.springframework.integration.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; BeanFactoryChannelResolver org.springframework.integration.config.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( org.springframework.integration.config.ConfigurableApplicationContext ) ; assertEquals ( org.springframework.integration.config.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.integration.config.BeanFactoryChannelResolver . resolveDestination ( STRING ) ) ; org.springframework.integration.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; SimpleApplicationEventMulticaster org.springframework.integration.config.SimpleApplicationEventMulticaster = ( SimpleApplicationEventMulticaster ) org.springframework.integration.config.ConfigurableApplicationContext . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.SimpleApplicationEventMulticaster ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; if ( SpringVersion . getVersion ( ) . startsWith ( STRING ) ) { assertEquals ( SyncTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } else { assertNull ( java.lang.Object ) ; } org.springframework.integration.config.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; org.springframework.integration.config.AbstractApplicationContext . refresh ( ) ; SimpleApplicationEventMulticaster org.springframework.integration.config.SimpleApplicationEventMulticaster = ( SimpleApplicationEventMulticaster ) org.springframework.integration.config.AbstractApplicationContext . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.SimpleApplicationEventMulticaster ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; if ( SpringVersion . getVersion ( ) . startsWith ( STRING ) ) { assertEquals ( SyncTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } else { assertNull ( java.lang.Object ) ; } org.springframework.integration.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; org.springframework.integration.config.AbstractApplicationContext . refresh ( ) ; SimpleApplicationEventMulticaster org.springframework.integration.config.SimpleApplicationEventMulticaster = ( SimpleApplicationEventMulticaster ) org.springframework.integration.config.AbstractApplicationContext . getBean ( AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) ; DirectFieldAccessor org.springframework.integration.config.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.SimpleApplicationEventMulticaster ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( ThreadPoolTaskExecutor .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.integration.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; TaskScheduler org.springframework.integration.config.TaskScheduler = ( TaskScheduler ) org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; assertEquals ( StubTaskScheduler .class , org.springframework.integration.config.TaskScheduler . getClass ( ) ) ; org.springframework.integration.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.integration.config.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.config.MessageBusParserTests> ( ) ) ; TaskScheduler org.springframework.integration.config.TaskScheduler = ( TaskScheduler ) org.springframework.integration.config.AbstractApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.integration.config.TaskScheduler , IntegrationContextUtils . getTaskScheduler ( org.springframework.integration.config.AbstractApplicationContext ) ) ; org.springframework.integration.config.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
