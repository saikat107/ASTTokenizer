<METHOD_START> public void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus ) { this . org.springframework.web.reactive.function.server.HttpStatus = org.springframework.web.reactive.function.server.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.lang.String java.lang.String , java.lang.String ... java.lang.String[] ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . add ( java.lang.String , java.lang.String ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { if ( org.springframework.web.reactive.function.server.HttpHeaders != null ) { this . org.springframework.web.reactive.function.server.HttpHeaders . putAll ( org.springframework.web.reactive.function.server.HttpHeaders ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( HttpMethod ... org.springframework.web.reactive.function.server.HttpMethod[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setAllow ( new java.util.LinkedHashSet <> ( java.util.Arrays . java.util.List ( org.springframework.web.reactive.function.server.HttpMethod[] ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> < HttpMethod > java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setAllow ( java.util.Set<org.springframework.web.reactive.function.server.HttpMethod> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( long long ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setContentLength ( long ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( MediaType org.springframework.web.reactive.function.server.MediaType ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setContentType ( org.springframework.web.reactive.function.server.MediaType ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.lang.String java.lang.String ) { if ( java.lang.String != null ) { if ( ! java.lang.String . boolean ( STRING ) && ! java.lang.String . boolean ( STRING ) ) { java.lang.String = STRING + java.lang.String ; } if ( ! java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String + STRING ; } } this . org.springframework.web.reactive.function.server.HttpHeaders . setETag ( java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.time.ZonedDateTime java.time.ZonedDateTime ) { java.time.ZonedDateTime java.time.ZonedDateTime = java.time.ZonedDateTime . java.time.ZonedDateTime ( java.time.ZoneId . java.time.ZoneId ( STRING ) ) ; java.lang.String java.lang.String = java.time.format.DateTimeFormatter . java.time.format.DateTimeFormatter . java.lang.String ( java.time.ZonedDateTime ) ; this . org.springframework.web.reactive.function.server.HttpHeaders . set ( HttpHeaders . LAST_MODIFIED , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.net.URI java.net.URI ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setLocation ( java.net.URI ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( CacheControl org.springframework.web.reactive.function.server.CacheControl ) { java.lang.String java.lang.String = org.springframework.web.reactive.function.server.CacheControl . getHeaderValue ( ) ; if ( java.lang.String != null ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setCacheControl ( org.springframework.web.reactive.function.server.CacheControl . getHeaderValue ( ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public ServerResponse . ServerResponse.BodyBuilder ServerResponse.BodyBuilder ( java.lang.String ... java.lang.String[] ) { this . org.springframework.web.reactive.function.server.HttpHeaders . setVary ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ) { return org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ( org.springframework.web.reactive.function.server.ServerWebExchange , org.springframework.web.reactive.function.server.HandlerStrategies ) -> org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) . setComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( Publisher < java.lang.Void > org.springframework.web.reactive.function.server.Publisher<java.lang.Void> ) { Assert . notNull ( org.springframework.web.reactive.function.server.Publisher<java.lang.Void> , STRING ) ; return org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ( org.springframework.web.reactive.function.server.ServerWebExchange , org.springframework.web.reactive.function.server.HandlerStrategies ) -> Mono . from ( org.springframework.web.reactive.function.server.Publisher<java.lang.Void> ) . then ( org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) . setComplete ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> < ServerWebExchange , HandlerStrategies , Mono < java.lang.Void > > java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> ) { Assert . notNull ( java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> , STRING ) ; return Mono . just ( new org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.WriterFunctionServerResponse ( this . org.springframework.web.reactive.function.server.HttpStatus , this . org.springframework.web.reactive.function.server.HttpHeaders , java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T , P extends org.springframework.web.reactive.function.server.Publisher<T> < T > > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( P P , java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( P , STRING ) ; Assert . notNull ( java.lang.Class<T> , STRING ) ; return new DefaultEntityResponseBuilder <> ( P , BodyInserters . fromPublisher ( P , java.lang.Class<T> ) ) . headers ( this . org.springframework.web.reactive.function.server.HttpHeaders ) . status ( this . org.springframework.web.reactive.function.server.HttpStatus ) . build ( ) . map ( entityResponse -> entityResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( BodyInserter < T , ? super ServerHttpResponse > org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> ) { Assert . notNull ( org.springframework.web.reactive.function.server.BodyInserter<T,> , STRING ) ; return Mono . just ( new org.springframework.web.reactive.function.server.DefaultServerResponseBuilder.BodyInserterServerResponse <> ( this . org.springframework.web.reactive.function.server.HttpStatus , this . org.springframework.web.reactive.function.server.HttpHeaders , org.springframework.web.reactive.function.server.BodyInserter<T,> , this . java.util.Map<java.lang.String,java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { Assert . hasLength ( java.lang.String , STRING ) ; return new DefaultRenderingResponseBuilder ( java.lang.String ) . headers ( this . org.springframework.web.reactive.function.server.HttpHeaders ) . status ( this . org.springframework.web.reactive.function.server.HttpStatus ) . modelAttributes ( java.lang.Object[] ) . build ( ) . map ( renderingResponse -> renderingResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { Assert . hasLength ( java.lang.String , STRING ) ; return new DefaultRenderingResponseBuilder ( java.lang.String ) . headers ( this . org.springframework.web.reactive.function.server.HttpHeaders ) . status ( this . org.springframework.web.reactive.function.server.HttpStatus ) . modelAttributes ( java.util.Map<java.lang.String,> ) . build ( ) . map ( renderingResponse -> renderingResponse ) ; }  <METHOD_END>
<METHOD_START> protected void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus , HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { this . org.springframework.web.reactive.function.server.HttpStatus = org.springframework.web.reactive.function.server.HttpStatus ; this . org.springframework.web.reactive.function.server.HttpHeaders = org.springframework.web.reactive.function.server.HttpHeaders ( org.springframework.web.reactive.function.server.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ) { HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = new HttpHeaders ( ) ; org.springframework.web.reactive.function.server.HttpHeaders . putAll ( org.springframework.web.reactive.function.server.HttpHeaders ) ; return HttpHeaders . readOnlyHttpHeaders ( org.springframework.web.reactive.function.server.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.web.reactive.function.server.HttpStatus org.springframework.web.reactive.function.server.HttpStatus ( ) { return this . org.springframework.web.reactive.function.server.HttpStatus ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.web.reactive.function.server.HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders ( ) { return this . org.springframework.web.reactive.function.server.HttpHeaders ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpResponse org.springframework.web.reactive.function.server.ServerHttpResponse ) { org.springframework.web.reactive.function.server.ServerHttpResponse . setStatusCode ( this . org.springframework.web.reactive.function.server.HttpStatus ) ; HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = org.springframework.web.reactive.function.server.ServerHttpResponse . getHeaders ( ) ; HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders = org.springframework.web.reactive.function.server.HttpHeaders ( ) ; if ( ! org.springframework.web.reactive.function.server.HttpHeaders . isEmpty ( ) ) { org.springframework.web.reactive.function.server.HttpHeaders . entrySet ( ) . stream ( ) . filter ( entry -> ! responseHeaders . containsKey ( entry . getKey ( ) ) ) . forEach ( entry -> responseHeaders . put ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> public void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus , HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders , java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> < ServerWebExchange , HandlerStrategies , Mono < java.lang.Void > > java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> ) { super( org.springframework.web.reactive.function.server.HttpStatus , org.springframework.web.reactive.function.server.HttpHeaders ); this . java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> = java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { void ( org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) ) ; return this . java.util.function.BiFunction<org.springframework.web.reactive.function.server.ServerWebExchange,org.springframework.web.reactive.function.server.HandlerStrategies,org.springframework.web.reactive.function.server.Mono<java.lang.Void>> . apply ( org.springframework.web.reactive.function.server.ServerWebExchange , org.springframework.web.reactive.function.server.HandlerStrategies ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpStatus org.springframework.web.reactive.function.server.HttpStatus , HttpHeaders org.springframework.web.reactive.function.server.HttpHeaders , BodyInserter < T , ? super ServerHttpResponse > org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( org.springframework.web.reactive.function.server.HttpStatus , org.springframework.web.reactive.function.server.HttpHeaders ); this . org.springframework.web.reactive.function.server.BodyInserter<T,? super org.springframework.web.reactive.function.server.ServerHttpResponse> = org.springframework.web.reactive.function.server.BodyInserter<T,> ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.function.server.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.function.server.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.function.server.ServerWebExchange , HandlerStrategies org.springframework.web.reactive.function.server.HandlerStrategies ) { ServerHttpResponse org.springframework.web.reactive.function.server.ServerHttpResponse = org.springframework.web.reactive.function.server.ServerWebExchange . getResponse ( ) ; void ( org.springframework.web.reactive.function.server.ServerHttpResponse ) ; return this . org.springframework.web.reactive.function.server.BodyInserter<T,> . insert ( org.springframework.web.reactive.function.server.ServerHttpResponse , new BodyInserter . BodyInserter ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) ; } @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange . getRequest ( ) ) ; } @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return org.springframework.web.reactive.function.server.HandlerStrategies . messageWriters ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> < ServerHttpRequest > java.util.Optional<org.springframework.web.reactive.function.server.ServerHttpRequest> ( ) { return java.util.Optional . java.util.Optional ( org.springframework.web.reactive.function.server.ServerWebExchange . getRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
