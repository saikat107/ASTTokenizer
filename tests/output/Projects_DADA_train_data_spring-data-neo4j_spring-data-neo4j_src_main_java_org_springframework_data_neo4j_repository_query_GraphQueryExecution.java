<METHOD_START> java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> ; if ( org.springframework.data.neo4j.repository.query.Query . isFilterQuery ( ) ) { java.lang.Iterable<?> = org.springframework.data.neo4j.repository.query.Session . loadAll ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getDepth ( ) ) ; } else { if ( java.lang.Class<> . A ( QueryResult .class ) != null ) { java.lang.Iterable<?> = org.springframework.data.neo4j.repository.query.Session . query ( org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) . queryResults ( ) ; } else { java.lang.Iterable<?> = org.springframework.data.neo4j.repository.query.Session . query ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; } } java.util.Iterator<?> < ? > java.util.Iterator<?> = java.lang.Iterable<> . java.util.Iterator<> ( ) ; if ( ! java.util.Iterator<> . boolean ( ) ) { return null ; } java.lang.Object java.lang.Object = java.util.Iterator<> . next ( ) ; if ( java.util.Iterator<> . boolean ( ) ) { throw new IncorrectResultSizeDataAccessException ( STRING , NUMBER ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.data.neo4j.repository.query.Query . isFilterQuery ( ) ) { return org.springframework.data.neo4j.repository.query.Session . loadAll ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getOgmSort ( ) ) ; } else { if ( java.lang.Class<> . A ( QueryResult .class ) != null || java.util.Map .class . boolean ( java.lang.Class<> ) ) { return org.springframework.data.neo4j.repository.query.Session . query ( org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getSort ( ) ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) . queryResults ( ) ; } else { return org.springframework.data.neo4j.repository.query.Session . query ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getSort ( ) ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; } } }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.neo4j.repository.query.Session . query ( org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getSort ( ) ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.Pageable = org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getPageable ( ) ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<?> < ? > java.util.List<?> ; long long ; if ( org.springframework.data.neo4j.repository.query.Query . isFilterQuery ( ) ) { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . loadAll ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getOgmSort ( ) , org.springframework.data.neo4j.repository.query.Query . getPagination ( org.springframework.data.neo4j.repository.query.Pageable , false ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getDepth ( ) ) ; long = org.springframework.data.neo4j.repository.query.Session . count ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) ) ; } else { if ( java.lang.Class<> . A ( QueryResult .class ) != null ) { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . query ( org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.Pageable , false ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) . queryResults ( ) ; } else { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . query ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.Pageable , false ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; } long = ( java.util.List<> . int ( ) > NUMBER ) ? java.lang.Integer ( org.springframework.data.neo4j.repository.query.Query ) : NUMBER ; } return PageableExecutionUtils . getPage ( java.util.List<> , org.springframework.data.neo4j.repository.query.Pageable , ( java.util.function.LongSupplier ) ( ) long ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Integer java.lang.Integer ( Query org.springframework.data.neo4j.repository.query.Query ) { Assert . hasText ( org.springframework.data.neo4j.repository.query.Query . getCountQuery ( ) , STRING ) ; return org.springframework.data.neo4j.repository.query.Session . queryForObject ( java.lang.Integer .class , org.springframework.data.neo4j.repository.query.Query . getCountQuery ( ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; this . org.springframework.data.neo4j.repository.query.Pageable = org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getPageable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { int int = org.springframework.data.neo4j.repository.query.Pageable . getPageSize ( ) ; java.util.List<?> < ? > java.util.List<?> ; if ( org.springframework.data.neo4j.repository.query.Query . isFilterQuery ( ) ) { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . loadAll ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getOgmSort ( ) , org.springframework.data.neo4j.repository.query.Query . getPagination ( org.springframework.data.neo4j.repository.query.Pageable , true ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getDepth ( ) ) ; } else { java.lang.String java.lang.String = org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.Pageable , true ) ; if ( java.lang.Class<> . A ( QueryResult .class ) != null ) { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . query ( java.lang.String , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) . queryResults ( ) ; } else { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . query ( java.lang.Class<> , java.lang.String , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; } } boolean boolean = java.util.List<> . int ( ) > int ; return new SliceImpl ( boolean ? java.util.List<> . java.util.List<> ( NUMBER , int ) : java.util.List<> , org.springframework.data.neo4j.repository.query.Pageable , boolean ) ; }  <METHOD_END>
<METHOD_START> public void ( org . org.neo4j . org.neo4j . org.neo4j . org.neo4j org.neo4j.ogm.session.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.neo4j.ogm.session.Session ; this . org.springframework.data.neo4j.repository.query.GraphParameterAccessor = org.springframework.data.neo4j.repository.query.GraphParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.List<?> < ? > java.util.List<?> ; if ( org.springframework.data.neo4j.repository.query.Query . isFilterQuery ( ) ) { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . loadAll ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getOgmSort ( ) , org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getDepth ( ) ) ; } else { java.util.List<?> = ( java.util.List<?> < ? > ) org.springframework.data.neo4j.repository.query.Session . query ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getCypherQuery ( org.springframework.data.neo4j.repository.query.GraphParameterAccessor . getSort ( ) ) , org.springframework.data.neo4j.repository.query.Query . getParameters ( ) ) ; } return java.util.List<> ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.data.neo4j.repository.query.Session . count ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Session org.springframework.data.neo4j.repository.query.Session , GraphQueryMethod org.springframework.data.neo4j.repository.query.GraphQueryMethod , GraphParameterAccessor org.springframework.data.neo4j.repository.query.GraphParameterAccessor ) { this . org.springframework.data.neo4j.repository.query.Session = org.springframework.data.neo4j.repository.query.Session ; this . org.springframework.data.neo4j.repository.query.GraphQueryMethod = org.springframework.data.neo4j.repository.query.GraphQueryMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Query org.springframework.data.neo4j.repository.query.Query , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.neo4j.repository.query.GraphQueryMethod . getReturnedObjectType ( ) ; if ( java.lang.Class<> . boolean ( java.lang.Long .class ) ) { return org.springframework.data.neo4j.repository.query.Session . delete ( java.lang.Class<> , org.springframework.data.neo4j.repository.query.Query . getFilters ( ) , org.springframework.data.neo4j.repository.query.GraphQueryMethod . isCollectionQuery ( ) ) ; } throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
