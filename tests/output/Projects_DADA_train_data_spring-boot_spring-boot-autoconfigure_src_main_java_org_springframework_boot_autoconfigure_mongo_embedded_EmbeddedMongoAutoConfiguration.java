<METHOD_START> public void ( MongoProperties org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties , EmbeddedMongoProperties org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties , ApplicationContext org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext , IRuntimeConfig org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ) { this . org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties = org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties ; this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties = org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties ; this . org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext = org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext ; this . org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig = org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ; }  <METHOD_END>
<METHOD_START> @ Bean ( initMethod = STRING , destroyMethod = STRING ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.mongo.embedded.MongodExecutable org.springframework.boot.autoconfigure.mongo.embedded.MongodExecutable ( IMongodConfig org.springframework.boot.autoconfigure.mongo.embedded.IMongodConfig )			throws java.io.IOException { java.lang.Integer java.lang.Integer = this . org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties . getPort ( ) ; if ( java.lang.Integer == null || java.lang.Integer == NUMBER ) { void ( org.springframework.boot.autoconfigure.mongo.embedded.IMongodConfig . net ( ) . getPort ( ) ) ; } MongodStarter org.springframework.boot.autoconfigure.mongo.embedded.MongodStarter = org.springframework.boot.autoconfigure.mongo.embedded.MongodStarter ( this . org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ) ; return org.springframework.boot.autoconfigure.mongo.embedded.MongodStarter . prepare ( org.springframework.boot.autoconfigure.mongo.embedded.IMongodConfig ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.embedded.MongodStarter org.springframework.boot.autoconfigure.mongo.embedded.MongodStarter ( IRuntimeConfig org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ) { if ( org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig == null ) { return MongodStarter . getDefaultInstance ( ) ; } return MongodStarter . getInstance ( org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.mongo.embedded.IMongodConfig org.springframework.boot.autoconfigure.mongo.embedded.IMongodConfig ( ) java.io.IOException { IFeatureAwareVersion org.springframework.boot.autoconfigure.mongo.embedded.IFeatureAwareVersion = new org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion ( this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getVersion ( ) , this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getFeatures ( ) ) ; MongodConfigBuilder org.springframework.boot.autoconfigure.mongo.embedded.MongodConfigBuilder = new MongodConfigBuilder ( ) . version ( org.springframework.boot.autoconfigure.mongo.embedded.IFeatureAwareVersion ) ; if ( this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getStorage ( ) != null ) { org.springframework.boot.autoconfigure.mongo.embedded.MongodConfigBuilder . replication ( new Storage ( this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getStorage ( ) . getDatabaseDir ( ) , this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getStorage ( ) . getReplSetName ( ) , this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getStorage ( ) . getOplogSize ( ) != null ? this . org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoProperties . getStorage ( ) . getOplogSize ( ) : NUMBER ) ) ; } java.lang.Integer java.lang.Integer = this . org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties . getPort ( ) ; if ( java.lang.Integer != null && java.lang.Integer > NUMBER ) { org.springframework.boot.autoconfigure.mongo.embedded.MongodConfigBuilder . net ( new Net ( java.net.InetAddress ( ) . java.lang.String ( ) , java.lang.Integer , Network . localhostIsIPv6 ( ) ) ) ; } else { org.springframework.boot.autoconfigure.mongo.embedded.MongodConfigBuilder . net ( new Net ( java.net.InetAddress ( ) . java.lang.String ( ) , Network . getFreeServerPort ( java.net.InetAddress ( ) ) , Network . localhostIsIPv6 ( ) ) ) ; } return org.springframework.boot.autoconfigure.mongo.embedded.MongodConfigBuilder . build ( ) ; }  <METHOD_END>
<METHOD_START> private java.net.InetAddress java.net.InetAddress ( ) java.net.UnknownHostException { if ( this . org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties . getHost ( ) == null ) { return java.net.InetAddress . java.net.InetAddress ( Network . localhostIsIPv6 ( ) ? byte[] : byte[] ) ; } return java.net.InetAddress . java.net.InetAddress ( this . org.springframework.boot.autoconfigure.mongo.embedded.MongoProperties . getHost ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { void ( this . org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationContext org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext , int int ) { if ( org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext instanceof ConfigurableApplicationContext ) { MutablePropertySources org.springframework.boot.autoconfigure.mongo.embedded.MutablePropertySources = ( ( ConfigurableApplicationContext ) org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext ) . getEnvironment ( ) . getPropertySources ( ) ; java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.boot.autoconfigure.mongo.embedded.MutablePropertySources ) . put ( STRING , int ) ; } if ( org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext . getParent ( ) != null ) { void ( org.springframework.boot.autoconfigure.mongo.embedded.ApplicationContext . getParent ( ) , int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( MutablePropertySources org.springframework.boot.autoconfigure.mongo.embedded.MutablePropertySources ) { PropertySource < ? > org.springframework.boot.autoconfigure.mongo.embedded.PropertySource<?> = org.springframework.boot.autoconfigure.mongo.embedded.MutablePropertySources . get ( STRING ) ; if ( org.springframework.boot.autoconfigure.mongo.embedded.PropertySource<> == null ) { org.springframework.boot.autoconfigure.mongo.embedded.PropertySource<?> = new MapPropertySource ( STRING , new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; org.springframework.boot.autoconfigure.mongo.embedded.MutablePropertySources . addFirst ( org.springframework.boot.autoconfigure.mongo.embedded.PropertySource<> ) ; } return ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.boot.autoconfigure.mongo.embedded.PropertySource<> . getSource ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig org.springframework.boot.autoconfigure.mongo.embedded.IRuntimeConfig ( ) { Logger org.springframework.boot.autoconfigure.mongo.embedded.Logger = LoggerFactory . getLogger ( java.lang.Class<? extends org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.RuntimeConfigConfiguration> ( ) . java.lang.Package ( ) . java.lang.String ( ) + STRING ) ; ProcessOutput org.springframework.boot.autoconfigure.mongo.embedded.ProcessOutput = new ProcessOutput ( Processors . logTo ( org.springframework.boot.autoconfigure.mongo.embedded.Logger , Slf4jLevel . INFO ) , Processors . logTo ( org.springframework.boot.autoconfigure.mongo.embedded.Logger , Slf4jLevel . ERROR ) , Processors . named ( STRING , Processors . logTo ( org.springframework.boot.autoconfigure.mongo.embedded.Logger , Slf4jLevel . DEBUG ) ) ) ; return new RuntimeConfigBuilder ( ) . defaultsWithLogger ( Command . MongoD , org.springframework.boot.autoconfigure.mongo.embedded.Logger ) . processOutput ( org.springframework.boot.autoconfigure.mongo.embedded.ProcessOutput ) . artifactStore ( org.springframework.boot.autoconfigure.mongo.embedded.ArtifactStoreBuilder ( org.springframework.boot.autoconfigure.mongo.embedded.Logger ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.mongo.embedded.ArtifactStoreBuilder org.springframework.boot.autoconfigure.mongo.embedded.ArtifactStoreBuilder ( Logger org.springframework.boot.autoconfigure.mongo.embedded.Logger ) { return new ExtractedArtifactStoreBuilder ( ) . defaults ( Command . MongoD ) . download ( new DownloadConfigBuilder ( ) . defaultsForCommand ( Command . MongoD ) . progressListener ( new Slf4jProgressListener ( org.springframework.boot.autoconfigure.mongo.embedded.Logger ) ) . build ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> public void ( ) { super( STRING ); }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> < Feature > java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> = ( java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> == null ? java.util.Collections .< Feature > java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> ( ) : java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Feature org.springframework.boot.autoconfigure.mongo.embedded.Feature ) { return this . java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> . contains ( org.springframework.boot.autoconfigure.mongo.embedded.Feature ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + this . java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> . hashCode ( ) ; int = int * int + this . java.lang.String . int ( ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Class<? extends org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion> ( ) == java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion = ( org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion ) java.lang.Object ; boolean boolean = true ; boolean = boolean && this . java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> . equals ( org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion . java.util.Set<org.springframework.boot.autoconfigure.mongo.embedded.Feature> ) ; boolean = boolean && this . java.lang.String . boolean ( org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration.ToStringFriendlyFeatureAwareVersion . java.lang.String ) ; return boolean ; } return super. boolean ( java.lang.Object ) ; }  <METHOD_END>
