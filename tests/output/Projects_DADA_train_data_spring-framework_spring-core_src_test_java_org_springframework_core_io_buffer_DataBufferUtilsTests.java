<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = org.springframework.core.io.buffer.DataBufferUtilsTests .class . java.net.URL ( STRING ) . java.net.URI ( ) ; java.nio.channels.FileChannel java.nio.channels.FileChannel = java.nio.channels.FileChannel . java.nio.channels.FileChannel ( java.nio.file.Paths . java.nio.file.Path ( java.net.URI ) , java.nio.file.StandardOpenOption . java.nio.file.StandardOpenOption ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . read ( java.nio.channels.FileChannel , this . bufferFactory , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; assertFalse ( java.nio.channels.FileChannel . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = org.springframework.core.io.buffer.DataBufferUtilsTests .class . java.net.URL ( STRING ) . java.net.URI ( ) ; java.nio.channels.AsynchronousFileChannel java.nio.channels.AsynchronousFileChannel = java.nio.channels.AsynchronousFileChannel . java.nio.channels.AsynchronousFileChannel ( java.nio.file.Paths . java.nio.file.Path ( java.net.URI ) , java.nio.file.StandardOpenOption . java.nio.file.StandardOpenOption ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . read ( java.nio.channels.AsynchronousFileChannel , this . bufferFactory , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = org.springframework.core.io.buffer.DataBufferUtilsTests .class . java.net.URL ( STRING ) . java.net.URI ( ) ; java.nio.channels.AsynchronousFileChannel java.nio.channels.AsynchronousFileChannel = java.nio.channels.AsynchronousFileChannel . java.nio.channels.AsynchronousFileChannel ( java.nio.file.Paths . java.nio.file.Path ( java.net.URI ) , java.nio.file.StandardOpenOption . java.nio.file.StandardOpenOption ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . read ( java.nio.channels.AsynchronousFileChannel , NUMBER , this . bufferFactory , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URI java.net.URI = org.springframework.core.io.buffer.DataBufferUtilsTests .class . java.net.URL ( STRING ) . java.net.URI ( ) ; java.nio.channels.FileChannel java.nio.channels.FileChannel = java.nio.channels.FileChannel . java.nio.channels.FileChannel ( java.nio.file.Paths . java.nio.file.Path ( java.net.URI ) , java.nio.file.StandardOpenOption . java.nio.file.StandardOpenOption ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . read ( java.nio.channels.FileChannel , this . bufferFactory , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; assertFalse ( java.nio.channels.FileChannel . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = org.springframework.core.io.buffer.DataBufferUtilsTests .class . java.io.InputStream ( STRING ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . read ( java.io.InputStream , this . bufferFactory , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = Flux . just ( org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . takeUntilByteCount ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; release ( org.springframework.core.io.buffer.DataBuffer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = Flux . just ( org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . skipUntilByteCount ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . consumeNextWith ( stringConsumer ( STRING ) ) . consumeNextWith ( stringConsumer ( STRING ) ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = stringBuffer ( STRING ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = Flux . just ( org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer , org.springframework.core.io.buffer.DataBuffer ) ; Flux < DataBuffer > org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> = DataBufferUtils . skipUntilByteCount ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> , NUMBER ) ; StepVerifier . create ( org.springframework.core.io.buffer.Flux<org.springframework.core.io.buffer.DataBuffer> ) . expectNextCount ( NUMBER ) . expectComplete ( ) . verify ( ) ; }  <METHOD_END>
