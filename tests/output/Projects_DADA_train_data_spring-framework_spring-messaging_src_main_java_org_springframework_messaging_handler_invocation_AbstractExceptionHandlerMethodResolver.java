<METHOD_START> protected void ( java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > , java.lang.reflect.Method > java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> ) { Assert . notNull ( java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> , STRING ) ; this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . void ( java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected static java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.Throwable>> <> ( ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) { if ( java.lang.Throwable .class . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > ) java.lang.Class<> ) ; } } Assert . notEmpty ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> , STRING + java.lang.reflect.Method + STRING ) ; return java.util.List<java.lang.Class<? extends java.lang.Throwable>> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . int ( ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Exception java.lang.Exception ) { java.lang.reflect.Method java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) ) ; if ( java.lang.reflect.Method == null ) { java.lang.Throwable java.lang.Throwable = java.lang.Exception . java.lang.Throwable ( ) ; if ( java.lang.Throwable != null ) { java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ; } } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { java.lang.reflect.Method java.lang.reflect.Method = this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> ) ; if ( java.lang.reflect.Method == null ) { java.lang.reflect.Method = java.lang.reflect.Method ( java.lang.Class<> ) ; this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.lang.Class<> , java.lang.reflect.Method != null ? java.lang.reflect.Method : java.lang.reflect.Method ) ; } return java.lang.reflect.Method != java.lang.reflect.Method ? java.lang.reflect.Method : null ; }  <METHOD_END>
<METHOD_START> private java.lang.reflect.Method java.lang.reflect.Method ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> < java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > > java.util.List<java.lang.Class<? extends java.lang.Throwable>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.Throwable>> <> ( ) ; for ( java.lang.Class<? extends java.lang.Throwable> < ? extends java.lang.Throwable > java.lang.Class<? extends java.lang.Throwable> : this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.util.Set<java.lang.Class<? extends java.lang.Throwable>> ( ) ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( java.lang.Class<> ) ; } } if ( ! java.util.List<java.lang.Class<? extends java.lang.Throwable>> . boolean ( ) ) { java.util.Collections . void ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> , new ExceptionDepthComparator ( java.lang.Class<> ) ) ; return this . java.util.Map<java.lang.Class<? extends java.lang.Throwable>,java.lang.reflect.Method> . java.lang.reflect.Method ( java.util.List<java.lang.Class<? extends java.lang.Throwable>> . java.lang.Class<? extends java.lang.Throwable> ( NUMBER ) ) ; } else { return null ; } }  <METHOD_END>
