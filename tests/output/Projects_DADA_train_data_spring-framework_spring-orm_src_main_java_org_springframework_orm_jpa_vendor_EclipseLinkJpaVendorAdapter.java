<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.vendor.PersistenceProvider org.springframework.orm.jpa.vendor.PersistenceProvider ( ) { return this . org.springframework.orm.jpa.vendor.PersistenceProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; if ( getDatabasePlatform ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( PersistenceUnitProperties . TARGET_DATABASE , getDatabasePlatform ( ) ) ; } else if ( getDatabase ( ) != null ) { java.lang.String java.lang.String = java.lang.String ( getDatabase ( ) ) ; if ( java.lang.String != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( PersistenceUnitProperties . TARGET_DATABASE , java.lang.String ) ; } } if ( isGenerateDdl ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( PersistenceUnitProperties . DDL_GENERATION , PersistenceUnitProperties . CREATE_ONLY ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( PersistenceUnitProperties . DDL_GENERATION_MODE , PersistenceUnitProperties . DDL_DATABASE_GENERATION ) ; } if ( isShowSql ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( PersistenceUnitProperties . CATEGORY_LOGGING_LEVEL_ + org . org.eclipse . org.eclipse . logging . SessionLog . SQL , java.util.logging.Level . java.util.logging.Level . java.lang.String ( ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Database org.springframework.orm.jpa.vendor.Database ) { switch ( org.springframework.orm.jpa.vendor.Database ) { case DB2 : return TargetDatabase . DB2 ; case DERBY : return TargetDatabase . Derby ; case HSQL : return TargetDatabase . HSQL ; case INFORMIX : return TargetDatabase . Informix ; case MYSQL : return TargetDatabase . MySQL4 ; case ORACLE : return TargetDatabase . Oracle ; case POSTGRESQL : return TargetDatabase . PostgreSQL ; case SQL_SERVER : return TargetDatabase . SQLServer ; case SYBASE : return TargetDatabase . Sybase ; default: return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect ( ) { return this . org.springframework.orm.jpa.vendor.EclipseLinkJpaDialect ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<? extends org.springframework.orm.jpa.vendor.EntityManager> < ? extends EntityManager > java.lang.Class<? extends org.springframework.orm.jpa.vendor.EntityManager> ( ) { return JpaEntityManager .class ; }  <METHOD_END>
