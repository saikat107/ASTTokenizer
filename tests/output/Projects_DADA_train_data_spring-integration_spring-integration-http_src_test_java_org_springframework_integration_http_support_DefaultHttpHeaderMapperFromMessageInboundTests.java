<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertEquals ( HttpMethod . GET , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertEquals ( HttpMethod . GET , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , HttpMethod . GET ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertEquals ( HttpMethod . GET , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . iterator ( ) . next ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . GET ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . GET ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new HttpMethod [] { HttpMethod . GET , HttpMethod . POST } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . GET ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , CollectionUtils . arrayToList ( new java.lang.String [] { STRING , STRING } ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . GET ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , CollectionUtils . arrayToList ( new HttpMethod [] { HttpMethod . GET , HttpMethod . POST } ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . GET ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAllow ( ) . contains ( HttpMethod . POST ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getETag ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getExpires ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getExpires ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( NUMBER ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getExpires ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.text.ParseException { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new java.util.Date ( NUMBER ) ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( STRING , java.util.Locale . java.util.Locale ) ; assertEquals ( java.text.SimpleDateFormat . java.util.Date ( STRING ) . long ( ) , org.springframework.integration.http.support.HttpHeaders . getLastModified ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( new java.net.URI ( STRING ) . java.lang.String ( ) , org.springframework.integration.http.support.HttpHeaders . getLocation ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertTrue ( java.lang.String . java.lang.String ( STRING , org.springframework.integration.http.support.HttpHeaders . size ( ) ) , org.springframework.integration.http.support.HttpHeaders . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertTrue ( java.lang.String . java.lang.String ( STRING , java.util.Map<java.lang.String,> . int ( ) ) , java.util.Map<java.lang.String,> . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . isEmpty ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( STRING ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . isEmpty ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( STRING ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . isEmpty ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setUserDefinedHeaderPrefix ( null ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . size ( ) ) ; assertTrue ( org.springframework.integration.http.support.HttpHeaders . getAccept ( ) . isEmpty ( ) ) ; assertEquals ( MediaType . TEXT_XML , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . size ( ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING , STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setInboundHeaderNames ( new java.lang.String [] { STRING , STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . set ( STRING , STRING ) ; org.springframework.integration.http.support.HttpHeaders . setAccept ( java.util.Collections . java.util.List ( MediaType . TEXT_XML ) ) ; org.springframework.integration.http.support.HttpHeaders . setLocation ( new java.net.URI ( STRING ) ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.DefaultHttpHeaderMapper . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( NUMBER , java.util.Map<java.lang.String,> . int ( ) ) ; assertNull ( java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( STRING , java.util.Map<java.lang.String,> . get ( STRING ) ) ; assertEquals ( MediaType . TEXT_XML , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING } ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClass ( ) ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING } ) ; ConversionService org.springframework.integration.http.support.ConversionService = new DefaultConversionService ( ) ; DefaultListableBeanFactory org.springframework.integration.http.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.http.support.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.http.support.ConversionService ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setBeanFactory ( org.springframework.integration.http.support.DefaultListableBeanFactory ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . afterPropertiesSet ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClass ( ) ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNotNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . get ( NUMBER ) ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHttpHeaderMapper org.springframework.integration.http.support.DefaultHttpHeaderMapper = new DefaultHttpHeaderMapper ( ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setOutboundHeaderNames ( new java.lang.String [] { STRING } ) ; GenericConversionService org.springframework.integration.http.support.GenericConversionService = new DefaultConversionService ( ) ; org.springframework.integration.http.support.GenericConversionService . addConverter ( new org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClassConverter ( ) ) ; DefaultListableBeanFactory org.springframework.integration.http.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.integration.http.support.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.integration.http.support.GenericConversionService ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . setBeanFactory ( org.springframework.integration.http.support.DefaultListableBeanFactory ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . afterPropertiesSet ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , new org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClass ( ) ) ; org.springframework.integration.http.support.DefaultHttpHeaderMapper . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNotNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . get ( NUMBER ) ) ; assertNotNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.http.support.HttpHeaders . get ( STRING ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . put ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.http.support.HttpHeaders ) ; assertNull ( org.springframework.integration.http.support.HttpHeaders . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; long long = java.util.Date . long ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . setIfModifiedSince ( long ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( java.util.Date ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; assertEquals ( java.util.Calendar . long ( ) , java.util.Map<java.lang.String,> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , STRING ) ; MessageHeaders org.springframework.integration.http.support.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . fromHeaders ( org.springframework.integration.http.support.MessageHeaders , org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( MediaType . valueOf ( STRING ) , org.springframework.integration.http.support.HttpHeaders . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HeaderMapper < HttpHeaders > org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> = DefaultHttpHeaderMapper . inboundMapper ( ) ; HttpHeaders org.springframework.integration.http.support.HttpHeaders = new HttpHeaders ( ) ; org.springframework.integration.http.support.HttpHeaders . add ( HttpHeaders . CONTENT_TYPE . toLowerCase ( ) , STRING ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.http.support.HeaderMapper<org.springframework.integration.http.support.HttpHeaders> . toHeaders ( org.springframework.integration.http.support.HttpHeaders ) ; assertEquals ( MediaType . valueOf ( STRING ) , java.util.Map<java.lang.String,> . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClass org.springframework.integration.http.support.DefaultHttpHeaderMapperFromMessageInboundTests.TestClass ) { return STRING ; }  <METHOD_END>
