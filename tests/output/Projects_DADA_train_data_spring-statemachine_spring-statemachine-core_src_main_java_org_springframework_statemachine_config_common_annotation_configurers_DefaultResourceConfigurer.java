<METHOD_START> @ java.lang.Override public void void ( B B ) throws java.lang.Exception { if ( ! boolean ( B , java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ) ) { if ( B instanceof ResourceConfigurerAware ) { ( ( ResourceConfigurerAware ) B ) . configureResources ( java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> < I > org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> ( java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> < Resource > java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ) { this . java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> . addAll ( java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> < I > org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> ( Resource org.springframework.statemachine.config.common.annotation.configurers.Resource ) { java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> . add ( org.springframework.statemachine.config.common.annotation.configurers.Resource ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> < I > org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> ( java.lang.String java.lang.String ) { java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> . add ( org.springframework.statemachine.config.common.annotation.configurers.DefaultResourceLoader . getResource ( java.lang.String ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> < I > org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { if ( java.util.List<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.statemachine.config.common.annotation.configurers.ResourceConfigurer<I> ( java.lang.String ) ; } } return this ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> < Resource > java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ( ) { return java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( B B , java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> < Resource > java.util.Set<org.springframework.statemachine.config.common.annotation.configurers.Resource> ) { return false ; }  <METHOD_END>
