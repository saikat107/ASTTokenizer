<METHOD_START> public static < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , PageableLuceneQueryResults < K , V > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int int , java.lang.Class<T> < T > java.lang.Class<T> ) { return new org.springframework.data.gemfire.search.lucene.support.LucenePage <> ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> public static < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , PageableLuceneQueryResults < K , V > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int int , java.lang.Class<T> < T > java.lang.Class<T> , org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ) { return new org.springframework.data.gemfire.search.lucene.support.LucenePage <> ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int , java.lang.Class<T> , org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ) ; }  <METHOD_END>
<METHOD_START> public void ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , PageableLuceneQueryResults < K , V > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int int , java.lang.Class<T> < T > java.lang.Class<T> ) { this( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int , java.lang.Class<T> , null ); }  <METHOD_END>
<METHOD_START> public void ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , PageableLuceneQueryResults < K , V > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , int int , java.lang.Class<T> < T > java.lang.Class<T> , org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ) { Assert . notNull ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , STRING ) ; Assert . notNull ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> , STRING ) ; Assert . isTrue ( org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> . hasNext ( ) , STRING ) ; this . org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor = org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ; this . org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> = org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ; this . int = int ; this . java.lang.Class<T> = java.lang.Class<T> ; this . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> = org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ; this . java.util.List<T> = java.util.List<T> ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> . next ( ) , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected java.util.List<T> < T > java.util.List<T> ( ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor , java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V>> < LuceneResultStruct < K , V > > java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V>> , java.lang.Class<T> < T > java.lang.Class<T> ) { return org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor . project ( java.util.List<org.springframework.data.gemfire.search.lucene.support.LuceneResultStruct<K,V>> , java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> protected int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<T> < T > java.lang.Class<T> ( ) { return this . java.lang.Class<T> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> < K , V > org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ( ) { return this . org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( ) { return this . org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ( ) . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ) != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( ) { return java.util.Collections . java.util.List<T> ( this . java.util.List<T> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ) { return java.util.Optional . java.util.Optional<org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V>> ( this . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ) . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ( ) { Assert . state ( boolean ( ) , STRING ) ; this . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> = org.springframework.data.gemfire.search.lucene.support.LucenePage ( org.springframework.data.gemfire.search.lucene.support.ProjectingLuceneAccessor ( ) , org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ( ) , int ( ) , java.lang.Class<T> ( ) , this ) ; return this . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; java.util.Optional . java.util.Optional<org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V>> ( org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ) ) . void ( org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> -> { while ( org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> != null ) { org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> = org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ) ; return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> < T , K , V > org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ( ) { return this . org.springframework.data.gemfire.search.lucene.support.LucenePage<T,K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return org.springframework.data.gemfire.search.lucene.support.PageableLuceneQueryResults<K,V> ( ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { long long = long ( ) ; int int = int ( ) ; int int = java.lang.Double . java.lang.Double ( java.lang.Math . double ( long / int ) ) . int ( ) ; int += ( long % int != NUMBER ? NUMBER : NUMBER ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S > org.springframework.data.gemfire.search.lucene.support.Page<S> < S > org.springframework.data.gemfire.search.lucene.support.Page<S> ( java.util.function.Function<? super T,? extends S> < ? super T , ? extends S > java.util.function.Function<? super T,? extends S> ) { return newListablePage ( java.util.List<T> ( ) . java.util.stream.Stream<T> ( ) . java.util.stream.Stream<> ( java.util.function.Function<,> :: apply ) . java.util.List<> ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.Object,?,java.util.List<java.lang.Object>> ( ) ) ) ; }  <METHOD_END>
