<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . java.lang.Long = long ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return this . java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.lang.Integer = int ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.web.socket.server.standard.ServletContext ) { this . org.springframework.web.socket.server.standard.ServletContext = org.springframework.web.socket.server.standard.ServletContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . state ( this . org.springframework.web.socket.server.standard.ServletContext != null , STRING ) ; this . org.springframework.web.socket.server.standard.ServerContainer = ( ServerContainer ) this . org.springframework.web.socket.server.standard.ServletContext . getAttribute ( STRING ) ; Assert . state ( this . org.springframework.web.socket.server.standard.ServerContainer != null , STRING ) ; if ( this . java.lang.Long != null ) { this . org.springframework.web.socket.server.standard.ServerContainer . setAsyncSendTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Long != null ) { this . org.springframework.web.socket.server.standard.ServerContainer . setDefaultMaxSessionIdleTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Integer != null ) { this . org.springframework.web.socket.server.standard.ServerContainer . setDefaultMaxTextMessageBufferSize ( this . java.lang.Integer ) ; } if ( this . java.lang.Integer != null ) { this . org.springframework.web.socket.server.standard.ServerContainer . setDefaultMaxBinaryMessageBufferSize ( this . java.lang.Integer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.server.standard.ServerContainer org.springframework.web.socket.server.standard.ServerContainer ( ) { return this . org.springframework.web.socket.server.standard.ServerContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . org.springframework.web.socket.server.standard.ServerContainer != null ? this . org.springframework.web.socket.server.standard.ServerContainer . getClass ( ) : ServerContainer .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
