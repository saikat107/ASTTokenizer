<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.integration.jpa.outbound.MessageHandler != null ) { org.springframework.integration.jpa.outbound.SubscribableChannel . unsubscribe ( this . org.springframework.integration.jpa.outbound.MessageHandler ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jpa.outbound.MessageHandler = message -> { assertEquals ( NUMBER , ( ( List < ? > ) message . getPayload ( ) ) . size ( ) ) ; assertEquals ( NUMBER , entityManager . createQuery ( STRING ) . getResultList ( ) . size ( ) ) ; assertThat ( message , HeaderMatcher . hasHeader ( STRING , STRING ) ) ; } ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . subscribe ( this . org.springframework.integration.jpa.outbound.MessageHandler ) ; Message < java.lang.Integer > org.springframework.integration.jpa.outbound.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , STRING ) . build ( ) ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jpa.outbound.MessageHandler = message -> { assertThat ( message . getPayload ( ) , Matchers . instanceOf ( StudentDomain .class ) ) ; StudentDomain student = ( StudentDomain ) message . getPayload ( ) ; assertEquals ( STRING , student . getFirstName ( ) ) ; } ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . subscribe ( this . org.springframework.integration.jpa.outbound.MessageHandler ) ; Message < java.lang.Long > org.springframework.integration.jpa.outbound.Message<java.lang.Long> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<java.lang.Long> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.integration.jpa.outbound.MessageHandler = message -> { assertThat ( message . getPayload ( ) , Matchers . instanceOf ( StudentDomain .class ) ) ; StudentDomain student = ( StudentDomain ) message . getPayload ( ) ; assertEquals ( STRING , student . getFirstName ( ) ) ; } ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . subscribe ( this . org.springframework.integration.jpa.outbound.MessageHandler ) ; StudentDomain org.springframework.integration.jpa.outbound.StudentDomain = new StudentDomain ( ) ; org.springframework.integration.jpa.outbound.StudentDomain . setRollNumber ( NUMBER ) ; Message < StudentDomain > org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> = MessageBuilder . withPayload ( org.springframework.integration.jpa.outbound.StudentDomain ) . build ( ) ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<org.springframework.integration.jpa.outbound.StudentDomain> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Long > org.springframework.integration.jpa.outbound.Message<java.lang.Long> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<java.lang.Long> ) ; Message < ? > org.springframework.integration.jpa.outbound.Message<?> = this . org.springframework.integration.jpa.outbound.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jpa.outbound.Message<> ) ; try { this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<java.lang.Long> ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( ReplyRequiredException .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.Integer > org.springframework.integration.jpa.outbound.Message<java.lang.Integer> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; try { this . org.springframework.integration.jpa.outbound.SubscribableChannel . send ( org.springframework.integration.jpa.outbound.Message<java.lang.Integer> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageHandlingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , Matchers . instanceOf ( java.lang.IllegalArgumentException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.Throwable ( ) , Matchers . instanceOf ( TypeMismatchException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
