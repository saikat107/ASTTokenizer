<METHOD_START> public static synchronized org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer ( ) java.lang.ClassNotFoundException { if ( org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer == null ) { java.lang.System . java.lang.String ( STRING , OutputStreamFactory .class . java.lang.String ( ) + STRING ) ; org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer = new org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer ( ) ; } return org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer ; }  <METHOD_END>
<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConnectionProperties org.springframework.jdbc.datasource.embedded.ConnectionProperties , java.lang.String java.lang.String ) { org.springframework.jdbc.datasource.embedded.ConnectionProperties . setDriverClass ( EmbeddedDriver .class ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setUrl ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , STRING ) ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setUsername ( STRING ) ; org.springframework.jdbc.datasource.embedded.ConnectionProperties . setPassword ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( javax.sql.DataSource javax.sql.DataSource , java.lang.String java.lang.String ) { try { new EmbeddedDriver ( ) . connect ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , STRING ) , new java.util.Properties ( ) ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { if ( ! STRING . boolean ( java.sql.SQLException . java.lang.String ( ) ) ) { LogFactory . getLog ( java.lang.Class<? extends org.springframework.jdbc.datasource.embedded.DerbyEmbeddedDatabaseConfigurer> ( ) ) . warn ( STRING , java.sql.SQLException ) ; } } }  <METHOD_END>
