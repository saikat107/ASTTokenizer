<METHOD_START> public java.lang.String java.lang.String ( java.lang.String java.lang.String , Type org.springframework.data.mongodb.core.query.Type ) { if ( org.springframework.data.mongodb.core.query.Type == null || java.lang.String == null ) { return java.lang.String ; } java.lang.String java.lang.String = java.lang.String ( java.lang.String , org.springframework.data.mongodb.core.query.Type ) ; switch ( org.springframework.data.mongodb.core.query.Type ) { case STARTING_WITH : java.lang.String = STRING + java.lang.String ; break; case ENDING_WITH : java.lang.String = java.lang.String + STRING ; break; case CONTAINING : case NOT_CONTAINING : java.lang.String = STRING + java.lang.String + STRING ; break; case SIMPLE_PROPERTY : case NEGATING_SIMPLE_PROPERTY : java.lang.String = STRING + java.lang.String + STRING ; default: } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , Type org.springframework.data.mongodb.core.query.Type ) { if ( ObjectUtils . nullSafeEquals ( Type . REGEX , org.springframework.data.mongodb.core.query.Type ) ) { return java.lang.String ; } if ( ! ObjectUtils . nullSafeEquals ( Type . LIKE , org.springframework.data.mongodb.core.query.Type ) && ! ObjectUtils . nullSafeEquals ( Type . NOT_LIKE , org.springframework.data.mongodb.core.query.Type ) ) { return java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ? java.util.regex.Pattern . java.lang.String ( java.lang.String ) : java.lang.String ; } if ( java.lang.String . boolean ( STRING ) ) { return STRING ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; boolean boolean = java.lang.String . boolean ( STRING ) ; boolean boolean = java.lang.String . boolean ( STRING ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( boolean ? NUMBER : NUMBER , boolean ? java.lang.String . int ( ) - NUMBER : java.lang.String . int ( ) ) ; if ( java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { java.lang.String = java.util.regex.Pattern . java.lang.String ( java.lang.String ) ; } if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; if ( boolean ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
