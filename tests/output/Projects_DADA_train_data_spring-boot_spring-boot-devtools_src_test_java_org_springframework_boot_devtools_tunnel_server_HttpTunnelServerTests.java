<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer = new HttpTunnelServer ( this . org.springframework.boot.devtools.tunnel.server.TargetServerConnection ) ; given ( this . org.springframework.boot.devtools.tunnel.server.TargetServerConnection . open ( anyInt ( ) ) ) . willAnswer ( new Answer < java.nio.channels.ByteChannel > ( ) { @ java.lang.Override public java.nio.channels.ByteChannel java.nio.channels.ByteChannel ( InvocationOnMock org.springframework.boot.devtools.tunnel.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel = org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests .this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ( java.lang.Integer ) org.springframework.boot.devtools.tunnel.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; return org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel ; } } ) ; this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest = new MockHttpServletRequest ( ) ; this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . setAsyncSupported ( true ) ; this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse = new MockHttpServletResponse ( ) ; this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest = new ServletServerHttpRequest ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest ) ; this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse = new ServletServerHttpResponse ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.channels.ByteChannel java.nio.channels.ByteChannel ( InvocationOnMock org.springframework.boot.devtools.tunnel.server.InvocationOnMock ) throws java.lang.Throwable { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel = org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests .this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ( java.lang.Integer ) org.springframework.boot.devtools.tunnel.server.InvocationOnMock . getArguments ( ) [ NUMBER ] ) ; return org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expectMessage ( STRING ) ; new HttpTunnelServer ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { verify ( this . org.springframework.boot.devtools.tunnel.server.TargetServerConnection , never ( ) ) . open ( anyInt ( ) ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; verify ( this . org.springframework.boot.devtools.tunnel.server.TargetServerConnection , times ( NUMBER ) ) . open ( int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setLongPollTimeout ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; verify ( this . org.springframework.boot.devtools.tunnel.server.TargetServerConnection , times ( NUMBER ) ) . open ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setLongPollTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . addHeader ( java.lang.String , STRING ) ; this . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . setContent ( STRING . byte[] ( ) ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; java.lang.System . java.io.PrintStream . void ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . void ( STRING , NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . void ( STRING , NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . void ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest ( ) . addHeader ( STRING , STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . waitForResponse ( ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( STRING , NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setDisconnectTimeout ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setLongPollTimeout ( NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; java.lang.Thread . void ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . getStatus ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setDisconnectTimeout ( NUMBER ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setLongPollTimeout ( NUMBER ) ; org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection = new org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ( ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . handle ( org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockHttpConnection ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . void ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . getServerThread ( ) . join ( ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServerTests.MockServerChannel . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.tunnel.server.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.devtools.tunnel.server.HttpTunnelServer . setDisconnectTimeout ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpConnection org.springframework.boot.devtools.tunnel.server.HttpConnection = new HttpConnection ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . waitForResponse ( ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . respond ( new HttpTunnelPayload ( NUMBER , java.nio.ByteBuffer . java.nio.ByteBuffer ( STRING . byte[] ( ) ) ) ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getHeader ( java.lang.String ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpConnection org.springframework.boot.devtools.tunnel.server.HttpConnection = new HttpConnection ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . waitForResponse ( ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . respond ( HttpStatus . I_AM_A_TEAPOT ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getStatus ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getContentLength ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ServerHttpAsyncRequestControl org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl = mock ( ServerHttpAsyncRequestControl .class ) ; ServerHttpRequest org.springframework.boot.devtools.tunnel.server.ServerHttpRequest = mock ( ServerHttpRequest .class ) ; given ( org.springframework.boot.devtools.tunnel.server.ServerHttpRequest . getAsyncRequestControl ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ) . willReturn ( org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl ) ; HttpConnection org.springframework.boot.devtools.tunnel.server.HttpConnection = new HttpConnection ( org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . waitForResponse ( ) ; verify ( org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl ) . start ( ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . respond ( HttpStatus . NO_CONTENT ) ; verify ( org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl ) . complete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( NUMBER ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( long long )			throws java.io.IOException , java.lang.InterruptedException { ServerHttpRequest org.springframework.boot.devtools.tunnel.server.ServerHttpRequest = mock ( ServerHttpRequest .class ) ; given ( org.springframework.boot.devtools.tunnel.server.ServerHttpRequest . getAsyncRequestControl ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ) . willThrow ( new java.lang.IllegalArgumentException ( ) ) ; final HttpConnection org.springframework.boot.devtools.tunnel.server.HttpConnection = new HttpConnection ( org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.tunnel.server.HttpConnection . waitForResponse ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } } ; java.lang.Thread . void ( ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) . isFalse ( ) ; java.lang.Thread . void ( long ) ; org.springframework.boot.devtools.tunnel.server.HttpConnection . respond ( HttpStatus . NO_CONTENT ) ; java.lang.Thread . void ( ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.tunnel.server.HttpConnection . waitForResponse ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpConnection org.springframework.boot.devtools.tunnel.server.HttpConnection = new HttpConnection ( this . org.springframework.boot.devtools.tunnel.server.ServerHttpRequest , this . org.springframework.boot.devtools.tunnel.server.ServerHttpResponse ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpConnection . isOlderThan ( NUMBER ) ) . isFalse ( ) ; java.lang.Thread . void ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.HttpConnection . isOlderThan ( NUMBER ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { this . java.util.concurrent.BlockingDeque<java.nio.ByteBuffer> . void ( java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . java.util.concurrent.BlockingDeque<java.nio.ByteBuffer> . void ( java.nio.ByteBuffer ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( byte [] byte[] ) { synchronized ( this . java.io.ByteArrayOutputStream ) { assertThat ( this . java.io.ByteArrayOutputStream . byte[] ( ) ) . isEqualTo ( byte[] ) ; this . java.io.ByteArrayOutputStream . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { try { java.nio.ByteBuffer java.nio.ByteBuffer = this . java.util.concurrent.BlockingDeque<java.nio.ByteBuffer> . java.nio.ByteBuffer ( this . int , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( java.nio.ByteBuffer == null ) { throw new java.net.SocketTimeoutException ( ) ; } if ( java.nio.ByteBuffer == java.nio.ByteBuffer ) { this . java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; return - NUMBER ; } int int = java.nio.ByteBuffer . int ( ) ; java.nio.ByteBuffer . java.nio.Buffer ( java.lang.Math . int ( java.nio.ByteBuffer . int ( ) , int ) ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( java.nio.ByteBuffer ) ; java.nio.ByteBuffer . java.nio.Buffer ( java.nio.ByteBuffer . int ( ) ) ; return int - java.nio.ByteBuffer . int ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.lang.IllegalStateException ( java.lang.InterruptedException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.nio.ByteBuffer java.nio.ByteBuffer ) throws java.io.IOException { int int = java.nio.ByteBuffer . int ( ) ; synchronized ( this . java.io.ByteArrayOutputStream ) { java.nio.channels.Channels . java.nio.channels.WritableByteChannel ( this . java.io.ByteArrayOutputStream ) . int ( java.nio.ByteBuffer ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { this . java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( new ServletServerHttpRequest ( new MockHttpServletRequest ( ) ) , new ServletServerHttpResponse ( new MockHttpServletResponse ( ) ) ); }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , int int ) { this(); MockHttpServletRequest org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest = org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest ( ) ; org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . setContent ( java.lang.String . byte[] ( ) ) ; org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest . addHeader ( java.lang.String , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl org.springframework.boot.devtools.tunnel.server.ServerHttpAsyncRequestControl ( ) { org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest ( ) . setAsyncSupported ( true ) ; return super. startAsync ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. complete ( ) ; org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . setCommitted ( true ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest org.springframework.boot.devtools.tunnel.server.MockHttpServletRequest ( ) { return ( MockHttpServletRequest ) ( ( ServletServerHttpRequest ) getRequest ( ) ) . getServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) { return ( MockHttpServletResponse ) ( ( ServletServerHttpResponse ) getResponse ( ) ) . getServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , int int )				throws java.lang.Exception { void ( ) ; MockHttpServletResponse org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse = org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getContentAsString ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse . getHeader ( java.lang.String ) ) . isEqualTo ( java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.InterruptedException { while ( ! org.springframework.boot.devtools.tunnel.server.MockHttpServletResponse ( ) . isCommitted ( ) ) { java.lang.Thread . void ( NUMBER ) ; } }  <METHOD_END>
