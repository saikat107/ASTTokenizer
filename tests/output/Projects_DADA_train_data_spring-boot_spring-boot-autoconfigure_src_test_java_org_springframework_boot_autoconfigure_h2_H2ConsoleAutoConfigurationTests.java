<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ) . hasSize ( NUMBER ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getUrlMappings ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getInitParameters ( ) ) . doesNotContainKey ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getInitParameters ( ) ) . doesNotContainKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.ExpectedException . expect ( BeanCreationException .class ) ; this . org.springframework.boot.autoconfigure.h2.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ) . hasSize ( NUMBER ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getUrlMappings ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ) . hasSize ( NUMBER ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getUrlMappings ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . register ( H2ConsoleAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBeansOfType ( ServletRegistrationBean .class ) ) . hasSize ( NUMBER ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.h2.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getUrlMappings ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getInitParameters ( ) ) . containsEntry ( STRING , STRING ) ; assertThat ( org.springframework.boot.autoconfigure.h2.ServletRegistrationBean<> . getInitParameters ( ) ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
