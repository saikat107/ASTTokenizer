<METHOD_START> public void ( GraphQueryMethod org.springframework.data.neo4j.repository.query.GraphQueryMethod , java.lang.Object [] java.lang.Object[] ) { super( org.springframework.data.neo4j.repository.query.GraphQueryMethod . getParameters ( ) , java.lang.Object[] ); this . org.springframework.data.neo4j.repository.query.GraphQueryMethod = org.springframework.data.neo4j.repository.query.GraphQueryMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Depth org.springframework.data.neo4j.repository.query.Depth = AnnotatedElementUtils . findMergedAnnotation ( org.springframework.data.neo4j.repository.query.GraphQueryMethod . getMethod ( ) , Depth .class ) ; if ( org.springframework.data.neo4j.repository.query.Depth != null ) { return ( int ) AnnotationUtils . getValue ( org.springframework.data.neo4j.repository.query.Depth ) ; } GraphParameters org.springframework.data.neo4j.repository.query.GraphParameters = org.springframework.data.neo4j.repository.query.GraphQueryMethod . getParameters ( ) ; int int = org.springframework.data.neo4j.repository.query.GraphParameters . getDepthIndex ( ) ; if ( int != - NUMBER ) { return getValue ( int ) ; } else { return int ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.neo4j.repository.query.SortOrder org.springframework.data.neo4j.repository.query.SortOrder ( ) { SortOrder org.springframework.data.neo4j.repository.query.SortOrder = new SortOrder ( ) ; if ( getSort ( ) != null ) { for ( Sort . Sort Sort.Order : getSort ( ) ) { if ( Sort.Order . isAscending ( ) ) { org.springframework.data.neo4j.repository.query.SortOrder . add ( Sort.Order . getProperty ( ) ) ; } else { org.springframework.data.neo4j.repository.query.SortOrder . add ( SortOrder . Direction . DESC , Sort.Order . getProperty ( ) ) ; } } } return org.springframework.data.neo4j.repository.query.SortOrder ; }  <METHOD_END>
