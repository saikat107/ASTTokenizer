<METHOD_START> public static boolean boolean ( BeanDefinition org.springframework.context.annotation.BeanDefinition , MetadataReaderFactory org.springframework.context.annotation.MetadataReaderFactory ) { java.lang.String java.lang.String = org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) ; if ( java.lang.String == null ) { return false ; } AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ; if ( org.springframework.context.annotation.BeanDefinition instanceof AnnotatedBeanDefinition && java.lang.String . boolean ( ( ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . getMetadata ( ) . getClassName ( ) ) ) { org.springframework.context.annotation.AnnotationMetadata = ( ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . getMetadata ( ) ; } else if ( org.springframework.context.annotation.BeanDefinition instanceof AbstractBeanDefinition && ( ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . hasBeanClass ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = ( ( AbstractBeanDefinition ) org.springframework.context.annotation.BeanDefinition ) . getBeanClass ( ) ; org.springframework.context.annotation.AnnotationMetadata = new StandardAnnotationMetadata ( java.lang.Class<> , true ) ; } else { try { MetadataReader org.springframework.context.annotation.MetadataReader = org.springframework.context.annotation.MetadataReaderFactory . getMetadataReader ( java.lang.String ) ; org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.MetadataReader . getAnnotationMetadata ( ) ; } catch ( java.io.IOException java.io.IOException ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String , java.io.IOException ) ; } return false ; } } if ( boolean ( org.springframework.context.annotation.AnnotationMetadata ) ) { org.springframework.context.annotation.BeanDefinition . setAttribute ( java.lang.String , java.lang.String ) ; } else if ( boolean ( org.springframework.context.annotation.AnnotationMetadata ) ) { org.springframework.context.annotation.BeanDefinition . setAttribute ( java.lang.String , java.lang.String ) ; } else { return false ; } java.lang.Integer java.lang.Integer = java.lang.Integer ( org.springframework.context.annotation.AnnotationMetadata ) ; if ( java.lang.Integer != null ) { org.springframework.context.annotation.BeanDefinition . setAttribute ( java.lang.String , java.lang.Integer ) ; } return true ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { return ( boolean ( org.springframework.context.annotation.AnnotationMetadata ) || boolean ( org.springframework.context.annotation.AnnotationMetadata ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { return org.springframework.context.annotation.AnnotationMetadata . isAnnotated ( Configuration .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { if ( org.springframework.context.annotation.AnnotationMetadata . isInterface ( ) ) { return false ; } for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( org.springframework.context.annotation.AnnotationMetadata . isAnnotated ( java.lang.String ) ) { return true ; } } try { return org.springframework.context.annotation.AnnotationMetadata . hasAnnotatedMethods ( Bean .class . java.lang.String ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) + STRING + java.lang.Throwable ) ; } return false ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { return java.lang.String . boolean ( org.springframework.context.annotation.BeanDefinition . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { return java.lang.String . boolean ( org.springframework.context.annotation.BeanDefinition . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Integer java.lang.Integer ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationMetadata . getAnnotationAttributes ( Order .class . java.lang.String ( ) ) ; return ( java.util.Map<java.lang.String,java.lang.Object> != null ? ( ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AnnotationUtils . VALUE ) ) : null ) ; }  <METHOD_END>
<METHOD_START> public static int int ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.context.annotation.BeanDefinition . getAttribute ( java.lang.String ) ; return ( java.lang.Integer != null ? java.lang.Integer : Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
