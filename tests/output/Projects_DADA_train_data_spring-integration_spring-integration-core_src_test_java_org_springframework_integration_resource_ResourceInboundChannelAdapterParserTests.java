<METHOD_START> @ BeforeClass public static void void ( ) { java.io.File = new java.io.File ( java.lang.System . java.lang.String ( STRING ) , STRING ) ; java.io.File . boolean ( ) ; java.io.File . void ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; for ( java.io.File java.io.File : java.io.File[] ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.io.File . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.integration.resource.ApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.resource.SourcePollingChannelAdapter = org.springframework.integration.resource.ApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; ResourceRetrievingMessageSource org.springframework.integration.resource.ResourceRetrievingMessageSource = TestUtils . getPropertyValue ( org.springframework.integration.resource.SourcePollingChannelAdapter , STRING , ResourceRetrievingMessageSource .class ) ; assertNotNull ( org.springframework.integration.resource.ResourceRetrievingMessageSource ) ; boolean boolean = TestUtils . getPropertyValue ( org.springframework.integration.resource.SourcePollingChannelAdapter , STRING , java.lang.Boolean .class ) ; assertFalse ( boolean ) ; assertEquals ( STRING STRING , TestUtils . getPropertyValue ( org.springframework.integration.resource.ResourceRetrievingMessageSource , STRING ) ) ; assertEquals ( org.springframework.integration.resource.ApplicationContext , TestUtils . getPropertyValue ( org.springframework.integration.resource.ResourceRetrievingMessageSource , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BeanCreationException .class ) public void void ( ) { new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.integration.resource.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.resource.SourcePollingChannelAdapter = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; ResourceRetrievingMessageSource org.springframework.integration.resource.ResourceRetrievingMessageSource = TestUtils . getPropertyValue ( org.springframework.integration.resource.SourcePollingChannelAdapter , STRING , ResourceRetrievingMessageSource .class ) ; assertNotNull ( org.springframework.integration.resource.ResourceRetrievingMessageSource ) ; assertEquals ( org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING ) , TestUtils . getPropertyValue ( org.springframework.integration.resource.ResourceRetrievingMessageSource , STRING ) ) ; org.springframework.integration.resource.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.File java.io.File = new java.io.File ( java.io.File , STRING + int ) ; java.io.File . boolean ( ) ; } ClassPathXmlApplicationContext org.springframework.integration.resource.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) ; QueueChannel org.springframework.integration.resource.QueueChannel = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < Resource [] > org.springframework.integration.resource.Message<org.springframework.integration.resource.Resource[]> = ( Message < Resource [] > ) org.springframework.integration.resource.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.resource.Message<org.springframework.integration.resource.Resource[]> ) ; Resource [] org.springframework.integration.resource.Resource[] = org.springframework.integration.resource.Message<org.springframework.integration.resource.Resource[]> . getPayload ( ) ; for ( Resource org.springframework.integration.resource.Resource : org.springframework.integration.resource.Resource[] ) { assertTrue ( org.springframework.integration.resource.Resource . getURI ( ) . toString ( ) . contains ( STRING ) ) ; } org.springframework.integration.resource.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.File java.io.File = new java.io.File ( java.io.File , STRING + int ) ; java.io.File . boolean ( ) ; } ClassPathXmlApplicationContext org.springframework.integration.resource.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.resource.SourcePollingChannelAdapter = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; ResourceRetrievingMessageSource org.springframework.integration.resource.ResourceRetrievingMessageSource = TestUtils . getPropertyValue ( org.springframework.integration.resource.SourcePollingChannelAdapter , STRING , ResourceRetrievingMessageSource .class ) ; assertNotNull ( org.springframework.integration.resource.ResourceRetrievingMessageSource ) ; org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter .class ) ; assertEquals ( org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter , TestUtils . getPropertyValue ( org.springframework.integration.resource.ResourceRetrievingMessageSource , STRING ) ) ; assertFalse ( org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter . boolean ) ; org.springframework.integration.resource.SourcePollingChannelAdapter . start ( ) ; QueueChannel org.springframework.integration.resource.QueueChannel = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < Resource [] > org.springframework.integration.resource.Message<org.springframework.integration.resource.Resource[]> = ( Message < Resource [] > ) org.springframework.integration.resource.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.resource.Message<org.springframework.integration.resource.Resource[]> ) ; assertTrue ( org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests.TestCollectionFilter . boolean ) ; org.springframework.integration.resource.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.io.File java.io.File = new java.io.File ( java.io.File , STRING + int ) ; java.io.File . boolean ( ) ; } ClassPathXmlApplicationContext org.springframework.integration.resource.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( STRING , this . java.lang.Class<? extends org.springframework.integration.resource.ResourceInboundChannelAdapterParserTests> ( ) ) ; SourcePollingChannelAdapter org.springframework.integration.resource.SourcePollingChannelAdapter = org.springframework.integration.resource.ClassPathXmlApplicationContext . getBean ( STRING , SourcePollingChannelAdapter .class ) ; ResourceRetrievingMessageSource org.springframework.integration.resource.ResourceRetrievingMessageSource = TestUtils . getPropertyValue ( org.springframework.integration.resource.SourcePollingChannelAdapter , STRING , ResourceRetrievingMessageSource .class ) ; assertNotNull ( org.springframework.integration.resource.ResourceRetrievingMessageSource ) ; assertNull ( TestUtils . getPropertyValue ( org.springframework.integration.resource.ResourceRetrievingMessageSource , STRING ) ) ; org.springframework.integration.resource.ClassPathXmlApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.integration.resource.Resource> < Resource > java.util.Collection<org.springframework.integration.resource.Resource> ( java.util.Collection<org.springframework.integration.resource.Resource> < Resource > java.util.Collection<org.springframework.integration.resource.Resource> ) { this . boolean = true ; return java.util.Collection<org.springframework.integration.resource.Resource> ; }  <METHOD_END>
