<METHOD_START> @ Test public void void ( ) { CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> . from ( User .class ) ; PropertyPath org.springframework.data.jpa.repository.query.PropertyPath = PropertyPath . from ( STRING , User .class ) ; PropertyPath org.springframework.data.jpa.repository.query.PropertyPath = PropertyPath . from ( STRING , User .class ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> , org.springframework.data.jpa.repository.query.PropertyPath ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> , org.springframework.data.jpa.repository.query.PropertyPath ) ; assertThat ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> . getJoins ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> . from ( User .class ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> , PropertyPath . from ( STRING , User .class ) ) ; assertThat ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> . getJoins ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < Order > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.Order> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( Order .class ) ; Root < Order > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Order> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.Order> . from ( Order .class ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Order> , PropertyPath . from ( STRING , Order .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.User> . from ( User .class ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> , PropertyPath . from ( STRING , User .class ) ) ; assertThat ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.User> . getJoins ( ) , hasSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistenceProviderResolver org.springframework.data.jpa.repository.query.PersistenceProviderResolver = PersistenceProviderResolverHolder . getPersistenceProviderResolver ( ) ; try { PersistenceProviderResolverHolder . setPersistenceProviderResolver ( new org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.HibernateOnlyPersistenceProviderResolver ( ) ) ; EntityManagerFactory org.springframework.data.jpa.repository.query.EntityManagerFactory = Persistence . createEntityManagerFactory ( STRING ) ; CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManagerFactory . createEntityManager ( ) . getCriteriaBuilder ( ) ; CriteriaQuery < org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant .class ) ; Root < org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant> . from ( org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant .class ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant> , PropertyPath . from ( STRING , org.springframework.data.jpa.repository.query.QueryUtilsIntegrationTests.Merchant .class ) ) ; } finally { PersistenceProviderResolverHolder . setPersistenceProviderResolver ( org.springframework.data.jpa.repository.query.PersistenceProviderResolver ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { CriteriaBuilder org.springframework.data.jpa.repository.query.CriteriaBuilder = org.springframework.data.jpa.repository.query.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < Category > org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.Category> = org.springframework.data.jpa.repository.query.CriteriaBuilder . createQuery ( Category .class ) ; Root < Category > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> = org.springframework.data.jpa.repository.query.CriteriaQuery<org.springframework.data.jpa.repository.query.Category> . from ( Category .class ) ; Root < Category > org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> = Mockito . mock ( Root .class ) ; doReturn ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> . getModel ( ) ) . when ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> ) . getModel ( ) ; doReturn ( java.util.Collections . java.util.Set ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> . fetch ( STRING , JoinType . LEFT ) ) ) . when ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> ) . getFetches ( ) ; QueryUtils . toExpressionRecursively ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> , PropertyPath . from ( STRING , Category .class ) ) ; verify ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> , times ( NUMBER ) ) . get ( STRING ) ; verify ( org.springframework.data.jpa.repository.query.Root<org.springframework.data.jpa.repository.query.Category> , times ( NUMBER ) ) . join ( Mockito . eq ( STRING ) , Mockito . any ( JoinType .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.data.jpa.repository.query.PersistenceProvider> < PersistenceProvider > java.util.List<org.springframework.data.jpa.repository.query.PersistenceProvider> ( ) { return java.util.Arrays . java.util.List ( HibernateTestUtils . getPersistenceProvider ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {}  <METHOD_END>
