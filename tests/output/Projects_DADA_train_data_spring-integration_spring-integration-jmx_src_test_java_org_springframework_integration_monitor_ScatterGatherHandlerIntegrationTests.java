<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.monitor.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.monitor.MessageChannel . send ( org.springframework.integration.monitor.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.monitor.Message<?> = this . org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.monitor.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.monitor.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.lang.Double .class ) ) ; assertThat ( ( java.lang.Double ) java.lang.Object , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.monitor.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.monitor.MessageChannel . send ( org.springframework.integration.monitor.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.monitor.Message<?> = this . org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.monitor.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.monitor.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.util.List .class ) ) ; assertEquals ( NUMBER , ( ( java.util.List ) java.lang.Object ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.monitor.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; this . org.springframework.integration.monitor.MessageChannel . send ( org.springframework.integration.monitor.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.monitor.Message<?> = this . org.springframework.integration.monitor.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.monitor.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.monitor.Message<> . getPayload ( ) ; assertThat ( java.lang.Object , instanceOf ( java.lang.Double .class ) ) ; assertThat ( ( java.lang.Double ) java.lang.Object , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.integration.monitor.MBeanServerFactoryBean org.springframework.integration.monitor.MBeanServerFactoryBean ( ) { MBeanServerFactoryBean org.springframework.integration.monitor.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.integration.monitor.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; return org.springframework.integration.monitor.MBeanServerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.PollableChannel org.springframework.integration.monitor.PollableChannel ( ) { return new QueueChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.SubscribableChannel org.springframework.integration.monitor.SubscribableChannel ( ) { PublishSubscribeChannel org.springframework.integration.monitor.PublishSubscribeChannel = new PublishSubscribeChannel ( ) ; org.springframework.integration.monitor.PublishSubscribeChannel . setApplySequence ( true ) ; return org.springframework.integration.monitor.PublishSubscribeChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { return new AggregatingMessageHandler ( new ExpressionEvaluatingMessageGroupProcessor ( STRING ) , new SimpleMessageStore ( ) , new HeaderAttributeCorrelationStrategy ( IntegrationMessageHeaderAccessor . CORRELATION_ID ) , new ExpressionEvaluatingReleaseStrategy ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { ScatterGatherHandler org.springframework.integration.monitor.ScatterGatherHandler = new ScatterGatherHandler ( org.springframework.integration.monitor.SubscribableChannel ( ) , org.springframework.integration.monitor.MessageHandler ( ) ) ; org.springframework.integration.monitor.ScatterGatherHandler . setOutputChannel ( org.springframework.integration.monitor.PollableChannel ( ) ) ; return org.springframework.integration.monitor.ScatterGatherHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { return new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { return java.lang.Math . double ( ) * NUMBER ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { return java.lang.Math . double ( ) * NUMBER ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { RecipientListRouter org.springframework.integration.monitor.RecipientListRouter = new RecipientListRouter ( ) ; org.springframework.integration.monitor.RecipientListRouter . setApplySequence ( true ) ; org.springframework.integration.monitor.RecipientListRouter . setChannels ( java.util.Arrays . java.util.List ( org.springframework.integration.monitor.MessageChannel ( ) , org.springframework.integration.monitor.MessageChannel ( ) , org.springframework.integration.monitor.MessageChannel ( ) ) ) ; return org.springframework.integration.monitor.RecipientListRouter ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { ScatterGatherHandler org.springframework.integration.monitor.ScatterGatherHandler = new ScatterGatherHandler ( org.springframework.integration.monitor.MessageHandler ( ) , org.springframework.integration.monitor.MessageHandler ( ) ) ; org.springframework.integration.monitor.ScatterGatherHandler . setOutputChannel ( org.springframework.integration.monitor.PollableChannel ( ) ) ; return org.springframework.integration.monitor.ScatterGatherHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.SubscribableChannel org.springframework.integration.monitor.SubscribableChannel ( ) { PublishSubscribeChannel org.springframework.integration.monitor.PublishSubscribeChannel = new PublishSubscribeChannel ( java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( ) ) ; org.springframework.integration.monitor.PublishSubscribeChannel . setApplySequence ( true ) ; return org.springframework.integration.monitor.PublishSubscribeChannel ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { return new AggregatingMessageHandler ( new DefaultAggregatingMessageGroupProcessor ( ) , new SimpleMessageStore ( ) , new HeaderAttributeCorrelationStrategy ( IntegrationMessageHeaderAccessor . CORRELATION_ID ) , new MessageCountReleaseStrategy ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { ScatterGatherHandler org.springframework.integration.monitor.ScatterGatherHandler = new ScatterGatherHandler ( org.springframework.integration.monitor.SubscribableChannel ( ) , org.springframework.integration.monitor.MessageHandler ( ) ) ; org.springframework.integration.monitor.ScatterGatherHandler . setGatherChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; org.springframework.integration.monitor.ScatterGatherHandler . setOutputChannel ( org.springframework.integration.monitor.PollableChannel ( ) ) ; return org.springframework.integration.monitor.ScatterGatherHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { BridgeHandler org.springframework.integration.monitor.BridgeHandler = new BridgeHandler ( ) ; org.springframework.integration.monitor.BridgeHandler . setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; return org.springframework.integration.monitor.BridgeHandler ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.monitor.MessageChannel org.springframework.integration.monitor.MessageChannel ( ) { return new DirectChannel ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ServiceActivator ( inputChannel = STRING ) public org.springframework.integration.monitor.MessageHandler org.springframework.integration.monitor.MessageHandler ( ) { return new AbstractReplyProducingMessageHandler ( ) { { setOutputChannel ( org.springframework.integration.monitor.MessageChannel ( ) ) ; } @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { return java.lang.Math . double ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.monitor.Message<?> ) { return java.lang.Math . double ( ) ; }  <METHOD_END>
