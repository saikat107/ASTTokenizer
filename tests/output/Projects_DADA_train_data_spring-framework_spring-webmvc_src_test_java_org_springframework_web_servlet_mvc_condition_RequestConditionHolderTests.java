<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING , STRING ) ) ; assertEquals ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . combine ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; assertSame ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . combine ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder ) ) ; assertSame ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . combine ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder ) ) ; assertSame ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . combine ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ClassCastException .class ) public void void ( ) { RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new HeadersRequestCondition ( STRING ) ) ; org.springframework.web.servlet.mvc.condition.RequestConditionHolder . combine ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.condition.MockHttpServletRequest . setParameter ( STRING , STRING ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . GET , RequestMethod . POST ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . GET ) ; assertEquals ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) . getCondition ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockHttpServletRequest org.springframework.web.servlet.mvc.condition.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; RequestMethodsRequestCondition org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition = new RequestMethodsRequestCondition ( RequestMethod . POST ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition ) ; assertNull ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder . getMatchingCondition ( org.springframework.web.servlet.mvc.condition.MockHttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; assertSame ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . getMatchingCondition ( new MockHttpServletRequest ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest = new MockHttpServletRequest ( ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING , STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; assertEquals ( - NUMBER , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpServletRequest org.springframework.web.servlet.mvc.condition.HttpServletRequest = new MockHttpServletRequest ( ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( null ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; assertEquals ( - NUMBER , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , org.springframework.web.servlet.mvc.condition.HttpServletRequest ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ClassCastException .class ) public void void ( ) { RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new ParamsRequestCondition ( STRING ) ) ; RequestConditionHolder org.springframework.web.servlet.mvc.condition.RequestConditionHolder = new RequestConditionHolder ( new HeadersRequestCondition ( STRING ) ) ; org.springframework.web.servlet.mvc.condition.RequestConditionHolder . compareTo ( org.springframework.web.servlet.mvc.condition.RequestConditionHolder , new MockHttpServletRequest ( ) ) ; }  <METHOD_END>
