<METHOD_START> void ( LoggingInitializationContext org.springframework.boot.logging.logback.LoggingInitializationContext , LogFile org.springframework.boot.logging.logback.LogFile ) { this . org.springframework.boot.logging.logback.PropertyResolver = org.springframework.boot.logging.logback.PropertyResolver ( org.springframework.boot.logging.logback.LoggingInitializationContext . getEnvironment ( ) ) ; this . org.springframework.boot.logging.logback.LogFile = org.springframework.boot.logging.logback.LogFile ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.PropertyResolver org.springframework.boot.logging.logback.PropertyResolver ( Environment org.springframework.boot.logging.logback.Environment ) { if ( org.springframework.boot.logging.logback.Environment == null ) { return new PropertySourcesPropertyResolver ( null ) ; } return RelaxedPropertyResolver . ignoringUnresolvableNestedPlaceholders ( org.springframework.boot.logging.logback.Environment , STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator ) { synchronized ( org.springframework.boot.logging.logback.LogbackConfigurator . getConfigurationLock ( ) ) { void ( org.springframework.boot.logging.logback.LogbackConfigurator ) ; Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> = org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ( org.springframework.boot.logging.logback.LogbackConfigurator ) ; if ( this . org.springframework.boot.logging.logback.LogFile != null ) { Appender < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> = org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ( org.springframework.boot.logging.logback.LogbackConfigurator , this . org.springframework.boot.logging.logback.LogFile . toString ( ) ) ; org.springframework.boot.logging.logback.LogbackConfigurator . root ( Level . INFO , org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> , org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; } else { org.springframework.boot.logging.logback.LogbackConfigurator . root ( Level . INFO , org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator ) { org.springframework.boot.logging.logback.LogbackConfigurator . conversionRule ( STRING , ColorConverter .class ) ; org.springframework.boot.logging.logback.LogbackConfigurator . conversionRule ( STRING , WhitespaceThrowableProxyConverter .class ) ; org.springframework.boot.logging.logback.LogbackConfigurator . conversionRule ( STRING , ExtendedWhitespaceThrowableProxyConverter .class ) ; LevelRemappingAppender org.springframework.boot.logging.logback.LevelRemappingAppender = new LevelRemappingAppender ( STRING ) ; org.springframework.boot.logging.logback.LogbackConfigurator . start ( org.springframework.boot.logging.logback.LevelRemappingAppender ) ; org.springframework.boot.logging.logback.LogbackConfigurator . appender ( STRING , org.springframework.boot.logging.logback.LevelRemappingAppender ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . ERROR ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . ERROR ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . WARN ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . WARN ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . WARN ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . ERROR ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , Level . WARN ) ; org.springframework.boot.logging.logback.LogbackConfigurator . logger ( STRING , null , false , org.springframework.boot.logging.logback.LevelRemappingAppender ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ( LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator ) { ConsoleAppender < ILoggingEvent > org.springframework.boot.logging.logback.ConsoleAppender<org.springframework.boot.logging.logback.ILoggingEvent> = new ConsoleAppender <> ( ) ; PatternLayoutEncoder org.springframework.boot.logging.logback.PatternLayoutEncoder = new PatternLayoutEncoder ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.PropertyResolver . getProperty ( STRING , java.lang.String ) ; org.springframework.boot.logging.logback.PatternLayoutEncoder . setPattern ( OptionHelper . substVars ( java.lang.String , org.springframework.boot.logging.logback.LogbackConfigurator . getContext ( ) ) ) ; org.springframework.boot.logging.logback.PatternLayoutEncoder . setCharset ( java.nio.charset.Charset ) ; org.springframework.boot.logging.logback.LogbackConfigurator . start ( org.springframework.boot.logging.logback.PatternLayoutEncoder ) ; org.springframework.boot.logging.logback.ConsoleAppender<org.springframework.boot.logging.logback.ILoggingEvent> . setEncoder ( org.springframework.boot.logging.logback.PatternLayoutEncoder ) ; org.springframework.boot.logging.logback.LogbackConfigurator . appender ( STRING , org.springframework.boot.logging.logback.ConsoleAppender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; return org.springframework.boot.logging.logback.ConsoleAppender<org.springframework.boot.logging.logback.ILoggingEvent> ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> < ILoggingEvent > org.springframework.boot.logging.logback.Appender<org.springframework.boot.logging.logback.ILoggingEvent> ( LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator , java.lang.String java.lang.String ) { RollingFileAppender < ILoggingEvent > org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> = new RollingFileAppender <> ( ) ; PatternLayoutEncoder org.springframework.boot.logging.logback.PatternLayoutEncoder = new PatternLayoutEncoder ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.logging.logback.PropertyResolver . getProperty ( STRING , java.lang.String ) ; org.springframework.boot.logging.logback.PatternLayoutEncoder . setPattern ( OptionHelper . substVars ( java.lang.String , org.springframework.boot.logging.logback.LogbackConfigurator . getContext ( ) ) ) ; org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> . setEncoder ( org.springframework.boot.logging.logback.PatternLayoutEncoder ) ; org.springframework.boot.logging.logback.LogbackConfigurator . start ( org.springframework.boot.logging.logback.PatternLayoutEncoder ) ; org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> . setFile ( java.lang.String ) ; void ( org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> , org.springframework.boot.logging.logback.LogbackConfigurator , java.lang.String ) ; void ( org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> , org.springframework.boot.logging.logback.LogbackConfigurator ) ; org.springframework.boot.logging.logback.LogbackConfigurator . appender ( STRING , org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; return org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> ; }  <METHOD_END>
<METHOD_START> private void void ( RollingFileAppender < ILoggingEvent > org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> , LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator , java.lang.String java.lang.String ) { FixedWindowRollingPolicy org.springframework.boot.logging.logback.FixedWindowRollingPolicy = new FixedWindowRollingPolicy ( ) ; org.springframework.boot.logging.logback.FixedWindowRollingPolicy . setFileNamePattern ( java.lang.String + STRING ) ; org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> . setRollingPolicy ( org.springframework.boot.logging.logback.FixedWindowRollingPolicy ) ; org.springframework.boot.logging.logback.FixedWindowRollingPolicy . setParent ( org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> ) ; org.springframework.boot.logging.logback.LogbackConfigurator . start ( org.springframework.boot.logging.logback.FixedWindowRollingPolicy ) ; }  <METHOD_END>
<METHOD_START> private void void ( RollingFileAppender < ILoggingEvent > org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> , LogbackConfigurator org.springframework.boot.logging.logback.LogbackConfigurator ) { SizeBasedTriggeringPolicy < ILoggingEvent > org.springframework.boot.logging.logback.SizeBasedTriggeringPolicy<org.springframework.boot.logging.logback.ILoggingEvent> = new SizeBasedTriggeringPolicy <> ( ) ; try { org.springframework.boot.logging.logback.SizeBasedTriggeringPolicy<org.springframework.boot.logging.logback.ILoggingEvent> . setMaxFileSize ( FileSize . valueOf ( STRING ) ) ; } catch ( java.lang.NoSuchMethodError java.lang.NoSuchMethodError ) { java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( SizeBasedTriggeringPolicy .class , STRING , java.lang.String .class ) ; ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.boot.logging.logback.SizeBasedTriggeringPolicy<org.springframework.boot.logging.logback.ILoggingEvent> , STRING ) ; } org.springframework.boot.logging.logback.RollingFileAppender<org.springframework.boot.logging.logback.ILoggingEvent> . setTriggeringPolicy ( org.springframework.boot.logging.logback.SizeBasedTriggeringPolicy<org.springframework.boot.logging.logback.ILoggingEvent> ) ; org.springframework.boot.logging.logback.LogbackConfigurator . start ( org.springframework.boot.logging.logback.SizeBasedTriggeringPolicy<org.springframework.boot.logging.logback.ILoggingEvent> ) ; }  <METHOD_END>
