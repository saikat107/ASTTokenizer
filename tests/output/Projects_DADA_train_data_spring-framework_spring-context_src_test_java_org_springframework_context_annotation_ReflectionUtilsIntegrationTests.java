<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = new ConfigurationClassEnhancer ( ) . enhance ( org.springframework.context.annotation.ReflectionUtilsIntegrationTests.Leaf .class , null ) ; int int = NUMBER ; java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getUniqueDeclaredMethods ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { int ++ ; } } assertThat ( int , is ( NUMBER ) ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ) { assertEquals ( java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.Integer .class ) ; } } }  <METHOD_END>
<METHOD_START> public abstract java.lang.Number java.lang.Number ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public java.lang.Integer java.lang.Integer ( ) { return new java.lang.Integer ( NUMBER ) ; }  <METHOD_END>
