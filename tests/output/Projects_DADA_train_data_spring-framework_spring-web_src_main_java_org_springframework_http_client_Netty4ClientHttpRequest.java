<METHOD_START> public void ( Bootstrap org.springframework.http.client.Bootstrap , java.net.URI java.net.URI , HttpMethod org.springframework.http.client.HttpMethod ) { this . org.springframework.http.client.Bootstrap = org.springframework.http.client.Bootstrap ; this . java.net.URI = java.net.URI ; this . org.springframework.http.client.HttpMethod = org.springframework.http.client.HttpMethod ; this . org.springframework.http.client.ByteBufOutputStream = new ByteBufOutputStream ( Unpooled . buffer ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.HttpMethod org.springframework.http.client.HttpMethod ( ) { return this . org.springframework.http.client.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.ClientHttpResponse org.springframework.http.client.ClientHttpResponse ( ) java.io.IOException { try { return executeAsync ( ) . get ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { throw new java.io.IOException ( java.lang.InterruptedException . java.lang.String ( ) , java.lang.InterruptedException ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { if ( java.util.concurrent.ExecutionException . java.lang.Throwable ( ) instanceof java.io.IOException ) { throw ( java.io.IOException ) java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ; } else { throw new java.io.IOException ( java.util.concurrent.ExecutionException . java.lang.String ( ) , java.util.concurrent.ExecutionException . java.lang.Throwable ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.io.OutputStream java.io.OutputStream ( HttpHeaders org.springframework.http.client.HttpHeaders ) throws java.io.IOException { return this . org.springframework.http.client.ByteBufOutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> < ClientHttpResponse > org.springframework.http.client.ListenableFuture<org.springframework.http.client.ClientHttpResponse> ( final HttpHeaders org.springframework.http.client.HttpHeaders ) throws java.io.IOException { final SettableListenableFuture < ClientHttpResponse > org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> = new SettableListenableFuture <> ( ) ; ChannelFutureListener org.springframework.http.client.ChannelFutureListener = new ChannelFutureListener ( ) { @ java.lang.Override public void void ( ChannelFuture org.springframework.http.client.ChannelFuture ) throws java.lang.Exception { if ( org.springframework.http.client.ChannelFuture . isSuccess ( ) ) { Channel org.springframework.http.client.Channel = org.springframework.http.client.ChannelFuture . channel ( ) ; org.springframework.http.client.Channel . pipeline ( ) . addLast ( new org.springframework.http.client.Netty4ClientHttpRequest.RequestExecuteHandler ( org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> ) ) ; FullHttpRequest org.springframework.http.client.FullHttpRequest = org.springframework.http.client.FullHttpRequest ( org.springframework.http.client.HttpHeaders ) ; org.springframework.http.client.Channel . writeAndFlush ( org.springframework.http.client.FullHttpRequest ) ; } else { org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> . setException ( org.springframework.http.client.ChannelFuture . cause ( ) ) ; } } } ; this . org.springframework.http.client.Bootstrap . connect ( this . java.net.URI . java.lang.String ( ) , int ( this . java.net.URI ) ) . addListener ( org.springframework.http.client.ChannelFutureListener ) ; return org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelFuture org.springframework.http.client.ChannelFuture ) throws java.lang.Exception { if ( org.springframework.http.client.ChannelFuture . isSuccess ( ) ) { Channel org.springframework.http.client.Channel = org.springframework.http.client.ChannelFuture . channel ( ) ; org.springframework.http.client.Channel . pipeline ( ) . addLast ( new org.springframework.http.client.Netty4ClientHttpRequest.RequestExecuteHandler ( org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> ) ) ; FullHttpRequest org.springframework.http.client.FullHttpRequest = org.springframework.http.client.FullHttpRequest ( org.springframework.http.client.HttpHeaders ) ; org.springframework.http.client.Channel . writeAndFlush ( org.springframework.http.client.FullHttpRequest ) ; } else { org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> . setException ( org.springframework.http.client.ChannelFuture . cause ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.http.client.FullHttpRequest org.springframework.http.client.FullHttpRequest ( HttpHeaders org.springframework.http.client.HttpHeaders ) { io . io . io . io . io . io io.netty.handler.codec.http.HttpMethod = io . netty . handler . codec . http . HttpMethod . valueOf ( this . org.springframework.http.client.HttpMethod . name ( ) ) ; java.lang.String java.lang.String = this . java.net.URI . java.lang.String ( ) ; java.lang.String java.lang.String = this . java.net.URI . java.lang.String ( ) . java.lang.String ( this . java.net.URI . java.lang.String ( ) . int ( java.lang.String ) + java.lang.String . int ( ) ) ; FullHttpRequest org.springframework.http.client.FullHttpRequest = new DefaultFullHttpRequest ( HttpVersion . HTTP_1_1 , io.netty.handler.codec.http.HttpMethod , java.lang.String , this . org.springframework.http.client.ByteBufOutputStream . buffer ( ) ) ; org.springframework.http.client.FullHttpRequest . headers ( ) . set ( HttpHeaders . HOST , this . java.net.URI . java.lang.String ( ) ) ; org.springframework.http.client.FullHttpRequest . headers ( ) . set ( HttpHeaders . CONNECTION , STRING ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : org.springframework.http.client.HttpHeaders . entrySet ( ) ) { org.springframework.http.client.FullHttpRequest . headers ( ) . add ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) ; } if ( ! org.springframework.http.client.FullHttpRequest . headers ( ) . contains ( HttpHeaders . CONTENT_LENGTH ) && this . org.springframework.http.client.ByteBufOutputStream . buffer ( ) . readableBytes ( ) > NUMBER ) { org.springframework.http.client.FullHttpRequest . headers ( ) . set ( HttpHeaders . CONTENT_LENGTH , this . org.springframework.http.client.ByteBufOutputStream . buffer ( ) . readableBytes ( ) ) ; } return org.springframework.http.client.FullHttpRequest ; }  <METHOD_END>
<METHOD_START> private static int int ( java.net.URI java.net.URI ) { int int = java.net.URI . int ( ) ; if ( int == - NUMBER ) { if ( STRING . boolean ( java.net.URI . java.lang.String ( ) ) ) { int = NUMBER ; } else if ( STRING . boolean ( java.net.URI . java.lang.String ( ) ) ) { int = NUMBER ; } } return int ; }  <METHOD_END>
<METHOD_START> public void ( SettableListenableFuture < ClientHttpResponse > org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> ) { this . org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> = org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ChannelHandlerContext org.springframework.http.client.ChannelHandlerContext , FullHttpResponse org.springframework.http.client.FullHttpResponse ) throws java.lang.Exception { this . org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> . set ( new Netty4ClientHttpResponse ( org.springframework.http.client.ChannelHandlerContext , org.springframework.http.client.FullHttpResponse ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ChannelHandlerContext org.springframework.http.client.ChannelHandlerContext , java.lang.Throwable java.lang.Throwable ) throws java.lang.Exception { this . org.springframework.http.client.SettableListenableFuture<org.springframework.http.client.ClientHttpResponse> . setException ( java.lang.Throwable ) ; }  <METHOD_END>
