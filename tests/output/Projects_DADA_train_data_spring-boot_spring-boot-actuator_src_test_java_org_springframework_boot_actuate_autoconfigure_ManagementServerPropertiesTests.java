<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = new ManagementServerProperties ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getPort ( ) ) . isNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getAddApplicationContextHeader ( ) ) . isEqualTo ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = new ManagementServerProperties ( ) ; org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . setPort ( NUMBER ) ; org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . setContextPath ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getPort ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = new ManagementServerProperties ( ) ; org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . setContextPath ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = new ManagementServerProperties ( ) ; org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . setContextPath ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getContextPath ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getRoles ( ) ) . containsOnly ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ( STRING ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSecurity ( ) . getRoles ( ) ) . containsOnly ( STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.actuate.autoconfigure.ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.ManagementServerPropertiesTests.Config .class ) ; org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext ; return this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( ManagementServerProperties .class ) ; }  <METHOD_END>
