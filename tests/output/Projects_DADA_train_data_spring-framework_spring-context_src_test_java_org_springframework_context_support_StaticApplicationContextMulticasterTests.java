<METHOD_START> @ java.lang.Override protected org.springframework.context.support.ConfigurableApplicationContext org.springframework.context.support.ConfigurableApplicationContext ( ) java.lang.Exception { StaticApplicationContext org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , TestBean .class , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.String> ) ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , TestBean .class , new MutablePropertyValues ( java.util.Map<java.lang.String,java.lang.String> ) ) ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( StaticApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME , org.springframework.context.support.StaticApplicationContextMulticasterTests.TestApplicationEventMulticaster .class , null ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; org.springframework.context.support.StaticApplicationContext . addApplicationListener ( parentListener ) ; org.springframework.context.support.StaticApplicationContext . getStaticMessageSource ( ) . addMessage ( STRING , java.util.Locale . java.util.Locale ( ) , STRING ) ; this . org.springframework.context.support.StaticApplicationContext = new StaticApplicationContext ( org.springframework.context.support.StaticApplicationContext ) ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( STRING , BeanThatListens .class , new MutablePropertyValues ( ) ) ; org.springframework.context.support.StaticApplicationContext . registerSingleton ( STRING , ACATester .class , new MutablePropertyValues ( ) ) ; org.springframework.context.support.StaticApplicationContext . registerPrototype ( STRING , ACATester .class , new MutablePropertyValues ( ) ) ; PropertiesBeanDefinitionReader org.springframework.context.support.PropertiesBeanDefinitionReader = new PropertiesBeanDefinitionReader ( org.springframework.context.support.StaticApplicationContext . getDefaultListableBeanFactory ( ) ) ; Resource org.springframework.context.support.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.context.support.StaticApplicationContextMulticasterTests> ( ) ) ; org.springframework.context.support.PropertiesBeanDefinitionReader . loadBeanDefinitions ( new EncodedResource ( org.springframework.context.support.Resource , STRING ) ) ; org.springframework.context.support.StaticApplicationContext . refresh ( ) ; org.springframework.context.support.StaticApplicationContext . addApplicationListener ( listener ) ; org.springframework.context.support.StaticApplicationContext . getStaticMessageSource ( ) . addMessage ( STRING , java.util.Locale . java.util.Locale ( ) , STRING ) ; return org.springframework.context.support.StaticApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) { assertCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) java.lang.Exception { org.springframework.context.support.StaticApplicationContextMulticasterTests.TestApplicationEventMulticaster . int = NUMBER ; super. events ( ) ; assertEquals ( NUMBER , org.springframework.context.support.StaticApplicationContextMulticasterTests.TestApplicationEventMulticaster . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.context.support.ApplicationEvent , ResolvableType org.springframework.context.support.ResolvableType ) { super. multicastEvent ( org.springframework.context.support.ApplicationEvent , org.springframework.context.support.ResolvableType ) ; int ++ ; }  <METHOD_END>
