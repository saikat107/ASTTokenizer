<METHOD_START> void ( java.nio.ByteBuffer java.nio.ByteBuffer , DefaultDataBufferFactory org.springframework.core.io.buffer.DefaultDataBufferFactory ) { this( java.nio.ByteBuffer , java.nio.ByteBuffer . int ( ) , java.nio.ByteBuffer . int ( ) , org.springframework.core.io.buffer.DefaultDataBufferFactory ); }  <METHOD_END>
<METHOD_START> void ( java.nio.ByteBuffer java.nio.ByteBuffer , int int , int int , DefaultDataBufferFactory org.springframework.core.io.buffer.DefaultDataBufferFactory ) { Assert . notNull ( java.nio.ByteBuffer , STRING ) ; Assert . isTrue ( int >= NUMBER , STRING ) ; Assert . isTrue ( int >= NUMBER , STRING ) ; Assert . isTrue ( int <= int , STRING ) ; Assert . notNull ( org.springframework.core.io.buffer.DefaultDataBufferFactory , STRING ) ; this . java.nio.ByteBuffer = java.nio.ByteBuffer ; this . int = int ; this . int = int ; this . org.springframework.core.io.buffer.DefaultDataBufferFactory = org.springframework.core.io.buffer.DefaultDataBufferFactory ; }  <METHOD_END>
<METHOD_START> public java.nio.ByteBuffer java.nio.ByteBuffer ( ) { return this . java.nio.ByteBuffer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBufferFactory org.springframework.core.io.buffer.DefaultDataBufferFactory ( ) { return this . org.springframework.core.io.buffer.DefaultDataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.function.IntPredicate java.util.function.IntPredicate , int int ) { Assert . notNull ( java.util.function.IntPredicate , STRING ) ; if ( int < NUMBER ) { int = NUMBER ; } else if ( int >= this . int ) { return - NUMBER ; } for ( int int = int ; int < this . int ; int ++ ) { byte byte = this . java.nio.ByteBuffer . byte ( int ) ; if ( java.util.function.IntPredicate . boolean ( byte ) ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.util.function.IntPredicate java.util.function.IntPredicate , int int ) { Assert . notNull ( java.util.function.IntPredicate , STRING ) ; int int = java.lang.Math . int ( int , this . int - NUMBER ) ; for (; int >= NUMBER ; int -- ) { byte byte = this . java.nio.ByteBuffer . byte ( int ) ; if ( java.util.function.IntPredicate . boolean ( byte ) ) { return int ; } } return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int - this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte byte ( ) { return java.lang.Byte ( java.nio.ByteBuffer :: byte ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( byte [] byte[] ) { Assert . notNull ( byte[] , STRING ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( byte [] byte[] , int int , int int ) { Assert . notNull ( byte[] , STRING ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] , int , int ) ) ; return this ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.util.function.Function<java.nio.ByteBuffer,T> < java.nio.ByteBuffer , T > java.util.function.Function<java.nio.ByteBuffer,T> ) { ( ( java.nio.Buffer ) this . java.nio.ByteBuffer ) . java.nio.Buffer ( this . int ) ; try { return java.util.function.Function<java.nio.ByteBuffer,T> . T ( this . java.nio.ByteBuffer ) ; } finally { this . int = this . java.nio.ByteBuffer . int ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( byte byte ) { void ( NUMBER ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( byte [] byte[] ) { Assert . notNull ( byte[] , STRING ) ; void ( byte[] . int ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( byte [] byte[] , int int , int int ) { Assert . notNull ( byte[] , STRING ) ; void ( int ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] , int , int ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( DataBuffer ... org.springframework.core.io.buffer.DataBuffer[] ) { if ( ! ObjectUtils . isEmpty ( org.springframework.core.io.buffer.DataBuffer[] ) ) { java.nio.ByteBuffer [] java.nio.ByteBuffer[] = java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.io.buffer.DataBuffer[] ) . map ( DataBuffer :: asByteBuffer ) . toArray ( java.nio.ByteBuffer [] ::new ) ; org.springframework.core.io.buffer.DefaultDataBuffer ( java.nio.ByteBuffer[] ) ; } return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer ( java.nio.ByteBuffer ... java.nio.ByteBuffer[] ) { Assert . notEmpty ( java.nio.ByteBuffer[] , STRING ) ; int int = java.util.Arrays . java.util.stream.Stream<java.nio.ByteBuffer> ( java.nio.ByteBuffer[] ) . java.util.stream.IntStream ( java.nio.ByteBuffer :: int ) . int ( ) ; void ( int ) ; java.util.Arrays . java.util.stream.Stream<java.nio.ByteBuffer> ( java.nio.ByteBuffer[] ) . void ( java.nio.ByteBuffer -> java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( java.nio.ByteBuffer ) ) ) ; return this ; }  <METHOD_END>
<METHOD_START> private < T > T T ( java.util.function.Function<java.nio.ByteBuffer,T> < java.nio.ByteBuffer , T > java.util.function.Function<java.nio.ByteBuffer,T> ) { ( ( java.nio.Buffer ) this . java.nio.ByteBuffer ) . java.nio.Buffer ( this . int ) ; try { return java.util.function.Function<java.nio.ByteBuffer,T> . T ( this . java.nio.ByteBuffer ) ; } finally { this . int = this . java.nio.ByteBuffer . int ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( int int , int int ) { int int = this . java.nio.ByteBuffer . int ( ) ; java.nio.Buffer java.nio.Buffer = this . java.nio.ByteBuffer ; try { java.nio.Buffer . java.nio.Buffer ( int ) ; java.nio.ByteBuffer java.nio.ByteBuffer = this . java.nio.ByteBuffer . java.nio.ByteBuffer ( ) ; ( ( java.nio.Buffer ) java.nio.ByteBuffer ) . java.nio.Buffer ( int ) ; return new org.springframework.core.io.buffer.DefaultDataBuffer.SlicedDefaultDataBuffer ( java.nio.ByteBuffer , NUMBER , int , this . org.springframework.core.io.buffer.DefaultDataBufferFactory ) ; } finally { java.nio.Buffer . java.nio.Buffer ( int ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.nio.ByteBuffer java.nio.ByteBuffer ( ) { java.nio.ByteBuffer java.nio.ByteBuffer = this . java.nio.ByteBuffer . java.nio.ByteBuffer ( ) ; java.nio.Buffer java.nio.Buffer = java.nio.ByteBuffer ; java.nio.Buffer . java.nio.Buffer ( this . int ) ; java.nio.Buffer . java.nio.Buffer ( this . int ) ; return java.nio.ByteBuffer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.InputStream java.io.InputStream ( ) { return new org.springframework.core.io.buffer.DefaultDataBuffer.DefaultDataBufferInputStream ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) { return new org.springframework.core.io.buffer.DefaultDataBuffer.DefaultDataBufferOutputStream ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { int int = this . int + int ; if ( int > this . java.nio.ByteBuffer . int ( ) ) { void ( int ) ; } }  <METHOD_END>
<METHOD_START> void void ( int int ) { java.nio.ByteBuffer java.nio.ByteBuffer = this . java.nio.ByteBuffer ; java.nio.ByteBuffer java.nio.ByteBuffer = ( java.nio.ByteBuffer . boolean ( ) ? java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) : java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ) ; final int int = int ( ) ; ( ( java.nio.Buffer ) java.nio.ByteBuffer ) . java.nio.Buffer ( this . int ) . java.nio.Buffer ( this . int ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( java.nio.ByteBuffer ) ; this . java.nio.ByteBuffer = java.nio.ByteBuffer ; this . int = NUMBER ; this . int = int ; java.nio.ByteBuffer . java.nio.Buffer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.core.io.buffer.DefaultDataBuffer ) ) { return false ; } org.springframework.core.io.buffer.DefaultDataBuffer org.springframework.core.io.buffer.DefaultDataBuffer = ( org.springframework.core.io.buffer.DefaultDataBuffer ) java.lang.Object ; return ( this . int == org.springframework.core.io.buffer.DefaultDataBuffer . int && this . int == org.springframework.core.io.buffer.DefaultDataBuffer . int && this . java.nio.ByteBuffer . boolean ( org.springframework.core.io.buffer.DefaultDataBuffer . java.nio.ByteBuffer ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.nio.ByteBuffer . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.nio.ByteBuffer . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.io.IOException { return int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.lang.Integer ( java.nio.ByteBuffer -> int ( ) > NUMBER ? java.nio.ByteBuffer . byte ( ) & NUMBER : - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( byte [] byte[] , int int , int int ) throws java.io.IOException { return java.lang.Integer ( java.nio.ByteBuffer -> { int int = int ( ) ; if ( int > NUMBER ) { int int = java.lang.Math . int ( int , int ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] , int , int ) ; return int ; } else { return - NUMBER ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.io.IOException { void ( NUMBER ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( byte [] byte[] , int int , int int ) throws java.io.IOException { void ( int ) ; java.nio.ByteBuffer ( java.nio.ByteBuffer -> java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] , int , int ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.nio.ByteBuffer java.nio.ByteBuffer , int int , int int , DefaultDataBufferFactory org.springframework.core.io.buffer.DefaultDataBufferFactory ) { super( java.nio.ByteBuffer , int , int , org.springframework.core.io.buffer.DefaultDataBufferFactory ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override void void ( int int ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
