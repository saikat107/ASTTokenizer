<METHOD_START> @ java.lang.Override public void void ( ConfigurableEnvironment org.springframework.boot.devtools.env.ConfigurableEnvironment , SpringApplication org.springframework.boot.devtools.env.SpringApplication ) { if ( boolean ( org.springframework.boot.devtools.env.ConfigurableEnvironment ) && boolean ( org.springframework.boot.devtools.env.ConfigurableEnvironment ) ) { PropertySource < ? > org.springframework.boot.devtools.env.PropertySource<?> = new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.boot.devtools.env.ConfigurableEnvironment . getPropertySources ( ) . addLast ( org.springframework.boot.devtools.env.PropertySource<> ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableEnvironment org.springframework.boot.devtools.env.ConfigurableEnvironment ) { return org.springframework.boot.devtools.env.ConfigurableEnvironment . getPropertySources ( ) . get ( STRING ) == null ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Environment org.springframework.boot.devtools.env.Environment ) { return boolean ( ) || boolean ( org.springframework.boot.devtools.env.Environment ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { try { Restarter org.springframework.boot.devtools.env.Restarter = Restarter . getInstance ( ) ; return ( org.springframework.boot.devtools.env.Restarter != null && org.springframework.boot.devtools.env.Restarter . getInitialUrls ( ) != null ) ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Environment org.springframework.boot.devtools.env.Environment ) { RelaxedPropertyResolver org.springframework.boot.devtools.env.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.devtools.env.Environment , STRING ) ; return org.springframework.boot.devtools.env.RelaxedPropertyResolver . containsProperty ( STRING ) ; }  <METHOD_END>
