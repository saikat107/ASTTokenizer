<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.boot.actuate.endpoint.mvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.boot.actuate.endpoint.mvc.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . APPLICATION_JSON ) ) ; ResponseEntity < java.lang.String > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . exchange ( STRING + this . int + STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( null , org.springframework.boot.actuate.endpoint.mvc.HttpHeaders ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING + this . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.boot.actuate.endpoint.mvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.boot.actuate.endpoint.mvc.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . APPLICATION_JSON ) ) ; ResponseEntity < java.lang.String > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . exchange ( STRING + this . int + STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( null , org.springframework.boot.actuate.endpoint.mvc.HttpHeaders ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING + this . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.boot.actuate.endpoint.mvc.HttpHeaders = new HttpHeaders ( ) ; org.springframework.boot.actuate.endpoint.mvc.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; ResponseEntity < java.lang.String > org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> = new TestRestTemplate ( ) . exchange ( STRING + this . int + STRING , HttpMethod . GET , new HttpEntity < java.lang.Void > ( null , org.springframework.boot.actuate.endpoint.mvc.HttpHeaders ) , java.lang.String .class ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FOUND ) ; assertThat ( org.springframework.boot.actuate.endpoint.mvc.ResponseEntity<java.lang.String> . getHeaders ( ) . getLocation ( ) ) . isEqualTo ( java.net.URI . java.net.URI ( STRING + this . int + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public org.springframework.boot.actuate.endpoint.mvc.ResourceSupport org.springframework.boot.actuate.endpoint.mvc.ResourceSupport ( ) { ResourceSupport org.springframework.boot.actuate.endpoint.mvc.ResourceSupport = new ResourceSupport ( ) ; org.springframework.boot.actuate.endpoint.mvc.ResourceSupport . add ( linkTo ( org.springframework.boot.actuate.endpoint.mvc.HalBrowserMvcEndpointServerPortIntegrationTests.SpringBootHypermediaApplication .class ) . slash ( STRING ) . withSelfRel ( ) ) ; return org.springframework.boot.actuate.endpoint.mvc.ResourceSupport ; }  <METHOD_END>
