<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.bind.StandardEnvironment = new StandardEnvironment ( ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.bind.StandardEnvironment . getPropertySources ( ) . addFirst ( new MapPropertySource ( STRING , this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> ) ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver = new RelaxedPropertyResolver ( this . org.springframework.boot.bind.StandardEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.bind.ExpectedException . expectMessage ( STRING ) ; new RelaxedPropertyResolver ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getRequiredProperty ( STRING ) ) . isEqualTo ( STRING ) ; this . org.springframework.boot.bind.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.bind.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver . getRequiredProperty ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getRequiredProperty ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; this . org.springframework.boot.bind.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.bind.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver . getRequiredProperty ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class , NUMBER ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class , NUMBER ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver . resolvePlaceholders ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.ExpectedException . expect ( java.lang.UnsupportedOperationException .class ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver . resolveRequiredPlaceholders ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.RelaxedPropertyResolver = new RelaxedPropertyResolver ( this . org.springframework.boot.bind.StandardEnvironment , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.RelaxedPropertyResolver = new RelaxedPropertyResolver ( this . org.springframework.boot.bind.StandardEnvironment , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . containsProperty ( STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . java.util.LinkedHashMap<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; this . org.springframework.boot.bind.RelaxedPropertyResolver = new RelaxedPropertyResolver ( this . org.springframework.boot.bind.StandardEnvironment , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.boot.bind.RelaxedPropertyResolver . getSubProperties ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Properties java.util.Properties ; PropertiesPropertySource org.springframework.boot.bind.PropertiesPropertySource ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = java.lang.String + java.lang.String ; StandardEnvironment org.springframework.boot.bind.StandardEnvironment = new StandardEnvironment ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = org.springframework.boot.bind.StandardEnvironment . getPropertySources ( ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , STRING ) ; org.springframework.boot.bind.PropertiesPropertySource = new PropertiesPropertySource ( STRING , java.util.Properties ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( org.springframework.boot.bind.PropertiesPropertySource ) ; java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( java.lang.String , STRING ) ; org.springframework.boot.bind.PropertiesPropertySource = new PropertiesPropertySource ( STRING , java.util.Properties ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( org.springframework.boot.bind.PropertiesPropertySource ) ; RelaxedPropertyResolver org.springframework.boot.bind.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.bind.StandardEnvironment , java.lang.String ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedPropertyResolver . getProperty ( java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.bind.RelaxedPropertyResolver . getSubProperties ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
