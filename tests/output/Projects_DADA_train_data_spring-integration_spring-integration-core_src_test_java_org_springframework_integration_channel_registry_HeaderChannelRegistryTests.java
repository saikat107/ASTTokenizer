<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.channel.registry.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.channel.registry.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.channel.registry.MessageChannel ) ; Message < ? > org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) ; java.lang.String java.lang.String = org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ; assertThat ( TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) . get ( java.lang.String ) , STRING , java.lang.Long .class ) - java.lang.System . long ( ) , lessThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.channel.registry.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.channel.registry.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.channel.registry.MessageChannel ) ; Message < ? > org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) ; java.lang.String java.lang.String = org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ; assertThat ( TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) . get ( java.lang.String ) , STRING , java.lang.Long .class ) - java.lang.System . long ( ) , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.channel.registry.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.channel.registry.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.channel.registry.MessageChannel ) ; Message < java.lang.String > org.springframework.integration.channel.registry.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.MessagingTemplate . sendAndReceive ( org.springframework.integration.channel.registry.Message<java.lang.String> ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) ; java.lang.String java.lang.String = org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ; assertThat ( TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) . get ( java.lang.String ) , STRING , java.lang.Long .class ) - java.lang.System . long ( ) , allOf ( greaterThan ( NUMBER ) , lessThan ( NUMBER ) ) ) ; org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) ; java.lang.String = org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . get ( STRING , java.lang.String .class ) ; assertThat ( TestUtils . getPropertyValue ( TestUtils . getPropertyValue ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) . get ( java.lang.String ) , STRING , java.lang.Long .class ) - java.lang.System . long ( ) , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = this . org.springframework.integration.channel.registry.HeaderChannelRegistryTests.Gateway . java.lang.String ( STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = this . org.springframework.integration.channel.registry.HeaderChannelRegistryTests.Gateway . java.lang.String ( STRING ) ; assertNotNull ( java.lang.String ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingTemplate org.springframework.integration.channel.registry.MessagingTemplate = new MessagingTemplate ( ) ; org.springframework.integration.channel.registry.MessagingTemplate . setDefaultDestination ( this . org.springframework.integration.channel.registry.MessageChannel ) ; Message < ? > org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.MessagingTemplate . sendAndReceive ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertTrue ( org.springframework.integration.channel.registry.Message<> instanceof ErrorMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.channel.registry.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setReplyChannelName ( STRING ) . setErrorChannelName ( STRING ) . build ( ) ; this . org.springframework.integration.channel.registry.MessageChannel . send ( org.springframework.integration.channel.registry.Message<java.lang.String> ) ; Message < ? > org.springframework.integration.channel.registry.Message<?> = org.springframework.integration.channel.registry.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.registry.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.channel.registry.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; try { this . org.springframework.integration.channel.registry.MessageChannel . send ( org.springframework.integration.channel.registry.Message<java.lang.String> ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception . java.lang.String ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DefaultHeaderChannelRegistry org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry = new DefaultHeaderChannelRegistry ( NUMBER ) ; org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . setTaskScheduler ( this . org.springframework.integration.channel.registry.TaskScheduler ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelToChannelName ( new DirectChannel ( ) ) ; int int = NUMBER ; while ( int ++ < NUMBER && org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelNameToChannel ( java.lang.String ) != null ) { java.lang.Thread . void ( NUMBER ) ; } assertNull ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelNameToChannel ( java.lang.String ) ) ; org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryChannelResolver org.springframework.integration.channel.registry.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( ) ; BeanFactory org.springframework.integration.channel.registry.BeanFactory = mock ( BeanFactory .class ) ; when ( org.springframework.integration.channel.registry.BeanFactory . getBean ( IntegrationContextUtils . INTEGRATION_HEADER_CHANNEL_REGISTRY_BEAN_NAME , HeaderChannelRegistry .class ) ) . thenReturn ( mock ( HeaderChannelRegistry .class ) ) ; doAnswer ( invocation -> { throw new NoSuchBeanDefinitionException ( STRING ) ; } ) . when ( org.springframework.integration.channel.registry.BeanFactory ) . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.channel.registry.BeanFactoryChannelResolver . setBeanFactory ( org.springframework.integration.channel.registry.BeanFactory ) ; try { org.springframework.integration.channel.registry.BeanFactoryChannelResolver . resolveDestination ( STRING ) ; fail ( STRING ) ; } catch ( DestinationResolutionException org.springframework.integration.channel.registry.DestinationResolutionException ) { assertThat ( org.springframework.integration.channel.registry.DestinationResolutionException . getMessage ( ) , Matchers . containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BeanFactoryChannelResolver org.springframework.integration.channel.registry.BeanFactoryChannelResolver = new BeanFactoryChannelResolver ( ) ; BeanFactory org.springframework.integration.channel.registry.BeanFactory = mock ( BeanFactory .class ) ; doAnswer ( invocation -> { throw new NoSuchBeanDefinitionException ( STRING ) ; } ) . when ( org.springframework.integration.channel.registry.BeanFactory ) . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.channel.registry.BeanFactoryChannelResolver . setBeanFactory ( org.springframework.integration.channel.registry.BeanFactory ) ; try { org.springframework.integration.channel.registry.BeanFactoryChannelResolver . resolveDestination ( STRING ) ; fail ( STRING ) ; } catch ( DestinationResolutionException org.springframework.integration.channel.registry.DestinationResolutionException ) { assertThat ( org.springframework.integration.channel.registry.DestinationResolutionException . getMessage ( ) , Matchers . containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultHeaderChannelRegistry org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry = new DefaultHeaderChannelRegistry ( ) ; MessageChannel org.springframework.integration.channel.registry.MessageChannel = new DirectChannel ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelToChannelName ( org.springframework.integration.channel.registry.MessageChannel ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = TestUtils . getPropertyValue ( org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry , STRING , java.util.Map .class ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; assertSame ( org.springframework.integration.channel.registry.MessageChannel , org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelNameToChannel ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . setRemoveOnGet ( true ) ; assertSame ( org.springframework.integration.channel.registry.MessageChannel , org.springframework.integration.channel.registry.DefaultHeaderChannelRegistry . channelNameToChannel ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.Map<,> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.channel.registry.Message<?> ) { assertThat ( org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . getReplyChannel ( ) , Matchers . anyOf ( instanceOf ( java.lang.String .class ) , Matchers . nullValue ( ) ) ) ; assertThat ( org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . getErrorChannel ( ) , Matchers . anyOf ( instanceOf ( java.lang.String .class ) , Matchers . nullValue ( ) ) ) ; if ( org.springframework.integration.channel.registry.Message<> . getPayload ( ) . equals ( STRING ) ) { throw new java.lang.RuntimeException ( STRING ) ; } return MessageBuilder . withPayload ( STRING + org.springframework.integration.channel.registry.Message<> . getPayload ( ) ) . setHeader ( STRING , org.springframework.integration.channel.registry.Message<> . getHeaders ( ) . getReplyChannel ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
