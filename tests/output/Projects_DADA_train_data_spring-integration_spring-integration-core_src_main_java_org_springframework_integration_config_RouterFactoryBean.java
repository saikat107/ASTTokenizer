<METHOD_START> public void void ( MessageChannel org.springframework.integration.config.MessageChannel ) { this . org.springframework.integration.config.MessageChannel = org.springframework.integration.config.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Boolean java.lang.Boolean ) { this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.Object , STRING ) ; AbstractMessageRouter org.springframework.integration.config.AbstractMessageRouter = this . extractTypeIfPossible ( java.lang.Object , AbstractMessageRouter .class ) ; if ( org.springframework.integration.config.AbstractMessageRouter == null ) { if ( java.lang.Object instanceof MessageHandler && this . boolean ( ) && this . methodIsHandleMessageOrEmpty ( java.lang.String ) ) { return ( MessageHandler ) java.lang.Object ; } org.springframework.integration.config.AbstractMessageRouter = this . org.springframework.integration.config.AbstractMappingMessageRouter ( java.lang.Object , java.lang.String ) ; this . org.springframework.integration.config.AbstractMessageRouter ( org.springframework.integration.config.AbstractMessageRouter ) ; } else { Assert . isTrue ( ! StringUtils . hasText ( java.lang.String ) , STRING + STRING ) ; this . org.springframework.integration.config.AbstractMessageRouter ( org.springframework.integration.config.AbstractMessageRouter ) ; if ( java.lang.Object instanceof MessageHandler ) { return ( MessageHandler ) java.lang.Object ; } } return org.springframework.integration.config.AbstractMessageRouter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( Expression org.springframework.integration.config.Expression ) { return this . org.springframework.integration.config.AbstractMessageRouter ( new ExpressionEvaluatingRouter ( org.springframework.integration.config.Expression ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.AbstractMappingMessageRouter org.springframework.integration.config.AbstractMappingMessageRouter ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return ( StringUtils . hasText ( java.lang.String ) ) ? new MethodInvokingRouter ( java.lang.Object , java.lang.String ) : new MethodInvokingRouter ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.AbstractMessageRouter org.springframework.integration.config.AbstractMessageRouter ( AbstractMessageRouter org.springframework.integration.config.AbstractMessageRouter ) { if ( this . org.springframework.integration.config.MessageChannel != null ) { org.springframework.integration.config.AbstractMessageRouter . setDefaultOutputChannel ( this . org.springframework.integration.config.MessageChannel ) ; } if ( this . java.lang.String != null ) { org.springframework.integration.config.AbstractMessageRouter . setDefaultOutputChannelName ( this . java.lang.String ) ; } if ( this . java.lang.Long != null ) { org.springframework.integration.config.AbstractMessageRouter . setSendTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.AbstractMessageRouter . setApplySequence ( this . java.lang.Boolean ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.AbstractMessageRouter . setIgnoreSendFailures ( this . java.lang.Boolean ) ; } if ( org.springframework.integration.config.AbstractMessageRouter instanceof AbstractMappingMessageRouter ) { this . void ( ( AbstractMappingMessageRouter ) org.springframework.integration.config.AbstractMessageRouter ) ; } return org.springframework.integration.config.AbstractMessageRouter ; }  <METHOD_END>
<METHOD_START> protected void void ( AbstractMappingMessageRouter org.springframework.integration.config.AbstractMappingMessageRouter ) { if ( this . java.util.Map<java.lang.String,java.lang.String> != null ) { org.springframework.integration.config.AbstractMappingMessageRouter . setChannelMappings ( this . java.util.Map<java.lang.String,java.lang.String> ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.integration.config.AbstractMappingMessageRouter . setResolutionRequired ( this . java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . java.util.Map<java.lang.String,java.lang.String> == null && this . org.springframework.integration.config.MessageChannel == null && this . java.lang.Long == null && this . java.lang.Boolean == null && this . java.lang.Boolean == null && this . java.lang.Boolean == null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<? extends org.springframework.integration.config.MessageHandler> < ? extends MessageHandler > java.lang.Class<? extends org.springframework.integration.config.MessageHandler> ( ) { return AbstractMessageRouter .class ; }  <METHOD_END>
