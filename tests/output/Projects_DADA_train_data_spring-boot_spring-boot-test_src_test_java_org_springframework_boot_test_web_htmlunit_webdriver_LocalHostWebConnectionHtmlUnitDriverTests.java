<METHOD_START> public void ( ) { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.test.web.htmlunit.webdriver.WebClient . getOptions ( ) ) . willReturn ( new WebClientOptions ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expectMessage ( STRING ) ; new LocalHostWebConnectionHtmlUnitDriver ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expectMessage ( STRING ) ; new LocalHostWebConnectionHtmlUnitDriver ( null , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expectMessage ( STRING ) ; new LocalHostWebConnectionHtmlUnitDriver ( null , BrowserVersion . CHROME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.web.htmlunit.webdriver.ExpectedException . expectMessage ( STRING ) ; Capabilities org.springframework.boot.test.web.htmlunit.webdriver.Capabilities = mock ( Capabilities .class ) ; given ( org.springframework.boot.test.web.htmlunit.webdriver.Capabilities . getBrowserName ( ) ) . willReturn ( STRING ) ; given ( org.springframework.boot.test.web.htmlunit.webdriver.Capabilities . getVersion ( ) ) . willReturn ( STRING ) ; new LocalHostWebConnectionHtmlUnitDriver ( null , org.springframework.boot.test.web.htmlunit.webdriver.Capabilities ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockEnvironment org.springframework.boot.test.web.htmlunit.webdriver.MockEnvironment = new MockEnvironment ( ) ; LocalHostWebConnectionHtmlUnitDriver org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriver = new org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.TestLocalHostWebConnectionHtmlUnitDriver ( org.springframework.boot.test.web.htmlunit.webdriver.MockEnvironment ) ; org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriver . get ( STRING ) ; verify ( this . org.springframework.boot.test.web.htmlunit.webdriver.WebClient ) . getPage ( any ( WebWindow .class ) , org.springframework.boot.test.web.htmlunit.webdriver.WebRequest ( new java.net.URL ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockEnvironment org.springframework.boot.test.web.htmlunit.webdriver.MockEnvironment = new MockEnvironment ( ) ; org.springframework.boot.test.web.htmlunit.webdriver.MockEnvironment . setProperty ( STRING , STRING ) ; LocalHostWebConnectionHtmlUnitDriver org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriver = new org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.TestLocalHostWebConnectionHtmlUnitDriver ( org.springframework.boot.test.web.htmlunit.webdriver.MockEnvironment ) ; org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriver . get ( STRING ) ; verify ( this . org.springframework.boot.test.web.htmlunit.webdriver.WebClient ) . getPage ( any ( WebWindow .class ) , org.springframework.boot.test.web.htmlunit.webdriver.WebRequest ( new java.net.URL ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.web.htmlunit.webdriver.WebRequest org.springframework.boot.test.web.htmlunit.webdriver.WebRequest ( java.net.URL java.net.URL ) { return argThat ( new org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests.WebRequestUrlArgumentMatcher ( java.net.URL ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Environment org.springframework.boot.test.web.htmlunit.webdriver.Environment ) { super( org.springframework.boot.test.web.htmlunit.webdriver.Environment ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.web.htmlunit.webdriver.WebClient org.springframework.boot.test.web.htmlunit.webdriver.WebClient ( ) { return org.springframework.boot.test.web.htmlunit.webdriver.LocalHostWebConnectionHtmlUnitDriverTests .this . org.springframework.boot.test.web.htmlunit.webdriver.WebClient ; }  <METHOD_END>
<METHOD_START> private void ( java.net.URL java.net.URL ) { this . java.net.URL = java.net.URL ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( WebRequest org.springframework.boot.test.web.htmlunit.webdriver.WebRequest ) { return org.springframework.boot.test.web.htmlunit.webdriver.WebRequest . getUrl ( ) . equals ( this . java.net.URL ) ; }  <METHOD_END>
