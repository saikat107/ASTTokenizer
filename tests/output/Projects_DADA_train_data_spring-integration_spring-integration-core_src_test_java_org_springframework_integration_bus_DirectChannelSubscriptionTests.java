<METHOD_START> @ Before public void void ( ) { org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.DirectChannel ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( STRING , org.springframework.integration.bus.PollableChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TestApplicationContext org.springframework.integration.bus.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; ServiceActivatingHandler org.springframework.integration.bus.ServiceActivatingHandler = new ServiceActivatingHandler ( new org.springframework.integration.bus.DirectChannelSubscriptionTests.TestBean ( ) , STRING ) ; org.springframework.integration.bus.ServiceActivatingHandler . setOutputChannel ( org.springframework.integration.bus.PollableChannel ) ; EventDrivenConsumer org.springframework.integration.bus.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.bus.DirectChannel , org.springframework.integration.bus.ServiceActivatingHandler ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.EventDrivenConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; this . org.springframework.integration.bus.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.bus.Message<?> = this . org.springframework.integration.bus.PollableChannel . receive ( ) ; assertEquals ( STRING , org.springframework.integration.bus.Message<> . getPayload ( ) ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessagingAnnotationPostProcessor org.springframework.integration.bus.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.bus.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.bus.DirectChannelSubscriptionTests.TestEndpoint org.springframework.integration.bus.DirectChannelSubscriptionTests.TestEndpoint = new org.springframework.integration.bus.DirectChannelSubscriptionTests.TestEndpoint ( ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.bus.DirectChannelSubscriptionTests.TestEndpoint , STRING ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; this . org.springframework.integration.bus.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.bus.Message<?> = this . org.springframework.integration.bus.PollableChannel . receive ( ) ; assertEquals ( STRING , org.springframework.integration.bus.Message<> . getPayload ( ) ) ; org.springframework.integration.bus.TestApplicationContext . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { AbstractReplyProducingMessageHandler org.springframework.integration.bus.AbstractReplyProducingMessageHandler = new AbstractReplyProducingMessageHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; org.springframework.integration.bus.AbstractReplyProducingMessageHandler . setOutputChannel ( org.springframework.integration.bus.PollableChannel ) ; EventDrivenConsumer org.springframework.integration.bus.EventDrivenConsumer = new EventDrivenConsumer ( org.springframework.integration.bus.DirectChannel , org.springframework.integration.bus.AbstractReplyProducingMessageHandler ) ; org.springframework.integration.bus.TestApplicationContext . registerEndpoint ( STRING , org.springframework.integration.bus.EventDrivenConsumer ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; try { this . org.springframework.integration.bus.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } finally { org.springframework.integration.bus.TestApplicationContext . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.bus.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessagingException .class ) public void void ( ) { QueueChannel org.springframework.integration.bus.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.bus.TestApplicationContext . registerChannel ( IntegrationContextUtils . ERROR_CHANNEL_BEAN_NAME , org.springframework.integration.bus.QueueChannel ) ; MessagingAnnotationPostProcessor org.springframework.integration.bus.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.bus.TestApplicationContext . getBeanFactory ( ) ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.bus.DirectChannelSubscriptionTests.FailingTestEndpoint org.springframework.integration.bus.DirectChannelSubscriptionTests.FailingTestEndpoint = new org.springframework.integration.bus.DirectChannelSubscriptionTests.FailingTestEndpoint ( ) ; org.springframework.integration.bus.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( org.springframework.integration.bus.DirectChannelSubscriptionTests.FailingTestEndpoint , STRING ) ; org.springframework.integration.bus.TestApplicationContext . refresh ( ) ; try { this . org.springframework.integration.bus.DirectChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; } finally { org.springframework.integration.bus.TestApplicationContext . stop ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.bus.Message<?> < ? > org.springframework.integration.bus.Message<?> ( Message < ? > org.springframework.integration.bus.Message<?> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.bus.Message<> . getPayload ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public org.springframework.integration.bus.Message<?> < ? > org.springframework.integration.bus.Message<?> ( Message < ? > org.springframework.integration.bus.Message<?> ) { return new GenericMessage < java.lang.String > ( org.springframework.integration.bus.Message<> . getPayload ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING , outputChannel = STRING ) public org.springframework.integration.bus.Message<?> < ? > org.springframework.integration.bus.Message<?> ( Message < ? > org.springframework.integration.bus.Message<?> ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
