<METHOD_START> void void ( MessageConverter org.springframework.boot.autoconfigure.amqp.MessageConverter ) { this . org.springframework.boot.autoconfigure.amqp.MessageConverter = org.springframework.boot.autoconfigure.amqp.MessageConverter ; }  <METHOD_END>
<METHOD_START> void void ( MessageRecoverer org.springframework.boot.autoconfigure.amqp.MessageRecoverer ) { this . org.springframework.boot.autoconfigure.amqp.MessageRecoverer = org.springframework.boot.autoconfigure.amqp.MessageRecoverer ; }  <METHOD_END>
<METHOD_START> void void ( RabbitProperties org.springframework.boot.autoconfigure.amqp.RabbitProperties ) { this . org.springframework.boot.autoconfigure.amqp.RabbitProperties = org.springframework.boot.autoconfigure.amqp.RabbitProperties ; }  <METHOD_END>
<METHOD_START> public void void ( SimpleRabbitListenerContainerFactory org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory , ConnectionFactory org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) { Assert . notNull ( org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory , STRING ) ; Assert . notNull ( org.springframework.boot.autoconfigure.amqp.ConnectionFactory , STRING ) ; org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setConnectionFactory ( org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) ; if ( this . org.springframework.boot.autoconfigure.amqp.MessageConverter != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setMessageConverter ( this . org.springframework.boot.autoconfigure.amqp.MessageConverter ) ; } RabbitProperties . RabbitProperties RabbitProperties.Listener = this . org.springframework.boot.autoconfigure.amqp.RabbitProperties . getListener ( ) ; org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setAutoStartup ( RabbitProperties.Listener . isAutoStartup ( ) ) ; if ( RabbitProperties.Listener . getAcknowledgeMode ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setAcknowledgeMode ( RabbitProperties.Listener . getAcknowledgeMode ( ) ) ; } if ( RabbitProperties.Listener . getConcurrency ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setConcurrentConsumers ( RabbitProperties.Listener . getConcurrency ( ) ) ; } if ( RabbitProperties.Listener . getMaxConcurrency ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setMaxConcurrentConsumers ( RabbitProperties.Listener . getMaxConcurrency ( ) ) ; } if ( RabbitProperties.Listener . getPrefetch ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setPrefetchCount ( RabbitProperties.Listener . getPrefetch ( ) ) ; } if ( RabbitProperties.Listener . getTransactionSize ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setTxSize ( RabbitProperties.Listener . getTransactionSize ( ) ) ; } if ( RabbitProperties.Listener . getDefaultRequeueRejected ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setDefaultRequeueRejected ( RabbitProperties.Listener . getDefaultRequeueRejected ( ) ) ; } if ( RabbitProperties.Listener . getIdleEventInterval ( ) != null ) { org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setIdleEventInterval ( RabbitProperties.Listener . getIdleEventInterval ( ) ) ; } ListenerRetry org.springframework.boot.autoconfigure.amqp.ListenerRetry = RabbitProperties.Listener . getRetry ( ) ; if ( org.springframework.boot.autoconfigure.amqp.ListenerRetry . isEnabled ( ) ) { RetryInterceptorBuilder < ? > org.springframework.boot.autoconfigure.amqp.RetryInterceptorBuilder<?> = ( org.springframework.boot.autoconfigure.amqp.ListenerRetry . isStateless ( ) ? RetryInterceptorBuilder . stateless ( ) : RetryInterceptorBuilder . stateful ( ) ) ; org.springframework.boot.autoconfigure.amqp.RetryInterceptorBuilder<> . maxAttempts ( org.springframework.boot.autoconfigure.amqp.ListenerRetry . getMaxAttempts ( ) ) ; org.springframework.boot.autoconfigure.amqp.RetryInterceptorBuilder<> . backOffOptions ( org.springframework.boot.autoconfigure.amqp.ListenerRetry . getInitialInterval ( ) , org.springframework.boot.autoconfigure.amqp.ListenerRetry . getMultiplier ( ) , org.springframework.boot.autoconfigure.amqp.ListenerRetry . getMaxInterval ( ) ) ; MessageRecoverer org.springframework.boot.autoconfigure.amqp.MessageRecoverer = ( this . org.springframework.boot.autoconfigure.amqp.MessageRecoverer != null ? this . org.springframework.boot.autoconfigure.amqp.MessageRecoverer : new RejectAndDontRequeueRecoverer ( ) ) ; org.springframework.boot.autoconfigure.amqp.RetryInterceptorBuilder<> . recoverer ( org.springframework.boot.autoconfigure.amqp.MessageRecoverer ) ; org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setAdviceChain ( org.springframework.boot.autoconfigure.amqp.RetryInterceptorBuilder<> . build ( ) ) ; } }  <METHOD_END>
