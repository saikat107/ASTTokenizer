<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.xml.router.XPathExpression = XPathExpressionFactory . createXPathExpression ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; this . org.springframework.integration.xml.router.XPathExpression = XPathExpressionFactory . createXPathExpression ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.xml.router.XPathExpression = XPathExpressionFactory . createXPathExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( XPathExpression org.springframework.integration.xml.router.XPathExpression ) { Assert . notNull ( org.springframework.integration.xml.router.XPathExpression , STRING ) ; this . org.springframework.integration.xml.router.XPathExpression = org.springframework.integration.xml.router.XPathExpression ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( XmlPayloadConverter org.springframework.integration.xml.router.XmlPayloadConverter ) { Assert . notNull ( org.springframework.integration.xml.router.XmlPayloadConverter , STRING ) ; this . org.springframework.integration.xml.router.XmlPayloadConverter = org.springframework.integration.xml.router.XmlPayloadConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( Message < ? > org.springframework.integration.xml.router.Message<?> ) { org.w3c.dom.Node org.w3c.dom.Node = this . org.springframework.integration.xml.router.XmlPayloadConverter . convertToNode ( org.springframework.integration.xml.router.Message<> . getPayload ( ) ) ; if ( this . boolean ) { return java.util.Collections . java.util.List<java.lang.Object> ( ( java.lang.Object ) this . org.springframework.integration.xml.router.XPathExpression . evaluateAsString ( org.w3c.dom.Node ) ) ; } else { return this . org.springframework.integration.xml.router.XPathExpression . evaluate ( org.w3c.dom.Node , this . org.springframework.integration.xml.router.NodeMapper<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( org.w3c.dom.Node org.w3c.dom.Node , int int ) throws org.w3c.dom.DOMException { return org.w3c.dom.Node . java.lang.String ( ) ; }  <METHOD_END>
