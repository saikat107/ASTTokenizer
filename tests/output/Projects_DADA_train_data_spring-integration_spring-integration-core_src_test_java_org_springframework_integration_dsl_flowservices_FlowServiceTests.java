<METHOD_START> @ Test public void void ( ) { assertNotNull ( this . org.springframework.integration.dsl.flowservices.FlowServiceTests.MyFlow ) ; this . org.springframework.integration.dsl.flowservices.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.lang.Object java.lang.Object = this . org.springframework.integration.dsl.flowservices.FlowServiceTests.MyFlow . java.util.concurrent.atomic.AtomicReference<java.lang.Object> . java.lang.Object ( ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.dsl.flowservices.Message<?> = this . org.springframework.integration.dsl.flowservices.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flowservices.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flowservices.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.dsl.flowservices.QueueChannel = new QueueChannel ( ) ; this . org.springframework.integration.dsl.flowservices.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . setReplyChannel ( org.springframework.integration.dsl.flowservices.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.dsl.flowservices.Message<?> = org.springframework.integration.dsl.flowservices.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.dsl.flowservices.Message<> ) ; assertEquals ( STRING , org.springframework.integration.dsl.flowservices.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flowservices.IntegrationFlow org.springframework.integration.dsl.flowservices.IntegrationFlow ( ) { return f -> f . gateway ( STRING , g -> g . replyChannel ( STRING ) ) . log ( ) . bridge ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.integration.dsl.flowservices.IntegrationFlow org.springframework.integration.dsl.flowservices.IntegrationFlow ( ) { return IntegrationFlows . from ( STRING ) .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . channel ( STRING ) . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IntegrationFlowDefinition < ? > org.springframework.integration.dsl.flowservices.IntegrationFlowDefinition<?> ) { org.springframework.integration.dsl.flowservices.IntegrationFlowDefinition<> .< java.lang.String , java.lang.String > transform ( java.lang.String :: toUpperCase ) . log ( LoggingHandler . Level . ERROR , m -> { resultOverLoggingHandler . set ( m . getPayload ( ) ) ; return m ; } ) ; }  <METHOD_END>
<METHOD_START> private java.util.Date java.util.Date ( TriggerContext org.springframework.integration.dsl.flowservices.TriggerContext ) { return this . java.util.concurrent.atomic.AtomicReference<java.util.Date> . java.util.Date ( null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.dsl.flowservices.IntegrationFlowDefinition<?> < ? > org.springframework.integration.dsl.flowservices.IntegrationFlowDefinition<?> ( ) { return from ( this , STRING , e -> e . poller ( p -> p . trigger ( this :: nextExecutionTime ) ) ) . split ( this , null , e -> e . applySequence ( false ) ) . transform ( this ) . aggregate ( a -> a . processor ( this , null ) ) . enrichHeaders ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . filter ( this ) . handle ( this ) . channel ( MessageChannels . queue ( STRING ) ) . log ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Splitter public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { return StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Transformer public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ CorrelationStrategy public java.lang.Integer java.lang.Integer ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ ReleaseStrategy public boolean boolean ( java.util.Collection<org.springframework.integration.dsl.flowservices.Message<?>> < Message < ? > > java.util.Collection<org.springframework.integration.dsl.flowservices.Message<?>> ) { return java.util.Collection<org.springframework.integration.dsl.flowservices.Message<?>> . size ( ) == NUMBER ; }  <METHOD_END>
<METHOD_START> @ Aggregator public java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { return java.util.List<java.lang.String> . java.util.stream.Stream<java.lang.String> ( ) . java.lang.String ( java.util.stream.Collectors . java.util.stream.Collector<java.lang.CharSequence,?,java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Filter public boolean boolean ( @ Header java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { return java.util.Optional<java.lang.String> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ ServiceActivator public java.lang.String java.lang.String ( java.lang.String java.lang.String , @ Header java.lang.String java.lang.String ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
