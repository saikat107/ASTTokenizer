<METHOD_START> @ java.lang.Override protected org.springframework.oxm.jaxb.Jaxb2Marshaller org.springframework.oxm.jaxb.Jaxb2Marshaller ( ) java.lang.Exception { Jaxb2Marshaller org.springframework.oxm.jaxb.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.oxm.jaxb.Jaxb2Marshaller . setContextPath ( STRING ) ; org.springframework.oxm.jaxb.Jaxb2Marshaller . setSchema ( new ClassPathResource ( STRING ) ) ; org.springframework.oxm.jaxb.Jaxb2Marshaller . afterPropertiesSet ( ) ; return org.springframework.oxm.jaxb.Jaxb2Marshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { Flights org.springframework.oxm.jaxb.Flights = ( Flights ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.jaxb.Flights ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.jaxb.Flights . getFlight ( ) . size ( ) ) ; void ( org.springframework.oxm.jaxb.Flights . getFlight ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { FlightType org.springframework.oxm.jaxb.FlightType = ( FlightType ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.jaxb.FlightType ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.jaxb.FlightType . getNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { unmarshaller = new Jaxb2Marshaller ( ) ; unmarshaller . setClassesToBeBound ( BinaryObject .class ) ; unmarshaller . setMtomEnabled ( true ) ; unmarshaller . afterPropertiesSet ( ) ; MimeContainer org.springframework.oxm.jaxb.MimeContainer = mock ( MimeContainer .class ) ; Resource org.springframework.oxm.jaxb.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.oxm.jaxb.Jaxb2UnmarshallerTests> ( ) ) ; javax.activation.DataHandler javax.activation.DataHandler = new javax.activation.DataHandler ( new javax.activation.FileDataSource ( org.springframework.oxm.jaxb.Resource . getFile ( ) ) ) ; given ( org.springframework.oxm.jaxb.MimeContainer . isXopPackage ( ) ) . willReturn ( true ) ; given ( org.springframework.oxm.jaxb.MimeContainer . getAttachment ( STRING ) ) . willReturn ( javax.activation.DataHandler ) ; given ( org.springframework.oxm.jaxb.MimeContainer . getAttachment ( STRING ) ) . willReturn ( javax.activation.DataHandler ) ; given ( org.springframework.oxm.jaxb.MimeContainer . getAttachment ( STRING ) ) . willReturn ( javax.activation.DataHandler ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING + STRING ; java.io.StringReader java.io.StringReader = new java.io.StringReader ( java.lang.String ) ; java.lang.Object java.lang.Object = unmarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( java.io.StringReader ) , org.springframework.oxm.jaxb.MimeContainer ) ; assertTrue ( STRING , java.lang.Object instanceof BinaryObject ) ; BinaryObject org.springframework.oxm.jaxb.BinaryObject = ( BinaryObject ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.jaxb.BinaryObject . getBytes ( ) ) ; assertTrue ( STRING , org.springframework.oxm.jaxb.BinaryObject . getBytes ( ) . length > NUMBER ) ; assertNotNull ( STRING , org.springframework.oxm.jaxb.BinaryObject . getSwaDataHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { javax.xml.stream.XMLInputFactory javax.xml.stream.XMLInputFactory = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLInputFactory ( ) ; javax.xml.stream.XMLStreamReader javax.xml.stream.XMLStreamReader = javax.xml.stream.XMLInputFactory . javax.xml.stream.XMLStreamReader ( new java.io.StringReader ( java.lang.String ) ) ; javax.xml.stream.XMLStreamReader . int ( ) ; javax.xml.stream.XMLStreamReader . int ( ) ; javax.xml.transform.Source javax.xml.transform.Source = StaxUtils . createStaxSource ( javax.xml.stream.XMLStreamReader ) ; javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.FlightType> < FlightType > javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.FlightType> = ( javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.FlightType> < FlightType > ) unmarshaller . unmarshal ( javax.xml.transform.Source ) ; FlightType org.springframework.oxm.jaxb.FlightType = javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.FlightType> . getValue ( ) ; void ( org.springframework.oxm.jaxb.FlightType ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { unmarshaller = new Jaxb2Marshaller ( ) ; unmarshaller . setPackagesToScan ( new java.lang.String [] { STRING } ) ; unmarshaller . afterPropertiesSet ( ) ; javax.xml.transform.Source javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( STRING ) ) ; javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.Airplane> < Airplane > javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.Airplane> = ( javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.Airplane> < Airplane > ) unmarshaller . unmarshal ( javax.xml.transform.Source ) ; assertEquals ( STRING , STRING , javax.xml.bind.JAXBElement<org.springframework.oxm.jaxb.Airplane> . getValue ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource org.springframework.oxm.jaxb.Resource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.oxm.jaxb.Jaxb2UnmarshallerTests> ( ) ) ; java.io.File java.io.File = org.springframework.oxm.jaxb.Resource . getFile ( ) ; Flights org.springframework.oxm.jaxb.Flights = ( Flights ) unmarshaller . unmarshal ( new javax.xml.transform.stream.StreamSource ( java.io.File ) ) ; void ( org.springframework.oxm.jaxb.Flights ) ; }  <METHOD_END>
