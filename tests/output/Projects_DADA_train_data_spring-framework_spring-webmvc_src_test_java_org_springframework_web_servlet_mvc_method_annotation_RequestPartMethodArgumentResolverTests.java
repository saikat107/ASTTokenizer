<METHOD_START> @ Before @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> = mock ( HttpMessageConverter .class ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> . getSupportedMediaTypes ( ) ) . willReturn ( java.util.Collections . java.util.List ( MediaType . TEXT_PLAIN ) ) ; org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver = new RequestPartMethodArgumentResolver ( java.util.Collections .< HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> ) ) ; reset ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> ) ; byte [] byte[] = STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; org.springframework.web.servlet.mvc.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING , STRING , byte[] ) ; org.springframework.web.servlet.mvc.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING , STRING , byte[] ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , byte[] ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest , new MockHttpServletResponse ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( java.lang.Class<? extends org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests> ( ) , STRING , ( java.lang.Class<?> < ? > [] ) null ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter . initParameterNameDiscovery ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MethodParameter = new SynthesizingMethodParameter ( java.lang.reflect.Method , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertFalse ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; assertTrue ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . supportsParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile , org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertNotNull ( java.lang.Object ) ; assertTrue ( java.lang.Object instanceof MultipartFile [] ) ; MultipartFile [] org.springframework.web.servlet.mvc.method.annotation.MultipartFile[] = ( MultipartFile [] ) java.lang.Object ; assertEquals ( NUMBER , parts . length ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile[] [ NUMBER ] , org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile[] [ NUMBER ] , org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof MultipartFile ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultipartFile , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof Part ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockPart , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.List ) ; assertEquals ( java.util.Arrays . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MockPart , org.springframework.web.servlet.mvc.method.annotation.MockPart ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof Part [] ) ; Part [] org.springframework.web.servlet.mvc.method.annotation.Part[] = ( Part [] ) java.lang.Object ; assertEquals ( NUMBER , parts . length ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.Part[] [ NUMBER ] , org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; assertEquals ( org.springframework.web.servlet.mvc.method.annotation.Part[] [ NUMBER ] , org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( null , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( null ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; fail ( STRING ) ; } catch ( MethodArgumentNotValidException org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException ) { assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getObjectName ( ) ) ; assertEquals ( NUMBER , org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getErrorCount ( ) ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.MethodArgumentNotValidException . getBindingResult ( ) . getFieldError ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { void ( null , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; fail ( STRING ) ; } catch ( MissingServletRequestPartException org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException ) { assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MissingServletRequestPartException . getRequestPartName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( STRING ) , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MultipartException .class ) public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , new ModelAndViewContainer ( ) , new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . setMethod ( STRING ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertSame ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultipartFile , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MultipartFile , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile = new MockMultipartFile ( STRING , STRING . byte[] ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) ; org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest . addFile ( new MockMultipartFile ( STRING , STRING , STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MultipartFile ) , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockMultipartHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest = new MockMultipartHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockMultipartHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockPart , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockPart , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockPart org.springframework.web.servlet.mvc.method.annotation.MockPart = new MockPart ( STRING , STRING . byte[] ( ) ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addPart ( new MockPart ( STRING , STRING . byte[] ( ) ) ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertTrue ( java.lang.Object instanceof java.util.Optional ) ; assertEquals ( STRING , java.util.Collections . java.util.List ( org.springframework.web.servlet.mvc.method.annotation.MockPart ) , ( ( java.util.Optional ) java.lang.Object ) . java.lang.Object ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean = new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ( STRING ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> . canRead ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> . read ( eq ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ) ; ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.ValidatingBinderFactory ( ) ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ) , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.ValidatingBinderFactory ( ) ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ) , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setMethod ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setContentType ( STRING ) ; org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , null , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , null ) ; assertEquals ( STRING , java.util.Optional . java.util.Optional<java.lang.Object> ( ) , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) throws java.lang.Exception { given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> . canRead ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean .class , MediaType . TEXT_PLAIN ) ) . willReturn ( true ) ; given ( org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> . read ( eq ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean .class ) , isA ( HttpInputMessage .class ) ) ) . willReturn ( org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean ) ; ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; java.lang.Object java.lang.Object = org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolver . resolveArgument ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , new org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.ValidatingBinderFactory ( ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean , java.lang.Object ) ; assertFalse ( STRING , org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . isRequestHandled ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.mvc.method.annotation.WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws java.lang.Exception { LocalValidatorFactoryBean org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean = new LocalValidatorFactoryBean ( ) ; org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean . afterPropertiesSet ( ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.Object , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . setValidator ( org.springframework.web.servlet.mvc.method.annotation.LocalValidatorFactoryBean ) ; return org.springframework.web.servlet.mvc.method.annotation.WebDataBinder ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( @ RequestPart org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean , @ RequestPart ( value = STRING , required = false ) org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean , @ Valid @ RequestPart ( STRING ) org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean , @ RequestPart ( STRING ) MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile , @ RequestPart ( STRING ) java.util.List<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> < MultipartFile > java.util.List<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> , @ RequestPart ( STRING ) MultipartFile [] org.springframework.web.servlet.mvc.method.annotation.MultipartFile[] , int int , MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile , Part org.springframework.web.servlet.mvc.method.annotation.Part , @ RequestPart ( STRING ) java.util.List<org.springframework.web.servlet.mvc.method.annotation.Part> < Part > java.util.List<org.springframework.web.servlet.mvc.method.annotation.Part> , @ RequestPart ( STRING ) Part [] org.springframework.web.servlet.mvc.method.annotation.Part[] , @ RequestParam MultipartFile org.springframework.web.servlet.mvc.method.annotation.MultipartFile , java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> < MultipartFile > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> , @ RequestPart ( STRING ) java.util.Optional<java.util.List<org.springframework.web.servlet.mvc.method.annotation.MultipartFile>> < java.util.List<org.springframework.web.servlet.mvc.method.annotation.MultipartFile> < MultipartFile > > java.util.Optional<java.util.List<org.springframework.web.servlet.mvc.method.annotation.MultipartFile>> , java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.Part> < Part > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.Part> , @ RequestPart ( STRING ) java.util.Optional<java.util.List<org.springframework.web.servlet.mvc.method.annotation.Part>> < java.util.List<org.springframework.web.servlet.mvc.method.annotation.Part> < Part > > java.util.Optional<java.util.List<org.springframework.web.servlet.mvc.method.annotation.Part>> , @ RequestPart ( STRING ) java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> < org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean > java.util.Optional<org.springframework.web.servlet.mvc.method.annotation.RequestPartMethodArgumentResolverTests.SimpleBean> ) {	}  <METHOD_END>
