<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return org.springframework.aop.interceptor.ExposeInvocationInterceptor .class . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.interceptor.MethodInvocation org.springframework.aop.interceptor.MethodInvocation ( ) java.lang.IllegalStateException { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = java.lang.ThreadLocal<org.springframework.aop.interceptor.MethodInvocation> . get ( ) ; if ( org.springframework.aop.interceptor.MethodInvocation == null ) throw new java.lang.IllegalStateException ( STRING + STRING + STRING ) ; return org.springframework.aop.interceptor.MethodInvocation ; }  <METHOD_END>
<METHOD_START> private void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) throws java.lang.Throwable { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = java.lang.ThreadLocal<org.springframework.aop.interceptor.MethodInvocation> . get ( ) ; java.lang.ThreadLocal<org.springframework.aop.interceptor.MethodInvocation> . set ( org.springframework.aop.interceptor.MethodInvocation ) ; try { return org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ; } finally { java.lang.ThreadLocal<org.springframework.aop.interceptor.MethodInvocation> . set ( org.springframework.aop.interceptor.MethodInvocation ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return PriorityOrdered . HIGHEST_PRECEDENCE + NUMBER ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( ) { return org.springframework.aop.interceptor.ExposeInvocationInterceptor ; }  <METHOD_END>
