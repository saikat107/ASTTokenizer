<METHOD_START> void ( ) {	}  <METHOD_END>
<METHOD_START> void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.util.Map<java.lang.String,java.util.regex.Pattern> < java.lang.String , java.util.regex.Pattern > java.util.Map<java.lang.String,java.util.regex.Pattern> = java.util.Map<java.lang.String,java.util.regex.Pattern> ( java.util.Map<,> , STRING ) ; this . java.util.List<java.util.regex.Pattern> . boolean ( java.util.Map<java.lang.String,java.util.regex.Pattern> . java.util.Collection<java.util.regex.Pattern> ( ) ) ; java.util.Map<java.lang.String,java.util.regex.Pattern> < java.lang.String , java.util.regex.Pattern > java.util.Map<java.lang.String,java.util.regex.Pattern> = java.util.Map<java.lang.String,java.util.regex.Pattern> ( java.util.Map<,> , STRING ) ; this . java.util.List<java.util.regex.Pattern> . boolean ( java.util.Map<java.lang.String,java.util.regex.Pattern> . java.util.Collection<java.util.regex.Pattern> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.util.regex.Pattern> < java.lang.String , java.util.regex.Pattern > java.util.Map<java.lang.String,java.util.regex.Pattern> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.util.regex.Pattern> < java.lang.String , java.util.regex.Pattern > java.util.Map<java.lang.String,java.util.regex.Pattern> = new java.util.LinkedHashMap<java.lang.String,java.util.regex.Pattern> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.util.Map.Entry<,> . getKey ( ) ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { java.util.regex.Pattern java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( ( java.lang.String ) java.util.Map.Entry<,> . getValue ( ) ) ; java.util.Map<java.lang.String,java.util.regex.Pattern> . java.util.regex.Pattern ( java.lang.String , java.util.regex.Pattern ) ; } } return java.util.Map<java.lang.String,java.util.regex.Pattern> ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.net.URL java.net.URL ) { return boolean ( java.net.URL . java.lang.String ( ) , this . java.util.List<java.util.regex.Pattern> ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.net.URL java.net.URL ) { return boolean ( java.net.URL . java.lang.String ( ) , this . java.util.List<java.util.regex.Pattern> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String , java.util.List<java.util.regex.Pattern> < java.util.regex.Pattern > java.util.List<java.util.regex.Pattern> ) { for ( java.util.regex.Pattern java.util.regex.Pattern : java.util.List<java.util.regex.Pattern> ) { if ( java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.devtools.settings.DevToolsSettings org.springframework.boot.devtools.settings.DevToolsSettings ( ) { if ( org.springframework.boot.devtools.settings.DevToolsSettings == null ) { org.springframework.boot.devtools.settings.DevToolsSettings = org.springframework.boot.devtools.settings.DevToolsSettings ( ) ; } return org.springframework.boot.devtools.settings.DevToolsSettings ; }  <METHOD_END>
<METHOD_START> static org.springframework.boot.devtools.settings.DevToolsSettings org.springframework.boot.devtools.settings.DevToolsSettings ( ) { return org.springframework.boot.devtools.settings.DevToolsSettings ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.boot.devtools.settings.DevToolsSettings org.springframework.boot.devtools.settings.DevToolsSettings ( java.lang.String java.lang.String ) { try { org.springframework.boot.devtools.settings.DevToolsSettings org.springframework.boot.devtools.settings.DevToolsSettings = new org.springframework.boot.devtools.settings.DevToolsSettings ( ) ; java.util.Enumeration<java.net.URL> < java.net.URL > java.util.Enumeration<java.net.URL> = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) . java.util.Enumeration<java.net.URL> ( java.lang.String ) ; while ( java.util.Enumeration<java.net.URL> . boolean ( ) ) { org.springframework.boot.devtools.settings.DevToolsSettings . void ( PropertiesLoaderUtils . loadProperties ( new UrlResource ( java.util.Enumeration<java.net.URL> . java.net.URL ( ) ) ) ) ; } if ( org.springframework.boot.devtools.settings.Log . isDebugEnabled ( ) ) { org.springframework.boot.devtools.settings.Log . debug ( STRING + org.springframework.boot.devtools.settings.DevToolsSettings . java.util.List<java.util.regex.Pattern> ) ; org.springframework.boot.devtools.settings.Log . debug ( STRING + org.springframework.boot.devtools.settings.DevToolsSettings . java.util.List<java.util.regex.Pattern> ) ; } return org.springframework.boot.devtools.settings.DevToolsSettings ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + STRING + java.lang.String + STRING , java.lang.Exception ) ; } }  <METHOD_END>
