<METHOD_START> @ After public void void ( ) { try { this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext . close ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ BeforeClass @ AfterClass public static void void ( ) { ReflectionTestUtils . setField ( TomcatURLStreamHandlerFactory .class , STRING , null ) ; ReflectionTestUtils . setField ( java.net.URL .class , STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.TomcatConfig .class ) ; void ( this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.JettyConfig .class ) ; void ( this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.UndertowConfig .class ) ; void ( this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext = new AnnotationConfigServletWebServerApplicationContext ( org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.AdvancedConfig .class ) ; void ( this . org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( AnnotationConfigServletWebServerApplicationContext org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext , java.lang.String java.lang.String ) throws java.lang.Exception { SimpleClientHttpRequestFactory org.springframework.boot.web.servlet.context.SimpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory ( ) ; ClientHttpRequest org.springframework.boot.web.servlet.context.ClientHttpRequest = org.springframework.boot.web.servlet.context.SimpleClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING + org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext . getWebServer ( ) . getPort ( ) + java.lang.String ) , HttpMethod . GET ) ; ClientHttpResponse org.springframework.boot.web.servlet.context.ClientHttpResponse = org.springframework.boot.web.servlet.context.ClientHttpRequest . execute ( ) ; try { java.lang.String java.lang.String = StreamUtils . copyToString ( org.springframework.boot.web.servlet.context.ClientHttpResponse . getBody ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; } finally { org.springframework.boot.web.servlet.context.ClientHttpResponse . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static void void ( java.lang.String [] java.lang.String[] ) { new AnnotationConfigServletWebServerApplicationContext ( JettyServletWebServerFactory .class , org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.Config .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) { return new JettyServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.DispatcherServlet org.springframework.boot.web.servlet.context.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController ( ) { return new org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Environment org.springframework.boot.web.servlet.context.Environment ) { this . org.springframework.boot.web.servlet.context.Environment = org.springframework.boot.web.servlet.context.Environment ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerFactory org.springframework.boot.web.servlet.context.ServletWebServerFactory ( ) { JettyServletWebServerFactory org.springframework.boot.web.servlet.context.JettyServletWebServerFactory = new JettyServletWebServerFactory ( NUMBER ) ; org.springframework.boot.web.servlet.context.JettyServletWebServerFactory . setContextPath ( this . org.springframework.boot.web.servlet.context.Environment . getProperty ( STRING ) ) ; return org.springframework.boot.web.servlet.context.JettyServletWebServerFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.DispatcherServlet> < DispatcherServlet > org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.DispatcherServlet> ( ) { ServletRegistrationBean < DispatcherServlet > org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.DispatcherServlet> = new ServletRegistrationBean <> ( org.springframework.boot.web.servlet.context.DispatcherServlet ( ) ) ; org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.DispatcherServlet> . addUrlMappings ( STRING ) ; return org.springframework.boot.web.servlet.context.ServletRegistrationBean<org.springframework.boot.web.servlet.context.DispatcherServlet> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.DispatcherServlet org.springframework.boot.web.servlet.context.DispatcherServlet ( ) { DispatcherServlet org.springframework.boot.web.servlet.context.DispatcherServlet = new DispatcherServlet ( ) ; return org.springframework.boot.web.servlet.context.DispatcherServlet ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController ( ) { return new org.springframework.boot.web.servlet.context.ServletWebServerMvcIntegrationTests.HelloWorldController ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
