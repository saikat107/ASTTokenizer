<METHOD_START> public void ( MessageStore org.springframework.integration.transformer.MessageStore ) { Assert . notNull ( org.springframework.integration.transformer.MessageStore , STRING ) ; this . org.springframework.integration.transformer.MessageStore = org.springframework.integration.transformer.MessageStore ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.transformer.Message<?> ) throws java.lang.Exception { Assert . notNull ( org.springframework.integration.transformer.Message<> , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; Message < ? > org.springframework.integration.transformer.Message<?> = this . org.springframework.integration.transformer.MessageStore . addMessage ( org.springframework.integration.transformer.Message<> ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.transformer.Message<> . getHeaders ( ) . getId ( ) ) ; org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<> . copyHeaders ( org.springframework.integration.transformer.Message<> . getHeaders ( ) ) ; return org.springframework.integration.transformer.AbstractIntegrationMessageBuilder<> . build ( ) ; }  <METHOD_END>
