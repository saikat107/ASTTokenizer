<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.data.gemfire.repository.cdi.CdiTestContainer = CdiTestContainerLoader . getCdiContainer ( ) ; org.springframework.data.gemfire.repository.cdi.CdiTestContainer . bootContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { org.springframework.data.gemfire.repository.cdi.CdiTestContainer . shutdownContainer ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { try { CacheFactory . getAnyInstance ( ) . close ( ) ; } catch ( CacheClosedException org.springframework.data.gemfire.repository.cdi.CacheClosedException ) {		} }  <METHOD_END>
<METHOD_START> protected void void ( Person org.springframework.data.gemfire.repository.cdi.Person , Person org.springframework.data.gemfire.repository.cdi.Person ) { assertThat ( org.springframework.data.gemfire.repository.cdi.Person . getId ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.Person . getId ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.Person . getFirstname ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.Person . getFirstname ( ) ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.Person . getLastname ( ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.Person . getLastname ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryClient org.springframework.data.gemfire.repository.cdi.RepositoryClient = org.springframework.data.gemfire.repository.cdi.CdiTestContainer . getInstance ( RepositoryClient .class ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.RepositoryClient . getPersonRepository ( ) , is ( notNullValue ( ) ) ) ; Person org.springframework.data.gemfire.repository.cdi.Person = org.springframework.data.gemfire.repository.cdi.RepositoryClient . newPerson ( STRING , STRING ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.Person , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.Person . getId ( ) , is ( greaterThan ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.Person . getName ( ) , is ( equalTo ( STRING ) ) ) ; Person org.springframework.data.gemfire.repository.cdi.Person = org.springframework.data.gemfire.repository.cdi.RepositoryClient . save ( org.springframework.data.gemfire.repository.cdi.Person ) ; void ( org.springframework.data.gemfire.repository.cdi.Person , org.springframework.data.gemfire.repository.cdi.Person ) ; Person org.springframework.data.gemfire.repository.cdi.Person = org.springframework.data.gemfire.repository.cdi.RepositoryClient . find ( org.springframework.data.gemfire.repository.cdi.Person . getId ( ) ) ; void ( org.springframework.data.gemfire.repository.cdi.Person , org.springframework.data.gemfire.repository.cdi.Person ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.RepositoryClient . delete ( org.springframework.data.gemfire.repository.cdi.Person ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.RepositoryClient . find ( org.springframework.data.gemfire.repository.cdi.Person . getId ( ) ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RepositoryClient org.springframework.data.gemfire.repository.cdi.RepositoryClient = org.springframework.data.gemfire.repository.cdi.CdiTestContainer . getInstance ( RepositoryClient .class ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.RepositoryClient . getPersonRepository ( ) . returnOne ( ) , is ( equalTo ( NUMBER ) ) ) ; }  <METHOD_END>
