<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.EventHeaderTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.TestListener org.springframework.statemachine.EventHeaderTests.TestListener = new org.springframework.statemachine.EventHeaderTests.TestListener ( ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventHeaderTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.EventHeaderTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.TestListener org.springframework.statemachine.EventHeaderTests.TestListener = new org.springframework.statemachine.EventHeaderTests.TestListener ( ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventHeaderTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.InterruptedException { context . register ( org.springframework.statemachine.EventHeaderTests.Config1 .class ) ; context . refresh ( ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachine .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction = context . getBean ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction .class ) ; org.springframework.statemachine.EventHeaderTests.TestListener org.springframework.statemachine.EventHeaderTests.TestListener = new org.springframework.statemachine.EventHeaderTests.TestListener ( ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . addStateListener ( org.springframework.statemachine.EventHeaderTests.TestListener ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String = null ; org.springframework.statemachine.EventHeaderTests.TestListener . void ( NUMBER ) ; org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> . sendEvent ( MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.TestListener . int , is ( NUMBER ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , is ( STRING ) ) ; assertThat ( org.springframework.statemachine.EventHeaderTests.HeaderTestAction . java.lang.String , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) , null ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ) . state ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) , null ) . state ( STRING ) . and ( ) . withStates ( ) . parent ( STRING ) . initial ( STRING ) . state ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) , null ) . state ( STRING , org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) . and ( ) . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) { return new org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) { return new org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) { return new org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) { return new org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.EventHeaderTests.HeaderTestAction org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) { return new org.springframework.statemachine.EventHeaderTests.HeaderTestAction ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < java.lang.String , java.lang.String > org.springframework.statemachine.StateContext<java.lang.String,java.lang.String> ) { java.lang.String = org.springframework.statemachine.StateContext<java.lang.String,java.lang.String> . getMessageHeaders ( ) . get ( STRING , java.lang.String .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.StateMachine<java.lang.String,java.lang.String> ) { java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> , State < java.lang.String , java.lang.String > org.springframework.statemachine.State<java.lang.String,java.lang.String> ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( int ) ; int = NUMBER ; }  <METHOD_END>
