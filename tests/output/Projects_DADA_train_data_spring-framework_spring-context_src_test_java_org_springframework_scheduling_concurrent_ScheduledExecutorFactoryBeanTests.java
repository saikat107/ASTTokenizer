<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setPoolSize ( - NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBeanTests.NoOpScheduledExecutorTask ( ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService = mock ( java.util.concurrent.ScheduledExecutorService .class ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) { @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { return java.util.concurrent.ScheduledExecutorService ; } } ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBeanTests.NoOpScheduledExecutorTask ( ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.util.concurrent.ScheduledExecutorService ) . shutdownNow ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { return java.util.concurrent.ScheduledExecutorService ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { final java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService = mock ( java.util.concurrent.ScheduledExecutorService .class ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) { @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { return java.util.concurrent.ScheduledExecutorService ; } } ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBeanTests.NoOpScheduledExecutorTask ( ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setWaitForTasksToCompleteOnShutdown ( true ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.util.concurrent.ScheduledExecutorService ) . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { return java.util.concurrent.ScheduledExecutorService ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new ScheduledExecutorTask ( java.lang.Runnable ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; void ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.lang.Runnable ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask = new ScheduledExecutorTask ( java.lang.Runnable ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setPeriod ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setFixedRate ( true ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { org.springframework.scheduling.concurrent.ScheduledExecutorTask } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; void ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.lang.Runnable , atLeast ( NUMBER ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Assume . group ( TestGroup . PERFORMANCE ) ; java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; willThrow ( new java.lang.IllegalStateException ( ) ) . given ( java.lang.Runnable ) . run ( ) ; ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask = new ScheduledExecutorTask ( java.lang.Runnable ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setPeriod ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setFixedRate ( true ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { org.springframework.scheduling.concurrent.ScheduledExecutorTask } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setContinueScheduledExecutionAfterException ( true ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; void ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.lang.Runnable , atLeast ( NUMBER ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask = new ScheduledExecutorTask ( java.lang.Runnable ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setPeriod ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setDelay ( NUMBER ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { org.springframework.scheduling.concurrent.ScheduledExecutorTask } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; void ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.lang.Runnable , never ( ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.lang.Exception { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; willThrow ( new java.lang.IllegalStateException ( ) ) . given ( java.lang.Runnable ) . run ( ) ; ScheduledExecutorTask org.springframework.scheduling.concurrent.ScheduledExecutorTask = new ScheduledExecutorTask ( java.lang.Runnable ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setPeriod ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorTask . setDelay ( NUMBER ) ; ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { org.springframework.scheduling.concurrent.ScheduledExecutorTask } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setContinueScheduledExecutionAfterException ( true ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; void ( NUMBER ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; verify ( java.lang.Runnable , never ( ) ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) { @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { assertNotNull ( STRING ) ; return super. createExecutor ( int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; } } ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBeanTests.NoOpScheduledExecutorTask ( ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setThreadFactory ( null ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { assertNotNull ( STRING ) ; return super. createExecutor ( int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) { @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { assertNotNull ( STRING ) ; return super. createExecutor ( int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; } } ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setScheduledExecutorTasks ( new ScheduledExecutorTask [] { new org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBeanTests.NoOpScheduledExecutorTask ( ) } ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . setRejectedExecutionHandler ( null ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . afterPropertiesSet ( ) ; org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.concurrent.ScheduledExecutorService java.util.concurrent.ScheduledExecutorService ( int int , java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler java.util.concurrent.RejectedExecutionHandler ) { assertNotNull ( STRING ) ; return super. createExecutor ( int , java.util.concurrent.ThreadFactory , java.util.concurrent.RejectedExecutionHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ScheduledExecutorFactoryBean org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean = new ScheduledExecutorFactoryBean ( ) ; assertEquals ( java.util.concurrent.ScheduledExecutorService .class , org.springframework.scheduling.concurrent.ScheduledExecutorFactoryBean . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( int int ) { try { java.lang.Thread . void ( int * NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) {		} }  <METHOD_END>
<METHOD_START> public void ( ) { super( new NoOpRunnable ( ) ); }  <METHOD_END>
