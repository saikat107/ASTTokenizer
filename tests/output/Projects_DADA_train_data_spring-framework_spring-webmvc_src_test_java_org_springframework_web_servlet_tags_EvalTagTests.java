<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.MockPageContext = createPageContext ( ) ; FormattingConversionServiceFactoryBean org.springframework.web.servlet.tags.FormattingConversionServiceFactoryBean = new FormattingConversionServiceFactoryBean ( ) ; org.springframework.web.servlet.tags.FormattingConversionServiceFactoryBean . afterPropertiesSet ( ) ; org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . setAttribute ( STRING , org.springframework.web.servlet.tags.FormattingConversionServiceFactoryBean . getObject ( ) ) ; org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . setAttribute ( STRING , new org.springframework.web.servlet.tags.EvalTagTests.Bean ( ) ) ; org.springframework.web.servlet.tags.EvalTag = new EvalTag ( ) ; org.springframework.web.servlet.tags.EvalTag . setPageContext ( org.springframework.web.servlet.tags.MockPageContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PercentStyleFormatter org.springframework.web.servlet.tags.PercentStyleFormatter = new PercentStyleFormatter ( ) ; org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( org.springframework.web.servlet.tags.PercentStyleFormatter . print ( new java.math.BigDecimal ( STRING ) , java.util.Locale . java.util.Locale ( ) ) , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; org.springframework.web.servlet.tags.EvalTag . setHtmlEscape ( true ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; org.springframework.web.servlet.tags.EvalTag . setJavaScriptEscape ( true ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; org.springframework.web.servlet.tags.EvalTag . setVar ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( new java.math.BigDecimal ( STRING ) , org.springframework.web.servlet.tags.MockPageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; org.springframework.web.servlet.tags.EvalTag . setVar ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.MockPageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { GenericApplicationContext org.springframework.web.servlet.tags.GenericApplicationContext = ( GenericApplicationContext ) org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; org.springframework.web.servlet.tags.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; org.springframework.web.servlet.tags.EvalTag . setVar ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , org.springframework.web.servlet.tags.MockPageContext . getAttribute ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; GenericApplicationContext org.springframework.web.servlet.tags.GenericApplicationContext = ( GenericApplicationContext ) org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . getAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; org.springframework.web.servlet.tags.GenericApplicationContext . getEnvironment ( ) . getPropertySources ( ) . addFirst ( new MapPropertySource ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ) ; org.springframework.web.servlet.tags.GenericApplicationContext . getDefaultListableBeanFactory ( ) . registerSingleton ( STRING , org.springframework.web.servlet.tags.MockPageContext . getRequest ( ) . getAttribute ( STRING ) ) ; org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.tags.EvalTag . setExpression ( STRING ) ; int int = org.springframework.web.servlet.tags.EvalTag . doStartTag ( ) ; assertEquals ( Tag . EVAL_BODY_INCLUDE , int ) ; int = org.springframework.web.servlet.tags.EvalTag . doEndTag ( ) ; assertEquals ( Tag . EVAL_PAGE , int ) ; assertEquals ( STRING , ( ( MockHttpServletResponse ) org.springframework.web.servlet.tags.MockPageContext . getResponse ( ) ) . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ NumberFormat ( style = Style . PERCENT ) public java.math.BigDecimal java.math.BigDecimal ( ) { return new java.math.BigDecimal ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
