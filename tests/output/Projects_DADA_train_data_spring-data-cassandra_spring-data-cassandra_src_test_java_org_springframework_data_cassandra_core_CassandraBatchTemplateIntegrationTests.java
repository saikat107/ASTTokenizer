<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.data.cassandra.core.CassandraTemplate = new CassandraTemplate ( session ) ; SchemaTestUtils . potentiallyCreateTableFor ( Group .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . potentiallyCreateTableFor ( FlatGroup .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( Group .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; SchemaTestUtils . truncate ( FlatGroup .class , org.springframework.data.cassandra.core.CassandraTemplate ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . insert ( org.springframework.data.cassandra.core.Group ) . insert ( org.springframework.data.cassandra.core.Group ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group . getId ( ) . getUsername ( ) ) . isEqualTo ( org.springframework.data.cassandra.core.Group . getId ( ) . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . insert ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.core.Group , org.springframework.data.cassandra.core.Group ) ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group . getId ( ) . getUsername ( ) ) . isEqualTo ( org.springframework.data.cassandra.core.Group . getId ( ) . getUsername ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . update ( org.springframework.data.cassandra.core.Group ) . update ( org.springframework.data.cassandra.core.Group ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group . getEmail ( ) ) . isEqualTo ( org.springframework.data.cassandra.core.Group . getEmail ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . update ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.core.Group , org.springframework.data.cassandra.core.Group ) ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group . getEmail ( ) ) . isEqualTo ( org.springframework.data.cassandra.core.Group . getEmail ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FlatGroup org.springframework.data.cassandra.core.FlatGroup = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new FlatGroup ( STRING , STRING , STRING ) ) ; FlatGroup org.springframework.data.cassandra.core.FlatGroup = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new FlatGroup ( STRING , STRING , STRING ) ) ; org.springframework.data.cassandra.core.FlatGroup . setEmail ( STRING ) ; org.springframework.data.cassandra.core.FlatGroup . setEmail ( STRING ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . update ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.core.FlatGroup , org.springframework.data.cassandra.core.FlatGroup ) ) . execute ( ) ; FlatGroup org.springframework.data.cassandra.core.FlatGroup = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.FlatGroup , FlatGroup .class ) ; assertThat ( org.springframework.data.cassandra.core.FlatGroup . getEmail ( ) ) . isEqualTo ( org.springframework.data.cassandra.core.FlatGroup . getEmail ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . delete ( org.springframework.data.cassandra.core.Group ) . delete ( org.springframework.data.cassandra.core.Group ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . delete ( java.util.Arrays . java.util.List ( org.springframework.data.cassandra.core.Group , org.springframework.data.cassandra.core.Group ) ) . execute ( ) ; Group org.springframework.data.cassandra.core.Group = org.springframework.data.cassandra.core.CassandraTemplate . selectOneById ( org.springframework.data.cassandra.core.Group . getId ( ) , Group .class ) ; assertThat ( org.springframework.data.cassandra.core.Group ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; Group org.springframework.data.cassandra.core.Group = new Group ( new GroupKey ( STRING , STRING , STRING ) ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; org.springframework.data.cassandra.core.Group . setEmail ( STRING ) ; long long = ( java.lang.System . long ( ) + java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit . long ( NUMBER ) ) * NUMBER ; CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . insert ( org.springframework.data.cassandra.core.Group ) . insert ( org.springframework.data.cassandra.core.Group ) . withTimestamp ( long ) . execute ( ) ; ResultSet org.springframework.data.cassandra.core.ResultSet = org.springframework.data.cassandra.core.CassandraTemplate . getCqlOperations ( ) . queryForResultSet ( STRING ) ; assertThat ( org.springframework.data.cassandra.core.ResultSet . getAvailableWithoutFetching ( ) ) . isEqualTo ( NUMBER ) ; for ( Row org.springframework.data.cassandra.core.Row : org.springframework.data.cassandra.core.ResultSet ) { assertThat ( org.springframework.data.cassandra.core.Row . getLong ( NUMBER ) ) . isEqualTo ( long ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) . execute ( ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . execute ( ) ; fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { CassandraBatchOperations org.springframework.data.cassandra.core.CassandraBatchOperations = new CassandraBatchTemplate ( org.springframework.data.cassandra.core.CassandraTemplate ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . insert ( new Group ( new GroupKey ( STRING , STRING , STRING ) ) ) . execute ( ) ; org.springframework.data.cassandra.core.CassandraBatchOperations . update ( new Group ( ) ) ; fail ( STRING ) ; }  <METHOD_END>
