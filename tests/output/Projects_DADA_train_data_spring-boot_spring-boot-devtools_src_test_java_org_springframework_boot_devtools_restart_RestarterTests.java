<METHOD_START> @ Before public void void ( ) { Restarter . setInstance ( new org.springframework.boot.devtools.restart.RestarterTests.TestableRestarter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { Restarter . clearInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Restarter . clearInstance ( ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; Restarter . getInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Restarter . clearInstance ( ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.RestarterTests.SampleApplication . void ( ) ; } ;		} ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; java.lang.String java.lang.String = this . org.springframework.boot.devtools.restart.OutputCapture . toString ( ) ; assertThat ( StringUtils . countOccurrencesOf ( java.lang.String , STRING ) ) . isGreaterThan ( NUMBER ) ; assertThat ( StringUtils . countOccurrencesOf ( java.lang.String , STRING ) ) . isGreaterThan ( NUMBER ) ; assertThat ( org.springframework.boot.devtools.restart.RestarterTests.CloseCountingApplicationListener . int ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.RestarterTests.SampleApplication . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ObjectFactory org.springframework.boot.devtools.restart.ObjectFactory = mock ( ObjectFactory .class ) ; given ( org.springframework.boot.devtools.restart.ObjectFactory . getObject ( ) ) . willReturn ( STRING ) ; java.lang.Object java.lang.Object = Restarter . getInstance ( ) . getOrAddAttribute ( STRING , org.springframework.boot.devtools.restart.ObjectFactory ) ; assertThat ( java.lang.Object ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; Restarter . getInstance ( ) . addUrls ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.net.URL java.net.URL = new java.net.URL ( STRING ) ; java.util.Collection<java.net.URL> < java.net.URL > java.util.Collection<java.net.URL> = java.util.Collections . java.util.Set<java.net.URL> ( java.net.URL ) ; Restarter org.springframework.boot.devtools.restart.Restarter = Restarter . getInstance ( ) ; org.springframework.boot.devtools.restart.Restarter . addUrls ( java.util.Collection<java.net.URL> ) ; org.springframework.boot.devtools.restart.Restarter . restart ( ) ; java.lang.ClassLoader java.lang.ClassLoader = ( ( org.springframework.boot.devtools.restart.RestarterTests.TestableRestarter ) org.springframework.boot.devtools.restart.Restarter ) . java.lang.ClassLoader ( ) ; assertThat ( ( ( java.net.URLClassLoader ) java.lang.ClassLoader ) . java.net.URL[] ( ) [ NUMBER ] ) . isEqualTo ( java.net.URL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.devtools.restart.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.devtools.restart.ExpectedException . expectMessage ( STRING ) ; Restarter . getInstance ( ) . addClassLoaderFiles ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassLoaderFiles org.springframework.boot.devtools.restart.ClassLoaderFiles = new ClassLoaderFiles ( ) ; org.springframework.boot.devtools.restart.ClassLoaderFiles . addFile ( STRING , new ClassLoaderFile ( Kind . ADDED , STRING . byte[] ( ) ) ) ; Restarter org.springframework.boot.devtools.restart.Restarter = Restarter . getInstance ( ) ; org.springframework.boot.devtools.restart.Restarter . addClassLoaderFiles ( org.springframework.boot.devtools.restart.ClassLoaderFiles ) ; org.springframework.boot.devtools.restart.Restarter . restart ( ) ; java.lang.ClassLoader java.lang.ClassLoader = ( ( org.springframework.boot.devtools.restart.RestarterTests.TestableRestarter ) org.springframework.boot.devtools.restart.Restarter ) . java.lang.ClassLoader ( ) ; assertThat ( FileCopyUtils . copyToByteArray ( java.lang.ClassLoader . java.io.InputStream ( STRING ) ) ) . isEqualTo ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { Restarter . getInstance ( ) . getOrAddAttribute ( STRING , new ObjectFactory < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.boot.devtools.restart.BeansException { return STRING ; } } ) ; ObjectFactory org.springframework.boot.devtools.restart.ObjectFactory = mock ( ObjectFactory .class ) ; java.lang.Object java.lang.Object = Restarter . getInstance ( ) . getOrAddAttribute ( STRING , org.springframework.boot.devtools.restart.ObjectFactory ) ; assertThat ( java.lang.Object ) . isEqualTo ( STRING ) ; verifyZeroInteractions ( org.springframework.boot.devtools.restart.ObjectFactory ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) org.springframework.boot.devtools.restart.BeansException { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.ClassLoader java.lang.ClassLoader = java.lang.Thread . java.lang.Thread ( ) . java.lang.ClassLoader ( ) ; final java.lang.ClassLoader java.lang.ClassLoader = new java.net.URLClassLoader ( new java.net.URL [ NUMBER ] ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) ; java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory = Restarter . getInstance ( ) . getThreadFactory ( ) ; java.lang.Thread java.lang.Thread = java.util.concurrent.ThreadFactory . java.lang.Thread ( java.lang.Runnable ) ; assertThat ( java.lang.Thread . java.lang.ClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; assertThat ( java.lang.Thread . java.lang.ClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; } ;		} ; java.lang.Thread . void ( java.lang.ClassLoader ) ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.lang.Runnable java.lang.Runnable = mock ( java.lang.Runnable .class ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) ; java.util.concurrent.ThreadFactory java.util.concurrent.ThreadFactory = Restarter . getInstance ( ) . getThreadFactory ( ) ; java.lang.Thread java.lang.Thread = java.util.concurrent.ThreadFactory . java.lang.Thread ( java.lang.Runnable ) ; assertThat ( java.lang.Thread . java.lang.ClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; assertThat ( java.lang.Thread . java.lang.ClassLoader ( ) ) . isEqualTo ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Restarter . clearInstance ( ) ; RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer = mock ( RestartInitializer .class ) ; java.net.URL [] java.net.URL[] = new java.net.URL [] { new java.net.URL ( STRING ) } ; given ( org.springframework.boot.devtools.restart.RestartInitializer . getInitialUrls ( any ( java.lang.Thread .class ) ) ) . willReturn ( java.net.URL[] ) ; Restarter . initialize ( new java.lang.String [ NUMBER ] , false , org.springframework.boot.devtools.restart.RestartInitializer , false ) ; assertThat ( Restarter . getInstance ( ) . getInitialUrls ( ) ) . isEqualTo ( java.net.URL[] ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedDelay = NUMBER ) public void void ( ) { java.lang.System . java.io.PrintStream . void ( STRING + this . int ++ + STRING + java.lang.Thread . java.lang.Thread ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( initialDelay = NUMBER , fixedDelay = NUMBER ) public void void ( ) { java.lang.System . java.io.PrintStream . void ( STRING + java.lang.Thread . java.lang.Thread ( ) ) ; if ( ! org.springframework.boot.devtools.restart.RestarterTests.SampleApplication . boolean ) { Restarter . getInstance ( ) . restart ( ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String ... java.lang.String[] ) { Restarter . initialize ( java.lang.String[] , false , new MockRestartInitializer ( ) , true ) ; AnnotationConfigApplicationContext org.springframework.boot.devtools.restart.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.devtools.restart.RestarterTests.SampleApplication .class ) ; org.springframework.boot.devtools.restart.AnnotationConfigApplicationContext . addApplicationListener ( new org.springframework.boot.devtools.restart.RestarterTests.CloseCountingApplicationListener ( ) ) ; Restarter . getInstance ( ) . prepare ( org.springframework.boot.devtools.restart.AnnotationConfigApplicationContext ) ; java.lang.System . java.io.PrintStream . void ( STRING + java.lang.Thread . java.lang.Thread ( ) ) ; void ( ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextClosedEvent org.springframework.boot.devtools.restart.ContextClosedEvent ) { int ++ ; }  <METHOD_END>
<METHOD_START> void ( ) { this( java.lang.Thread . java.lang.Thread ( ) , new java.lang.String [] {} , false , new MockRestartInitializer ( ) ); }  <METHOD_END>
<METHOD_START> protected void ( java.lang.Thread java.lang.Thread , java.lang.String [] java.lang.String[] , boolean boolean , RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer ) { super( java.lang.Thread , java.lang.String[] , boolean , org.springframework.boot.devtools.restart.RestartInitializer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FailureHandler org.springframework.boot.devtools.restart.FailureHandler ) { try { void ( ) ; start ( org.springframework.boot.devtools.restart.FailureHandler ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Throwable java.lang.Throwable ( java.lang.ClassLoader java.lang.ClassLoader ) throws java.lang.Exception { this . java.lang.ClassLoader = java.lang.ClassLoader ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception {		}  <METHOD_END>
<METHOD_START> public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
