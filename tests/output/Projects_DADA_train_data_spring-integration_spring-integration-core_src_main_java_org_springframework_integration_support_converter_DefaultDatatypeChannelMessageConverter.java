<METHOD_START> public void void ( ConversionService org.springframework.integration.support.converter.ConversionService ) { Assert . notNull ( org.springframework.integration.support.converter.ConversionService , STRING ) ; this . org.springframework.integration.support.converter.ConversionService = org.springframework.integration.support.converter.ConversionService ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.support.converter.BeanFactory ) throws org.springframework.integration.support.converter.BeansException { if ( ! this . boolean && org.springframework.integration.support.converter.BeanFactory != null ) { ConversionService org.springframework.integration.support.converter.ConversionService = IntegrationUtils . getConversionService ( org.springframework.integration.support.converter.BeanFactory ) ; if ( org.springframework.integration.support.converter.ConversionService != null ) { this . org.springframework.integration.support.converter.ConversionService = org.springframework.integration.support.converter.ConversionService ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.support.converter.Message<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { ConversionService org.springframework.integration.support.converter.ConversionService = this . org.springframework.integration.support.converter.ConversionService ; if ( org.springframework.integration.support.converter.ConversionService != null ) { if ( org.springframework.integration.support.converter.ConversionService . canConvert ( org.springframework.integration.support.converter.Message<> . getPayload ( ) . getClass ( ) , java.lang.Class<> ) ) { return org.springframework.integration.support.converter.ConversionService . convert ( org.springframework.integration.support.converter.Message<> . getPayload ( ) , java.lang.Class<> ) ; } } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.support.converter.Message<?> < ? > org.springframework.integration.support.converter.Message<?> ( java.lang.Object java.lang.Object , MessageHeaders org.springframework.integration.support.converter.MessageHeaders ) { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
