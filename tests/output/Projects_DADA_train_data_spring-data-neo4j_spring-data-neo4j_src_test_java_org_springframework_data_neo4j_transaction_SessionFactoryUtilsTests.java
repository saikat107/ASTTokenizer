<METHOD_START> @ Test public void void ( ) { NotFoundException org.springframework.data.neo4j.transaction.NotFoundException = new NotFoundException ( STRING ) ; DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( org.springframework.data.neo4j.transaction.NotFoundException ) ; void ( org.springframework.data.neo4j.transaction.DataAccessException , DataRetrievalFailureException .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BaseClassNotFoundException org.springframework.data.neo4j.transaction.BaseClassNotFoundException = new BaseClassNotFoundException ( STRING ) ; DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( org.springframework.data.neo4j.transaction.BaseClassNotFoundException ) ; void ( org.springframework.data.neo4j.transaction.DataAccessException , InvalidDataAccessApiUsageException .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CypherException org.springframework.data.neo4j.transaction.CypherException = new CypherException ( STRING , STRING , STRING ) ; DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( org.springframework.data.neo4j.transaction.CypherException ) ; void ( org.springframework.data.neo4j.transaction.DataAccessException , DataIntegrityViolationException .class , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CypherException org.springframework.data.neo4j.transaction.CypherException = new CypherException ( STRING , STRING , STRING ) ; DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( org.springframework.data.neo4j.transaction.CypherException ) ; void ( org.springframework.data.neo4j.transaction.DataAccessException , UncategorizedNeo4jException .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( ) ; assertThat ( SessionFactoryUtils . convertOgmAccessException ( java.lang.RuntimeException ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( NestedRuntimeException org.springframework.data.neo4j.transaction.NestedRuntimeException , java.lang.Class<? extends org.springframework.data.neo4j.transaction.NestedRuntimeException> < ? extends NestedRuntimeException > java.lang.Class<? extends org.springframework.data.neo4j.transaction.NestedRuntimeException> ) { void ( org.springframework.data.neo4j.transaction.NestedRuntimeException , java.lang.Class<> , null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( NestedRuntimeException org.springframework.data.neo4j.transaction.NestedRuntimeException , java.lang.Class<? extends org.springframework.data.neo4j.transaction.NestedRuntimeException> < ? extends NestedRuntimeException > java.lang.Class<? extends org.springframework.data.neo4j.transaction.NestedRuntimeException> , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.neo4j.transaction.NestedRuntimeException , is ( instanceOf ( java.lang.Class<> ) ) ) ; if ( java.lang.String != null ) { assertThat ( org.springframework.data.neo4j.transaction.NestedRuntimeException . getRootCause ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.neo4j.transaction.NestedRuntimeException . getRootCause ( ) . getMessage ( ) , containsString ( java.lang.String ) ) ; } }  <METHOD_END>
