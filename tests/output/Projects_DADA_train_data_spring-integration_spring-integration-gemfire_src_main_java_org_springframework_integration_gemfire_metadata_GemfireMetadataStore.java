<METHOD_START> public void ( Cache org.springframework.integration.gemfire.metadata.Cache ) { Assert . notNull ( org.springframework.integration.gemfire.metadata.Cache , STRING ) ; this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> = org.springframework.integration.gemfire.metadata.Cache .< java.lang.String , java.lang.String > createRegionFactory ( ) . setScope ( Scope . LOCAL ) . create ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( Region < java.lang.String , java.lang.String > org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> ) { Assert . notNull ( org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> , STRING ) ; this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> = org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> . put ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; return this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> . putIfAbsent ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; return this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> . replace ( java.lang.String , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . org.springframework.integration.gemfire.metadata.Region<java.lang.String,java.lang.String> . remove ( java.lang.String ) ; }  <METHOD_END>
