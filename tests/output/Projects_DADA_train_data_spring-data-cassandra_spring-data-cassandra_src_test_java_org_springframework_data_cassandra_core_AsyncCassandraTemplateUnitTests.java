<METHOD_START> @ Before public void void ( ) { org.springframework.data.cassandra.core.AsyncCassandraTemplate = new AsyncCassandraTemplate ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( new org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( org.springframework.data.cassandra.core.ResultSet ) ) ; when ( org.springframework.data.cassandra.core.Row . getColumnDefinitions ( ) ) . thenReturn ( org.springframework.data.cassandra.core.ColumnDefinitions ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; ListenableFuture < java.util.List<org.springframework.data.cassandra.core.Person> < Person > > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<org.springframework.data.cassandra.core.Person>> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . select ( STRING , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.util.List<org.springframework.data.cassandra.core.Person>> ) ) . hasSize ( NUMBER ) . contains ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . spliterator ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.cassandra.core.Row ) . spliterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; java.util.List<org.springframework.data.cassandra.core.Person> < Person > java.util.List<org.springframework.data.cassandra.core.Person> = new java.util.ArrayList<org.springframework.data.cassandra.core.Person> <> ( ) ; ListenableFuture < java.lang.Void > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . select ( STRING , java.util.List<org.springframework.data.cassandra.core.Person> :: add , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Void> ) ) . isNull ( ) ; assertThat ( java.util.List<org.springframework.data.cassandra.core.Person> ) . hasSize ( NUMBER ) . contains ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenThrow ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ; ListenableFuture < java.util.List<org.springframework.data.cassandra.core.Person> < Person > > org.springframework.data.cassandra.core.ListenableFuture<java.util.List<org.springframework.data.cassandra.core.Person>> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . select ( STRING , Person .class ) ; try { org.springframework.data.cassandra.core.ListenableFuture<java.util.List<org.springframework.data.cassandra.core.Person>> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOne ( STRING , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . contains ( anyString ( ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getType ( anyInt ( ) ) ) . thenReturn ( DataType . ascii ( ) ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . getIndexOf ( STRING ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.cassandra.core.Row . getObject ( NUMBER ) ) . thenReturn ( STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . selectOneById ( STRING , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( new Person ( STRING , STRING , STRING ) ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; ListenableFuture < java.lang.Boolean > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . exists ( STRING , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Iterator<java.lang.Object> ( ) ) ; ListenableFuture < java.lang.Boolean > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . exists ( STRING , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isFalse ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . iterator ( ) ) . thenReturn ( java.util.Collections . java.util.Set ( org.springframework.data.cassandra.core.Row ) . iterator ( ) ) ; when ( org.springframework.data.cassandra.core.Row . getLong ( NUMBER ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.data.cassandra.core.ColumnDefinitions . size ( ) ) . thenReturn ( NUMBER ) ; ListenableFuture < java.lang.Long > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . count ( Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Long> ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture . org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( new Person ( STRING , STRING , STRING ) ) ; try { org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . insert ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture . org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . update ( new Person ( STRING , STRING , STRING ) ) ; try { org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . update ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < java.lang.Boolean > org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . deleteById ( org.springframework.data.cassandra.core.Person . getId ( ) , Person .class ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<java.lang.Boolean> ) ) . isTrue ( ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( true ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isEqualTo ( org.springframework.data.cassandra.core.Person ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { reset ( org.springframework.data.cassandra.core.Session ) ; when ( org.springframework.data.cassandra.core.Session . executeAsync ( any ( Statement .class ) ) ) . thenReturn ( org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture . org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( new NoHostAvailableException ( java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ) ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . delete ( new Person ( STRING , STRING , STRING ) ) ; try { org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> . get ( ) ; fail ( STRING ) ; } catch ( java.util.concurrent.ExecutionException java.util.concurrent.ExecutionException ) { assertThat ( java.util.concurrent.ExecutionException ) . hasCauseInstanceOf ( CassandraConnectionFailureException .class ) . hasRootCauseInstanceOf ( NoHostAvailableException .class ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.cassandra.core.ResultSet . wasApplied ( ) ) . thenReturn ( false ) ; Person org.springframework.data.cassandra.core.Person = new Person ( STRING , STRING , STRING ) ; ListenableFuture < Person > org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> = org.springframework.data.cassandra.core.AsyncCassandraTemplate . delete ( org.springframework.data.cassandra.core.Person ) ; assertThat ( java.lang.Object ( org.springframework.data.cassandra.core.ListenableFuture<org.springframework.data.cassandra.core.Person> ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.cassandra.core.AsyncCassandraTemplate . truncate ( Person .class ) ; verify ( org.springframework.data.cassandra.core.Session ) . executeAsync ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . capture ( ) ) ; assertThat ( org.springframework.data.cassandra.core.ArgumentCaptor<org.springframework.data.cassandra.core.Statement> . getValue ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private static < T > T T ( java.util.concurrent.Future<T> < T > java.util.concurrent.Future<T> ) { try { return java.util.concurrent.Future<T> . T ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( ResultSet org.springframework.data.cassandra.core.ResultSet ) { boolean ( org.springframework.data.cassandra.core.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ResultSet org.springframework.data.cassandra.core.ResultSet ) { return super. set ( org.springframework.data.cassandra.core.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ResultSet org.springframework.data.cassandra.core.ResultSet ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.cassandra.core.ResultSet org.springframework.data.cassandra.core.ResultSet ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.util.concurrent.TimeoutException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Throwable java.lang.Throwable ) { return super. setException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( java.lang.Throwable java.lang.Throwable ) { org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture = new org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ( ) ; org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture . boolean ( java.lang.Throwable ) ; return org.springframework.data.cassandra.core.AsyncCassandraTemplateUnitTests.TestResultSetFuture ; }  <METHOD_END>
