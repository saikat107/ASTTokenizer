<METHOD_START> public void ( EntityManager org.springframework.data.jpa.repository.custom.EntityManager ) { super( org.springframework.data.jpa.repository.custom.EntityManager ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.jpa.repository.custom.SimpleJpaRepository<?,?> < ? , ? > org.springframework.data.jpa.repository.custom.SimpleJpaRepository<?,?> ( RepositoryInformation org.springframework.data.jpa.repository.custom.RepositoryInformation , EntityManager org.springframework.data.jpa.repository.custom.EntityManager ) { JpaEntityInformation < java.lang.Object , java.io.Serializable > org.springframework.data.jpa.repository.custom.JpaEntityInformation<java.lang.Object,java.io.Serializable> = mock ( JpaEntityInformation .class ) ; when ( org.springframework.data.jpa.repository.custom.JpaEntityInformation<java.lang.Object,java.io.Serializable> . getJavaType ( ) ) . thenReturn ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.jpa.repository.custom.RepositoryInformation . getDomainType ( ) ) ; return new CustomGenericJpaRepository < java.lang.Object , java.io.Serializable > ( org.springframework.data.jpa.repository.custom.JpaEntityInformation<java.lang.Object,java.io.Serializable> , org.springframework.data.jpa.repository.custom.EntityManager ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( RepositoryMetadata org.springframework.data.jpa.repository.custom.RepositoryMetadata ) { return CustomGenericJpaRepository .class ; }  <METHOD_END>
