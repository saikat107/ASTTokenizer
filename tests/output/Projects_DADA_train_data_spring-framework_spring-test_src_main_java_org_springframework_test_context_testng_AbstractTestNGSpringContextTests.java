<METHOD_START> public void ( ) { this . org.springframework.test.context.testng.TestContextManager = new TestContextManager ( java.lang.Class<? extends org.springframework.test.context.testng.AbstractTestNGSpringContextTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ApplicationContext org.springframework.test.context.testng.ApplicationContext ) { this . org.springframework.test.context.testng.ApplicationContext = org.springframework.test.context.testng.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ BeforeClass ( alwaysRun = true ) protected void void ( ) java.lang.Exception { this . org.springframework.test.context.testng.TestContextManager . beforeTestClass ( ) ; }  <METHOD_END>
<METHOD_START> @ BeforeClass ( alwaysRun = true , dependsOnMethods = STRING ) protected void void ( ) java.lang.Exception { this . org.springframework.test.context.testng.TestContextManager . prepareTestInstance ( this ) ; }  <METHOD_END>
<METHOD_START> @ BeforeMethod ( alwaysRun = true ) protected void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Exception { this . org.springframework.test.context.testng.TestContextManager . beforeTestMethod ( this , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( IHookCallBack org.springframework.test.context.testng.IHookCallBack , ITestResult org.springframework.test.context.testng.ITestResult ) { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.testng.ITestResult . getMethod ( ) . getConstructorOrMethod ( ) . getMethod ( ) ; boolean boolean = false ; try { this . org.springframework.test.context.testng.TestContextManager . beforeTestExecution ( this , java.lang.reflect.Method ) ; boolean = true ; } catch ( java.lang.Throwable java.lang.Throwable ) { this . java.lang.Throwable = java.lang.Throwable ; } if ( boolean ) { org.springframework.test.context.testng.IHookCallBack . runTestMethod ( org.springframework.test.context.testng.ITestResult ) ; this . java.lang.Throwable = java.lang.Throwable ( org.springframework.test.context.testng.ITestResult ) ; } try { this . org.springframework.test.context.testng.TestContextManager . afterTestExecution ( this , java.lang.reflect.Method , this . java.lang.Throwable ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( this . java.lang.Throwable == null ) { this . java.lang.Throwable = java.lang.Throwable ; } } if ( this . java.lang.Throwable != null ) { java.lang.RuntimeException ( this . java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ AfterMethod ( alwaysRun = true ) protected void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Exception { try { this . org.springframework.test.context.testng.TestContextManager . afterTestMethod ( this , java.lang.reflect.Method , this . java.lang.Throwable ) ; } finally { this . java.lang.Throwable = null ; } }  <METHOD_END>
<METHOD_START> @ AfterClass ( alwaysRun = true ) protected void void ( ) java.lang.Exception { this . org.springframework.test.context.testng.TestContextManager . afterTestClass ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Throwable java.lang.Throwable ( ITestResult org.springframework.test.context.testng.ITestResult ) { java.lang.Throwable java.lang.Throwable = org.springframework.test.context.testng.ITestResult . getThrowable ( ) ; if ( java.lang.Throwable instanceof java.lang.reflect.InvocationTargetException ) { java.lang.Throwable = ( ( java.lang.reflect.InvocationTargetException ) java.lang.Throwable ) . java.lang.Throwable ( ) ; } return java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> private java.lang.RuntimeException java.lang.RuntimeException ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T extends java.lang.Throwable > void void ( java.lang.Throwable java.lang.Throwable ) throws T { throw ( T ) java.lang.Throwable ; }  <METHOD_END>
