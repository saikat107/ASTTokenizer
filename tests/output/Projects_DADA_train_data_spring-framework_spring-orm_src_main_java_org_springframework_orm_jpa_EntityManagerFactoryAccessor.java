<METHOD_START> public void void ( EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ) { this . org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( ) { return this . org.springframework.orm.jpa.EntityManagerFactory ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , this . java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { this . java.util.Map<java.lang.String,java.lang.Object> . void ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.orm.jpa.BeanFactory ) throws org.springframework.orm.jpa.BeansException { if ( org.springframework.orm.jpa.EntityManagerFactory ( ) == null ) { if ( ! ( org.springframework.orm.jpa.BeanFactory instanceof ListableBeanFactory ) ) { throw new java.lang.IllegalStateException ( STRING + STRING + org.springframework.orm.jpa.BeanFactory ) ; } ListableBeanFactory org.springframework.orm.jpa.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.orm.jpa.BeanFactory ; void ( EntityManagerFactoryUtils . findEntityManagerFactory ( org.springframework.orm.jpa.ListableBeanFactory , java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( ) java.lang.IllegalStateException { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( ) ; Assert . state ( org.springframework.orm.jpa.EntityManagerFactory != null , STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( ) ; return ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object> ) ? org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( java.util.Map<java.lang.String,java.lang.Object> ) : org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.EntityManager org.springframework.orm.jpa.EntityManager ( ) java.lang.IllegalStateException { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.EntityManagerFactory ( ) ; Assert . state ( org.springframework.orm.jpa.EntityManagerFactory != null , STRING ) ; return EntityManagerFactoryUtils . getTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory , java.util.Map<java.lang.String,java.lang.Object> ( ) ) ; }  <METHOD_END>
