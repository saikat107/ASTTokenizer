<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ImportAwareTests.ImportingConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; org.springframework.context.annotation.ImportAwareTests.ImportedConfig org.springframework.context.annotation.ImportAwareTests.ImportedConfig = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ImportAwareTests.ImportedConfig .class ) ; AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ImportAwareTests.ImportedConfig . org.springframework.context.annotation.AnnotationMetadata ; assertThat ( STRING , org.springframework.context.annotation.AnnotationMetadata , notNullValue ( ) ) ; assertThat ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) , is ( org.springframework.context.annotation.ImportAwareTests.ImportingConfig .class . java.lang.String ( ) ) ) ; AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , Import .class ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.context.annotation.AnnotationAttributes . getClassArray ( STRING ) ; assertThat ( java.lang.Class<?>[] [ NUMBER ] . java.lang.String ( ) , is ( org.springframework.context.annotation.ImportAwareTests.ImportedConfig .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ImportAwareTests.IndirectlyImportingConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; org.springframework.context.annotation.ImportAwareTests.ImportedConfig org.springframework.context.annotation.ImportAwareTests.ImportedConfig = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ImportAwareTests.ImportedConfig .class ) ; AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.ImportAwareTests.ImportedConfig . org.springframework.context.annotation.AnnotationMetadata ; assertThat ( STRING , org.springframework.context.annotation.AnnotationMetadata , notNullValue ( ) ) ; assertThat ( org.springframework.context.annotation.AnnotationMetadata . getClassName ( ) , is ( org.springframework.context.annotation.ImportAwareTests.IndirectlyImportingConfig .class . java.lang.String ( ) ) ) ; AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes = AnnotationConfigUtils . attributesFor ( org.springframework.context.annotation.AnnotationMetadata , org.springframework.context.annotation.ImportAwareTests.EnableImportedConfig .class ) ; java.lang.String java.lang.String = org.springframework.context.annotation.AnnotationAttributes . getString ( STRING ) ; assertThat ( java.lang.String , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.context.annotation.ImportAwareTests.ImportedRegistrar . boolean = false ; AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ImportAwareTests.ImportingRegistrarConfig .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.context.annotation.ImportAwareTests.ImportedRegistrar . boolean = false ; AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.ImportAwareTests.ImportingRegistrarConfigWithImport .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertNotNull ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( org.springframework.context.annotation.ImportAwareTests.ImportedConfig .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ImportAwareTests.ConfigurationOne .class , org.springframework.context.annotation.ImportAwareTests.ConfigurationTwo .class ) . getBean ( org.springframework.context.annotation.ImportAwareTests.MetadataHolder .class ) . importMetadata ; assertEquals ( org.springframework.context.annotation.ImportAwareTests.ConfigurationOne .class , ( ( StandardAnnotationMetadata ) org.springframework.context.annotation.AnnotationMetadata ) . getIntrospectedClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ImportAwareTests.ConfigurationTwo .class , org.springframework.context.annotation.ImportAwareTests.ConfigurationOne .class ) . getBean ( org.springframework.context.annotation.ImportAwareTests.MetadataHolder .class ) . importMetadata ; assertEquals ( org.springframework.context.annotation.ImportAwareTests.ConfigurationOne .class , ( ( StandardAnnotationMetadata ) org.springframework.context.annotation.AnnotationMetadata ) . getIntrospectedClass ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ImportAwareTests.BPP org.springframework.context.annotation.ImportAwareTests.BPP ( ) { return new org.springframework.context.annotation.ImportAwareTests.BPP ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.AsyncAnnotationBeanPostProcessor org.springframework.context.annotation.AsyncAnnotationBeanPostProcessor ( ) { return new AsyncAnnotationBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.context.annotation.BeanFactory ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { GenericBeanDefinition org.springframework.context.annotation.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.context.annotation.GenericBeanDefinition . setBeanClassName ( java.lang.String .class . java.lang.String ( ) ) ; org.springframework.context.annotation.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.context.annotation.GenericBeanDefinition ) ; GenericBeanDefinition org.springframework.context.annotation.GenericBeanDefinition = new GenericBeanDefinition ( ) ; org.springframework.context.annotation.GenericBeanDefinition . setBeanClass ( org.springframework.context.annotation.ImportAwareTests.OtherImportedConfig .class ) ; org.springframework.context.annotation.BeanDefinitionRegistry . registerBeanDefinition ( STRING , org.springframework.context.annotation.GenericBeanDefinition ) ; Assert . state ( ! boolean , STRING ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ImportAwareTests.MetadataHolder org.springframework.context.annotation.ImportAwareTests.MetadataHolder ( ) { return new org.springframework.context.annotation.ImportAwareTests.MetadataHolder ( this . org.springframework.context.annotation.AnnotationMetadata ) ; }  <METHOD_END>
<METHOD_START> public void ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata ) { this . org.springframework.context.annotation.AnnotationMetadata = org.springframework.context.annotation.AnnotationMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConditionContext org.springframework.context.annotation.ConditionContext , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { return ( org.springframework.context.annotation.ConditionContext . getBeanFactory ( ) . getBeanNamesForType ( org.springframework.context.annotation.ImportAwareTests.MetadataHolder .class , true , false ) . length == NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurationPhase org.springframework.context.annotation.ConfigurationPhase ( ) { return ConfigurationPhase . REGISTER_BEAN ; }  <METHOD_END>
