<METHOD_START> public void ( java.util.List<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.state.State<S,E>> , java.util.List<org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E>> < org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> < S , E > > java.util.List<org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E>> ) { super( PseudoStateKind . JOIN ); this . java.util.List<org.springframework.statemachine.state.State<S,E>> = java.util.List<org.springframework.statemachine.state.State<S,E>> ; this . java.util.List<org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E>> = java.util.List<org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E>> ; this . org.springframework.statemachine.state.JoinPseudoState<S,E>.JoinTracker = new org.springframework.statemachine.state.JoinPseudoState<S,E>.JoinTracker ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( ! org.springframework.statemachine.state.JoinPseudoState<S,E>.JoinTracker . boolean ( ) ) { return null ; } State < S , E > org.springframework.statemachine.state.State<S,E> = null ; for ( org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> < S , E > org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> : java.util.List<org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E>> ) { org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> . org.springframework.statemachine.state.State<S,E> ( ) ; if ( org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> . org.springframework.statemachine.state.Guard<S,E> != null && boolean ( org.springframework.statemachine.state.JoinPseudoState.JoinStateData<S,E> . org.springframework.statemachine.state.Guard<S,E> , org.springframework.statemachine.state.StateContext<S,E> ) ) { break; } } return org.springframework.statemachine.state.State<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { org.springframework.statemachine.state.JoinPseudoState<S,E>.JoinTracker . void ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.statemachine.state.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.state.State<S,E>> ( ) { return java.util.List<org.springframework.statemachine.state.State<S,E>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<S> < S > java.util.Collection<S> ) { org.springframework.statemachine.state.JoinPseudoState<S,E>.JoinTracker . void ( java.util.Collection<S> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Guard < S , E > org.springframework.statemachine.state.Guard<S,E> , StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { try { return org.springframework.statemachine.state.Guard<S,E> . evaluate ( org.springframework.statemachine.state.StateContext<S,E> ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.statemachine.state.Log . warn ( STRING , java.lang.Throwable ) ; return false ; } }  <METHOD_END>
<METHOD_START> public void ( ) { this . java.util.List<org.springframework.statemachine.state.State<S,E>> = new java.util.ArrayList<org.springframework.statemachine.state.State<S,E>> < State < S , E > > ( java.util.List<org.springframework.statemachine.state.State<S,E>> ) ; for ( State < S , E > org.springframework.statemachine.state.State<S,E> : java.util.List<org.springframework.statemachine.state.State<S,E>> ) { final State < S , E > org.springframework.statemachine.state.State<S,E> = org.springframework.statemachine.state.State<S,E> ; org.springframework.statemachine.state.State<S,E> . addStateListener ( new StateListener < S , E > ( ) { @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) != null && StateMachineUtils . isPseudoState ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getTarget ( ) , PseudoStateKind . END ) ) { if ( ! boolean && java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) > NUMBER ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . remove ( org.springframework.statemachine.state.State<S,E> ) ; if ( java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) == NUMBER ) { boolean = true ; notifyContext ( new DefaultPseudoStateContext < S , E > ( org.springframework.statemachine.state.JoinPseudoState .this , PseudoAction . JOIN_COMPLETED ) ) ; } } } } @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( ! boolean && java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) > NUMBER ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . remove ( org.springframework.statemachine.state.State<S,E> ) ; if ( java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) == NUMBER ) { boolean = true ; notifyContext ( new DefaultPseudoStateContext < S , E > ( org.springframework.statemachine.state.JoinPseudoState .this , PseudoAction . JOIN_COMPLETED ) ) ; } } } } ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) != null && StateMachineUtils . isPseudoState ( org.springframework.statemachine.state.StateContext<S,E> . getTransition ( ) . getTarget ( ) , PseudoStateKind . END ) ) { if ( ! boolean && java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) > NUMBER ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . remove ( org.springframework.statemachine.state.State<S,E> ) ; if ( java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) == NUMBER ) { boolean = true ; notifyContext ( new DefaultPseudoStateContext < S , E > ( org.springframework.statemachine.state.JoinPseudoState .this , PseudoAction . JOIN_COMPLETED ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < S , E > org.springframework.statemachine.state.StateContext<S,E> ) { if ( ! boolean && java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) > NUMBER ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . remove ( org.springframework.statemachine.state.State<S,E> ) ; if ( java.util.List<org.springframework.statemachine.state.State<S,E>> . size ( ) == NUMBER ) { boolean = true ; notifyContext ( new DefaultPseudoStateContext < S , E > ( org.springframework.statemachine.state.JoinPseudoState .this , PseudoAction . JOIN_COMPLETED ) ) ; } } }  <METHOD_END>
<METHOD_START> void void ( ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . clear ( ) ; java.util.List<org.springframework.statemachine.state.State<S,E>> . addAll ( java.util.List<org.springframework.statemachine.state.State<S,E>> ) ; boolean = false ; }  <METHOD_END>
<METHOD_START> void void ( java.util.Collection<S> < S > java.util.Collection<S> ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . clear ( ) ; for ( State < S , E > org.springframework.statemachine.state.State<S,E> : java.util.List<org.springframework.statemachine.state.State<S,E>> ) { if ( ! java.util.Collection<S> . boolean ( org.springframework.statemachine.state.State<S,E> . getId ( ) ) ) { java.util.List<org.springframework.statemachine.state.State<S,E>> . add ( org.springframework.statemachine.state.State<S,E> ) ; } } boolean = false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void ( StateHolder < S , E > org.springframework.statemachine.state.StateHolder<S,E> , Guard < S , E > org.springframework.statemachine.state.Guard<S,E> ) { Assert . notNull ( org.springframework.statemachine.state.StateHolder<S,E> , STRING ) ; this . org.springframework.statemachine.state.StateHolder<S,E> = org.springframework.statemachine.state.StateHolder<S,E> ; this . org.springframework.statemachine.state.Guard<S,E> = org.springframework.statemachine.state.Guard<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.StateHolder<S,E> < S , E > org.springframework.statemachine.state.StateHolder<S,E> ( ) { return org.springframework.statemachine.state.StateHolder<S,E> ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.State<S,E> < S , E > org.springframework.statemachine.state.State<S,E> ( ) { return org.springframework.statemachine.state.StateHolder<S,E> . getState ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.statemachine.state.Guard<S,E> < S , E > org.springframework.statemachine.state.Guard<S,E> ( ) { return org.springframework.statemachine.state.Guard<S,E> ; }  <METHOD_END>
