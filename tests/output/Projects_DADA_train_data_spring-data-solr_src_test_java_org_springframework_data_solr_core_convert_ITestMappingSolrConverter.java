<METHOD_START> @ Before public void void ( ) java.io.IOException , javax.xml.parsers.ParserConfigurationException , org.xml.sax.SAXException { org.springframework.data.solr.core.convert.SolrTemplate = new SolrTemplate ( server ) ; org.springframework.data.solr.core.convert.SolrTemplate . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { org.springframework.data.solr.core.convert.SolrTemplate . delete ( org.springframework.data.solr.core.convert.Query ) ; org.springframework.data.solr.core.convert.SolrTemplate . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . org.springframework.data.solr.core.convert.Point = new Point ( NUMBER , NUMBER ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . org.springframework.data.solr.core.convert.Point . getX ( ) , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . org.springframework.data.solr.core.convert.Point . getX ( ) , NUMBER ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . org.springframework.data.solr.core.convert.Point . getY ( ) , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithPoint . org.springframework.data.solr.core.convert.Point . getY ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime . org.springframework.data.solr.core.convert.DateTime = new DateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime ) ; assertThat ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime . org.springframework.data.solr.core.convert.DateTime , equalTo ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaDateTime . org.springframework.data.solr.core.convert.DateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime . org.springframework.data.solr.core.convert.LocalDateTime = new LocalDateTime ( NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime ) ; assertThat ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime . org.springframework.data.solr.core.convert.LocalDateTime , equalTo ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithJodaLocalDateTime . org.springframework.data.solr.core.convert.LocalDateTime ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList . java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList ) ; assertThat ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList . java.util.List<java.lang.String> , equalTo ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithList . java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanBaseClass . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass . java.lang.String = STRING ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanBaseClass . java.lang.String , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanBaseClass . java.lang.String ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass . java.lang.String , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithBaseClass . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . java.lang.String = DEFAULT_BEAN_ID ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum = org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . java.lang.String , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . java.lang.String ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum ) ; Query org.springframework.data.solr.core.convert.Query = new SimpleQuery ( new Criteria ( STRING ) . is ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum ) ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum = org.springframework.data.solr.core.convert.SolrTemplate . queryForObject ( org.springframework.data.solr.core.convert.Query , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum .class ) . get ( ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . java.lang.String , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . java.lang.String ) ; assertEquals ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithEnum . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.LiteralNumberEnum ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> < org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore > java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> = new java.util.ArrayList<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> <> ( ) ; java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . boolean ( new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . boolean ( new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . boolean ( new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( STRING , STRING ) ) ; java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . boolean ( new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.SolrTemplate . saveBeans ( java.util.Collection<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> ) ; org.springframework.data.solr.core.convert.SolrTemplate . commit ( ) ; ScoredPage < org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore > org.springframework.data.solr.core.convert.ScoredPage<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> = org.springframework.data.solr.core.convert.SolrTemplate . queryForPage ( new SimpleQuery ( STRING ) , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore .class ) ; java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> < org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore > java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> = org.springframework.data.solr.core.convert.ScoredPage<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . getContent ( ) ; assertEquals ( NUMBER , org.springframework.data.solr.core.convert.ScoredPage<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . getTotalElements ( ) ) ; assertNotNull ( java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.Float ) ; assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.String ) ; assertNotNull ( java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.Float ) ; assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.String ) ; assertNotNull ( java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.Float ) ; assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore> . org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithScore ( NUMBER ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.data.solr.core.convert.SolrTemplate . saveBean ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap ) ; org.springframework.data.solr.core.convert.SolrTemplate . commit ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap = org.springframework.data.solr.core.convert.SolrTemplate . getById ( STRING , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap .class ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMap . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList = new org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; org.springframework.data.solr.core.convert.SolrTemplate . saveBean ( org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList ) ; org.springframework.data.solr.core.convert.SolrTemplate . commit ( ) ; org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList = org.springframework.data.solr.core.convert.SolrTemplate . getById ( STRING , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList .class ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) ) ; Assert . assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.data.solr.core.convert.ITestMappingSolrConverter.BeanWithDynamicMapList . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( T T ) { org.springframework.data.solr.core.convert.SolrTemplate . saveBean ( T ) ; org.springframework.data.solr.core.convert.SolrTemplate . commit ( ) ; return ( T ) org.springframework.data.solr.core.convert.SolrTemplate . queryForObject ( org.springframework.data.solr.core.convert.Query , T . java.lang.Class<? extends java.lang.Object> ( ) ) . orElse ( null ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { this . java.lang.String = java.lang.String ; this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
