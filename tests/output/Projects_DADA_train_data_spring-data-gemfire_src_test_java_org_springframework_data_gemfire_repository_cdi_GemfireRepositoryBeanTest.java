<METHOD_START> protected < T > T [] T[] ( T ... T[] ) { return T[] ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.Set<T> < T > java.util.Set<T> ( T ... T[] ) { return new java.util.HashSet<T> < T > ( java.util.Arrays . java.util.List<T> ( T[] ) ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.Set<T> < T > java.util.Set<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { java.util.Set<T> < T > java.util.Set<T> = new java.util.HashSet<T> < T > ( ) ; for ( T T : java.lang.Iterable<T> ) { java.util.Set<T> . boolean ( T ) ; } return java.util.Set<T> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( Bean .class ) ; CreationalContext < Region > org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Region> = mock ( CreationalContext .class ) ; Region org.springframework.data.gemfire.repository.cdi.Region = mock ( Region .class ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Region> ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Region> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Region ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , null ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . getDependencyInstance ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , Region .class ) , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.Region ) ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , null ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveGemfireMappingContext ( ) , is ( equalTo ( GemfireRepositoryBean . DEFAULT_GEMFIRE_MAPPING_CONTEXT ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Bean < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = mock ( Bean .class ) ; CreationalContext < GemfireMappingContext > org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> = mock ( CreationalContext .class ) ; GemfireMappingContext org.springframework.data.gemfire.repository.cdi.GemfireMappingContext = new GemfireMappingContext ( ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) , eq ( GemfireMappingContext .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.GemfireMappingContext ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> , null ) ; GemfireMappingContext org.springframework.data.gemfire.repository.cdi.GemfireMappingContext = org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveGemfireMappingContext ( ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireMappingContext , is ( equalTo ( org.springframework.data.gemfire.repository.cdi.GemfireMappingContext ) ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) , eq ( GemfireMappingContext .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.GemfireMappingContext> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.repository.cdi.Region = mock ( Region .class ) ; Region org.springframework.data.gemfire.repository.cdi.Region = mock ( Region .class ) ; CreationalContext < Bean < Region > > org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> = mock ( CreationalContext .class ) ; Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( Bean .class ) ; Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( Bean .class ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) Region .class ) ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) Region .class ) ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . createCreationalContext ( any ( Bean .class ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Region ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Region ) ; GemfireRepositoryBean org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean = new GemfireRepositoryBean ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections . java.util.Set<java.lang.Object> ( ) , null , null , java.util.Set ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region> < Region > java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region> = org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean . resolveGemfireRegions ( ) ; assertThat ( java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.Set<org.springframework.data.gemfire.repository.cdi.Region> ( java.lang.Iterable<org.springframework.data.gemfire.repository.cdi.Region> ) . containsAll ( java.util.Set ( org.springframework.data.gemfire.repository.cdi.Region , org.springframework.data.gemfire.repository.cdi.Region ) ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , times ( NUMBER ) ) . getTypes ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , times ( NUMBER ) ) . getTypes ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Bean org.springframework.data.gemfire.repository.cdi.Bean = mock ( Bean .class ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) java.lang.Object .class , java.util.Map .class , java.util.concurrent.ConcurrentMap .class , Region .class ) ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , null ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveType ( org.springframework.data.gemfire.repository.cdi.Bean , Region .class ) , is ( equalTo ( ( java.lang.reflect.Type ) Region .class ) ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveType ( org.springframework.data.gemfire.repository.cdi.Bean , java.util.Map .class ) , isIn ( java.lang.reflect.Type[] ( ( java.lang.reflect.Type ) java.util.Map .class , java.util.concurrent.ConcurrentMap .class , Region .class ) ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean , times ( NUMBER ) ) . getTypes ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Bean < java.util.Map > org.springframework.data.gemfire.repository.cdi.Bean<java.util.Map> = mock ( Bean .class ) ; java.util.Map<java.lang.Long,java.lang.Object> < java.lang.Long , java.lang.Object > java.util.Map<java.lang.Long,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.Long,java.lang.Object> ( ) ; java.lang.reflect.ParameterizedType java.lang.reflect.ParameterizedType = mock ( java.lang.reflect.ParameterizedType .class ) ; assertThat ( java.util.Map<java.lang.Long,java.lang.Object> . java.lang.Class<? extends java.util.Map> ( ) , is ( instanceOf ( java.lang.reflect.Type .class ) ) ) ; assertThat ( java.util.Map<java.lang.Long,java.lang.Object> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.reflect.Type ( ) , is ( instanceOf ( java.lang.reflect.ParameterizedType .class ) ) ) ; assertThat ( java.util.Map<java.lang.Long,java.lang.Object> . java.lang.Class<? extends java.util.Map> ( ) . java.lang.reflect.TypeVariable<java.lang.Class<>>[] ( ) . int , is ( equalTo ( NUMBER ) ) ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<java.util.Map> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) java.lang.reflect.ParameterizedType ) ) ; when ( java.lang.reflect.ParameterizedType . java.lang.reflect.Type ( ) ) . thenReturn ( java.util.Map<java.lang.Long,java.lang.Object> . java.lang.Class<? extends java.util.Map> ( ) ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , null ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveType ( org.springframework.data.gemfire.repository.cdi.Bean<java.util.Map> , java.util.Map .class ) , is ( equalTo ( ( java.lang.reflect.Type ) java.lang.reflect.ParameterizedType ) ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<java.util.Map> , times ( NUMBER ) ) . getTypes ( ) ; verify ( java.lang.reflect.ParameterizedType , times ( NUMBER ) ) . getRawType ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Bean org.springframework.data.gemfire.repository.cdi.Bean = mock ( Bean .class ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) java.util.Map .class , java.lang.Object .class ) ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , null ) ; try { org.springframework.data.gemfire.repository.cdi.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.repository.cdi.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.repository.cdi.ExpectedException . expectMessage ( is ( equalTo ( java.lang.String . java.lang.String ( STRING , Region .class , org.springframework.data.gemfire.repository.cdi.Bean ) ) ) ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . resolveType ( org.springframework.data.gemfire.repository.cdi.Bean , Region .class ) ; } finally { verify ( org.springframework.data.gemfire.repository.cdi.Bean , times ( NUMBER ) ) . getTypes ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Bean < Region > org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> = mock ( Bean .class ) ; CreationalContext < Bean < Region > > org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> = mock ( CreationalContext .class ) ; final Region org.springframework.data.gemfire.repository.cdi.Region = mock ( Region .class ) ; RegionAttributes org.springframework.data.gemfire.repository.cdi.RegionAttributes = mock ( RegionAttributes .class ) ; when ( org.springframework.data.gemfire.repository.cdi.Region . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.repository.cdi.Region . getAttributes ( ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.RegionAttributes ) ; when ( org.springframework.data.gemfire.repository.cdi.RegionAttributes . getKeyConstraint ( ) ) . thenReturn ( java.lang.Long .class ) ; when ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> . getTypes ( ) ) . thenReturn ( java.util.Set<java.lang.reflect.Type> ( ( java.lang.reflect.Type ) Region .class ) ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . createCreationalContext ( any ( Bean .class ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ; when ( org.springframework.data.gemfire.repository.cdi.BeanManager . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ) . thenReturn ( org.springframework.data.gemfire.repository.cdi.Region ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> = new GemfireRepositoryBean < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository > ( org.springframework.data.gemfire.repository.cdi.BeanManager , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Collections .< java.lang.annotation.Annotation > java.util.Set<java.lang.annotation.Annotation> ( ) , null , null , java.util.Set ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) { @ java.lang.Override org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ( ) { GemfireRepositoryFactory org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory = super. newGemfireRepositoryFactory ( ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory . addRepositoryProxyPostProcessor ( ( factory , repositoryInformation ) -> { try { assertThat ( repositoryInformation . getRepositoryInterface ( ) , is ( equalTo ( PersonRepository .class ) ) ) ; assertThat ( repositoryInformation . getRepositoryBaseClass ( ) , is ( equalTo ( SimpleGemfireRepository .class ) ) ) ; assertThat ( repositoryInformation . getDomainType ( ) , is ( equalTo ( Person .class ) ) ) ; assertThat ( repositoryInformation . getIdType ( ) , is ( equalTo ( Long .class ) ) ) ; assertThat ( factory . getTargetClass ( ) , is ( equalTo ( SimpleGemfireRepository .class ) ) ) ; Object gemfireRepository = factory . getTargetSource ( ) . getTarget ( ) ; GemfireAccessor gemfireAccessor = TestUtils . readField ( STRING , gemfireRepository ) ; assertThat ( gemfireAccessor , is ( notNullValue ( ) ) ) ; assertThat ( gemfireAccessor . getRegion ( ) , is ( equalTo ( mockRegion ) ) ) ; repositoryProxyPostProcessed . set ( true ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; return org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ; } } ; GemfireRepository < org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.Person , java.lang.Long > org.springframework.data.gemfire.repository.cdi.GemfireRepository<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.Person,java.lang.Long> = org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBean<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository> . create ( null , org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.PersonRepository .class , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; assertThat ( org.springframework.data.gemfire.repository.cdi.GemfireRepository<org.springframework.data.gemfire.repository.cdi.GemfireRepositoryBeanTest.Person,java.lang.Long> , is ( notNullValue ( ) ) ) ; assertThat ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . createCreationalContext ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.BeanManager , times ( NUMBER ) ) . getReference ( eq ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> ) , eq ( Region .class ) , eq ( org.springframework.data.gemfire.repository.cdi.CreationalContext<org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region>> ) ) ; verify ( org.springframework.data.gemfire.repository.cdi.Bean<org.springframework.data.gemfire.repository.cdi.Region> , times ( NUMBER ) ) . getTypes ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Region , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.Region , times ( NUMBER ) ) . getAttributes ( ) ; verify ( org.springframework.data.gemfire.repository.cdi.RegionAttributes , times ( NUMBER ) ) . getKeyConstraint ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ( ) { GemfireRepositoryFactory org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory = super. newGemfireRepositoryFactory ( ) ; org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory . addRepositoryProxyPostProcessor ( ( factory , repositoryInformation ) -> { try { assertThat ( repositoryInformation . getRepositoryInterface ( ) , is ( equalTo ( PersonRepository .class ) ) ) ; assertThat ( repositoryInformation . getRepositoryBaseClass ( ) , is ( equalTo ( SimpleGemfireRepository .class ) ) ) ; assertThat ( repositoryInformation . getDomainType ( ) , is ( equalTo ( Person .class ) ) ) ; assertThat ( repositoryInformation . getIdType ( ) , is ( equalTo ( Long .class ) ) ) ; assertThat ( factory . getTargetClass ( ) , is ( equalTo ( SimpleGemfireRepository .class ) ) ) ; Object gemfireRepository = factory . getTargetSource ( ) . getTarget ( ) ; GemfireAccessor gemfireAccessor = TestUtils . readField ( STRING , gemfireRepository ) ; assertThat ( gemfireAccessor , is ( notNullValue ( ) ) ) ; assertThat ( gemfireAccessor . getRegion ( ) , is ( equalTo ( mockRegion ) ) ) ; repositoryProxyPostProcessed . set ( true ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; return org.springframework.data.gemfire.repository.cdi.GemfireRepositoryFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.util.Map.Entry<java.lang.Long,java.lang.Object>> < java.util.Map.Entry<java.lang.Long,java.lang.Object> < java.lang.Long , java.lang.Object > > java.util.Set<java.util.Map.Entry<java.lang.Long,java.lang.Object>> ( ) { return java.util.Collections . java.util.Set<java.util.Map.Entry<java.lang.Long,java.lang.Object>> ( ) ; }  <METHOD_END>
