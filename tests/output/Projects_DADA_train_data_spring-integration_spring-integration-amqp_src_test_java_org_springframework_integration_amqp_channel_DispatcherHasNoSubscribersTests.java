<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { final Channel org.springframework.integration.amqp.channel.Channel = mock ( Channel .class ) ; DeclareOk org.springframework.integration.amqp.channel.DeclareOk = mock ( DeclareOk .class ) ; when ( org.springframework.integration.amqp.channel.DeclareOk . getQueue ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.amqp.channel.Channel . queueDeclare ( anyString ( ) , anyBoolean ( ) , anyBoolean ( ) , anyBoolean ( ) , isNull ( ) ) ) . thenReturn ( org.springframework.integration.amqp.channel.DeclareOk ) ; Connection org.springframework.integration.amqp.channel.Connection = mock ( Connection .class ) ; doAnswer ( invocation -> channel ) . when ( org.springframework.integration.amqp.channel.Connection ) . createChannel ( anyBoolean ( ) ) ; ConnectionFactory org.springframework.integration.amqp.channel.ConnectionFactory = mock ( ConnectionFactory .class ) ; when ( org.springframework.integration.amqp.channel.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.channel.Connection ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.channel.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.integration.amqp.channel.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.integration.amqp.channel.ConnectionFactory ) ; AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate = mock ( AmqpTemplate .class ) ; PointToPointSubscribableAmqpChannel org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel = new PointToPointSubscribableAmqpChannel ( STRING , org.springframework.integration.amqp.channel.SimpleMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . setBeanName ( STRING ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.channel.PointToPointSubscribableAmqpChannel . afterPropertiesSet ( ) ; MessageListener org.springframework.integration.amqp.channel.MessageListener = ( MessageListener ) org.springframework.integration.amqp.channel.SimpleMessageListenerContainer . getMessageListener ( ) ; try { org.springframework.integration.amqp.channel.MessageListener . onMessage ( new Message ( STRING . byte[] ( ) , null ) ) ; fail ( STRING ) ; } catch ( MessageDeliveryException org.springframework.integration.amqp.channel.MessageDeliveryException ) { assertThat ( org.springframework.integration.amqp.channel.MessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final Channel org.springframework.integration.amqp.channel.Channel = mock ( Channel .class ) ; Connection org.springframework.integration.amqp.channel.Connection = mock ( Connection .class ) ; doAnswer ( invocation -> channel ) . when ( org.springframework.integration.amqp.channel.Connection ) . createChannel ( anyBoolean ( ) ) ; ConnectionFactory org.springframework.integration.amqp.channel.ConnectionFactory = mock ( ConnectionFactory .class ) ; when ( org.springframework.integration.amqp.channel.ConnectionFactory . createConnection ( ) ) . thenReturn ( org.springframework.integration.amqp.channel.Connection ) ; SimpleMessageListenerContainer org.springframework.integration.amqp.channel.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.integration.amqp.channel.SimpleMessageListenerContainer . setConnectionFactory ( org.springframework.integration.amqp.channel.ConnectionFactory ) ; AmqpTemplate org.springframework.integration.amqp.channel.AmqpTemplate = mock ( AmqpTemplate .class ) ; final Queue org.springframework.integration.amqp.channel.Queue = new Queue ( STRING ) ; PublishSubscribeAmqpChannel org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel = new PublishSubscribeAmqpChannel ( STRING , org.springframework.integration.amqp.channel.SimpleMessageListenerContainer , org.springframework.integration.amqp.channel.AmqpTemplate ) { @ java.lang.Override protected java.lang.String java.lang.String ( AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin , java.lang.String java.lang.String ) { return org.springframework.integration.amqp.channel.Queue . getName ( ) ; } } ; org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . setBeanName ( STRING ) ; org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel . afterPropertiesSet ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.List<java.lang.String> ( org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel ) ; MessageListener org.springframework.integration.amqp.channel.MessageListener = ( MessageListener ) org.springframework.integration.amqp.channel.SimpleMessageListenerContainer . getMessageListener ( ) ; org.springframework.integration.amqp.channel.MessageListener . onMessage ( new Message ( STRING . byte[] ( ) , null ) ) ; void ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( AmqpAdmin org.springframework.integration.amqp.channel.AmqpAdmin , java.lang.String java.lang.String ) { return org.springframework.integration.amqp.channel.Queue . getName ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( PublishSubscribeAmqpChannel org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel ) { SimpleMessageListenerContainer org.springframework.integration.amqp.channel.SimpleMessageListenerContainer = TestUtils . getPropertyValue ( org.springframework.integration.amqp.channel.PublishSubscribeAmqpChannel , STRING , SimpleMessageListenerContainer .class ) ; Log org.springframework.integration.amqp.channel.Log = mock ( Log .class ) ; final java.util.ArrayList<java.lang.String> < java.lang.String > java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; doAnswer ( invocation -> { String message = invocation . getArgument ( NUMBER ) ; if ( message . startsWith ( STRING ) ) { logList . add ( message ) ; } return null ; } ) . when ( org.springframework.integration.amqp.channel.Log ) . warn ( anyString ( ) , any ( java.lang.Exception .class ) ) ; when ( org.springframework.integration.amqp.channel.Log . isWarnEnabled ( ) ) . thenReturn ( true ) ; java.lang.Object java.lang.Object = org.springframework.integration.amqp.channel.SimpleMessageListenerContainer . getMessageListener ( ) ; DirectFieldAccessor org.springframework.integration.amqp.channel.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; org.springframework.integration.amqp.channel.DirectFieldAccessor . setPropertyValue ( STRING , org.springframework.integration.amqp.channel.Log ) ; return java.util.ArrayList<java.lang.String> ; }  <METHOD_END>
<METHOD_START> private void void ( final java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ) { assertTrue ( STRING , java.util.List<java.lang.String> . int ( ) > NUMBER ) ; boolean boolean = false ; while ( java.util.List<java.lang.String> . int ( ) > NUMBER ) { java.lang.String java.lang.String = java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ; assertNotNull ( STRING , java.lang.String ) ; if ( java.lang.String . boolean ( STRING ) ) { boolean = true ; assertThat ( java.lang.String , containsString ( STRING ) ) ; break; } } assertTrue ( STRING , boolean ) ; }  <METHOD_END>
