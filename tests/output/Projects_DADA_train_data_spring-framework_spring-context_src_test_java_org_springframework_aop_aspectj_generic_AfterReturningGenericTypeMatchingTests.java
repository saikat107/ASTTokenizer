<METHOD_START> @ Before public void void ( ) { ClassPathXmlApplicationContext org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.generic.AfterReturningGenericTypeMatchingTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.generic.AfterReturningGenericTypeMatchingTests> ( ) ) ; org.springframework.aop.aspectj.generic.CounterAspect = ( org.springframework.aop.aspectj.generic.CounterAspect ) org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext . getBean ( STRING ) ; org.springframework.aop.aspectj.generic.CounterAspect . void ( ) ; org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass = ( org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass ) org.springframework.aop.aspectj.generic.ClassPathXmlApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<java.lang.String> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; org.springframework.aop.aspectj.generic.CounterAspect . void ( ) ; org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<java.lang.Integer> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<java.lang.String> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; org.springframework.aop.aspectj.generic.CounterAspect . void ( ) ; org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<java.lang.Integer> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<java.lang.Integer> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<org.springframework.aop.aspectj.generic.TestBean> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; org.springframework.aop.aspectj.generic.CounterAspect . void ( ) ; org.springframework.aop.aspectj.generic.GenericReturnTypeVariationClass . java.util.Collection<org.springframework.aop.aspectj.generic.Employee> ( ) ; assertEquals ( NUMBER , org.springframework.aop.aspectj.generic.CounterAspect . int ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return new java.util.ArrayList<java.lang.String> <> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ( ) { return new java.util.ArrayList<java.lang.Integer> <> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.aop.aspectj.generic.TestBean> < TestBean > java.util.Collection<org.springframework.aop.aspectj.generic.TestBean> ( ) { return new java.util.ArrayList<org.springframework.aop.aspectj.generic.TestBean> <> ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.aop.aspectj.generic.Employee> < Employee > java.util.Collection<org.springframework.aop.aspectj.generic.Employee> ( ) { return new java.util.ArrayList<org.springframework.aop.aspectj.generic.Employee> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Pointcut ( STRING ) public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ AfterReturning ( pointcut = STRING , returning = STRING ) public void void ( java.util.Collection<?> < ? > java.util.Collection<?> ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( pointcut = STRING , returning = STRING ) public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( pointcut = STRING , returning = STRING ) public void void ( java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( pointcut = STRING , returning = STRING ) public void void ( java.util.Collection<? extends java.lang.Number> < ? extends java.lang.Number > java.util.Collection<? extends java.lang.Number> ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ AfterReturning ( pointcut = STRING , returning = STRING ) public void void ( java.util.Collection<? super org.springframework.aop.aspectj.generic.TestBean> < ? super TestBean > java.util.Collection<? super org.springframework.aop.aspectj.generic.TestBean> ) { int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; int = NUMBER ; }  <METHOD_END>
