<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.integration.config.Expression = org.springframework.integration.config.ExpressionParser . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.config.Expression ) { this . org.springframework.integration.config.Expression = org.springframework.integration.config.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( ) { MessageHandler org.springframework.integration.config.MessageHandler ; if ( this . java.lang.Object == null ) { Assert . isTrue ( ! StringUtils . hasText ( this . java.lang.String ) , STRING ) ; } if ( this . java.lang.Object != null ) { Assert . state ( this . org.springframework.integration.config.Expression == null , STRING ) ; AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler = this . org.springframework.integration.config.AbstractMessageProducingHandler ( this . java.lang.Object , AbstractMessageProducingHandler .class ) ; boolean boolean = org.springframework.integration.config.AbstractMessageProducingHandler != null && this . boolean ( org.springframework.integration.config.AbstractMessageProducingHandler ) && this . boolean ( this . java.lang.String ) ; if ( this . java.lang.Object instanceof MessageProcessor < ? > ) { org.springframework.integration.config.MessageHandler = this . org.springframework.integration.config.MessageHandler ( ( MessageProcessor < ? > ) this . java.lang.Object ) ; } else if ( boolean ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . java.lang.Object + STRING ) ; } this . void ( org.springframework.integration.config.AbstractMessageProducingHandler ) ; this . void ( org.springframework.integration.config.AbstractMessageProducingHandler ) ; org.springframework.integration.config.MessageHandler = ( MessageHandler ) this . java.lang.Object ; } else { org.springframework.integration.config.MessageHandler = this . org.springframework.integration.config.MessageHandler ( this . java.lang.Object , this . java.lang.String ) ; } } else if ( this . org.springframework.integration.config.Expression != null ) { org.springframework.integration.config.MessageHandler = this . org.springframework.integration.config.MessageHandler ( this . org.springframework.integration.config.Expression ) ; } else { org.springframework.integration.config.MessageHandler = this . org.springframework.integration.config.MessageHandler ( ) ; } return org.springframework.integration.config.MessageHandler ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { if ( java.lang.Object instanceof AbstractReplyProducingMessageHandler && this . boolean ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { Assert . isTrue ( ! java.util.Set<org.springframework.integration.config.MessageHandler> . contains ( org.springframework.integration.config.AbstractMessageProducingHandler ) , STRING + org.springframework.integration.config.AbstractMessageProducingHandler . getComponentName ( ) + STRING ) ; java.util.Set<org.springframework.integration.config.MessageHandler> . add ( org.springframework.integration.config.AbstractMessageProducingHandler ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( java.lang.Object java.lang.Object , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( Expression org.springframework.integration.config.Expression ) { throw new java.lang.UnsupportedOperationException ( this . java.lang.Class<? extends org.springframework.integration.config.AbstractStandardMessageHandlerFactoryBean> ( ) . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected < T > org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( MessageProcessor < T > org.springframework.integration.config.MessageProcessor<T> ) { return this . org.springframework.integration.config.MessageHandler ( org.springframework.integration.config.MessageProcessor<T> , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.config.MessageHandler org.springframework.integration.config.MessageHandler ( ) { throw new java.lang.IllegalArgumentException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( java.lang.Object == null ) { return null ; } if ( java.lang.Class<T> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { return ( T ) java.lang.Object ; } if ( java.lang.Object instanceof Advised ) { TargetSource org.springframework.integration.config.TargetSource = ( ( Advised ) java.lang.Object ) . getTargetSource ( ) ; if ( org.springframework.integration.config.TargetSource == null ) { return null ; } try { return java.lang.Object ( org.springframework.integration.config.TargetSource . getTarget ( ) , java.lang.Class<T> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } return null ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return ( ! StringUtils . hasText ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) { return false ; }  <METHOD_END>
<METHOD_START> protected void void ( AbstractMessageProducingHandler org.springframework.integration.config.AbstractMessageProducingHandler ) {	}  <METHOD_END>
