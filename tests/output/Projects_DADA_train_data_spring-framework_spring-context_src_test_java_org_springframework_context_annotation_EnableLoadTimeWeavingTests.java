<METHOD_START> @ Test public void void ( ) { GenericXmlApplicationContext org.springframework.context.annotation.GenericXmlApplicationContext = new GenericXmlApplicationContext ( java.lang.Class<? extends org.springframework.context.annotation.EnableLoadTimeWeavingTests> ( ) , STRING ) ; org.springframework.context.annotation.GenericXmlApplicationContext . getBean ( STRING , LoadTimeWeaver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.EnableLoadTimeWeavingTests.EnableLTWConfig_withAjWeavingDisabled .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , LoadTimeWeaver .class ) ; verifyZeroInteractions ( org.springframework.context.annotation.LoadTimeWeaver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.EnableLoadTimeWeavingTests.EnableLTWConfig_withAjWeavingAutodetect .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , LoadTimeWeaver .class ) ; verifyZeroInteractions ( org.springframework.context.annotation.LoadTimeWeaver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.EnableLoadTimeWeavingTests.EnableLTWConfig_withAjWeavingEnabled .class ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , LoadTimeWeaver .class ) ; verify ( org.springframework.context.annotation.LoadTimeWeaver ) . addTransformer ( isA ( java.lang.instrument.ClassFileTransformer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver ( ) { return mock ( LoadTimeWeaver .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver ( ) { return mock ( LoadTimeWeaver .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.LoadTimeWeaver org.springframework.context.annotation.LoadTimeWeaver ( ) { return mock ( LoadTimeWeaver .class ) ; }  <METHOD_END>
