<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.servlet.view.document.View = new AbstractXlsView ( ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; } } ; org.springframework.web.servlet.view.document.View . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.document.MockHttpServletRequest , org.springframework.web.servlet.view.document.MockHttpServletResponse ) ; Workbook org.springframework.web.servlet.view.document.Workbook = new HSSFWorkbook ( new java.io.ByteArrayInputStream ( org.springframework.web.servlet.view.document.MockHttpServletResponse . getContentAsByteArray ( ) ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Workbook . getSheetName ( NUMBER ) ) ; Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . getSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . getRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . getCell ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Cell . getStringCellValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.servlet.view.document.View = new AbstractXlsxView ( ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; } } ; org.springframework.web.servlet.view.document.View . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.document.MockHttpServletRequest , org.springframework.web.servlet.view.document.MockHttpServletResponse ) ; Workbook org.springframework.web.servlet.view.document.Workbook = new XSSFWorkbook ( new java.io.ByteArrayInputStream ( org.springframework.web.servlet.view.document.MockHttpServletResponse . getContentAsByteArray ( ) ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Workbook . getSheetName ( NUMBER ) ) ; Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . getSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . getRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . getCell ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Cell . getStringCellValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { View org.springframework.web.servlet.view.document.View = new AbstractXlsxStreamingView ( ) { @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; } } ; org.springframework.web.servlet.view.document.View . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.document.MockHttpServletRequest , org.springframework.web.servlet.view.document.MockHttpServletResponse ) ; Workbook org.springframework.web.servlet.view.document.Workbook = new XSSFWorkbook ( new java.io.ByteArrayInputStream ( org.springframework.web.servlet.view.document.MockHttpServletResponse . getContentAsByteArray ( ) ) ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Workbook . getSheetName ( NUMBER ) ) ; Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . getSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . getRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . getCell ( NUMBER ) ; assertEquals ( STRING , org.springframework.web.servlet.view.document.Cell . getStringCellValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> , Workbook org.springframework.web.servlet.view.document.Workbook , HttpServletRequest org.springframework.web.servlet.view.document.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.view.document.HttpServletResponse ) throws java.lang.Exception { Sheet org.springframework.web.servlet.view.document.Sheet = org.springframework.web.servlet.view.document.Workbook . createSheet ( STRING ) ; Row org.springframework.web.servlet.view.document.Row = org.springframework.web.servlet.view.document.Sheet . createRow ( NUMBER ) ; Cell org.springframework.web.servlet.view.document.Cell = org.springframework.web.servlet.view.document.Row . createCell ( NUMBER ) ; org.springframework.web.servlet.view.document.Cell . setCellValue ( STRING ) ; }  <METHOD_END>
