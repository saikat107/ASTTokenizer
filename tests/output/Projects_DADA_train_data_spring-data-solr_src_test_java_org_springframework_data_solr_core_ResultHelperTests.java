<METHOD_START> @ Test public void void ( ) { java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , null ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResultHelper . convertFacetQueryResponseToFacetPageMap ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( new SimpleFacetQuery ( new Criteria ( STRING ) ) , null ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( null ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( java.util.Collections .< FacetField > java.util.List<org.springframework.data.solr.core.FacetField> ( ) ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.FacetField> < FacetField > java.util.List<org.springframework.data.solr.core.FacetField> = new java.util.ArrayList<org.springframework.data.solr.core.FacetField> <> ( NUMBER ) ; FacetField org.springframework.data.solr.core.FacetField = new FacetField ( STRING ) ; java.util.List<org.springframework.data.solr.core.FacetField> . add ( org.springframework.data.solr.core.FacetField ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( java.util.List<org.springframework.data.solr.core.FacetField> ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . size ( ) ) ; java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . entrySet ( ) . iterator ( ) . next ( ) ; Assert . assertEquals ( org.springframework.data.solr.core.FacetField . getName ( ) , java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . getKey ( ) . getName ( ) ) ; Assert . assertTrue ( java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . getValue ( ) . getContent ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.FacetField> < FacetField > java.util.List<org.springframework.data.solr.core.FacetField> = new java.util.ArrayList<org.springframework.data.solr.core.FacetField> <> ( NUMBER ) ; FacetField org.springframework.data.solr.core.FacetField = org.springframework.data.solr.core.FacetField ( STRING , NUMBER , NUMBER ) ; java.util.List<org.springframework.data.solr.core.FacetField> . add ( org.springframework.data.solr.core.FacetField ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( java.util.List<org.springframework.data.solr.core.FacetField> ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . size ( ) ) ; java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . entrySet ( ) . iterator ( ) . next ( ) ; Assert . assertEquals ( org.springframework.data.solr.core.FacetField . getName ( ) , java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . getKey ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map.Entry<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . getValue ( ) . getContent ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetQuery ( ) ) . thenReturn ( null ) ; java.util.List<org.springframework.data.solr.core.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.FacetQueryEntry> = ResultHelper . convertFacetQueryResponseToFacetQueryResult ( org.springframework.data.solr.core.FacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ) ; Assert . assertTrue ( java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetQuery ( ) ) . thenReturn ( java.util.Collections .< java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> ( ) ) ; java.util.List<org.springframework.data.solr.core.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.FacetQueryEntry> = ResultHelper . convertFacetQueryResponseToFacetQueryResult ( org.springframework.data.solr.core.FacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ) ; Assert . assertTrue ( java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Integer> < java.lang.String , java.lang.Integer > java.util.Map<java.lang.String,java.lang.Integer> = new java.util.LinkedHashMap<java.lang.String,java.lang.Integer> <> ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Integer> . java.lang.Integer ( STRING , NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetQuery ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.lang.Integer> ) ; java.util.List<org.springframework.data.solr.core.FacetQueryEntry> < FacetQueryEntry > java.util.List<org.springframework.data.solr.core.FacetQueryEntry> = ResultHelper . convertFacetQueryResponseToFacetQueryResult ( org.springframework.data.solr.core.FacetQuery ( new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) , new SimpleQuery ( new SimpleStringCriteria ( STRING ) ) ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetQueryEntry> ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getKey ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getQuery ( ) . getCriteria ( ) . toString ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getKey ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetQueryEntry> . get ( NUMBER ) . getQuery ( ) . getCriteria ( ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) . thenReturn ( java.util.Collections .< java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ( ) ) ; Assert . assertTrue ( ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) ) ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) . thenReturn ( null ) ; Assert . assertTrue ( ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) ) ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertTrue ( ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( null , new SolrResultPage <> ( java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) ) ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> = new java.util.LinkedHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ) ; org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField = new org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField ( STRING ) ; java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> < HighlightEntry < org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField > > java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> = ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , new SolrResultPage <> ( java.util.Collections . java.util.List<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField> ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField ) ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getEntity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getHighlights ( ) . size ( ) ) ; for ( HighlightEntry < org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField > org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField> : java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> ) { Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField , org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField> . getEntity ( ) ) ; for ( Highlight org.springframework.data.solr.core.Highlight : org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField> . getHighlights ( ) ) { Assert . assertTrue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( org.springframework.data.solr.core.Highlight . getField ( ) . getName ( ) ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.data.solr.core.Highlight . getField ( ) . getName ( ) ) , org.springframework.data.solr.core.Highlight . getSnipplets ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> = new java.util.LinkedHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ) ; org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField = new org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField ( STRING ) ; org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField = new org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField ( STRING ) ; java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> < HighlightEntry < org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField > > java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> = ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , new SolrResultPage <> ( java.util.Arrays . java.util.List<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField> ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField , org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField ) ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getEntity ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getEntity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getHighlights ( ) . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithIdNamedField>> . get ( NUMBER ) . getHighlights ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> < java.lang.String , java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> = new java.util.LinkedHashMap<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING , java.util.Collections . java.util.List<java.lang.String> ( STRING ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( STRING , java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getHighlighting ( ) ) . thenReturn ( java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.util.List<java.lang.String>>> ) ; org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField = new org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField ( STRING ) ; java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> < HighlightEntry < org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField > > java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> = ResultHelper . convertAndAddHighlightQueryResponseToResultPage ( org.springframework.data.solr.core.QueryResponse , new SolrResultPage <> ( java.util.Collections . java.util.List<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField> ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField ) ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> . size ( ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> . get ( NUMBER ) . getEntity ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> . get ( NUMBER ) . getHighlights ( ) . size ( ) ) ; for ( HighlightEntry < org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField > org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField> : java.util.List<org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField>> ) { Assert . assertEquals ( org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField , org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField> . getEntity ( ) ) ; for ( Highlight org.springframework.data.solr.core.Highlight : org.springframework.data.solr.core.HighlightEntry<org.springframework.data.solr.core.ResultHelperTests.SolrBeanWithAnnoteatedIdNamedField> . getHighlights ( ) ) { Assert . assertTrue ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . boolean ( org.springframework.data.solr.core.Highlight . getField ( ) . getName ( ) ) ) ; Assert . assertEquals ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( org.springframework.data.solr.core.Highlight . getField ( ) . getName ( ) ) , org.springframework.data.solr.core.Highlight . getSnipplets ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( this . org.springframework.data.solr.core.FacetQuery ( STRING ) , null ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( null , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) , null ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( null ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( java.util.Collections .< FacetField > java.util.List<org.springframework.data.solr.core.FacetField> ( ) ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( org.springframework.data.solr.core.FacetQuery ( STRING ) , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertTrue ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { NamedList < java.util.List<org.apache.solr.client.solrj.response.PivotField> < org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache > > org.springframework.data.solr.core.NamedList<java.util.List<org.apache.solr.client.solrj.response.PivotField>> = new NamedList <> ( ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> < org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.solr.client.solrj.response.PivotField> = new java.util.ArrayList<org.apache.solr.client.solrj.response.PivotField> <> ( ) ; { java.util.List<org.apache.solr.client.solrj.response.PivotField> < org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.solr.client.solrj.response.PivotField> = new java.util.ArrayList<org.apache.solr.client.solrj.response.PivotField> <> ( ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> . add ( new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( STRING , STRING , NUMBER , null , null , null , null ) ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> . add ( new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( STRING , STRING , NUMBER , null , null , null , null ) ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> . add ( new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( STRING , STRING , NUMBER , java.util.List<org.apache.solr.client.solrj.response.PivotField> , null , null , null ) ) ; } { java.util.List<org.apache.solr.client.solrj.response.PivotField> < org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache > java.util.List<org.apache.solr.client.solrj.response.PivotField> = new java.util.ArrayList<org.apache.solr.client.solrj.response.PivotField> <> ( ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> . add ( new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( STRING , STRING , NUMBER , null , null , null , null ) ) ; java.util.List<org.apache.solr.client.solrj.response.PivotField> . add ( new org . org.apache . org.apache . org.apache . org.apache . org.apache . org.apache ( STRING , STRING , NUMBER , java.util.List<org.apache.solr.client.solrj.response.PivotField> , null , null , null ) ) ; } org.springframework.data.solr.core.NamedList<java.util.List<org.apache.solr.client.solrj.response.PivotField>> . add ( STRING , java.util.List<org.apache.solr.client.solrj.response.PivotField> ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetPivot ( ) ) . thenReturn ( org.springframework.data.solr.core.NamedList<java.util.List<org.apache.solr.client.solrj.response.PivotField>> ) ; java.util.Map<org.springframework.data.solr.core.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> < PivotField , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > > java.util.Map<org.springframework.data.solr.core.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPivotMap ( org.springframework.data.solr.core.FacetQuery ( STRING , STRING ) , org.springframework.data.solr.core.QueryResponse ) ; java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> = java.util.Map<org.springframework.data.solr.core.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> . get ( new SimplePivotField ( STRING , STRING ) ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.PivotField,java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry>> ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . size ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) . size ( ) ) ; { java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> = java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ) ; } { java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> < FacetPivotFieldEntry > java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> = java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) ) ; } Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.FacetPivotFieldEntry> . get ( NUMBER ) . getPivot ( ) . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsResponse org.springframework.data.solr.core.TermsResponse = new TermsResponse ( new NamedList <> ( ) ) ; org.springframework.data.solr.core.TermsResponse . getTermMap ( ) . put ( STRING , java.util.Arrays . java.util.List ( new Term ( STRING , NUMBER ) , new Term ( STRING , NUMBER ) ) ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) ) . thenReturn ( org.springframework.data.solr.core.TermsResponse ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> < java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> = ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . size ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsResponse org.springframework.data.solr.core.TermsResponse = new TermsResponse ( new NamedList <> ( ) ) ; org.springframework.data.solr.core.TermsResponse . getTermMap ( ) . put ( STRING , java.util.Arrays . java.util.List ( new Term ( STRING , NUMBER ) , new Term ( STRING , NUMBER ) ) ) ; org.springframework.data.solr.core.TermsResponse . getTermMap ( ) . put ( STRING , java.util.Arrays . java.util.List ( new Term ( STRING , NUMBER ) , new Term ( STRING , NUMBER ) ) ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) ) . thenReturn ( org.springframework.data.solr.core.TermsResponse ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> < java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> = ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . size ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; Assert . assertEquals ( STRING , java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> . get ( STRING ) . get ( NUMBER ) . getField ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertThat ( ResultHelper . convertTermsQueryResponseToTermsMap ( null ) , IsEqual . equalTo ( java.util.Collections .< java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) ) . thenReturn ( null ) ; Assert . assertThat ( ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) , IsEqual . equalTo ( java.util.Collections .< java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { TermsResponse org.springframework.data.solr.core.TermsResponse = new TermsResponse ( new NamedList <> ( ) ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getTermsResponse ( ) ) . thenReturn ( org.springframework.data.solr.core.TermsResponse ) ; Assert . assertThat ( ResultHelper . convertTermsQueryResponseToTermsMap ( org.springframework.data.solr.core.QueryResponse ) , IsEqual . equalTo ( java.util.Collections .< java.lang.String , java.util.List<org.springframework.data.solr.core.TermsFieldEntry> < TermsFieldEntry > > java.util.Map<java.lang.String,java.util.List<org.springframework.data.solr.core.TermsFieldEntry>> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GroupResponse org.springframework.data.solr.core.GroupResponse = Mockito . mock ( GroupResponse .class ) ; Query org.springframework.data.solr.core.Query = Mockito . mock ( Query .class ) ; SolrTemplate org.springframework.data.solr.core.SolrTemplate = Mockito . mock ( SolrTemplate .class ) ; GroupCommand org.springframework.data.solr.core.GroupCommand = Mockito . mock ( GroupCommand .class ) ; Group org.springframework.data.solr.core.Group = Mockito . mock ( Group .class ) ; SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = Mockito . mock ( SolrDocumentList .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getGroupResponse ( ) ) . thenReturn ( org.springframework.data.solr.core.GroupResponse ) ; Mockito . when ( org.springframework.data.solr.core.GroupResponse . getValues ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.solr.core.GroupCommand ) ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getValues ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.solr.core.Group ) ) ; Mockito . when ( org.springframework.data.solr.core.Group . getResult ( ) ) . thenReturn ( org.springframework.data.solr.core.SolrDocumentList ) ; Mockito . when ( org.springframework.data.solr.core.Group . getGroupValue ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) ) . thenReturn ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.SolrTemplate . convertSolrDocumentListToBeans ( org.springframework.data.solr.core.SolrDocumentList , java.lang.Object .class ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getMatches ( ) ) . thenReturn ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getName ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getNGroups ( ) ) . thenReturn ( NUMBER ) ; GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; org.springframework.data.solr.core.GroupOptions . setLimit ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.Query . getPageRequest ( ) ) . thenReturn ( new PageRequest ( NUMBER , NUMBER ) ) ; Mockito . when ( org.springframework.data.solr.core.Query . getGroupOptions ( ) ) . thenReturn ( org.springframework.data.solr.core.GroupOptions ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> = ResultHelper . convertGroupQueryResponseToGroupResultMap ( org.springframework.data.solr.core.Query , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.solr.core.QueryResponse , org.springframework.data.solr.core.SolrTemplate , java.lang.Object .class ) ; Assert . assertNotNull ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . size ( ) ) ; GroupResult < java.lang.Object > org.springframework.data.solr.core.GroupResult<java.lang.Object> = java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . get ( STRING ) ; Assert . assertEquals ( org.springframework.data.solr.core.GroupResult<java.lang.Object> , java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . get ( java.lang.Object ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getMatches ( ) ) ; Assert . assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getGroupsCount ( ) ) ; Page < GroupEntry < java.lang.Object > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> = org.springframework.data.solr.core.GroupResult<java.lang.Object> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getTotalElements ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getTotalPages ( ) ) ; Assert . assertEquals ( true , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . hasNext ( ) ) ; java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> < GroupEntry < java.lang.Object > > java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getContent ( ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . size ( ) ) ; GroupEntry < java.lang.Object > org.springframework.data.solr.core.GroupEntry<java.lang.Object> = java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . get ( NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.GroupEntry<java.lang.Object> . getGroupValue ( ) ) ; Page < java.lang.Object > org.springframework.data.solr.core.Page<java.lang.Object> = org.springframework.data.solr.core.GroupEntry<java.lang.Object> . getResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<java.lang.Object> . getTotalElements ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<java.lang.Object> . getTotalPages ( ) ) ; Assert . assertEquals ( true , org.springframework.data.solr.core.Page<java.lang.Object> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GroupResponse org.springframework.data.solr.core.GroupResponse = Mockito . mock ( GroupResponse .class ) ; Query org.springframework.data.solr.core.Query = Mockito . mock ( Query .class ) ; SolrTemplate org.springframework.data.solr.core.SolrTemplate = Mockito . mock ( SolrTemplate .class ) ; GroupCommand org.springframework.data.solr.core.GroupCommand = Mockito . mock ( GroupCommand .class ) ; Group org.springframework.data.solr.core.Group = Mockito . mock ( Group .class ) ; SolrDocumentList org.springframework.data.solr.core.SolrDocumentList = Mockito . mock ( SolrDocumentList .class ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.Collections . java.util.List<java.lang.Object> ( new java.lang.Object ( ) ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getGroupResponse ( ) ) . thenReturn ( org.springframework.data.solr.core.GroupResponse ) ; Mockito . when ( org.springframework.data.solr.core.GroupResponse . getValues ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.solr.core.GroupCommand ) ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getValues ( ) ) . thenReturn ( java.util.Collections . java.util.List ( org.springframework.data.solr.core.Group ) ) ; Mockito . when ( org.springframework.data.solr.core.Group . getResult ( ) ) . thenReturn ( org.springframework.data.solr.core.SolrDocumentList ) ; Mockito . when ( org.springframework.data.solr.core.Group . getGroupValue ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.data.solr.core.SolrDocumentList . getNumFound ( ) ) . thenReturn ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.SolrTemplate . convertSolrDocumentListToBeans ( org.springframework.data.solr.core.SolrDocumentList , java.lang.Object .class ) ) . thenReturn ( java.util.List<java.lang.Object> ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getMatches ( ) ) . thenReturn ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getName ( ) ) . thenReturn ( STRING ) ; Mockito . when ( org.springframework.data.solr.core.GroupCommand . getNGroups ( ) ) . thenReturn ( null ) ; GroupOptions org.springframework.data.solr.core.GroupOptions = new GroupOptions ( ) ; org.springframework.data.solr.core.GroupOptions . setLimit ( NUMBER ) ; Mockito . when ( org.springframework.data.solr.core.Query . getPageRequest ( ) ) . thenReturn ( new PageRequest ( NUMBER , NUMBER ) ) ; Mockito . when ( org.springframework.data.solr.core.Query . getGroupOptions ( ) ) . thenReturn ( org.springframework.data.solr.core.GroupOptions ) ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Object ) ; java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> < java.lang.Object , GroupResult < java.lang.Object > > java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> = ResultHelper . convertGroupQueryResponseToGroupResultMap ( org.springframework.data.solr.core.Query , java.util.Map<java.lang.String,java.lang.Object> , org.springframework.data.solr.core.QueryResponse , org.springframework.data.solr.core.SolrTemplate , java.lang.Object .class ) ; Assert . assertNotNull ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . size ( ) ) ; GroupResult < java.lang.Object > org.springframework.data.solr.core.GroupResult<java.lang.Object> = java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . get ( STRING ) ; Assert . assertEquals ( java.util.Map<java.lang.Object,org.springframework.data.solr.core.GroupResult<java.lang.Object>> . get ( java.lang.Object ) , org.springframework.data.solr.core.GroupResult<java.lang.Object> ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getName ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getMatches ( ) ) ; Assert . assertEquals ( null , org.springframework.data.solr.core.GroupResult<java.lang.Object> . getGroupsCount ( ) ) ; Page < GroupEntry < java.lang.Object > > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> = org.springframework.data.solr.core.GroupResult<java.lang.Object> . getGroupEntries ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getTotalElements ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getTotalPages ( ) ) ; Assert . assertEquals ( false , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . hasNext ( ) ) ; java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> < GroupEntry < java.lang.Object > > java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . getContent ( ) ; Assert . assertNotNull ( java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . size ( ) ) ; GroupEntry < java.lang.Object > org.springframework.data.solr.core.GroupEntry<java.lang.Object> = java.util.List<org.springframework.data.solr.core.GroupEntry<java.lang.Object>> . get ( NUMBER ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.GroupEntry<java.lang.Object> . getGroupValue ( ) ) ; Page < java.lang.Object > org.springframework.data.solr.core.Page<java.lang.Object> = org.springframework.data.solr.core.GroupEntry<java.lang.Object> . getResult ( ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<java.lang.Object> . getTotalElements ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<java.lang.Object> . getTotalPages ( ) ) ; Assert . assertEquals ( true , org.springframework.data.solr.core.Page<java.lang.Object> . hasNext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> < java.lang.String , FieldStatsInfo > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> = new java.util.HashMap<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> <> ( ) ; NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = org.springframework.data.solr.core.NamedList<java.lang.Object> ( STRING , STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . put ( STRING , new FieldStatsInfo ( org.springframework.data.solr.core.NamedList<java.lang.Object> , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> ) ; FieldStatsResult org.springframework.data.solr.core.FieldStatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . get ( STRING ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMin ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMax ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getSum ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getMean ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getCount ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getMissing ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getStddev ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getSumOfSquares ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( null ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> , IsNull . notNullValue ( ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . entrySet ( ) , IsEmptyIterable . emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( new java.util.HashMap <> ( ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> , IsNull . notNullValue ( ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . entrySet ( ) , IsEmptyIterable . emptyIterable ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( java.util.Collections .< java.lang.String , FieldStatsInfo > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> ( STRING , null ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> , IsNull . notNullValue ( ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . keySet ( ) , IsIterableContainingInOrder . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( java.util.Collections .< java.lang.String , FieldStatsInfo > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> ( STRING , new FieldStatsInfo ( new NamedList <> ( ) , STRING ) ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> , IsNull . notNullValue ( ) ) ; Assert . assertThat ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . keySet ( ) , IsIterableContainingInOrder . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> < java.lang.String , FieldStatsInfo > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> = new java.util.HashMap<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> <> ( ) ; NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = new NamedList <> ( ) ; NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = new NamedList <> ( ) ; NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = org.springframework.data.solr.core.NamedList<java.lang.Object> ( STRING , STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , org.springframework.data.solr.core.NamedList<java.lang.Object> ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , org.springframework.data.solr.core.NamedList<java.lang.Object> ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , org.springframework.data.solr.core.NamedList<java.lang.Object> ( STRING , STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , org.springframework.data.solr.core.NamedList<java.lang.Object> ( STRING , STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> . put ( STRING , new FieldStatsInfo ( org.springframework.data.solr.core.NamedList<java.lang.Object> , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> < java.lang.String , FieldStatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> = ResultHelper . convertFieldStatsInfoToFieldStatsResultMap ( java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsInfo> ) ; FieldStatsResult org.springframework.data.solr.core.FieldStatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.FieldStatsResult> . get ( STRING ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMin ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.FieldStatsResult . getMax ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getSum ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.FieldStatsResult . getMean ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getCount ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getMissing ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.FieldStatsResult . getStddev ( ) ) ; java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> < java.lang.String , java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > > java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> = org.springframework.data.solr.core.FieldStatsResult . getFacetStatsResults ( ) ; Assert . assertEquals ( NUMBER , java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> . size ( ) ) ; java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> < java.lang.String , StatsResult > java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> = java.util.Map<java.lang.String,java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult>> . get ( STRING ) ; Assert . assertNotNull ( java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> ) ; StatsResult org.springframework.data.solr.core.StatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . get ( STRING ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.StatsResult . getMin ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.StatsResult . getMax ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getSum ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMean ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getCount ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getMissing ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getStddev ( ) ) ; StatsResult org.springframework.data.solr.core.StatsResult = java.util.Map<java.lang.String,org.springframework.data.solr.core.StatsResult> . get ( STRING ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.StatsResult . getMin ( ) ) ; Assert . assertEquals ( STRING , org.springframework.data.solr.core.StatsResult . getMax ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getSum ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.StatsResult . getMean ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getCount ( ) ) ; Assert . assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getMissing ( ) ) ; Assert . assertEquals ( java.lang.Double . java.lang.Double ( NUMBER ) , org.springframework.data.solr.core.StatsResult . getStddev ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleFacetQuery org.springframework.data.solr.core.SimpleFacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( new FacetOptions ( STRING ) ) ; SimpleFacetQuery org.springframework.data.solr.core.SimpleFacetQuery = new SimpleFacetQuery ( ) ; Assert . assertTrue ( ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( org.springframework.data.solr.core.SimpleFacetQuery , null ) . isEmpty ( ) ) ; Assert . assertTrue ( ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( org.springframework.data.solr.core.SimpleFacetQuery , org.springframework.data.solr.core.QueryResponse ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleFacetQuery org.springframework.data.solr.core.SimpleFacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) . setFacetOptions ( new FacetOptions ( STRING ) ) ; RangeFacet . RangeFacet RangeFacet.Numeric = new RangeFacet . RangeFacet ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; RangeFacet.Numeric . addCount ( STRING , NUMBER ) ; RangeFacet.Numeric . addCount ( STRING , NUMBER ) ; RangeFacet . RangeFacet RangeFacet.Numeric = new RangeFacet . RangeFacet ( STRING , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.data.solr.core.RangeFacet> < RangeFacet > java.util.List<org.springframework.data.solr.core.RangeFacet> = new java.util.ArrayList<org.springframework.data.solr.core.RangeFacet> <> ( ) ; java.util.List<org.springframework.data.solr.core.RangeFacet> . add ( RangeFacet.Numeric ) ; java.util.List<org.springframework.data.solr.core.RangeFacet> . add ( RangeFacet.Numeric ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetRanges ( ) ) . thenReturn ( java.util.List<org.springframework.data.solr.core.RangeFacet> ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToRangeFacetPageMap ( org.springframework.data.solr.core.SimpleFacetQuery , org.springframework.data.solr.core.QueryResponse ) ; Page < FacetFieldEntry > org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> = java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . get ( new SimpleField ( STRING ) ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . size ( ) ) ; Assert . assertEquals ( NUMBER , org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getTotalElements ( ) ) ; java.util.List<org.springframework.data.solr.core.FacetFieldEntry> < FacetFieldEntry > java.util.List<org.springframework.data.solr.core.FacetFieldEntry> = org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry> . getContent ( ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . size ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; Assert . assertEquals ( NUMBER , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValueCount ( ) ) ; Assert . assertEquals ( STRING , java.util.List<org.springframework.data.solr.core.FacetFieldEntry> . get ( NUMBER ) . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.solr.core.FacetField> < FacetField > java.util.List<org.springframework.data.solr.core.FacetField> = new java.util.ArrayList<org.springframework.data.solr.core.FacetField> <> ( NUMBER ) ; FacetField org.springframework.data.solr.core.FacetField = org.springframework.data.solr.core.FacetField ( STRING , NUMBER , NUMBER ) ; java.util.List<org.springframework.data.solr.core.FacetField> . add ( org.springframework.data.solr.core.FacetField ) ; Mockito . when ( org.springframework.data.solr.core.QueryResponse . getFacetFields ( ) ) . thenReturn ( java.util.List<org.springframework.data.solr.core.FacetField> ) ; FacetQuery org.springframework.data.solr.core.FacetQuery = org.springframework.data.solr.core.FacetQuery ( STRING ) ; org.springframework.data.solr.core.FacetQuery . getFacetOptions ( ) . setFacetLimit ( - NUMBER ) ; java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> < Field , Page < FacetFieldEntry > > java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> = ResultHelper . convertFacetQueryResponseToFacetPageMap ( org.springframework.data.solr.core.FacetQuery , org.springframework.data.solr.core.QueryResponse ) ; Assert . assertNotNull ( java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> ) ; Assert . assertEquals ( NUMBER , java.util.Map<org.springframework.data.solr.core.Field,org.springframework.data.solr.core.Page<org.springframework.data.solr.core.FacetFieldEntry>> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.NamedList<java.lang.Object> < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , java.lang.Double java.lang.Double , java.lang.Long java.lang.Long , java.lang.Long java.lang.Long , java.lang.Object java.lang.Object , java.lang.Double java.lang.Double , java.lang.Double java.lang.Double ) { NamedList < java.lang.Object > org.springframework.data.solr.core.NamedList<java.lang.Object> = new NamedList <> ( ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Object ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Object ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Double ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Long ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Long ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Object ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Double ) ; org.springframework.data.solr.core.NamedList<java.lang.Object> . add ( STRING , java.lang.Double ) ; return org.springframework.data.solr.core.NamedList<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.FacetQuery org.springframework.data.solr.core.FacetQuery ( SolrDataQuery ... org.springframework.data.solr.core.SolrDataQuery[] ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new SimpleStringCriteria ( STRING ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( new FacetOptions ( org.springframework.data.solr.core.SolrDataQuery[] ) ) ; return org.springframework.data.solr.core.FacetQuery ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.FacetQuery org.springframework.data.solr.core.FacetQuery ( java.lang.String ... java.lang.String[] ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( java.lang.String[] [ NUMBER ] ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( new FacetOptions ( java.lang.String[] ) ) ; return org.springframework.data.solr.core.FacetQuery ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.FacetQuery org.springframework.data.solr.core.FacetQuery ( java.lang.String ... java.lang.String[] ) { FacetQuery org.springframework.data.solr.core.FacetQuery = new SimpleFacetQuery ( new Criteria ( STRING ) ) ; org.springframework.data.solr.core.FacetQuery . setFacetOptions ( new FacetOptions ( ) . addFacetOnPivot ( java.lang.String[] ) ) ; return org.springframework.data.solr.core.FacetQuery ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.solr.core.FacetField org.springframework.data.solr.core.FacetField ( java.lang.String java.lang.String , long ... long[] ) { FacetField org.springframework.data.solr.core.FacetField = new FacetField ( java.lang.String ) ; for ( int int = NUMBER ; int <= long[] . int ; int ++ ) { org.springframework.data.solr.core.FacetField . add ( STRING + int , long[] [ int - NUMBER ] ) ; } return org.springframework.data.solr.core.FacetField ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
