<METHOD_START> protected < K , V > org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V> < K , V > org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V> ( ) { return new SnapshotMetadata < K , V > ( FileSystemUtils . WORKING_DIRECTORY , null , SnapshotOptions . SnapshotFormat . GEMFIRE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent = new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this ) ; assertThat ( ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest ) org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSource ( ) , is ( equalTo ( this ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getRegionPath ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) . length , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isRegionSnapshotEvent ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata org.springframework.data.gemfire.snapshot.event.SnapshotMetadata = org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent = new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata ) ; assertThat ( ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest ) org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSource ( ) , is ( equalTo ( this ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getRegionPath ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) [ NUMBER ] , is ( sameInstance ( org.springframework.data.gemfire.snapshot.event.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isRegionSnapshotEvent ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent = new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) ; assertThat ( ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest ) org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSource ( ) , is ( equalTo ( this ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getRegionPath ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) . length , is ( equalTo ( NUMBER ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isRegionSnapshotEvent ( ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotMetadata org.springframework.data.gemfire.snapshot.event.SnapshotMetadata = org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotMetadata org.springframework.data.gemfire.snapshot.event.SnapshotMetadata = org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<java.lang.Object,java.lang.Object> ( ) ; SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent = new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata ) ; assertThat ( ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest ) org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSource ( ) , is ( equalTo ( this ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getRegionPath ( ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.event.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getSnapshotMetadata ( ) [ NUMBER ] , is ( equalTo ( org.springframework.data.gemfire.snapshot.event.SnapshotMetadata ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isCacheSnapshotEvent ( ) , is ( true ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . isRegionSnapshotEvent ( ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this ) . matches ( ( Region ) null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.snapshot.event.Region = mock ( Region .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.event.Region . getFullPath ( ) ) . thenReturn ( STRING ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( org.springframework.data.gemfire.snapshot.event.Region ) , is ( false ) ) ; verify ( org.springframework.data.gemfire.snapshot.event.Region , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Region org.springframework.data.gemfire.snapshot.event.Region = mock ( Region .class , STRING ) ; when ( org.springframework.data.gemfire.snapshot.event.Region . getFullPath ( ) ) . thenReturn ( STRING ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( org.springframework.data.gemfire.snapshot.event.Region ) , is ( true ) ) ; verify ( org.springframework.data.gemfire.snapshot.event.Region , times ( NUMBER ) ) . getFullPath ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SnapshotApplicationEvent org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent = new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . getRegionPath ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEvent . matches ( ( java.lang.String ) null ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( STRING ) , is ( true ) ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( STRING ) , is ( true ) ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( STRING ) , is ( true ) ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( STRING ) , is ( true ) ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , STRING ) . matches ( STRING ) , is ( true ) ) ; assertThat ( new org.springframework.data.gemfire.snapshot.event.SnapshotApplicationEventTest.TestSnapshotApplicationEvent ( this , ( java.lang.String ) null ) . matches ( ( java.lang.String ) null ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V> < K , V > ... org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V>[] ) { super( java.lang.Object , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V>[] ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V> < K , V > ... org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V>[] ) { super( java.lang.Object , java.lang.String , org.springframework.data.gemfire.snapshot.event.SnapshotMetadata<K,V>[] ); }  <METHOD_END>
