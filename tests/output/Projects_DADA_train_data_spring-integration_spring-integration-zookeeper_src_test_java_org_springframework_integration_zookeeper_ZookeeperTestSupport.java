<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { org.springframework.integration.zookeeper.TestingServer = new TestingServer ( true ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) java.lang.Exception { try { org.springframework.integration.zookeeper.TestingServer . stop ( ) ; } catch ( java.io.IOException java.io.IOException ) { org.springframework.integration.zookeeper.Log . warn ( STRING , java.io.IOException ) ; } org.springframework.integration.zookeeper.TestingServer . getTempDirectory ( ) . delete ( ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.integration.zookeeper.CuratorFramework = org.springframework.integration.zookeeper.CuratorFramework ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { CloseableUtils . closeQuietly ( this . org.springframework.integration.zookeeper.CuratorFramework ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.integration.zookeeper.CuratorFramework org.springframework.integration.zookeeper.CuratorFramework ( ) java.lang.InterruptedException { CuratorFramework org.springframework.integration.zookeeper.CuratorFramework = CuratorFrameworkFactory . newClient ( org.springframework.integration.zookeeper.TestingServer . getConnectString ( ) , new BoundedExponentialBackoffRetry ( NUMBER , NUMBER , NUMBER ) ) ; org.springframework.integration.zookeeper.CuratorFramework . start ( ) ; return org.springframework.integration.zookeeper.CuratorFramework ; }  <METHOD_END>
<METHOD_START> protected void void ( CuratorFramework org.springframework.integration.zookeeper.CuratorFramework ) { try { CloseableUtils . closeQuietly ( org.springframework.integration.zookeeper.CuratorFramework ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.integration.zookeeper.Log . warn ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
