<METHOD_START> public void ( ) { this . java.util.List<org.springframework.http.converter.MediaType> . add ( MediaType . APPLICATION_FORM_URLENCODED ) ; this . java.util.List<org.springframework.http.converter.MediaType> . add ( MediaType . MULTIPART_FORM_DATA ) ; this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; StringHttpMessageConverter org.springframework.http.converter.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.http.converter.StringHttpMessageConverter . setWriteAcceptCharset ( false ) ; this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> . add ( org.springframework.http.converter.StringHttpMessageConverter ) ; this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> ) { this . java.util.List<org.springframework.http.converter.MediaType> = java.util.List<org.springframework.http.converter.MediaType> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.http.converter.MediaType> < MediaType > java.util.List<org.springframework.http.converter.MediaType> ( ) { return java.util.Collections . java.util.List<org.springframework.http.converter.MediaType> ( this . java.util.List<org.springframework.http.converter.MediaType> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> ) { Assert . notEmpty ( java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> , STRING ) ; this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> = java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( HttpMessageConverter < ? > org.springframework.http.converter.HttpMessageConverter<?> ) { Assert . notNull ( org.springframework.http.converter.HttpMessageConverter<> , STRING ) ; this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> . add ( org.springframework.http.converter.HttpMessageConverter<> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { if ( java.nio.charset.Charset != this . java.nio.charset.Charset ) { this . java.nio.charset.Charset = ( java.nio.charset.Charset != null ? java.nio.charset.Charset : java.nio.charset.Charset ) ; void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( HttpMessageConverter < ? > org.springframework.http.converter.HttpMessageConverter<?> : this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> ) { if ( org.springframework.http.converter.HttpMessageConverter<> instanceof AbstractHttpMessageConverter ) { AbstractHttpMessageConverter < ? > org.springframework.http.converter.AbstractHttpMessageConverter<?> = ( AbstractHttpMessageConverter < ? > ) org.springframework.http.converter.HttpMessageConverter<> ; if ( org.springframework.http.converter.AbstractHttpMessageConverter<> . getDefaultCharset ( ) != null ) { org.springframework.http.converter.AbstractHttpMessageConverter<> . setDefaultCharset ( this . java.nio.charset.Charset ) ; } } } }  <METHOD_END>
<METHOD_START> public void void ( java.nio.charset.Charset java.nio.charset.Charset ) { this . java.nio.charset.Charset = java.nio.charset.Charset ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { if ( ! MultiValueMap .class . boolean ( java.lang.Class<> ) ) { return false ; } if ( org.springframework.http.converter.MediaType == null ) { return true ; } for ( MediaType org.springframework.http.converter.MediaType : java.util.List<org.springframework.http.converter.MediaType> ( ) ) { if ( ! org.springframework.http.converter.MediaType . equals ( MediaType . MULTIPART_FORM_DATA ) && org.springframework.http.converter.MediaType . includes ( org.springframework.http.converter.MediaType ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , MediaType org.springframework.http.converter.MediaType ) { if ( ! MultiValueMap .class . boolean ( java.lang.Class<> ) ) { return false ; } if ( org.springframework.http.converter.MediaType == null || MediaType . ALL . equals ( org.springframework.http.converter.MediaType ) ) { return true ; } for ( MediaType org.springframework.http.converter.MediaType : java.util.List<org.springframework.http.converter.MediaType> ( ) ) { if ( org.springframework.http.converter.MediaType . isCompatibleWith ( org.springframework.http.converter.MediaType ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> ( java.lang.Class<? extends org.springframework.http.converter.MultiValueMap<java.lang.String,?>> < ? extends MultiValueMap < java.lang.String , ? > > java.lang.Class<? extends org.springframework.http.converter.MultiValueMap<java.lang.String,?>> , HttpInputMessage org.springframework.http.converter.HttpInputMessage ) throws java.io.IOException , org.springframework.http.converter.HttpMessageNotReadableException { MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.HttpInputMessage . getHeaders ( ) . getContentType ( ) ; java.nio.charset.Charset java.nio.charset.Charset = ( org.springframework.http.converter.MediaType . getCharset ( ) != null ? org.springframework.http.converter.MediaType . getCharset ( ) : this . java.nio.charset.Charset ) ; java.lang.String java.lang.String = StreamUtils . copyToString ( org.springframework.http.converter.HttpInputMessage . getBody ( ) , java.nio.charset.Charset ) ; java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String , STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( java.lang.String[] . int ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { int int = java.lang.String . int ( '=' ) ; if ( int == - NUMBER ) { org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . add ( java.net.URLDecoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) , null ) ; } else { java.lang.String java.lang.String = java.net.URLDecoder . java.lang.String ( java.lang.String . java.lang.String ( NUMBER , int ) , java.nio.charset.Charset . java.lang.String ( ) ) ; java.lang.String java.lang.String = java.net.URLDecoder . java.lang.String ( java.lang.String . java.lang.String ( int + NUMBER ) , java.nio.charset.Charset . java.lang.String ( ) ) ; org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . add ( java.lang.String , java.lang.String ) ; } } return org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MultiValueMap < java.lang.String , ? > org.springframework.http.converter.MultiValueMap<java.lang.String,?> , MediaType org.springframework.http.converter.MediaType , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage )			throws java.io.IOException , org.springframework.http.converter.HttpMessageNotWritableException { if ( ! boolean ( org.springframework.http.converter.MultiValueMap<java.lang.String,> , org.springframework.http.converter.MediaType ) ) { void ( ( MultiValueMap < java.lang.String , java.lang.String > ) org.springframework.http.converter.MultiValueMap<java.lang.String,> , org.springframework.http.converter.MediaType , org.springframework.http.converter.HttpOutputMessage ) ; } else { void ( ( MultiValueMap < java.lang.String , java.lang.Object > ) org.springframework.http.converter.MultiValueMap<java.lang.String,> , org.springframework.http.converter.HttpOutputMessage ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( MultiValueMap < java.lang.String , ? > org.springframework.http.converter.MultiValueMap<java.lang.String,?> , MediaType org.springframework.http.converter.MediaType ) { if ( org.springframework.http.converter.MediaType != null ) { return MediaType . MULTIPART_FORM_DATA . includes ( org.springframework.http.converter.MediaType ) ; } for ( java.lang.String java.lang.String : org.springframework.http.converter.MultiValueMap<java.lang.String,> . keySet ( ) ) { for ( java.lang.Object java.lang.Object : org.springframework.http.converter.MultiValueMap<java.lang.String,> . get ( java.lang.String ) ) { if ( java.lang.Object != null && ! ( java.lang.Object instanceof java.lang.String ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> , MediaType org.springframework.http.converter.MediaType , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { java.nio.charset.Charset java.nio.charset.Charset ; if ( org.springframework.http.converter.MediaType != null ) { org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . setContentType ( org.springframework.http.converter.MediaType ) ; java.nio.charset.Charset = ( org.springframework.http.converter.MediaType . getCharset ( ) != null ? org.springframework.http.converter.MediaType . getCharset ( ) : this . java.nio.charset.Charset ) ; } else { org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . setContentType ( MediaType . APPLICATION_FORM_URLENCODED ) ; java.nio.charset.Charset = this . java.nio.charset.Charset ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . keySet ( ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; for ( java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.String> . get ( java.lang.String ) . iterator ( ) ; java.util.Iterator<java.lang.String> . boolean ( ) ;) { java.lang.String java.lang.String = java.util.Iterator<java.lang.String> . java.lang.String ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( '=' ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.net.URLEncoder . java.lang.String ( java.lang.String , java.nio.charset.Charset . java.lang.String ( ) ) ) ; if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } } if ( java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( '&' ) ; } } final byte [] byte[] = java.lang.StringBuilder . java.lang.String ( ) . byte[] ( java.nio.charset.Charset ) ; org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . setContentLength ( byte[] . int ) ; if ( org.springframework.http.converter.HttpOutputMessage instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.converter.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.converter.HttpOutputMessage ; org.springframework.http.converter.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; } } ) ; } else { StreamUtils . copy ( byte[] , org.springframework.http.converter.HttpOutputMessage . getBody ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { StreamUtils . copy ( byte[] , java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> private void void ( final MultiValueMap < java.lang.String , java.lang.Object > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { final byte [] byte[] = byte[] ( ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , new java.lang.String ( byte[] , STRING ) ) ; MediaType org.springframework.http.converter.MediaType = new MediaType ( MediaType . MULTIPART_FORM_DATA , java.util.Map<java.lang.String,java.lang.String> ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) ; org.springframework.http.converter.HttpHeaders . setContentType ( org.springframework.http.converter.MediaType ) ; if ( org.springframework.http.converter.HttpOutputMessage instanceof StreamingHttpOutputMessage ) { StreamingHttpOutputMessage org.springframework.http.converter.StreamingHttpOutputMessage = ( StreamingHttpOutputMessage ) org.springframework.http.converter.HttpOutputMessage ; org.springframework.http.converter.StreamingHttpOutputMessage . setBody ( new StreamingHttpOutputMessage . StreamingHttpOutputMessage ( ) { @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( java.io.OutputStream , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , byte[] ) ; void ( java.io.OutputStream , byte[] ) ; } } ) ; } else { void ( org.springframework.http.converter.HttpOutputMessage . getBody ( ) , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , byte[] ) ; void ( org.springframework.http.converter.HttpOutputMessage . getBody ( ) , byte[] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { void ( java.io.OutputStream , org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , byte[] ) ; void ( java.io.OutputStream , byte[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.OutputStream java.io.OutputStream , MultiValueMap < java.lang.String , java.lang.Object > org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> , byte [] byte[] ) throws java.io.IOException { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> < java.lang.String , java.util.List<java.lang.Object> < java.lang.Object > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> : org.springframework.http.converter.MultiValueMap<java.lang.String,java.lang.Object> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> . java.lang.String ( ) ; for ( java.lang.Object java.lang.Object : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( ) ) { if ( java.lang.Object != null ) { void ( java.io.OutputStream , byte[] ) ; void ( java.lang.String , org.springframework.http.converter.HttpEntity<?> ( java.lang.Object ) , java.io.OutputStream ) ; void ( java.io.OutputStream ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.String java.lang.String , HttpEntity < ? > org.springframework.http.converter.HttpEntity<?> , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.lang.Object java.lang.Object = org.springframework.http.converter.HttpEntity<> . getBody ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; HttpHeaders org.springframework.http.converter.HttpHeaders = org.springframework.http.converter.HttpEntity<> . getHeaders ( ) ; MediaType org.springframework.http.converter.MediaType = org.springframework.http.converter.HttpHeaders . getContentType ( ) ; for ( HttpMessageConverter < ? > org.springframework.http.converter.HttpMessageConverter<?> : this . java.util.List<org.springframework.http.converter.HttpMessageConverter<?>> ) { if ( org.springframework.http.converter.HttpMessageConverter<> . canWrite ( java.lang.Class<> , org.springframework.http.converter.MediaType ) ) { HttpOutputMessage org.springframework.http.converter.HttpOutputMessage = new org.springframework.http.converter.FormHttpMessageConverter.MultipartHttpOutputMessage ( java.io.OutputStream ) ; org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . setContentDispositionFormData ( java.lang.String , java.lang.String ( java.lang.Object ) ) ; if ( ! org.springframework.http.converter.HttpHeaders . isEmpty ( ) ) { org.springframework.http.converter.HttpOutputMessage . getHeaders ( ) . putAll ( org.springframework.http.converter.HttpHeaders ) ; } ( ( HttpMessageConverter < java.lang.Object > ) org.springframework.http.converter.HttpMessageConverter<> ) . write ( java.lang.Object , org.springframework.http.converter.MediaType , org.springframework.http.converter.HttpOutputMessage ) ; return; } } throw new HttpMessageNotWritableException ( STRING + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( ) { return MimeTypeUtils . generateMultipartBoundary ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.http.converter.HttpEntity<?> < ? > org.springframework.http.converter.HttpEntity<?> ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof HttpEntity ? ( HttpEntity < ? > ) java.lang.Object : new HttpEntity <> ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof Resource ) { Resource org.springframework.http.converter.Resource = ( Resource ) java.lang.Object ; java.lang.String java.lang.String = org.springframework.http.converter.Resource . getFilename ( ) ; if ( java.lang.String != null && this . java.nio.charset.Charset != null ) { java.lang.String = org.springframework.http.converter.FormHttpMessageConverter.MimeDelegate . java.lang.String ( java.lang.String , this . java.nio.charset.Charset . java.lang.String ( ) ) ; } return java.lang.String ; } else { return null ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.OutputStream java.io.OutputStream , byte [] byte[] ) throws java.io.IOException { java.io.OutputStream . void ( '-' ) ; java.io.OutputStream . void ( '-' ) ; java.io.OutputStream . void ( byte[] ) ; void ( java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.OutputStream java.io.OutputStream , byte [] byte[] ) throws java.io.IOException { java.io.OutputStream . void ( '-' ) ; java.io.OutputStream . void ( '-' ) ; java.io.OutputStream . void ( byte[] ) ; java.io.OutputStream . void ( '-' ) ; java.io.OutputStream . void ( '-' ) ; void ( java.io.OutputStream ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.OutputStream . void ( '\r' ) ; java.io.OutputStream . void ( '\n' ) ; }  <METHOD_END>
<METHOD_START> public void ( java.io.OutputStream java.io.OutputStream ) { this . java.io.OutputStream = java.io.OutputStream ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.converter.HttpHeaders org.springframework.http.converter.HttpHeaders ( ) { return ( this . boolean ? HttpHeaders . readOnlyHttpHeaders ( this . org.springframework.http.converter.HttpHeaders ) : this . org.springframework.http.converter.HttpHeaders ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.OutputStream java.io.OutputStream ( ) java.io.IOException { void ( ) ; return this . java.io.OutputStream ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { if ( ! this . boolean ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> : this . org.springframework.http.converter.HttpHeaders . entrySet ( ) ) { byte [] byte[] = byte[] ( java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.lang.String ( ) ) ; for ( java.lang.String java.lang.String : java.util.Map.Entry<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( ) ) { byte [] byte[] = byte[] ( java.lang.String ) ; this . java.io.OutputStream . void ( byte[] ) ; this . java.io.OutputStream . void ( ':' ) ; this . java.io.OutputStream . void ( ' ' ) ; this . java.io.OutputStream . void ( byte[] ) ; void ( this . java.io.OutputStream ) ; } } void ( this . java.io.OutputStream ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( java.lang.String java.lang.String ) { return java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { return MimeUtility . encodeText ( java.lang.String , java.lang.String , null ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new java.lang.IllegalStateException ( java.io.UnsupportedEncodingException ) ; } }  <METHOD_END>
