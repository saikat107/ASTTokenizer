<METHOD_START> public static org.springframework.data.gemfire.client.support.DelegatingPoolAdapter org.springframework.data.gemfire.client.support.DelegatingPoolAdapter ( Pool org.springframework.data.gemfire.client.support.Pool ) { return new org.springframework.data.gemfire.client.support.DelegatingPoolAdapter ( org.springframework.data.gemfire.client.support.Pool ) { } ; }  <METHOD_END>
<METHOD_START> public void ( Pool org.springframework.data.gemfire.client.support.Pool ) { this . org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.client.support.Pool org.springframework.data.gemfire.client.support.Pool ( ) { return org.springframework.data.gemfire.client.support.Pool ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . isDestroyed ( ) : super. isDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getFreeConnectionTimeout ( ) : super. getFreeConnectionTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getIdleTimeout ( ) : super. getIdleTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getLoadConditioningInterval ( ) : super. getLoadConditioningInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getLocators ( ) : super. getLocators ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getMaxConnections ( ) : super. getMaxConnections ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getMinConnections ( ) : super. getMinConnections ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getMultiuserAuthentication ( ) : super. getMultiuserAuthentication ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getName ( ) : super. getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getPRSingleHopEnabled ( ) : super. getPRSingleHopEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getPendingEventCount ( ) : NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getPingInterval ( ) : super. getPingInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.client.support.QueryService org.springframework.data.gemfire.client.support.QueryService ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getQueryService ( ) : super. getQueryService ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getReadTimeout ( ) : super. getReadTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getRetryAttempts ( ) : super. getRetryAttempts ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getServerGroup ( ) : super. getServerGroup ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.net.InetSocketAddress> < java.net.InetSocketAddress > java.util.List<java.net.InetSocketAddress> ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getServers ( ) : super. getServers ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getSocketBufferSize ( ) : super. getSocketBufferSize ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getStatisticInterval ( ) : super. getStatisticInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getSubscriptionAckInterval ( ) : super. getSubscriptionAckInterval ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getSubscriptionEnabled ( ) : super. getSubscriptionEnabled ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getSubscriptionMessageTrackingTimeout ( ) : super. getSubscriptionMessageTrackingTimeout ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getSubscriptionRedundancy ( ) : super. getSubscriptionRedundancy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; return ( org.springframework.data.gemfire.client.support.Pool != null ? org.springframework.data.gemfire.client.support.Pool . getThreadLocalConnections ( ) : super. getThreadLocalConnections ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; if ( org.springframework.data.gemfire.client.support.Pool != null ) { org.springframework.data.gemfire.client.support.Pool . destroy ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( final boolean boolean ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; if ( org.springframework.data.gemfire.client.support.Pool != null ) { org.springframework.data.gemfire.client.support.Pool . destroy ( boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Pool org.springframework.data.gemfire.client.support.Pool = org.springframework.data.gemfire.client.support.Pool ( ) ; if ( org.springframework.data.gemfire.client.support.Pool != null ) { org.springframework.data.gemfire.client.support.Pool . releaseThreadLocalConnection ( ) ; } }  <METHOD_END>
