<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.web.ConditionalOnEnabledResourceChainTests.Config .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext , java.lang.String[] ) ; this . org.springframework.boot.autoconfigure.web.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnEnabledResourceChain public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
