<METHOD_START> @ Before public void void ( ) { org.springframework.statemachine.security.Authentication = mock ( Authentication .class ) ; org.springframework.statemachine.security.Transition<?,?> = mock ( Transition .class ) ; org.springframework.statemachine.security.TransitionSecurityExpressionRoot = new TransitionSecurityExpressionRoot ( org.springframework.statemachine.security.Authentication , org.springframework.statemachine.security.Transition<,> ) ; org.springframework.statemachine.security.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.statemachine.security.StandardEvaluationContext . setRootObject ( org.springframework.statemachine.security.TransitionSecurityExpressionRoot ) ; org.springframework.statemachine.security.AuthenticationTrustResolver = mock ( AuthenticationTrustResolver .class ) ; org.springframework.statemachine.security.TransitionSecurityExpressionRoot . setTrustResolver ( org.springframework.statemachine.security.AuthenticationTrustResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) java.lang.Exception { State org.springframework.statemachine.security.State = mock ( State .class ) ; when ( org.springframework.statemachine.security.State . getId ( ) ) . thenReturn ( STRING ) ; State org.springframework.statemachine.security.State = mock ( State .class ) ; when ( org.springframework.statemachine.security.State . getId ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.statemachine.security.Transition<,> . getSource ( ) ) . thenReturn ( org.springframework.statemachine.security.State ) ; when ( org.springframework.statemachine.security.Transition<,> . getTarget ( ) ) . thenReturn ( org.springframework.statemachine.security.State ) ; Expression org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; Expression org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.statemachine.security.StandardEvaluationContext . setVariable ( STRING , STRING ) ; Expression org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.statemachine.security.AuthenticationTrustResolver . isAnonymous ( org.springframework.statemachine.security.Authentication ) ) . thenReturn ( true ) ; assertTrue ( org.springframework.statemachine.security.TransitionSecurityExpressionRoot . isAnonymous ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.statemachine.security.AuthenticationTrustResolver . isAnonymous ( org.springframework.statemachine.security.Authentication ) ) . thenReturn ( false ) ; assertFalse ( org.springframework.statemachine.security.TransitionSecurityExpressionRoot . isAnonymous ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final PermissionEvaluator org.springframework.statemachine.security.PermissionEvaluator = mock ( PermissionEvaluator .class ) ; org.springframework.statemachine.security.StandardEvaluationContext . setVariable ( STRING , java.lang.Object ) ; org.springframework.statemachine.security.TransitionSecurityExpressionRoot . setPermissionEvaluator ( org.springframework.statemachine.security.PermissionEvaluator ) ; when ( org.springframework.statemachine.security.PermissionEvaluator . hasPermission ( org.springframework.statemachine.security.Authentication , java.lang.Object , STRING ) ) . thenReturn ( false ) ; assertFalse ( org.springframework.statemachine.security.TransitionSecurityExpressionRoot . hasPermission ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; final PermissionEvaluator org.springframework.statemachine.security.PermissionEvaluator = mock ( PermissionEvaluator .class ) ; org.springframework.statemachine.security.StandardEvaluationContext . setVariable ( STRING , java.lang.Object ) ; org.springframework.statemachine.security.TransitionSecurityExpressionRoot . setPermissionEvaluator ( org.springframework.statemachine.security.PermissionEvaluator ) ; when ( org.springframework.statemachine.security.PermissionEvaluator . hasPermission ( org.springframework.statemachine.security.Authentication , java.lang.Object , STRING ) ) . thenReturn ( true ) ; assertTrue ( org.springframework.statemachine.security.TransitionSecurityExpressionRoot . hasPermission ( java.lang.Object , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final java.lang.Object java.lang.Object = new java.lang.Object ( ) ; org.springframework.statemachine.security.StandardEvaluationContext . setVariable ( STRING , java.lang.Object ) ; final PermissionEvaluator org.springframework.statemachine.security.PermissionEvaluator = mock ( PermissionEvaluator .class ) ; org.springframework.statemachine.security.TransitionSecurityExpressionRoot . setPermissionEvaluator ( org.springframework.statemachine.security.PermissionEvaluator ) ; when ( org.springframework.statemachine.security.PermissionEvaluator . hasPermission ( eq ( org.springframework.statemachine.security.Authentication ) , eq ( java.lang.Object ) , any ( java.lang.Integer .class ) ) ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( false ) ; Expression org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertTrue ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; org.springframework.statemachine.security.Expression = org.springframework.statemachine.security.SpelExpressionParser . parseExpression ( STRING ) ; assertFalse ( ExpressionUtils . evaluateAsBoolean ( org.springframework.statemachine.security.Expression , org.springframework.statemachine.security.StandardEvaluationContext ) ) ; }  <METHOD_END>
