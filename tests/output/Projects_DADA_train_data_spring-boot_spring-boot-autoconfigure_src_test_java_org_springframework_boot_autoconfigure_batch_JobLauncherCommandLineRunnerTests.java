<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunnerTests.BatchConfiguration .class ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . refresh ( ) ; JobRepository org.springframework.boot.autoconfigure.batch.JobRepository = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobRepository .class ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncher = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobLauncher .class ) ; this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory = new JobBuilderFactory ( org.springframework.boot.autoconfigure.batch.JobRepository ) ; PlatformTransactionManager org.springframework.boot.autoconfigure.batch.PlatformTransactionManager = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( PlatformTransactionManager .class ) ; this . org.springframework.boot.autoconfigure.batch.StepBuilderFactory = new StepBuilderFactory ( org.springframework.boot.autoconfigure.batch.JobRepository , org.springframework.boot.autoconfigure.batch.PlatformTransactionManager ) ; this . org.springframework.boot.autoconfigure.batch.Step = this . org.springframework.boot.autoconfigure.batch.StepBuilderFactory . get ( STRING ) . tasklet ( new Tasklet ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { return null ; } } ) . build ( ) ; this . org.springframework.boot.autoconfigure.batch.Job = this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory . get ( STRING ) . start ( this . org.springframework.boot.autoconfigure.batch.Step ) . build ( ) ; this . org.springframework.boot.autoconfigure.batch.JobExplorer = this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( JobExplorer .class ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner = new JobLauncherCommandLineRunner ( this . org.springframework.boot.autoconfigure.batch.JobLauncher , this . org.springframework.boot.autoconfigure.batch.JobExplorer ) ; this . org.springframework.boot.autoconfigure.batch.AnnotationConfigApplicationContext . getBean ( org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunnerTests.BatchConfiguration .class ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParametersBuilder ( ) . addLong ( STRING , NUMBER ) . toJobParameters ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.Job = this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory . get ( STRING ) . start ( this . org.springframework.boot.autoconfigure.batch.Step ) . incrementer ( new RunIdIncrementer ( ) ) . build ( ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.Job = this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory . get ( STRING ) . start ( this . org.springframework.boot.autoconfigure.batch.StepBuilderFactory . get ( STRING ) . tasklet ( new Tasklet ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; } } ) . build ( ) ) . incrementer ( new RunIdIncrementer ( ) ) . build ( ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.Job = this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory . get ( STRING ) . preventRestart ( ) . start ( this . org.springframework.boot.autoconfigure.batch.StepBuilderFactory . get ( STRING ) . tasklet ( new Tasklet ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; } } ) . build ( ) ) . incrementer ( new RunIdIncrementer ( ) ) . build ( ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , new JobParameters ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.Job = this . org.springframework.boot.autoconfigure.batch.JobBuilderFactory . get ( STRING ) . start ( this . org.springframework.boot.autoconfigure.batch.StepBuilderFactory . get ( STRING ) . tasklet ( new Tasklet ( ) { @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; } } ) . build ( ) ) . incrementer ( new RunIdIncrementer ( ) ) . build ( ) ; JobParameters org.springframework.boot.autoconfigure.batch.JobParameters = new JobParametersBuilder ( ) . addLong ( STRING , NUMBER , false ) . addLong ( STRING , NUMBER , false ) . toJobParameters ( ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , org.springframework.boot.autoconfigure.batch.JobParameters ) ; this . org.springframework.boot.autoconfigure.batch.JobLauncherCommandLineRunner . execute ( this . org.springframework.boot.autoconfigure.batch.Job , org.springframework.boot.autoconfigure.batch.JobParameters ) ; assertThat ( this . org.springframework.boot.autoconfigure.batch.JobExplorer . getJobInstances ( STRING , NUMBER , NUMBER ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.RepeatStatus org.springframework.boot.autoconfigure.batch.RepeatStatus ( StepContribution org.springframework.boot.autoconfigure.batch.StepContribution , ChunkContext org.springframework.boot.autoconfigure.batch.ChunkContext ) throws java.lang.Exception { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.batch.JobRepository = this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean . getObject ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean . clear ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobRepository org.springframework.boot.autoconfigure.batch.JobRepository ( ) java.lang.Exception { return this . org.springframework.boot.autoconfigure.batch.JobRepository ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.PlatformTransactionManager org.springframework.boot.autoconfigure.batch.PlatformTransactionManager ( ) java.lang.Exception { return this . org.springframework.boot.autoconfigure.batch.ResourcelessTransactionManager ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobLauncher org.springframework.boot.autoconfigure.batch.JobLauncher ( ) java.lang.Exception { SimpleJobLauncher org.springframework.boot.autoconfigure.batch.SimpleJobLauncher = new SimpleJobLauncher ( ) ; org.springframework.boot.autoconfigure.batch.SimpleJobLauncher . setJobRepository ( this . org.springframework.boot.autoconfigure.batch.JobRepository ) ; org.springframework.boot.autoconfigure.batch.SimpleJobLauncher . setTaskExecutor ( new SyncTaskExecutor ( ) ) ; return org.springframework.boot.autoconfigure.batch.SimpleJobLauncher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.batch.JobExplorer org.springframework.boot.autoconfigure.batch.JobExplorer ( ) java.lang.Exception { return new MapJobExplorerFactoryBean ( this . org.springframework.boot.autoconfigure.batch.MapJobRepositoryFactoryBean ) . getObject ( ) ; }  <METHOD_END>
