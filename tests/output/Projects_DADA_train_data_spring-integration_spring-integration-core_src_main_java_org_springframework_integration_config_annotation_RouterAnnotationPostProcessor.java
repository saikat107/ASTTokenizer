<METHOD_START> public void ( ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) { super( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ); this . messageHandlerAttributes . addAll ( java.util.Arrays .< java.lang.String > java.util.List<java.lang.String> ( STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { AbstractMessageRouter org.springframework.integration.config.annotation.AbstractMessageRouter ; if ( AnnotatedElementUtils . isAnnotated ( java.lang.reflect.Method , Bean .class . java.lang.String ( ) ) ) { java.lang.Object java.lang.Object = this . resolveTargetBeanFromMethodWithBeanAnnotation ( java.lang.reflect.Method ) ; org.springframework.integration.config.annotation.AbstractMessageRouter = this . extractTypeIfPossible ( java.lang.Object , AbstractMessageRouter .class ) ; if ( org.springframework.integration.config.annotation.AbstractMessageRouter == null ) { if ( java.lang.Object instanceof MessageHandler ) { Assert . isTrue ( this . boolean ( java.util.List<java.lang.annotation.Annotation> ) , STRING + STRING + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; return ( MessageHandler ) java.lang.Object ; } else { org.springframework.integration.config.annotation.AbstractMessageRouter = new MethodInvokingRouter ( java.lang.Object ) ; } } else { checkMessageHandlerAttributes ( resolveTargetBeanName ( java.lang.reflect.Method ) , java.util.List<java.lang.annotation.Annotation> ) ; return org.springframework.integration.config.annotation.AbstractMessageRouter ; } } else { org.springframework.integration.config.annotation.AbstractMessageRouter = new MethodInvokingRouter ( java.lang.Object , java.lang.reflect.Method ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AbstractMessageRouter . setDefaultOutputChannelName ( java.lang.String ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AbstractMessageRouter . setApplySequence ( java.lang.Boolean . boolean ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.AbstractMessageRouter . setIgnoreSendFailures ( java.lang.Boolean . boolean ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ) ; } if ( this . boolean ( java.util.List<java.lang.annotation.Annotation> ) ) { MethodInvokingRouter org.springframework.integration.config.annotation.MethodInvokingRouter = ( MethodInvokingRouter ) org.springframework.integration.config.annotation.AbstractMessageRouter ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.MethodInvokingRouter . setResolutionRequired ( java.lang.Boolean . boolean ( java.lang.String ) ) ; } } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.MethodInvokingRouter . setPrefix ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ; } java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.annotation.MethodInvokingRouter . setSuffix ( this . beanFactory . resolveEmbeddedValue ( java.lang.String ) ) ; } java.lang.String [] java.lang.String[] = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String [] .class ) ; if ( ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } java.util.Properties java.util.Properties = ( java.util.Properties ) this . conversionService . convert ( java.lang.StringBuilder . java.lang.String ( ) , TypeDescriptor . valueOf ( java.lang.String .class ) , TypeDescriptor . valueOf ( java.util.Properties .class ) ) ; org.springframework.integration.config.annotation.MethodInvokingRouter . replaceChannelMappings ( java.util.Properties ) ; } } return org.springframework.integration.config.annotation.AbstractMessageRouter ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.List<java.lang.annotation.Annotation> < java.lang.annotation.Annotation > java.util.List<java.lang.annotation.Annotation> ) { java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; java.lang.String [] java.lang.String[] = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String [] .class ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; java.lang.String java.lang.String = MessagingAnnotationUtils . resolveAttribute ( java.util.List<java.lang.annotation.Annotation> , STRING , java.lang.String .class ) ; return StringUtils . hasText ( java.lang.String ) || ! ObjectUtils . isEmpty ( java.lang.String[] ) || StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) ; }  <METHOD_END>
