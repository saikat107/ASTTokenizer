<METHOD_START> @ Test public void void ( ) { ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class ) ; given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory . getBean ( STRING , MessageChannel .class ) ) . willThrow ( NoSuchBeanDefinitionException .class ) ; willAnswer ( invocation -> invocation . getArgument ( NUMBER ) ) . given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) . initializeBean ( any ( DirectChannel .class ) , eq ( STRING ) ) ; willAnswer ( invocation -> invocation . getArgument ( NUMBER ) ) . given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) . initializeBean ( any ( MessageHandler .class ) , eq ( STRING ) ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorChannelCreationTests.Foo ( ) , STRING ) ; verify ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) . registerSingleton ( eq ( STRING ) , any ( DirectChannel .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableListableBeanFactory org.springframework.integration.config.annotation.ConfigurableListableBeanFactory = mock ( ConfigurableListableBeanFactory .class ) ; given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory . getBean ( STRING , MessageChannel .class ) ) . willThrow ( BeanCreationException .class ) ; willAnswer ( invocation -> invocation . getArgument ( NUMBER ) ) . given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) . initializeBean ( any ( DirectChannel .class ) , eq ( STRING ) ) ; willAnswer ( invocation -> invocation . getArgument ( NUMBER ) ) . given ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) . initializeBean ( any ( MessageHandler .class ) , eq ( STRING ) ) ; MessagingAnnotationPostProcessor org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor = new MessagingAnnotationPostProcessor ( ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . setBeanFactory ( org.springframework.integration.config.annotation.ConfigurableListableBeanFactory ) ; org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . afterPropertiesSet ( ) ; try { org.springframework.integration.config.annotation.MessagingAnnotationPostProcessor . postProcessAfterInitialization ( new org.springframework.integration.config.annotation.MessagingAnnotationPostProcessorChannelCreationTests.Foo ( ) , STRING ) ; fail ( STRING ) ; } catch ( DestinationResolutionException org.springframework.integration.config.annotation.DestinationResolutionException ) { assertThat ( org.springframework.integration.config.annotation.DestinationResolutionException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ ServiceActivator ( inputChannel = STRING ) public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
