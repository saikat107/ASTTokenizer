<METHOD_START> @ Test public void void ( ) { LocaleContext org.springframework.context.i18n.LocaleContext = new SimpleLocaleContext ( java.util.Locale . java.util.Locale ) ; LocaleContextHolder . setLocaleContext ( org.springframework.context.i18n.LocaleContext ) ; assertSame ( org.springframework.context.i18n.LocaleContext , LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; org.springframework.context.i18n.LocaleContext = new SimpleLocaleContext ( java.util.Locale . java.util.Locale ) ; LocaleContextHolder . setLocaleContext ( org.springframework.context.i18n.LocaleContext ) ; assertSame ( org.springframework.context.i18n.LocaleContext , LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; LocaleContextHolder . resetLocaleContext ( ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocaleContext org.springframework.context.i18n.LocaleContext = new SimpleTimeZoneAwareLocaleContext ( java.util.Locale . java.util.Locale , java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; LocaleContextHolder . setLocaleContext ( org.springframework.context.i18n.LocaleContext ) ; assertSame ( org.springframework.context.i18n.LocaleContext , LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; LocaleContextHolder . resetLocaleContext ( ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; assertFalse ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; assertFalse ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; LocaleContextHolder . setLocale ( null ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; LocaleContextHolder . setDefaultLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; LocaleContextHolder . setDefaultLocale ( null ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocaleContextHolder . setTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setTimeZone ( null ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; LocaleContextHolder . setDefaultTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; LocaleContextHolder . setDefaultTimeZone ( null ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; assertFalse ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; LocaleContextHolder . setTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setLocale ( java.util.Locale . java.util.Locale ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setTimeZone ( null ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; assertFalse ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; LocaleContextHolder . setTimeZone ( java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertEquals ( java.util.Locale . java.util.Locale , LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setLocale ( null ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , LocaleContextHolder . getTimeZone ( ) ) ; assertTrue ( LocaleContextHolder . getLocaleContext ( ) instanceof TimeZoneAwareLocaleContext ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( STRING ) , ( ( TimeZoneAwareLocaleContext ) LocaleContextHolder . getLocaleContext ( ) ) . getTimeZone ( ) ) ; LocaleContextHolder . setTimeZone ( null ) ; assertEquals ( java.util.Locale . java.util.Locale ( ) , LocaleContextHolder . getLocale ( ) ) ; assertEquals ( java.util.TimeZone . java.util.TimeZone ( ) , LocaleContextHolder . getTimeZone ( ) ) ; assertNull ( LocaleContextHolder . getLocaleContext ( ) ) ; }  <METHOD_END>
