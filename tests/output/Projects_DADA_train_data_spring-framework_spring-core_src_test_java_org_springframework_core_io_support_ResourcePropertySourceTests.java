<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( java.lang.String ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( java.lang.String ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( STRING , java.lang.String ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( STRING , java.lang.String , java.lang.Class<? extends org.springframework.core.io.support.ResourcePropertySourceTests> ( ) . java.lang.ClassLoader ( ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( java.lang.String , java.lang.Class<? extends org.springframework.core.io.support.ResourcePropertySourceTests> ( ) . java.lang.ClassLoader ( ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( new ClassPathResource ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( STRING , new ClassPathResource ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertThat ( org.springframework.core.io.support.PropertySource<> . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { PropertySource < ? > org.springframework.core.io.support.PropertySource<?> = new ResourcePropertySource ( new ByteArrayResource ( STRING . byte[] ( ) , STRING ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getProperty ( STRING ) ) ; assertEquals ( STRING , org.springframework.core.io.support.PropertySource<> . getName ( ) ) ; }  <METHOD_END>
