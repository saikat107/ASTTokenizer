<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.DefaultListableBeanFactory . registerScope ( STRING , new SessionScope ( ) ) ; XmlBeanDefinitionReader org.springframework.web.context.request.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.web.context.request.DefaultListableBeanFactory ) ; org.springframework.web.context.request.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.context.request.SessionScopeTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { RequestContextHolder . setRequestAttributes ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super. setAttribute ( java.lang.String , java.lang.Object ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; java.lang.String java.lang.String = STRING ; assertNull ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.TestBean ) ; assertSame ( org.springframework.web.context.request.TestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.TestBean ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super. setAttribute ( java.lang.String , java.lang.Object ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) { @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super. setAttribute ( java.lang.String , java.lang.Object ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; java.lang.String java.lang.String = STRING ; assertNull ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.TestBean ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super. setAttribute ( java.lang.String , java.lang.Object ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; java.lang.String java.lang.String = STRING ; assertNull ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = ( DerivedTestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.DerivedTestBean ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; org.springframework.web.context.request.MockHttpSession . invalidate ( ) ; assertTrue ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.DefaultListableBeanFactory . addBeanPostProcessor ( new org.springframework.web.context.request.SessionScopeTests.CustomDestructionAwareBeanPostProcessor ( ) ) ; void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.context.request.DefaultListableBeanFactory . addBeanPostProcessor ( new org.springframework.web.context.request.SessionScopeTests.CustomSerializableDestructionAwareBeanPostProcessor ( ) ) ; void ( true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean ) throws java.lang.Exception { java.io.Serializable java.io.Serializable = null ; MockHttpSession org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; java.lang.String java.lang.String = STRING ; assertNull ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = ( DerivedTestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.DerivedTestBean ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; java.io.Serializable = org.springframework.web.context.request.MockHttpSession . serializeState ( ) ; assertFalse ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; java.io.Serializable = ( java.io.Serializable ) SerializationTestUtils . serializeAndDeserialize ( java.io.Serializable ) ; org.springframework.web.context.request.MockHttpSession = new MockHttpSession ( ) ; org.springframework.web.context.request.MockHttpSession . deserializeState ( java.io.Serializable ) ; org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.context.request.MockHttpServletRequest . setSession ( org.springframework.web.context.request.MockHttpSession ) ; org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; java.lang.String = STRING ; assertNotNull ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) ) ; org.springframework.web.context.request.DerivedTestBean = ( DerivedTestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertEquals ( org.springframework.web.context.request.MockHttpSession . getAttribute ( java.lang.String ) , org.springframework.web.context.request.DerivedTestBean ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; org.springframework.web.context.request.MockHttpSession . invalidate ( ) ; assertTrue ( org.springframework.web.context.request.DerivedTestBean . wasDestroyed ( ) ) ; if ( boolean ) { assertNull ( org.springframework.web.context.request.DerivedTestBean . getBeanName ( ) ) ; } else { assertNotNull ( org.springframework.web.context.request.DerivedTestBean . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.web.context.request.BeansException { if ( java.lang.Object instanceof BeanNameAware ) { ( ( BeanNameAware ) java.lang.Object ) . setBeanName ( null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return true ; }  <METHOD_END>
