<METHOD_START> void ( PartTree org.springframework.data.ldap.repository.query.PartTree , Parameters < ? , ? > org.springframework.data.ldap.repository.query.Parameters<?,?> , java.lang.Class<?> < ? > java.lang.Class<?> , ObjectDirectoryMapper org.springframework.data.ldap.repository.query.ObjectDirectoryMapper , java.lang.Object [] java.lang.Object[] ) { super( org.springframework.data.ldap.repository.query.PartTree , new ParametersParameterAccessor ( org.springframework.data.ldap.repository.query.Parameters<,> , java.lang.Object[] ) ); Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.ldap.repository.query.ObjectDirectoryMapper , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . org.springframework.data.ldap.repository.query.ObjectDirectoryMapper = org.springframework.data.ldap.repository.query.ObjectDirectoryMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.ldap.repository.query.ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria ( Part org.springframework.data.ldap.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { java.lang.String java.lang.String = java.lang.Class<> . A ( Entry .class ) . base ( ) ; ConditionCriteria org.springframework.data.ldap.repository.query.ConditionCriteria = query ( ) . base ( java.lang.String ) . where ( java.lang.String ( org.springframework.data.ldap.repository.query.Part ) ) ; return org.springframework.data.ldap.repository.query.ContainerCriteria ( org.springframework.data.ldap.repository.query.Part , java.util.Iterator<java.lang.Object> , org.springframework.data.ldap.repository.query.ConditionCriteria ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.ldap.repository.query.ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria ( Part org.springframework.data.ldap.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , ConditionCriteria org.springframework.data.ldap.repository.query.ConditionCriteria ) { Part . Part Part.Type = org.springframework.data.ldap.repository.query.Part . getType ( ) ; java.lang.String java.lang.String = null ; if ( java.util.Iterator<java.lang.Object> . boolean ( ) ) { java.lang.String = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) ; } switch ( Part.Type ) { case NEGATING_SIMPLE_PROPERTY : return org.springframework.data.ldap.repository.query.ConditionCriteria . not ( ) . is ( java.lang.String ) ; case SIMPLE_PROPERTY : return org.springframework.data.ldap.repository.query.ConditionCriteria . is ( java.lang.String ) ; case STARTING_WITH : return org.springframework.data.ldap.repository.query.ConditionCriteria . like ( java.lang.String + STRING ) ; case ENDING_WITH : return org.springframework.data.ldap.repository.query.ConditionCriteria . like ( STRING + java.lang.String ) ; case CONTAINING : return org.springframework.data.ldap.repository.query.ConditionCriteria . like ( STRING + java.lang.String + STRING ) ; case LIKE : return org.springframework.data.ldap.repository.query.ConditionCriteria . like ( java.lang.String ) ; case NOT_LIKE : return org.springframework.data.ldap.repository.query.ConditionCriteria . not ( ) . like ( java.lang.String ) ; case GREATER_THAN_EQUAL : return org.springframework.data.ldap.repository.query.ConditionCriteria . gte ( java.lang.String ) ; case LESS_THAN_EQUAL : return org.springframework.data.ldap.repository.query.ConditionCriteria . lte ( java.lang.String ) ; case IS_NOT_NULL : return org.springframework.data.ldap.repository.query.ConditionCriteria . isPresent ( ) ; case IS_NULL : return org.springframework.data.ldap.repository.query.ConditionCriteria . not ( ) . isPresent ( ) ; default: throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , Part.Type ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Part org.springframework.data.ldap.repository.query.Part ) { PropertyPath org.springframework.data.ldap.repository.query.PropertyPath = org.springframework.data.ldap.repository.query.Part . getProperty ( ) ; if ( org.springframework.data.ldap.repository.query.PropertyPath . hasNext ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } return org.springframework.data.ldap.repository.query.ObjectDirectoryMapper . attributeFor ( java.lang.Class<> , org.springframework.data.ldap.repository.query.PropertyPath . getSegment ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.ldap.repository.query.ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria ( Part org.springframework.data.ldap.repository.query.Part , ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { ConditionCriteria org.springframework.data.ldap.repository.query.ConditionCriteria = org.springframework.data.ldap.repository.query.ContainerCriteria . and ( java.lang.String ( org.springframework.data.ldap.repository.query.Part ) ) ; return org.springframework.data.ldap.repository.query.ContainerCriteria ( org.springframework.data.ldap.repository.query.Part , java.util.Iterator<java.lang.Object> , org.springframework.data.ldap.repository.query.ConditionCriteria ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.ldap.repository.query.ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria ( ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria , ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria ) { return org.springframework.data.ldap.repository.query.ContainerCriteria . or ( org.springframework.data.ldap.repository.query.ContainerCriteria ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.ldap.repository.query.LdapQuery org.springframework.data.ldap.repository.query.LdapQuery ( ContainerCriteria org.springframework.data.ldap.repository.query.ContainerCriteria , Sort org.springframework.data.ldap.repository.query.Sort ) { return org.springframework.data.ldap.repository.query.ContainerCriteria ; }  <METHOD_END>
