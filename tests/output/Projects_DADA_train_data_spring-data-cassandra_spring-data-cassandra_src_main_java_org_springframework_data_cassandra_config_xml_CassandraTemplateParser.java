<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element ) { return CassandraTemplateFactoryBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.data.cassandra.config.xml.AbstractBeanDefinition , ParserContext org.springframework.data.cassandra.config.xml.ParserContext )			throws org.springframework.data.cassandra.config.xml.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.AbstractBeanDefinition , org.springframework.data.cassandra.config.xml.ParserContext ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : DefaultBeanNames . DATA_TEMPLATE ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { CassandraMappingXmlBeanFactoryPostProcessorRegistrar . ensureRegistration ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext ) ; super. doParse ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext , org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ; if ( StringUtils . hasText ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { addRequiredPropertyReference ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Element , STRING ) ; } else { addOptionalPropertyReference ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Element , STRING , DefaultBeanNames . SESSION ) ; } addOptionalPropertyReference ( org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Element , STRING , DefaultBeanNames . CONVERTER ) ; }  <METHOD_END>
