<METHOD_START> public void ( StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> , java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> , java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> < Trigger < S , E > , Transition < S , E > > java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> , java.util.List<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.List<org.springframework.statemachine.support.Transition<S,E>> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { this . org.springframework.statemachine.support.StateMachine<S,E> = org.springframework.statemachine.support.StateMachine<S,E> ; this . org.springframework.statemachine.support.StateMachine<S,E> = org.springframework.statemachine.support.StateMachine<S,E> ; this . java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> = java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> ; this . java.util.List<org.springframework.statemachine.support.Transition<S,E>> = java.util.List<org.springframework.statemachine.support.Transition<S,E>> ; this . java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> = java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ; this . org.springframework.statemachine.support.Transition<S,E> = org.springframework.statemachine.support.Transition<S,E> ; this . org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.Message<E> ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.support.Message<E> ) { java.util.Queue<org.springframework.statemachine.support.Message<E>> . add ( org.springframework.statemachine.support.Message<E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.Trigger<S,E> ) ; java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . boolean ( new org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem ( org.springframework.statemachine.support.Trigger<S,E> , org.springframework.statemachine.support.Message<E> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.support.Message<E> ) { java.util.LinkedList<org.springframework.statemachine.support.Message<E>> . addLast ( org.springframework.statemachine.support.Message<E> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineExecutorTransit < S , E > org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> ) { this . org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> = org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { void ( ) ; super. doStop ( ) ; java.util.concurrent.atomic.AtomicBoolean . void ( false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { java.util.concurrent.atomic.AtomicBoolean . void ( ! boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < E > org.springframework.statemachine.support.Message<E> ) { org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.Message<E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineInterceptor < S , E > org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) { org.springframework.statemachine.support.StateMachineInterceptorList<S,E> . add ( org.springframework.statemachine.support.StateMachineInterceptor<S,E> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.List<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.List<org.springframework.statemachine.support.Transition<S,E>> , Message < E > org.springframework.statemachine.support.Message<E> ) { boolean boolean = false ; for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.List<org.springframework.statemachine.support.Transition<S,E>> ) { if ( org.springframework.statemachine.support.Transition<S,E> == null ) { continue; } State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ; if ( org.springframework.statemachine.support.State<S,E> == null ) { continue; } State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) ; if ( org.springframework.statemachine.support.State<S,E> == null ) { continue; } if ( ! StateMachineUtils . containsAtleastOne ( org.springframework.statemachine.support.State<S,E> . getIds ( ) , org.springframework.statemachine.support.State<S,E> . getIds ( ) ) ) { continue; } if ( StateMachineUtils . isPseudoState ( org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) , PseudoStateKind . JOIN ) ) { if ( java.util.Set<org.springframework.statemachine.support.State<S,E>> . isEmpty ( ) ) { java.util.List<org.springframework.statemachine.support.State<S,E>> < State < S , E > > java.util.List<org.springframework.statemachine.support.State<S,E>> = ( ( JoinPseudoState < S , E > ) org.springframework.statemachine.support.Transition<S,E> . getTarget ( ) . getPseudoState ( ) ) . getJoins ( ) ; java.util.Set<org.springframework.statemachine.support.State<S,E>> . addAll ( java.util.List<org.springframework.statemachine.support.State<S,E>> ) ; } java.util.Set<org.springframework.statemachine.support.Transition<S,E>> . add ( org.springframework.statemachine.support.Transition<S,E> ) ; boolean boolean = java.util.Set<org.springframework.statemachine.support.State<S,E>> . remove ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ) ; boolean boolean = boolean & java.util.Set<org.springframework.statemachine.support.State<S,E>> . isEmpty ( ) ; if ( boolean ) { for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Set<org.springframework.statemachine.support.Transition<S,E>> ) { StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; org.springframework.statemachine.support.Transition<S,E> . transit ( org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> . transit ( org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateContext<S,E> , org.springframework.statemachine.support.Message<E> ) ; } java.util.Set<org.springframework.statemachine.support.Transition<S,E>> . clear ( ) ; break; } else { continue; } } StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; try { org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateMachineInterceptorList<S,E> . preTransition ( org.springframework.statemachine.support.StateContext<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . info ( STRING , java.lang.Exception ) ; org.springframework.statemachine.support.StateContext<S,E> = null ; } if ( org.springframework.statemachine.support.StateContext<S,E> == null ) { break; } try { boolean = org.springframework.statemachine.support.Transition<S,E> . transit ( org.springframework.statemachine.support.StateContext<S,E> ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.statemachine.support.Log . warn ( STRING + org.springframework.statemachine.support.Transition<S,E> + STRING + java.lang.Exception ) ; } if ( boolean ) { org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> . transit ( org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateContext<S,E> , org.springframework.statemachine.support.Message<E> ) ; org.springframework.statemachine.support.StateMachineInterceptorList<S,E> . postTransition ( org.springframework.statemachine.support.StateContext<S,E> ) ; break; } } return boolean ; }  <METHOD_END>
<METHOD_START> private void void ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { StateContext < S , E > org.springframework.statemachine.support.StateContext<S,E> = org.springframework.statemachine.support.StateContext<S,E> ( org.springframework.statemachine.support.Message<E> , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> ) ; org.springframework.statemachine.support.Transition<S,E> . transit ( org.springframework.statemachine.support.StateContext<S,E> ) ; org.springframework.statemachine.support.StateMachineExecutorTransit<S,E> . transit ( org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateContext<S,E> , org.springframework.statemachine.support.Message<E> ) ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) { TaskExecutor org.springframework.statemachine.support.TaskExecutor = getTaskExecutor ( ) ; if ( org.springframework.statemachine.support.TaskExecutor == null ) { return; } java.lang.Runnable java.lang.Runnable = new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { boolean boolean = false ; while ( boolean ( ) ) { boolean = true ; void ( ) ; while ( boolean ( ) ) { void ( ) ; } } if ( ! boolean ) { void ( ) ; while ( boolean ( ) ) { void ( ) ; } } java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> . void ( null ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false ) ) { void ( ) ; } } } ; if ( java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> . boolean ( null , java.lang.Runnable ) ) { org.springframework.statemachine.support.TaskExecutor . execute ( java.lang.Runnable ) ; } else { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { boolean boolean = false ; while ( boolean ( ) ) { boolean = true ; void ( ) ; while ( boolean ( ) ) { void ( ) ; } } if ( ! boolean ) { void ( ) ; while ( boolean ( ) ) { void ( ) ; } } java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> . void ( null ) ; if ( java.util.concurrent.atomic.AtomicBoolean . boolean ( false ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + java.util.Queue<org.springframework.statemachine.support.Message<E>> . size ( ) ) ; } Message < E > org.springframework.statemachine.support.Message<E> = java.util.Queue<org.springframework.statemachine.support.Message<E>> . poll ( ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) ; if ( org.springframework.statemachine.support.Message<E> != null ) { if ( ( org.springframework.statemachine.support.State<S,E> != null && org.springframework.statemachine.support.State<S,E> . shouldDefer ( org.springframework.statemachine.support.Message<E> ) ) ) { org.springframework.statemachine.support.Log . info ( STRING + org.springframework.statemachine.support.State<S,E> + STRING + org.springframework.statemachine.support.Message<E> ) ; void ( org.springframework.statemachine.support.Message<E> ) ; return true ; } for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ; Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> = org.springframework.statemachine.support.Transition<S,E> . getTrigger ( ) ; if ( StateMachineUtils . containsAtleastOne ( org.springframework.statemachine.support.State<S,E> . getIds ( ) , org.springframework.statemachine.support.State<S,E> . getIds ( ) ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> != null && org.springframework.statemachine.support.Trigger<S,E> . evaluate ( new DefaultTriggerContext < S , E > ( org.springframework.statemachine.support.Message<E> . getPayload ( ) ) ) ) { void ( org.springframework.statemachine.support.Trigger<S,E> , org.springframework.statemachine.support.Message<E> ) ; return true ; } } } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( ! isRunning ( ) ) { return; } if ( ! java.util.concurrent.atomic.AtomicBoolean . boolean ( true ) ) { java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > ( ) ; java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> . add ( org.springframework.statemachine.support.Transition<S,E> ) ; if ( org.springframework.statemachine.support.Message<E> != null ) { void ( org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.Message<E> ) ; } else { void ( org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.Message<E> ) ; } return; } if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . int ( ) + STRING + this ) ; } org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem = java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem ( ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) ; if ( org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem != null && org.springframework.statemachine.support.State<S,E> != null ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem + STRING + this ) ; } org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem . org.springframework.statemachine.support.Message<E> ; E E = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getPayload ( ) : null ; java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> = new java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> < Transition < S , E > > ( ) ; if ( E != null ) { java.util.ArrayList<S> < S > java.util.ArrayList<S> = new java.util.ArrayList<S> < S > ( org.springframework.statemachine.support.State<S,E> . getIds ( ) ) ; java.util.Collections . void ( java.util.ArrayList<S> ) ; for ( S S : java.util.ArrayList<S> ) { for ( java.util.Map.Entry<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> < Trigger < S , E > , Transition < S , E > > java.util.Map.Entry<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> : java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . entrySet ( ) ) { Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> = java.util.Map.Entry<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . getKey ( ) ; E E = org.springframework.statemachine.support.Trigger<S,E> . getEvent ( ) ; Transition < S , E > org.springframework.statemachine.support.Transition<S,E> = java.util.Map.Entry<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . getValue ( ) ; if ( E . boolean ( E ) ) { if ( org.springframework.statemachine.support.Transition<S,E> . getSource ( ) . getId ( ) . equals ( S ) && ! java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> . contains ( org.springframework.statemachine.support.Transition<S,E> ) ) { java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> . add ( org.springframework.statemachine.support.Transition<S,E> ) ; continue; } } } } } if ( java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> . isEmpty ( ) ) { java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> . add ( java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . get ( org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem . org.springframework.statemachine.support.Trigger<S,E> ) ) ; } boolean ( java.util.ArrayList<org.springframework.statemachine.support.Transition<S,E>> , org.springframework.statemachine.support.Message<E> ) ; } if ( org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) != null ) { boolean boolean = false ; do { boolean = boolean ( java.util.List<org.springframework.statemachine.support.Transition<S,E>> , org.springframework.statemachine.support.Message<E> ) ; } while ( boolean ); } }  <METHOD_END>
<METHOD_START> private synchronized boolean boolean ( ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + java.util.LinkedList<org.springframework.statemachine.support.Message<E>> . size ( ) ) ; } java.util.ListIterator<org.springframework.statemachine.support.Message<E>> < Message < E > > java.util.ListIterator<org.springframework.statemachine.support.Message<E>> = java.util.LinkedList<org.springframework.statemachine.support.Message<E>> . listIterator ( ) ; State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.StateMachine<S,E> . getState ( ) ; while ( java.util.ListIterator<org.springframework.statemachine.support.Message<E>> . hasNext ( ) ) { Message < E > org.springframework.statemachine.support.Message<E> = java.util.ListIterator<org.springframework.statemachine.support.Message<E>> . next ( ) ; if ( org.springframework.statemachine.support.State<S,E> . shouldDefer ( org.springframework.statemachine.support.Message<E> ) ) { continue; } for ( Transition < S , E > org.springframework.statemachine.support.Transition<S,E> : java.util.Collection<org.springframework.statemachine.support.Transition<S,E>> ) { State < S , E > org.springframework.statemachine.support.State<S,E> = org.springframework.statemachine.support.Transition<S,E> . getSource ( ) ; Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> = org.springframework.statemachine.support.Transition<S,E> . getTrigger ( ) ; if ( org.springframework.statemachine.support.State<S,E> . equals ( org.springframework.statemachine.support.State<S,E> ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> != null && org.springframework.statemachine.support.Trigger<S,E> . evaluate ( new DefaultTriggerContext < S , E > ( org.springframework.statemachine.support.Message<E> . getPayload ( ) ) ) ) { java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . boolean ( new org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem ( org.springframework.statemachine.support.Trigger<S,E> , org.springframework.statemachine.support.Message<E> ) ) ; java.util.ListIterator<org.springframework.statemachine.support.Message<E>> . remove ( ) ; return true ; } } } } return false ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.support.StateContext<S,E> < S , E > org.springframework.statemachine.support.StateContext<S,E> ( Message < E > org.springframework.statemachine.support.Message<E> , Transition < S , E > org.springframework.statemachine.support.Transition<S,E> , StateMachine < S , E > org.springframework.statemachine.support.StateMachine<S,E> ) { MessageHeaders org.springframework.statemachine.support.MessageHeaders = org.springframework.statemachine.support.Message<E> != null ? org.springframework.statemachine.support.Message<E> . getHeaders ( ) : new MessageHeaders ( new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( org.springframework.statemachine.support.MessageHeaders ) ; if ( ! java.util.Map<java.lang.String,java.lang.Object> . boolean ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( StateMachineSystemConstants . STATEMACHINE_IDENTIFIER , org.springframework.statemachine.support.StateMachine<S,E> . getUuid ( ) ) ; } return new DefaultStateContext < S , E > ( Stage . TRANSITION , org.springframework.statemachine.support.Message<E> , new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.statemachine.support.StateMachine<S,E> . getExtendedState ( ) , org.springframework.statemachine.support.Transition<S,E> , org.springframework.statemachine.support.StateMachine<S,E> , null , null , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( final Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> : java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . keySet ( ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> instanceof TimerTrigger ) { ( ( TimerTrigger < ? , ? > ) org.springframework.statemachine.support.Trigger<S,E> ) . addTriggerListener ( new TriggerListener ( ) { @ java.lang.Override public void void ( ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.Trigger<S,E> ) ; } java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . boolean ( new org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem ( org.springframework.statemachine.support.Trigger<S,E> , null ) ) ; if ( isRunning ( ) ) { void ( ) ; } } } ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.statemachine.support.Log . isDebugEnabled ( ) ) { org.springframework.statemachine.support.Log . debug ( STRING + org.springframework.statemachine.support.Trigger<S,E> ) ; } java.util.Queue<org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem> . boolean ( new org.springframework.statemachine.support.DefaultStateMachineExecutor<S,E>.TriggerQueueItem ( org.springframework.statemachine.support.Trigger<S,E> , null ) ) ; if ( isRunning ( ) ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( final Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> : java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . keySet ( ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.statemachine.support.Trigger<S,E> ) . start ( ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( final Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> : java.util.Map<org.springframework.statemachine.support.Trigger<S,E>,org.springframework.statemachine.support.Transition<S,E>> . keySet ( ) ) { if ( org.springframework.statemachine.support.Trigger<S,E> instanceof Lifecycle ) { ( ( Lifecycle ) org.springframework.statemachine.support.Trigger<S,E> ) . stop ( ) ; } } }  <METHOD_END>
<METHOD_START> public void ( Trigger < S , E > org.springframework.statemachine.support.Trigger<S,E> , Message < E > org.springframework.statemachine.support.Message<E> ) { this . org.springframework.statemachine.support.Trigger<S,E> = org.springframework.statemachine.support.Trigger<S,E> ; this . org.springframework.statemachine.support.Message<E> = org.springframework.statemachine.support.Message<E> ; }  <METHOD_END>
