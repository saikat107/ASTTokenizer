<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . registerSingleton ( STRING , null ) ; new GenericApplicationContext ( org.springframework.context.support.DefaultListableBeanFactory ) . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.String .class ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertEquals ( STRING , org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.String .class ) ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.CharSequence .class ) ) ; try { assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.Object .class ) ) ; fail ( STRING ) ; } catch ( NoUniqueBeanDefinitionException org.springframework.context.support.NoUniqueBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.String .class , org.springframework.context.support.GenericApplicationContext :: toString ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.String .class ) ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.CharSequence .class ) ) ; assertEquals ( org.springframework.context.support.GenericApplicationContext . toString ( ) , org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.String .class , RootBeanDefinition . SCOPE_PROTOTYPE , org.springframework.context.support.GenericApplicationContext :: toString ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertNotSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) ) ; assertEquals ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.String .class ) ) ; assertEquals ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.CharSequence .class ) ) ; assertEquals ( org.springframework.context.support.GenericApplicationContext . toString ( ) , org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.support.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.String .class ) ) ; org.springframework.context.support.GenericApplicationContext . refresh ( ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.String .class ) ) ; assertSame ( org.springframework.context.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . getBean ( java.lang.String .class ) ) ; org.springframework.context.support.GenericApplicationContext . close ( ) ; try { assertSame ( org.springframework.context.support.GenericApplicationContext . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getBean ( java.lang.String .class ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } try { assertSame ( org.springframework.context.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . getBean ( STRING ) , org.springframework.context.support.GenericApplicationContext . getAutowireCapableBeanFactory ( ) . getBean ( java.lang.String .class ) ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } }  <METHOD_END>
