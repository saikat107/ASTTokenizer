<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.converter.StringMessageConverter = new StringMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.messaging.converter.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<java.lang.String> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . setHeader ( MessageHeaders . CONTENT_TYPE , new MimeType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . build ( ) ; assertEquals ( java.lang.String , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . build ( ) ; assertEquals ( java.lang.String , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; assertNull ( this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.Integer .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < byte [] > org.springframework.messaging.converter.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . setHeader ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) . build ( ) ; assertEquals ( STRING , this . org.springframework.messaging.converter.StringMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<byte[]> , java.lang.String .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . CONTENT_TYPE , MimeTypeUtils . TEXT_PLAIN ) ; MessageHeaders org.springframework.messaging.converter.MessageHeaders = new MessageHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; Message < ? > org.springframework.messaging.converter.Message<?> = this . org.springframework.messaging.converter.StringMessageConverter . toMessage ( STRING , org.springframework.messaging.converter.MessageHeaders ) ; assertEquals ( STRING , new java.lang.String ( ( ( byte [] ) org.springframework.messaging.converter.Message<> . getPayload ( ) ) ) ) ; }  <METHOD_END>
