<METHOD_START> public void ( QueryMethod org.springframework.data.keyvalue.repository.query.QueryMethod , EvaluationContextProvider org.springframework.data.keyvalue.repository.query.EvaluationContextProvider , KeyValueOperations org.springframework.data.keyvalue.repository.query.KeyValueOperations , java.lang.Class<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > java.lang.Class<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> ) { Assert . notNull ( org.springframework.data.keyvalue.repository.query.QueryMethod , STRING ) ; Assert . notNull ( org.springframework.data.keyvalue.repository.query.EvaluationContextProvider , STRING ) ; Assert . notNull ( org.springframework.data.keyvalue.repository.query.KeyValueOperations , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . org.springframework.data.keyvalue.repository.query.QueryMethod = org.springframework.data.keyvalue.repository.query.QueryMethod ; this . org.springframework.data.keyvalue.repository.query.KeyValueOperations = org.springframework.data.keyvalue.repository.query.KeyValueOperations ; this . org.springframework.data.keyvalue.repository.query.EvaluationContextProvider = org.springframework.data.keyvalue.repository.query.EvaluationContextProvider ; this . java.lang.Class<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { ParameterAccessor org.springframework.data.keyvalue.repository.query.ParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; KeyValueQuery < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> = org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( java.lang.Object[] ) ; ResultProcessor org.springframework.data.keyvalue.repository.query.ResultProcessor = org.springframework.data.keyvalue.repository.query.QueryMethod . getResultProcessor ( ) . withDynamicProjection ( org.springframework.data.keyvalue.repository.query.ParameterAccessor ) ; return org.springframework.data.keyvalue.repository.query.ResultProcessor . processResult ( java.lang.Object ( java.lang.Object[] , org.springframework.data.keyvalue.repository.query.KeyValueQuery<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] , KeyValueQuery < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ) { if ( org.springframework.data.keyvalue.repository.query.QueryMethod . isPageQuery ( ) || org.springframework.data.keyvalue.repository.query.QueryMethod . isSliceQuery ( ) ) { Pageable org.springframework.data.keyvalue.repository.query.Pageable = ( Pageable ) java.lang.Object[] [ org.springframework.data.keyvalue.repository.query.QueryMethod . getParameters ( ) . getPageableIndex ( ) ] ; org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setOffset ( org.springframework.data.keyvalue.repository.query.Pageable . getOffset ( ) ) ; org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setRows ( org.springframework.data.keyvalue.repository.query.Pageable . getPageSize ( ) ) ; java.lang.Iterable<?> < ? > java.lang.Iterable<?> = this . org.springframework.data.keyvalue.repository.query.KeyValueOperations . find ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> , org.springframework.data.keyvalue.repository.query.QueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; long long = org.springframework.data.keyvalue.repository.query.QueryMethod . isSliceQuery ( ) ? NUMBER : org.springframework.data.keyvalue.repository.query.KeyValueOperations . count ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> , org.springframework.data.keyvalue.repository.query.QueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; return new PageImpl ( IterableConverter . toList ( java.lang.Iterable<> ) , org.springframework.data.keyvalue.repository.query.Pageable , long ) ; } else if ( org.springframework.data.keyvalue.repository.query.QueryMethod . isCollectionQuery ( ) ) { return this . org.springframework.data.keyvalue.repository.query.KeyValueOperations . find ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> , org.springframework.data.keyvalue.repository.query.QueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; } else if ( org.springframework.data.keyvalue.repository.query.QueryMethod . isQueryForEntity ( ) ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> = this . org.springframework.data.keyvalue.repository.query.KeyValueOperations . find ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> , org.springframework.data.keyvalue.repository.query.QueryMethod . getEntityInformation ( ) . getJavaType ( ) ) ; return java.lang.Iterable<> . java.util.Iterator<> ( ) . boolean ( ) ? java.lang.Iterable<> . java.util.Iterator<> ( ) . next ( ) : null ; } throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( java.lang.Object [] java.lang.Object[] ) { return org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( new ParametersParameterAccessor ( org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ) , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( KeyValueQuery < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> , java.lang.Object [] java.lang.Object[] ) { ParametersParameterAccessor org.springframework.data.keyvalue.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; java.lang.Object java.lang.Object = org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . getCritieria ( ) ; if ( java.lang.Object instanceof SpelCriteria || java.lang.Object instanceof SpelExpression ) { SpelExpression org.springframework.data.keyvalue.repository.query.SpelExpression = org.springframework.data.keyvalue.repository.query.SpelExpression ( java.lang.Object ) ; EvaluationContext org.springframework.data.keyvalue.repository.query.EvaluationContext = this . org.springframework.data.keyvalue.repository.query.EvaluationContextProvider . getEvaluationContext ( org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getParameters ( ) , java.lang.Object[] ) ; java.lang.Object = new SpelCriteria ( org.springframework.data.keyvalue.repository.query.SpelExpression , org.springframework.data.keyvalue.repository.query.EvaluationContext ) ; } KeyValueQuery < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> = new KeyValueQuery ( java.lang.Object ) ; Pageable org.springframework.data.keyvalue.repository.query.Pageable = org.springframework.data.keyvalue.repository.query.ParametersParameterAccessor . getPageable ( ) ; Sort org.springframework.data.keyvalue.repository.query.Sort = org.springframework.data.keyvalue.repository.query.ParametersParameterAccessor . getSort ( ) ; org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setOffset ( org.springframework.data.keyvalue.repository.query.Pageable . toOptional ( ) . map ( Pageable :: getOffset ) . orElse ( - NUMBER ) ) ; if ( org.springframework.data.keyvalue.repository.query.Pageable . isPaged ( ) ) { org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setRows ( org.springframework.data.keyvalue.repository.query.Pageable . getPageSize ( ) ) ; } else if ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . getRows ( ) >= NUMBER ) { org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setRows ( org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . getRows ( ) ) ; } org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setSort ( org.springframework.data.keyvalue.repository.query.Sort == null || Sort . unsorted ( ) . equals ( org.springframework.data.keyvalue.repository.query.Sort ) ? org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . getSort ( ) : org.springframework.data.keyvalue.repository.query.Sort ) ; return org.springframework.data.keyvalue.repository.query.KeyValueQuery<> ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.keyvalue.repository.query.SpelExpression org.springframework.data.keyvalue.repository.query.SpelExpression ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof SpelExpression ) { return ( SpelExpression ) java.lang.Object ; } if ( java.lang.Object instanceof SpelCriteria ) { return org.springframework.data.keyvalue.repository.query.SpelExpression ( ( ( SpelCriteria ) java.lang.Object ) . getExpression ( ) ) ; } throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> ( ParameterAccessor org.springframework.data.keyvalue.repository.query.ParameterAccessor ) { PartTree org.springframework.data.keyvalue.repository.query.PartTree = new PartTree ( org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getName ( ) , org.springframework.data.keyvalue.repository.query.QueryMethod ( ) . getEntityInformation ( ) . getJavaType ( ) ) ; java.lang.reflect.Constructor<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > java.lang.reflect.Constructor<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> = ( java.lang.reflect.Constructor<? extends org.springframework.data.keyvalue.repository.query.AbstractQueryCreator<?,?>> < ? extends AbstractQueryCreator < ? , ? > > ) ClassUtils . getConstructorIfAvailable ( java.lang.Class<> , PartTree .class , ParameterAccessor .class ) ; KeyValueQuery < ? > org.springframework.data.keyvalue.repository.query.KeyValueQuery<?> = ( KeyValueQuery < ? > ) BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> , org.springframework.data.keyvalue.repository.query.PartTree , org.springframework.data.keyvalue.repository.query.ParameterAccessor ) . createQuery ( ) ; if ( org.springframework.data.keyvalue.repository.query.PartTree . isLimiting ( ) ) { org.springframework.data.keyvalue.repository.query.KeyValueQuery<> . setRows ( org.springframework.data.keyvalue.repository.query.PartTree . getMaxResults ( ) ) ; } return org.springframework.data.keyvalue.repository.query.KeyValueQuery<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.keyvalue.repository.query.QueryMethod org.springframework.data.keyvalue.repository.query.QueryMethod ( ) { return org.springframework.data.keyvalue.repository.query.QueryMethod ; }  <METHOD_END>
