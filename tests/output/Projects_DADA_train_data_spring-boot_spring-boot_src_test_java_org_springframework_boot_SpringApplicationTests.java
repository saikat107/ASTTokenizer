<METHOD_START> private org.springframework.boot.Environment org.springframework.boot.Environment ( ) { if ( this . org.springframework.boot.ConfigurableApplicationContext != null ) { return this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { this . java.lang.String = java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . java.lang.String == null ) { java.lang.System . java.lang.String ( STRING ) ; } else { java.lang.System . java.lang.String ( STRING , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.ConfigurableApplicationContext != null ) { this . org.springframework.boot.ConfigurableApplicationContext . close ( ) ; } java.lang.System . java.lang.String ( STRING ) ; java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; new SpringApplication ( ( java.lang.Object [] ) null ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; new SpringApplication ( ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.ExpectedException . expectMessage ( STRING ) ; new SpringApplication ( org.springframework.boot.SpringApplicationTests.InaccessibleConfiguration .class ) . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = spy ( new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = spy ( new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . containsPattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.MockResourceLoader org.springframework.boot.SpringApplicationTests.MockResourceLoader = new org.springframework.boot.SpringApplicationTests.MockResourceLoader ( ) ; org.springframework.boot.SpringApplicationTests.MockResourceLoader . void ( STRING , STRING ) ; org.springframework.boot.SpringApplicationTests.MockResourceLoader . void ( STRING , STRING ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setResourceLoader ( org.springframework.boot.SpringApplicationTests.MockResourceLoader ) ; org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.MockResourceLoader org.springframework.boot.SpringApplicationTests.MockResourceLoader = new org.springframework.boot.SpringApplicationTests.MockResourceLoader ( ) ; org.springframework.boot.SpringApplicationTests.MockResourceLoader . void ( STRING , STRING ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setResourceLoader ( org.springframework.boot.SpringApplicationTests.MockResourceLoader ) ; org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = spy ( new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; verify ( org.springframework.boot.SpringApplication , atLeastOnce ( ) ) . setBannerMode ( Banner . Mode . LOG ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME , STRING ) ; SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; java.lang.String java.lang.String = java.lang.System . java.lang.String ( CachedIntrospectionResults . IGNORE_BEANINFO_PROPERTY_NAME ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( SpringApplication .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; assertThat ( ( Banner . Banner ) java.lang.reflect.Field . java.lang.Object ( org.springframework.boot.SpringApplication ) ) . isEqualTo ( Banner . Mode . OFF ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( SpringApplication .class , STRING ) ; java.lang.reflect.Field . void ( true ) ; assertThat ( ( Banner . Banner ) java.lang.reflect.Field . java.lang.Object ( org.springframework.boot.SpringApplication ) ) . isEqualTo ( Banner . Mode . OFF ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getId ( ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setApplicationContextClass ( StaticApplicationContext .class ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isInstanceOf ( StaticApplicationContext .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> < ApplicationContext > java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> = new java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> <> ( ) ; org.springframework.boot.SpringApplication . setInitializers ( java.util.Arrays . java.util.List<T> ( new ApplicationContextInitializer < ConfigurableApplicationContext > ( ) { @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . set ( org.springframework.boot.ConfigurableApplicationContext ) ; } } ) ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isSameAs ( java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . get ( ) ) ; assertThat ( org.springframework.boot.Environment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . set ( org.springframework.boot.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> < SpringApplication > java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> = new java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> <> ( ) ; class ApplicationReadyEventListener implements ApplicationListener < ApplicationReadyEvent > { @ java.lang.Override public void void ( ApplicationReadyEvent org.springframework.boot.ApplicationReadyEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> . set ( org.springframework.boot.ApplicationReadyEvent . getSpringApplication ( ) ) ; } } org.springframework.boot.SpringApplication . addListeners ( new ApplicationReadyEventListener ( ) ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( org.springframework.boot.SpringApplication ) . isSameAs ( java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationReadyEvent org.springframework.boot.ApplicationReadyEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.SpringApplication> . set ( org.springframework.boot.ApplicationReadyEvent . getSpringApplication ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; final java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> < ApplicationContext > java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> = new java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> <> ( ) ; class InitializerListener implements ApplicationListener < ContextRefreshedEvent > { @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.ContextRefreshedEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . set ( org.springframework.boot.ContextRefreshedEvent . getApplicationContext ( ) ) ; } } org.springframework.boot.SpringApplication . setListeners ( java.util.Arrays . java.util.List<> ( new InitializerListener ( ) ) ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isSameAs ( java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . get ( ) ) ; assertThat ( org.springframework.boot.Environment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ContextRefreshedEvent org.springframework.boot.ContextRefreshedEvent ) { java.util.concurrent.atomic.AtomicReference<org.springframework.boot.ApplicationContext> . set ( org.springframework.boot.ContextRefreshedEvent . getApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; final java.util.List<org.springframework.boot.ApplicationEvent> < ApplicationEvent > java.util.List<org.springframework.boot.ApplicationEvent> = new java.util.ArrayList<org.springframework.boot.ApplicationEvent> <> ( ) ; class ApplicationRunningEventListener implements ApplicationListener < ApplicationEvent > { @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.List<org.springframework.boot.ApplicationEvent> . add ( ( org.springframework.boot.ApplicationEvent ) ) ; } } org.springframework.boot.SpringApplication . addListeners ( new ApplicationRunningEventListener ( ) ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( org . springframework . boot . org.springframework.boot.context . org.springframework.boot.context . org.springframework.boot.context .class ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( ApplicationStartingEvent .class ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( ApplicationEnvironmentPreparedEvent .class ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( ApplicationPreparedEvent .class ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( ContextRefreshedEvent .class ) ; assertThat ( java.util.List<org.springframework.boot.ApplicationEvent> . get ( NUMBER ) ) . isInstanceOf ( ApplicationReadyEvent .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.List<org.springframework.boot.ApplicationEvent> . add ( ( org.springframework.boot.ApplicationEvent ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isInstanceOf ( AnnotationConfigApplicationContext .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . SERVLET ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isInstanceOf ( AnnotationConfigServletWebServerApplicationContext .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleReactiveWebConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . REACTIVE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isInstanceOf ( ReactiveWebServerApplicationContext .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; verify ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . org.springframework.boot.BeanDefinitionLoader ( ) ) . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ResourceLoader org.springframework.boot.ResourceLoader = new DefaultResourceLoader ( ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setResourceLoader ( org.springframework.boot.ResourceLoader ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; verify ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . org.springframework.boot.BeanDefinitionLoader ( ) ) . setResourceLoader ( org.springframework.boot.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResourceLoader org.springframework.boot.ResourceLoader = new DefaultResourceLoader ( ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.ResourceLoader , org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; verify ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . org.springframework.boot.BeanDefinitionLoader ( ) ) . setResourceLoader ( org.springframework.boot.ResourceLoader ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class ) ; BeanNameGenerator org.springframework.boot.BeanNameGenerator = new DefaultBeanNameGenerator ( ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setBeanNameGenerator ( org.springframework.boot.BeanNameGenerator ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; verify ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . org.springframework.boot.BeanDefinitionLoader ( ) ) . setBeanNameGenerator ( org.springframework.boot.BeanNameGenerator ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.ConfigurableApplicationContext . getBean ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR ) ; assertThat ( java.lang.Object ) . isSameAs ( org.springframework.boot.BeanNameGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; BeanNameGenerator org.springframework.boot.BeanNameGenerator = new DefaultBeanNameGenerator ( ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setBeanNameGenerator ( org.springframework.boot.BeanNameGenerator ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; verify ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . org.springframework.boot.BeanDefinitionLoader ( ) ) . setBeanNameGenerator ( org.springframework.boot.BeanNameGenerator ) ; java.lang.Object java.lang.Object = this . org.springframework.boot.ConfigurableApplicationContext . getBean ( AnnotationConfigUtils . CONFIGURATION_BEAN_NAME_GENERATOR ) ; assertThat ( java.lang.Object ) . isSameAs ( org.springframework.boot.BeanNameGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment ) . has ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableEnvironment> ( CommandLinePropertySource .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) . addFirst ( new MapPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING , STRING ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment ) . has ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableEnvironment> ( CompositePropertySource .class , STRING ) ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setAdditionalProfiles ( STRING ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . acceptsProfiles ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setAdditionalProfiles ( STRING ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getActiveProfiles ( ) ) . containsExactly ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setAdditionalProfiles ( STRING ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . setAddCommandLineProperties ( false ) ; ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment = new StandardEnvironment ( ) ; org.springframework.boot.SpringApplication . setEnvironment ( org.springframework.boot.ConfigurableEnvironment ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( org.springframework.boot.ConfigurableEnvironment ) . doesNotHave ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableEnvironment> ( PropertySource .class , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.CommandLineRunConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . has ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableApplicationContext> ( STRING ) ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . has ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableApplicationContext> ( STRING ) ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . has ( org.springframework.boot.Condition<org.springframework.boot.ConfigurableApplicationContext> ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object [] java.lang.Object[] = { org.springframework.boot.SpringApplicationTests.ExampleConfig .class , STRING , org.springframework.boot.SpringApplicationTests.TestCommandLineRunner .class } ; org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( java.lang.Object[] ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . void ( true ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = org.springframework.boot.SpringApplicationTests.TestSpringApplication . getSources ( ) ; assertThat ( java.util.Set<java.lang.Object> . java.lang.Object[] ( ) ) . isEqualTo ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object [] java.lang.Object[] = { STRING } ; org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( java.lang.Object[] ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.ConfigurableApplicationContext = SpringApplication . run ( new java.lang.Object [] { org.springframework.boot.SpringApplicationTests.ExampleWebConfig .class , java.lang.Object .class } , new java.lang.String [ NUMBER ] ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isNotNull ( ) ; assertThat ( SpringApplication . exit ( this . org.springframework.boot.ConfigurableApplicationContext ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.ExitCodeListener org.springframework.boot.SpringApplicationTests.ExitCodeListener = new org.springframework.boot.SpringApplicationTests.ExitCodeListener ( ) ; org.springframework.boot.SpringApplication . addListeners ( org.springframework.boot.SpringApplicationTests.ExitCodeListener ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isNotNull ( ) ; assertThat ( SpringApplication . exit ( this . org.springframework.boot.ConfigurableApplicationContext , new ExitCodeGenerator ( ) { @ java.lang.Override public int int ( ) { return NUMBER ; } } ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.SpringApplicationTests.ExitCodeListener . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = mock ( SpringBootExceptionHandler .class ) ; SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExitCodeCommandLineRunConfig .class ) { @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; } } ; org.springframework.boot.SpringApplicationTests.ExitCodeListener org.springframework.boot.SpringApplicationTests.ExitCodeListener = new org.springframework.boot.SpringApplicationTests.ExitCodeListener ( ) ; org.springframework.boot.SpringApplication . addListeners ( org.springframework.boot.SpringApplicationTests.ExitCodeListener ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; try { org.springframework.boot.SpringApplication . run ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} verify ( org.springframework.boot.SpringBootExceptionHandler ) . registerExitCode ( NUMBER ) ; assertThat ( org.springframework.boot.SpringApplicationTests.ExitCodeListener . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = mock ( SpringBootExceptionHandler .class ) ; SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.MappedExitCodeCommandLineRunConfig .class ) { @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; } } ; org.springframework.boot.SpringApplicationTests.ExitCodeListener org.springframework.boot.SpringApplicationTests.ExitCodeListener = new org.springframework.boot.SpringApplicationTests.ExitCodeListener ( ) ; org.springframework.boot.SpringApplication . addListeners ( org.springframework.boot.SpringApplicationTests.ExitCodeListener ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; try { org.springframework.boot.SpringApplication . run ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} verify ( org.springframework.boot.SpringBootExceptionHandler ) . registerExitCode ( NUMBER ) ; assertThat ( org.springframework.boot.SpringApplicationTests.ExitCodeListener . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler = mock ( SpringBootExceptionHandler .class ) ; SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.RefreshFailureConfig .class ) { @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; } } ; org.springframework.boot.SpringApplicationTests.ExitCodeListener org.springframework.boot.SpringApplicationTests.ExitCodeListener = new org.springframework.boot.SpringApplicationTests.ExitCodeListener ( ) ; org.springframework.boot.SpringApplication . addListeners ( org.springframework.boot.SpringApplicationTests.ExitCodeListener ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; try { org.springframework.boot.SpringApplication . run ( ) ; fail ( STRING ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) {		} ArgumentCaptor < java.lang.RuntimeException > org.springframework.boot.ArgumentCaptor<java.lang.RuntimeException> = ArgumentCaptor . forClass ( java.lang.RuntimeException .class ) ; verify ( org.springframework.boot.SpringBootExceptionHandler ) . registerLoggedException ( org.springframework.boot.ArgumentCaptor<java.lang.RuntimeException> . capture ( ) ) ; assertThat ( org.springframework.boot.ArgumentCaptor<java.lang.RuntimeException> . getValue ( ) ) . hasCauseInstanceOf ( org.springframework.boot.SpringApplicationTests.RefreshFailureException .class ) ; assertThat ( this . org.springframework.boot.InternalOutputCapture . toString ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override org.springframework.boot.SpringBootExceptionHandler org.springframework.boot.SpringBootExceptionHandler ( ) { return org.springframework.boot.SpringBootExceptionHandler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setDefaultProperties ( StringUtils . splitArrayElementsIntoProperties ( new java.lang.String [] { STRING , STRING } , STRING ) ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( STRING , STRING , STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext ) . isInstanceOf ( AnnotationConfigApplicationContext .class ) ; assertThat ( org.springframework.boot.Environment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.Environment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( STRING ) ; assertThat ( org.springframework.boot.SpringApplicationTests.TestSpringApplication . Banner.Mode ( ) ) . isEqualTo ( Banner . Mode . OFF ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setApplicationContextClass ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext .class ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; org.springframework.boot.SpringApplicationTests.SpyApplicationContext org.springframework.boot.SpringApplicationTests.SpyApplicationContext = ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext ) this . org.springframework.boot.ConfigurableApplicationContext ; verify ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext . org.springframework.boot.ConfigurableApplicationContext ( ) ) . registerShutdownHook ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class , org.springframework.boot.SpringApplicationTests.ListenerConfig .class ) ; org.springframework.boot.SpringApplication . setApplicationContextClass ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext .class ) ; final java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> < ApplicationEvent > java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> = new java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> <> ( ) ; org.springframework.boot.SpringApplication . addListeners ( new ApplicationListener < ApplicationEvent > ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> . add ( org.springframework.boot.ApplicationEvent ) ; } } ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> ) . hasAtLeastOneElementOfType ( ApplicationPreparedEvent .class ) ; assertThat ( java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> ) . hasAtLeastOneElementOfType ( ContextRefreshedEvent .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> . add ( org.springframework.boot.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class , org.springframework.boot.SpringApplicationTests.ListenerConfig .class , org.springframework.boot.SpringApplicationTests.Multicaster .class ) ; org.springframework.boot.SpringApplication . setApplicationContextClass ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext .class ) ; final java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> < ApplicationEvent > java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> = new java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> <> ( ) ; org.springframework.boot.SpringApplication . addListeners ( new ApplicationListener < ApplicationEvent > ( ) { @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> . add ( org.springframework.boot.ApplicationEvent ) ; } } ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; assertThat ( java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> ) . hasAtLeastOneElementOfType ( ApplicationPreparedEvent .class ) ; assertThat ( java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> ) . hasAtLeastOneElementOfType ( ContextRefreshedEvent .class ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.ApplicationEvent ) { java.util.LinkedHashSet<org.springframework.boot.ApplicationEvent> . add ( org.springframework.boot.ApplicationEvent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( ) { ApplicationListener < ApplicationEvent > org.springframework.boot.ApplicationListener<org.springframework.boot.ApplicationEvent> = this . org.springframework.boot.ConfigurableApplicationContext . getBean ( STRING , ApplicationListener .class ) ; verify ( org.springframework.boot.ApplicationListener<org.springframework.boot.ApplicationEvent> ) . onApplicationEvent ( isA ( ContextRefreshedEvent .class ) ) ; verify ( org.springframework.boot.ApplicationListener<org.springframework.boot.ApplicationEvent> ) . onApplicationEvent ( isA ( ApplicationReadyEvent .class ) ) ; verifyNoMoreInteractions ( org.springframework.boot.ApplicationListener<org.springframework.boot.ApplicationEvent> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplication . setApplicationContextClass ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext .class ) ; org.springframework.boot.SpringApplication . setRegisterShutdownHook ( false ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplication . run ( ) ; org.springframework.boot.SpringApplicationTests.SpyApplicationContext org.springframework.boot.SpringApplicationTests.SpyApplicationContext = ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext ) this . org.springframework.boot.ConfigurableApplicationContext ; verify ( org.springframework.boot.SpringApplicationTests.SpyApplicationContext . org.springframework.boot.ConfigurableApplicationContext ( ) , never ( ) ) . registerShutdownHook ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setHeadless ( false ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; assertThat ( java.lang.System . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( STRING , STRING , STRING ) ; ApplicationArguments org.springframework.boot.ApplicationArguments = this . org.springframework.boot.ConfigurableApplicationContext . getBean ( ApplicationArguments .class ) ; assertThat ( org.springframework.boot.ApplicationArguments . getNonOptionArgs ( ) ) . containsExactly ( STRING , STRING ) ; assertThat ( org.springframework.boot.ApplicationArguments . containsOption ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.SpringApplicationTests.TestSpringApplication org.springframework.boot.SpringApplicationTests.TestSpringApplication = new org.springframework.boot.SpringApplicationTests.TestSpringApplication ( org.springframework.boot.SpringApplicationTests.ExampleConfig .class ) ; org.springframework.boot.SpringApplicationTests.TestSpringApplication . addListeners ( new ApplicationListener < ApplicationEnvironmentPreparedEvent > ( ) { @ java.lang.Override public void void ( ApplicationEnvironmentPreparedEvent org.springframework.boot.ApplicationEnvironmentPreparedEvent ) { assertThat ( org.springframework.boot.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) ) . isInstanceOf ( StandardServletEnvironment .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) , STRING ) ; org.springframework.boot.ApplicationEnvironmentPreparedEvent . getSpringApplication ( ) . setWebApplicationType ( WebApplicationType . NONE ) ; } } ) ; this . org.springframework.boot.ConfigurableApplicationContext = org.springframework.boot.SpringApplicationTests.TestSpringApplication . run ( ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) ) . isNotInstanceOf ( StandardServletEnvironment .class ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.ConfigurableApplicationContext . getEnvironment ( ) . getPropertySources ( ) . iterator ( ) . next ( ) . getName ( ) ) . isEqualTo ( TestPropertySourceUtils . INLINED_PROPERTIES_PROPERTY_SOURCE_NAME ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEnvironmentPreparedEvent org.springframework.boot.ApplicationEnvironmentPreparedEvent ) { assertThat ( org.springframework.boot.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) ) . isInstanceOf ( StandardServletEnvironment .class ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) , STRING ) ; org.springframework.boot.ApplicationEnvironmentPreparedEvent . getSpringApplication ( ) . setWebApplicationType ( WebApplicationType . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.ThreadGroup java.lang.ThreadGroup = new java.lang.ThreadGroup ( STRING ) ; java.lang.Thread java.lang.Thread = new java.lang.Thread ( java.lang.ThreadGroup , STRING ) { @ java.lang.Override public void void ( ) { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.FailingConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . run ( ) ; } } ; java.lang.Thread . void ( ) ; java.lang.Thread . void ( NUMBER ) ; int int = StringUtils . countOccurrencesOf ( this . org.springframework.boot.InternalOutputCapture . toString ( ) , STRING ) ; assertThat ( int ) . as ( STRING ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { SpringApplication org.springframework.boot.SpringApplication = new SpringApplication ( org.springframework.boot.SpringApplicationTests.FailingConfig .class ) ; org.springframework.boot.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; org.springframework.boot.SpringApplication . run ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.Condition<org.springframework.boot.ConfigurableEnvironment> < ConfigurableEnvironment > org.springframework.boot.Condition<org.springframework.boot.ConfigurableEnvironment> ( final java.lang.Class<?> < ? > java.lang.Class<?> , final java.lang.String java.lang.String ) { return new Condition < ConfigurableEnvironment > ( STRING ) { @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { for ( PropertySource < ? > org.springframework.boot.PropertySource<?> : org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) ) { if ( java.lang.Class<> . boolean ( org.springframework.boot.PropertySource<> ) && ( java.lang.String == null || java.lang.String . boolean ( org.springframework.boot.PropertySource<> . getName ( ) ) ) ) { return true ; } } return false ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConfigurableEnvironment org.springframework.boot.ConfigurableEnvironment ) { for ( PropertySource < ? > org.springframework.boot.PropertySource<?> : org.springframework.boot.ConfigurableEnvironment . getPropertySources ( ) ) { if ( java.lang.Class<> . boolean ( org.springframework.boot.PropertySource<> ) && ( java.lang.String == null || java.lang.String . boolean ( org.springframework.boot.PropertySource<> . getName ( ) ) ) ) { return true ; } } return false ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.Condition<org.springframework.boot.ConfigurableApplicationContext> < ConfigurableApplicationContext > org.springframework.boot.Condition<org.springframework.boot.ConfigurableApplicationContext> ( final java.lang.String java.lang.String ) { return new Condition < ConfigurableApplicationContext > ( STRING ) { @ java.lang.Override public boolean boolean ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { return org.springframework.boot.ConfigurableApplicationContext . getBean ( java.lang.String , org.springframework.boot.SpringApplicationTests.AbstractTestRunner .class ) . hasRun ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ) { return org.springframework.boot.ConfigurableApplicationContext . getBean ( java.lang.String , org.springframework.boot.SpringApplicationTests.AbstractTestRunner .class ) . hasRun ( ) ; }  <METHOD_END>
<METHOD_START> private void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.ConfigurableApplicationContext . registerShutdownHook ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.ConfigurableApplicationContext org.springframework.boot.ConfigurableApplicationContext ( ) { return this . org.springframework.boot.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Object ... java.lang.Object[] ) { super( java.lang.Object[] ); }  <METHOD_END>
<METHOD_START> void ( ResourceLoader org.springframework.boot.ResourceLoader , java.lang.Object ... java.lang.Object[] ) { super( org.springframework.boot.ResourceLoader , java.lang.Object[] ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader ( BeanDefinitionRegistry org.springframework.boot.BeanDefinitionRegistry , java.lang.Object [] java.lang.Object[] ) { if ( this . boolean ) { this . org.springframework.boot.BeanDefinitionLoader = mock ( BeanDefinitionLoader .class ) ; } else { this . org.springframework.boot.BeanDefinitionLoader = spy ( super. createBeanDefinitionLoader ( org.springframework.boot.BeanDefinitionRegistry , java.lang.Object[] ) ) ; } return this . org.springframework.boot.BeanDefinitionLoader ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader ( ) { return this . org.springframework.boot.BeanDefinitionLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Banner . Banner Banner.Mode ) { super. setBannerMode ( Banner.Mode ) ; this . Banner.Mode = Banner.Mode ; }  <METHOD_END>
<METHOD_START> public Banner . Banner.Mode Banner.Mode ( ) { return this . Banner.Mode ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.ApplicationListener<?> < ? > org.springframework.boot.ApplicationListener<?> ( ) { return mock ( ApplicationListener .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = AbstractApplicationContext . APPLICATION_EVENT_MULTICASTER_BEAN_NAME ) public org.springframework.boot.ApplicationEventMulticaster org.springframework.boot.ApplicationEventMulticaster ( ) { return spy ( new SimpleApplicationEventMulticaster ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.TomcatServletWebServerFactory org.springframework.boot.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.NettyReactiveWebServerFactory org.springframework.boot.NettyReactiveWebServerFactory ( ) { return new NettyReactiveWebServerFactory ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.HttpHandler org.springframework.boot.HttpHandler ( ) { return ( serverHttpRequest , serverHttpResponse ) -> Mono . empty ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.SpringApplicationTests.TestCommandLineRunner org.springframework.boot.SpringApplicationTests.TestCommandLineRunner ( ) { return new org.springframework.boot.SpringApplicationTests.TestCommandLineRunner ( Ordered . LOWEST_PRECEDENCE , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.SpringApplicationTests.TestApplicationRunner org.springframework.boot.SpringApplicationTests.TestApplicationRunner ( ) { return new org.springframework.boot.SpringApplicationTests.TestApplicationRunner ( Ordered . LOWEST_PRECEDENCE - NUMBER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.SpringApplicationTests.TestCommandLineRunner org.springframework.boot.SpringApplicationTests.TestCommandLineRunner ( ) { return new org.springframework.boot.SpringApplicationTests.TestCommandLineRunner ( Ordered . HIGHEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.CommandLineRunner org.springframework.boot.CommandLineRunner ( ) { return new CommandLineRunner ( ) { @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.IllegalStateException ( new org.springframework.boot.SpringApplicationTests.ExitStatusException ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.IllegalStateException ( new org.springframework.boot.SpringApplicationTests.ExitStatusException ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.CommandLineRunner org.springframework.boot.CommandLineRunner ( ) { return new CommandLineRunner ( ) { @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.IllegalStateException ( ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) throws java.lang.Exception { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.ExitCodeExceptionMapper org.springframework.boot.ExitCodeExceptionMapper ( ) { return new ExitCodeExceptionMapper ( ) { @ java.lang.Override public int int ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.IllegalStateException ) { return NUMBER ; } return NUMBER ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.IllegalStateException ) { return NUMBER ; } return NUMBER ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { throw new org.springframework.boot.SpringApplicationTests.RefreshFailureException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> void ( int int , java.lang.String ... java.lang.String[] ) { this . java.lang.String[] = java.lang.String[] ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.boot.ApplicationContext )				throws org.springframework.boot.BeansException { this . org.springframework.boot.ApplicationContext = org.springframework.boot.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { this . boolean = true ; for ( java.lang.String java.lang.String : this . java.lang.String[] ) { org.springframework.boot.SpringApplicationTests.AbstractTestRunner org.springframework.boot.SpringApplicationTests.AbstractTestRunner = this . org.springframework.boot.ApplicationContext . getBean ( java.lang.String , org.springframework.boot.SpringApplicationTests.AbstractTestRunner .class ) ; assertThat ( org.springframework.boot.SpringApplicationTests.AbstractTestRunner . boolean ( ) ) . isTrue ( ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> void ( int int , java.lang.String ... java.lang.String[] ) { super( int , java.lang.String[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { void ( ) ; }  <METHOD_END>
<METHOD_START> void ( int int , java.lang.String ... java.lang.String[] ) { super( int , java.lang.String[] ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationArguments org.springframework.boot.ApplicationArguments ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ExitCodeEvent org.springframework.boot.ExitCodeEvent ) { this . int = org.springframework.boot.ExitCodeEvent . getExitCode ( ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.boot.Resource> . put ( java.lang.String , new ClassPathResource ( java.lang.String , java.lang.Class<? extends org.springframework.boot.SpringApplicationTests.MockResourceLoader> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.Resource org.springframework.boot.Resource ( java.lang.String java.lang.String ) { Resource org.springframework.boot.Resource = this . java.util.Map<java.lang.String,org.springframework.boot.Resource> . get ( java.lang.String ) ; return ( org.springframework.boot.Resource == null ? new ClassPathResource ( STRING ) : org.springframework.boot.Resource ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return java.lang.Class<? extends org.springframework.boot.SpringApplicationTests.MockResourceLoader> ( ) . java.lang.ClassLoader ( ) ; }  <METHOD_END>
