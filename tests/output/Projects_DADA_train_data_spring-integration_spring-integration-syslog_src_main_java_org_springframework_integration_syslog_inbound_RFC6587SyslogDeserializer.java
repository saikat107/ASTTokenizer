<METHOD_START> public void ( ) { this . org.springframework.integration.syslog.inbound.Deserializer<byte[]> = new ByteArrayLfSerializer ( ) ; }  <METHOD_END>
<METHOD_START> public void ( Deserializer < byte [] > org.springframework.integration.syslog.inbound.Deserializer<byte[]> ) { this . org.springframework.integration.syslog.inbound.Deserializer<byte[]> = org.springframework.integration.syslog.inbound.Deserializer<byte[]> ; }  <METHOD_END>
<METHOD_START> public void void ( RFC5424SyslogParser org.springframework.integration.syslog.inbound.RFC5424SyslogParser ) { this . org.springframework.integration.syslog.inbound.RFC5424SyslogParser = org.springframework.integration.syslog.inbound.RFC5424SyslogParser ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { java.io.DataInputStream java.io.DataInputStream = new java.io.DataInputStream ( java.io.InputStream ) ; java.lang.String java.lang.String ; int int = NUMBER ; boolean boolean = false ; int int = java.io.DataInputStream . int ( ) ; if ( boolean ( int ) ) { int = int ( java.io.DataInputStream , int ) ; Assert . state ( int > NUMBER , STRING ) ; byte [] byte[] = new byte [ int ] ; try { java.io.DataInputStream . void ( byte[] ) ; } catch ( java.io.EOFException java.io.EOFException ) { boolean = true ; } java.lang.String = new java.lang.String ( byte[] , java.lang.String ( ) ) ; } else if ( int == '<' ) { byte [] byte[] = this . org.springframework.integration.syslog.inbound.Deserializer<byte[]> . deserialize ( java.io.InputStream ) ; java.lang.String = STRING + new java.lang.String ( byte[] , java.lang.String ( ) ) ; } else if ( int < NUMBER ) { throw new SoftEndOfStreamException ( ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Integer . java.lang.String ( int ) ) ; } return this . org.springframework.integration.syslog.inbound.RFC5424SyslogParser . parse ( java.lang.String , int , boolean ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( int int ) { return int >= NUMBER && int <= NUMBER ; }  <METHOD_END>
<METHOD_START> private int int ( java.io.DataInputStream java.io.DataInputStream , int int ) throws java.io.IOException { int int = int & NUMBER ; int int ; while ( boolean ( ( int = java.io.DataInputStream . int ( ) ) ) ) { int = int * NUMBER + ( int & NUMBER ) ; } return int ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
