<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests10.Config1 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , StateMachine .class ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.docs.DocsConfigurationSampleTests10.Config2 .class ) ; context . refresh ( ) ; @ java.lang.SuppressWarnings ( STRING ) StateMachineFactory < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineFactory<java.lang.String,java.lang.String> = context . getBean ( StateMachineFactory .class ) ; StateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> = org.springframework.statemachine.docs.StateMachineFactory<java.lang.String,java.lang.String> . getStateMachine ( STRING ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . start ( ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getId ( ) , is ( STRING ) ) ; org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . sendEvent ( STRING ) ; assertThat ( org.springframework.statemachine.docs.StateMachine<java.lang.String,java.lang.String> . getState ( ) . getIds ( ) , containsInAnyOrder ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . machineId ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> )				throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . machineId ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.docs.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.docs.AnnotationConfigApplicationContext org.springframework.statemachine.docs.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
