<METHOD_START> @ Test public void void ( ) { try { org.springframework.data.jpa.repository.EntityManager . createQuery ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { } try { org.springframework.data.jpa.repository.EntityManager . createNamedQuery ( STRING ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) @ Test @ Ignore public void void ( ) { flushTestUsers ( ) ; CriteriaBuilder org.springframework.data.jpa.repository.CriteriaBuilder = org.springframework.data.jpa.repository.EntityManager . getCriteriaBuilder ( ) ; CriteriaQuery < User > org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaBuilder . createQuery ( User .class ) ; Root < User > org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . from ( User .class ) ; ParameterExpression < java.util.Collection > org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> = org.springframework.data.jpa.repository.CriteriaBuilder . parameter ( java.util.Collection .class ) ; org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> . where ( org.springframework.data.jpa.repository.Root<org.springframework.data.jpa.repository.User> .< java.lang.Integer > get ( STRING ) . in ( org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> ) ) ; TypedQuery < User > org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.EntityManager . createQuery ( org.springframework.data.jpa.repository.CriteriaQuery<org.springframework.data.jpa.repository.User> ) ; org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . setParameter ( org.springframework.data.jpa.repository.ParameterExpression<java.util.Collection> , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; java.util.List<org.springframework.data.jpa.repository.User> < User > java.util.List<org.springframework.data.jpa.repository.User> = org.springframework.data.jpa.repository.TypedQuery<org.springframework.data.jpa.repository.User> . getResultList ( ) ; assertThat ( java.util.List<org.springframework.data.jpa.repository.User> . size ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {}  <METHOD_END>
