<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws java.lang.ClassNotFoundException { return ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.config.BeanFactory ) { if ( org.springframework.beans.factory.config.BeanFactory instanceof ConfigurableBeanFactory ) { this . org.springframework.beans.factory.config.ConfigurableBeanFactory = ( ConfigurableBeanFactory ) org.springframework.beans.factory.config.BeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.beans.factory.config.TypeConverter org.springframework.beans.factory.config.TypeConverter ( ) { if ( this . org.springframework.beans.factory.config.ConfigurableBeanFactory != null ) { return this . org.springframework.beans.factory.config.ConfigurableBeanFactory . getTypeConverter ( ) ; } else { return super. getDefaultTypeConverter ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { prepare ( ) ; java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ) java.lang.Exception { try { return invoke ( ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof java.lang.Exception ) { throw ( java.lang.Exception ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } if ( java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) instanceof java.lang.Error ) { throw ( java.lang.Error ) java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } throw java.lang.reflect.InvocationTargetException ; } }  <METHOD_END>
