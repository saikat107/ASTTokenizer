<METHOD_START> @ Before public void void ( ) { org.springframework.data.solr.core.schema.SolrClient = org.springframework.data.solr.core.schema.EmbeddedSolrServer . getSolrClient ( ) ; org.springframework.data.solr.core.schema.DefaultSchemaOperations = new DefaultSchemaOperations ( java.lang.String , new SolrTemplate ( org.springframework.data.solr.core.schema.EmbeddedSolrServer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.solr.core.schema.DefaultSchemaOperations . getSchemaName ( ) , is ( equalTo ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.DefaultSchemaOperations . readSchema ( ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( STRING ) , is ( equalTo ( newFieldDefinition ( ) . named ( STRING ) . typedAs ( STRING ) . muliValued ( ) . indexed ( ) . create ( ) ) ) ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( STRING ) , is ( equalTo ( FieldDefinition . newFieldDefinition ( ) . named ( STRING ) . typedAs ( STRING ) . stored ( ) . indexed ( ) . required ( ) . create ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FieldDefinition org.springframework.data.solr.core.schema.FieldDefinition = newFieldDefinition ( ) . named ( STRING ) . typedAs ( STRING ) . indexed ( ) . stored ( ) . defaultedTo ( STRING ) . required ( ) . create ( ) ; org.springframework.data.solr.core.schema.DefaultSchemaOperations . addField ( org.springframework.data.solr.core.schema.FieldDefinition ) ; SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.DefaultSchemaOperations . readSchema ( ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( org.springframework.data.solr.core.schema.FieldDefinition . getName ( ) ) , is ( equalTo ( org.springframework.data.solr.core.schema.FieldDefinition ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CopyFieldDefinition org.springframework.data.solr.core.schema.CopyFieldDefinition = newCopyFieldDefinition ( ) . copyFrom ( STRING ) . to ( STRING ) . create ( ) ; org.springframework.data.solr.core.schema.DefaultSchemaOperations . addField ( org.springframework.data.solr.core.schema.CopyFieldDefinition ) ; SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.DefaultSchemaOperations . readSchema ( ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getCopyFields ( ) , hasItem ( org.springframework.data.solr.core.schema.CopyFieldDefinition ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { FieldDefinition org.springframework.data.solr.core.schema.FieldDefinition = newFieldDefinition ( ) . named ( STRING ) . typedAs ( STRING ) . indexed ( ) . stored ( ) . copyTo ( STRING ) . create ( ) ; org.springframework.data.solr.core.schema.DefaultSchemaOperations . addField ( org.springframework.data.solr.core.schema.FieldDefinition ) ; SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.DefaultSchemaOperations . readSchema ( ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getCopyFields ( ) , hasItem ( newCopyFieldDefinition ( ) . copyFrom ( STRING ) . to ( STRING ) . create ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( ) ; org.springframework.data.solr.core.schema.DefaultSchemaOperations . removeField ( STRING ) ; SchemaDefinition org.springframework.data.solr.core.schema.SchemaDefinition = org.springframework.data.solr.core.schema.DefaultSchemaOperations . readSchema ( ) ; assertThat ( org.springframework.data.solr.core.schema.SchemaDefinition . getFieldDefinition ( STRING ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.solr.core.schema.DefaultSchemaOperations . getSchemaVersion ( ) , is ( closeTo ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = SchemaModificationException .class ) public void void ( ) { org.springframework.data.solr.core.schema.DefaultSchemaOperations . removeField ( STRING ) ; }  <METHOD_END>
