<METHOD_START> public void ( ) { void ( STRING , BeanDefinition . SCOPE_SINGLETON ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.Class<> . java.lang.String ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public final void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ScopeMetadata org.springframework.context.annotation.ScopeMetadata ( BeanDefinition org.springframework.context.annotation.BeanDefinition ) { ScopeMetadata org.springframework.context.annotation.ScopeMetadata = new ScopeMetadata ( ) ; org.springframework.context.annotation.ScopeMetadata . setScopeName ( BeanDefinition . SCOPE_PROTOTYPE ) ; if ( org.springframework.context.annotation.BeanDefinition instanceof AnnotatedBeanDefinition ) { AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition = ( AnnotatedBeanDefinition ) org.springframework.context.annotation.BeanDefinition ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) . getAnnotationTypes ( ) ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) . getMetaAnnotationTypes ( java.lang.String ) ; if ( java.util.Set<java.lang.String> . boolean ( STRING ) ) { if ( java.lang.String != null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.context.annotation.BeanDefinition . getBeanClassName ( ) + STRING + java.lang.String + STRING + java.lang.String ) ; } java.lang.String = java.lang.String ; java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String ) ; } org.springframework.context.annotation.ScopeMetadata . setScopeName ( java.lang.String ) ; } } } return org.springframework.context.annotation.ScopeMetadata ; }  <METHOD_END>
