<METHOD_START> public void ( SpringLiquibase org.springframework.boot.actuate.endpoint.SpringLiquibase ) { this( java.util.Collections . java.util.Map ( STRING , org.springframework.boot.actuate.endpoint.SpringLiquibase ) ); }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> < java.lang.String , SpringLiquibase > java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> ) { super( STRING ); Assert . notEmpty ( java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> = java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> < org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport > java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> ( ) { java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> < org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport > java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> = new java.util.ArrayList<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> <> ( ) ; DatabaseFactory org.springframework.boot.actuate.endpoint.DatabaseFactory = DatabaseFactory . getInstance ( ) ; StandardChangeLogHistoryService org.springframework.boot.actuate.endpoint.StandardChangeLogHistoryService = new StandardChangeLogHistoryService ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> < java.lang.String , SpringLiquibase > java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> : this . java.util.Map<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> . entrySet ( ) ) { try { javax.sql.DataSource javax.sql.DataSource = java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> . getValue ( ) . getDataSource ( ) ; JdbcConnection org.springframework.boot.actuate.endpoint.JdbcConnection = new JdbcConnection ( javax.sql.DataSource . java.sql.Connection ( ) ) ; try { Database org.springframework.boot.actuate.endpoint.Database = org.springframework.boot.actuate.endpoint.DatabaseFactory . findCorrectDatabaseImplementation ( org.springframework.boot.actuate.endpoint.JdbcConnection ) ; java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> . boolean ( new org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport ( java.util.Map.Entry<java.lang.String,org.springframework.boot.actuate.endpoint.SpringLiquibase> . getKey ( ) , org.springframework.boot.actuate.endpoint.StandardChangeLogHistoryService . queryDatabaseChangeLogTable ( org.springframework.boot.actuate.endpoint.Database ) ) ) ; } finally { org.springframework.boot.actuate.endpoint.JdbcConnection . close ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } return java.util.List<org.springframework.boot.actuate.endpoint.LiquibaseEndpoint.LiquibaseReport> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.util.List<java.util.Map<java.lang.String,?>> < java.util.Map<java.lang.String,?> < java.lang.String , ? > > java.util.List<java.util.Map<java.lang.String,?>> ) { this . java.lang.String = java.lang.String ; this . java.util.List<java.util.Map<java.lang.String,?>> = java.util.List<java.util.Map<java.lang.String,?>> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Map<java.lang.String,?>> < java.util.Map<java.lang.String,?> < java.lang.String , ? > > java.util.List<java.util.Map<java.lang.String,?>> ( ) { return this . java.util.List<java.util.Map<java.lang.String,?>> ; }  <METHOD_END>
