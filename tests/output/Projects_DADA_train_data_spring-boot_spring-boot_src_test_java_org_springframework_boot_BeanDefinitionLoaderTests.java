<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.StaticApplicationContext = new StaticApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { this . org.springframework.boot.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponent .class ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.boot.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.boot.BeanDefinitionLoaderTests> ( ) ) ; BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , org.springframework.boot.ClassPathResource ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.boot.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.boot.BeanDefinitionLoaderTests> ( ) ) ; BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , org.springframework.boot.ClassPathResource ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ClassPathResource org.springframework.boot.ClassPathResource = new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.boot.BeanDefinitionLoaderTests> ( ) ) ; BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , org.springframework.boot.ClassPathResource ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponent .class . java.lang.Package ( ) ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponent .class . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , STRING ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , STRING ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponent .class . java.lang.Package ( ) . java.lang.String ( ) ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponentInPackageWithoutDot .class . java.lang.Package ( ) . java.lang.String ( ) ) ; int int = org.springframework.boot.BeanDefinitionLoader . load ( ) ; assertThat ( int ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { BeanDefinitionLoader org.springframework.boot.BeanDefinitionLoader = new BeanDefinitionLoader ( this . org.springframework.boot.StaticApplicationContext , MyComponent .class . java.lang.Package ( ) , MyComponent .class ) ; assertThat ( org.springframework.boot.BeanDefinitionLoader . load ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.StaticApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
