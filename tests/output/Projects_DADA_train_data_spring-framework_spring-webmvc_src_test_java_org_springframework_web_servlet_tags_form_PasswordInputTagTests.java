<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . getTag ( ) . setPath ( STRING ) ; assertEquals ( Tag . SKIP_BODY , this . getTag ( ) . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTagOpened ( java.lang.String ) ; assertTagClosed ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.String ( ) ) ; void ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . getTag ( ) . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.PasswordInputTag ( ) . setShowPassword ( true ) ; assertEquals ( Tag . SKIP_BODY , this . getTag ( ) . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTagOpened ( java.lang.String ) ; assertTagClosed ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.String ( ) ) ; void ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . getTag ( ) . setPath ( STRING ) ; this . org.springframework.web.servlet.tags.form.PasswordInputTag ( ) . setShowPassword ( false ) ; assertEquals ( Tag . SKIP_BODY , this . getTag ( ) . doStartTag ( ) ) ; java.lang.String java.lang.String = getOutput ( ) ; assertTagOpened ( java.lang.String ) ; assertTagClosed ( java.lang.String ) ; assertContainsAttribute ( java.lang.String , STRING , java.lang.String ( ) ) ; void ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) org.springframework.web.servlet.tags.form.JspException { try { this . getTag ( ) . setDynamicAttribute ( null , STRING , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( this . org.springframework.web.servlet.tags.form.PasswordInputTag ( ) . isShowPassword ( ) ) { super. assertValueAttribute ( java.lang.String , java.lang.String ) ; } else { super. assertValueAttribute ( java.lang.String , STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.web.servlet.tags.form.InputTag org.springframework.web.servlet.tags.form.InputTag ( final java.io.Writer java.io.Writer ) { return new PasswordInputTag ( ) { @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( java.io.Writer ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.tags.form.TagWriter org.springframework.web.servlet.tags.form.TagWriter ( ) { return new TagWriter ( java.io.Writer ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.tags.form.PasswordInputTag org.springframework.web.servlet.tags.form.PasswordInputTag ( ) { return ( PasswordInputTag ) this . getTag ( ) ; }  <METHOD_END>
