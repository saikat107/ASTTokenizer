<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new BeanFactorySessionFactoryLookup ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.session.lookup.BeanFactory . getBean ( STRING , SessionFactory .class ) ) . thenReturn ( org.springframework.cassandra.core.session.lookup.SessionFactory ) ; BeanFactorySessionFactoryLookup org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup = new BeanFactorySessionFactoryLookup ( ) ; org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup . setBeanFactory ( org.springframework.cassandra.core.session.lookup.BeanFactory ) ; SessionFactory org.springframework.cassandra.core.session.lookup.SessionFactory = org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup . getSessionFactory ( STRING ) ; assertThat ( org.springframework.cassandra.core.session.lookup.SessionFactory ) . isSameAs ( org.springframework.cassandra.core.session.lookup.SessionFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { when ( org.springframework.cassandra.core.session.lookup.BeanFactory . getBean ( STRING , SessionFactory .class ) ) . thenThrow ( new NoSuchBeanDefinitionException ( STRING ) ) ; BeanFactorySessionFactoryLookup org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup = new BeanFactorySessionFactoryLookup ( ) ; org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup . setBeanFactory ( org.springframework.cassandra.core.session.lookup.BeanFactory ) ; try { org.springframework.cassandra.core.session.lookup.BeanFactorySessionFactoryLookup . getSessionFactory ( STRING ) ; fail ( STRING ) ; } catch ( SessionFactoryLookupFailureException org.springframework.cassandra.core.session.lookup.SessionFactoryLookupFailureException ) { assertThat ( org.springframework.cassandra.core.session.lookup.SessionFactoryLookupFailureException ) . hasMessageContaining ( STRING ) . hasRootCauseInstanceOf ( NoSuchBeanDefinitionException .class ) ; } }  <METHOD_END>
