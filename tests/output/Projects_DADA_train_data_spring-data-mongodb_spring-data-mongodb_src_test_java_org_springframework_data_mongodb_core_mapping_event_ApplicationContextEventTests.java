<METHOD_START> @ Before public void void ( ) java.lang.Exception { void ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContext = new AnnotationConfigApplicationContext ( ApplicationContextEventTestsAppConfig .class ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate = org.springframework.data.mongodb.core.mapping.event.ApplicationContext . getBean ( MongoTemplate .class ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . setWriteConcern ( WriteConcern . FSYNC_SAFE ) ; org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener = org.springframework.data.mongodb.core.mapping.event.ApplicationContext . getBean ( SimpleMappingEventListener .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.net.UnknownHostException { Mongo org.springframework.data.mongodb.core.mapping.event.Mongo = new MongoClient ( ) ; DB org.springframework.data.mongodb.core.mapping.event.DB = org.springframework.data.mongodb.core.mapping.event.Mongo . getDB ( STRING ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.data.mongodb.core.mapping.event.DB . getCollection ( java.lang.String ) . drop ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { PersonBeforeSaveListener org.springframework.data.mongodb.core.mapping.event.PersonBeforeSaveListener = org.springframework.data.mongodb.core.mapping.event.ApplicationContext . getBean ( PersonBeforeSaveListener .class ) ; AfterSaveListener org.springframework.data.mongodb.core.mapping.event.AfterSaveListener = org.springframework.data.mongodb.core.mapping.event.ApplicationContext . getBean ( AfterSaveListener .class ) ; assertEquals ( NUMBER , personBeforeSaveListener . seenEvents . size ( ) ) ; assertEquals ( NUMBER , afterSaveListener . seenEvents . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeSaveEvents . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterSaveEvents . size ( ) ) ; PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId ) ; assertEquals ( NUMBER , personBeforeSaveListener . seenEvents . size ( ) ) ; assertEquals ( NUMBER , afterSaveListener . seenEvents . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeSaveEvents . size ( ) ) ; assertEquals ( NUMBER , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterSaveEvents . size ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeSaveEvents . get ( NUMBER ) . getCollectionName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterSaveEvents . get ( NUMBER ) . getCollectionName ( ) ) ; Assert . assertTrue ( personBeforeSaveListener . seenEvents . get ( NUMBER ) instanceof BeforeSaveEvent < ? > ) ; Assert . assertTrue ( afterSaveListener . seenEvents . get ( NUMBER ) instanceof AfterSaveEvent < ? > ) ; BeforeSaveEvent < PersonPojoStringId > org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId> = ( BeforeSaveEvent < PersonPojoStringId > ) personBeforeSaveListener . seenEvents . get ( NUMBER ) ; PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId = org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId> . getSource ( ) ; org . org.bson . org.bson org.bson.Document = org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId> . getDocument ( ) ; void ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , org.bson.Document ) ; AfterSaveEvent < java.lang.Object > org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<java.lang.Object> = ( AfterSaveEvent < java.lang.Object > ) afterSaveListener . seenEvents . get ( NUMBER ) ; Assert . assertTrue ( org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<java.lang.Object> . getSource ( ) instanceof PersonPojoStringId ) ; org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId = ( PersonPojoStringId ) org.springframework.data.mongodb.core.mapping.event.AfterSaveEvent<java.lang.Object> . getSource ( ) ; org.bson.Document = org.springframework.data.mongodb.core.mapping.event.BeforeSaveEvent<org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId> . getDocument ( ) ; void ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , org.bson.Document ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId . getId ( ) ) ) , PersonPojoStringId .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeConvertEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( new PersonPojoStringId ( STRING , STRING ) ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . aggregate ( Aggregation . newAggregation ( Aggregation . project ( STRING ) ) , PersonPojoStringId .class , PersonPojoStringId .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeConvertEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId = new PersonPojoStringId ( STRING , STRING ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . remove ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeDeleteEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onBeforeDeleteEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterDeleteEvents . size ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterDeleteEvents . get ( NUMBER ) . getCollectionName ( ) , is ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related = org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related = org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getLazyReference ( ) . getDescription ( ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.Arrays . java.util.List<T> ( new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related .class ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.Arrays . java.util.List<T> ( new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related .class ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.List<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getLazyListOfReferences ( ) . size ( ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < java.lang.String , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < java.lang.String , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( STRING , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( STRING , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . java.util.Collection<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ( ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related .class ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < java.lang.String , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = new java.util.LinkedHashMap<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> < java.lang.String , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related > ( ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( STRING , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( STRING , new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related ( NUMBER , STRING ) ) ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> . java.util.Collection<org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ( ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related .class ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = new org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ( ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.lang.Long = NUMBER ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> = java.util.Map<java.lang.String,org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Related> ; org.springframework.data.mongodb.core.mapping.event.MongoTemplate . insert ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root = org.springframework.data.mongodb.core.mapping.event.MongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getId ( ) ) ) , org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root .class ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; org.springframework.data.mongodb.core.mapping.event.ApplicationContextEventTests.Root . getLazyMapOfReferences ( ) . size ( ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterLoadEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents , hasSize ( NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; assertThat ( org.springframework.data.mongodb.core.mapping.event.SimpleMappingEventListener . onAfterConvertEvents . get ( NUMBER ) . getCollectionName ( ) , is ( equalTo ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , PersonPojoStringId org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId , org . org.bson . org.bson org.bson.Document ) { assertEquals ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId . getId ( ) , org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId . getId ( ) ) ; assertEquals ( org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId . getText ( ) , org.springframework.data.mongodb.core.mapping.event.PersonPojoStringId . getText ( ) ) ; assertEquals ( STRING , org.bson.Document . get ( STRING ) ) ; assertEquals ( STRING , org.bson.Document . get ( STRING ) ) ; assertTypeHint ( org.bson.Document , PersonPojoStringId .class ) ; }  <METHOD_END>
