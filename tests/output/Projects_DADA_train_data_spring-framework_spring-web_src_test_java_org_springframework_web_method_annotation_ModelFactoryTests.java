<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; this . org.springframework.web.method.annotation.SessionAttributeStore = new DefaultSessionAttributeStore ( ) ; this . org.springframework.web.method.annotation.SessionAttributesHandler = new SessionAttributesHandler ( org.springframework.web.method.annotation.ModelFactoryTests.TestController .class , this . org.springframework.web.method.annotation.SessionAttributeStore ) ; this . org.springframework.web.method.annotation.ModelFactoryTests.TestController = new org.springframework.web.method.annotation.ModelFactoryTests.TestController ( ) ; this . org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING , Model .class ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertTrue ( this . org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( STRING ) ) ; assertNull ( this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertTrue ( this . org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( STRING ) ) ; assertTrue ( this . org.springframework.web.method.annotation.ModelAndViewContainer . isBindingDisabled ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.ModelFactoryTests.Foo org.springframework.web.method.annotation.ModelFactoryTests.Foo = new org.springframework.web.method.annotation.ModelFactoryTests.Foo ( ) ; this . org.springframework.web.method.annotation.SessionAttributeStore . storeAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , STRING , org.springframework.web.method.annotation.ModelFactoryTests.Foo ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertTrue ( this . org.springframework.web.method.annotation.ModelAndViewContainer . containsAttribute ( STRING ) ) ; assertSame ( org.springframework.web.method.annotation.ModelFactoryTests.Foo , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; assertTrue ( this . org.springframework.web.method.annotation.ModelAndViewContainer . isBindingDisabled ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.method.annotation.SessionAttributeStore . storeAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , STRING , STRING ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = org.springframework.web.method.annotation.ModelFactory ( STRING , Model .class ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertEquals ( STRING , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelFactory org.springframework.web.method.annotation.ModelFactory = new ModelFactory ( null , null , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; HandlerMethod org.springframework.web.method.annotation.HandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( STRING , java.lang.String .class ) ; try { org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; fail ( STRING ) ; } catch ( HttpSessionRequiredException org.springframework.web.method.annotation.HttpSessionRequiredException ) { } this . org.springframework.web.method.annotation.SessionAttributeStore . storeAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , STRING , STRING ) ; org.springframework.web.method.annotation.ModelFactory . initModel ( this . org.springframework.web.method.annotation.NativeWebRequest , this . org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.HandlerMethod ) ; assertEquals ( STRING , this . org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.Object java.lang.Object = new java.lang.Object ( ) ; ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.Object ) ; WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.Object , java.lang.String ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.Object , java.lang.String ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = new ModelFactory ( null , org.springframework.web.method.annotation.WebDataBinderFactory , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; org.springframework.web.method.annotation.ModelFactory . updateModel ( this . org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; assertEquals ( java.lang.Object , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( java.lang.String ) ) ; java.lang.String java.lang.String = BindingResult . MODEL_KEY_PREFIX + java.lang.String ; assertSame ( org.springframework.web.method.annotation.WebDataBinder . getBindingResult ( ) , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.String ) ; WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.String , java.lang.String ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String , java.lang.String ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = new ModelFactory ( null , org.springframework.web.method.annotation.WebDataBinderFactory , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; org.springframework.web.method.annotation.ModelFactory . updateModel ( this . org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; assertEquals ( java.lang.String , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( java.lang.String ) ) ; assertEquals ( java.lang.String , this . org.springframework.web.method.annotation.SessionAttributeStore . retrieveAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.String ) ; this . org.springframework.web.method.annotation.SessionAttributeStore . storeAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String , java.lang.String ) ; WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.String , java.lang.String ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String , java.lang.String ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; org.springframework.web.method.annotation.ModelAndViewContainer . getSessionStatus ( ) . setComplete ( ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = new ModelFactory ( null , org.springframework.web.method.annotation.WebDataBinderFactory , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; org.springframework.web.method.annotation.ModelFactory . updateModel ( this . org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; assertEquals ( java.lang.String , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( java.lang.String ) ) ; assertNull ( this . org.springframework.web.method.annotation.SessionAttributeStore . retrieveAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( java.lang.String , java.lang.String ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; org.springframework.web.method.annotation.ModelAndViewContainer . setRedirectModel ( new ModelMap ( java.lang.String , java.lang.String ) ) ; org.springframework.web.method.annotation.ModelAndViewContainer . setRedirectModelScenario ( true ) ; WebDataBinder org.springframework.web.method.annotation.WebDataBinder = new WebDataBinder ( java.lang.String , java.lang.String ) ; WebDataBinderFactory org.springframework.web.method.annotation.WebDataBinderFactory = mock ( WebDataBinderFactory .class ) ; given ( org.springframework.web.method.annotation.WebDataBinderFactory . createBinder ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String , java.lang.String ) ) . willReturn ( org.springframework.web.method.annotation.WebDataBinder ) ; ModelFactory org.springframework.web.method.annotation.ModelFactory = new ModelFactory ( null , org.springframework.web.method.annotation.WebDataBinderFactory , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; org.springframework.web.method.annotation.ModelFactory . updateModel ( this . org.springframework.web.method.annotation.NativeWebRequest , org.springframework.web.method.annotation.ModelAndViewContainer ) ; assertEquals ( java.lang.String , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . get ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.web.method.annotation.ModelAndViewContainer . getModel ( ) . size ( ) ) ; assertEquals ( java.lang.String , this . org.springframework.web.method.annotation.SessionAttributeStore . retrieveAttribute ( this . org.springframework.web.method.annotation.NativeWebRequest , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.method.annotation.ModelFactory org.springframework.web.method.annotation.ModelFactory ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { HandlerMethodArgumentResolverComposite org.springframework.web.method.annotation.HandlerMethodArgumentResolverComposite = new HandlerMethodArgumentResolverComposite ( ) ; org.springframework.web.method.annotation.HandlerMethodArgumentResolverComposite . addResolver ( new ModelMethodProcessor ( ) ) ; InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod = org.springframework.web.method.annotation.InvocableHandlerMethod ( java.lang.String , java.lang.Class<?>[] ) ; org.springframework.web.method.annotation.InvocableHandlerMethod . setHandlerMethodArgumentResolvers ( org.springframework.web.method.annotation.HandlerMethodArgumentResolverComposite ) ; org.springframework.web.method.annotation.InvocableHandlerMethod . setDataBinderFactory ( null ) ; org.springframework.web.method.annotation.InvocableHandlerMethod . setParameterNameDiscoverer ( new LocalVariableTableParameterNameDiscoverer ( ) ) ; return new ModelFactory ( java.util.Collections . java.util.List ( org.springframework.web.method.annotation.InvocableHandlerMethod ) , null , this . org.springframework.web.method.annotation.SessionAttributesHandler ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.method.annotation.InvocableHandlerMethod org.springframework.web.method.annotation.InvocableHandlerMethod ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) throws java.lang.Exception { java.lang.reflect.Method java.lang.reflect.Method = this . org.springframework.web.method.annotation.ModelFactoryTests.TestController . java.lang.Class<? extends org.springframework.web.method.annotation.ModelFactoryTests.TestController> ( ) . java.lang.reflect.Method ( java.lang.String , java.lang.Class<?>[] ) ; return new InvocableHandlerMethod ( this . org.springframework.web.method.annotation.ModelFactoryTests.TestController , java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( Model org.springframework.web.method.annotation.Model ) { org.springframework.web.method.annotation.Model . addAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public java.lang.Boolean java.lang.Boolean ( ) { return java.lang.Boolean . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public java.lang.Boolean java.lang.Boolean ( ) { return java.lang.Boolean . java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( STRING ) public java.lang.Boolean java.lang.Boolean ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute ( name = STRING , binding = false ) public org.springframework.web.method.annotation.ModelFactoryTests.Foo org.springframework.web.method.annotation.ModelFactoryTests.Foo ( ) { return new org.springframework.web.method.annotation.ModelFactoryTests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> public void void ( @ ModelAttribute ( STRING ) java.lang.String java.lang.String ) {		}  <METHOD_END>
