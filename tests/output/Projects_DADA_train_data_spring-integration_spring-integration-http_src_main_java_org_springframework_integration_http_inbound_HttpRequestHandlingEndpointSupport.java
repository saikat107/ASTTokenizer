<METHOD_START> public void ( ) { this( true ); }  <METHOD_END>
<METHOD_START> public void ( boolean boolean ) { super( boolean ); this . boolean = boolean ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new MultipartAwareFormHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new ByteArrayHttpMessageConverter ( ) ) ; StringHttpMessageConverter org.springframework.integration.http.inbound.StringHttpMessageConverter = new StringHttpMessageConverter ( ) ; org.springframework.integration.http.inbound.StringHttpMessageConverter . setWriteAcceptCharset ( false ) ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( org.springframework.integration.http.inbound.StringHttpMessageConverter ) ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new ResourceHttpMessageConverter ( ) ) ; SourceHttpMessageConverter < javax.xml.transform.Source > org.springframework.integration.http.inbound.SourceHttpMessageConverter<javax.xml.transform.Source> = new SourceHttpMessageConverter < javax.xml.transform.Source > ( ) ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( org.springframework.integration.http.inbound.SourceHttpMessageConverter<javax.xml.transform.Source> ) ; if ( boolean ) { this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new Jaxb2RootElementHttpMessageConverter ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } if ( JacksonJsonUtils . isJackson2Present ( ) ) { this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new MappingJackson2HttpMessageConverter ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } if ( boolean ) { this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new AtomFeedHttpMessageConverter ( ) ) ; this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . add ( new RssChannelHttpMessageConverter ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; logger . debug ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.http.inbound.Expression ) { this . org.springframework.integration.http.inbound.Expression = org.springframework.integration.http.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> ) { this . java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> = java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) { Assert . noNullElements ( java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . toArray ( ) , STRING ) ; java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> = new java.util.ArrayList<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > ( java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) ; if ( this . boolean ) { java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . addAll ( this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) ; this . boolean = true ; } this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> = java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ( ) { return this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( HeaderMapper < HttpHeaders > org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> ) { Assert . notNull ( org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> , STRING ) ; this . org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> = org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> ; }  <METHOD_END>
<METHOD_START> public void void ( RequestMapping org.springframework.integration.http.inbound.RequestMapping ) { Assert . notNull ( org.springframework.integration.http.inbound.RequestMapping , STRING ) ; this . org.springframework.integration.http.inbound.RequestMapping = org.springframework.integration.http.inbound.RequestMapping ; }  <METHOD_END>
<METHOD_START> public final org.springframework.integration.http.inbound.RequestMapping org.springframework.integration.http.inbound.RequestMapping ( ) { return this . org.springframework.integration.http.inbound.RequestMapping ; }  <METHOD_END>
<METHOD_START> public void void ( CrossOrigin org.springframework.integration.http.inbound.CrossOrigin ) { this . org.springframework.integration.http.inbound.CrossOrigin = org.springframework.integration.http.inbound.CrossOrigin ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.http.inbound.CrossOrigin org.springframework.integration.http.inbound.CrossOrigin ( ) { return this . org.springframework.integration.http.inbound.CrossOrigin ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( MultipartResolver org.springframework.integration.http.inbound.MultipartResolver ) { this . org.springframework.integration.http.inbound.MultipartResolver = org.springframework.integration.http.inbound.MultipartResolver ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( EXPRESSION_PARSER . parseExpression ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.http.inbound.Expression ) { this . org.springframework.integration.http.inbound.Expression = org.springframework.integration.http.inbound.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ( this . boolean ) ? STRING : STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; BeanFactory org.springframework.integration.http.inbound.BeanFactory = this . getBeanFactory ( ) ; if ( this . org.springframework.integration.http.inbound.MultipartResolver == null && org.springframework.integration.http.inbound.BeanFactory != null ) { try { MultipartResolver org.springframework.integration.http.inbound.MultipartResolver = org.springframework.integration.http.inbound.BeanFactory . getBean ( DispatcherServlet . MULTIPART_RESOLVER_BEAN_NAME , MultipartResolver .class ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.http.inbound.MultipartResolver + STRING ) ; } this . org.springframework.integration.http.inbound.MultipartResolver = org.springframework.integration.http.inbound.MultipartResolver ; } catch ( NoSuchBeanDefinitionException org.springframework.integration.http.inbound.NoSuchBeanDefinitionException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + DispatcherServlet . MULTIPART_RESOLVER_BEAN_NAME + STRING ) ; } } } if ( this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . size ( ) == NUMBER || ( this . boolean && ! this . boolean ) ) { this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> . addAll ( this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) ; } this . void ( ) ; if ( this . org.springframework.integration.http.inbound.Expression != null ) { this . org.springframework.integration.http.inbound.EvaluationContext = org.springframework.integration.http.inbound.StandardEvaluationContext ( ) ; } }  <METHOD_END>
<METHOD_START> protected final org.springframework.integration.http.inbound.Message<?> < ? > org.springframework.integration.http.inbound.Message<?> ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest , HttpServletResponse org.springframework.integration.http.inbound.HttpServletResponse )			throws java.io.IOException { if ( isRunning ( ) ) { return org.springframework.integration.http.inbound.Message<?> ( org.springframework.integration.http.inbound.HttpServletRequest , org.springframework.integration.http.inbound.HttpServletResponse ) ; } else { return org.springframework.integration.http.inbound.Message<?> ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.integration.http.inbound.Message<?> < ? > org.springframework.integration.http.inbound.Message<?> ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest , HttpServletResponse org.springframework.integration.http.inbound.HttpServletResponse )			throws java.io.IOException { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; try { ServletServerHttpRequest org.springframework.integration.http.inbound.ServletServerHttpRequest = this . org.springframework.integration.http.inbound.ServletServerHttpRequest ( org.springframework.integration.http.inbound.HttpServletRequest ) ; java.lang.Object java.lang.Object = null ; if ( this . boolean ( org.springframework.integration.http.inbound.ServletServerHttpRequest ) ) { java.lang.Object = this . java.lang.Object ( org.springframework.integration.http.inbound.ServletServerHttpRequest ) ; } HttpEntity org.springframework.integration.http.inbound.HttpEntity = new HttpEntity ( java.lang.Object , org.springframework.integration.http.inbound.ServletServerHttpRequest . getHeaders ( ) ) ; StandardEvaluationContext org.springframework.integration.http.inbound.StandardEvaluationContext = this . org.springframework.integration.http.inbound.StandardEvaluationContext ( ) ; org.springframework.integration.http.inbound.StandardEvaluationContext . setRootObject ( org.springframework.integration.http.inbound.HttpEntity ) ; org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , RequestContextHolder . currentRequestAttributes ( ) ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> = this . org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> ( org.springframework.integration.http.inbound.HttpServletRequest . getParameterMap ( ) ) ; org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> ) ; org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , new ServletServerHttpRequest ( org.springframework.integration.http.inbound.HttpServletRequest ) . getHeaders ( ) ) ; Cookie [] org.springframework.integration.http.inbound.Cookie[] = org.springframework.integration.http.inbound.HttpServletRequest . getCookies ( ) ; if ( ! ObjectUtils . isEmpty ( org.springframework.integration.http.inbound.Cookie[] ) ) { java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Cookie> < java.lang.String , Cookie > java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Cookie> = new java.util.HashMap<java.lang.String,org.springframework.integration.http.inbound.Cookie> < java.lang.String , Cookie > ( requestCookies . length ) ; for ( Cookie org.springframework.integration.http.inbound.Cookie : org.springframework.integration.http.inbound.Cookie[] ) { java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Cookie> . put ( org.springframework.integration.http.inbound.Cookie . getName ( ) , org.springframework.integration.http.inbound.Cookie ) ; } org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Cookie> ) ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) org.springframework.integration.http.inbound.HttpServletRequest . getAttribute ( HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.String> ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Map<java.lang.String,java.lang.String> ) ; } org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; } java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> = ( java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> < java.lang.String , MultiValueMap < java.lang.String , java.lang.String > > ) org.springframework.integration.http.inbound.HttpServletRequest . getAttribute ( HandlerMapping . MATRIX_VARIABLES_ATTRIBUTE ) ; if ( ! CollectionUtils . isEmpty ( java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> ) ; } org.springframework.integration.http.inbound.StandardEvaluationContext . setVariable ( STRING , java.util.Map<java.lang.String,org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String>> ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> . toHeaders ( org.springframework.integration.http.inbound.ServletServerHttpRequest . getHeaders ( ) ) ; java.lang.Object java.lang.Object = null ; if ( this . org.springframework.integration.http.inbound.Expression != null ) { java.lang.Object = this . org.springframework.integration.http.inbound.Expression . getValue ( org.springframework.integration.http.inbound.StandardEvaluationContext ) ; } if ( ! CollectionUtils . isEmpty ( this . java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> ) ) { for ( java.util.Map.Entry<java.lang.String,org.springframework.integration.http.inbound.Expression> < java.lang.String , Expression > java.util.Map.Entry<java.lang.String,org.springframework.integration.http.inbound.Expression> : this . java.util.Map<java.lang.String,org.springframework.integration.http.inbound.Expression> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.http.inbound.Expression> . getKey ( ) ; Expression org.springframework.integration.http.inbound.Expression = java.util.Map.Entry<java.lang.String,org.springframework.integration.http.inbound.Expression> . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.Expression . getValue ( org.springframework.integration.http.inbound.StandardEvaluationContext ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } } if ( java.lang.Object == null ) { if ( java.lang.Object != null ) { java.lang.Object = java.lang.Object ; } else { java.lang.Object = org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> ; } } AbstractIntegrationMessageBuilder < ? > org.springframework.integration.http.inbound.AbstractIntegrationMessageBuilder<?> = null ; if ( java.lang.Object instanceof Message < ? > ) { org.springframework.integration.http.inbound.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) . copyHeadersIfAbsent ( java.util.Map<java.lang.String,java.lang.Object> ) ; } else { org.springframework.integration.http.inbound.AbstractIntegrationMessageBuilder<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } Message < ? > org.springframework.integration.http.inbound.Message<?> = org.springframework.integration.http.inbound.AbstractIntegrationMessageBuilder<> . setHeader ( org . springframework . integration . http . HttpHeaders . REQUEST_URL , org.springframework.integration.http.inbound.ServletServerHttpRequest . getURI ( ) . toString ( ) ) . setHeader ( org . springframework . integration . http . HttpHeaders . REQUEST_METHOD , org.springframework.integration.http.inbound.ServletServerHttpRequest . getMethod ( ) . toString ( ) ) . setHeader ( org . springframework . integration . http . HttpHeaders . USER_PRINCIPAL , org.springframework.integration.http.inbound.HttpServletRequest . getUserPrincipal ( ) ) . build ( ) ; Message < ? > org.springframework.integration.http.inbound.Message<?> = null ; if ( this . boolean ) { try { org.springframework.integration.http.inbound.Message<?> = this . sendAndReceiveMessage ( org.springframework.integration.http.inbound.Message<> ) ; } catch ( MessageTimeoutException org.springframework.integration.http.inbound.MessageTimeoutException ) { if ( this . org.springframework.integration.http.inbound.Expression != null ) { org.springframework.integration.http.inbound.Message<?> = getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.http.inbound.MessageTimeoutException . getMessage ( ) ) . setHeader ( org . springframework . integration . http . HttpHeaders . STATUS_CODE , org.springframework.integration.http.inbound.HttpStatus ( ) ) . build ( ) ; } else { org.springframework.integration.http.inbound.Message<?> = getMessageBuilderFactory ( ) . withPayload ( org.springframework.integration.http.inbound.MessageTimeoutException . getMessage ( ) ) . setHeader ( org . springframework . integration . http . HttpHeaders . STATUS_CODE , HttpStatus . INTERNAL_SERVER_ERROR ) . build ( ) ; } } } else { this . send ( org.springframework.integration.http.inbound.Message<> ) ; } return org.springframework.integration.http.inbound.Message<> ; } finally { this . void ( org.springframework.integration.http.inbound.HttpServletRequest ) ; this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.Message<?> < ? > org.springframework.integration.http.inbound.Message<?> ( ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + HttpStatus . SERVICE_UNAVAILABLE ) ; } return this . getMessageBuilderFactory ( ) . withPayload ( STRING ) . setHeader ( org . springframework . integration . http . HttpHeaders . STATUS_CODE , HttpStatus . SERVICE_UNAVAILABLE ) . build ( ) ; }  <METHOD_END>
<METHOD_START> protected final java.lang.Object java.lang.Object ( ServletServerHttpResponse org.springframework.integration.http.inbound.ServletServerHttpResponse , Message < ? > org.springframework.integration.http.inbound.Message<?> ) { this . org.springframework.integration.http.inbound.HeaderMapper<org.springframework.integration.http.inbound.HttpHeaders> . fromHeaders ( org.springframework.integration.http.inbound.Message<> . getHeaders ( ) , org.springframework.integration.http.inbound.ServletServerHttpResponse . getHeaders ( ) ) ; HttpStatus org.springframework.integration.http.inbound.HttpStatus = this . org.springframework.integration.http.inbound.HttpStatus ( org.springframework.integration.http.inbound.Message<> . getHeaders ( ) ) ; if ( org.springframework.integration.http.inbound.HttpStatus != null ) { org.springframework.integration.http.inbound.ServletServerHttpResponse . setStatusCode ( org.springframework.integration.http.inbound.HttpStatus ) ; } java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.Message<> ; if ( this . boolean ) { java.lang.Object = org.springframework.integration.http.inbound.Message<> . getPayload ( ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( ServletServerHttpResponse org.springframework.integration.http.inbound.ServletServerHttpResponse ) { if ( this . org.springframework.integration.http.inbound.Expression != null ) { HttpStatus org.springframework.integration.http.inbound.HttpStatus = org.springframework.integration.http.inbound.HttpStatus ( ) ; if ( org.springframework.integration.http.inbound.HttpStatus != null ) { org.springframework.integration.http.inbound.ServletServerHttpResponse . setStatusCode ( org.springframework.integration.http.inbound.HttpStatus ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.HttpStatus org.springframework.integration.http.inbound.HttpStatus ( ) { if ( this . org.springframework.integration.http.inbound.EvaluationContext == null ) { this . org.springframework.integration.http.inbound.EvaluationContext = org.springframework.integration.http.inbound.StandardEvaluationContext ( ) ; } java.lang.Object java.lang.Object = this . org.springframework.integration.http.inbound.Expression . getValue ( this . org.springframework.integration.http.inbound.EvaluationContext ) ; return org.springframework.integration.http.inbound.HttpStatus ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.ServletServerHttpRequest org.springframework.integration.http.inbound.ServletServerHttpRequest ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest ) { if ( org.springframework.integration.http.inbound.HttpServletRequest instanceof MultipartHttpServletRequest ) { return new MultipartHttpInputMessage ( ( MultipartHttpServletRequest ) org.springframework.integration.http.inbound.HttpServletRequest ) ; } if ( this . org.springframework.integration.http.inbound.MultipartResolver != null && this . org.springframework.integration.http.inbound.MultipartResolver . isMultipart ( org.springframework.integration.http.inbound.HttpServletRequest ) ) { return new MultipartHttpInputMessage ( this . org.springframework.integration.http.inbound.MultipartResolver . resolveMultipart ( org.springframework.integration.http.inbound.HttpServletRequest ) ) ; } return new ServletServerHttpRequest ( org.springframework.integration.http.inbound.HttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServletServerHttpRequest org.springframework.integration.http.inbound.ServletServerHttpRequest ) { return ! ( CollectionUtils . containsInstance ( java.util.List<org.springframework.integration.http.inbound.HttpMethod> , org.springframework.integration.http.inbound.ServletServerHttpRequest . getMethod ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( HttpServletRequest org.springframework.integration.http.inbound.HttpServletRequest ) { if ( this . org.springframework.integration.http.inbound.MultipartResolver != null && org.springframework.integration.http.inbound.HttpServletRequest instanceof MultipartHttpServletRequest ) { this . org.springframework.integration.http.inbound.MultipartResolver . cleanupMultipart ( ( MultipartHttpServletRequest ) org.springframework.integration.http.inbound.HttpServletRequest ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map<java.lang.String,java.lang.String[]> ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap < java.lang.String , java.lang.String > ( java.util.Map<java.lang.String,java.lang.String[]> . int ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String[]> < java.lang.String , java.lang.String [] > java.util.Map.Entry<java.lang.String,java.lang.String[]> : java.util.Map<java.lang.String,java.lang.String[]> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String[]>> ( ) ) { java.lang.String [] java.lang.String[] = java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String[] ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> . add ( java.util.Map.Entry<java.lang.String,java.lang.String[]> . java.lang.String ( ) , java.lang.String ) ; } } return org.springframework.integration.http.inbound.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.lang.Object java.lang.Object ( ServletServerHttpRequest org.springframework.integration.http.inbound.ServletServerHttpRequest ) throws java.io.IOException { MediaType org.springframework.integration.http.inbound.MediaType = org.springframework.integration.http.inbound.ServletServerHttpRequest . getHeaders ( ) . getContentType ( ) ; if ( org.springframework.integration.http.inbound.MediaType == null ) { org.springframework.integration.http.inbound.MediaType = MediaType . APPLICATION_OCTET_STREAM ; } java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<> ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = ( STRING . boolean ( org.springframework.integration.http.inbound.MediaType . getType ( ) ) ) ? java.lang.String .class : byte [] .class ; } for ( HttpMessageConverter < ? > org.springframework.integration.http.inbound.HttpMessageConverter<?> : this . java.util.List<org.springframework.integration.http.inbound.HttpMessageConverter<?>> ) { if ( org.springframework.integration.http.inbound.HttpMessageConverter<> . canRead ( java.lang.Class<> , org.springframework.integration.http.inbound.MediaType ) ) { return org.springframework.integration.http.inbound.HttpMessageConverter<> . read ( ( java.lang.Class ) java.lang.Class<> , org.springframework.integration.http.inbound.ServletServerHttpRequest ) ; } } throw new MessagingException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + org.springframework.integration.http.inbound.MediaType + STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.HttpStatus org.springframework.integration.http.inbound.HttpStatus ( MessageHeaders org.springframework.integration.http.inbound.MessageHeaders ) { java.lang.Object java.lang.Object = org.springframework.integration.http.inbound.MessageHeaders . get ( org . springframework . integration . http . HttpHeaders . STATUS_CODE ) ; return org.springframework.integration.http.inbound.HttpStatus ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.http.inbound.HttpStatus org.springframework.integration.http.inbound.HttpStatus ( java.lang.Object java.lang.Object ) { HttpStatus org.springframework.integration.http.inbound.HttpStatus = null ; if ( java.lang.Object instanceof HttpStatus ) { org.springframework.integration.http.inbound.HttpStatus = ( HttpStatus ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Integer ) { org.springframework.integration.http.inbound.HttpStatus = HttpStatus . valueOf ( ( java.lang.Integer ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.http.inbound.HttpStatus = HttpStatus . valueOf ( java.lang.Integer . int ( ( java.lang.String ) java.lang.Object ) ) ; } return org.springframework.integration.http.inbound.HttpStatus ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.http.inbound.StandardEvaluationContext org.springframework.integration.http.inbound.StandardEvaluationContext ( ) { return ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . java.lang.Class<> != null && CollectionUtils . containsAny ( java.util.List<org.springframework.integration.http.inbound.HttpMethod> , java.util.Arrays . java.util.List ( this . org.springframework.integration.http.inbound.RequestMapping . getMethods ( ) ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + STRING + java.util.List<org.springframework.integration.http.inbound.HttpMethod> + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { stop ( ) ; return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
