<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSingleResource ( Person .class , NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getHref ( ) , endsWith ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getRel ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToCollectionResource ( Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getRel ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSingleResource ( Order .class , NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( org.springframework.data.rest.webmvc.support.RepositoryRestConfiguration . getProjectionConfiguration ( ) . getParameterName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSingleResource ( Book .class , NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . expand ( ) . getHref ( ) , endsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToPagedResource ( Person .class , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Links org.springframework.data.rest.webmvc.support.Links = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linksToSearchResources ( Person .class ) ; assertThat ( org.springframework.data.rest.webmvc.support.Links . hasLink ( STRING ) ) . isTrue ( ) ; Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.Links . getLink ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSearchResource ( Person .class , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSearchResource ( Person .class , STRING , PageRequest . of ( NUMBER , NUMBER ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . doesNotContain ( STRING , STRING ) ; UriComponents org.springframework.data.rest.webmvc.support.UriComponents = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.webmvc.support.Link . getHref ( ) ) . build ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.UriComponents . getQueryParams ( ) , allOf ( hasKey ( STRING ) , hasKey ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSearchResource ( Person .class , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Link org.springframework.data.rest.webmvc.support.Link = org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linkToSearchResource ( Person .class , STRING , Sort . by ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link ) . isNotNull ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING ) ; assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . doesNotContain ( STRING ) ; UriComponents org.springframework.data.rest.webmvc.support.UriComponents = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.webmvc.support.Link . getHref ( ) ) . build ( ) ; assertThat ( org.springframework.data.rest.webmvc.support.UriComponents . getQueryParams ( ) , hasKey ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { for ( Link org.springframework.data.rest.webmvc.support.Link : org.springframework.data.rest.webmvc.support.RepositoryEntityLinks . linksToSearchResources ( Book .class ) ) { assertThat ( org.springframework.data.rest.webmvc.support.Link . getVariableNames ( ) ) . contains ( STRING ) ; } }  <METHOD_END>
