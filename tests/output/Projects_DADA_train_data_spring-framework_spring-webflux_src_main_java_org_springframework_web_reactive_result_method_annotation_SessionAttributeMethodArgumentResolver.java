<METHOD_START> public void ( ConfigurableBeanFactory org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ) { super( org.springframework.web.reactive.result.method.annotation.ConfigurableBeanFactory , org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { return org.springframework.web.reactive.result.method.annotation.MethodParameter . hasParameterAnnotation ( SessionAttribute .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.NamedValueInfo org.springframework.web.reactive.result.method.annotation.NamedValueInfo ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { SessionAttribute org.springframework.web.reactive.result.method.annotation.SessionAttribute = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( SessionAttribute .class ) ; return new NamedValueInfo ( org.springframework.web.reactive.result.method.annotation.SessionAttribute . name ( ) , org.springframework.web.reactive.result.method.annotation.SessionAttribute . required ( ) , ValueConstants . DEFAULT_NONE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { return org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getSession ( ) . map ( session -> session . getAttribute ( name ) ) . filter ( java.util.Optional :: isPresent ) . map ( java.util.Optional :: get ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.String java.lang.String = org.springframework.web.reactive.result.method.annotation.MethodParameter . getNestedParameterType ( ) . getSimpleName ( ) ; java.lang.String java.lang.String = STRING + java.lang.String + STRING + java.lang.String ; throw new ServerWebInputException ( java.lang.String , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; }  <METHOD_END>
