<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = mock ( MethodInvocation .class ) ; given ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) ) . willReturn ( java.lang.String .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] {} ) ) ; given ( org.springframework.aop.interceptor.MethodInvocation . getThis ( ) ) . willReturn ( this ) ; Log org.springframework.aop.interceptor.Log = mock ( Log .class ) ; SimpleTraceInterceptor org.springframework.aop.interceptor.SimpleTraceInterceptor = new SimpleTraceInterceptor ( true ) ; org.springframework.aop.interceptor.SimpleTraceInterceptor . invokeUnderTrace ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ; verify ( org.springframework.aop.interceptor.Log , times ( NUMBER ) ) . trace ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { MethodInvocation org.springframework.aop.interceptor.MethodInvocation = mock ( MethodInvocation .class ) ; given ( org.springframework.aop.interceptor.MethodInvocation . getMethod ( ) ) . willReturn ( java.lang.String .class . java.lang.reflect.Method ( STRING , new java.lang.Class [] {} ) ) ; given ( org.springframework.aop.interceptor.MethodInvocation . getThis ( ) ) . willReturn ( this ) ; java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; given ( org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ) . willThrow ( java.lang.IllegalArgumentException ) ; Log org.springframework.aop.interceptor.Log = mock ( Log .class ) ; final SimpleTraceInterceptor org.springframework.aop.interceptor.SimpleTraceInterceptor = new SimpleTraceInterceptor ( true ) ; try { org.springframework.aop.interceptor.SimpleTraceInterceptor . invokeUnderTrace ( org.springframework.aop.interceptor.MethodInvocation , org.springframework.aop.interceptor.Log ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {		} verify ( org.springframework.aop.interceptor.Log ) . trace ( anyString ( ) ) ; verify ( org.springframework.aop.interceptor.Log ) . trace ( anyString ( ) , eq ( java.lang.IllegalArgumentException ) ) ; }  <METHOD_END>
