<METHOD_START> public void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver> < ErrorViewResolver > > org.springframework.boot.autoconfigure.web.servlet.error.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver>> ) { this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties = org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties ; this . java.util.List<org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver> = org.springframework.boot.autoconfigure.web.servlet.error.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( value = ErrorAttributes .class , search = SearchStrategy . CURRENT ) public org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorAttributes org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorAttributes ( ) { return new DefaultErrorAttributes ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( value = ErrorController .class , search = SearchStrategy . CURRENT ) public org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController ( ErrorAttributes org.springframework.boot.autoconfigure.web.servlet.error.ErrorAttributes ) { return new BasicErrorController ( org.springframework.boot.autoconfigure.web.servlet.error.ErrorAttributes , this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties . getError ( ) , this . java.util.List<org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver> ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorPageCustomizer org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorPageCustomizer ( ) { return new org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ErrorPageCustomizer ( this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.PreserveErrorControllerTargetClassPostProcessor org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.PreserveErrorControllerTargetClassPostProcessor ( ) { return new org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.PreserveErrorControllerTargetClassPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , ResourceProperties org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext = org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext ; this . org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties = org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( DispatcherServlet .class ) @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver org.springframework.boot.autoconfigure.web.servlet.error.DefaultErrorViewResolver ( ) { return new DefaultErrorViewResolver ( this . org.springframework.boot.autoconfigure.web.servlet.error.ApplicationContext , this . org.springframework.boot.autoconfigure.web.servlet.error.ResourceProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) @ ConditionalOnMissingBean ( name = STRING ) public org.springframework.boot.autoconfigure.web.servlet.error.View org.springframework.boot.autoconfigure.web.servlet.error.View ( ) { return this . org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.SpelView ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( BeanNameViewResolver .class ) public org.springframework.boot.autoconfigure.web.servlet.error.BeanNameViewResolver org.springframework.boot.autoconfigure.web.servlet.error.BeanNameViewResolver ( ) { BeanNameViewResolver org.springframework.boot.autoconfigure.web.servlet.error.BeanNameViewResolver = new BeanNameViewResolver ( ) ; org.springframework.boot.autoconfigure.web.servlet.error.BeanNameViewResolver . setOrder ( Ordered . LOWEST_PRECEDENCE - NUMBER ) ; return org.springframework.boot.autoconfigure.web.servlet.error.BeanNameViewResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.error.ConditionOutcome org.springframework.boot.autoconfigure.web.servlet.error.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.web.servlet.error.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.web.servlet.error.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; TemplateAvailabilityProviders org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders = new TemplateAvailabilityProviders ( org.springframework.boot.autoconfigure.web.servlet.error.ConditionContext . getClassLoader ( ) ) ; TemplateAvailabilityProvider org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProvider = org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProviders . getProvider ( STRING , org.springframework.boot.autoconfigure.web.servlet.error.ConditionContext . getEnvironment ( ) , org.springframework.boot.autoconfigure.web.servlet.error.ConditionContext . getClassLoader ( ) , org.springframework.boot.autoconfigure.web.servlet.error.ConditionContext . getResourceLoader ( ) ) ; if ( org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProvider != null ) { return ConditionOutcome . noMatch ( ConditionMessage.Builder . foundExactly ( STRING + org.springframework.boot.autoconfigure.web.servlet.error.TemplateAvailabilityProvider ) ) ; } return ConditionOutcome . match ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . org.springframework.boot.autoconfigure.web.servlet.error.NonRecursivePropertyPlaceholderHelper = new NonRecursivePropertyPlaceholderHelper ( STRING , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest , HttpServletResponse org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse ) throws java.lang.Exception { if ( org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . getContentType ( ) == null ) { org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . setContentType ( java.lang.String ( ) ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( java.util.Map<java.lang.String,> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.autoconfigure.web.servlet.error.HttpServletRequest . getContextPath ( ) ) ; PlaceholderResolver org.springframework.boot.autoconfigure.web.servlet.error.PlaceholderResolver = new org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionResolver ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ( ) , java.util.Map<java.lang.String,java.lang.Object> ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.web.servlet.error.NonRecursivePropertyPlaceholderHelper . replacePlaceholders ( this . java.lang.String , org.springframework.boot.autoconfigure.web.servlet.error.PlaceholderResolver ) ; org.springframework.boot.autoconfigure.web.servlet.error.HttpServletResponse . getWriter ( ) . append ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ( ) { if ( this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> == null ) { synchronized ( this ) { org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionCollector org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionCollector = new org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionCollector ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.error.NonRecursivePropertyPlaceholderHelper . replacePlaceholders ( this . java.lang.String , org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionCollector ) ; this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> = org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration.ExpressionCollector . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ( ) ; } } return this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> . put ( java.lang.String , this . org.springframework.boot.autoconfigure.web.servlet.error.SpelExpressionParser . parseExpression ( java.lang.String ) ) ; return null ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ( ) { return java.util.Collections . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ( this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ) ; }  <METHOD_END>
<METHOD_START> void ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> , java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> = java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> ; this . org.springframework.boot.autoconfigure.web.servlet.error.EvaluationContext = org.springframework.boot.autoconfigure.web.servlet.error.EvaluationContext ( java.util.Map<java.lang.String,> ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.web.servlet.error.EvaluationContext org.springframework.boot.autoconfigure.web.servlet.error.EvaluationContext ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { StandardEvaluationContext org.springframework.boot.autoconfigure.web.servlet.error.StandardEvaluationContext = new StandardEvaluationContext ( ) ; org.springframework.boot.autoconfigure.web.servlet.error.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.error.StandardEvaluationContext . setRootObject ( java.util.Map<java.lang.String,> ) ; return org.springframework.boot.autoconfigure.web.servlet.error.StandardEvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { Expression org.springframework.boot.autoconfigure.web.servlet.error.Expression = this . java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.web.servlet.error.Expression> . get ( java.lang.String ) ; return java.lang.String ( org.springframework.boot.autoconfigure.web.servlet.error.Expression == null ? null : org.springframework.boot.autoconfigure.web.servlet.error.Expression . getValue ( this . org.springframework.boot.autoconfigure.web.servlet.error.EvaluationContext ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.Object java.lang.Object ) { return HtmlUtils . htmlEscape ( java.lang.Object == null ? null : java.lang.Object . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( ServerProperties org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties ) { this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties = org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ErrorPageRegistry org.springframework.boot.autoconfigure.web.servlet.error.ErrorPageRegistry ) { ErrorPage org.springframework.boot.autoconfigure.web.servlet.error.ErrorPage = new ErrorPage ( this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties . getServlet ( ) . getServletPrefix ( ) + this . org.springframework.boot.autoconfigure.web.servlet.error.ServerProperties . getError ( ) . getPath ( ) ) ; org.springframework.boot.autoconfigure.web.servlet.error.ErrorPageRegistry . addErrorPages ( org.springframework.boot.autoconfigure.web.servlet.error.ErrorPage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableListableBeanFactory )				throws org.springframework.boot.autoconfigure.web.servlet.error.BeansException { java.lang.String [] java.lang.String[] = org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableListableBeanFactory . getBeanNamesForType ( ErrorController .class , false , false ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { try { org.springframework.boot.autoconfigure.web.servlet.error.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) . setAttribute ( AutoProxyUtils . PRESERVE_TARGET_CLASS_ATTRIBUTE , java.lang.Boolean . java.lang.Boolean ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { } } }  <METHOD_END>
