<METHOD_START> java.util.List<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> ( java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> );  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> default org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( java.lang.String java.lang.String ) { return java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( java.lang.String ) . org.springframework.data.util.TypeInformation<?> ( ( ) new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Class<S> ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( )  <METHOD_END>
<METHOD_START> default org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( ) { return java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( ) . org.springframework.data.util.TypeInformation<?> ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<S> ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( )  <METHOD_END>
<METHOD_START> java.util.Optional<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( )  <METHOD_END>
<METHOD_START> default org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( ) { return java.util.Optional<org.springframework.data.util.TypeInformation<?>> ( ) . org.springframework.data.util.TypeInformation<?> ( ( ) new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , java.lang.Class<S> ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> java.lang.Class<S> < S > java.lang.Class<S> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.util.ClassTypeInformation<?> < ? > org.springframework.data.util.ClassTypeInformation<?> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> ( java.lang.Class<?> < ? > java.lang.Class<?> );  <METHOD_END>
<METHOD_START> boolean boolean ( org.springframework.data.util.TypeInformation<?> < ? > org.springframework.data.util.TypeInformation<?> );  <METHOD_END>
<METHOD_START> java.util.List<org.springframework.data.util.TypeInformation<?>> < org.springframework.data.util.TypeInformation<?> < ? > > java.util.List<org.springframework.data.util.TypeInformation<?>> ( )  <METHOD_END>
<METHOD_START> org.springframework.data.util.TypeInformation<? extends S> < ? extends S > org.springframework.data.util.TypeInformation<? extends S> ( ClassTypeInformation < ? > org.springframework.data.util.ClassTypeInformation<?> );  <METHOD_END>
