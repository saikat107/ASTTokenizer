<METHOD_START> @ Before public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( STRING ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( STRING ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( Person .class ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( Venue .class ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( PersonWithAList .class ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( PersonWithIdPropertyOfTypeObjectId .class ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( PersonWithVersionPropertyOfTypeInteger .class ) ) . mergeWith ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) {}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; assert org.springframework.data.mongodb.core.PersonWithAList . getId ( ) == null ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.Collections . java.util.Set ( org.springframework.data.mongodb.core.PersonWithAList ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( java.util.Collections . java.util.Set ( org.springframework.data.mongodb.core.PersonWithAList ) , PersonWithAList .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; assert org.springframework.data.mongodb.core.PersonWithAList . getId ( ) == null ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithAList ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) , Person .class ) ) . expectNext ( org.springframework.data.mongodb.core.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( new Person [] { org.springframework.data.mongodb.core.Person } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( java.util.Collections . java.util.List ( org.springframework.data.mongodb.core.Person ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) , Person .class , STRING ) ) . expectNext ( org.springframework.data.mongodb.core.Person ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.List<org.springframework.data.mongodb.core.Person> ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( ) . with ( Sort . by ( STRING ) ) , Person .class ) ) . expectNextSequence ( java.util.List<org.springframework.data.mongodb.core.Person> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( java.util.List<org.springframework.data.mongodb.core.Person> , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( ) . with ( Sort . by ( STRING ) ) , Person .class , STRING ) ) . expectNextSequence ( java.util.List<org.springframework.data.mongodb.core.Person> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( java.util.List<org.springframework.data.mongodb.core.Person> , Person .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( ) . with ( Sort . by ( STRING ) ) , Person .class ) ) . expectNextSequence ( java.util.List<org.springframework.data.mongodb.core.Person> ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.PersonWithAList ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithAList ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.PersonWithAList . getId ( ) ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; } ) . verifyComplete ( ) ; org.springframework.data.mongodb.core.PersonWithAList . addToWishList ( STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithAList ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; } ) . verifyComplete ( ) ; Friend org.springframework.data.mongodb.core.Friend = new Friend ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( STRING ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( NUMBER ) ; org.springframework.data.mongodb.core.PersonWithAList . addFriend ( org.springframework.data.mongodb.core.Friend ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithAList ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . getWishList ( ) . size ( ) , is ( NUMBER ) ) ; assertThat ( actual . getFriends ( ) . size ( ) , is ( NUMBER ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.PersonWithAList ( STRING , NUMBER ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.PersonWithAList ( STRING , NUMBER ) ; PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = org.springframework.data.mongodb.core.PersonWithAList ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.PersonWithAList , org.springframework.data.mongodb.core.PersonWithAList , org.springframework.data.mongodb.core.PersonWithAList ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( where ( STRING ) . gt ( NUMBER ) ) ; org.springframework.data.mongodb.core.Query . with ( Sort . by ( Direction . DESC , STRING ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , PersonWithAList .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstName ( ) , is ( STRING ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( where ( STRING ) . gt ( NUMBER ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . updateFirst ( new Query ( where ( STRING ) . is ( NUMBER ) ) , new Update ( ) . set ( STRING , STRING ) , Person .class ) ) . flatMap ( p -> template . find ( new Query ( where ( STRING ) . is ( NUMBER ) ) , Person .class ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstName ( ) , is ( equalTo ( STRING ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person , STRING ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . updateFirst ( new Query ( where ( STRING ) . is ( NUMBER ) ) , new Update ( ) . set ( STRING , STRING ) , STRING ) ) . flatMap ( p -> template . find ( new Query ( where ( STRING ) . is ( NUMBER ) ) , Person .class , STRING ) ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstName ( ) , is ( equalTo ( STRING ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = new Query ( new Criteria ( ) . orOperator ( where ( STRING ) . is ( STRING ) , Criteria . where ( STRING ) . is ( STRING ) ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( Mono . just ( java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ) ) . flatMap ( a -> template . updateMulti ( query , new Update ( ) . set ( STRING , STRING ) , Person .class ) ) . thenMany ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( new Query ( where ( STRING ) . is ( STRING ) ) , Person .class ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = new Query ( new Criteria ( ) . orOperator ( where ( STRING ) . is ( STRING ) , Criteria . where ( STRING ) . is ( STRING ) ) ) ; java.util.List<org.springframework.data.mongodb.core.Person> < Person > java.util.List<org.springframework.data.mongodb.core.Person> = java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ; Flux < Person > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Person> = org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( Mono . just ( java.util.List<org.springframework.data.mongodb.core.Person> ) , STRING ) . collectList ( ) . flatMap ( a -> template . updateMulti ( query , new Update ( ) . set ( STRING , STRING ) , Person .class , STRING ) ) . flatMap ( p -> template . find ( new Query ( where ( STRING ) . is ( STRING ) ) , Person .class , STRING ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Person> ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; Person org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectError ( DataIntegrityViolationException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; ObjectId org.springframework.data.mongodb.core.ObjectId = new ObjectId ( ) ; Person org.springframework.data.mongodb.core.Person = new Person ( org.springframework.data.mongodb.core.ObjectId , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( where ( STRING ) . is ( STRING ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . push ( STRING , NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) ) . expectError ( DataIntegrityViolationException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; ObjectId org.springframework.data.mongodb.core.ObjectId = new ObjectId ( ) ; Person org.springframework.data.mongodb.core.Person = new Person ( org.springframework.data.mongodb.core.ObjectId , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.Arrays . java.util.List ( org.springframework.data.mongodb.core.Person , org.springframework.data.mongodb.core.Person ) ) ) . expectError ( DataIntegrityViolationException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.Arrays . java.util.List ( new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) , new Person ( STRING , NUMBER ) ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . inc ( STRING , NUMBER ) ; Person org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , Person .class , STRING ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) . returnNew ( true ) , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , null , Person .class , STRING ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( org.springframework.data.mongodb.core.Query , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; Query org.springframework.data.mongodb.core.Query = new Query ( Criteria . where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.Person = org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAndModify ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , new FindAndModifyOptions ( ) . returnNew ( true ) . upsert ( true ) , Person .class ) . block ( ) ; assertThat ( org.springframework.data.mongodb.core.Person . getFirstName ( ) , is ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.Person . getAge ( ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample = new org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample = new org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ( STRING , STRING ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample = new org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( java.util.Arrays . java.util.List<org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample> ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ) , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . in ( STRING , STRING ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAllAndRemove ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( new Query ( ) , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) . expectNext ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . age = NUMBER ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithVersionPropertyOfTypeInteger .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . version , is ( NUMBER ) ) ; } ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithVersionPropertyOfTypeInteger .class ) . flatMap ( p -> { person . firstName = STRING ; return template . save ( person ) ; } ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithVersionPropertyOfTypeInteger .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . version , is ( NUMBER ) ) ; } ) . verifyComplete ( ) ; person . version = NUMBER ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) . expectError ( OptimisticLockingFailureException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) ; org.springframework.data.mongodb.core.Document . put ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.Document , org.springframework.data.mongodb.core.ReactiveMongoTemplate . determineCollectionName ( PersonWithVersionPropertyOfTypeInteger .class ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . remove ( new Query ( ) , java.lang.String ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; PersonWithConvertedId org.springframework.data.mongodb.core.PersonWithConvertedId = new PersonWithConvertedId ( ) ; person . name = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithConvertedId , java.lang.String ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithConvertedId .class , java.lang.String ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . remove ( org.springframework.data.mongodb.core.PersonWithConvertedId , java.lang.String ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithConvertedId .class , java.lang.String ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( java.util.Map<java.lang.String,java.lang.String> , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( new java.lang.Object ( ) , STRING ) ) . expectError ( java.lang.IllegalArgumentException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.Document = new Document ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Document , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( org.springframework.data.mongodb.core.Document . containsKey ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Document org.springframework.data.mongodb.core.Document = new Document ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Document , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findById ( org.springframework.data.mongodb.core.Document . get ( STRING ) , Document .class ) ) . expectError ( java.lang.IllegalArgumentException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.Document = new Document ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Document , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findById ( org.springframework.data.mongodb.core.Document . get ( STRING ) , Document .class , STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual . get ( STRING ) , is ( dbObject . get ( STRING ) ) ) ; assertThat ( actual . get ( STRING ) , is ( dbObject . get ( STRING ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<org.springframework.data.mongodb.core.Venue> < Venue > java.util.List<org.springframework.data.mongodb.core.Venue> = java.util.Arrays . java.util.List ( new Venue ( STRING , - NUMBER , NUMBER ) , new Venue ( STRING , - NUMBER , NUMBER ) , new Venue ( STRING , - NUMBER , NUMBER ) , new Venue ( STRING , - NUMBER , NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.List<org.springframework.data.mongodb.core.Venue> ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; IndexOperationsAdapter . blocking ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Venue .class ) ) . ensureIndex ( new GeospatialIndex ( STRING ) . typed ( GeoSpatialIndexType . GEO_2D ) ) ; NearQuery org.springframework.data.mongodb.core.NearQuery = NearQuery . near ( - NUMBER , NUMBER , Metrics . KILOMETERS ) . num ( NUMBER ) . maxDistance ( NUMBER , Metrics . KILOMETERS ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . geoNear ( org.springframework.data.mongodb.core.NearQuery , Venue .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; NearQuery org.springframework.data.mongodb.core.NearQuery = NearQuery . near ( - NUMBER , NUMBER , Metrics . KILOMETERS ) . num ( NUMBER ) . maxDistance ( NUMBER , Metrics . KILOMETERS ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . geoNear ( org.springframework.data.mongodb.core.NearQuery , Venue .class ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( STRING , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( STRING , STRING ) ) . expectError ( MappingException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insertAll ( java.util.Collections . java.util.Set ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( PersonWithIdPropertyOfTypeObjectId .class ) ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( null , PersonWithIdPropertyOfTypeObjectId .class ) ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersonWithVersionPropertyOfTypeLong org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeLong = new PersonWithVersionPropertyOfTypeLong ( ) ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeLong , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ReactiveMongoTemplate org.springframework.data.mongodb.core.ReactiveMongoTemplate = new ReactiveMongoTemplate ( org.springframework.data.mongodb.core.SimpleReactiveMongoDatabaseFactory ) ; org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteResultChecking ( WriteResultChecking . EXCEPTION ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . indexOps ( Person .class ) . ensureIndex ( new Index ( ) . on ( STRING , Direction . DESC ) . unique ( ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Person org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; org.springframework.data.mongodb.core.Person = new Person ( new ObjectId ( ) , STRING ) ; org.springframework.data.mongodb.core.Person . setAge ( NUMBER ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ) . expectError ( DataIntegrityViolationException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ReactiveMongoTemplate . setWriteConcern ( WriteConcern . MAJORITY ) ; PersonWithVersionPropertyOfTypeInteger org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger = new PersonWithVersionPropertyOfTypeInteger ( ) ; person . firstName = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . version , is ( NUMBER ) ) ; person . version = null ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.PersonWithVersionPropertyOfTypeInteger ) ) . expectError ( DuplicateKeyException .class ) . verify ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) ; java.lang.String java.lang.String = org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( Person .class ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . find ( org.springframework.data.mongodb.core.Query , java.util.HashMap .class , java.lang.String ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . count ( org.springframework.data.mongodb.core.Query , java.lang.String ) ) . expectNext ( NUMBER ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { VersionedPerson org.springframework.data.mongodb.core.VersionedPerson = new VersionedPerson ( ) ; person . firstname = STRING ; person . lastname = STRING ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.VersionedPerson ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( person . id , is ( notNullValue ( ) ) ) ; person . lastname = null ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.VersionedPerson ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( query ( where ( STRING ) . is ( person . id ) ) , VersionedPerson .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . lastname , is ( nullValue ( ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Person org.springframework.data.mongodb.core.Person = new Person ( STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; org.springframework.data.mongodb.core.Person . setFirstName ( null ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Person ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findOne ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.Person . getId ( ) ) ) , Person .class ) ) . consumeNextWith ( actual -> { assertThat ( actual . getFirstName ( ) , is ( nullValue ( ) ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Document org.springframework.data.mongodb.core.Document = new Document ( ) . append ( STRING , STRING ) . append ( STRING , STRING ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.Document , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . findAll ( Document .class , STRING ) ) . consumeNextWith ( actual -> { assertThat ( actual . containsKey ( STRING ) , is ( true ) ) ; } ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample = new org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . save ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample . java.lang.String ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . exists ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) . expectNext ( true ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . exists ( query ( where ( STRING ) . is ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample . java.lang.String ) ) , org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) ) . expectNext ( true ) . verifyComplete ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . exists ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class , org.springframework.data.mongodb.core.ReactiveMongoTemplate . getCollectionName ( org.springframework.data.mongodb.core.ReactiveMongoTemplateTests.Sample .class ) ) ) . expectNext ( true ) . verifyComplete ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( STRING ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . createCollection ( STRING , new CollectionOptions ( NUMBER , NUMBER , true ) ) ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( new Document ( STRING , java.lang.Math . double ( ) ) . append ( STRING , STRING ) , STRING ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> < Document > java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> = new java.util.concurrent.LinkedBlockingQueue<org.springframework.data.mongodb.core.Document> <> ( NUMBER ) ; Flux < Document > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoTemplate . tail ( null , Document .class , STRING ) ; Disposable org.springframework.data.mongodb.core.Disposable = org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> . doOnNext ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> :: add ) . subscribe ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( notNullValue ( ) ) ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . isEmpty ( ) , is ( true ) ) ; org.springframework.data.mongodb.core.Disposable . dispose ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . dropCollection ( STRING ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . createCollection ( STRING , new CollectionOptions ( NUMBER , NUMBER , true ) ) ) . then ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( new Document ( STRING , java.lang.Math . double ( ) ) . append ( STRING , STRING ) , STRING ) ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> < Document > java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> = new java.util.concurrent.LinkedBlockingQueue<org.springframework.data.mongodb.core.Document> <> ( NUMBER ) ; Flux < Document > org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> = org.springframework.data.mongodb.core.ReactiveMongoTemplate . tail ( null , Document .class , STRING ) ; Disposable org.springframework.data.mongodb.core.Disposable = org.springframework.data.mongodb.core.Flux<org.springframework.data.mongodb.core.Document> . doOnNext ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> :: add ) . subscribe ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( notNullValue ( ) ) ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . isEmpty ( ) , is ( true ) ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( new Document ( STRING , java.lang.Math . double ( ) ) . append ( STRING , STRING ) , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( notNullValue ( ) ) ) ; org.springframework.data.mongodb.core.Disposable . dispose ( ) ; StepVerifier . create ( org.springframework.data.mongodb.core.ReactiveMongoTemplate . insert ( new Document ( STRING , java.lang.Math . double ( ) ) . append ( STRING , STRING ) , STRING ) ) . expectNextCount ( NUMBER ) . verifyComplete ( ) ; assertThat ( java.util.concurrent.BlockingQueue<org.springframework.data.mongodb.core.Document> . poll ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.PersonWithAList org.springframework.data.mongodb.core.PersonWithAList ( java.lang.String java.lang.String , int int ) { PersonWithAList org.springframework.data.mongodb.core.PersonWithAList = new PersonWithAList ( ) ; org.springframework.data.mongodb.core.PersonWithAList . setFirstName ( java.lang.String ) ; org.springframework.data.mongodb.core.PersonWithAList . setAge ( int ) ; return org.springframework.data.mongodb.core.PersonWithAList ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
