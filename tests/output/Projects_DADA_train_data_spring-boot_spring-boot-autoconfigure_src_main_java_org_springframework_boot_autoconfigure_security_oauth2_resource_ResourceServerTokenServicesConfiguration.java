<METHOD_START> @ Bean @ ConditionalOnMissingBean public org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory ( ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateCustomizer> < UserInfoRestTemplateCustomizer > > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateCustomizer>> , ObjectProvider < OAuth2ProtectedResourceDetails > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails> , ObjectProvider < OAuth2ClientContext > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext> ) { return new DefaultUserInfoRestTemplateFactory ( org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateCustomizer>> , org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails> , org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ClientContext> ) ; }  <METHOD_END>
<METHOD_START> protected void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices ( ) { RemoteTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices = new RemoteTokenServices ( ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices . setCheckTokenEndpointUrl ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getTokenInfoUri ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices . setClientId ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientId ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices . setClientSecret ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientSecret ( ) ) ; return org.springframework.boot.autoconfigure.security.oauth2.resource.RemoteTokenServices ; }  <METHOD_END>
<METHOD_START> public void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties , ObjectProvider < OAuth2ConnectionFactory < ? > > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ConnectionFactory<?>> , UserInfoRestTemplateFactory org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory , ObjectProvider < AuthoritiesExtractor > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor> , ObjectProvider < PrincipalExtractor > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor> ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ConnectionFactory<?> = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ConnectionFactory<?>> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestOperations = org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory . getUserInfoRestTemplate ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnBean ( ConnectionFactoryLocator .class ) @ ConditionalOnMissingBean ( ResourceServerTokenServices .class ) public org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSocialTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.SpringSocialTokenServices ( ) { return new SpringSocialTokenServices ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ConnectionFactory<> , this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientId ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( { ConnectionFactoryLocator .class , ResourceServerTokenServices .class } ) public org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ( ) { UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = new UserInfoTokenServices ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getUserInfoUri ( ) , this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientId ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setTokenType ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getTokenType ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setRestTemplate ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestOperations ) ; if ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor != null ) { org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setAuthoritiesExtractor ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor ) ; } if ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor != null ) { org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setPrincipalExtractor ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor ) ; } return org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ; }  <METHOD_END>
<METHOD_START> public void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties , UserInfoRestTemplateFactory org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory , ObjectProvider < AuthoritiesExtractor > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor> , ObjectProvider < PrincipalExtractor > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor> ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestOperations = org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoRestTemplateFactory . getUserInfoRestTemplate ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor> . getIfAvailable ( ) ; this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ResourceServerTokenServices .class ) public org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ( ) { UserInfoTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices = new UserInfoTokenServices ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getUserInfoUri ( ) , this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientId ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setRestTemplate ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2RestOperations ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setTokenType ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getTokenType ( ) ) ; if ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor != null ) { org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setAuthoritiesExtractor ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.AuthoritiesExtractor ) ; } if ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor != null ) { org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices . setPrincipalExtractor ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.PrincipalExtractor ) ; } return org.springframework.boot.autoconfigure.security.oauth2.resource.UserInfoTokenServices ; }  <METHOD_END>
<METHOD_START> public void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ResourceServerTokenServices .class ) public org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ( ) { DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices = new DefaultTokenServices ( ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices . setTokenStore ( org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore ( ) ) ; return org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore ( ) { return new JwkTokenStore ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getJwk ( ) . getKeySetUri ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( ResourceServerProperties org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer> < JwtAccessTokenConverterConfigurer > > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer>> , ObjectProvider < java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer> < JwtAccessTokenConverterRestTemplateCustomizer > > org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer>> ) { this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties = org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties ; this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer> = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer>> . getIfAvailable ( ) ; this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer> = org.springframework.boot.autoconfigure.security.oauth2.resource.ObjectProvider<java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer>> . getIfAvailable ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnMissingBean ( ResourceServerTokenServices .class ) public org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ( ) { DefaultTokenServices org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices = new DefaultTokenServices ( ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices . setTokenStore ( org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore ( ) ) ; return org.springframework.boot.autoconfigure.security.oauth2.resource.DefaultTokenServices ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore org.springframework.boot.autoconfigure.security.oauth2.resource.TokenStore ( ) { return new JwtTokenStore ( org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter ( ) { JwtAccessTokenConverter org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter = new JwtAccessTokenConverter ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getJwt ( ) . getKeyValue ( ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { try { java.lang.String = java.lang.String ( ) ; } catch ( ResourceAccessException org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceAccessException ) { org.springframework.boot.autoconfigure.security.oauth2.resource.Log . warn ( STRING + STRING ) ; } } if ( StringUtils . hasText ( java.lang.String ) && ! java.lang.String . boolean ( STRING ) ) { org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter . setSigningKey ( java.lang.String ) ; } if ( java.lang.String != null ) { org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter . setVerifierKey ( java.lang.String ) ; } if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer> ) ) { AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer> ) ; for ( JwtAccessTokenConverterConfigurer org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer : this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer> ) { org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer . configure ( org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter ) ; } } return org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverter ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { RestTemplate org.springframework.boot.autoconfigure.security.oauth2.resource.RestTemplate = new RestTemplate ( ) ; if ( ! CollectionUtils . isEmpty ( this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer> ) ) { for ( JwtAccessTokenConverterRestTemplateCustomizer org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer : this . java.util.List<org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer> ) { org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterRestTemplateCustomizer . customize ( org.springframework.boot.autoconfigure.security.oauth2.resource.RestTemplate ) ; } } HttpHeaders org.springframework.boot.autoconfigure.security.oauth2.resource.HttpHeaders = new HttpHeaders ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientId ( ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getClientSecret ( ) ; if ( java.lang.String != null && java.lang.String != null ) { byte [] byte[] = Base64 . encode ( ( java.lang.String + STRING + java.lang.String ) . byte[] ( ) ) ; org.springframework.boot.autoconfigure.security.oauth2.resource.HttpHeaders . add ( STRING , STRING + new java.lang.String ( byte[] ) ) ; } HttpEntity < java.lang.Void > org.springframework.boot.autoconfigure.security.oauth2.resource.HttpEntity<java.lang.Void> = new HttpEntity <> ( org.springframework.boot.autoconfigure.security.oauth2.resource.HttpHeaders ) ; java.lang.String java.lang.String = this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerProperties . getJwt ( ) . getKeyUri ( ) ; return ( java.lang.String ) org.springframework.boot.autoconfigure.security.oauth2.resource.RestTemplate . exchange ( java.lang.String , HttpMethod . GET , org.springframework.boot.autoconfigure.security.oauth2.resource.HttpEntity<java.lang.Void> , java.util.Map .class ) . getBody ( ) . get ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.security.oauth2.resource.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; Environment org.springframework.boot.autoconfigure.security.oauth2.resource.Environment = org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext . getEnvironment ( ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.security.oauth2.resource.Environment , STRING ) ; java.lang.Boolean java.lang.Boolean = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Boolean .class ) ; if ( java.lang.Boolean == null ) { java.lang.Boolean = org.springframework.boot.autoconfigure.security.oauth2.resource.Environment . resolvePlaceholders ( STRING ) . equals ( STRING ) ; } java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( ! StringUtils . hasLength ( java.lang.String ) && ! StringUtils . hasLength ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; } if ( StringUtils . hasLength ( java.lang.String ) && java.lang.Boolean ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.security.oauth2.resource.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext . getEnvironment ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) || StringUtils . hasText ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.security.oauth2.resource.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; RelaxedPropertyResolver org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext . getEnvironment ( ) , STRING ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.security.oauth2.resource.RelaxedPropertyResolver . getProperty ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.security.oauth2.resource.AnnotatedTypeMetadata ) { return ConditionOutcome . inverse ( this . org.springframework.boot.autoconfigure.security.oauth2.resource.ResourceServerTokenServicesConfiguration.TokenInfoCondition . org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionOutcome ( org.springframework.boot.autoconfigure.security.oauth2.resource.ConditionContext , org.springframework.boot.autoconfigure.security.oauth2.resource.AnnotatedTypeMetadata ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpResponse ( HttpRequest org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte [] byte[] , ClientHttpRequestExecution org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution ) throws java.io.IOException { org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest . getHeaders ( ) . setAccept ( java.util.Arrays . java.util.List ( MediaType . APPLICATION_JSON ) ) ; return org.springframework.boot.autoconfigure.security.oauth2.resource.ClientHttpRequestExecution . execute ( org.springframework.boot.autoconfigure.security.oauth2.resource.HttpRequest , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AccessTokenRequest org.springframework.boot.autoconfigure.security.oauth2.resource.AccessTokenRequest , OAuth2ProtectedResourceDetails org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ProtectedResourceDetails , MultiValueMap < java.lang.String , java.lang.String > org.springframework.boot.autoconfigure.security.oauth2.resource.MultiValueMap<java.lang.String,java.lang.String> , HttpHeaders org.springframework.boot.autoconfigure.security.oauth2.resource.HttpHeaders ) { org.springframework.boot.autoconfigure.security.oauth2.resource.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . APPLICATION_JSON ) ) ; }  <METHOD_END>
