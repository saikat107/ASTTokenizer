<METHOD_START> @ Test public void void ( ) { org.springframework.integration.aggregator.integration.DirectChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; org.springframework.integration.aggregator.integration.DirectChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; @ java.lang.SuppressWarnings ( STRING ) Message < java.lang.String > org.springframework.integration.aggregator.integration.Message<java.lang.String> = ( Message < java.lang.String > ) org.springframework.integration.aggregator.integration.PollableChannel . receive ( ) ; java.lang.String java.lang.String = org.springframework.integration.aggregator.integration.Message<java.lang.String> . getPayload ( ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; assertTrue ( STRING + java.lang.String , java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Aggregator public org.springframework.integration.aggregator.integration.Message<?> < ? > org.springframework.integration.aggregator.integration.Message<?> ( final java.util.List<org.springframework.integration.aggregator.integration.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.integration.Message<?>> ) { return MessageBuilder . withPayload ( java.util.List<org.springframework.integration.aggregator.integration.Message<?>> . toString ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ ReleaseStrategy public boolean boolean ( final java.util.List<org.springframework.integration.aggregator.integration.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.aggregator.integration.Message<?>> ) { return java.util.List<org.springframework.integration.aggregator.integration.Message<?>> . size ( ) > NUMBER ; }  <METHOD_END>
<METHOD_START> @ CorrelationStrategy public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.aggregator.integration.Message<?> ) { return STRING ; }  <METHOD_END>
