<METHOD_START> public void ( ) { setOrder ( Ordered . LOWEST_PRECEDENCE ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception ) { try { if ( java.lang.Exception instanceof HttpRequestMethodNotSupportedException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( HttpRequestMethodNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof HttpMediaTypeNotSupportedException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( HttpMediaTypeNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof HttpMediaTypeNotAcceptableException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( HttpMediaTypeNotAcceptableException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof MissingPathVariableException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( MissingPathVariableException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof MissingServletRequestParameterException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( MissingServletRequestParameterException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof ServletRequestBindingException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( ServletRequestBindingException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof ConversionNotSupportedException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( ConversionNotSupportedException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof TypeMismatchException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( TypeMismatchException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof HttpMessageNotReadableException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( HttpMessageNotReadableException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof HttpMessageNotWritableException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( HttpMessageNotWritableException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof MethodArgumentNotValidException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( MethodArgumentNotValidException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof MissingServletRequestPartException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( MissingServletRequestPartException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof BindException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( BindException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof NoHandlerFoundException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( NoHandlerFoundException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } else if ( java.lang.Exception instanceof AsyncRequestTimeoutException ) { return org.springframework.web.servlet.mvc.support.ModelAndView ( ( AsyncRequestTimeoutException ) java.lang.Exception , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + java.lang.Exception . java.lang.Class<? extends java.lang.Exception> ( ) . java.lang.String ( ) + STRING , java.lang.Exception ) ; } } return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpRequestMethodNotSupportedException org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.Log . warn ( org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException . getMessage ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException . getSupportedMethods ( ) ; if ( java.lang.String[] != null ) { org.springframework.web.servlet.mvc.support.HttpServletResponse . setHeader ( STRING , StringUtils . arrayToDelimitedString ( java.lang.String[] , STRING ) ) ; } org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_METHOD_NOT_ALLOWED , org.springframework.web.servlet.mvc.support.HttpRequestMethodNotSupportedException . getMessage ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpMediaTypeNotSupportedException org.springframework.web.servlet.mvc.support.HttpMediaTypeNotSupportedException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_UNSUPPORTED_MEDIA_TYPE ) ; java.util.List<org.springframework.web.servlet.mvc.support.MediaType> < MediaType > java.util.List<org.springframework.web.servlet.mvc.support.MediaType> = org.springframework.web.servlet.mvc.support.HttpMediaTypeNotSupportedException . getSupportedMediaTypes ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<org.springframework.web.servlet.mvc.support.MediaType> ) ) { org.springframework.web.servlet.mvc.support.HttpServletResponse . setHeader ( STRING , MediaType . toString ( java.util.List<org.springframework.web.servlet.mvc.support.MediaType> ) ) ; } return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpMediaTypeNotAcceptableException org.springframework.web.servlet.mvc.support.HttpMediaTypeNotAcceptableException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_NOT_ACCEPTABLE ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( MissingPathVariableException org.springframework.web.servlet.mvc.support.MissingPathVariableException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , org.springframework.web.servlet.mvc.support.MissingPathVariableException . getMessage ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( MissingServletRequestParameterException org.springframework.web.servlet.mvc.support.MissingServletRequestParameterException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.support.MissingServletRequestParameterException . getMessage ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( ServletRequestBindingException org.springframework.web.servlet.mvc.support.ServletRequestBindingException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.support.ServletRequestBindingException . getMessage ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( ConversionNotSupportedException org.springframework.web.servlet.mvc.support.ConversionNotSupportedException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.servlet.mvc.support.ConversionNotSupportedException ) ; } void ( org.springframework.web.servlet.mvc.support.ConversionNotSupportedException , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( TypeMismatchException org.springframework.web.servlet.mvc.support.TypeMismatchException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.servlet.mvc.support.TypeMismatchException ) ; } org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpMessageNotReadableException org.springframework.web.servlet.mvc.support.HttpMessageNotReadableException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.servlet.mvc.support.HttpMessageNotReadableException ) ; } org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( org.springframework.web.servlet.mvc.support.HttpMessageNotReadableException . getErrorStatus ( ) . orElse ( HttpStatus . BAD_REQUEST ) . value ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( HttpMessageNotWritableException org.springframework.web.servlet.mvc.support.HttpMessageNotWritableException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.web.servlet.mvc.support.HttpMessageNotWritableException ) ; } void ( org.springframework.web.servlet.mvc.support.HttpMessageNotWritableException , org.springframework.web.servlet.mvc.support.HttpServletRequest , org.springframework.web.servlet.mvc.support.HttpServletResponse ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( MethodArgumentNotValidException org.springframework.web.servlet.mvc.support.MethodArgumentNotValidException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( MissingServletRequestPartException org.springframework.web.servlet.mvc.support.MissingServletRequestPartException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST , org.springframework.web.servlet.mvc.support.MissingServletRequestPartException . getMessage ( ) ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( BindException org.springframework.web.servlet.mvc.support.BindException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_BAD_REQUEST ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( NoHandlerFoundException org.springframework.web.servlet.mvc.support.NoHandlerFoundException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_NOT_FOUND ) ; return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.servlet.mvc.support.ModelAndView org.springframework.web.servlet.mvc.support.ModelAndView ( AsyncRequestTimeoutException org.springframework.web.servlet.mvc.support.AsyncRequestTimeoutException , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse , java.lang.Object java.lang.Object ) throws java.io.IOException { if ( ! org.springframework.web.servlet.mvc.support.HttpServletResponse . isCommitted ( ) ) { org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_SERVICE_UNAVAILABLE ) ; } else if ( logger . isErrorEnabled ( ) ) { logger . error ( STRING + org.springframework.web.servlet.mvc.support.HttpServletRequest . getMethod ( ) + STRING + org.springframework.web.servlet.mvc.support.HttpServletRequest . getRequestURI ( ) + STRING ) ; } return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Exception java.lang.Exception , HttpServletRequest org.springframework.web.servlet.mvc.support.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.mvc.support.HttpServletResponse )			throws java.io.IOException { org.springframework.web.servlet.mvc.support.HttpServletRequest . setAttribute ( STRING , java.lang.Exception ) ; org.springframework.web.servlet.mvc.support.HttpServletResponse . sendError ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; }  <METHOD_END>
