<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ) ; org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfBeansWithList ) ; org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( STRING ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( STRING ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( STRING ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( STRING ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfBean ) ; java.lang.String java.lang.String = org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( STRING ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ) ; org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfMaps org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfMaps = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfMaps ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfMaps ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfMaps ) ; org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfLists org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfLists = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfLists ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfLists ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; RelaxedDataBinder org.springframework.boot.bind.RelaxedDataBinder = new RelaxedDataBinder ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedListOfLists ) ; org.springframework.boot.bind.RelaxedDataBinder . normalizePath ( org.springframework.boot.bind.BeanWrapperImpl , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMap ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , new java.util.LinkedHashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , new java.util.ArrayList <> ( ) ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TargetWithNestedObject org.springframework.boot.bind.TargetWithNestedObject = new TargetWithNestedObject ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.TargetWithNestedObject ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , STRING ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ( ) ; BeanWrapperImpl org.springframework.boot.bind.BeanWrapperImpl = new BeanWrapperImpl ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ) ; org.springframework.boot.bind.BeanWrapperImpl . setAutoGrowNestedPaths ( true ) ; TypeDescriptor org.springframework.boot.bind.TypeDescriptor = org.springframework.boot.bind.BeanWrapperImpl . getPropertyTypeDescriptor ( STRING ) ; assertThat ( org.springframework.boot.bind.TypeDescriptor . isMap ( ) ) . isTrue ( ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; org.springframework.boot.bind.BeanWrapperImpl . setPropertyValue ( STRING , STRING ) ; org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.bind.BeanWrapperImpl . getPropertyValue ( STRING ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString = new org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ( ) ; java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> <> ( ) ; org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString . void ( java.util.LinkedHashMap<java.lang.String,java.util.List<java.lang.String>> ) ; SpelExpressionParser org.springframework.boot.bind.SpelExpressionParser = new SpelExpressionParser ( ) ; StandardEvaluationContext org.springframework.boot.bind.StandardEvaluationContext = new StandardEvaluationContext ( org.springframework.boot.bind.BindingPreparationTests.TargetWithNestedMapOfListOfString ) ; org.springframework.boot.bind.StandardEvaluationContext . addPropertyAccessor ( new MapAccessor ( ) ) ; Expression org.springframework.boot.bind.Expression = org.springframework.boot.bind.SpelExpressionParser . parseExpression ( STRING ) ; assertThat ( org.springframework.boot.bind.Expression . getValue ( org.springframework.boot.bind.StandardEvaluationContext ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( ) { return this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ) { this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> ( ) { return this . java.util.List<java.util.Map<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.Map<java.lang.String,java.lang.String>> < java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > > java.util.List<java.util.Map<java.lang.String,java.lang.String>> ) { this . java.util.List<java.util.Map<java.lang.String,java.lang.String>> = java.util.List<java.util.Map<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> ( ) { return this . java.util.List<java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<java.util.List<java.lang.String>> < java.util.List<java.lang.String> < java.lang.String > > java.util.List<java.util.List<java.lang.String>> ) { this . java.util.List<java.util.List<java.lang.String>> = java.util.List<java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> < org.springframework.boot.bind.BindingPreparationTests.TargetWithList > java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> ( ) { return this . java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> < org.springframework.boot.bind.BindingPreparationTests.TargetWithList > java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> ) { this . java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> = java.util.List<org.springframework.boot.bind.BindingPreparationTests.TargetWithList> ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> < org.springframework.boot.bind.BindingPreparationTests.VanillaTarget > java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ( ) { return this . java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> < org.springframework.boot.bind.BindingPreparationTests.VanillaTarget > java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ) { this . java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> = java.util.List<org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> < java.lang.String , org.springframework.boot.bind.BindingPreparationTests.VanillaTarget > java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ( ) { return this . java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> < java.lang.String , org.springframework.boot.bind.BindingPreparationTests.VanillaTarget > java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ) { this . java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> = java.util.Map<java.lang.String,org.springframework.boot.bind.BindingPreparationTests.VanillaTarget> ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
