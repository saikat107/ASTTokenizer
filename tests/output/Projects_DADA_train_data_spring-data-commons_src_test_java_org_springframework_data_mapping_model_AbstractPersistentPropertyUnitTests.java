<METHOD_START> @ Before public void void ( ) { org.springframework.data.mapping.model.TypeInformation<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex> = ClassTypeInformation . from ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class ) ; org.springframework.data.mapping.model.PersistentEntity<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> = new BasicPersistentEntity <> ( org.springframework.data.mapping.model.TypeInformation<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex> ) ; org.springframework.data.mapping.model.SimpleTypeHolder = new SimpleTypeHolder ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) . getComponentType ( ) ) . hasValue ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) . getPersistentEntityType ( ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) . isEntity ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) . isEntity ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.FirstConcrete .class , STRING ) ; org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SecondConcrete .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ) . isEqualTo ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . int ( ) ) . isEqualTo ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) . isTransient ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getGetter ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getSetter ( ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getGetter ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getSetter ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getGetter ( ) ) . isPresent ( ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getSetter ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getGetter ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getSetter ( ) ) . isPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class , STRING ) ; PersistentProperty < org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty > org.springframework.data.mapping.model.PersistentProperty<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> = new org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( Property . of ( java.lang.reflect.Field ) , org.springframework.data.mapping.model.BasicPersistentEntity<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.AccessorTestClass .class ) , org.springframework.data.mapping.model.SimpleTypeHolder ) ; assertThat ( org.springframework.data.mapping.model.PersistentProperty<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> . getGetter ( ) ) . isNotPresent ( ) ; assertThat ( org.springframework.data.mapping.model.PersistentProperty<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> . getSetter ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getActualType ( ) ) . isEqualTo ( Person .class ) ; org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getActualType ( ) ) . isEqualTo ( Person .class ) ; org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getActualType ( ) ) . isEqualTo ( Person .class ) ; org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getActualType ( ) ) . isEqualTo ( Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . isEntity ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . isEntity ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . isEntity ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.Sample .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . isEntity ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TreeMapWrapper .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getPersistentEntityType ( ) ) . isEmpty ( ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . isEntity ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty = org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.TestClassComplex .class , STRING ) ; assertThat ( org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mapping.model.BasicPersistentEntity<T,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> < T , org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty > org.springframework.data.mapping.model.BasicPersistentEntity<T,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> ( java.lang.Class<T> < T > java.lang.Class<T> ) { return new BasicPersistentEntity <> ( ClassTypeInformation . from ( java.lang.Class<T> ) ) ; }  <METHOD_END>
<METHOD_START> private < T > org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { java.util.Optional<java.lang.reflect.Field> < java.lang.reflect.Field > java.util.Optional<java.lang.reflect.Field> = java.util.Optional . java.util.Optional ( ReflectionUtils . findField ( java.lang.Class<T> , java.lang.String ) ) ; java.util.Optional<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.Optional<java.beans.PropertyDescriptor> = java.util.Optional<java.beans.PropertyDescriptor> ( java.lang.Class<T> , java.lang.String ) ; Property org.springframework.data.mapping.model.Property = java.util.Optional<java.lang.reflect.Field> . java.util.Optional<java.lang.Object> ( java.lang.reflect.Field -> java.util.Optional<java.beans.PropertyDescriptor> . java.util.Optional<java.lang.Object> ( java.beans.PropertyDescriptor -> Property . of ( java.lang.reflect.Field , java.beans.PropertyDescriptor ) ) . orElseGet ( ( ) Property . of ( it ) ) ) . orElseGet ( ( ) getPropertyDescriptor ( type , name ) . map ( it -> Property . of ( it ) ) . orElseThrow ( ( ) new IllegalArgumentException ( String . format ( STRING , name , type ) ) ) ) ; return new org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty ( org.springframework.data.mapping.model.Property , org.springframework.data.mapping.model.BasicPersistentEntity<T,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> ( java.lang.Class<T> ) , org.springframework.data.mapping.model.SimpleTypeHolder ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.beans.PropertyDescriptor> < java.beans.PropertyDescriptor > java.util.Optional<java.beans.PropertyDescriptor> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { try { return java.util.Arrays . java.util.stream.Stream<java.beans.PropertyDescriptor> ( java.beans.Introspector . java.beans.BeanInfo ( java.lang.Class<> ) . java.beans.PropertyDescriptor[] ( ) ) . java.util.stream.Stream<java.beans.PropertyDescriptor> ( java.beans.PropertyDescriptor -> java.beans.PropertyDescriptor . java.lang.String ( ) . boolean ( java.lang.String ) ) . java.util.Optional<java.beans.PropertyDescriptor> ( ) ; } catch ( java.beans.IntrospectionException java.beans.IntrospectionException ) { throw new java.lang.RuntimeException ( java.beans.IntrospectionException ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.Long . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.Long = java.lang.Long . long ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return null ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { this . java.lang.Number = null ; }  <METHOD_END>
<METHOD_START> public void ( Property org.springframework.data.mapping.model.Property , PersistentEntity < ? , org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty > org.springframework.data.mapping.model.PersistentEntity<?,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> , SimpleTypeHolder org.springframework.data.mapping.model.SimpleTypeHolder ) { super( org.springframework.data.mapping.model.Property , org.springframework.data.mapping.model.PersistentEntity<,org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> , org.springframework.data.mapping.model.SimpleTypeHolder ); }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mapping.model.Association<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> < org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty > org.springframework.data.mapping.model.Association<org.springframework.data.mapping.model.AbstractPersistentPropertyUnitTests.SamplePersistentProperty> ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > java.util.Optional<A> < A > java.util.Optional<A> ( java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Optional . java.util.Optional<A> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < A extends java.lang.annotation.Annotation > java.util.Optional<A> < A > java.util.Optional<A> ( java.lang.Class<A> < A > java.lang.Class<A> ) { return java.util.Optional . java.util.Optional<A> ( ) ; }  <METHOD_END>
