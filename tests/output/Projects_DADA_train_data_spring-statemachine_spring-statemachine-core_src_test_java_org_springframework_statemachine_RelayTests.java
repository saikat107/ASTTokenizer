<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.AnnotationConfigApplicationContext org.springframework.statemachine.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.RelayTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> , notNullValue ( ) ) ; TestStateMachineListener org.springframework.statemachine.TestStateMachineListener = new TestStateMachineListener ( ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . addStateListener ( org.springframework.statemachine.TestStateMachineListener ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . start ( ) ; org.springframework.statemachine.TestStateMachineListener . reset ( NUMBER , NUMBER ) ; org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . sendEvent ( TestEvents . E1 ) ; assertThat ( listener . stateChangedLatch . await ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) , is ( true ) ) ; assertThat ( org.springframework.statemachine.ObjectStateMachine<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getState ( ) . getIds ( ) , contains ( TestStates . S2 , TestStates . S21 ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineStateConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) . and ( ) . withStates ( ) . parent ( TestStates . S2 ) . initial ( TestStates . S20 ) . state ( TestStates . S20 , org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ( ) , null ) . state ( TestStates . S21 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.StateMachineTransitionConfigurer<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) . and ( ) . withExternal ( ) . source ( TestStates . S20 ) . target ( TestStates . S21 ) . event ( TestEvents . E2 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.Action<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ( ) { return new Action < TestStates , TestEvents > ( ) { @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getStateMachine ( ) . sendEvent ( TestEvents . E2 ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateContext < TestStates , TestEvents > org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> ) { org.springframework.statemachine.StateContext<org.springframework.statemachine.TestStates,org.springframework.statemachine.TestEvents> . getStateMachine ( ) . sendEvent ( TestEvents . E2 ) ; }  <METHOD_END>
