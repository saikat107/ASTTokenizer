<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( PersistenceExceptionTranslator org.springframework.dao.support.PersistenceExceptionTranslator ) { Assert . notNull ( org.springframework.dao.support.PersistenceExceptionTranslator , STRING ) ; this . org.springframework.dao.support.PersistenceExceptionTranslator = org.springframework.dao.support.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public void ( ListableBeanFactory org.springframework.dao.support.ListableBeanFactory ) { Assert . notNull ( org.springframework.dao.support.ListableBeanFactory , STRING ) ; this . org.springframework.dao.support.ListableBeanFactory = org.springframework.dao.support.ListableBeanFactory ; }  <METHOD_END>
<METHOD_START> public void void ( PersistenceExceptionTranslator org.springframework.dao.support.PersistenceExceptionTranslator ) { this . org.springframework.dao.support.PersistenceExceptionTranslator = org.springframework.dao.support.PersistenceExceptionTranslator ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.dao.support.BeanFactory ) throws org.springframework.dao.support.BeansException { if ( this . org.springframework.dao.support.PersistenceExceptionTranslator == null ) { if ( ! ( org.springframework.dao.support.BeanFactory instanceof ListableBeanFactory ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } this . org.springframework.dao.support.ListableBeanFactory = ( ListableBeanFactory ) org.springframework.dao.support.BeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.dao.support.PersistenceExceptionTranslator == null && this . org.springframework.dao.support.ListableBeanFactory == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.dao.support.MethodInvocation ) throws java.lang.Throwable { try { return org.springframework.dao.support.MethodInvocation . proceed ( ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( ! this . boolean && ReflectionUtils . declaresException ( org.springframework.dao.support.MethodInvocation . getMethod ( ) , java.lang.RuntimeException . java.lang.Class<? extends java.lang.RuntimeException> ( ) ) ) { throw java.lang.RuntimeException ; } else { if ( this . org.springframework.dao.support.PersistenceExceptionTranslator == null ) { this . org.springframework.dao.support.PersistenceExceptionTranslator = org.springframework.dao.support.PersistenceExceptionTranslator ( this . org.springframework.dao.support.ListableBeanFactory ) ; } throw DataAccessUtils . translateIfNecessary ( java.lang.RuntimeException , this . org.springframework.dao.support.PersistenceExceptionTranslator ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.dao.support.PersistenceExceptionTranslator org.springframework.dao.support.PersistenceExceptionTranslator ( ListableBeanFactory org.springframework.dao.support.ListableBeanFactory ) { java.util.Map<java.lang.String,org.springframework.dao.support.PersistenceExceptionTranslator> < java.lang.String , PersistenceExceptionTranslator > java.util.Map<java.lang.String,org.springframework.dao.support.PersistenceExceptionTranslator> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.dao.support.ListableBeanFactory , PersistenceExceptionTranslator .class , false , false ) ; ChainedPersistenceExceptionTranslator org.springframework.dao.support.ChainedPersistenceExceptionTranslator = new ChainedPersistenceExceptionTranslator ( ) ; for ( PersistenceExceptionTranslator org.springframework.dao.support.PersistenceExceptionTranslator : java.util.Map<java.lang.String,org.springframework.dao.support.PersistenceExceptionTranslator> . values ( ) ) { org.springframework.dao.support.ChainedPersistenceExceptionTranslator . addDelegate ( org.springframework.dao.support.PersistenceExceptionTranslator ) ; } return org.springframework.dao.support.ChainedPersistenceExceptionTranslator ; }  <METHOD_END>
