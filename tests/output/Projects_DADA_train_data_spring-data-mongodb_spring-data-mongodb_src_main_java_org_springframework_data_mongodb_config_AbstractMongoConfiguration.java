<METHOD_START> public abstract org.springframework.data.mongodb.config.MongoClient org.springframework.data.mongodb.config.MongoClient ( )  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.MongoTemplate org.springframework.data.mongodb.config.MongoTemplate ( ) java.lang.Exception { return new MongoTemplate ( org.springframework.data.mongodb.config.MongoDbFactory ( ) , org.springframework.data.mongodb.config.MappingMongoConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.MongoDbFactory org.springframework.data.mongodb.config.MongoDbFactory ( ) { return new SimpleMongoDbFactory ( org.springframework.data.mongodb.config.MongoClient ( ) , getDatabaseName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Deprecated protected java.lang.String java.lang.String ( ) { java.lang.Package java.lang.Package = java.lang.Class<? extends org.springframework.data.mongodb.config.AbstractMongoConfiguration> ( ) . java.lang.Package ( ) ; return java.lang.Package == null ? null : java.lang.Package . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.mongodb.config.MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter ( ) java.lang.Exception { DbRefResolver org.springframework.data.mongodb.config.DbRefResolver = new DefaultDbRefResolver ( org.springframework.data.mongodb.config.MongoDbFactory ( ) ) ; MappingMongoConverter org.springframework.data.mongodb.config.MappingMongoConverter = new MappingMongoConverter ( org.springframework.data.mongodb.config.DbRefResolver , mongoMappingContext ( ) ) ; org.springframework.data.mongodb.config.MappingMongoConverter . setCustomConversions ( customConversions ( ) ) ; return org.springframework.data.mongodb.config.MappingMongoConverter ; }  <METHOD_END>
