<METHOD_START> public void void ( HessianProxyFactory org.springframework.remoting.caucho.HessianProxyFactory ) { this . org.springframework.remoting.caucho.HessianProxyFactory = ( org.springframework.remoting.caucho.HessianProxyFactory != null ? org.springframework.remoting.caucho.HessianProxyFactory : new HessianProxyFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( SerializerFactory org.springframework.remoting.caucho.SerializerFactory ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setSerializerFactory ( org.springframework.remoting.caucho.SerializerFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . getSerializerFactory ( ) . setSendCollectionType ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . getSerializerFactory ( ) . setAllowNonSerializable ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setOverloadEnabled ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setUser ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setPassword ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setDebug ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setChunkedPost ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( HessianConnectionFactory org.springframework.remoting.caucho.HessianConnectionFactory ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setConnectionFactory ( org.springframework.remoting.caucho.HessianConnectionFactory ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setConnectTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setReadTimeout ( long ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setHessian2Request ( boolean ) ; this . org.springframework.remoting.caucho.HessianProxyFactory . setHessian2Reply ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setHessian2Request ( boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . org.springframework.remoting.caucho.HessianProxyFactory . setHessian2Reply ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { super. afterPropertiesSet ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.remoting.caucho.RemoteLookupFailureException { try { this . java.lang.Object = java.lang.Object ( this . org.springframework.remoting.caucho.HessianProxyFactory ) ; } catch ( java.net.MalformedURLException java.net.MalformedURLException ) { throw new RemoteLookupFailureException ( STRING + getServiceUrl ( ) + STRING , java.net.MalformedURLException ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( HessianProxyFactory org.springframework.remoting.caucho.HessianProxyFactory ) throws java.net.MalformedURLException { Assert . notNull ( getServiceInterface ( ) , STRING ) ; return org.springframework.remoting.caucho.HessianProxyFactory . create ( getServiceInterface ( ) , getServiceUrl ( ) , getBeanClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.remoting.caucho.MethodInvocation ) throws java.lang.Throwable { if ( this . java.lang.Object == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } java.lang.ClassLoader java.lang.ClassLoader = overrideThreadContextClassLoader ( ) ; try { return org.springframework.remoting.caucho.MethodInvocation . getMethod ( ) . invoke ( this . java.lang.Object , org.springframework.remoting.caucho.MethodInvocation . getArguments ( ) ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { java.lang.Throwable java.lang.Throwable = java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; if ( java.lang.Throwable instanceof java.lang.reflect.InvocationTargetException ) { java.lang.Throwable = ( ( java.lang.reflect.InvocationTargetException ) java.lang.Throwable ) . java.lang.Throwable ( ) ; } if ( java.lang.Throwable instanceof HessianConnectionException ) { throw org.springframework.remoting.caucho.RemoteAccessException ( java.lang.Throwable ) ; } else if ( java.lang.Throwable instanceof HessianException || java.lang.Throwable instanceof HessianRuntimeException ) { java.lang.Throwable java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; throw org.springframework.remoting.caucho.RemoteAccessException ( java.lang.Throwable != null ? java.lang.Throwable : java.lang.Throwable ) ; } else if ( java.lang.Throwable instanceof java.lang.reflect.UndeclaredThrowableException ) { java.lang.reflect.UndeclaredThrowableException java.lang.reflect.UndeclaredThrowableException = ( java.lang.reflect.UndeclaredThrowableException ) java.lang.Throwable ; throw org.springframework.remoting.caucho.RemoteAccessException ( java.lang.reflect.UndeclaredThrowableException . java.lang.Throwable ( ) ) ; } else { throw java.lang.Throwable ; } } catch ( java.lang.Throwable java.lang.Throwable ) { throw new RemoteProxyFailureException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } finally { resetThreadContextClassLoader ( java.lang.ClassLoader ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.remoting.caucho.RemoteAccessException org.springframework.remoting.caucho.RemoteAccessException ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof HessianConnectionException || java.lang.Throwable instanceof java.net.ConnectException ) { return new RemoteConnectFailureException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } else { return new RemoteAccessException ( STRING + getServiceUrl ( ) + STRING , java.lang.Throwable ) ; } }  <METHOD_END>
