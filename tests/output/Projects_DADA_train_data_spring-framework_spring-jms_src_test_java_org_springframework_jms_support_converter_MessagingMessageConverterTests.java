<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException { this . org.springframework.jms.support.converter.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.jms.support.converter.MessagingMessageConverter . toMessage ( new java.lang.Object ( ) , mock ( Session .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Session org.springframework.jms.support.converter.Session = mock ( Session .class ) ; java.io.Serializable java.io.Serializable = mock ( java.io.Serializable .class ) ; ObjectMessage org.springframework.jms.support.converter.ObjectMessage = mock ( ObjectMessage .class ) ; given ( org.springframework.jms.support.converter.Session . createObjectMessage ( java.io.Serializable ) ) . willReturn ( org.springframework.jms.support.converter.ObjectMessage ) ; this . org.springframework.jms.support.converter.MessagingMessageConverter . toMessage ( MessageBuilder . withPayload ( java.io.Serializable ) . build ( ) , org.springframework.jms.support.converter.Session ) ; verify ( org.springframework.jms.support.converter.Session ) . createObjectMessage ( java.io.Serializable ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException { assertNull ( this . org.springframework.jms.support.converter.MessagingMessageConverter . fromMessage ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.support.converter.JMSException { TextMessage org.springframework.jms.support.converter.TextMessage = new StubTextMessage ( STRING ) ; this . org.springframework.jms.support.converter.MessagingMessageConverter . setPayloadConverter ( new org.springframework.jms.support.converter.MessagingMessageConverterTests.TestMessageConverter ( ) ) ; Message < ? > org.springframework.jms.support.converter.Message<?> = ( Message < ? > ) this . org.springframework.jms.support.converter.MessagingMessageConverter . fromMessage ( org.springframework.jms.support.converter.TextMessage ) ; assertEquals ( NUMBER , org.springframework.jms.support.converter.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { if ( this . boolean ) { throw new java . lang . java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; TextMessage org.springframework.jms.support.converter.TextMessage = ( TextMessage ) javax.jms.Message ; return java.lang.Long . long ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) ; }  <METHOD_END>
