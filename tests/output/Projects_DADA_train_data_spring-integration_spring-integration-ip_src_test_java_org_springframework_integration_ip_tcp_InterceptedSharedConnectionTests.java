<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.ip.tcp.Level = LogManager . getLogger ( STRING ) . getLevel ( ) ; LogManager . getLogger ( STRING ) . setLevel ( Level . DEBUG ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { LogManager . getLogger ( STRING ) . setLevel ( org.springframework.integration.ip.tcp.Level ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = NUMBER ; while ( ! org.springframework.integration.ip.tcp.TcpReceivingChannelAdapter . isListening ( ) ) { java.lang.Thread . void ( NUMBER ) ; if ( int ++ > NUMBER ) { fail ( STRING ) ; } } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { MessageChannel org.springframework.integration.ip.tcp.MessageChannel = org.springframework.integration.ip.tcp.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; org.springframework.integration.ip.tcp.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; QueueChannel org.springframework.integration.ip.tcp.QueueChannel = org.springframework.integration.ip.tcp.AbstractApplicationContext . getBean ( STRING , QueueChannel .class ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.ip.tcp.Message<> ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; } }  <METHOD_END>
