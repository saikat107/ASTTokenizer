<METHOD_START> @ Test public void void ( ) { void ( STRING ) ; java.util.Map<java.lang.String,org.springframework.web.socket.config.HandlerMapping> < java.lang.String , HandlerMapping > java.util.Map<java.lang.String,org.springframework.web.socket.config.HandlerMapping> = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBeansOfType ( HandlerMapping .class ) ; assertNotNull ( java.util.Map<java.lang.String,org.springframework.web.socket.config.HandlerMapping> ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.web.socket.config.HandlerMapping> . values ( ) , hasSize ( NUMBER ) ) ; for ( HandlerMapping org.springframework.web.socket.config.HandlerMapping : java.util.Map<java.lang.String,org.springframework.web.socket.config.HandlerMapping> . values ( ) ) { assertTrue ( org.springframework.web.socket.config.HandlerMapping instanceof SimpleUrlHandlerMapping ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.HandlerMapping ; if ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . keySet ( ) . contains ( STRING ) ) { assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . keySet ( ) , contains ( STRING , STRING ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHttpRequestHandler ) ; void ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.FooWebSocketHandler .class ) ; HandshakeHandler org.springframework.web.socket.config.HandshakeHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ; assertNotNull ( org.springframework.web.socket.config.HandshakeHandler ) ; assertTrue ( org.springframework.web.socket.config.HandshakeHandler instanceof DefaultHandshakeHandler ) ; assertFalse ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . isEmpty ( ) ) ; assertTrue ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) instanceof OriginHandshakeInterceptor ) ; } else { assertThat ( org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . keySet ( ) , contains ( STRING ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHttpRequestHandler ) ; void ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.TestWebSocketHandler .class ) ; HandshakeHandler org.springframework.web.socket.config.HandshakeHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ; assertNotNull ( org.springframework.web.socket.config.HandshakeHandler ) ; assertTrue ( org.springframework.web.socket.config.HandshakeHandler instanceof DefaultHandshakeHandler ) ; assertFalse ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . isEmpty ( ) ) ; assertTrue ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) . get ( NUMBER ) instanceof OriginHandshakeInterceptor ) ; } } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( STRING ) ; HandlerMapping org.springframework.web.socket.config.HandlerMapping = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( HandlerMapping .class ) ; assertNotNull ( org.springframework.web.socket.config.HandlerMapping ) ; assertTrue ( org.springframework.web.socket.config.HandlerMapping instanceof SimpleUrlHandlerMapping ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = ( SimpleUrlHandlerMapping ) org.springframework.web.socket.config.HandlerMapping ; assertEquals ( NUMBER , org.springframework.web.socket.config.SimpleUrlHandlerMapping . getOrder ( ) ) ; WebSocketHttpRequestHandler org.springframework.web.socket.config.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHttpRequestHandler ) ; void ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.FooWebSocketHandler .class ) ; HandshakeHandler org.springframework.web.socket.config.HandshakeHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ; assertNotNull ( org.springframework.web.socket.config.HandshakeHandler ) ; assertTrue ( org.springframework.web.socket.config.HandshakeHandler instanceof org.springframework.web.socket.config.TestHandshakeHandler ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( org.springframework.web.socket.config.FooTestInterceptor .class ) , instanceOf ( org.springframework.web.socket.config.BarTestInterceptor .class ) , instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; org.springframework.web.socket.config.WebSocketHttpRequestHandler = ( WebSocketHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.WebSocketHttpRequestHandler ) ; void ( org.springframework.web.socket.config.WebSocketHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.TestWebSocketHandler .class ) ; org.springframework.web.socket.config.HandshakeHandler = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeHandler ( ) ; assertNotNull ( org.springframework.web.socket.config.HandshakeHandler ) ; assertTrue ( org.springframework.web.socket.config.HandshakeHandler instanceof org.springframework.web.socket.config.TestHandshakeHandler ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.WebSocketHttpRequestHandler . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( org.springframework.web.socket.config.FooTestInterceptor .class ) , instanceOf ( org.springframework.web.socket.config.BarTestInterceptor .class ) , instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( STRING ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = this . org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpleUrlHandlerMapping ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.SockJsHttpRequestHandler ) ; void ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.TestWebSocketHandler .class ) ; SockJsService org.springframework.web.socket.config.SockJsService = org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.SockJsHttpRequestHandler ) ; void ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.FooWebSocketHandler .class ) ; SockJsService org.springframework.web.socket.config.SockJsService = org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ; assertNotNull ( org.springframework.web.socket.config.SockJsService ) ; assertSame ( org.springframework.web.socket.config.SockJsService , org.springframework.web.socket.config.SockJsService ) ; assertThat ( org.springframework.web.socket.config.SockJsService , instanceOf ( DefaultSockJsService .class ) ) ; DefaultSockJsService org.springframework.web.socket.config.DefaultSockJsService = ( DefaultSockJsService ) org.springframework.web.socket.config.SockJsService ; assertThat ( org.springframework.web.socket.config.DefaultSockJsService . getTaskScheduler ( ) , instanceOf ( ThreadPoolTaskScheduler .class ) ) ; assertFalse ( org.springframework.web.socket.config.DefaultSockJsService . shouldSuppressCors ( ) ) ; java.util.Map<org.springframework.web.socket.config.TransportType,org.springframework.web.socket.config.TransportHandler> < TransportType , TransportHandler > java.util.Map<org.springframework.web.socket.config.TransportType,org.springframework.web.socket.config.TransportHandler> = org.springframework.web.socket.config.DefaultSockJsService . getTransportHandlers ( ) ; assertThat ( java.util.Map<org.springframework.web.socket.config.TransportType,org.springframework.web.socket.config.TransportHandler> . values ( ) , containsInAnyOrder ( instanceOf ( XhrPollingTransportHandler .class ) , instanceOf ( XhrReceivingTransportHandler .class ) , instanceOf ( JsonpPollingTransportHandler .class ) , instanceOf ( JsonpReceivingTransportHandler .class ) , instanceOf ( XhrStreamingTransportHandler .class ) , instanceOf ( EventSourceTransportHandler .class ) , instanceOf ( HtmlFileTransportHandler .class ) , instanceOf ( WebSocketTransportHandler .class ) ) ) ; WebSocketTransportHandler org.springframework.web.socket.config.WebSocketTransportHandler = ( WebSocketTransportHandler ) java.util.Map<org.springframework.web.socket.config.TransportType,org.springframework.web.socket.config.TransportHandler> . get ( TransportType . WEBSOCKET ) ; assertEquals ( org.springframework.web.socket.config.TestHandshakeHandler .class , org.springframework.web.socket.config.WebSocketTransportHandler . getHandshakeHandler ( ) . getClass ( ) ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.DefaultSockJsService . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( org.springframework.web.socket.config.FooTestInterceptor .class ) , instanceOf ( org.springframework.web.socket.config.BarTestInterceptor .class ) , instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { void ( STRING ) ; SimpleUrlHandlerMapping org.springframework.web.socket.config.SimpleUrlHandlerMapping = org.springframework.web.socket.config.GenericWebApplicationContext . getBean ( SimpleUrlHandlerMapping .class ) ; assertNotNull ( org.springframework.web.socket.config.SimpleUrlHandlerMapping ) ; SockJsHttpRequestHandler org.springframework.web.socket.config.SockJsHttpRequestHandler = ( SockJsHttpRequestHandler ) org.springframework.web.socket.config.SimpleUrlHandlerMapping . getUrlMap ( ) . get ( STRING ) ; assertNotNull ( org.springframework.web.socket.config.SockJsHttpRequestHandler ) ; void ( org.springframework.web.socket.config.SockJsHttpRequestHandler . getWebSocketHandler ( ) , org.springframework.web.socket.config.TestWebSocketHandler .class ) ; SockJsService org.springframework.web.socket.config.SockJsService = org.springframework.web.socket.config.SockJsHttpRequestHandler . getSockJsService ( ) ; assertNotNull ( org.springframework.web.socket.config.SockJsService ) ; assertThat ( org.springframework.web.socket.config.SockJsService , instanceOf ( TransportHandlingSockJsService .class ) ) ; TransportHandlingSockJsService org.springframework.web.socket.config.TransportHandlingSockJsService = ( TransportHandlingSockJsService ) org.springframework.web.socket.config.SockJsService ; assertThat ( org.springframework.web.socket.config.TransportHandlingSockJsService . getTaskScheduler ( ) , instanceOf ( org.springframework.web.socket.config.TestTaskScheduler .class ) ) ; assertThat ( org.springframework.web.socket.config.TransportHandlingSockJsService . getTransportHandlers ( ) . values ( ) , containsInAnyOrder ( instanceOf ( XhrPollingTransportHandler .class ) , instanceOf ( XhrStreamingTransportHandler .class ) ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.TransportHandlingSockJsService . getName ( ) ) ; assertFalse ( org.springframework.web.socket.config.TransportHandlingSockJsService . isWebSocketEnabled ( ) ) ; assertFalse ( org.springframework.web.socket.config.TransportHandlingSockJsService . isSessionCookieNeeded ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.TransportHandlingSockJsService . getStreamBytesLimit ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.TransportHandlingSockJsService . getDisconnectDelay ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.TransportHandlingSockJsService . getHttpMessageCacheSize ( ) ) ; assertEquals ( NUMBER , org.springframework.web.socket.config.TransportHandlingSockJsService . getHeartbeatTime ( ) ) ; assertEquals ( STRING , org.springframework.web.socket.config.TransportHandlingSockJsService . getSockJsClientLibraryUrl ( ) ) ; assertEquals ( org.springframework.web.socket.config.TestMessageCodec .class , org.springframework.web.socket.config.TransportHandlingSockJsService . getMessageCodec ( ) . getClass ( ) ) ; java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> < HandshakeInterceptor > java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> = org.springframework.web.socket.config.TransportHandlingSockJsService . getHandshakeInterceptors ( ) ; assertThat ( java.util.List<org.springframework.web.socket.config.HandshakeInterceptor> , contains ( instanceOf ( OriginHandshakeInterceptor .class ) ) ) ; assertTrue ( org.springframework.web.socket.config.TransportHandlingSockJsService . shouldSuppressCors ( ) ) ; assertTrue ( org.springframework.web.socket.config.TransportHandlingSockJsService . getAllowedOrigins ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.web.socket.config.TransportHandlingSockJsService . getAllowedOrigins ( ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { XmlBeanDefinitionReader org.springframework.web.socket.config.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.web.socket.config.GenericWebApplicationContext ) ; ClassPathResource org.springframework.web.socket.config.ClassPathResource = new ClassPathResource ( java.lang.String , org.springframework.web.socket.config.HandlersBeanDefinitionParserTests .class ) ; org.springframework.web.socket.config.XmlBeanDefinitionReader . loadBeanDefinitions ( org.springframework.web.socket.config.ClassPathResource ) ; this . org.springframework.web.socket.config.GenericWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> private static void void ( WebSocketHandler org.springframework.web.socket.config.WebSocketHandler , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( org.springframework.web.socket.config.WebSocketHandler instanceof WebSocketHandlerDecorator ) { org.springframework.web.socket.config.WebSocketHandler = ( ( WebSocketHandlerDecorator ) org.springframework.web.socket.config.WebSocketHandler ) . getLastHandler ( ) ; } assertTrue ( java.lang.Class<> . boolean ( org.springframework.web.socket.config.WebSocketHandler ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.WebSocketSession ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.WebSocketSession , WebSocketMessage < ? > org.springframework.web.socket.config.WebSocketMessage<?> ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.WebSocketSession , java.lang.Throwable java.lang.Throwable ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSocketSession org.springframework.web.socket.config.WebSocketSession , CloseStatus org.springframework.web.socket.config.CloseStatus ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ServerHttpRequest org.springframework.web.socket.config.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.config.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.config.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ServerHttpRequest org.springframework.web.socket.config.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.config.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.config.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.config.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.config.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.config.WebSocketHandler , java.lang.Exception java.lang.Exception ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , Trigger org.springframework.web.socket.config.Trigger ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date , long long ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , long long ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , java.util.Date java.util.Date , long long ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.concurrent.ScheduledFuture java.util.concurrent.ScheduledFuture ( java.lang.Runnable java.lang.Runnable , long long ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String ... java.lang.String[] ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) throws java.io.IOException { return new java.lang.String [ NUMBER ] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.io.InputStream java.io.InputStream ) throws java.io.IOException { return new java.lang.String [ NUMBER ] ; }  <METHOD_END>
