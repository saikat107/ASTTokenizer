<METHOD_START> void ( TestDispatcherServlet org.springframework.test.web.servlet.TestDispatcherServlet , Filter [] org.springframework.test.web.servlet.Filter[] , ServletContext org.springframework.test.web.servlet.ServletContext ) { Assert . notNull ( org.springframework.test.web.servlet.TestDispatcherServlet , STRING ) ; Assert . notNull ( org.springframework.test.web.servlet.Filter[] , STRING ) ; Assert . noNullElements ( org.springframework.test.web.servlet.Filter[] , STRING ) ; Assert . notNull ( org.springframework.test.web.servlet.ServletContext , STRING ) ; this . org.springframework.test.web.servlet.TestDispatcherServlet = org.springframework.test.web.servlet.TestDispatcherServlet ; this . org.springframework.test.web.servlet.Filter[] = org.springframework.test.web.servlet.Filter[] ; this . org.springframework.test.web.servlet.ServletContext = org.springframework.test.web.servlet.ServletContext ; }  <METHOD_END>
<METHOD_START> void void ( RequestBuilder org.springframework.test.web.servlet.RequestBuilder ) { this . org.springframework.test.web.servlet.RequestBuilder = org.springframework.test.web.servlet.RequestBuilder ; }  <METHOD_END>
<METHOD_START> void void ( java.util.List<org.springframework.test.web.servlet.ResultMatcher> < ResultMatcher > java.util.List<org.springframework.test.web.servlet.ResultMatcher> ) { Assert . notNull ( java.util.List<org.springframework.test.web.servlet.ResultMatcher> , STRING ) ; this . java.util.List<org.springframework.test.web.servlet.ResultMatcher> = java.util.List<org.springframework.test.web.servlet.ResultMatcher> ; }  <METHOD_END>
<METHOD_START> void void ( java.util.List<org.springframework.test.web.servlet.ResultHandler> < ResultHandler > java.util.List<org.springframework.test.web.servlet.ResultHandler> ) { Assert . notNull ( java.util.List<org.springframework.test.web.servlet.ResultHandler> , STRING ) ; this . java.util.List<org.springframework.test.web.servlet.ResultHandler> = java.util.List<org.springframework.test.web.servlet.ResultHandler> ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.ResultActions org.springframework.test.web.servlet.ResultActions ( RequestBuilder org.springframework.test.web.servlet.RequestBuilder ) throws java.lang.Exception { if ( this . org.springframework.test.web.servlet.RequestBuilder != null ) { if ( org.springframework.test.web.servlet.RequestBuilder instanceof Mergeable ) { org.springframework.test.web.servlet.RequestBuilder = ( RequestBuilder ) ( ( Mergeable ) org.springframework.test.web.servlet.RequestBuilder ) . merge ( this . org.springframework.test.web.servlet.RequestBuilder ) ; } } MockHttpServletRequest org.springframework.test.web.servlet.MockHttpServletRequest = org.springframework.test.web.servlet.RequestBuilder . buildRequest ( this . org.springframework.test.web.servlet.ServletContext ) ; MockHttpServletResponse org.springframework.test.web.servlet.MockHttpServletResponse = new MockHttpServletResponse ( ) ; if ( org.springframework.test.web.servlet.RequestBuilder instanceof SmartRequestBuilder ) { org.springframework.test.web.servlet.MockHttpServletRequest = ( ( SmartRequestBuilder ) org.springframework.test.web.servlet.RequestBuilder ) . postProcessRequest ( org.springframework.test.web.servlet.MockHttpServletRequest ) ; } final MvcResult org.springframework.test.web.servlet.MvcResult = new DefaultMvcResult ( org.springframework.test.web.servlet.MockHttpServletRequest , org.springframework.test.web.servlet.MockHttpServletResponse ) ; org.springframework.test.web.servlet.MockHttpServletRequest . setAttribute ( java.lang.String , org.springframework.test.web.servlet.MvcResult ) ; RequestAttributes org.springframework.test.web.servlet.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; RequestContextHolder . setRequestAttributes ( new ServletRequestAttributes ( org.springframework.test.web.servlet.MockHttpServletRequest , org.springframework.test.web.servlet.MockHttpServletResponse ) ) ; MockFilterChain org.springframework.test.web.servlet.MockFilterChain = new MockFilterChain ( this . org.springframework.test.web.servlet.TestDispatcherServlet , this . org.springframework.test.web.servlet.Filter[] ) ; org.springframework.test.web.servlet.MockFilterChain . doFilter ( org.springframework.test.web.servlet.MockHttpServletRequest , org.springframework.test.web.servlet.MockHttpServletResponse ) ; if ( DispatcherType . ASYNC . equals ( org.springframework.test.web.servlet.MockHttpServletRequest . getDispatcherType ( ) ) && org.springframework.test.web.servlet.MockHttpServletRequest . getAsyncContext ( ) != null & ! org.springframework.test.web.servlet.MockHttpServletRequest . isAsyncStarted ( ) ) { org.springframework.test.web.servlet.MockHttpServletRequest . getAsyncContext ( ) . complete ( ) ; } void ( org.springframework.test.web.servlet.MvcResult ) ; RequestContextHolder . setRequestAttributes ( org.springframework.test.web.servlet.RequestAttributes ) ; return new ResultActions ( ) { @ java.lang.Override public org.springframework.test.web.servlet.ResultActions org.springframework.test.web.servlet.ResultActions ( ResultMatcher org.springframework.test.web.servlet.ResultMatcher ) throws java.lang.Exception { org.springframework.test.web.servlet.ResultMatcher . match ( org.springframework.test.web.servlet.MvcResult ) ; return this ; } @ java.lang.Override public org.springframework.test.web.servlet.ResultActions org.springframework.test.web.servlet.ResultActions ( ResultHandler org.springframework.test.web.servlet.ResultHandler ) throws java.lang.Exception { org.springframework.test.web.servlet.ResultHandler . handle ( org.springframework.test.web.servlet.MvcResult ) ; return this ; } @ java.lang.Override public org.springframework.test.web.servlet.MvcResult org.springframework.test.web.servlet.MvcResult ( ) { return org.springframework.test.web.servlet.MvcResult ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.ResultActions org.springframework.test.web.servlet.ResultActions ( ResultMatcher org.springframework.test.web.servlet.ResultMatcher ) throws java.lang.Exception { org.springframework.test.web.servlet.ResultMatcher . match ( org.springframework.test.web.servlet.MvcResult ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.ResultActions org.springframework.test.web.servlet.ResultActions ( ResultHandler org.springframework.test.web.servlet.ResultHandler ) throws java.lang.Exception { org.springframework.test.web.servlet.ResultHandler . handle ( org.springframework.test.web.servlet.MvcResult ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.MvcResult org.springframework.test.web.servlet.MvcResult ( ) { return org.springframework.test.web.servlet.MvcResult ; }  <METHOD_END>
<METHOD_START> private void void ( MvcResult org.springframework.test.web.servlet.MvcResult ) throws java.lang.Exception { for ( ResultMatcher org.springframework.test.web.servlet.ResultMatcher : this . java.util.List<org.springframework.test.web.servlet.ResultMatcher> ) { org.springframework.test.web.servlet.ResultMatcher . match ( org.springframework.test.web.servlet.MvcResult ) ; } for ( ResultHandler org.springframework.test.web.servlet.ResultHandler : this . java.util.List<org.springframework.test.web.servlet.ResultHandler> ) { org.springframework.test.web.servlet.ResultHandler . handle ( org.springframework.test.web.servlet.MvcResult ) ; } }  <METHOD_END>
