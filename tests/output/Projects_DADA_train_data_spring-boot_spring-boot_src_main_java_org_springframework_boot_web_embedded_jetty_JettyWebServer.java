<METHOD_START> public void ( Server org.springframework.boot.web.embedded.jetty.Server ) { this( org.springframework.boot.web.embedded.jetty.Server , true ); }  <METHOD_END>
<METHOD_START> public void ( Server org.springframework.boot.web.embedded.jetty.Server , boolean boolean ) { this . boolean = boolean ; Assert . notNull ( org.springframework.boot.web.embedded.jetty.Server , STRING ) ; this . org.springframework.boot.web.embedded.jetty.Server = org.springframework.boot.web.embedded.jetty.Server ; void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( this . java.lang.Object ) { try { this . org.springframework.boot.web.embedded.jetty.Connector[] = this . org.springframework.boot.web.embedded.jetty.Server . getConnectors ( ) ; this . org.springframework.boot.web.embedded.jetty.Server . setConnectors ( null ) ; this . org.springframework.boot.web.embedded.jetty.Server . start ( ) ; this . org.springframework.boot.web.embedded.jetty.Server . setStopAtShutdown ( false ) ; } catch ( java.lang.Exception java.lang.Exception ) { void ( ) ; throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { try { this . org.springframework.boot.web.embedded.jetty.Server . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.boot.web.embedded.jetty.WebServerException { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } this . org.springframework.boot.web.embedded.jetty.Server . setConnectors ( this . org.springframework.boot.web.embedded.jetty.Connector[] ) ; if ( ! this . boolean ) { return; } try { this . org.springframework.boot.web.embedded.jetty.Server . start ( ) ; for ( Handler org.springframework.boot.web.embedded.jetty.Handler : this . org.springframework.boot.web.embedded.jetty.Server . getHandlers ( ) ) { void ( org.springframework.boot.web.embedded.jetty.Handler ) ; } Connector [] org.springframework.boot.web.embedded.jetty.Connector[] = this . org.springframework.boot.web.embedded.jetty.Server . getConnectors ( ) ; for ( Connector org.springframework.boot.web.embedded.jetty.Connector : org.springframework.boot.web.embedded.jetty.Connector[] ) { try { org.springframework.boot.web.embedded.jetty.Connector . start ( ) ; } catch ( java.net.BindException java.net.BindException ) { if ( org.springframework.boot.web.embedded.jetty.Connector instanceof NetworkConnector ) { throw new PortInUseException ( ( ( NetworkConnector ) org.springframework.boot.web.embedded.jetty.Connector ) . getPort ( ) ) ; } throw java.net.BindException ; } } this . boolean = true ; org.springframework.boot.web.embedded.jetty.JettyWebServer . org.springframework.boot.web.embedded.jetty.Log . info ( STRING + java.lang.String ( ) ) ; } catch ( WebServerException org.springframework.boot.web.embedded.jetty.WebServerException ) { throw org.springframework.boot.web.embedded.jetty.WebServerException ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( Connector org.springframework.boot.web.embedded.jetty.Connector : this . org.springframework.boot.web.embedded.jetty.Server . getConnectors ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) == NUMBER ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Integer ( org.springframework.boot.web.embedded.jetty.Connector ) + java.lang.String ( org.springframework.boot.web.embedded.jetty.Connector ) ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Integer java.lang.Integer ( Connector org.springframework.boot.web.embedded.jetty.Connector ) { try { return ( java.lang.Integer ) ReflectionUtils . invokeMethod ( ReflectionUtils . findMethod ( org.springframework.boot.web.embedded.jetty.Connector . getClass ( ) , STRING ) , org.springframework.boot.web.embedded.jetty.Connector ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.web.embedded.jetty.JettyWebServer . org.springframework.boot.web.embedded.jetty.Log . info ( STRING + java.lang.Exception . java.lang.String ( ) + STRING ) ; return NUMBER ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Connector org.springframework.boot.web.embedded.jetty.Connector ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.boot.web.embedded.jetty.Connector . getProtocols ( ) ; return STRING + StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) + STRING ; }  <METHOD_END>
<METHOD_START> private void void ( Handler ... org.springframework.boot.web.embedded.jetty.Handler[] ) throws java.lang.Exception { for ( Handler org.springframework.boot.web.embedded.jetty.Handler : org.springframework.boot.web.embedded.jetty.Handler[] ) { if ( org.springframework.boot.web.embedded.jetty.Handler instanceof JettyEmbeddedWebAppContext ) { ( ( JettyEmbeddedWebAppContext ) org.springframework.boot.web.embedded.jetty.Handler ) . deferredInitialize ( ) ; } else if ( org.springframework.boot.web.embedded.jetty.Handler instanceof HandlerWrapper ) { void ( ( ( HandlerWrapper ) org.springframework.boot.web.embedded.jetty.Handler ) . getHandler ( ) ) ; } else if ( org.springframework.boot.web.embedded.jetty.Handler instanceof HandlerCollection ) { void ( ( ( HandlerCollection ) org.springframework.boot.web.embedded.jetty.Handler ) . getHandlers ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { this . boolean = false ; try { this . org.springframework.boot.web.embedded.jetty.Server . stop ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new WebServerException ( STRING , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { Connector [] org.springframework.boot.web.embedded.jetty.Connector[] = this . org.springframework.boot.web.embedded.jetty.Server . getConnectors ( ) ; for ( Connector org.springframework.boot.web.embedded.jetty.Connector : org.springframework.boot.web.embedded.jetty.Connector[] ) { return java.lang.Integer ( org.springframework.boot.web.embedded.jetty.Connector ) ; } return NUMBER ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.web.embedded.jetty.Server org.springframework.boot.web.embedded.jetty.Server ( ) { return this . org.springframework.boot.web.embedded.jetty.Server ; }  <METHOD_END>
