<METHOD_START> public void ( ) { super( new org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer ( ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer ( ) { return ( org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer ) super. defaultCodec ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { super. addDefaultTypedReaders ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) ; org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer ( ) . addReaderTo ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , FormHttpMessageReader ::new ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { super. addDefaultObjectWriters ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; org.springframework.http.codec.ServerCodecConfigurer.ServerDefaultCodecConfigurer ( ) . void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( Encoder < ? > org.springframework.http.codec.Encoder<?> ) { HttpMessageWriter < ? > org.springframework.http.codec.HttpMessageWriter<?> = new ServerSentEventHttpMessageWriter ( org.springframework.http.codec.Encoder<> ) ; getWriters ( ) . put ( ServerSentEventHttpMessageWriter .class , org.springframework.http.codec.HttpMessageWriter<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { addReaderTo ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ( ) new DecoderHttpMessageReader <> ( StringDecoder . textPlainOnly ( true ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> < HttpMessageReader < ? > > java.util.List<org.springframework.http.codec.HttpMessageReader<?>> ) { addReaderTo ( java.util.List<org.springframework.http.codec.HttpMessageReader<?>> , ( ) new DecoderHttpMessageReader <> ( StringDecoder . allMimeTypes ( true ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> < HttpMessageWriter < ? > > java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> ) { addWriterTo ( java.util.List<org.springframework.http.codec.HttpMessageWriter<?>> , ( ) findWriter ( ServerSentEventHttpMessageWriter .class , ( ) { Encoder < ? > encoder = null ; if ( jackson2Present ) { encoder = findEncoderWriter ( Jackson2JsonEncoder .class , Jackson2JsonEncoder ::new ) . getEncoder ( ) ; } return new ServerSentEventHttpMessageWriter ( encoder ) ; } ) ) ; }  <METHOD_END>
