<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.config.configuration.BeanDefinition org.springframework.statemachine.config.configuration.BeanDefinition ( AnnotationMetadata org.springframework.statemachine.config.configuration.AnnotationMetadata , java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.statemachine.config.configuration.AnnotationMetadata . getClassName ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , ClassUtils . getDefaultClassLoader ( ) ) ; BeanDefinitionBuilder org.springframework.statemachine.config.configuration.BeanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( org.springframework.statemachine.config.configuration.StateMachineFactoryConfiguration.StateMachineFactoryDelegatingFactoryBean .class ) ; AnnotationAttributes org.springframework.statemachine.config.configuration.AnnotationAttributes = AnnotationAttributes . fromMap ( org.springframework.statemachine.config.configuration.AnnotationMetadata . getAnnotationAttributes ( EnableStateMachineFactory .class . java.lang.String ( ) , false ) ) ; java.lang.Boolean java.lang.Boolean = org.springframework.statemachine.config.configuration.AnnotationAttributes . getBoolean ( STRING ) ; org.springframework.statemachine.config.configuration.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> ) ; org.springframework.statemachine.config.configuration.BeanDefinitionBuilder . addConstructorArgValue ( org.springframework.statemachine.config.configuration.AnnotationMetadata . getClassName ( ) ) ; org.springframework.statemachine.config.configuration.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.Boolean ) ; AbstractBeanDefinition org.springframework.statemachine.config.configuration.AbstractBeanDefinition = org.springframework.statemachine.config.configuration.BeanDefinitionBuilder . getBeanDefinition ( ) ; ResolvableType org.springframework.statemachine.config.configuration.ResolvableType = org.springframework.statemachine.config.configuration.ResolvableType ( java.lang.Class<> ) ; if ( org.springframework.statemachine.config.configuration.ResolvableType != null && org.springframework.statemachine.config.configuration.AbstractBeanDefinition instanceof RootBeanDefinition ) { ( ( RootBeanDefinition ) org.springframework.statemachine.config.configuration.AbstractBeanDefinition ) . setTargetType ( org.springframework.statemachine.config.configuration.ResolvableType ) ; } return org.springframework.statemachine.config.configuration.AbstractBeanDefinition ; }  <METHOD_END>
<METHOD_START> private org.springframework.statemachine.config.configuration.ResolvableType org.springframework.statemachine.config.configuration.ResolvableType ( java.lang.Class<?> < ? > java.lang.Class<?> ) { ResolvableType org.springframework.statemachine.config.configuration.ResolvableType = null ; try { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ResolvableType . forClass ( java.lang.Class<> ) . getSuperType ( ) . resolveGenerics ( ) ; if ( java.lang.Class<?>[] != null && java.lang.Class<?>[] . int == NUMBER ) { org.springframework.statemachine.config.configuration.ResolvableType = ResolvableType . forClassWithGenerics ( StateMachineFactory .class , java.lang.Class<?>[] ) ; } } catch ( java.lang.Exception java.lang.Exception ) {		} return org.springframework.statemachine.config.configuration.ResolvableType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> = new java.util.ArrayList<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > ( ) ; java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> . boolean ( EnableStateMachineFactory .class ) ; return java.util.List<java.lang.Class<? extends java.lang.annotation.Annotation>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( StateMachineConfigBuilder < S , E > org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> , java.lang.String java.lang.String , java.lang.Boolean java.lang.Boolean ) { this . org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> = org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> ; this . java.lang.String = java.lang.String ; this . java.lang.Boolean = java.lang.Boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.statemachine.config.configuration.StateMachineFactory<S,E> < S , E > org.springframework.statemachine.config.configuration.StateMachineFactory<S,E> ( ) java.lang.Exception { return org.springframework.statemachine.config.configuration.StateMachineFactory<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return StateMachineFactory .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> == null || java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> . size ( ) == NUMBER ) { throw new BeanDefinitionStoreException ( STRING + STRING ) ; } for ( AnnotationConfigurer < StateMachineConfig < S , E > , StateMachineConfigBuilder < S , E > > org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>> : java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>> . getClass ( ) ; if ( ClassUtils . getUserClass ( java.lang.Class<> ) . getName ( ) . equals ( java.lang.String ) ) { org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> . apply ( org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>> ) ; } } StateMachineConfig < S , E > org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> = org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E> . getOrBuild ( ) ; TransitionsData < S , E > org.springframework.statemachine.config.configuration.TransitionsData<S,E> = org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getTransitions ( ) ; StatesData < S , E > org.springframework.statemachine.config.configuration.StatesData<S,E> = org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getStates ( ) ; ConfigurationData < S , E > org.springframework.statemachine.config.configuration.ConfigurationData<S,E> = org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getStateMachineConfigurationConfig ( ) ; ObjectStateMachineFactory < S , E > org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> = null ; if ( org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getModel ( ) != null && org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getModel ( ) . getFactory ( ) != null ) { org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> = new ObjectStateMachineFactory < S , E > ( new DefaultStateMachineModel < S , E > ( org.springframework.statemachine.config.configuration.ConfigurationData<S,E> , null , null ) , org.springframework.statemachine.config.configuration.StateMachineConfig<S,E> . getModel ( ) . getFactory ( ) ) ; } else { org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> = new ObjectStateMachineFactory < S , E > ( new DefaultStateMachineModel < S , E > ( org.springframework.statemachine.config.configuration.ConfigurationData<S,E> , org.springframework.statemachine.config.configuration.StatesData<S,E> , org.springframework.statemachine.config.configuration.TransitionsData<S,E> ) , null ) ; } org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> . setBeanFactory ( org.springframework.statemachine.config.configuration.BeanFactory ) ; org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> . setContextEventsEnabled ( java.lang.Boolean ) ; org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> . setHandleAutostartup ( true ) ; this . org.springframework.statemachine.config.configuration.StateMachineFactory<S,E> = org.springframework.statemachine.config.configuration.ObjectStateMachineFactory<S,E> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.statemachine.config.configuration.BeanFactory ) throws org.springframework.statemachine.config.configuration.BeansException { this . org.springframework.statemachine.config.configuration.BeanFactory = org.springframework.statemachine.config.configuration.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ Autowired ( required = false ) protected void void ( java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> < AnnotationConfigurer < StateMachineConfig < S , E > , StateMachineConfigBuilder < S , E > > > java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> )				throws java.lang.Exception { this . java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> = java.util.List<org.springframework.statemachine.config.configuration.AnnotationConfigurer<org.springframework.statemachine.config.configuration.StateMachineConfig<S,E>,org.springframework.statemachine.config.configuration.StateMachineConfigBuilder<S,E>>> ; }  <METHOD_END>
