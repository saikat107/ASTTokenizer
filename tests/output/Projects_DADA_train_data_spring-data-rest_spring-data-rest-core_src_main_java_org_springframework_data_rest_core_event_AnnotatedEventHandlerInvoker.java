<METHOD_START> @ java.lang.Override public void void ( RepositoryEvent org.springframework.data.rest.core.event.RepositoryEvent ) { java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> < ? extends RepositoryEvent > java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> = org.springframework.data.rest.core.event.RepositoryEvent . getClass ( ) ; if ( ! org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . containsKey ( java.lang.Class<> ) ) { return; } for ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod : org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . get ( java.lang.Class<> ) ) { java.lang.Object java.lang.Object = org.springframework.data.rest.core.event.RepositoryEvent . getSource ( ) ; if ( ! ClassUtils . isAssignable ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod . java.lang.Class<> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { continue; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( ) ; java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; if ( org.springframework.data.rest.core.event.RepositoryEvent instanceof LinkedEntityEvent ) { java.util.List<java.lang.Object> . boolean ( ( ( LinkedEntityEvent ) org.springframework.data.rest.core.event.RepositoryEvent ) . getLinked ( ) ) ; } if ( org.springframework.data.rest.core.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.rest.core.event.Logger . debug ( STRING , org.springframework.data.rest.core.event.RepositoryEvent . getClass ( ) . getSimpleName ( ) , org.springframework.data.rest.core.event.RepositoryEvent . getSource ( ) ) ; } ReflectionUtils . invokeMethod ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod . java.lang.reflect.Method , org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod . java.lang.Object , java.util.List<java.lang.Object> . java.lang.Object[] ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.rest.core.event.BeansException { return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.data.rest.core.event.BeansException { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . getUserClass ( java.lang.Object ) ; RepositoryEventHandler org.springframework.data.rest.core.event.RepositoryEventHandler = AnnotationUtils . findAnnotation ( java.lang.Class<> , RepositoryEventHandler .class ) ; if ( org.springframework.data.rest.core.event.RepositoryEventHandler == null ) { return java.lang.Object ; } ReflectionUtils . doWithMethods ( java.lang.Class<> , new ReflectionUtils . ReflectionUtils ( ) { @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeCreate .class , BeforeCreateEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterCreate .class , AfterCreateEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeSave .class , BeforeSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterSave .class , AfterSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeLinkSave .class , BeforeLinkSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterLinkSave .class , AfterLinkSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeDelete .class , BeforeDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterDelete .class , AfterDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeLinkDelete .class , BeforeLinkDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterLinkDelete .class , AfterLinkDeleteEvent .class ) ; } } , Methods . USER_METHODS ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeCreate .class , BeforeCreateEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterCreate .class , AfterCreateEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeSave .class , BeforeSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterSave .class , AfterSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeLinkSave .class , BeforeLinkSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterLinkSave .class , AfterLinkSaveEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeDelete .class , BeforeDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterDelete .class , AfterDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleBeforeLinkDelete .class , BeforeLinkDeleteEvent .class ) ; void ( java.lang.Object , java.lang.reflect.Method , HandleAfterLinkDelete .class , AfterLinkDeleteEvent .class ) ; }  <METHOD_END>
<METHOD_START> private < T extends java.lang.annotation.Annotation > void void ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> < ? extends RepositoryEvent > java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent> ) { T T = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , java.lang.Class<T> ) ; if ( T == null ) { return; } if ( java.lang.reflect.Method . int ( ) == NUMBER ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( java.lang.String , java.lang.reflect.Method ) ) ; } ResolvableType org.springframework.data.rest.core.event.ResolvableType = ResolvableType . forMethodParameter ( java.lang.reflect.Method , NUMBER , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod = org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod . org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ( org.springframework.data.rest.core.event.ResolvableType . resolve ( ) , java.lang.Object , java.lang.reflect.Method ) ; if ( org.springframework.data.rest.core.event.Logger . isDebugEnabled ( ) ) { org.springframework.data.rest.core.event.Logger . debug ( STRING , org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ) ; } java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> < org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod > java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> = org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . get ( java.lang.Class<> ) ; if ( java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> == null ) { java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> = new java.util.ArrayList<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> < org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod > ( ) ; } if ( java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . boolean ( ) ) { org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . add ( java.lang.Class<> , org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ) ; return; } java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . boolean ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ) ; java.util.Collections . void ( java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> ) ; org.springframework.data.rest.core.event.MultiValueMap<java.lang.Class<? extends org.springframework.data.rest.core.event.RepositoryEvent>,org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> . put ( java.lang.Class<> , java.util.List<org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod> ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method ) { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return new org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ( java.lang.Class<> , java.lang.reflect.Method , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod ) { return AnnotationAwareOrderComparator . INSTANCE . compare ( this . java.lang.reflect.Method , org.springframework.data.rest.core.event.AnnotatedEventHandlerInvoker.EventHandlerMethod . java.lang.reflect.Method ) ; }  <METHOD_END>
