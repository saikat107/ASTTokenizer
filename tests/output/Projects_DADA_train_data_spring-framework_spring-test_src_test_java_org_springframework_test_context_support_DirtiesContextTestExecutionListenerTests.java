<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests> ( ) ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests> ( ) ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests> ( ) ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyBeforeEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyAfterEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyBeforeClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyAfterClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredViaMetaAnnotationAfterClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextViaMetaAnnotationWithOverrides .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; given ( org.springframework.test.context.support.TestContext . getTestMethod ( ) ) . willReturn ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestMethod ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( CURRENT_LEVEL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<? extends org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests> ( ) ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyBeforeEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyAfterEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredViaMetaAnnotationAfterEachTestMethod .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyBeforeClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredLocallyAfterClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextDeclaredViaMetaAnnotationAfterClass .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextViaMetaAnnotationWithOverrides .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.DirtiesContextViaMetaAnnotationWithOverridenAttributes .class ; BDDMockito .< java.lang.Class<?> < ? > > given ( org.springframework.test.context.support.TestContext . getTestClass ( ) ) . willReturn ( java.lang.Class<> ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . beforeTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( any ( HierarchyMode .class ) ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; org.springframework.test.context.support.TestExecutionListener . afterTestClass ( org.springframework.test.context.support.TestContext ) ; verify ( org.springframework.test.context.support.TestContext , times ( NUMBER ) ) . markApplicationContextDirty ( EXHAUSTIVE ) ; }  <METHOD_END>
<METHOD_START> @ DirtiesContext ( methodMode = BEFORE_METHOD ) void void ( ) { }  <METHOD_END>
<METHOD_START> @ DirtiesContext void void ( ) { }  <METHOD_END>
<METHOD_START> @ org.springframework.test.context.support.DirtiesContextTestExecutionListenerTests.MetaDirtyAfterMethod void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
<METHOD_START> void void ( ) { }  <METHOD_END>
