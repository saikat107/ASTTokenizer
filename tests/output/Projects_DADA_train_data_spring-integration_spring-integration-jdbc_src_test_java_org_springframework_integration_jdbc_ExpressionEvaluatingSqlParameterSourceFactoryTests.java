<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setStaticParameters ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( null ) ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; @ java.lang.SuppressWarnings ( STRING ) SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Arrays . java.util.List<java.util.Map<java.lang.String,java.lang.String>> ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) ; java.lang.String java.lang.String = STRING ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( java.lang.String ) . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setParameterExpressions ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setParameterExpressions ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setStaticParameters ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setParameterExpressions ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . afterPropertiesSet ( ) ; @ java.lang.SuppressWarnings ( STRING ) SqlParameterSource org.springframework.integration.jdbc.SqlParameterSource = org.springframework.integration.jdbc.ExpressionEvaluatingSqlParameterSourceFactory . createParameterSource ( java.util.Arrays . java.util.List<java.util.Map<java.lang.String,java.lang.String>> ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ) ; java.lang.String java.lang.String = STRING ; assertTrue ( org.springframework.integration.jdbc.SqlParameterSource . hasValue ( java.lang.String ) ) ; assertEquals ( STRING , org.springframework.integration.jdbc.SqlParameterSource . getValue ( java.lang.String ) . toString ( ) ) ; }  <METHOD_END>
