<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; RabbitMessagingTemplate org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitMessagingTemplate .class ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) ; RabbitAdmin org.springframework.boot.autoconfigure.amqp.RabbitAdmin = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitAdmin .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate . getConnectionFactory ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) ; assertThat ( boolean ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ) . isFalse ( ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate . getRabbitTemplate ( ) ) . isEqualTo ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitAdmin ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( false ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( false ) ; assertThat ( this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . as ( STRING ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING , STRING , STRING , STRING , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getPort ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getVirtualHost ( ) ) . isEqualTo ( STRING ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) ; com . com.rabbitmq . com.rabbitmq . com.rabbitmq com.rabbitmq.client.ConnectionFactory = ( com . com.rabbitmq . com.rabbitmq . com.rabbitmq ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( com.rabbitmq.client.ConnectionFactory . getConnectionTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( ( Address [] ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getVirtualHost ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getVirtualHost ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getVirtualHost ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getVirtualHost ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( true ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( true ) ; assertThat ( boolean ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.MessageConvertersConfiguration .class ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate . getMessageConverter ( ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; RetryTemplate org.springframework.boot.autoconfigure.amqp.RetryTemplate = ( RetryTemplate ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RetryTemplate ) . isNotNull ( ) ; org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.RetryTemplate ) ; SimpleRetryPolicy org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy = ( SimpleRetryPolicy ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; ExponentialBackOffPolicy org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy = ( ExponentialBackOffPolicy ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy . getMaxAttempts ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getInitialInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getMultiplier ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getMaxInterval ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; assertThat ( boolean ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; assertThat ( boolean ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration2 .class ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) . isEqualTo ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate . getConnectionFactory ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory . getPort ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING , STRING , STRING ) ; CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( CacheMode . CONNECTION ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration3 .class ) ; RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate . getMessageConverter ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration4 .class ) ; RabbitMessagingTemplate org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitMessagingTemplate .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate . getDefaultDestination ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; this . org.springframework.boot.autoconfigure.amqp.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; this . org.springframework.boot.autoconfigure.amqp.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.amqp.ExpectedException . expectMessage ( AmqpAdmin .class . java.lang.String ( ) ) ; this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( AmqpAdmin .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.EnableRabbitConfiguration .class ) ; RabbitListenerContainerFactory < ? > org.springframework.boot.autoconfigure.amqp.RabbitListenerContainerFactory<?> = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING , RabbitListenerContainerFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RabbitListenerContainerFactory<> . getClass ( ) ) . isEqualTo ( SimpleRabbitListenerContainerFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration5 .class ) ; SimpleRabbitListenerContainerFactory org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING , SimpleRabbitListenerContainerFactory .class ) ; org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory . setTxSize ( NUMBER ) ; verify ( org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory ) . setTxSize ( NUMBER ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory ) ; Advice [] org.springframework.boot.autoconfigure.amqp.Advice[] = ( Advice [] ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.Advice[] ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( new java.lang.Class<?> < ? > [] { org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.MessageConvertersConfiguration .class , org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.MessageRecoverersConfiguration .class } , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING , STRING ) ; SimpleRabbitListenerContainerFactory org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING , SimpleRabbitListenerContainerFactory .class ) ; DirectFieldAccessor org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.SimpleRabbitListenerContainerFactory ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( AcknowledgeMode . MANUAL ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; Advice [] org.springframework.boot.autoconfigure.amqp.Advice[] = ( Advice [] ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.Advice[] ) . isNotNull ( ) ; assertThat ( adviceChain . length ) . isEqualTo ( NUMBER ) ; org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.Advice[] [ NUMBER ] ) ; MessageRecoverer org.springframework.boot.autoconfigure.amqp.MessageRecoverer = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( STRING , MessageRecoverer .class ) ; MethodInvocationRecoverer < ? > org.springframework.boot.autoconfigure.amqp.MethodInvocationRecoverer<?> = ( MethodInvocationRecoverer < ? > ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; Message org.springframework.boot.autoconfigure.amqp.Message = mock ( Message .class ) ; java.lang.Exception java.lang.Exception = new java.lang.Exception ( STRING ) ; org.springframework.boot.autoconfigure.amqp.MethodInvocationRecoverer<> . recover ( new java.lang.Object [] { STRING , org.springframework.boot.autoconfigure.amqp.Message } , java.lang.Exception ) ; verify ( org.springframework.boot.autoconfigure.amqp.MessageRecoverer ) . recover ( org.springframework.boot.autoconfigure.amqp.Message , java.lang.Exception ) ; RetryTemplate org.springframework.boot.autoconfigure.amqp.RetryTemplate = ( RetryTemplate ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.RetryTemplate ) . isNotNull ( ) ; org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.RetryTemplate ) ; SimpleRetryPolicy org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy = ( SimpleRetryPolicy ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; ExponentialBackOffPolicy org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy = ( ExponentialBackOffPolicy ) org.springframework.boot.autoconfigure.amqp.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.SimpleRetryPolicy . getMaxAttempts ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getInitialInterval ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getMultiplier ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.amqp.ExponentialBackOffPolicy . getMaxInterval ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.NoEnableRabbitConfiguration .class ) ; AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext ; org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitListenerConfigUtils . RABBIT_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME ) ; org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( RabbitListenerConfigUtils . RABBIT_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; com . com.rabbitmq . com.rabbitmq . com.rabbitmq com.rabbitmq.client.ConnectionFactory = com.rabbitmq.client.ConnectionFactory ( ) ; assertThat ( com.rabbitmq.client.ConnectionFactory . getRequestedHeartbeat ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class ) ; com . com.rabbitmq . com.rabbitmq . com.rabbitmq com.rabbitmq.client.ConnectionFactory = com.rabbitmq.client.ConnectionFactory ( ) ; assertThat ( com.rabbitmq.client.ConnectionFactory . getSocketFactory ( ) ) . as ( STRING ) . isEqualTo ( javax.net.SocketFactory . javax.net.SocketFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING ) ; com . com.rabbitmq . com.rabbitmq . com.rabbitmq com.rabbitmq.client.ConnectionFactory = com.rabbitmq.client.ConnectionFactory ( ) ; assertThat ( com.rabbitmq.client.ConnectionFactory . getSocketFactory ( ) ) . as ( STRING ) . isInstanceOf ( javax.net.ssl.SSLSocketFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.amqp.ExpectedException . expectMessage ( STRING ) ; this . org.springframework.boot.autoconfigure.amqp.ExpectedException . expectMessage ( STRING ) ; void ( org.springframework.boot.autoconfigure.amqp.RabbitAutoConfigurationTests.TestConfiguration .class , STRING , STRING , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private com . com.rabbitmq . com.rabbitmq . com.rabbitmq.client.ConnectionFactory com.rabbitmq.client.ConnectionFactory ( ) { CachingConnectionFactory org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory = this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . getBean ( CachingConnectionFactory .class ) ; return ( com . com.rabbitmq . com.rabbitmq . com.rabbitmq ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.CachingConnectionFactory ) . getPropertyValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private boolean boolean ( RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) { ValueExpression < java.lang.Boolean > org.springframework.boot.autoconfigure.amqp.ValueExpression<java.lang.Boolean> = ( ValueExpression < java.lang.Boolean > ) new DirectFieldAccessor ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) . getPropertyValue ( STRING ) ; return org.springframework.boot.autoconfigure.amqp.ValueExpression<java.lang.Boolean> . getValue ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { void ( new java.lang.Class<?> < ? > [] { java.lang.Class<> } , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > [] java.lang.Class<?>[] , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . register ( RabbitAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.amqp.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.amqp.ConnectionFactory org.springframework.boot.autoconfigure.amqp.ConnectionFactory ( ) { return new CachingConnectionFactory ( STRING , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.amqp.RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate ( ConnectionFactory org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) { RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate = new RabbitTemplate ( org.springframework.boot.autoconfigure.amqp.ConnectionFactory ) ; org.springframework.boot.autoconfigure.amqp.RabbitTemplate . setMessageConverter ( org.springframework.boot.autoconfigure.amqp.MessageConverter ( ) ) ; return org.springframework.boot.autoconfigure.amqp.RabbitTemplate ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.amqp.MessageConverter org.springframework.boot.autoconfigure.amqp.MessageConverter ( ) { return mock ( MessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate ( RabbitTemplate org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) { RabbitMessagingTemplate org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate = new RabbitMessagingTemplate ( org.springframework.boot.autoconfigure.amqp.RabbitTemplate ) ; org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate . setDefaultDestination ( STRING ) ; return org.springframework.boot.autoconfigure.amqp.RabbitMessagingTemplate ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.autoconfigure.amqp.RabbitListenerContainerFactory<?> < ? > org.springframework.boot.autoconfigure.amqp.RabbitListenerContainerFactory<?> ( ) { return mock ( SimpleRabbitListenerContainerFactory .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public org.springframework.boot.autoconfigure.amqp.MessageConverter org.springframework.boot.autoconfigure.amqp.MessageConverter ( ) { return mock ( MessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.amqp.MessageConverter org.springframework.boot.autoconfigure.amqp.MessageConverter ( ) { return mock ( MessageConverter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Primary public org.springframework.boot.autoconfigure.amqp.MessageRecoverer org.springframework.boot.autoconfigure.amqp.MessageRecoverer ( ) { return mock ( MessageRecoverer .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.amqp.MessageRecoverer org.springframework.boot.autoconfigure.amqp.MessageRecoverer ( ) { return mock ( MessageRecoverer .class ) ; }  <METHOD_END>
