<METHOD_START> @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . setVersion ( NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getValue ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getName ( ) ) ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.PartialUpdate . getVersion ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertEquals ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getValue ( ) , org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( org.springframework.data.solr.core.convert.PartialUpdate . getIdField ( ) . getName ( ) ) ) ; Assert . assertNull ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . setValueOfField ( STRING , STRING ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( STRING , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . addValueToField ( STRING , STRING ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( STRING , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . increaseValueOfField ( STRING , NUMBER ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertTrue ( org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) instanceof java.util.Map ) ; Assert . assertEquals ( NUMBER , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Assert . assertNull ( org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( new PartialUpdate ( ( java.lang.String ) null , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( new PartialUpdate ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertThat ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) , IsMapContaining . hasEntry ( STRING , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , null ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertThat ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) , IsMapContaining . hasEntry ( STRING , null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ; PartialUpdate org.springframework.data.solr.core.convert.PartialUpdate = new PartialUpdate ( STRING , STRING ) ; org.springframework.data.solr.core.convert.PartialUpdate . add ( STRING , java.util.List<java.lang.String> ) ; SolrInputDocument org.springframework.data.solr.core.convert.SolrInputDocument = org.springframework.data.solr.core.convert.UpdateToSolrInputDocumentConverter . convert ( org.springframework.data.solr.core.convert.PartialUpdate ) ; Assert . assertThat ( ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) org.springframework.data.solr.core.convert.SolrInputDocument . getFieldValue ( STRING ) , IsMapContaining . hasEntry ( STRING , java.util.List<java.lang.String> ) ) ; }  <METHOD_END>
