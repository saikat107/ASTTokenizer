<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.cli.compiler.grape.SettingsBuildingException { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.cli.compiler.grape.SettingsBuildingException { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.cli.compiler.grape.SettingsBuildingException { final DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession = MavenRepositorySystemUtils . newSession ( ) ; given ( this . org.springframework.boot.cli.compiler.grape.RepositorySystem . newLocalRepositoryManager ( eq ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession ) , any ( LocalRepository .class ) ) ) . willAnswer ( new Answer < LocalRepositoryManager > ( ) { @ java.lang.Override public org.springframework.boot.cli.compiler.grape.LocalRepositoryManager org.springframework.boot.cli.compiler.grape.LocalRepositoryManager ( InvocationOnMock org.springframework.boot.cli.compiler.grape.InvocationOnMock ) throws java.lang.Throwable { LocalRepository org.springframework.boot.cli.compiler.grape.LocalRepository = org.springframework.boot.cli.compiler.grape.InvocationOnMock . getArgument ( NUMBER ) ; return new SimpleLocalRepositoryManagerFactory ( ) . newInstance ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.LocalRepository ) ; } } ) ; SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { new SettingsXmlRepositorySystemSessionAutoConfiguration ( ) . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfigurationTests .this . org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; } } , STRING , STRING ) ; assertThat ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getLocalRepository ( ) . getBasedir ( ) . getAbsolutePath ( ) ) . endsWith ( java.io.File . char + STRING + java.io.File . char + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.grape.LocalRepositoryManager org.springframework.boot.cli.compiler.grape.LocalRepositoryManager ( InvocationOnMock org.springframework.boot.cli.compiler.grape.InvocationOnMock ) throws java.lang.Throwable { LocalRepository org.springframework.boot.cli.compiler.grape.LocalRepository = org.springframework.boot.cli.compiler.grape.InvocationOnMock . getArgument ( NUMBER ) ; return new SimpleLocalRepositoryManagerFactory ( ) . newInstance ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.LocalRepository ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { new SettingsXmlRepositorySystemSessionAutoConfiguration ( ) . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfigurationTests .this . org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { final DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession = MavenRepositorySystemUtils . newSession ( ) ; SystemProperties . doWithSystemProperties ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { new SettingsXmlRepositorySystemSessionAutoConfiguration ( ) . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfigurationTests .this . org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; } } , STRING + java.lang.String ) ; RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository = new RemoteRepository . RemoteRepository ( STRING , STRING , STRING ) . build ( ) ; void ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; void ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; void ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { new SettingsXmlRepositorySystemSessionAutoConfiguration ( ) . apply ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.SettingsXmlRepositorySystemSessionAutoConfigurationTests .this . org.springframework.boot.cli.compiler.grape.RepositorySystem ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { Proxy org.springframework.boot.cli.compiler.grape.Proxy = org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getProxySelector ( ) . getProxy ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = new RemoteRepository . RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) . setProxy ( org.springframework.boot.cli.compiler.grape.Proxy ) . build ( ) ; AuthenticationContext org.springframework.boot.cli.compiler.grape.AuthenticationContext = AuthenticationContext . forProxy ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; assertThat ( org.springframework.boot.cli.compiler.grape.Proxy . getHost ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.cli.compiler.grape.AuthenticationContext . get ( AuthenticationContext . USERNAME ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.cli.compiler.grape.AuthenticationContext . get ( AuthenticationContext . PASSWORD ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository = org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getMirrorSelector ( ) . getMirror ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; assertThat ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) . as ( STRING + org.springframework.boot.cli.compiler.grape.RemoteRepository . getId ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.cli.compiler.grape.RemoteRepository . getHost ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultRepositorySystemSession org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , RemoteRepository org.springframework.boot.cli.compiler.grape.RemoteRepository ) { Authentication org.springframework.boot.cli.compiler.grape.Authentication = org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession . getAuthenticationSelector ( ) . getAuthentication ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; org.springframework.boot.cli.compiler.grape.RemoteRepository = new RemoteRepository . RemoteRepository ( org.springframework.boot.cli.compiler.grape.RemoteRepository ) . setAuthentication ( org.springframework.boot.cli.compiler.grape.Authentication ) . build ( ) ; AuthenticationContext org.springframework.boot.cli.compiler.grape.AuthenticationContext = AuthenticationContext . forRepository ( org.springframework.boot.cli.compiler.grape.DefaultRepositorySystemSession , org.springframework.boot.cli.compiler.grape.RemoteRepository ) ; assertThat ( org.springframework.boot.cli.compiler.grape.AuthenticationContext . get ( AuthenticationContext . USERNAME ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.cli.compiler.grape.AuthenticationContext . get ( AuthenticationContext . PASSWORD ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
