<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.context.support.ApplicationContext ) { super( org.springframework.context.support.ApplicationContext ); }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . java.lang.Boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) org.springframework.context.support.BeansException { if ( boolean ( ) ) { destroyBeans ( ) ; void ( ) ; } try { DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory = org.springframework.context.support.DefaultListableBeanFactory ( ) ; org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( getId ( ) ) ; void ( org.springframework.context.support.DefaultListableBeanFactory ) ; void ( org.springframework.context.support.DefaultListableBeanFactory ) ; synchronized ( this . java.lang.Object ) { this . org.springframework.context.support.DefaultListableBeanFactory = org.springframework.context.support.DefaultListableBeanFactory ; } } catch ( java.io.IOException java.io.IOException ) { throw new ApplicationContextException ( STRING + getDisplayName ( ) , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( BeansException org.springframework.context.support.BeansException ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.context.support.DefaultListableBeanFactory != null ) this . org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( null ) ; } super. cancelRefresh ( org.springframework.context.support.BeansException ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) { synchronized ( this . java.lang.Object ) { this . org.springframework.context.support.DefaultListableBeanFactory . setSerializationId ( null ) ; this . org.springframework.context.support.DefaultListableBeanFactory = null ; } }  <METHOD_END>
<METHOD_START> protected final boolean boolean ( ) { synchronized ( this . java.lang.Object ) { return ( this . org.springframework.context.support.DefaultListableBeanFactory != null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.context.support.ConfigurableListableBeanFactory org.springframework.context.support.ConfigurableListableBeanFactory ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.context.support.DefaultListableBeanFactory == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } return this . org.springframework.context.support.DefaultListableBeanFactory ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected org.springframework.context.support.DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ( ) { return new DefaultListableBeanFactory ( getInternalParentBeanFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory ) { if ( this . java.lang.Boolean != null ) { org.springframework.context.support.DefaultListableBeanFactory . setAllowBeanDefinitionOverriding ( this . java.lang.Boolean ) ; } if ( this . java.lang.Boolean != null ) { org.springframework.context.support.DefaultListableBeanFactory . setAllowCircularReferences ( this . java.lang.Boolean ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( DefaultListableBeanFactory org.springframework.context.support.DefaultListableBeanFactory )			throws org.springframework.context.support.BeansException , java.io.IOException ;  <METHOD_END>
