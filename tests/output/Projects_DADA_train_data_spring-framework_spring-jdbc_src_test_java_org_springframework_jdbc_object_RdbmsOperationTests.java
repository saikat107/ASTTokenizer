<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setDataSource ( new DriverManagerDataSource ( ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setTypes ( new int [] { java.sql.Types . int } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setDataSource ( new DriverManagerDataSource ( ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . declareParameter ( new SqlParameter ( java.sql.Types . int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setTypes ( new int [] { java.sql.Types . int } ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateParameters ( ( java.lang.Object [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setTypes ( new int [] { java.sql.Types . int } ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateNamedParameters ( ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.ExpectedException . expectMessage ( containsString ( STRING ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateParameters ( new java.lang.Object [] { NUMBER , NUMBER } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.HashMap<java.lang.String,java.lang.String> <> ( ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateNamedParameters ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setDataSource ( new DriverManagerDataSource ( ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setTypes ( null ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . compile ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SqlOperation org.springframework.jdbc.object.SqlOperation = new SqlOperation ( ) {} ; org.springframework.jdbc.object.SqlOperation . setSql ( STRING ) ; org.springframework.jdbc.object.ExpectedException . expect ( InvalidDataAccessApiUsageException .class ) ; org.springframework.jdbc.object.SqlOperation . compile ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SqlOperation org.springframework.jdbc.object.SqlOperation = new SqlOperation ( ) {} ; javax.sql.DataSource javax.sql.DataSource = new DriverManagerDataSource ( ) ; org.springframework.jdbc.object.SqlOperation . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.SqlOperation . setFetchSize ( NUMBER ) ; org.springframework.jdbc.object.SqlOperation . setMaxRows ( NUMBER ) ; JdbcTemplate org.springframework.jdbc.object.JdbcTemplate = org.springframework.jdbc.object.SqlOperation . getJdbcTemplate ( ) ; assertEquals ( javax.sql.DataSource , org.springframework.jdbc.object.JdbcTemplate . getDataSource ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.object.JdbcTemplate . getFetchSize ( ) ) ; assertEquals ( NUMBER , org.springframework.jdbc.object.JdbcTemplate . getMaxRows ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setDataSource ( new DriverManagerDataSource ( ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . declareParameter ( new SqlOutParameter ( STRING , java.sql.Types . int ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . declareParameter ( new SqlInOutParameter ( STRING , java.sql.Types . int ) ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateParameters ( new java.lang.Object [] { STRING , STRING } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { javax.sql.DataSource javax.sql.DataSource = new DriverManagerDataSource ( ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setDataSource ( javax.sql.DataSource ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setSql ( STRING ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . setParameters ( new SqlParameter [] { new SqlParameter ( STRING , java.sql.Types . int ) , new SqlParameter ( STRING , java.sql.Types . int ) } ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . afterPropertiesSet ( ) ; org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . validateParameters ( new java.lang.Object [] { NUMBER , STRING } ) ; assertEquals ( NUMBER , org.springframework.jdbc.object.RdbmsOperationTests.TestRdbmsOperation . getDeclaredParameters ( ) . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) {		}  <METHOD_END>
