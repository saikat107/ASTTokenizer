<METHOD_START> public void void ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<? extends java.lang.annotation.Annotation> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> ( ) { return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.annotation.BeanFactory ) { if ( org.springframework.beans.factory.annotation.BeanFactory instanceof ConfigurableListableBeanFactory ) { this . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory = ( ConfigurableListableBeanFactory ) org.springframework.beans.factory.annotation.BeanFactory ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RootBeanDefinition org.springframework.beans.factory.annotation.RootBeanDefinition , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.annotation.PropertyValues org.springframework.beans.factory.annotation.PropertyValues ( PropertyValues org.springframework.beans.factory.annotation.PropertyValues , java.beans.PropertyDescriptor [] java.beans.PropertyDescriptor[] , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.beans.factory.annotation.BeansException { if ( ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { if ( ! boolean ( this . org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory , java.lang.String ) ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : java.beans.PropertyDescriptor[] ) { if ( boolean ( java.beans.PropertyDescriptor ) && ! org.springframework.beans.factory.annotation.PropertyValues . contains ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { java.util.List<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } if ( ! java.util.List<java.lang.String> . boolean ( ) ) { throw new BeanInitializationException ( java.lang.String ( java.util.List<java.lang.String> , java.lang.String ) ) ; } } this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } return org.springframework.beans.factory.annotation.PropertyValues ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ConfigurableListableBeanFactory org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory , java.lang.String java.lang.String ) { if ( org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory == null || ! org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory . containsBeanDefinition ( java.lang.String ) ) { return false ; } BeanDefinition org.springframework.beans.factory.annotation.BeanDefinition = org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.annotation.BeanDefinition . getFactoryBeanName ( ) != null ) { return true ; } java.lang.Object java.lang.Object = org.springframework.beans.factory.annotation.BeanDefinition . getAttribute ( java.lang.String ) ; return ( java.lang.Object != null && ( java.lang.Boolean . java.lang.Boolean . boolean ( java.lang.Object ) || java.lang.Boolean . java.lang.Boolean ( java.lang.Object . java.lang.String ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor ) { java.lang.reflect.Method java.lang.reflect.Method = java.beans.PropertyDescriptor . java.lang.reflect.Method ( ) ; return ( java.lang.reflect.Method != null && AnnotationUtils . getAnnotation ( java.lang.reflect.Method , java.lang.Class<? extends java.lang.annotation.Annotation> ( ) ) != null ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> , java.lang.String java.lang.String ) { int int = java.util.List<java.lang.String> . int ( ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( int == NUMBER ? STRING : STRING ) ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.String java.lang.String = java.util.List<java.lang.String> . java.lang.String ( int ) ; if ( int > NUMBER ) { if ( int == ( int - NUMBER ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } else { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } } java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; } java.lang.StringBuilder . java.lang.StringBuilder ( int == NUMBER ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( STRING ) ; return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
