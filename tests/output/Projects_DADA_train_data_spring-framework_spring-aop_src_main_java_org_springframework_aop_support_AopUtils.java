<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof SpringProxy && ( java.lang.reflect.Proxy . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) || ClassUtils . isCglibProxyClass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof SpringProxy && java.lang.reflect.Proxy . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Object java.lang.Object ) { return ( java.lang.Object instanceof SpringProxy && ClassUtils . isCglibProxy ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = null ; if ( java.lang.Object instanceof TargetClassAware ) { java.lang.Class<?> = ( ( TargetClassAware ) java.lang.Object ) . getTargetClass ( ) ; } if ( java.lang.Class<> == null ) { java.lang.Class<?> = ( boolean ( java.lang.Object ) ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) : java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Method java.lang.reflect.Method = MethodIntrospector . selectInvocableMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; if ( java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) && ! java.lang.reflect.Modifier . boolean ( java.lang.reflect.Method . int ( ) ) && SpringProxy .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) ) ) ; } return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ReflectionUtils . isEqualsMethod ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ReflectionUtils . isHashCodeMethod ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ReflectionUtils . isToStringMethod ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.reflect.Method java.lang.reflect.Method ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.lang.reflect.Method java.lang.reflect.Method = ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ; return BridgeMethodResolver . findBridgedMethod ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Pointcut org.springframework.aop.support.Pointcut , java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( org.springframework.aop.support.Pointcut , java.lang.Class<> , false ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Pointcut org.springframework.aop.support.Pointcut , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { Assert . notNull ( org.springframework.aop.support.Pointcut , STRING ) ; if ( ! org.springframework.aop.support.Pointcut . getClassFilter ( ) . matches ( java.lang.Class<> ) ) { return false ; } MethodMatcher org.springframework.aop.support.MethodMatcher = org.springframework.aop.support.Pointcut . getMethodMatcher ( ) ; if ( org.springframework.aop.support.MethodMatcher == MethodMatcher . TRUE ) { return true ; } IntroductionAwareMethodMatcher org.springframework.aop.support.IntroductionAwareMethodMatcher = null ; if ( org.springframework.aop.support.MethodMatcher instanceof IntroductionAwareMethodMatcher ) { org.springframework.aop.support.IntroductionAwareMethodMatcher = ( IntroductionAwareMethodMatcher ) org.springframework.aop.support.MethodMatcher ; } java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = new java.util.LinkedHashSet <> ( ClassUtils . getAllInterfacesForClassAsSet ( java.lang.Class<> ) ) ; java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.Set<java.lang.Class<?>> ) { java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( ( org.springframework.aop.support.IntroductionAwareMethodMatcher != null && org.springframework.aop.support.IntroductionAwareMethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> , boolean ) ) || org.springframework.aop.support.MethodMatcher . matches ( java.lang.reflect.Method , java.lang.Class<> ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Advisor org.springframework.aop.support.Advisor , java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( org.springframework.aop.support.Advisor , java.lang.Class<> , false ) ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( Advisor org.springframework.aop.support.Advisor , java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { if ( org.springframework.aop.support.Advisor instanceof IntroductionAdvisor ) { return ( ( IntroductionAdvisor ) org.springframework.aop.support.Advisor ) . getClassFilter ( ) . matches ( java.lang.Class<> ) ; } else if ( org.springframework.aop.support.Advisor instanceof PointcutAdvisor ) { PointcutAdvisor org.springframework.aop.support.PointcutAdvisor = ( PointcutAdvisor ) org.springframework.aop.support.Advisor ; return boolean ( org.springframework.aop.support.PointcutAdvisor . getPointcut ( ) , java.lang.Class<> , boolean ) ; } else { return true ; } }  <METHOD_END>
<METHOD_START> public static java.util.List<org.springframework.aop.support.Advisor> < Advisor > java.util.List<org.springframework.aop.support.Advisor> ( java.util.List<org.springframework.aop.support.Advisor> < Advisor > java.util.List<org.springframework.aop.support.Advisor> , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.util.List<org.springframework.aop.support.Advisor> . isEmpty ( ) ) { return java.util.List<org.springframework.aop.support.Advisor> ; } java.util.List<org.springframework.aop.support.Advisor> < Advisor > java.util.List<org.springframework.aop.support.Advisor> = new java.util.LinkedList<org.springframework.aop.support.Advisor> <> ( ) ; for ( Advisor org.springframework.aop.support.Advisor : java.util.List<org.springframework.aop.support.Advisor> ) { if ( org.springframework.aop.support.Advisor instanceof IntroductionAdvisor && boolean ( org.springframework.aop.support.Advisor , java.lang.Class<> ) ) { java.util.List<org.springframework.aop.support.Advisor> . add ( org.springframework.aop.support.Advisor ) ; } } boolean boolean = ! java.util.List<org.springframework.aop.support.Advisor> . isEmpty ( ) ; for ( Advisor org.springframework.aop.support.Advisor : java.util.List<org.springframework.aop.support.Advisor> ) { if ( org.springframework.aop.support.Advisor instanceof IntroductionAdvisor ) { continue; } if ( boolean ( org.springframework.aop.support.Advisor , java.lang.Class<> , boolean ) ) { java.util.List<org.springframework.aop.support.Advisor> . add ( org.springframework.aop.support.Advisor ) ; } } return java.util.List<org.springframework.aop.support.Advisor> ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] )			throws java.lang.Throwable { try { ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; return java.lang.reflect.Method . java.lang.Object ( java.lang.Object , java.lang.Object[] ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { throw new AopInvocationException ( STRING + java.lang.reflect.Method + STRING + java.lang.Object + STRING , java.lang.IllegalArgumentException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new AopInvocationException ( STRING + java.lang.reflect.Method + STRING , java.lang.IllegalAccessException ) ; } }  <METHOD_END>
