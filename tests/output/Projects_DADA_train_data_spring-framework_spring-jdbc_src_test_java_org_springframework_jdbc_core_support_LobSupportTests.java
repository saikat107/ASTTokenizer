<METHOD_START> @ Test public void void ( ) java.sql.SQLException { LobHandler org.springframework.jdbc.core.support.LobHandler = mock ( LobHandler .class ) ; LobCreator org.springframework.jdbc.core.support.LobCreator = mock ( LobCreator .class ) ; java.sql.PreparedStatement java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; given ( org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ) . willReturn ( org.springframework.jdbc.core.support.LobCreator ) ; given ( java.sql.PreparedStatement . int ( ) ) . willReturn ( NUMBER ) ; class SetValuesCalled { boolean boolean = false ; } final SetValuesCalled svc = new SetValuesCalled ( ) ; AbstractLobCreatingPreparedStatementCallback org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback = new AbstractLobCreatingPreparedStatementCallback ( org.springframework.jdbc.core.support.LobHandler ) { @ java.lang.Override protected void void ( java.sql.PreparedStatement java.sql.PreparedStatement , LobCreator org.springframework.jdbc.core.support.LobCreator )					throws java.sql.SQLException , org.springframework.jdbc.core.support.DataAccessException { svc . boolean = true ; } } ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback . doInPreparedStatement ( java.sql.PreparedStatement ) ) ; assertTrue ( svc . boolean ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . close ( ) ; verify ( org.springframework.jdbc.core.support.LobHandler ) . getLobCreator ( ) ; verify ( java.sql.PreparedStatement ) . executeUpdate ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.sql.PreparedStatement java.sql.PreparedStatement , LobCreator org.springframework.jdbc.core.support.LobCreator )					throws java.sql.SQLException , org.springframework.jdbc.core.support.DataAccessException { svc . boolean = true ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; AbstractLobStreamingResultSetExtractor < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> = org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ( false ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( IncorrectResultSizeDataAccessException .class ) ; try { org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> . extractData ( java.sql.ResultSet ) ; } finally { verify ( java.sql.ResultSet ) . next ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; AbstractLobStreamingResultSetExtractor < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> = org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ( false ) ; org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> . extractData ( java.sql.ResultSet ) ; verify ( java.sql.ResultSet ) . clearWarnings ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; AbstractLobStreamingResultSetExtractor < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> = org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ( false ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( IncorrectResultSizeDataAccessException .class ) ; try { org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> . extractData ( java.sql.ResultSet ) ; } finally { verify ( java.sql.ResultSet ) . clearWarnings ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.sql.ResultSet java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true ) ; AbstractLobStreamingResultSetExtractor < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> = org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ( true ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( LobRetrievalFailureException .class ) ; org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> . extractData ( java.sql.ResultSet ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ( final boolean boolean ) { AbstractLobStreamingResultSetExtractor < java.lang.Void > org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> = new AbstractLobStreamingResultSetExtractor < java.lang.Void > ( ) { @ java.lang.Override protected void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , java.io.IOException { if ( boolean ) { throw new java.io.IOException ( ) ; } else { java.sql.ResultSet . void ( ) ; } } } ; return org.springframework.jdbc.core.support.AbstractLobStreamingResultSetExtractor<java.lang.Void> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.sql.ResultSet java.sql.ResultSet ) throws java.sql.SQLException , java.io.IOException { if ( boolean ) { throw new java.io.IOException ( ) ; } else { java.sql.ResultSet . void ( ) ; } }  <METHOD_END>
