<METHOD_START> public void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new java.util.LinkedHashMap<java.lang.String,java.lang.String> <> ( ) ; void ( java.util.Map<java.lang.String,java.lang.String> ) ; this . java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( java.util.Map<java.lang.String,java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.util.Set<? extends javax.lang.model.element.TypeElement> < ? extends javax.lang.model.element.TypeElement > java.util.Set<? extends javax.lang.model.element.TypeElement> , javax.annotation.processing.RoundEnvironment javax.annotation.processing.RoundEnvironment ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : this . java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { void ( javax.annotation.processing.RoundEnvironment , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ) ; } if ( javax.annotation.processing.RoundEnvironment . boolean ( ) ) { try { void ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } return false ; }  <METHOD_END>
<METHOD_START> private void void ( javax.annotation.processing.RoundEnvironment javax.annotation.processing.RoundEnvironment , java.lang.String java.lang.String , java.lang.String java.lang.String ) { javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement = this . javax.annotation.processing.ProcessingEnvironment . javax.lang.model.util.Elements ( ) . javax.lang.model.element.TypeElement ( java.lang.String ) ; if ( javax.lang.model.element.TypeElement != null ) { for ( javax.lang.model.element.Element javax.lang.model.element.Element : javax.annotation.processing.RoundEnvironment . java.util.Set<? extends javax.lang.model.element.Element> ( javax.lang.model.element.TypeElement ) ) { javax.lang.model.element.Element javax.lang.model.element.Element = javax.lang.model.element.Element . javax.lang.model.element.Element ( ) ; if ( javax.lang.model.element.Element != null && javax.lang.model.element.Element . javax.lang.model.element.ElementKind ( ) == javax.lang.model.element.ElementKind . javax.lang.model.element.ElementKind ) { void ( javax.lang.model.element.Element , java.lang.String , java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( javax.lang.model.element.Element javax.lang.model.element.Element , java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { java.lang.String java.lang.String = java.lang.String ( javax.lang.model.element.Element ) ; javax.lang.model.element.AnnotationMirror javax.lang.model.element.AnnotationMirror = javax.lang.model.element.AnnotationMirror ( javax.lang.model.element.Element , java.lang.String ) ; if ( java.lang.String != null && javax.lang.model.element.AnnotationMirror != null ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( javax.lang.model.element.AnnotationMirror ) ; this . java.util.Properties . java.lang.Object ( java.lang.String + STRING + java.lang.String , java.lang.String ( java.util.List<java.lang.Object> ) ) ; this . java.util.Properties . java.lang.Object ( java.lang.String , STRING ) ; } } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING + javax.lang.model.element.Element , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private javax.lang.model.element.AnnotationMirror javax.lang.model.element.AnnotationMirror ( javax.lang.model.element.Element javax.lang.model.element.Element , java.lang.String java.lang.String ) { if ( javax.lang.model.element.Element != null ) { for ( javax.lang.model.element.AnnotationMirror javax.lang.model.element.AnnotationMirror : javax.lang.model.element.Element . java.util.List<? extends javax.lang.model.element.AnnotationMirror> ( ) ) { if ( java.lang.String . boolean ( javax.lang.model.element.AnnotationMirror . javax.lang.model.type.DeclaredType ( ) . java.lang.String ( ) ) ) { return javax.lang.model.element.AnnotationMirror ; } } } return null ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.Object java.lang.Object : java.util.List<java.lang.Object> ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) != NUMBER ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Object ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( javax.lang.model.element.AnnotationMirror javax.lang.model.element.AnnotationMirror ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; for ( java.util.Map . java.util.Map.Entry<? extends javax.lang.model.element.ExecutableElement,? extends javax.lang.model.element.AnnotationValue> < ? extends javax.lang.model.element.ExecutableElement , ? extends javax.lang.model.element.AnnotationValue > java.util.Map.Entry<? extends javax.lang.model.element.ExecutableElement,? extends javax.lang.model.element.AnnotationValue> : javax.lang.model.element.AnnotationMirror . java.util.Map<? extends javax.lang.model.element.ExecutableElement,? extends javax.lang.model.element.AnnotationValue> ( ) . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<,> . getKey ( ) . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) || STRING . boolean ( java.lang.String ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<,> . getValue ( ) . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.util.List ) { for ( javax.lang.model.element.AnnotationValue javax.lang.model.element.AnnotationValue : ( java.util.List<javax.lang.model.element.AnnotationValue> < javax.lang.model.element.AnnotationValue > ) java.lang.Object ) { java.util.List<java.lang.Object> . boolean ( javax.lang.model.element.AnnotationValue . java.lang.Object ( ) ) ; } } else { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } } return java.util.List<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.lang.model.element.Element javax.lang.model.element.Element ) { if ( javax.lang.model.element.Element != null ) { javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement = javax.lang.model.element.TypeElement ( javax.lang.model.element.Element . javax.lang.model.type.TypeMirror ( ) ) ; if ( javax.lang.model.element.TypeElement != null ) { return java.lang.String ( javax.lang.model.element.TypeElement ) + STRING + ( ( javax.lang.model.type.DeclaredType ) javax.lang.model.element.Element . javax.lang.model.type.TypeMirror ( ) ) . javax.lang.model.element.Element ( ) . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; } if ( javax.lang.model.element.Element instanceof javax.lang.model.element.TypeElement ) { return ( ( javax.lang.model.element.TypeElement ) javax.lang.model.element.Element ) . javax.lang.model.element.Name ( ) . java.lang.String ( ) ; } } return null ; }  <METHOD_END>
<METHOD_START> private javax.lang.model.element.TypeElement javax.lang.model.element.TypeElement ( javax.lang.model.type.TypeMirror javax.lang.model.type.TypeMirror ) { if ( javax.lang.model.type.TypeMirror instanceof javax.lang.model.type.DeclaredType ) { javax.lang.model.type.DeclaredType javax.lang.model.type.DeclaredType = ( javax.lang.model.type.DeclaredType ) javax.lang.model.type.TypeMirror ; javax.lang.model.element.Element javax.lang.model.element.Element = javax.lang.model.type.DeclaredType . javax.lang.model.element.Element ( ) . javax.lang.model.element.Element ( ) ; if ( javax.lang.model.element.Element != null && javax.lang.model.element.Element instanceof javax.lang.model.element.TypeElement ) { return ( javax.lang.model.element.TypeElement ) javax.lang.model.element.Element ; } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { if ( ! this . java.util.Properties . boolean ( ) ) { javax.tools.FileObject javax.tools.FileObject = this . javax.annotation.processing.ProcessingEnvironment . javax.annotation.processing.Filer ( ) . javax.tools.FileObject ( javax.tools.StandardLocation . javax.tools.StandardLocation , STRING , java.lang.String ) ; java.io.OutputStream java.io.OutputStream = javax.tools.FileObject . java.io.OutputStream ( ) ; try { this . java.util.Properties . void ( java.io.OutputStream , null ) ; } finally { java.io.OutputStream . void ( ) ; } } }  <METHOD_END>
