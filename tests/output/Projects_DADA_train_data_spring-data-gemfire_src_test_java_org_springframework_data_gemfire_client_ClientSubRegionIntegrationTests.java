<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { int int = findAvailablePort ( ) ; org.springframework.data.gemfire.client.ProcessWrapper = run ( ServerProcess .class , java.lang.String . java.lang.String ( STRING , GEMFIRE_CACHE_SERVER_PORT_PROPERTY , int ) , getServerContextXmlFileLocation ( org.springframework.data.gemfire.client.ClientSubRegionIntegrationTests .class ) ) ; waitForServerToStart ( DEFAULT_HOSTNAME , int ) ; java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY , java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { java.lang.System . java.lang.String ( GEMFIRE_CACHE_SERVER_PORT_PROPERTY ) ; stop ( org.springframework.data.gemfire.client.ProcessWrapper ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String ) { void ( org.springframework.data.gemfire.client.Region<,> , java.lang.String , java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.client.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( org.springframework.data.gemfire.client.Region<,> ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.gemfire.client.Region<,> . getFullPath ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.ClientCache ) . describedAs ( STRING ) . isNotNull ( ) ; Region org.springframework.data.gemfire.client.Region = org.springframework.data.gemfire.client.ClientCache . getRegion ( STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING ) ; Region org.springframework.data.gemfire.client.Region = org.springframework.data.gemfire.client.Region . getSubregion ( STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING , STRING ) ; Region org.springframework.data.gemfire.client.Region = org.springframework.data.gemfire.client.ClientCache . getRegion ( STRING ) ; assertThat ( org.springframework.data.gemfire.client.Region ) . isSameAs ( org.springframework.data.gemfire.client.Region ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.client.Region , STRING ) ; void ( org.springframework.data.gemfire.client.Region , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.GemfireTemplate ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.GemfireTemplate . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.client.Region ) ; assertThat ( org.springframework.data.gemfire.client.GemfireTemplate ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.client.GemfireTemplate . getRegion ( ) ) . isSameAs ( org.springframework.data.gemfire.client.Region ) ; }  <METHOD_END>
