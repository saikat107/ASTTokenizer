<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.file.tail.ApplicationEventPublisher ) { this . org.springframework.integration.file.tail.ApplicationEventPublisher = org.springframework.integration.file.tail.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> protected java.io.File java.io.File ( ) { if ( this . java.io.File == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } return this . java.io.File ; }  <METHOD_END>
<METHOD_START> public void void ( TaskExecutor org.springframework.integration.file.tail.TaskExecutor ) { Assert . notNull ( org.springframework.integration.file.tail.TaskExecutor , STRING ) ; this . org.springframework.integration.file.tail.TaskExecutor = org.springframework.integration.file.tail.TaskExecutor ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { Assert . isTrue ( long > NUMBER , STRING ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> protected long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.tail.TaskExecutor org.springframework.integration.file.tail.TaskExecutor ( ) { return this . org.springframework.integration.file.tail.TaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { Message < ? > org.springframework.integration.file.tail.Message<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.String ) . setHeader ( FileHeaders . FILENAME , this . java.io.File . java.lang.String ( ) ) . setHeader ( FileHeaders . ORIGINAL_FILE , this . java.io.File ) . build ( ) ; super. sendMessage ( org.springframework.integration.file.tail.Message<> ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { if ( this . org.springframework.integration.file.tail.ApplicationEventPublisher != null ) { org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingEvent org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingEvent = new org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingEvent ( this , java.lang.String , this . java.io.File ) ; this . org.springframework.integration.file.tail.ApplicationEventPublisher . publishEvent ( org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingEvent ) ; } else { logger . info ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStart ( ) ; if ( this . long > NUMBER ) { this . java.util.concurrent.ScheduledFuture<?> = getTaskScheduler ( ) . scheduleWithFixedDelay ( ( ) { long now = System . currentTimeMillis ( ) ; long lastAlertAt = this . lastNoMessageAlert . get ( ) ; long lastProduce = this . lastProduce ; if ( now > lastProduce + this . idleEventInterval && now > lastAlertAt + this . idleEventInterval && this . lastNoMessageAlert . compareAndSet ( lastAlertAt , now ) ) { publishIdleEvent ( now - lastProduce ) ; } } , this . long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doStop ( ) ; if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; } }  <METHOD_END>
<METHOD_START> private void void ( long long ) { if ( this . org.springframework.integration.file.tail.ApplicationEventPublisher != null ) { if ( java.io.File ( ) . boolean ( ) ) { org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingIdleEvent org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingIdleEvent = new org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingIdleEvent ( this , this . java.io.File , long ) ; this . org.springframework.integration.file.tail.ApplicationEventPublisher . publishEvent ( org.springframework.integration.file.tail.FileTailingMessageProducerSupport.FileTailingIdleEvent ) ; } } else { logger . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . long > NUMBER ) { this . long = java.lang.System . long ( ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.io.File java.io.File , long long ) { super( java.lang.Object , STRING , java.io.File ); this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return super. java.lang.String ( ) + STRING + this . long + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.io.File java.io.File ) { super( java.lang.Object ); this . java.lang.String = java.lang.String ; this . java.io.File = java.io.File ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + super. java.lang.String ( ) + STRING + this . java.lang.String + STRING + this . java.io.File . java.lang.String ( ) + STRING ; }  <METHOD_END>
