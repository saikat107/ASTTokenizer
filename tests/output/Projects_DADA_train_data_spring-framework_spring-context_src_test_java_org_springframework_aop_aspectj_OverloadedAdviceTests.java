<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.OverloadedAdviceTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.OverloadedAdviceTests> ( ) ) ; } catch ( BeanCreationException org.springframework.aop.aspectj.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.aop.aspectj.BeanCreationException . getRootCause ( ) ; assertTrue ( STRING , java.lang.Throwable instanceof java.lang.IllegalArgumentException ) ; assertTrue ( STRING , java.lang.Throwable . java.lang.String ( ) . int ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.aspectj.OverloadedAdviceTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.aspectj.OverloadedAdviceTests> ( ) ) ; } catch ( BeanCreationException org.springframework.aop.aspectj.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.aop.aspectj.BeanCreationException . getRootCause ( ) ; assertTrue ( STRING , java.lang.Throwable instanceof java.lang.IllegalArgumentException ) ; assertTrue ( STRING , java.lang.Throwable . java.lang.String ( ) . int ( STRING ) != - NUMBER ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> public void void ( int int ) { }  <METHOD_END>
