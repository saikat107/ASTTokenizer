<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Circle ( null , new Distance ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Circle ( NUMBER , NUMBER , - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.geo.Circle = new Circle ( NUMBER , NUMBER , NUMBER ) ; Circle org.springframework.data.geo.Circle = new Circle ( NUMBER , NUMBER , NUMBER ) ; assertThat ( org.springframework.data.geo.Circle ) . isEqualTo ( org.springframework.data.geo.Circle ) ; assertThat ( org.springframework.data.geo.Circle ) . isEqualTo ( org.springframework.data.geo.Circle ) ; org.springframework.data.geo.Circle = new Circle ( new Point ( NUMBER , NUMBER ) , new Distance ( NUMBER ) ) ; assertThat ( org.springframework.data.geo.Circle ) . isEqualTo ( org.springframework.data.geo.Circle ) ; assertThat ( org.springframework.data.geo.Circle ) . isEqualTo ( org.springframework.data.geo.Circle ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Circle ( NUMBER , NUMBER , NUMBER ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Circle org.springframework.data.geo.Circle = new Circle ( NUMBER , NUMBER , NUMBER ) ; Circle org.springframework.data.geo.Circle = ( Circle ) SerializationUtils . deserialize ( SerializationUtils . serialize ( org.springframework.data.geo.Circle ) ) ; assertThat ( org.springframework.data.geo.Circle ) . isEqualTo ( org.springframework.data.geo.Circle ) ; }  <METHOD_END>
