<METHOD_START> @ Before public void void ( ) { SampleMappingContext org.springframework.data.mapping.context.SampleMappingContext = new SampleMappingContext ( ) ; org.springframework.data.mapping.context.SampleMappingContext . setInitialEntitySet ( new java.util.HashSet <> ( java.util.Arrays . java.util.List<java.lang.Class<? extends java.lang.Object>> ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity .class , org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity .class ) ) ) ; org.springframework.data.mapping.context.SampleMappingContext . afterPropertiesSet ( ) ; org.springframework.data.mapping.context.IsNewStrategyFactory = new MappingContextIsNewStrategyFactory ( new PersistentEntities ( java.util.Collections . java.util.Set ( org.springframework.data.mapping.context.SampleMappingContext ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IsNewStrategy org.springframework.data.mapping.context.IsNewStrategy = org.springframework.data.mapping.context.IsNewStrategyFactory . getIsNewStrategy ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity .class ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity = new org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ( ) ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IsNewStrategy org.springframework.data.mapping.context.IsNewStrategy = org.springframework.data.mapping.context.IsNewStrategyFactory . getIsNewStrategy ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity .class ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity = new org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ( ) ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.VersionedEntity ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { IsNewStrategy org.springframework.data.mapping.context.IsNewStrategy = org.springframework.data.mapping.context.IsNewStrategyFactory . getIsNewStrategy ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity .class ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity = new org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity ( ) ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity ) ) . isTrue ( ) ; org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity . java.lang.Long = NUMBER ; assertThat ( org.springframework.data.mapping.context.IsNewStrategy . isNew ( org.springframework.data.mapping.context.MappingContextIsNewStrategyFactoryUnitTests.Entity ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Long java.lang.Long ( ) { return java.lang.Long ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
