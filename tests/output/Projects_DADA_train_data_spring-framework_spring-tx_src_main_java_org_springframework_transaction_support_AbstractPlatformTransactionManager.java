<METHOD_START> public final void void ( java.lang.String java.lang.String ) { void ( org.springframework.transaction.support.Constants . asNumber ( java.lang.String ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public final void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public final int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public final void void ( int int ) { if ( int < TransactionDefinition . TIMEOUT_DEFAULT ) { throw new InvalidTimeoutException ( STRING , int ) ; } this . int = int ; }  <METHOD_END>
<METHOD_START> public final int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public final void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.transaction.support.TransactionStatus org.springframework.transaction.support.TransactionStatus ( TransactionDefinition org.springframework.transaction.support.TransactionDefinition ) throws org.springframework.transaction.support.TransactionException { java.lang.Object java.lang.Object = java.lang.Object ( ) ; boolean boolean = org.springframework.transaction.support.Log . isDebugEnabled ( ) ; if ( org.springframework.transaction.support.TransactionDefinition == null ) { org.springframework.transaction.support.TransactionDefinition = new DefaultTransactionDefinition ( ) ; } if ( boolean ( java.lang.Object ) ) { return org.springframework.transaction.support.TransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , boolean ) ; } if ( org.springframework.transaction.support.TransactionDefinition . getTimeout ( ) < TransactionDefinition . TIMEOUT_DEFAULT ) { throw new InvalidTimeoutException ( STRING , org.springframework.transaction.support.TransactionDefinition . getTimeout ( ) ) ; } if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_MANDATORY ) { throw new IllegalTransactionStateException ( STRING ) ; } else if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_REQUIRED || org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_REQUIRES_NEW || org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_NESTED ) { org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder = org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( null ) ; if ( boolean ) { org.springframework.transaction.support.Log . debug ( STRING + org.springframework.transaction.support.TransactionDefinition . getName ( ) + STRING + org.springframework.transaction.support.TransactionDefinition ) ; } try { boolean boolean = ( int ( ) != int ) ; DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , true , boolean , boolean , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ) ; void ( java.lang.Object , org.springframework.transaction.support.TransactionDefinition ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus , org.springframework.transaction.support.TransactionDefinition ) ; return org.springframework.transaction.support.DefaultTransactionStatus ; } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { void ( null , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ) ; throw java.lang.Throwable ; } } else { if ( org.springframework.transaction.support.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT && org.springframework.transaction.support.Log . isWarnEnabled ( ) ) { org.springframework.transaction.support.Log . warn ( STRING + STRING + org.springframework.transaction.support.TransactionDefinition ) ; } boolean boolean = ( int ( ) == int ) ; return org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , null , true , boolean , boolean , null ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.transaction.support.TransactionStatus org.springframework.transaction.support.TransactionStatus ( TransactionDefinition org.springframework.transaction.support.TransactionDefinition , java.lang.Object java.lang.Object , boolean boolean )			throws org.springframework.transaction.support.TransactionException { if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_NEVER ) { throw new IllegalTransactionStateException ( STRING ) ; } if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) { if ( boolean ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } java.lang.Object java.lang.Object = org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( java.lang.Object ) ; boolean boolean = ( int ( ) == int ) ; return org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , null , false , boolean , boolean , java.lang.Object ) ; } if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_REQUIRES_NEW ) { if ( boolean ) { org.springframework.transaction.support.Log . debug ( STRING + org.springframework.transaction.support.TransactionDefinition . getName ( ) + STRING ) ; } org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder = org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( java.lang.Object ) ; try { boolean boolean = ( int ( ) != int ) ; DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , true , boolean , boolean , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ) ; void ( java.lang.Object , org.springframework.transaction.support.TransactionDefinition ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus , org.springframework.transaction.support.TransactionDefinition ) ; return org.springframework.transaction.support.DefaultTransactionStatus ; } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { void ( java.lang.Object , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder , java.lang.Throwable ) ; throw java.lang.Throwable ; } } if ( org.springframework.transaction.support.TransactionDefinition . getPropagationBehavior ( ) == TransactionDefinition . PROPAGATION_NESTED ) { if ( ! boolean ( ) ) { throw new NestedTransactionNotSupportedException ( STRING + STRING ) ; } if ( boolean ) { org.springframework.transaction.support.Log . debug ( STRING + org.springframework.transaction.support.TransactionDefinition . getName ( ) + STRING ) ; } if ( boolean ( ) ) { DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , false , false , boolean , null ) ; org.springframework.transaction.support.DefaultTransactionStatus . createAndHoldSavepoint ( ) ; return org.springframework.transaction.support.DefaultTransactionStatus ; } else { boolean boolean = ( int ( ) != int ) ; DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , true , boolean , boolean , null ) ; void ( java.lang.Object , org.springframework.transaction.support.TransactionDefinition ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus , org.springframework.transaction.support.TransactionDefinition ) ; return org.springframework.transaction.support.DefaultTransactionStatus ; } } if ( boolean ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } if ( boolean ( ) ) { if ( org.springframework.transaction.support.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { java.lang.Integer java.lang.Integer = TransactionSynchronizationManager . getCurrentTransactionIsolationLevel ( ) ; if ( java.lang.Integer == null || java.lang.Integer != org.springframework.transaction.support.TransactionDefinition . getIsolationLevel ( ) ) { Constants org.springframework.transaction.support.Constants = DefaultTransactionDefinition . constants ; throw new IllegalTransactionStateException ( STRING + org.springframework.transaction.support.TransactionDefinition + STRING + ( java.lang.Integer != null ? org.springframework.transaction.support.Constants . toCode ( java.lang.Integer , DefaultTransactionDefinition . PREFIX_ISOLATION ) : STRING ) ) ; } } if ( ! org.springframework.transaction.support.TransactionDefinition . isReadOnly ( ) ) { if ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) { throw new IllegalTransactionStateException ( STRING + org.springframework.transaction.support.TransactionDefinition + STRING ) ; } } } boolean boolean = ( int ( ) != int ) ; return org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , false , boolean , boolean , null ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.transaction.support.DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ( TransactionDefinition org.springframework.transaction.support.TransactionDefinition , java.lang.Object java.lang.Object , boolean boolean , boolean boolean , boolean boolean , java.lang.Object java.lang.Object ) { DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = org.springframework.transaction.support.DefaultTransactionStatus ( org.springframework.transaction.support.TransactionDefinition , java.lang.Object , boolean , boolean , boolean , java.lang.Object ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus , org.springframework.transaction.support.TransactionDefinition ) ; return org.springframework.transaction.support.DefaultTransactionStatus ; }  <METHOD_END>
<METHOD_START> protected org.springframework.transaction.support.DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ( TransactionDefinition org.springframework.transaction.support.TransactionDefinition , java.lang.Object java.lang.Object , boolean boolean , boolean boolean , boolean boolean , java.lang.Object java.lang.Object ) { boolean boolean = boolean && ! TransactionSynchronizationManager . isSynchronizationActive ( ) ; return new DefaultTransactionStatus ( java.lang.Object , boolean , boolean , org.springframework.transaction.support.TransactionDefinition . isReadOnly ( ) , boolean , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus , TransactionDefinition org.springframework.transaction.support.TransactionDefinition ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { TransactionSynchronizationManager . setActualTransactionActive ( org.springframework.transaction.support.DefaultTransactionStatus . hasTransaction ( ) ) ; TransactionSynchronizationManager . setCurrentTransactionIsolationLevel ( org.springframework.transaction.support.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ? org.springframework.transaction.support.TransactionDefinition . getIsolationLevel ( ) : null ) ; TransactionSynchronizationManager . setCurrentTransactionReadOnly ( org.springframework.transaction.support.TransactionDefinition . isReadOnly ( ) ) ; TransactionSynchronizationManager . setCurrentTransactionName ( org.springframework.transaction.support.TransactionDefinition . getName ( ) ) ; TransactionSynchronizationManager . initSynchronization ( ) ; } }  <METHOD_END>
<METHOD_START> protected int int ( TransactionDefinition org.springframework.transaction.support.TransactionDefinition ) { if ( org.springframework.transaction.support.TransactionDefinition . getTimeout ( ) != TransactionDefinition . TIMEOUT_DEFAULT ) { return org.springframework.transaction.support.TransactionDefinition . getTimeout ( ) ; } return this . int ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( java.lang.Object java.lang.Object ) throws org.springframework.transaction.support.TransactionException { if ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) { java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> = java.util.List<org.springframework.transaction.support.TransactionSynchronization> ( ) ; try { java.lang.Object java.lang.Object = null ; if ( java.lang.Object != null ) { java.lang.Object = java.lang.Object ( java.lang.Object ) ; } java.lang.String java.lang.String = TransactionSynchronizationManager . getCurrentTransactionName ( ) ; TransactionSynchronizationManager . setCurrentTransactionName ( null ) ; boolean boolean = TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ; TransactionSynchronizationManager . setCurrentTransactionReadOnly ( false ) ; java.lang.Integer java.lang.Integer = TransactionSynchronizationManager . getCurrentTransactionIsolationLevel ( ) ; TransactionSynchronizationManager . setCurrentTransactionIsolationLevel ( null ) ; boolean boolean = TransactionSynchronizationManager . isActualTransactionActive ( ) ; TransactionSynchronizationManager . setActualTransactionActive ( false ) ; return new org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( java.lang.Object , java.util.List<org.springframework.transaction.support.TransactionSynchronization> , java.lang.String , boolean , java.lang.Integer , boolean ) ; } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) ; throw java.lang.Throwable ; } } else if ( java.lang.Object != null ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; return new org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ( java.lang.Object ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> protected final void void ( java.lang.Object java.lang.Object , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder )			throws org.springframework.transaction.support.TransactionException { if ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder != null ) { java.lang.Object java.lang.Object = org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . java.lang.Object ; if ( java.lang.Object != null ) { void ( java.lang.Object , java.lang.Object ) ; } java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> = org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . java.util.List<org.springframework.transaction.support.TransactionSynchronization> ; if ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> != null ) { TransactionSynchronizationManager . setActualTransactionActive ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . boolean ) ; TransactionSynchronizationManager . setCurrentTransactionIsolationLevel ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . java.lang.Integer ) ; TransactionSynchronizationManager . setCurrentTransactionReadOnly ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . boolean ) ; TransactionSynchronizationManager . setCurrentTransactionName ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder . java.lang.String ) ; void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder , java.lang.Throwable java.lang.Throwable ) { java.lang.String java.lang.String = STRING ; try { void ( java.lang.Object , org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ) ; } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { org.springframework.transaction.support.Log . error ( java.lang.String , java.lang.Throwable ) ; throw java.lang.Throwable ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> ( ) { java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> = TransactionSynchronizationManager . getSynchronizations ( ) ; for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { org.springframework.transaction.support.TransactionSynchronization . suspend ( ) ; } TransactionSynchronizationManager . clearSynchronization ( ) ; return java.util.List<org.springframework.transaction.support.TransactionSynchronization> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { TransactionSynchronizationManager . initSynchronization ( ) ; for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { org.springframework.transaction.support.TransactionSynchronization . resume ( ) ; TransactionSynchronizationManager . registerSynchronization ( org.springframework.transaction.support.TransactionSynchronization ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( TransactionStatus org.springframework.transaction.support.TransactionStatus ) throws org.springframework.transaction.support.TransactionException { if ( org.springframework.transaction.support.TransactionStatus . isCompleted ( ) ) { throw new IllegalTransactionStateException ( STRING ) ; } DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.support.TransactionStatus ; if ( org.springframework.transaction.support.DefaultTransactionStatus . isLocalRollbackOnly ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus , false ) ; return; } if ( ! boolean ( ) && org.springframework.transaction.support.DefaultTransactionStatus . isGlobalRollbackOnly ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus , true ) ; return; } void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) throws org.springframework.transaction.support.TransactionException { try { boolean boolean = false ; try { boolean boolean = false ; void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; boolean = true ; if ( org.springframework.transaction.support.DefaultTransactionStatus . hasSavepoint ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } boolean = org.springframework.transaction.support.DefaultTransactionStatus . isGlobalRollbackOnly ( ) ; org.springframework.transaction.support.DefaultTransactionStatus . releaseHeldSavepoint ( ) ; } else if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewTransaction ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } boolean = org.springframework.transaction.support.DefaultTransactionStatus . isGlobalRollbackOnly ( ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } else if ( boolean ( ) ) { boolean = org.springframework.transaction.support.DefaultTransactionStatus . isGlobalRollbackOnly ( ) ; } if ( boolean ) { throw new UnexpectedRollbackException ( STRING ) ; } } catch ( UnexpectedRollbackException org.springframework.transaction.support.UnexpectedRollbackException ) { void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_ROLLED_BACK ) ; throw org.springframework.transaction.support.UnexpectedRollbackException ; } catch ( TransactionException org.springframework.transaction.support.TransactionException ) { if ( boolean ( ) ) { void ( org.springframework.transaction.support.DefaultTransactionStatus , org.springframework.transaction.support.TransactionException ) ; } else { void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_UNKNOWN ) ; } throw org.springframework.transaction.support.TransactionException ; } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { if ( ! boolean ) { void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus , java.lang.Throwable ) ; throw java.lang.Throwable ; } try { void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } finally { void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_COMMITTED ) ; } } finally { void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( TransactionStatus org.springframework.transaction.support.TransactionStatus ) throws org.springframework.transaction.support.TransactionException { if ( org.springframework.transaction.support.TransactionStatus . isCompleted ( ) ) { throw new IllegalTransactionStateException ( STRING ) ; } DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus = ( DefaultTransactionStatus ) org.springframework.transaction.support.TransactionStatus ; void ( org.springframework.transaction.support.DefaultTransactionStatus , false ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus , boolean boolean ) { try { boolean boolean = boolean ; try { void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; if ( org.springframework.transaction.support.DefaultTransactionStatus . hasSavepoint ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } org.springframework.transaction.support.DefaultTransactionStatus . rollbackToHeldSavepoint ( ) ; } else if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewTransaction ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } else { if ( org.springframework.transaction.support.DefaultTransactionStatus . hasTransaction ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isLocalRollbackOnly ( ) || boolean ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } else { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } } } else { org.springframework.transaction.support.Log . debug ( STRING ) ; } if ( ! boolean ( ) ) { boolean = false ; } } } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_UNKNOWN ) ; throw java.lang.Throwable ; } void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_ROLLED_BACK ) ; if ( boolean ) { throw new UnexpectedRollbackException ( STRING ) ; } } finally { void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus , java.lang.Throwable java.lang.Throwable ) throws org.springframework.transaction.support.TransactionException { try { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewTransaction ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING , java.lang.Throwable ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } else if ( org.springframework.transaction.support.DefaultTransactionStatus . hasTransaction ( ) && boolean ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING , java.lang.Throwable ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus ) ; } } catch ( java.lang.RuntimeException | java.lang.Error java.lang.Throwable ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_UNKNOWN ) ; throw java.lang.Throwable ; } void ( org.springframework.transaction.support.DefaultTransactionStatus , TransactionSynchronization . STATUS_ROLLED_BACK ) ; }  <METHOD_END>
<METHOD_START> protected final void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . trace ( STRING ) ; } TransactionSynchronizationUtils . triggerBeforeCommit ( org.springframework.transaction.support.DefaultTransactionStatus . isReadOnly ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . trace ( STRING ) ; } TransactionSynchronizationUtils . triggerBeforeCompletion ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . trace ( STRING ) ; } TransactionSynchronizationUtils . triggerAfterCommit ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus , int int ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> = TransactionSynchronizationManager . getSynchronizations ( ) ; TransactionSynchronizationManager . clearSynchronization ( ) ; if ( ! org.springframework.transaction.support.DefaultTransactionStatus . hasTransaction ( ) || org.springframework.transaction.support.DefaultTransactionStatus . isNewTransaction ( ) ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . trace ( STRING ) ; } void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> , int ) ; } else if ( ! java.util.List<org.springframework.transaction.support.TransactionSynchronization> . isEmpty ( ) ) { void ( org.springframework.transaction.support.DefaultTransactionStatus . getTransaction ( ) , java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) ; } } }  <METHOD_END>
<METHOD_START> protected final void void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> , int int ) { TransactionSynchronizationUtils . invokeAfterCompletion ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> , int ) ; }  <METHOD_END>
<METHOD_START> private void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) { org.springframework.transaction.support.DefaultTransactionStatus . setCompleted ( ) ; if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewSynchronization ( ) ) { TransactionSynchronizationManager . clear ( ) ; } if ( org.springframework.transaction.support.DefaultTransactionStatus . isNewTransaction ( ) ) { void ( org.springframework.transaction.support.DefaultTransactionStatus . getTransaction ( ) ) ; } if ( org.springframework.transaction.support.DefaultTransactionStatus . getSuspendedResources ( ) != null ) { if ( org.springframework.transaction.support.DefaultTransactionStatus . isDebug ( ) ) { org.springframework.transaction.support.Log . debug ( STRING ) ; } void ( org.springframework.transaction.support.DefaultTransactionStatus . getTransaction ( ) , ( org.springframework.transaction.support.AbstractPlatformTransactionManager.SuspendedResourcesHolder ) org.springframework.transaction.support.DefaultTransactionStatus . getSuspendedResources ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( ) org.springframework.transaction.support.TransactionException ;  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object ) throws org.springframework.transaction.support.TransactionException { return false ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.transaction.support.TransactionDefinition )			throws org.springframework.transaction.support.TransactionException ;  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) throws org.springframework.transaction.support.TransactionException { throw new TransactionSuspensionNotSupportedException ( STRING + java.lang.Class<? extends org.springframework.transaction.support.AbstractPlatformTransactionManager> ( ) . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) throws org.springframework.transaction.support.TransactionException { throw new TransactionSuspensionNotSupportedException ( STRING + java.lang.Class<? extends org.springframework.transaction.support.AbstractPlatformTransactionManager> ( ) . java.lang.String ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> protected void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) {	}  <METHOD_END>
<METHOD_START> protected abstract void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) throws org.springframework.transaction.support.TransactionException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) throws org.springframework.transaction.support.TransactionException ;  <METHOD_END>
<METHOD_START> protected void void ( DefaultTransactionStatus org.springframework.transaction.support.DefaultTransactionStatus ) throws org.springframework.transaction.support.TransactionException { throw new IllegalTransactionStateException ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object , java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) throws org.springframework.transaction.support.TransactionException { org.springframework.transaction.support.Log . debug ( STRING + STRING ) ; void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> , TransactionSynchronization . STATUS_UNKNOWN ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) {	}  <METHOD_END>
<METHOD_START> private void void ( java.io.ObjectInputStream java.io.ObjectInputStream ) throws java.io.IOException , java.lang.ClassNotFoundException { java.io.ObjectInputStream . void ( ) ; this . org.springframework.transaction.support.Log = LogFactory . getLog ( java.lang.Class<? extends org.springframework.transaction.support.AbstractPlatformTransactionManager> ( ) ) ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object , java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> , java.lang.String java.lang.String , boolean boolean , java.lang.Integer java.lang.Integer , boolean boolean ) { this . java.lang.Object = java.lang.Object ; this . java.util.List<org.springframework.transaction.support.TransactionSynchronization> = java.util.List<org.springframework.transaction.support.TransactionSynchronization> ; this . java.lang.String = java.lang.String ; this . boolean = boolean ; this . java.lang.Integer = java.lang.Integer ; this . boolean = boolean ; }  <METHOD_END>
