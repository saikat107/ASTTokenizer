<METHOD_START> public static org.springframework.boot.test.mock.mockito.MockSettings org.springframework.boot.test.mock.mockito.MockSettings ( ) { return org.springframework.boot.test.mock.mockito.MockSettings ( org.springframework.boot.test.mock.mockito.MockReset ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.mock.mockito.MockSettings org.springframework.boot.test.mock.mockito.MockSettings ( ) { return org.springframework.boot.test.mock.mockito.MockSettings ( org.springframework.boot.test.mock.mockito.MockReset ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.mock.mockito.MockSettings org.springframework.boot.test.mock.mockito.MockSettings ( org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset ) { return org.springframework.boot.test.mock.mockito.MockSettings ( org.springframework.boot.test.mock.mockito.MockReset , Mockito . withSettings ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.mock.mockito.MockSettings org.springframework.boot.test.mock.mockito.MockSettings ( org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset , MockSettings org.springframework.boot.test.mock.mockito.MockSettings ) { Assert . notNull ( org.springframework.boot.test.mock.mockito.MockSettings , STRING ) ; if ( org.springframework.boot.test.mock.mockito.MockReset != null && org.springframework.boot.test.mock.mockito.MockReset != org.springframework.boot.test.mock.mockito.MockReset ) { org.springframework.boot.test.mock.mockito.MockSettings . invocationListeners ( new org.springframework.boot.test.mock.mockito.MockReset.ResetInvocationListener ( org.springframework.boot.test.mock.mockito.MockReset ) ) ; } return org.springframework.boot.test.mock.mockito.MockSettings ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset ( java.lang.Object java.lang.Object ) { org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset = org.springframework.boot.test.mock.mockito.MockReset . org.springframework.boot.test.mock.mockito.MockReset ; if ( ClassUtils . isPresent ( STRING , null ) ) { if ( Mockito . mockingDetails ( java.lang.Object ) . isMock ( ) ) { MockCreationSettings org.springframework.boot.test.mock.mockito.MockCreationSettings = MockitoApi . get ( ) . getMockSettings ( java.lang.Object ) ; java.util.List java.util.List = org.springframework.boot.test.mock.mockito.MockCreationSettings . getInvocationListeners ( ) ; for ( java.lang.Object java.lang.Object : java.util.List ) { if ( java.lang.Object instanceof org.springframework.boot.test.mock.mockito.MockReset.ResetInvocationListener ) { org.springframework.boot.test.mock.mockito.MockReset = ( ( org.springframework.boot.test.mock.mockito.MockReset.ResetInvocationListener ) java.lang.Object ) . org.springframework.boot.test.mock.mockito.MockReset ( ) ; } } } } return org.springframework.boot.test.mock.mockito.MockReset ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset ) { this . org.springframework.boot.test.mock.mockito.MockReset = org.springframework.boot.test.mock.mockito.MockReset ; }  <METHOD_END>
<METHOD_START> public org.springframework.boot.test.mock.mockito.MockReset org.springframework.boot.test.mock.mockito.MockReset ( ) { return this . org.springframework.boot.test.mock.mockito.MockReset ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MethodInvocationReport org.springframework.boot.test.mock.mockito.MethodInvocationReport ) {		}  <METHOD_END>
