<METHOD_START> @ Test public void void ( ) org.springframework.boot.actuate.health.JMSException { ConnectionMetaData org.springframework.boot.actuate.health.ConnectionMetaData = mock ( ConnectionMetaData .class ) ; given ( org.springframework.boot.actuate.health.ConnectionMetaData . getJMSProviderName ( ) ) . willReturn ( STRING ) ; Connection org.springframework.boot.actuate.health.Connection = mock ( Connection .class ) ; given ( org.springframework.boot.actuate.health.Connection . getMetaData ( ) ) . willReturn ( org.springframework.boot.actuate.health.ConnectionMetaData ) ; ConnectionFactory org.springframework.boot.actuate.health.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.Connection ) ; JmsHealthIndicator org.springframework.boot.actuate.health.JmsHealthIndicator = new JmsHealthIndicator ( org.springframework.boot.actuate.health.ConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.JmsHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . UP ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.boot.actuate.health.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.actuate.health.JMSException { ConnectionFactory org.springframework.boot.actuate.health.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.ConnectionFactory . createConnection ( ) ) . willThrow ( new JMSException ( STRING , STRING ) ) ; JmsHealthIndicator org.springframework.boot.actuate.health.JmsHealthIndicator = new JmsHealthIndicator ( org.springframework.boot.actuate.health.ConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.JmsHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.actuate.health.JMSException { ConnectionMetaData org.springframework.boot.actuate.health.ConnectionMetaData = mock ( ConnectionMetaData .class ) ; given ( org.springframework.boot.actuate.health.ConnectionMetaData . getJMSProviderName ( ) ) . willThrow ( new JMSException ( STRING , STRING ) ) ; Connection org.springframework.boot.actuate.health.Connection = mock ( Connection .class ) ; given ( org.springframework.boot.actuate.health.Connection . getMetaData ( ) ) . willReturn ( org.springframework.boot.actuate.health.ConnectionMetaData ) ; ConnectionFactory org.springframework.boot.actuate.health.ConnectionFactory = mock ( ConnectionFactory .class ) ; given ( org.springframework.boot.actuate.health.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.Connection ) ; JmsHealthIndicator org.springframework.boot.actuate.health.JmsHealthIndicator = new JmsHealthIndicator ( org.springframework.boot.actuate.health.ConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.JmsHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; verify ( org.springframework.boot.actuate.health.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.actuate.health.JMSException { ConnectionFactory org.springframework.boot.actuate.health.ConnectionFactory = mock ( ConnectionFactory .class ) ; ConnectionMetaData org.springframework.boot.actuate.health.ConnectionMetaData = mock ( ConnectionMetaData .class ) ; given ( org.springframework.boot.actuate.health.ConnectionMetaData . getJMSProviderName ( ) ) . willReturn ( STRING ) ; Connection org.springframework.boot.actuate.health.Connection = mock ( Connection .class ) ; given ( org.springframework.boot.actuate.health.Connection . getMetaData ( ) ) . willReturn ( org.springframework.boot.actuate.health.ConnectionMetaData ) ; willThrow ( new JMSException ( STRING , STRING ) ) . given ( org.springframework.boot.actuate.health.Connection ) . start ( ) ; given ( org.springframework.boot.actuate.health.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.boot.actuate.health.Connection ) ; JmsHealthIndicator org.springframework.boot.actuate.health.JmsHealthIndicator = new JmsHealthIndicator ( org.springframework.boot.actuate.health.ConnectionFactory ) ; Health org.springframework.boot.actuate.health.Health = org.springframework.boot.actuate.health.JmsHealthIndicator . health ( ) ; assertThat ( org.springframework.boot.actuate.health.Health . getStatus ( ) ) . isEqualTo ( Status . DOWN ) ; assertThat ( org.springframework.boot.actuate.health.Health . getDetails ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
