<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.InitDestroyBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.context.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.InitDestroyBeanPostProcessor .class ) ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( CommonAnnotationBeanPostProcessor .class ) ) ; org.springframework.context.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean .class ) ) ; org.springframework.context.annotation.GenericApplicationContext . refresh ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) org.springframework.context.annotation.GenericApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; org.springframework.context.annotation.GenericApplicationContext . close ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; InitDestroyAnnotationBeanPostProcessor org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor = new InitDestroyAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor . setInitAnnotationType ( javax.annotation.PostConstruct .class ) ; org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor . setDestroyAnnotationType ( javax.annotation.PreDestroy .class ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NullFactory .class ) ; org.springframework.context.annotation.RootBeanDefinition . setFactoryMethodName ( STRING ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; assertNull ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = ( CommonAnnotationBeanPostProcessor ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = new org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . postProcessBeforeDestruction ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean , STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { InitDestroyAnnotationBeanPostProcessor org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor = new InitDestroyAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor . setInitAnnotationType ( javax.annotation.PostConstruct .class ) ; org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor . setDestroyAnnotationType ( javax.annotation.PreDestroy .class ) ; InitDestroyAnnotationBeanPostProcessor org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor = ( InitDestroyAnnotationBeanPostProcessor ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean = new org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ( ) ; org.springframework.context.annotation.InitDestroyAnnotationBeanPostProcessor . postProcessBeforeDestruction ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean , STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setResourceFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setResourceFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; TestBean org.springframework.context.annotation.TestBean = org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ; TestBean org.springframework.context.annotation.TestBean = org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ; assertNotNull ( org.springframework.context.annotation.TestBean ) ; assertNotNull ( org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) ; assertNotSame ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) , org.springframework.context.annotation.TestBean ) ; assertNotSame ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) , org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroyBean ( STRING , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( BeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerResolvableDependency ( INestedTestBean .class , new ObjectFactory < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.context.annotation.BeansException { return new NestedTestBean ( ) ; } } ) ; PropertyPlaceholderConfigurer org.springframework.context.annotation.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; INestedTestBean org.springframework.context.annotation.INestedTestBean = org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.INestedTestBean ( ) ; assertNotNull ( org.springframework.context.annotation.INestedTestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotSame ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean ) ; assertNotSame ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.INestedTestBean ( ) , org.springframework.context.annotation.INestedTestBean ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getDependenciesForBean ( STRING ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.context.annotation.BeansException { return new NestedTestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; NestedTestBean org.springframework.context.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.NestedTestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( NUMBER , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean . int ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertSame ( NUMBER , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.DefaultMethodResourceInjectionBean . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setResourceFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setResourceFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; SimpleJndiBeanFactory org.springframework.context.annotation.SimpleJndiBeanFactory = new SimpleJndiBeanFactory ( ) ; ExpectedLookupTemplate org.springframework.context.annotation.ExpectedLookupTemplate = new ExpectedLookupTemplate ( ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.ExpectedLookupTemplate . addObject ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.ExpectedLookupTemplate . addObject ( STRING , org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.SimpleJndiBeanFactory . setJndiTemplate ( org.springframework.context.annotation.ExpectedLookupTemplate ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setResourceFactory ( org.springframework.context.annotation.SimpleJndiBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.context.annotation.DefaultListableBeanFactory ) ; PropertyPlaceholderConfigurer org.springframework.context.annotation.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ConvertedResourceInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; NestedTestBean org.springframework.context.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , STRING ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.NestedTestBean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.BeanFactory ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean . org.springframework.context.annotation.INestedTestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ConvertedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ConvertedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ConvertedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( NUMBER , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ConvertedResourceInjectionBean . int ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.context.annotation.DefaultListableBeanFactory ) ; PropertyPlaceholderConfigurer org.springframework.context.annotation.PropertyPlaceholderConfigurer = new PropertyPlaceholderConfigurer ( ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . setProperties ( java.util.Properties ) ; org.springframework.context.annotation.PropertyPlaceholderConfigurer . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean .class ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.context.annotation.TestBean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NamedResourceInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; NestedTestBean org.springframework.context.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.NestedTestBean ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedResourceInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.NonPublicResourceInjectionBean<org.springframework.context.annotation.ITestBean> . org.springframework.context.annotation.BeanFactory ) ; try { org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException = ( NoSuchBeanDefinitionException ) org.springframework.context.annotation.BeanCreationException . getRootCause ( ) ; assertEquals ( STRING , org.springframework.context.annotation.NoSuchBeanDefinitionException . getBeanName ( ) ) ; } org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerResolvableDependency ( BeanFactory .class , org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean .class ) ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; TestBean org.springframework.context.annotation.TestBean = new TestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.TestBean ) ; NestedTestBean org.springframework.context.annotation.NestedTestBean = new NestedTestBean ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.context.annotation.NestedTestBean ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerAlias ( STRING , STRING ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.TestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.ITestBean ( ) ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.NestedTestBean , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.INestedTestBean ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory , org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ExtendedEjbInjectionBean . org.springframework.context.annotation.BeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . destroySingletons ( ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean . boolean ) ; assertTrue ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.ResourceInjectionBean . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceFieldInjectionBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceFieldInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceFieldInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceFieldInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceFieldInjectionBean . org.springframework.context.annotation.ITestBean . setName ( STRING ) ; assertTrue ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceMethodInjectionBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceMethodInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceMethodInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceMethodInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceMethodInjectionBean . org.springframework.context.annotation.ITestBean . setName ( STRING ) ; assertTrue ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; CommonAnnotationBeanPostProcessor org.springframework.context.annotation.CommonAnnotationBeanPostProcessor = new CommonAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceCglibInjectionBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceCglibInjectionBean org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceCglibInjectionBean = ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceCglibInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.LazyResourceCglibInjectionBean . org.springframework.context.annotation.TestBean . setName ( STRING ) ; assertTrue ( org.springframework.context.annotation.DefaultListableBeanFactory . containsSingleton ( STRING ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.TestBean . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct private void void ( ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy private void void ( ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { if ( java.lang.Object instanceof org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) { assertFalse ( ( ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) java.lang.Object ) . boolean ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { if ( java.lang.Object instanceof org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) { assertTrue ( ( ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) java.lang.Object ) . boolean ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.context.annotation.BeansException { if ( java.lang.Object instanceof org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) { assertFalse ( ( ( org.springframework.context.annotation.CommonAnnotationBeanPostProcessorTests.AnnotatedInitDestroyBean ) java.lang.Object ) . boolean ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct protected void void ( ) { if ( this . org.springframework.context.annotation.TestBean == null || this . org.springframework.context.annotation.TestBean == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( ! this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct private void void ( ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy protected void void ( ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy private void void ( ) { if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . boolean ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource public void void ( TestBean org.springframework.context.annotation.TestBean ) { if ( this . org.springframework.context.annotation.TestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.Resource public void void ( TestBean org.springframework.context.annotation.TestBean ) { super. void ( org.springframework.context.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource ( java.lang.String = STRING , java.lang.Class<?> = ITestBean .class ) private void void ( B B ) { if ( this . B != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . B = B ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource public void void ( INestedTestBean org.springframework.context.annotation.INestedTestBean ) { if ( this . org.springframework.context.annotation.INestedTestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.INestedTestBean = org.springframework.context.annotation.INestedTestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ITestBean org.springframework.context.annotation.ITestBean ( ) { return org.springframework.context.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public B B ( ) { return B ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.INestedTestBean org.springframework.context.annotation.INestedTestBean ( ) { return org.springframework.context.annotation.INestedTestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.INestedTestBean org.springframework.context.annotation.INestedTestBean ( ) { return org.springframework.context.annotation.INestedTestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.PostConstruct protected void void ( ) { if ( this . org.springframework.context.annotation.ITestBean == null || this . B == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.PreDestroy protected void void ( ) { super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource void void ( TestBean org.springframework.context.annotation.TestBean );  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource default void void ( INestedTestBean org.springframework.context.annotation.INestedTestBean ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct default void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PreDestroy default void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { int ++ ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ EJB public void void ( TestBean org.springframework.context.annotation.TestBean ) { super. void ( org.springframework.context.annotation.TestBean ) ; }  <METHOD_END>
<METHOD_START> @ EJB ( beanName = STRING , beanInterface = ITestBean .class ) private void void ( ITestBean org.springframework.context.annotation.ITestBean ) { if ( this . org.springframework.context.annotation.ITestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.ITestBean = org.springframework.context.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> @ EJB public void void ( INestedTestBean org.springframework.context.annotation.INestedTestBean ) { if ( this . org.springframework.context.annotation.INestedTestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.INestedTestBean = org.springframework.context.annotation.INestedTestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ITestBean org.springframework.context.annotation.ITestBean ( ) { return org.springframework.context.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ITestBean org.springframework.context.annotation.ITestBean ( ) { return org.springframework.context.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.PostConstruct protected void void ( ) { if ( this . org.springframework.context.annotation.ITestBean == null || this . org.springframework.context.annotation.ITestBean == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ javax.annotation.PreDestroy protected void void ( ) { super. void ( ) ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource @ Lazy public void void ( ITestBean org.springframework.context.annotation.ITestBean ) { this . org.springframework.context.annotation.ITestBean = org.springframework.context.annotation.ITestBean ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.Resource @ Lazy public void void ( TestBean org.springframework.context.annotation.TestBean ) { this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
