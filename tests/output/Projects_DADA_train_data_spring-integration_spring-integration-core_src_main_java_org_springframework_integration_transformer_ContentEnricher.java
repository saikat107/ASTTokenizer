<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> ) { java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> = new java.util.HashMap<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> < java.lang.String , Expression > java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> : java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> . getKey ( ) ; Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> . getValue ( ) ; java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . put ( this . org.springframework.integration.transformer.SpelExpressionParser . parseExpression ( java.lang.String ) , org.springframework.integration.transformer.Expression ) ; } this . java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> = java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> ) { this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> = new java.util.HashMap<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> ) { Assert . notEmpty ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . keySet ( ) . toArray ( ) , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . values ( ) . toArray ( ) , STRING ) ; java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> = new java.util.HashMap<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > ( java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> < java.lang.String , Expression > java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> : java.util.Map<java.lang.String,org.springframework.integration.transformer.Expression> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> . getKey ( ) ; Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.Expression> . getValue ( ) ; java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . put ( this . org.springframework.integration.transformer.SpelExpressionParser . parseExpression ( java.lang.String ) , org.springframework.integration.transformer.Expression ) ; } this . java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> = java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> ) { Assert . notEmpty ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . keySet ( ) . toArray ( ) , STRING ) ; Assert . noNullElements ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . values ( ) . toArray ( ) , STRING ) ; this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> = new java.util.HashMap<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > ( java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transformer.MessageChannel ) { this . org.springframework.integration.transformer.MessageChannel = org.springframework.integration.transformer.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transformer.MessageChannel ) { this . org.springframework.integration.transformer.MessageChannel = org.springframework.integration.transformer.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.transformer.MessageChannel ) { this . org.springframework.integration.transformer.MessageChannel = org.springframework.integration.transformer.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { Assert . notNull ( java.lang.Long , STRING ) ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { Assert . notNull ( java.lang.Long , STRING ) ; this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.transformer.Expression ) { this . org.springframework.integration.transformer.Expression = org.springframework.integration.transformer.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.integration.transformer.EvaluationContext ) { this . org.springframework.integration.transformer.EvaluationContext = org.springframework.integration.transformer.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.transformer.MessageChannel != null ) , STRING ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.transformer.MessageChannel != null ) , STRING ) ; Assert . state ( ! ( this . java.lang.String != null && this . org.springframework.integration.transformer.MessageChannel != null ) , STRING ) ; if ( this . org.springframework.integration.transformer.MessageChannel != null || this . java.lang.String != null ) { Assert . state ( this . org.springframework.integration.transformer.MessageChannel != null || this . java.lang.String != null , STRING ) ; } if ( this . org.springframework.integration.transformer.MessageChannel != null || this . java.lang.String != null ) { Assert . state ( this . org.springframework.integration.transformer.MessageChannel != null || this . java.lang.String != null , STRING ) ; } if ( this . org.springframework.integration.transformer.MessageChannel != null || this . java.lang.String != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway = new org.springframework.integration.transformer.ContentEnricher.Gateway ( ) ; this . org.springframework.integration.transformer.ContentEnricher.Gateway . setRequestChannel ( this . org.springframework.integration.transformer.MessageChannel ) ; if ( this . java.lang.String != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setRequestChannelName ( this . java.lang.String ) ; } if ( this . java.lang.Long != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setRequestTimeout ( this . java.lang.Long ) ; } if ( this . java.lang.Long != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setReplyTimeout ( this . java.lang.Long ) ; } this . org.springframework.integration.transformer.ContentEnricher.Gateway . setReplyChannel ( this . org.springframework.integration.transformer.MessageChannel ) ; if ( this . java.lang.String != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setReplyChannelName ( this . java.lang.String ) ; } this . org.springframework.integration.transformer.ContentEnricher.Gateway . setErrorChannel ( this . org.springframework.integration.transformer.MessageChannel ) ; if ( this . java.lang.String != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setErrorChannelName ( this . java.lang.String ) ; } if ( this . getBeanFactory ( ) != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . setBeanFactory ( this . getBeanFactory ( ) ) ; } this . org.springframework.integration.transformer.ContentEnricher.Gateway . afterPropertiesSet ( ) ; } if ( this . org.springframework.integration.transformer.EvaluationContext == null ) { this . org.springframework.integration.transformer.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } StandardEvaluationContext org.springframework.integration.transformer.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; org.springframework.integration.transformer.StandardEvaluationContext . setBeanResolver ( null ) ; this . org.springframework.integration.transformer.EvaluationContext = org.springframework.integration.transformer.StandardEvaluationContext ; if ( this . getBeanFactory ( ) != null ) { for ( HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> : this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . values ( ) ) { if ( org.springframework.integration.transformer.HeaderValueMessageProcessor<> instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) org.springframework.integration.transformer.HeaderValueMessageProcessor<> ) . setBeanFactory ( getBeanFactory ( ) ) ; } } for ( HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> : this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . values ( ) ) { if ( org.springframework.integration.transformer.HeaderValueMessageProcessor<> instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) org.springframework.integration.transformer.HeaderValueMessageProcessor<> ) . setBeanFactory ( getBeanFactory ( ) ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.transformer.Message<?> ) { final java.lang.Object java.lang.Object = org.springframework.integration.transformer.Message<> . getPayload ( ) ; final java.lang.Object java.lang.Object ; if ( java.lang.Object instanceof java.lang.Cloneable && this . boolean ) { try { java.lang.reflect.Method java.lang.reflect.Method = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.reflect.Method ( STRING ) ; java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.transformer.Message<> , STRING , java.lang.Exception ) ; } } else { java.lang.Object = java.lang.Object ; } final Message < ? > org.springframework.integration.transformer.Message<?> ; if ( this . org.springframework.integration.transformer.Expression == null ) { org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Message<> ; } else { final java.lang.Object java.lang.Object = this . org.springframework.integration.transformer.Expression . getValue ( this . org.springframework.integration.transformer.EvaluationContext , org.springframework.integration.transformer.Message<> ) ; org.springframework.integration.transformer.Message<?> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( org.springframework.integration.transformer.Message<> . getHeaders ( ) ) . build ( ) ; } final Message < ? > org.springframework.integration.transformer.Message<?> ; if ( this . org.springframework.integration.transformer.ContentEnricher.Gateway == null ) { org.springframework.integration.transformer.Message<?> = org.springframework.integration.transformer.Message<> ; } else { org.springframework.integration.transformer.Message<?> = this . org.springframework.integration.transformer.ContentEnricher.Gateway . org.springframework.integration.transformer.Message<?> ( org.springframework.integration.transformer.Message<> ) ; if ( org.springframework.integration.transformer.Message<> == null ) { if ( this . java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . isEmpty ( ) && this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . isEmpty ( ) ) { return null ; } for ( java.util.Map . java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> : this . java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . entrySet ( ) ) { Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . getKey ( ) ; Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Expression . getValue ( this . org.springframework.integration.transformer.EvaluationContext , org.springframework.integration.transformer.Message<> ) ; org.springframework.integration.transformer.Expression . setValue ( this . org.springframework.integration.transformer.EvaluationContext , java.lang.Object , java.lang.Object ) ; } if ( this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . isEmpty ( ) ) { return java.lang.Object ; } else { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> : this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . getKey ( ) ; HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . getValue ( ) ; java.lang.Boolean java.lang.Boolean = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . isOverwrite ( ) ; java.lang.Boolean = java.lang.Boolean != null ? java.lang.Boolean : true ; if ( java.lang.Boolean || ! org.springframework.integration.transformer.Message<> . getHeaders ( ) . containsKey ( java.lang.String ) ) { java.lang.Object java.lang.Object = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . processMessage ( org.springframework.integration.transformer.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } return this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; } } } for ( java.util.Map . java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> < Expression , Expression > java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> : this . java.util.Map<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . entrySet ( ) ) { Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . getKey ( ) ; Expression org.springframework.integration.transformer.Expression = java.util.Map.Entry<org.springframework.integration.transformer.Expression,org.springframework.integration.transformer.Expression> . getValue ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.transformer.Expression . getValue ( this . org.springframework.integration.transformer.EvaluationContext , org.springframework.integration.transformer.Message<> ) ; org.springframework.integration.transformer.Expression . setValue ( this . org.springframework.integration.transformer.EvaluationContext , java.lang.Object , java.lang.Object ) ; } if ( this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . isEmpty ( ) ) { return java.lang.Object ; } else { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . size ( ) ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> < java.lang.String , HeaderValueMessageProcessor < ? > > java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> : this . java.util.Map<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . entrySet ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . getKey ( ) ; HeaderValueMessageProcessor < ? > org.springframework.integration.transformer.HeaderValueMessageProcessor<?> = java.util.Map.Entry<java.lang.String,org.springframework.integration.transformer.HeaderValueMessageProcessor<?>> . getValue ( ) ; java.lang.Boolean java.lang.Boolean = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . isOverwrite ( ) ; java.lang.Boolean = java.lang.Boolean != null ? java.lang.Boolean : true ; if ( java.lang.Boolean || ! org.springframework.integration.transformer.Message<> . getHeaders ( ) . containsKey ( java.lang.String ) ) { java.lang.Object java.lang.Object = org.springframework.integration.transformer.HeaderValueMessageProcessor<> . processMessage ( org.springframework.integration.transformer.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , java.lang.Object ) ; } } return getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.transformer.ContentEnricher.Gateway != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.transformer.ContentEnricher.Gateway != null ) { this . org.springframework.integration.transformer.ContentEnricher.Gateway . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.transformer.ContentEnricher.Gateway == null || this . org.springframework.integration.transformer.ContentEnricher.Gateway . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.transformer.Message<?> < ? > org.springframework.integration.transformer.Message<?> ( java.lang.Object java.lang.Object ) { return super. sendAndReceiveMessage ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
