<METHOD_START> public void ( ) { this( Validation . buildDefaultValidatorFactory ( ) ); }  <METHOD_END>
<METHOD_START> public void ( ValidatorFactory org.springframework.validation.beanvalidation.ValidatorFactory ) { this( org.springframework.validation.beanvalidation.ValidatorFactory . getValidator ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Validator org.springframework.validation.beanvalidation.Validator ) { this . org.springframework.validation.beanvalidation.Validator = org.springframework.validation.beanvalidation.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.validation.beanvalidation.MethodInvocation ) throws java.lang.Throwable { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.Class<?>[] ( org.springframework.validation.beanvalidation.MethodInvocation ) ; ExecutableValidator org.springframework.validation.beanvalidation.ExecutableValidator = this . org.springframework.validation.beanvalidation.Validator . forExecutables ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.validation.beanvalidation.MethodInvocation . getMethod ( ) ; java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> < ConstraintViolation < java.lang.Object > > java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> ; try { java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> = org.springframework.validation.beanvalidation.ExecutableValidator . validateParameters ( org.springframework.validation.beanvalidation.MethodInvocation . getThis ( ) , java.lang.reflect.Method , org.springframework.validation.beanvalidation.MethodInvocation . getArguments ( ) , java.lang.Class<?>[] ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { java.lang.reflect.Method = BridgeMethodResolver . findBridgedMethod ( ClassUtils . getMostSpecificMethod ( org.springframework.validation.beanvalidation.MethodInvocation . getMethod ( ) , org.springframework.validation.beanvalidation.MethodInvocation . getThis ( ) . getClass ( ) ) ) ; java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> = org.springframework.validation.beanvalidation.ExecutableValidator . validateParameters ( org.springframework.validation.beanvalidation.MethodInvocation . getThis ( ) , java.lang.reflect.Method , org.springframework.validation.beanvalidation.MethodInvocation . getArguments ( ) , java.lang.Class<?>[] ) ; } if ( ! java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> . isEmpty ( ) ) { throw new ConstraintViolationException ( java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> ) ; } java.lang.Object java.lang.Object = org.springframework.validation.beanvalidation.MethodInvocation . proceed ( ) ; java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> = org.springframework.validation.beanvalidation.ExecutableValidator . validateReturnValue ( org.springframework.validation.beanvalidation.MethodInvocation . getThis ( ) , java.lang.reflect.Method , java.lang.Object , java.lang.Class<?>[] ) ; if ( ! java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> . isEmpty ( ) ) { throw new ConstraintViolationException ( java.util.Set<org.springframework.validation.beanvalidation.ConstraintViolation<java.lang.Object>> ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( MethodInvocation org.springframework.validation.beanvalidation.MethodInvocation ) { Validated org.springframework.validation.beanvalidation.Validated = AnnotationUtils . findAnnotation ( org.springframework.validation.beanvalidation.MethodInvocation . getMethod ( ) , Validated .class ) ; if ( org.springframework.validation.beanvalidation.Validated == null ) { org.springframework.validation.beanvalidation.Validated = AnnotationUtils . findAnnotation ( org.springframework.validation.beanvalidation.MethodInvocation . getThis ( ) . getClass ( ) , Validated .class ) ; } return ( org.springframework.validation.beanvalidation.Validated != null ? org.springframework.validation.beanvalidation.Validated . value ( ) : new java.lang.Class<?> < ? > [ NUMBER ] ) ; }  <METHOD_END>
