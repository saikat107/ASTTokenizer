<METHOD_START> public void ( java.lang.Iterable<org.springframework.data.gemfire.mapping.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.mapping.Region<?,?>> , MappingContext < ? extends GemfirePersistentEntity < ? > , ? > org.springframework.data.gemfire.mapping.MappingContext<? extends org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?>,?> ) { Assert . notNull ( java.lang.Iterable<org.springframework.data.gemfire.mapping.Region<?,?>> , STRING ) ; Assert . notNull ( org.springframework.data.gemfire.mapping.MappingContext<,> , STRING ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> < java.lang.String , Region < ? , ? > > java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> = new java.util.HashMap<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> <> ( ) ; for ( Region < ? , ? > org.springframework.data.gemfire.mapping.Region<?,?> : java.lang.Iterable<org.springframework.data.gemfire.mapping.Region<?,?>> ) { java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> . put ( org.springframework.data.gemfire.mapping.Region<,> . getName ( ) , org.springframework.data.gemfire.mapping.Region<,> ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> . put ( org.springframework.data.gemfire.mapping.Region<,> . getFullPath ( ) , org.springframework.data.gemfire.mapping.Region<,> ) ; } this . java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> = java.util.Collections . java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> ( java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> ) ; this . org.springframework.data.gemfire.mapping.MappingContext<? extends org.springframework.data.gemfire.mapping.GemfirePersistentEntity<?>,?> = org.springframework.data.gemfire.mapping.MappingContext<,> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < T > org.springframework.data.gemfire.mapping.Region<?,T> < ? , T > org.springframework.data.gemfire.mapping.Region<?,T> ( java.lang.Class<T> < T > java.lang.Class<T> ) { Assert . notNull ( java.lang.Class<T> , STRING ) ; java.lang.String java.lang.String = this . org.springframework.data.gemfire.mapping.MappingContext<,> . getPersistentEntity ( java.lang.Class<T> ) . map ( ( entity ) -> entity . getRegionName ( ) ) . orElseGet ( java.lang.Class<T> :: java.lang.String ) ; return ( Region < ? , T > ) this . java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public < S , T > org.springframework.data.gemfire.mapping.Region<S,T> < S , T > org.springframework.data.gemfire.mapping.Region<S,T> ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; return ( Region < S , T > ) this . java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.data.gemfire.mapping.Region<?,?>> < Region < ? , ? > > java.util.Iterator<org.springframework.data.gemfire.mapping.Region<?,?>> ( ) { return this . java.util.Map<java.lang.String,org.springframework.data.gemfire.mapping.Region<?,?>> . values ( ) . iterator ( ) ; }  <METHOD_END>
