<METHOD_START> @ Test public void void ( ) { void ( STRING , STRING ) ; void ( STRING , STRING ) ; void ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { new ContextPathCompositeHandler ( java.util.Collections . java.util.Map<java.lang.String,org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler> ( java.lang.String , new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ) ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( java.lang.String , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> = new java.util.HashMap<java.lang.String,org.springframework.http.server.reactive.HttpHandler> <> ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; org.springframework.http.server.reactive.ServerHttpResponse ( STRING , java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) ; void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , STRING ) ; void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> = new java.util.HashMap<java.lang.String,org.springframework.http.server.reactive.HttpHandler> <> ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; org.springframework.http.server.reactive.ServerHttpResponse ( STRING , java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) ; void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , STRING ) ; void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerHttpRequest org.springframework.http.server.reactive.MockServerHttpRequest = MockServerHttpRequest . get ( STRING ) . contextPath ( STRING ) . build ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> = java.util.Collections . java.util.Map<java.lang.String,org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler> ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; new ContextPathCompositeHandler ( java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) . handle ( org.springframework.http.server.reactive.MockServerHttpRequest , new MockServerHttpResponse ( ) ) ; assertTrue ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler . boolean ( ) ) ; assertEquals ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler . org.springframework.http.server.reactive.ServerHttpRequest ( ) . getContextPath ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler = new org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> = new java.util.HashMap<java.lang.String,org.springframework.http.server.reactive.HttpHandler> <> ( ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> . put ( STRING , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse = org.springframework.http.server.reactive.ServerHttpResponse ( STRING , java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) ; void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ) ; assertEquals ( HttpStatus . NOT_FOUND , org.springframework.http.server.reactive.ServerHttpResponse . getStatusCode ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ( java.lang.String java.lang.String , java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> < java.lang.String , HttpHandler > java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) { ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest = MockServerHttpRequest . get ( java.lang.String ) . build ( ) ; ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse = new MockServerHttpResponse ( ) ; new ContextPathCompositeHandler ( java.util.Map<java.lang.String,org.springframework.http.server.reactive.HttpHandler> ) . handle ( org.springframework.http.server.reactive.ServerHttpRequest , org.springframework.http.server.reactive.ServerHttpResponse ) ; return org.springframework.http.server.reactive.ServerHttpResponse ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler , java.lang.String java.lang.String ) { assertTrue ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler . boolean ( ) ) ; assertEquals ( java.lang.String , org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler . org.springframework.http.server.reactive.ServerHttpRequest ( ) . getContextPath ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler ... org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler[] ) { java.util.Arrays . java.util.stream.Stream<org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler> ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler[] ) . void ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler -> assertFalse ( org.springframework.http.server.reactive.ContextPathCompositeHandlerTests.TestHttpHandler . boolean ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.http.server.reactive.ServerHttpRequest != null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.server.reactive.ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ( ) { return this . org.springframework.http.server.reactive.ServerHttpRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { this . org.springframework.http.server.reactive.ServerHttpRequest = org.springframework.http.server.reactive.ServerHttpRequest ; return Mono . empty ( ) ; }  <METHOD_END>
