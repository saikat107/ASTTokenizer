<METHOD_START> public void void ( AmqpHeaderMapper org.springframework.integration.amqp.outbound.AmqpHeaderMapper ) { Assert . notNull ( org.springframework.integration.amqp.outbound.AmqpHeaderMapper , STRING ) ; this . org.springframework.integration.amqp.outbound.AmqpHeaderMapper = org.springframework.integration.amqp.outbound.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.amqp.outbound.Expression ) { this . org.springframework.integration.amqp.outbound.Expression = org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.amqp.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.amqp.outbound.Expression ) { this . org.springframework.integration.amqp.outbound.Expression = org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.amqp.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.amqp.outbound.Expression ) { this . org.springframework.integration.amqp.outbound.Expression = org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . org.springframework.integration.amqp.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ) { this . org.springframework.integration.amqp.outbound.MessageChannel = org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ) { this . org.springframework.integration.amqp.outbound.MessageChannel = org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ) { this . org.springframework.integration.amqp.outbound.MessageChannel = org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( MessageDeliveryMode org.springframework.integration.amqp.outbound.MessageDeliveryMode ) { this . org.springframework.integration.amqp.outbound.MessageDeliveryMode = org.springframework.integration.amqp.outbound.MessageDeliveryMode ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . org.springframework.integration.amqp.outbound.Expression = new ValueExpression <> ( int ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.amqp.outbound.Expression ) { this . org.springframework.integration.amqp.outbound.Expression = org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { this . org.springframework.integration.amqp.outbound.Expression = null ; } else { this . org.springframework.integration.amqp.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( ConnectionFactory org.springframework.integration.amqp.outbound.ConnectionFactory ) { this . org.springframework.integration.amqp.outbound.ConnectionFactory = org.springframework.integration.amqp.outbound.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.Expression org.springframework.integration.amqp.outbound.Expression ( ) { return this . org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.Expression org.springframework.integration.amqp.outbound.Expression ( ) { return this . org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> < java.lang.String > org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> ( ) { return this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> < java.lang.String > org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> ( ) { return this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.AmqpHeaderMapper org.springframework.integration.amqp.outbound.AmqpHeaderMapper ( ) { return this . org.springframework.integration.amqp.outbound.AmqpHeaderMapper ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.Expression org.springframework.integration.amqp.outbound.Expression ( ) { return this . org.springframework.integration.amqp.outbound.Expression ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> < java.lang.Object > org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> ( ) { return this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ( ) { return this . org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ( ) { return this . org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.MessageChannel org.springframework.integration.amqp.outbound.MessageChannel ( ) { return this . org.springframework.integration.amqp.outbound.MessageChannel ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.MessageDeliveryMode org.springframework.integration.amqp.outbound.MessageDeliveryMode ( ) { return this . org.springframework.integration.amqp.outbound.MessageDeliveryMode ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final void void ( ) { Assert . state ( this . org.springframework.integration.amqp.outbound.Expression == null || this . java.lang.String == null , STRING ) ; BeanFactory org.springframework.integration.amqp.outbound.BeanFactory = getBeanFactory ( ) ; if ( this . org.springframework.integration.amqp.outbound.Expression != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor < java.lang.String > ( this . org.springframework.integration.amqp.outbound.Expression , java.lang.String .class ) ; if ( org.springframework.integration.amqp.outbound.BeanFactory != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> . setBeanFactory ( org.springframework.integration.amqp.outbound.BeanFactory ) ; } } Assert . state ( this . org.springframework.integration.amqp.outbound.Expression == null || this . java.lang.String == null , STRING ) ; if ( this . org.springframework.integration.amqp.outbound.Expression != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> = new ExpressionEvaluatingMessageProcessor < java.lang.String > ( this . org.springframework.integration.amqp.outbound.Expression , java.lang.String .class ) ; if ( org.springframework.integration.amqp.outbound.BeanFactory != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> . setBeanFactory ( org.springframework.integration.amqp.outbound.BeanFactory ) ; } } if ( this . org.springframework.integration.amqp.outbound.Expression != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( this . org.springframework.integration.amqp.outbound.Expression , java.lang.Object .class ) ; if ( org.springframework.integration.amqp.outbound.BeanFactory != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> . setBeanFactory ( org.springframework.integration.amqp.outbound.BeanFactory ) ; } } else { NullChannel org.springframework.integration.amqp.outbound.NullChannel = extractTypeIfPossible ( this . org.springframework.integration.amqp.outbound.MessageChannel , NullChannel .class ) ; Assert . state ( this . org.springframework.integration.amqp.outbound.MessageChannel == null || org.springframework.integration.amqp.outbound.NullChannel != null , STRING ) ; org.springframework.integration.amqp.outbound.NullChannel = extractTypeIfPossible ( this . org.springframework.integration.amqp.outbound.MessageChannel , NullChannel .class ) ; Assert . state ( this . org.springframework.integration.amqp.outbound.MessageChannel == null || org.springframework.integration.amqp.outbound.NullChannel != null , STRING ) ; } if ( this . org.springframework.integration.amqp.outbound.Expression != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Integer> = new ExpressionEvaluatingMessageProcessor < java.lang.Integer > ( this . org.springframework.integration.amqp.outbound.Expression , java.lang.Integer .class ) ; if ( org.springframework.integration.amqp.outbound.BeanFactory != null ) { this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Integer> . setBeanFactory ( org.springframework.integration.amqp.outbound.BeanFactory ) ; } } void ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( ! this . boolean ) { if ( ! this . boolean && this . org.springframework.integration.amqp.outbound.ConnectionFactory != null ) { try { Connection org.springframework.integration.amqp.outbound.Connection = this . org.springframework.integration.amqp.outbound.ConnectionFactory . createConnection ( ) ; if ( org.springframework.integration.amqp.outbound.Connection != null ) { org.springframework.integration.amqp.outbound.Connection . close ( ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { logger . error ( STRING , java.lang.RuntimeException ) ; } } void ( ) ; this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( this . boolean ) { void ( ) ; } this . boolean = false ; }  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> protected void void ( ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.CorrelationData org.springframework.integration.amqp.outbound.CorrelationData ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { CorrelationData org.springframework.integration.amqp.outbound.CorrelationData = null ; if ( this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Object> . processMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof CorrelationData ) { org.springframework.integration.amqp.outbound.CorrelationData = ( CorrelationData ) java.lang.Object ; } else { org.springframework.integration.amqp.outbound.CorrelationData = new org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint.CorrelationDataWrapper ( org.springframework.integration.amqp.outbound.Message<> . getHeaders ( ) . getId ( ) . toString ( ) , java.lang.Object ) ; } } } return org.springframework.integration.amqp.outbound.CorrelationData ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { java.lang.String java.lang.String = this . java.lang.String ; if ( this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> != null ) { java.lang.String = this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> ) { java.lang.String java.lang.String = this . java.lang.String ; if ( this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> != null ) { java.lang.String = this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.amqp.outbound.Message<> ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( Message < ? > org.springframework.integration.amqp.outbound.Message<?> , org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ) { if ( this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Integer> != null ) { org.springframework.amqp.core.Message . getMessageProperties ( ) . setDelay ( this . org.springframework.integration.amqp.outbound.ExpressionEvaluatingMessageProcessor<java.lang.Integer> . processMessage ( org.springframework.integration.amqp.outbound.Message<> ) ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> ( MessageConverter org.springframework.integration.amqp.outbound.MessageConverter , org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.outbound.MessageConverter . fromMessage ( org.springframework.amqp.core.Message ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> = ( java.lang.Object instanceof Message ) ? this . getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) : this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.amqp.outbound.AmqpHeaderMapper ( ) . toHeadersFromReply ( org.springframework.amqp.core.Message . getMessageProperties ( ) ) ; org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,> ) ; return org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.amqp.outbound.Message<?> < ? > org.springframework.integration.amqp.outbound.Message<?> ( org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message , int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , MessageConverter org.springframework.integration.amqp.outbound.MessageConverter ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.outbound.MessageConverter . fromMessage ( org.springframework.amqp.core.Message ) ; AbstractIntegrationMessageBuilder < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> = ( java.lang.Object instanceof Message ) ? this . getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) : this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = org.springframework.integration.amqp.outbound.AmqpHeaderMapper ( ) . toHeadersFromReply ( org.springframework.amqp.core.Message . getMessageProperties ( ) ) ; org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,> ) . setHeader ( AmqpHeaders . RETURN_REPLY_CODE , int ) . setHeader ( AmqpHeaders . RETURN_REPLY_TEXT , java.lang.String ) . setHeader ( AmqpHeaders . RETURN_EXCHANGE , java.lang.String ) . setHeader ( AmqpHeaders . RETURN_ROUTING_KEY , java.lang.String ) ; return org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> . build ( ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CorrelationData org.springframework.integration.amqp.outbound.CorrelationData , boolean boolean , java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = org.springframework.integration.amqp.outbound.CorrelationData ; if ( org.springframework.integration.amqp.outbound.CorrelationData == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + boolean + STRING + java.lang.String ) ; } return; } if ( org.springframework.integration.amqp.outbound.CorrelationData instanceof org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint.CorrelationDataWrapper ) { java.lang.Object = ( ( org.springframework.integration.amqp.outbound.AbstractAmqpOutboundEndpoint.CorrelationDataWrapper ) org.springframework.integration.amqp.outbound.CorrelationData ) . java.lang.Object ( ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . PUBLISH_CONFIRM , boolean ) ; if ( ! boolean && StringUtils . hasText ( java.lang.String ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( AmqpHeaders . PUBLISH_CONFIRM_NACK_CAUSE , java.lang.String ) ; } AbstractIntegrationMessageBuilder < ? > org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<?> = java.lang.Object instanceof Message ? this . getMessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) : this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; Message < ? > org.springframework.integration.amqp.outbound.Message<?> = org.springframework.integration.amqp.outbound.AbstractIntegrationMessageBuilder<> . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) . build ( ) ; if ( boolean && this . org.springframework.integration.amqp.outbound.MessageChannel != null ) { sendOutput ( org.springframework.integration.amqp.outbound.Message<> , this . org.springframework.integration.amqp.outbound.MessageChannel , true ) ; } else if ( ! boolean && this . org.springframework.integration.amqp.outbound.MessageChannel != null ) { sendOutput ( org.springframework.integration.amqp.outbound.Message<> , this . org.springframework.integration.amqp.outbound.MessageChannel , true ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + ( boolean ? STRING : STRING ) + STRING + java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { super( java.lang.String ); this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( ) { return this . java.lang.Object ; }  <METHOD_END>
