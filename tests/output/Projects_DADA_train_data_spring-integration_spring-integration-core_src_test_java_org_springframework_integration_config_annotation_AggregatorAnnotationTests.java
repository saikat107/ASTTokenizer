<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.annotation.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } ) ; final java.lang.String java.lang.String = STRING ; MessageHandler org.springframework.integration.config.annotation.MessageHandler = this . org.springframework.integration.config.annotation.MessageHandler ( org.springframework.integration.config.annotation.ConfigurableApplicationContext , java.lang.String ) ; assertTrue ( getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) instanceof SimpleSequenceSizeReleaseStrategy ) ; assertNull ( getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; assertTrue ( getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) instanceof NullChannel ) ; assertEquals ( - NUMBER , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; assertEquals ( false , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; org.springframework.integration.config.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.config.annotation.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } ) ; final java.lang.String java.lang.String = STRING ; MessageHandler org.springframework.integration.config.annotation.MessageHandler = this . org.springframework.integration.config.annotation.MessageHandler ( org.springframework.integration.config.annotation.ConfigurableApplicationContext , java.lang.String ) ; assertTrue ( getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) instanceof SimpleSequenceSizeReleaseStrategy ) ; assertEquals ( STRING , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; assertEquals ( STRING , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; assertEquals ( NUMBER , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; assertEquals ( true , getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ) ; org.springframework.integration.config.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.config.annotation.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } ) ; final java.lang.String java.lang.String = STRING ; MessageHandler org.springframework.integration.config.annotation.MessageHandler = this . org.springframework.integration.config.annotation.MessageHandler ( org.springframework.integration.config.annotation.ConfigurableApplicationContext , java.lang.String ) ; java.lang.Object java.lang.Object = getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ; Assert . assertTrue ( java.lang.Object instanceof MethodInvokingReleaseStrategy ) ; MethodInvokingReleaseStrategy org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy = ( MethodInvokingReleaseStrategy ) java.lang.Object ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy ) . getPropertyValue ( STRING ) ; assertNull ( java.lang.Object ) ; java.lang.Object java.lang.Object = new DirectFieldAccessor ( org.springframework.integration.config.annotation.MethodInvokingReleaseStrategy ) . getPropertyValue ( STRING ) ; assertTrue ( java.lang.Object . java.lang.String ( ) . boolean ( STRING ) ) ; org.springframework.integration.config.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.integration.config.annotation.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( new java.lang.String [] { STRING } ) ; final java.lang.String java.lang.String = STRING ; MessageHandler org.springframework.integration.config.annotation.MessageHandler = this . org.springframework.integration.config.annotation.MessageHandler ( org.springframework.integration.config.annotation.ConfigurableApplicationContext , java.lang.String ) ; java.lang.Object java.lang.Object = getPropertyValue ( org.springframework.integration.config.annotation.MessageHandler , STRING ) ; Assert . assertTrue ( java.lang.Object instanceof MethodInvokingCorrelationStrategy ) ; MethodInvokingCorrelationStrategy org.springframework.integration.config.annotation.MethodInvokingCorrelationStrategy = ( MethodInvokingCorrelationStrategy ) java.lang.Object ; DirectFieldAccessor org.springframework.integration.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( new DirectFieldAccessor ( new DirectFieldAccessor ( org.springframework.integration.config.annotation.MethodInvokingCorrelationStrategy ) . getPropertyValue ( STRING ) ) . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertSame ( org.springframework.integration.config.annotation.ConfigurableApplicationContext . getBean ( java.lang.String ) , java.lang.Object ) ; assertNull ( org.springframework.integration.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertNotNull ( java.lang.Object ) ; DirectFieldAccessor org.springframework.integration.config.annotation.DirectFieldAccessor = new DirectFieldAccessor ( java.lang.Object ) ; java.lang.reflect.Method java.lang.reflect.Method = ( java.lang.reflect.Method ) org.springframework.integration.config.annotation.DirectFieldAccessor . getPropertyValue ( STRING ) ; assertEquals ( STRING , java.lang.reflect.Method . java.lang.String ( ) ) ; org.springframework.integration.config.annotation.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.config.annotation.MessageHandler org.springframework.integration.config.annotation.MessageHandler ( ApplicationContext org.springframework.integration.config.annotation.ApplicationContext , final java.lang.String java.lang.String ) { EventDrivenConsumer org.springframework.integration.config.annotation.EventDrivenConsumer = ( EventDrivenConsumer ) org.springframework.integration.config.annotation.ApplicationContext . getBean ( java.lang.String + STRING ) ; return TestUtils . getPropertyValue ( org.springframework.integration.config.annotation.EventDrivenConsumer , STRING , MessageHandler .class ) ; }  <METHOD_END>
