<METHOD_START> @ Before public void void ( ) { this . org.springframework.test.web.servlet.samples.spr.MockHttpServletRequest . setAttribute ( java.lang.String , java.lang.String ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc = webAppContextSetup ( this . org.springframework.test.web.servlet.samples.spr.WebApplicationContext ) . addFilters ( new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestFilter ( ) , new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestAttributesFilter ( ) , this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.FilterWithSessionScopedService ) . defaultRequest ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) . alwaysExpect ( status ( ) . isOk ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , AopUtils . isCglibProxy ( this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedController ) ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , AopUtils . isCglibProxy ( this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedService ) ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertTrue ( STRING , AopUtils . isCglibProxy ( this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService ) ) ; this . org.springframework.test.web.servlet.samples.spr.MockMvc . perform ( get ( STRING ) . requestAttr ( java.lang.String , java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( false ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SingletonController org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SingletonController ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SingletonController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedController org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedController ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedService org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedService ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithRequestScopedService org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithRequestScopedService ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithRequestScopedService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithSessionScopedService org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithSessionScopedService ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.ControllerWithSessionScopedService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.FilterWithSessionScopedService org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.FilterWithSessionScopedService ( ) { return new org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.FilterWithSessionScopedService ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { void ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { void ( org.springframework.test.web.servlet.samples.spr.ServletRequest ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { void ( org.springframework.test.web.servlet.samples.spr.ServletRequest ) ; }  <METHOD_END>
<METHOD_START> void void ( ) { void ( this . org.springframework.test.web.servlet.samples.spr.ServletRequest ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.RequestScopedService . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) public void void ( ) { this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService . void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest , ServletResponse org.springframework.test.web.servlet.samples.spr.ServletResponse , FilterChain org.springframework.test.web.servlet.samples.spr.FilterChain ) throws java.io.IOException , org.springframework.test.web.servlet.samples.spr.ServletException { this . org.springframework.test.web.servlet.samples.spr.RequestContextHolderTests.SessionScopedService . void ( ) ; void ( org.springframework.test.web.servlet.samples.spr.ServletRequest ) ; void ( ) ; org.springframework.test.web.servlet.samples.spr.FilterChain . doFilter ( org.springframework.test.web.servlet.samples.spr.ServletRequest , org.springframework.test.web.servlet.samples.spr.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest , ServletResponse org.springframework.test.web.servlet.samples.spr.ServletResponse , FilterChain org.springframework.test.web.servlet.samples.spr.FilterChain ) throws java.io.IOException , org.springframework.test.web.servlet.samples.spr.ServletException { org.springframework.test.web.servlet.samples.spr.ServletRequest . setAttribute ( java.lang.String , java.lang.String ) ; org.springframework.test.web.servlet.samples.spr.FilterChain . doFilter ( org.springframework.test.web.servlet.samples.spr.ServletRequest , org.springframework.test.web.servlet.samples.spr.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest , ServletResponse org.springframework.test.web.servlet.samples.spr.ServletResponse , FilterChain org.springframework.test.web.servlet.samples.spr.FilterChain ) throws java.io.IOException , org.springframework.test.web.servlet.samples.spr.ServletException { RequestContextHolder . getRequestAttributes ( ) . setAttribute ( java.lang.String , java.lang.String , RequestAttributes . SCOPE_REQUEST ) ; org.springframework.test.web.servlet.samples.spr.FilterChain . doFilter ( org.springframework.test.web.servlet.samples.spr.ServletRequest , org.springframework.test.web.servlet.samples.spr.ServletResponse ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ) { void ( true ) ; }  <METHOD_END>
<METHOD_START> private static void void ( boolean boolean ) { RequestAttributes org.springframework.test.web.servlet.samples.spr.RequestAttributes = RequestContextHolder . getRequestAttributes ( ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.RequestAttributes , instanceOf ( ServletRequestAttributes .class ) ) ; void ( ( ( ServletRequestAttributes ) org.springframework.test.web.servlet.samples.spr.RequestAttributes ) . getRequest ( ) , boolean ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest ) { void ( org.springframework.test.web.servlet.samples.spr.ServletRequest , true ) ; }  <METHOD_END>
<METHOD_START> private static void void ( ServletRequest org.springframework.test.web.servlet.samples.spr.ServletRequest , boolean boolean ) { if ( boolean ) { assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; } else { assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( java.lang.String ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.test.web.servlet.samples.spr.ServletRequest . getAttribute ( java.lang.String ) , is ( nullValue ( ) ) ) ; } }  <METHOD_END>
