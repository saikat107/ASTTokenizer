<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.event.AnnotationConfigApplicationContext org.springframework.statemachine.event.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.ContextEventTests.Config .class , org.springframework.statemachine.event.ContextEventTests.Config1 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener = context . getBean ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener .class ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . int , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.ContextEventTests.Config .class , org.springframework.statemachine.event.ContextEventTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener = context . getBean ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener .class ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . int , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.ContextEventTests.Config .class , org.springframework.statemachine.event.ContextEventTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener = context . getBean ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener .class ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . int , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( BaseConfig .class , org.springframework.statemachine.event.ContextEventTests.Config .class , ExternalConfig .class ) ; context . refresh ( ) ; ObjectStateMachine < TestStates , TestEvents > org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener = context . getBean ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener .class ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . start ( ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . void ( ) ; org.springframework.statemachine.event.ObjectStateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . sendEvent ( TestEvents . E1 ) ; org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertThat ( org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener . int , greaterThan ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineStateConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S1 ) . state ( TestStates . S2 ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < TestStates , TestEvents > org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ) throws java.lang.Exception { org.springframework.statemachine.event.StateMachineTransitionConfigurer<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.event.StateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> < TestStates , TestEvents > org.springframework.statemachine.event.StateMachine<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> ( ) java.lang.Exception { Builder < TestStates , TestEvents > org.springframework.statemachine.event.Builder<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> = StateMachineBuilder . builder ( ) ; org.springframework.statemachine.event.Builder<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . configureStates ( ) . withStates ( ) . initial ( TestStates . S1 ) . state ( TestStates . S2 ) ; org.springframework.statemachine.event.Builder<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . configureTransitions ( ) . withExternal ( ) . source ( TestStates . S1 ) . target ( TestStates . S2 ) . event ( TestEvents . E1 ) ; return org.springframework.statemachine.event.Builder<org.springframework.statemachine.event.TestStates,org.springframework.statemachine.event.TestEvents> . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener ( ) { return new org.springframework.statemachine.event.ContextEventTests.StateMachineApplicationEventListener ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineEvent org.springframework.statemachine.event.StateMachineEvent ) { int ++ ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int = NUMBER ; java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; }  <METHOD_END>
