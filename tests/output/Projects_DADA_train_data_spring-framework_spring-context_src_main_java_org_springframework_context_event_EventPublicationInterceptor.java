<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ApplicationEvent .class == java.lang.Class<> || ! ApplicationEvent .class . boolean ( java.lang.Class<> ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } try { this . java.lang.reflect.Constructor<?> = java.lang.Class<> . java.lang.reflect.Constructor<> ( new java.lang.Class<?> < ? > [] { java.lang.Object .class } ) ; } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<> . java.lang.String ( ) + STRING + java.lang.NoSuchMethodException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.context.event.ApplicationEventPublisher ) { this . org.springframework.context.event.ApplicationEventPublisher = org.springframework.context.event.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( this . java.lang.reflect.Constructor<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.context.event.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = org.springframework.context.event.MethodInvocation . proceed ( ) ; ApplicationEvent org.springframework.context.event.ApplicationEvent = ( ApplicationEvent ) this . java.lang.reflect.Constructor<> . newInstance ( new java.lang.Object [] { org.springframework.context.event.MethodInvocation . getThis ( ) } ) ; this . org.springframework.context.event.ApplicationEventPublisher . publishEvent ( org.springframework.context.event.ApplicationEvent ) ; return java.lang.Object ; }  <METHOD_END>
