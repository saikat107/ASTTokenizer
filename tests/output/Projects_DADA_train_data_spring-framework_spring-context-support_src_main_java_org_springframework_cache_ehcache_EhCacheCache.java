<METHOD_START> public void ( Ehcache org.springframework.cache.ehcache.Ehcache ) { Assert . notNull ( org.springframework.cache.ehcache.Ehcache , STRING ) ; Status org.springframework.cache.ehcache.Status = org.springframework.cache.ehcache.Ehcache . getStatus ( ) ; Assert . isTrue ( Status . STATUS_ALIVE . equals ( org.springframework.cache.ehcache.Status ) , STRING + org.springframework.cache.ehcache.Status . toString ( ) ) ; this . org.springframework.cache.ehcache.Ehcache = org.springframework.cache.ehcache.Ehcache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.String java.lang.String ( ) { return this . org.springframework.cache.ehcache.Ehcache . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final org.springframework.cache.ehcache.Ehcache org.springframework.cache.ehcache.Ehcache ( ) { return this . org.springframework.cache.ehcache.Ehcache ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.ehcache.ValueWrapper org.springframework.cache.ehcache.ValueWrapper ( java.lang.Object java.lang.Object ) { Element org.springframework.cache.ehcache.Element = org.springframework.cache.ehcache.Element ( java.lang.Object ) ; return org.springframework.cache.ehcache.ValueWrapper ( org.springframework.cache.ehcache.Element ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public < T > T T ( java.lang.Object java.lang.Object , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { Element org.springframework.cache.ehcache.Element = org.springframework.cache.ehcache.Element ( java.lang.Object ) ; if ( org.springframework.cache.ehcache.Element != null ) { return ( T ) org.springframework.cache.ehcache.Element . getObjectValue ( ) ; } else { this . org.springframework.cache.ehcache.Ehcache . acquireWriteLockOnKey ( java.lang.Object ) ; try { org.springframework.cache.ehcache.Element = org.springframework.cache.ehcache.Element ( java.lang.Object ) ; if ( org.springframework.cache.ehcache.Element != null ) { return ( T ) org.springframework.cache.ehcache.Element . getObjectValue ( ) ; } else { return T ( java.lang.Object , java.util.concurrent.Callable<T> ) ; } } finally { this . org.springframework.cache.ehcache.Ehcache . releaseWriteLockOnKey ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private < T > T T ( java.lang.Object java.lang.Object , java.util.concurrent.Callable<T> < T > java.util.concurrent.Callable<T> ) { T T ; try { T = java.util.concurrent.Callable<T> . T ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new ValueRetrievalException ( java.lang.Object , java.util.concurrent.Callable<T> , java.lang.Throwable ) ; } void ( java.lang.Object , T ) ; return T ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { Element org.springframework.cache.ehcache.Element = this . org.springframework.cache.ehcache.Ehcache . get ( java.lang.Object ) ; java.lang.Object java.lang.Object = ( org.springframework.cache.ehcache.Element != null ? org.springframework.cache.ehcache.Element . getObjectValue ( ) : null ) ; if ( java.lang.Object != null && java.lang.Class<T> != null && ! java.lang.Class<T> . boolean ( java.lang.Object ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + java.lang.Object ) ; } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { this . org.springframework.cache.ehcache.Ehcache . put ( new Element ( java.lang.Object , java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.ehcache.ValueWrapper org.springframework.cache.ehcache.ValueWrapper ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { Element org.springframework.cache.ehcache.Element = this . org.springframework.cache.ehcache.Ehcache . putIfAbsent ( new Element ( java.lang.Object , java.lang.Object ) ) ; return org.springframework.cache.ehcache.ValueWrapper ( org.springframework.cache.ehcache.Element ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) { this . org.springframework.cache.ehcache.Ehcache . remove ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.cache.ehcache.Ehcache . removeAll ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.ehcache.Element org.springframework.cache.ehcache.Element ( java.lang.Object java.lang.Object ) { return this . org.springframework.cache.ehcache.Ehcache . get ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.cache.ehcache.ValueWrapper org.springframework.cache.ehcache.ValueWrapper ( Element org.springframework.cache.ehcache.Element ) { return ( org.springframework.cache.ehcache.Element != null ? new SimpleValueWrapper ( org.springframework.cache.ehcache.Element . getObjectValue ( ) ) : null ) ; }  <METHOD_END>
