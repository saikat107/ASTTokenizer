<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader == null ? ClassUtils . getDefaultClassLoader ( ) : java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ProxyFactory org.springframework.data.jpa.repository.support.ProxyFactory , RepositoryInformation org.springframework.data.jpa.repository.support.RepositoryInformation ) { org.springframework.data.jpa.repository.support.ProxyFactory . addAdvice ( org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor.CrudMethodMetadataPopulatingMethodInterceptor . org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor.CrudMethodMetadataPopulatingMethodInterceptor ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.jpa.repository.support.CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata ( ) { ProxyFactory org.springframework.data.jpa.repository.support.ProxyFactory = new ProxyFactory ( ) ; org.springframework.data.jpa.repository.support.ProxyFactory . addInterface ( CrudMethodMetadata .class ) ; org.springframework.data.jpa.repository.support.ProxyFactory . setTargetSource ( new org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor.ThreadBoundTargetSource ( ) ) ; return ( CrudMethodMetadata ) org.springframework.data.jpa.repository.support.ProxyFactory . getProxy ( this . java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.jpa.repository.support.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.jpa.repository.support.MethodInvocation . getMethod ( ) ; CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata = ( CrudMethodMetadata ) TransactionSynchronizationManager . getResource ( java.lang.reflect.Method ) ; if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata != null ) { return org.springframework.data.jpa.repository.support.MethodInvocation . proceed ( ) ; } CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata = java.util.concurrent.ConcurrentMap<java.lang.reflect.Method,org.springframework.data.jpa.repository.support.CrudMethodMetadata> . get ( java.lang.reflect.Method ) ; if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata == null ) { org.springframework.data.jpa.repository.support.CrudMethodMetadata = new org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor.DefaultCrudMethodMetadata ( java.lang.reflect.Method ) ; CrudMethodMetadata org.springframework.data.jpa.repository.support.CrudMethodMetadata = java.util.concurrent.ConcurrentMap<java.lang.reflect.Method,org.springframework.data.jpa.repository.support.CrudMethodMetadata> . putIfAbsent ( java.lang.reflect.Method , org.springframework.data.jpa.repository.support.CrudMethodMetadata ) ; if ( org.springframework.data.jpa.repository.support.CrudMethodMetadata != null ) { org.springframework.data.jpa.repository.support.CrudMethodMetadata = org.springframework.data.jpa.repository.support.CrudMethodMetadata ; } } TransactionSynchronizationManager . bindResource ( java.lang.reflect.Method , org.springframework.data.jpa.repository.support.CrudMethodMetadata ) ; try { return org.springframework.data.jpa.repository.support.MethodInvocation . proceed ( ) ; } finally { TransactionSynchronizationManager . unbindResource ( java.lang.reflect.Method ) ; } }  <METHOD_END>
<METHOD_START> public void ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; this . org.springframework.data.jpa.repository.support.LockModeType = org.springframework.data.jpa.repository.support.LockModeType ( java.lang.reflect.Method ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( java.lang.reflect.Method ) ; this . org.springframework.data.jpa.repository.support.EntityGraph = org.springframework.data.jpa.repository.support.EntityGraph ( java.lang.reflect.Method ) ; this . java.lang.reflect.Method = java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.support.EntityGraph org.springframework.data.jpa.repository.support.EntityGraph ( java.lang.reflect.Method java.lang.reflect.Method ) { return AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , EntityGraph .class ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.data.jpa.repository.support.LockModeType org.springframework.data.jpa.repository.support.LockModeType ( java.lang.reflect.Method java.lang.reflect.Method ) { Lock org.springframework.data.jpa.repository.support.Lock = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Lock .class ) ; return org.springframework.data.jpa.repository.support.Lock == null ? null : ( LockModeType ) AnnotationUtils . getValue ( org.springframework.data.jpa.repository.support.Lock ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.reflect.Method java.lang.reflect.Method ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; QueryHints org.springframework.data.jpa.repository.support.QueryHints = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , QueryHints .class ) ; if ( org.springframework.data.jpa.repository.support.QueryHints != null ) { for ( QueryHint org.springframework.data.jpa.repository.support.QueryHint : org.springframework.data.jpa.repository.support.QueryHints . value ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.jpa.repository.support.QueryHint . name ( ) , org.springframework.data.jpa.repository.support.QueryHint . value ( ) ) ; } } QueryHint org.springframework.data.jpa.repository.support.QueryHint = AnnotationUtils . findAnnotation ( java.lang.reflect.Method , QueryHint .class ) ; if ( org.springframework.data.jpa.repository.support.QueryHint != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.jpa.repository.support.QueryHint . name ( ) , org.springframework.data.jpa.repository.support.QueryHint . value ( ) ) ; } return java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.support.LockModeType org.springframework.data.jpa.repository.support.LockModeType ( ) { return org.springframework.data.jpa.repository.support.LockModeType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.jpa.repository.support.EntityGraph org.springframework.data.jpa.repository.support.EntityGraph ( ) { return org.springframework.data.jpa.repository.support.EntityGraph ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return CrudMethodMetadata .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { MethodInvocation org.springframework.data.jpa.repository.support.MethodInvocation = ExposeInvocationInterceptor . currentInvocation ( ) ; return TransactionSynchronizationManager . getResource ( org.springframework.data.jpa.repository.support.MethodInvocation . getMethod ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws java.lang.Exception {}  <METHOD_END>
