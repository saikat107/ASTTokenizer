<METHOD_START> public void ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { super( org.springframework.data.repository.core.support.RepositoryMetadata , java.lang.Class<> , java.util.Optional<java.lang.Class<?>> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override java.lang.reflect.Method java.lang.reflect.Method ( java.lang.reflect.Method java.lang.reflect.Method , java.util.Optional<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Optional<java.lang.Class<?>> ) { java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> < java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > > java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> = ( ) java.util.Optional<java.lang.Class<?>> . java.util.Optional<java.lang.reflect.Method> ( java.lang.Class<?> -> findMethod ( java.lang.Class<> , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) ; java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> < java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > > java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> = ( ) java.util.Optional<java.lang.Class<?>> . java.util.Optional<java.lang.reflect.Method> ( java.lang.Class<?> -> { java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> < java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> < java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > > > java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> = new java.util.ArrayList<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> <> ( ) ; if ( boolean ( java.lang.reflect.Method ) ) { java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> . boolean ( ( ) java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , java.lang.Class<> , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( ) ) ) ; java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> . boolean ( ( ) java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , java.lang.Class<> , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( ) ) ) ; } java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> . boolean ( ( ) java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , java.lang.Class<> , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( getRepositoryInterface ( ) ) ) ) ; return Optionals . firstNonEmpty ( Streamable . of ( java.util.List<java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>>> ) ) ; } ) ; return Optionals . firstNonEmpty ( java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> , java.util.function.Supplier<java.util.Optional<java.lang.reflect.Method>> ) . orElse ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria ) -> { java.lang.Class<?> < ? > java.lang.Class<?> = resolveParameterType ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . getDeclared ( ) , java.lang.Class<> ) ; java.lang.reflect.Type java.lang.reflect.Type = org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.reflect.Type ( ) ; if ( java.lang.reflect.Type instanceof java.lang.reflect.TypeVariable<?> < ? > ) { if ( ! matchesGenericType ( ( java.lang.reflect.TypeVariable<?> < ? > ) java.lang.reflect.Type , ResolvableType . forMethodParameter ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . getDeclared ( ) ) ) ) { return false ; } } return org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) && org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . boolean ( ) ; } ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return QueryExecutionConverters . supports ( java.lang.Class<> ) && ! QueryExecutionConverters . supportsUnwrapping ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; return java.util.Arrays . java.util.stream.Stream<java.lang.Class<?>> ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) . boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation :: boolean ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ) { return java.util.Arrays . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.Class<> . java.lang.reflect.Method[] ( ) ) . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) ) . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.reflect.Method -> java.lang.reflect.Method . int ( ) == java.lang.reflect.Method . int ( ) ) . java.util.stream.Stream<java.lang.reflect.Method> ( java.lang.reflect.Method -> boolean ( java.lang.reflect.Method , java.lang.reflect.Method , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ) ) . java.util.Optional<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method , java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ) { return java.util.stream.Stream<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( java.lang.reflect.Method , java.lang.reflect.Method ) . boolean ( java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( ) { return ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria ) -> boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) && boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) && ReactiveWrapperConverters . canConvert ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) , org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.function.Predicate<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( ) { return ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria ) -> boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) && boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) && org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) . boolean ( org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . java.lang.Class<?> ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.stream.Stream<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> < org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria > java.util.stream.Stream<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.reflect.Method java.lang.reflect.Method ) { Assert . isTrue ( java.lang.reflect.Method . int ( ) == java.lang.reflect.Method . int ( ) , STRING ) ; return java.util.stream.IntStream . java.util.stream.IntStream ( NUMBER , java.lang.reflect.Method . int ( ) ) . java.util.stream.Stream<org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria> ( int -> org.springframework.data.repository.core.support.ReactiveRepositoryInformation.ParameterOverrideCriteria . of ( new MethodParameter ( java.lang.reflect.Method , int ) , new MethodParameter ( java.lang.reflect.Method , int ) ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.repository.core.support.MethodParameter . getParameterType ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Type java.lang.reflect.Type ( ) { return org.springframework.data.repository.core.support.MethodParameter . getGenericParameterType ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.repository.core.support.MethodParameter . getParameterType ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( java.lang.Class<?> ( ) ) ; }  <METHOD_END>
