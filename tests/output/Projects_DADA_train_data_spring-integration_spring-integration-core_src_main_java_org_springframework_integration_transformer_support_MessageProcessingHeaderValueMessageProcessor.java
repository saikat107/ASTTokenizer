<METHOD_START> public < T > void ( MessageProcessor < T > org.springframework.integration.transformer.support.MessageProcessor<T> ) { this . org.springframework.integration.transformer.support.MessageProcessor<?> = org.springframework.integration.transformer.support.MessageProcessor<T> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this( java.lang.Object , null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String ) { this . org.springframework.integration.transformer.support.MessageProcessor<?> = new MethodInvokingMessageProcessor < java.lang.Object > ( java.lang.Object , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.transformer.support.BeanFactory ) throws org.springframework.integration.transformer.support.BeansException { if ( this . org.springframework.integration.transformer.support.MessageProcessor<> instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.transformer.support.MessageProcessor<> ) . setBeanFactory ( org.springframework.integration.transformer.support.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.transformer.support.Message<?> ) { return this . org.springframework.integration.transformer.support.MessageProcessor<> . processMessage ( org.springframework.integration.transformer.support.Message<> ) ; }  <METHOD_END>
