<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( BackOff org.springframework.jms.listener.BackOff ) { this . org.springframework.jms.listener.BackOff = org.springframework.jms.listener.BackOff ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.jms.listener.BackOff = new FixedBackOff ( long , java.lang.Long . long ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) throws java.lang.IllegalArgumentException { if ( java.lang.String == null || ! java.lang.String . boolean ( STRING ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } void ( org.springframework.jms.listener.Constants . asNumber ( java.lang.String ) . intValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { try { int int = java.lang.String . int ( '-' ) ; if ( int != - NUMBER ) { void ( java.lang.Integer . int ( java.lang.String . java.lang.String ( NUMBER , int ) ) ) ; void ( java.lang.Integer . int ( java.lang.String . java.lang.String ( int + NUMBER , java.lang.String . int ( ) ) ) ) ; } else { void ( NUMBER ) ; void ( java.lang.Integer . int ( java.lang.String ) ) ; } } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; synchronized ( this . lifecycleMonitor ) { this . int = int ; if ( this . int < int ) { this . int = int ; } } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; synchronized ( this . lifecycleMonitor ) { this . int = ( int > this . int ? int : this . int ) ; } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int != NUMBER , STRING ) ; synchronized ( this . lifecycleMonitor ) { this . int = int ; } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; synchronized ( this . lifecycleMonitor ) { this . int = int ; } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { Assert . isTrue ( int > NUMBER , STRING ) ; synchronized ( this . lifecycleMonitor ) { this . int = int ; } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . int == int ) { this . int = ( getTransactionManager ( ) != null ? int : int ) ; } synchronized ( this . lifecycleMonitor ) { if ( this . java.util.concurrent.Executor == null ) { this . java.util.concurrent.Executor = org.springframework.jms.listener.TaskExecutor ( ) ; } else if ( this . java.util.concurrent.Executor instanceof SchedulingTaskExecutor && ( ( SchedulingTaskExecutor ) this . java.util.concurrent.Executor ) . prefersShortLivedTasks ( ) && this . int == java.lang.Integer . int ) { this . int = NUMBER ; } } super. initialize ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.jms.listener.JMSException { synchronized ( this . lifecycleMonitor ) { for ( int int = NUMBER ; int < this . int ; int ++ ) { void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) org.springframework.jms.listener.JMSException { logger . debug ( STRING ) ; try { synchronized ( this . lifecycleMonitor ) { while ( this . int > NUMBER ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . int + STRING ) ; } long long = getReceiveTimeout ( ) ; if ( long > NUMBER ) { this . lifecycleMonitor . wait ( long ) ; } else { this . lifecycleMonitor . wait ( ) ; } } for ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker : this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> ) { org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker . void ( ) ; } this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . void ( ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.jms.listener.JmsException { synchronized ( this . lifecycleMonitor ) { this . java.lang.Runnable = null ; } super. start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) throws org.springframework.jms.listener.JmsException { synchronized ( this . lifecycleMonitor ) { if ( ! isRunning ( ) || this . java.lang.Runnable != null ) { java.lang.Runnable . void ( ) ; return; } this . java.lang.Runnable = java.lang.Runnable ; } void ( ) ; }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) ; } }  <METHOD_END>
<METHOD_START> public final int int ( ) { synchronized ( this . lifecycleMonitor ) { return this . int ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { synchronized ( this . lifecycleMonitor ) { return ( this . int > NUMBER ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.listener.TaskExecutor org.springframework.jms.listener.TaskExecutor ( ) { java.lang.String java.lang.String = getBeanName ( ) ; java.lang.String java.lang.String = ( java.lang.String != null ? java.lang.String + STRING : java.lang.String ) ; return new SimpleAsyncTaskExecutor ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker = new org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker ( ) ; if ( rescheduleTaskIfNecessary ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker ) ) { this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . boolean ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected final boolean boolean ( ) { return ( int ( ) >= int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { this . java.util.concurrent.Executor . void ( ( java.lang.Runnable ) java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session ) { ( ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker ) java.lang.Object ) . void ( false ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , Session org.springframework.jms.listener.Session ) { ( ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker ) java.lang.Object ) . void ( true ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( isRunning ( ) ) { resumePausedTasks ( ) ; synchronized ( this . lifecycleMonitor ) { if ( this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) < this . int && int ( ) < this . int ) { void ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) ) ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( int int ) { boolean boolean = ( int >= this . int && int ( ) > NUMBER ) ; return ( this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) <= ( boolean ? this . int : this . int ) ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { int int = NUMBER ; for ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker : this . java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> ) { if ( org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker . boolean ( ) ) { int ++ ; } } return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { try { super. establishSharedConnection ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof JMSException ) { invokeExceptionListener ( ( JMSException ) java.lang.Exception ) ; } logger . debug ( STRING + STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { try { super. startSharedConnection ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . debug ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { try { super. stopSharedConnection ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { logger . debug ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable , boolean boolean ) { if ( java.lang.Throwable instanceof JMSException ) { invokeExceptionListener ( ( JMSException ) java.lang.Throwable ) ; } if ( java.lang.Throwable instanceof SharedConnectionNotInitializedException ) { if ( ! boolean ) { logger . info ( STRING ) ; } } else { if ( boolean ) { logger . debug ( STRING , java.lang.Throwable ) ; } else { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( getDestinationDescription ( ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Throwable instanceof JMSException ? JmsUtils . buildExceptionMessage ( ( JMSException ) java.lang.Throwable ) : java.lang.Throwable . java.lang.String ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . warn ( java.lang.StringBuilder , java.lang.Throwable ) ; } else { logger . warn ( java.lang.StringBuilder ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { this . boolean = true ; try { void ( ) ; void ( ) ; } finally { this . boolean = false ; this . boolean = false ; } }  <METHOD_END>
<METHOD_START> protected void void ( ) { BackOffExecution org.springframework.jms.listener.BackOffExecution = this . org.springframework.jms.listener.BackOff . start ( ) ; while ( isRunning ( ) ) { try { if ( boolean ( ) ) { refreshSharedConnection ( ) ; } else { Connection org.springframework.jms.listener.Connection = createConnection ( ) ; JmsUtils . closeConnection ( org.springframework.jms.listener.Connection ) ; } logger . info ( STRING ) ; break; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof JMSException ) { invokeExceptionListener ( ( JMSException ) java.lang.Exception ) ; } java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( getDestinationDescription ( ) ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.jms.listener.BackOffExecution ) . append ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.Exception instanceof JMSException ? JmsUtils . buildExceptionMessage ( ( JMSException ) java.lang.Exception ) : java.lang.Exception . java.lang.String ( ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . error ( java.lang.StringBuilder , java.lang.Exception ) ; } else { logger . error ( java.lang.StringBuilder ) ; } } if ( ! boolean ( org.springframework.jms.listener.BackOffExecution ) ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( getDestinationDescription ( ) ) . append ( STRING ) . append ( STRING ) ; logger . error ( java.lang.StringBuilder . java.lang.String ( ) ) ; void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { java.lang.String java.lang.String = getDestinationName ( ) ; if ( java.lang.String != null ) { DestinationResolver org.springframework.jms.listener.DestinationResolver = getDestinationResolver ( ) ; if ( org.springframework.jms.listener.DestinationResolver instanceof CachingDestinationResolver ) { ( ( CachingDestinationResolver ) org.springframework.jms.listener.DestinationResolver ) . removeFromCache ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( BackOffExecution org.springframework.jms.listener.BackOffExecution ) { if ( this . boolean && this . boolean ) { return false ; } long long = org.springframework.jms.listener.BackOffExecution . nextBackOff ( ) ; if ( long == BackOffExecution . STOP ) { return false ; } else { try { synchronized ( this . lifecycleMonitor ) { this . lifecycleMonitor . wait ( long ) ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; if ( this . boolean ) { this . boolean = true ; } } return true ; } }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( lifecycleMonitor ) { int ++ ; lifecycleMonitor . notifyAll ( ) ; } boolean boolean = false ; try { if ( int < NUMBER ) { boolean = boolean ( ) ; } else { int int = NUMBER ; while ( isRunning ( ) && int < int ) { boolean = ( boolean ( ) || boolean ) ; int ++ ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { void ( ) ; if ( ! this . boolean ) { void ( ) ; } this . boolean = false ; boolean boolean = false ; synchronized ( java.lang.Object ) { if ( this . java.lang.Object == java.lang.Object ) { void ( java.lang.Throwable , false ) ; void ( ) ; java.lang.Object = new java.lang.Object ( ) ; } else { boolean = true ; } } if ( boolean ) { void ( java.lang.Throwable , true ) ; } } finally { synchronized ( lifecycleMonitor ) { void ( ) ; lifecycleMonitor . notifyAll ( ) ; } if ( ! boolean ) { this . int ++ ; } else { this . int = NUMBER ; } synchronized ( lifecycleMonitor ) { if ( ! boolean ( this . int ) || ! rescheduleTaskIfNecessary ( this ) ) { java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . boolean ( this ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) ) ; } lifecycleMonitor . notifyAll ( ) ; void ( ) ; } else if ( isRunning ( ) ) { int int = int ( ) - getPausedTaskCount ( ) ; if ( int < NUMBER ) { logger . error ( STRING + STRING ) ; } else if ( int < int ( ) ) { logger . warn ( STRING + STRING + STRING ) ; } } } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) org.springframework.jms.listener.JMSException { boolean boolean = false ; boolean boolean = true ; while ( boolean ) { synchronized ( lifecycleMonitor ) { boolean boolean = false ; boolean boolean = false ; while ( ( boolean = isActive ( ) ) && ! isRunning ( ) ) { if ( boolean ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } if ( ! boolean ) { void ( ) ; } boolean = true ; try { lifecycleMonitor . wait ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; boolean = true ; } } if ( boolean ) { int ++ ; } if ( java.util.Set<org.springframework.jms.listener.DefaultMessageListenerContainer.AsyncMessageListenerInvoker> . int ( ) > int ) { boolean = false ; } } if ( boolean ) { boolean = ( boolean ( ) || boolean ) ; } } return boolean ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) org.springframework.jms.listener.JMSException { void ( ) ; boolean boolean = receiveAndExecute ( this , this . org.springframework.jms.listener.Session , this . org.springframework.jms.listener.MessageConsumer ) ; this . boolean = true ; return boolean ; }  <METHOD_END>
<METHOD_START> private void void ( ) { int -- ; if ( java.lang.Runnable != null && int == NUMBER ) { java.lang.Runnable . void ( ) ; java.lang.Runnable = null ; } }  <METHOD_END>
<METHOD_START> private void void ( ) org.springframework.jms.listener.JMSException { if ( int ( ) <= int ) { void ( ) ; } else { if ( this . org.springframework.jms.listener.Session == null && int ( ) >= int ) { void ( ) ; this . org.springframework.jms.listener.Session = createSession ( getSharedConnection ( ) ) ; } if ( this . org.springframework.jms.listener.MessageConsumer == null && int ( ) >= int ) { this . org.springframework.jms.listener.MessageConsumer = createListenerConsumer ( this . org.springframework.jms.listener.Session ) ; synchronized ( lifecycleMonitor ) { int ++ ; } } } }  <METHOD_END>
<METHOD_START> private void void ( ) { synchronized ( java.lang.Object ) { this . java.lang.Object = java.lang.Object ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( boolean ( ) ) { synchronized ( sharedConnectionMonitor ) { JmsUtils . closeMessageConsumer ( this . org.springframework.jms.listener.MessageConsumer ) ; JmsUtils . closeSession ( this . org.springframework.jms.listener.Session ) ; } } else { JmsUtils . closeMessageConsumer ( this . org.springframework.jms.listener.MessageConsumer ) ; JmsUtils . closeSession ( this . org.springframework.jms.listener.Session ) ; } if ( this . org.springframework.jms.listener.MessageConsumer != null ) { synchronized ( lifecycleMonitor ) { int -- ; } } this . org.springframework.jms.listener.MessageConsumer = null ; this . org.springframework.jms.listener.Session = null ; }  <METHOD_END>
<METHOD_START> private void void ( ) { BackOffExecution org.springframework.jms.listener.BackOffExecution = org.springframework.jms.listener.DefaultMessageListenerContainer .this . org.springframework.jms.listener.BackOff . start ( ) ; boolean ( org.springframework.jms.listener.BackOffExecution ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( int < NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
