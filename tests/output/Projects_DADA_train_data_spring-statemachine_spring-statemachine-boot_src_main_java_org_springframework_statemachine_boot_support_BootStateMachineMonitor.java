<METHOD_START> public void ( CounterService org.springframework.statemachine.boot.support.CounterService , GaugeService org.springframework.statemachine.boot.support.GaugeService , TraceRepository org.springframework.statemachine.boot.support.TraceRepository ) { this . org.springframework.statemachine.boot.support.CounterService = org.springframework.statemachine.boot.support.CounterService ; this . org.springframework.statemachine.boot.support.GaugeService = org.springframework.statemachine.boot.support.GaugeService ; this . org.springframework.statemachine.boot.support.TraceRepository = org.springframework.statemachine.boot.support.TraceRepository ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.boot.support.StateMachine<S,E> , Transition < S , E > org.springframework.statemachine.boot.support.Transition<S,E> , long long ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.statemachine.boot.support.Transition<S,E> ) ; this . org.springframework.statemachine.boot.support.CounterService . increment ( java.lang.String + STRING + java.lang.String + STRING ) ; this . org.springframework.statemachine.boot.support.GaugeService . submit ( java.lang.String + STRING + java.lang.String + STRING , long ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ( org.springframework.statemachine.boot.support.Transition<S,E> ) ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , long ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.statemachine.boot.support.StateMachine<S,E> . getId ( ) ) ; org.springframework.statemachine.boot.support.TraceRepository . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachine < S , E > org.springframework.statemachine.boot.support.StateMachine<S,E> , Action < S , E > org.springframework.statemachine.boot.support.Action<S,E> , long long ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.statemachine.boot.support.Action<S,E> ) ; this . org.springframework.statemachine.boot.support.CounterService . increment ( java.lang.String + STRING + java.lang.String + STRING ) ; this . org.springframework.statemachine.boot.support.GaugeService . submit ( java.lang.String + STRING + java.lang.String + STRING , long ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , long ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.statemachine.boot.support.StateMachine<S,E> . getId ( ) ) ; org.springframework.statemachine.boot.support.TraceRepository . add ( java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> private static < S , E > java.lang.String java.lang.String ( Transition < S , E > org.springframework.statemachine.boot.support.Transition<S,E> ) { java.lang.String java.lang.String = java.lang.String ( org.springframework.statemachine.boot.support.Transition<S,E> . getSource ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.statemachine.boot.support.Transition<S,E> . getTarget ( ) ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.statemachine.boot.support.Transition<S,E> . getKind ( ) ) ; if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } if ( java.lang.String != null ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private static < S , E > java.lang.String java.lang.String ( Action < S , E > org.springframework.statemachine.boot.support.Action<S,E> ) { return ObjectUtils . getDisplayString ( org.springframework.statemachine.boot.support.Action<S,E> ) ; }  <METHOD_END>
<METHOD_START> private static < S , E > java.lang.String java.lang.String ( State < S , E > org.springframework.statemachine.boot.support.State<S,E> ) { if ( org.springframework.statemachine.boot.support.State<S,E> == null ) { return null ; } S S = org.springframework.statemachine.boot.support.State<S,E> . getId ( ) ; return S != null ? S . java.lang.String ( ) : null ; }  <METHOD_END>
