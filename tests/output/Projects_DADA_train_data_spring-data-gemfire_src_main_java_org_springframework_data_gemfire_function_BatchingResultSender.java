<METHOD_START> public void ( int int , ResultSender < java.lang.Object > org.springframework.data.gemfire.function.ResultSender<java.lang.Object> ) { Assert . notNull ( org.springframework.data.gemfire.function.ResultSender<java.lang.Object> , STRING ) ; Assert . isTrue ( int >= NUMBER , STRING ) ; this . int = int ; this . org.springframework.data.gemfire.function.ResultSender<java.lang.Object> = org.springframework.data.gemfire.function.ResultSender<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> ) { if ( int == NUMBER ) { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . lastResult ( java.lang.Iterable<> ) ; return; } java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( int ) ; for ( java.util.Iterator<?> < ? > java.util.Iterator<?> = java.lang.Iterable<> . java.util.Iterator<> ( ) ; java.util.Iterator<> . boolean ( ) ;) { if ( java.util.List<java.lang.Object> . int ( ) < int ) { java.util.List<java.lang.Object> . boolean ( java.util.Iterator<> . next ( ) ) ; } if ( java.util.List<java.lang.Object> . int ( ) == int || ! java.util.Iterator<> . boolean ( ) ) { if ( java.util.Iterator<> . boolean ( ) ) { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . sendResult ( java.util.List<java.lang.Object> ) ; } else { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . lastResult ( java.util.List<java.lang.Object> ) ; } java.util.List<java.lang.Object> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { if ( int == NUMBER ) { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . lastResult ( java.lang.Object ) ; return; } Assert . isTrue ( ObjectUtils . isArray ( java.lang.Object ) ) ; int int = java.lang.reflect.Array . int ( java.lang.Object ) ; for ( int int = NUMBER ; int < int ; int += int ) { int int = java.lang.Math . int ( int , int + int ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object , int , int ) ; if ( int == int - NUMBER ) { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . lastResult ( java.lang.Object ) ; } else { org.springframework.data.gemfire.function.ResultSender<java.lang.Object> . sendResult ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , int int , int int ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; int int = int - int ; if ( int [] .class . boolean ( java.lang.Class<> ) ) { int [] int[] = new int [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { int[] [ int ] = java.lang.reflect.Array . int ( java.lang.Object , int + int ) ; } return int[] ; } if ( float [] .class . boolean ( java.lang.Class<> ) ) { float [] float[] = new float [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { float[] [ int ] = java.lang.reflect.Array . float ( java.lang.Object , int + int ) ; } return float[] ; } if ( double [] .class . boolean ( java.lang.Class<> ) ) { double [] double[] = new double [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { double[] [ int ] = java.lang.reflect.Array . double ( java.lang.Object , int + int ) ; } return double[] ; } if ( boolean [] .class . boolean ( java.lang.Class<> ) ) { boolean [] boolean[] = new boolean [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { boolean[] [ int ] = java.lang.reflect.Array . boolean ( java.lang.Object , int + int ) ; } return boolean[] ; } if ( byte [] .class . boolean ( java.lang.Class<> ) ) { byte [] byte[] = new byte [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { byte[] [ int ] = java.lang.reflect.Array . byte ( java.lang.Object , int + int ) ; } return byte[] ; } if ( short [] .class . boolean ( java.lang.Class<> ) ) { short [] short[] = new short [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { short[] [ int ] = java.lang.reflect.Array . short ( java.lang.Object , int + int ) ; } return short[] ; } if ( long [] .class . boolean ( java.lang.Class<> ) ) { long [] long[] = new long [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { long[] [ int ] = java.lang.reflect.Array . long ( java.lang.Object , int + int ) ; } return long[] ; } if ( char [] .class . boolean ( java.lang.Class<> ) ) { char [] char[] = new char [ int ] ; for( int int = NUMBER ; int < int ; ++ int ) { char[] [ int ] = java.lang.reflect.Array . char ( java.lang.Object , int + int ) ; } return char[] ; } return java.util.Arrays . java.lang.Object[] ( ( java.lang.Object [] ) java.lang.Object , int , int ) ; }  <METHOD_END>
