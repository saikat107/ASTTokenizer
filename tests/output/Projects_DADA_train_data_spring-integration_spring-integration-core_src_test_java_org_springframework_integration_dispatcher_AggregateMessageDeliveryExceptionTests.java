<METHOD_START> private java.util.List<? extends java.lang.Exception> < ? extends java.lang.Exception > java.util.List<? extends java.lang.Exception> ( ) { org.springframework.integration.dispatcher.MessageDeliveryException = new MessageDeliveryException ( org.springframework.integration.dispatcher.Message<> , STRING ) ; return java.util.Arrays . java.util.List ( org.springframework.integration.dispatcher.MessageDeliveryException , new MessageDeliveryException ( org.springframework.integration.dispatcher.Message<> , STRING ) , new MessageDeliveryException ( org.springframework.integration.dispatcher.Message<> , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) { throw org.springframework.integration.dispatcher.AggregateMessageDeliveryException ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.integration.dispatcher.AggregateMessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.dispatcher.AggregateMessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.integration.dispatcher.AggregateMessageDeliveryException . getMessage ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( ( MessageDeliveryException ) org.springframework.integration.dispatcher.AggregateMessageDeliveryException . getCause ( ) , is ( org.springframework.integration.dispatcher.MessageDeliveryException ) ) ; }  <METHOD_END>
