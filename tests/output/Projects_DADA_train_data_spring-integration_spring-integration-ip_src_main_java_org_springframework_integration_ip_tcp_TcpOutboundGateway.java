<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . org.springframework.integration.ip.tcp.Expression = new LiteralExpression ( STRING + long ) ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.ip.tcp.Expression ) { this . org.springframework.integration.ip.tcp.Expression = org.springframework.integration.ip.tcp.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( EvaluationContext org.springframework.integration.ip.tcp.EvaluationContext ) { this . org.springframework.integration.ip.tcp.EvaluationContext = org.springframework.integration.ip.tcp.EvaluationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. doInit ( ) ; if ( this . org.springframework.integration.ip.tcp.EvaluationContext == null ) { this . org.springframework.integration.ip.tcp.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { Assert . notNull ( this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory , this . java.lang.Class<? extends org.springframework.integration.ip.tcp.TcpOutboundGateway> ( ) . java.lang.String ( ) + STRING ) ; boolean boolean = false ; TcpConnection org.springframework.integration.ip.tcp.TcpConnection = null ; java.lang.String java.lang.String = null ; try { if ( ! this . boolean ) { logger . debug ( STRING ) ; if ( ! this . java.util.concurrent.Semaphore . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { throw new MessageTimeoutException ( org.springframework.integration.ip.tcp.Message<> , STRING ) ; } boolean = true ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } org.springframework.integration.ip.tcp.TcpConnection = this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getConnection ( ) ; org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply = new org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply ( this . org.springframework.integration.ip.tcp.Expression . getValue ( this . org.springframework.integration.ip.tcp.EvaluationContext , org.springframework.integration.ip.tcp.Message<> , java.lang.Long .class ) ) ; java.lang.String = org.springframework.integration.ip.tcp.TcpConnection . getConnectionId ( ) ; this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply> . org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply ( java.lang.String , org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } org.springframework.integration.ip.tcp.TcpConnection . send ( org.springframework.integration.ip.tcp.Message<> ) ; Message < ? > org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply . org.springframework.integration.ip.tcp.Message<?> ( ) ; if ( org.springframework.integration.ip.tcp.Message<> == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . forceClose ( org.springframework.integration.ip.tcp.TcpConnection ) ; throw new MessageTimeoutException ( org.springframework.integration.ip.tcp.Message<> , STRING ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.integration.ip.tcp.Message<> ) ; } return org.springframework.integration.ip.tcp.Message<> ; } catch ( java.lang.Exception java.lang.Exception ) { logger . error ( STRING , java.lang.Exception ) ; if ( java.lang.Exception instanceof MessagingException ) { throw ( MessagingException ) java.lang.Exception ; } throw new MessagingException ( STRING , java.lang.Exception ) ; } finally { if ( java.lang.String != null ) { this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply> . org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply ( java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String ) ; } if ( this . boolean ) { org.springframework.integration.ip.tcp.TcpConnection . close ( ) ; } } if ( boolean ) { this . java.util.concurrent.Semaphore . void ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING ) ; } } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.ip.tcp.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ; if ( java.lang.String == null ) { logger . error ( STRING ) ; void ( org.springframework.integration.ip.tcp.Message<> , null , STRING ) ; return false ; } if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + java.lang.String + STRING + org.springframework.integration.ip.tcp.Message<> + STRING ) ; } org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply = this . java.util.Map<java.lang.String,org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply> . org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply ( java.lang.String ) ; if ( org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply == null ) { if ( org.springframework.integration.ip.tcp.Message<> instanceof ErrorMessage ) { return false ; } else { java.lang.String java.lang.String = STRING + java.lang.String ; logger . error ( java.lang.String ) ; void ( org.springframework.integration.ip.tcp.Message<> , java.lang.String , java.lang.String ) ; return false ; } } org.springframework.integration.ip.tcp.TcpOutboundGateway.AsyncReply . void ( org.springframework.integration.ip.tcp.Message<> ) ; return false ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.integration.ip.tcp.Message<?> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { ApplicationEventPublisher org.springframework.integration.ip.tcp.ApplicationEventPublisher = this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . getApplicationEventPublisher ( ) ; if ( org.springframework.integration.ip.tcp.ApplicationEventPublisher != null ) { org.springframework.integration.ip.tcp.ApplicationEventPublisher . publishEvent ( new TcpConnectionFailedCorrelationEvent ( this , java.lang.String , new MessagingException ( org.springframework.integration.ip.tcp.Message<> , java.lang.String ) ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( AbstractClientConnectionFactory org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ) { this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . registerListener ( this ) ; org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . registerSender ( this ) ; this . boolean = org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . isSingleUse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.TcpConnection ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TcpConnection org.springframework.integration.ip.tcp.TcpConnection ) { }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.ip.tcp.MessageChannel ) { this . setOutputChannel ( org.springframework.integration.ip.tcp.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . start ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory . isRunning ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.AbstractConnectionFactory org.springframework.integration.ip.tcp.AbstractConnectionFactory ( ) { return this . org.springframework.integration.ip.tcp.AbstractClientConnectionFactory ; }  <METHOD_END>
<METHOD_START> private void ( long long ) { this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . long = long ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.ip.tcp.Message<?> < ? > org.springframework.integration.ip.tcp.Message<?> ( ) java.lang.Exception { try { if ( ! this . java.util.concurrent.CountDownLatch . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { return null ; } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } boolean boolean = true ; while ( this . org.springframework.integration.ip.tcp.Message<> instanceof ErrorMessage ) { if ( boolean ) { logger . debug ( STRING ) ; this . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; boolean = false ; } else if ( this . org.springframework.integration.ip.tcp.Message<> . getPayload ( ) instanceof MessagingException ) { throw ( MessagingException ) this . org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ; } else { throw new MessagingException ( STRING , ( java.lang.Throwable ) this . org.springframework.integration.ip.tcp.Message<> . getPayload ( ) ) ; } } return this . org.springframework.integration.ip.tcp.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( Message < ? > org.springframework.integration.ip.tcp.Message<?> ) { if ( this . org.springframework.integration.ip.tcp.Message<> == null ) { this . org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.Message<> ; this . java.util.concurrent.CountDownLatch . void ( ) ; } else if ( this . org.springframework.integration.ip.tcp.Message<> instanceof ErrorMessage ) { this . org.springframework.integration.ip.tcp.Message<?> = org.springframework.integration.ip.tcp.Message<> ; this . java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
