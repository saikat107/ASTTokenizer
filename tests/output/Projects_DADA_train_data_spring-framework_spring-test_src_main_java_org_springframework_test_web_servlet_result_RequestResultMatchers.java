<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; assertEquals ( STRING , false , org.springframework.test.web.servlet.result.HttpServletRequest . isAsyncStarted ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; assertEquals ( STRING , false , org.springframework.test.web.servlet.result.HttpServletRequest . isAsyncStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final Matcher < T > org.springframework.test.web.servlet.result.Matcher<T> ) { return new ResultMatcher ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; assertThat ( STRING , ( T ) org.springframework.test.web.servlet.result.MvcResult . getAsyncResult ( ) , org.springframework.test.web.servlet.result.Matcher<T> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; assertThat ( STRING , ( T ) org.springframework.test.web.servlet.result.MvcResult . getAsyncResult ( ) , org.springframework.test.web.servlet.result.Matcher<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.Object java.lang.Object ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; assertEquals ( STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getAsyncResult ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest = org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) ; void ( org.springframework.test.web.servlet.result.HttpServletRequest ) ; assertEquals ( STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getAsyncResult ( ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final Matcher < T > org.springframework.test.web.servlet.result.Matcher<T> ) { return new ResultMatcher ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { T T = ( T ) org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getAttribute ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING , T , org.springframework.test.web.servlet.result.Matcher<T> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { T T = ( T ) org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getAttribute ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING , T , org.springframework.test.web.servlet.result.Matcher<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getAttribute ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final Matcher < T > org.springframework.test.web.servlet.result.Matcher<T> ) { return new ResultMatcher ( ) { @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { T T = ( T ) org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getSession ( ) . getAttribute ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING , T , org.springframework.test.web.servlet.result.Matcher<T> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { T T = ( T ) org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getSession ( ) . getAttribute ( java.lang.String ) ; assertThat ( STRING + java.lang.String + STRING , T , org.springframework.test.web.servlet.result.Matcher<T> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.servlet.result.ResultMatcher org.springframework.test.web.servlet.result.ResultMatcher ( final java.lang.String java.lang.String , final java.lang.Object java.lang.Object ) { return new ResultMatcher ( ) { @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getSession ( ) . getAttribute ( java.lang.String ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MvcResult org.springframework.test.web.servlet.result.MvcResult ) { assertEquals ( STRING + java.lang.String + STRING , java.lang.Object , org.springframework.test.web.servlet.result.MvcResult . getRequest ( ) . getSession ( ) . getAttribute ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private static void void ( HttpServletRequest org.springframework.test.web.servlet.result.HttpServletRequest ) { assertEquals ( STRING , true , org.springframework.test.web.servlet.result.HttpServletRequest . isAsyncStarted ( ) ) ; }  <METHOD_END>
