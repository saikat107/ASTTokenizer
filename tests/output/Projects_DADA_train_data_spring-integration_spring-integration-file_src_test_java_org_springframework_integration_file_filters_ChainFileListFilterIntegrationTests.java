<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( ChainFileListFilter < java.io.File > org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ) { org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new LastModifiedFileListFilter ( ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( ChainFileListFilter < java.io.File > org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ) { org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new SimplePatternFileListFilter ( STRING ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( ChainFileListFilter < java.io.File > org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ) { org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new LastModifiedFileListFilter ( ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( ChainFileListFilter < java.io.File > org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ) { org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new SimplePatternFileListFilter ( STRING ) ) ; org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new LastModifiedFileListFilter ( ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { try ( ChainFileListFilter < java.io.File > org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> = new ChainFileListFilter <> ( ) ) { org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new LastModifiedFileListFilter ( ) ) ; org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . addFilter ( new SimplePatternFileListFilter ( STRING ) ) ; java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = org.springframework.integration.file.filters.ChainFileListFilter<java.io.File> . filterFiles ( java.io.File[] ) ; assertEquals ( NUMBER , java.util.List<java.io.File> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return NUMBER ; }  <METHOD_END>
