<METHOD_START> public void ( MongoEntityInformation < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , MongoOperations org.springframework.data.mongodb.repository.support.MongoOperations ) { this( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , org.springframework.data.mongodb.repository.support.MongoOperations , SimpleEntityPathResolver . INSTANCE ); }  <METHOD_END>
<METHOD_START> public void ( MongoEntityInformation < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , MongoOperations org.springframework.data.mongodb.repository.support.MongoOperations , EntityPathResolver org.springframework.data.mongodb.repository.support.EntityPathResolver ) { super( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , org.springframework.data.mongodb.repository.support.MongoOperations ); Assert . notNull ( org.springframework.data.mongodb.repository.support.EntityPathResolver , STRING ) ; EntityPath < T > org.springframework.data.mongodb.repository.support.EntityPath<T> = org.springframework.data.mongodb.repository.support.EntityPathResolver . createPath ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) ) ; this . org.springframework.data.mongodb.repository.support.PathBuilder<T> = new PathBuilder < T > ( org.springframework.data.mongodb.repository.support.EntityPath<T> . getType ( ) , org.springframework.data.mongodb.repository.support.EntityPath<T> . getMetadata ( ) ) ; this . org.springframework.data.mongodb.repository.support.EntityInformation<T,ID> = org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ; this . org.springframework.data.mongodb.repository.support.MongoOperations = org.springframework.data.mongodb.repository.support.MongoOperations ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( Predicate org.springframework.data.mongodb.repository.support.Predicate ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) . fetchOne ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.mongodb.repository.support.Predicate ) { java.util.List<T> < T > java.util.List<T> = org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) . fetchResults ( ) . getResults ( ) ; return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.mongodb.repository.support.Predicate , org.springframework.data.mongodb.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.mongodb.repository.support.OrderSpecifier<?>[] ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) . orderBy ( org.springframework.data.mongodb.repository.support.OrderSpecifier<?>[] ) . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Predicate org.springframework.data.mongodb.repository.support.Predicate , Sort org.springframework.data.mongodb.repository.support.Sort ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) , org.springframework.data.mongodb.repository.support.Sort ) . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( org.springframework.data.mongodb.repository.support.OrderSpecifier<?> < ? > ... org.springframework.data.mongodb.repository.support.OrderSpecifier<?>[] ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( ) . orderBy ( org.springframework.data.mongodb.repository.support.OrderSpecifier<?>[] ) . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Page<T> < T > org.springframework.data.mongodb.repository.support.Page<T> ( final Predicate org.springframework.data.mongodb.repository.support.Predicate , Pageable org.springframework.data.mongodb.repository.support.Pageable ) { AbstractMongodbQuery < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> = org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) ; return PageableExecutionUtils . getPage ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> , org.springframework.data.mongodb.repository.support.Pageable ) . fetchResults ( ) . getResults ( ) , org.springframework.data.mongodb.repository.support.Pageable , ( ) createQueryFor ( predicate ) . fetchCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.mongodb.repository.support.Page<T> < T > org.springframework.data.mongodb.repository.support.Page<T> ( Pageable org.springframework.data.mongodb.repository.support.Pageable ) { AbstractMongodbQuery < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> = org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( ) ; return PageableExecutionUtils . getPage ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> , org.springframework.data.mongodb.repository.support.Pageable ) . fetchResults ( ) . getResults ( ) , org.springframework.data.mongodb.repository.support.Pageable , ( ) createQuery ( ) . fetchCount ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<T> < T > java.util.List<T> ( Sort org.springframework.data.mongodb.repository.support.Sort ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( ) , org.springframework.data.mongodb.repository.support.Sort ) . fetchResults ( ) . getResults ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( Predicate org.springframework.data.mongodb.repository.support.Predicate ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) . fetchCount ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Predicate org.springframework.data.mongodb.repository.support.Predicate ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.Predicate ) . fetchCount ( ) > NUMBER ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( Predicate org.springframework.data.mongodb.repository.support.Predicate ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( ) . where ( org.springframework.data.mongodb.repository.support.Predicate ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( ) { return new SpringDataMongodbQuery < T > ( org.springframework.data.mongodb.repository.support.MongoOperations , org.springframework.data.mongodb.repository.support.EntityInformation<T,ID> . getJavaType ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( AbstractMongodbQuery < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> , Pageable org.springframework.data.mongodb.repository.support.Pageable ) { if ( org.springframework.data.mongodb.repository.support.Pageable == null ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ; } org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> = org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> . offset ( org.springframework.data.mongodb.repository.support.Pageable . getOffset ( ) ) . limit ( org.springframework.data.mongodb.repository.support.Pageable . getPageSize ( ) ) ; return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> , org.springframework.data.mongodb.repository.support.Pageable . getSort ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ( AbstractMongodbQuery < T , SpringDataMongodbQuery < T > > org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> , Sort org.springframework.data.mongodb.repository.support.Sort ) { if ( org.springframework.data.mongodb.repository.support.Sort == null ) { return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ; } if ( org.springframework.data.mongodb.repository.support.Sort instanceof QSort ) { java.util.List<org.springframework.data.mongodb.repository.support.OrderSpecifier<?>> < OrderSpecifier < ? > > java.util.List<org.springframework.data.mongodb.repository.support.OrderSpecifier<?>> = ( ( QSort ) org.springframework.data.mongodb.repository.support.Sort ) . getOrderSpecifiers ( ) ; org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> . orderBy ( java.util.List<org.springframework.data.mongodb.repository.support.OrderSpecifier<?>> . toArray ( new OrderSpecifier < ? > [ java.util.List<org.springframework.data.mongodb.repository.support.OrderSpecifier<?>> . size ( ) ] ) ) ; return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ; } for ( Order org.springframework.data.mongodb.repository.support.Order : org.springframework.data.mongodb.repository.support.Sort ) { org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> . orderBy ( org.springframework.data.mongodb.repository.support.OrderSpecifier<?> ( org.springframework.data.mongodb.repository.support.Order ) ) ; } return org.springframework.data.mongodb.repository.support.AbstractMongodbQuery<T,org.springframework.data.mongodb.repository.support.SpringDataMongodbQuery<T>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.data.mongodb.repository.support.OrderSpecifier<?> < ? > org.springframework.data.mongodb.repository.support.OrderSpecifier<?> ( Order org.springframework.data.mongodb.repository.support.Order ) { Expression < java.lang.Object > org.springframework.data.mongodb.repository.support.Expression<java.lang.Object> = org.springframework.data.mongodb.repository.support.PathBuilder<T> . get ( org.springframework.data.mongodb.repository.support.Order . getProperty ( ) ) ; return new OrderSpecifier ( org.springframework.data.mongodb.repository.support.Order . isAscending ( ) ? com . querydsl . core . types . Order . ASC : com . querydsl . core . types . Order . DESC , org.springframework.data.mongodb.repository.support.Expression<java.lang.Object> ) ; }  <METHOD_END>
