<METHOD_START> public static boolean boolean ( ResourceTransactionManager org.springframework.transaction.support.ResourceTransactionManager , java.lang.Object java.lang.Object ) { return java.lang.Object ( org.springframework.transaction.support.ResourceTransactionManager . getResourceFactory ( ) ) . equals ( java.lang.Object ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; java.lang.Object java.lang.Object = java.lang.Object ; if ( java.lang.Object instanceof InfrastructureProxy ) { java.lang.Object = ( ( InfrastructureProxy ) java.lang.Object ) . getWrappedObject ( ) ; } if ( boolean ) { java.lang.Object = org.springframework.transaction.support.TransactionSynchronizationUtils.ScopedProxyUnwrapper . java.lang.Object ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public static void void ( ) { for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : TransactionSynchronizationManager . getSynchronizations ( ) ) { org.springframework.transaction.support.TransactionSynchronization . flush ( ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( boolean boolean ) { for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : TransactionSynchronizationManager . getSynchronizations ( ) ) { org.springframework.transaction.support.TransactionSynchronization . beforeCommit ( boolean ) ; } }  <METHOD_END>
<METHOD_START> public static void void ( ) { for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : TransactionSynchronizationManager . getSynchronizations ( ) ) { try { org.springframework.transaction.support.TransactionSynchronization . beforeCompletion ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( ) { void ( TransactionSynchronizationManager . getSynchronizations ( ) ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { if ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> != null ) { for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { org.springframework.transaction.support.TransactionSynchronization . afterCommit ( ) ; } } }  <METHOD_END>
<METHOD_START> public static void void ( int int ) { java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> = TransactionSynchronizationManager . getSynchronizations ( ) ; void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> , int ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> < TransactionSynchronization > java.util.List<org.springframework.transaction.support.TransactionSynchronization> , int int ) { if ( java.util.List<org.springframework.transaction.support.TransactionSynchronization> != null ) { for ( TransactionSynchronization org.springframework.transaction.support.TransactionSynchronization : java.util.List<org.springframework.transaction.support.TransactionSynchronization> ) { try { org.springframework.transaction.support.TransactionSynchronization . afterCompletion ( int ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.transaction.support.Log . error ( STRING , java.lang.Throwable ) ; } } } }  <METHOD_END>
<METHOD_START> public static java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof ScopedObject ) { return ( ( ScopedObject ) java.lang.Object ) . getTargetObject ( ) ; } else { return java.lang.Object ; } }  <METHOD_END>
