<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory = new org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setDefaultTargetSessionFactory ( new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<K,V> ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( STRING ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<K,V> ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( STRING ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , new java.lang.Object ( ) ) ) ; try { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setSessionFactoryLookup ( new MapSessionFactoryLookup ( ) ) ; try { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; fail ( STRING ) ; } catch ( SessionFactoryLookupFailureException org.springframework.cassandra.core.session.lookup.SessionFactoryLookupFailureException ) { assertThat ( org.springframework.cassandra.core.session.lookup.SessionFactoryLookupFailureException ) . hasMessageContaining ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setLenientFallback ( false ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<K,V> ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( STRING ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<K,V> ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( null ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MapSessionFactoryLookup org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup = new MapSessionFactoryLookup ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setSessionFactoryLookup ( org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( STRING ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MapSessionFactoryLookup org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup = new MapSessionFactoryLookup ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setSessionFactoryLookup ( org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . setTargetSessionFactories ( ( java.util.Map ) org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup . getSessionFactories ( ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . void ( STRING ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; org.springframework.cassandra.core.session.lookup.MapSessionFactoryLookup . addSessionFactory ( STRING , new DefaultSessionFactory ( org.springframework.cassandra.core.session.lookup.Session ) ) ; org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . afterPropertiesSet ( ) ; assertThat ( org.springframework.cassandra.core.session.lookup.AbstractRoutingSessionFactoryUnitTests.StubbedRoutingSessionFactory . getSession ( ) ) . isSameAs ( org.springframework.cassandra.core.session.lookup.Session ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return java.lang.String ; }  <METHOD_END>
