<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; SimpMessagingTemplate org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate = new SimpMessagingTemplate ( this . org.springframework.messaging.simp.annotation.support.SubscribableChannel ) ; org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate . setMessageConverter ( this . org.springframework.messaging.simp.annotation.support.MessageConverter ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler ( org.springframework.messaging.simp.annotation.support.SimpMessagingTemplate , this . org.springframework.messaging.simp.annotation.support.SubscribableChannel , this . org.springframework.messaging.simp.annotation.support.SubscribableChannel ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setApplicationContext ( new StaticApplicationContext ( ) ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setValidator ( new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.StringTestValidator ( java.lang.String ) ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . afterPropertiesSet ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertNull ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertNull ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; assertTrue ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) instanceof java.lang.Long ) ; assertEquals ( NUMBER , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; HandlerMethod org.springframework.messaging.simp.annotation.support.HandlerMethod = ( HandlerMethod ) this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.HandlerMethod ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.HandlerMethod . getMethod ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionAttributes ( java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setDestination ( STRING ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) . build ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setPathMatcher ( new AntPathMatcher ( STRING ) ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setDestinationPrefixes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController . java.lang.String ) ; org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.DotPathSeparatorController . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Message org.springframework.messaging.simp.annotation.support.Message = ( Message ) MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; given ( this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; given ( this . org.springframework.messaging.simp.annotation.support.MessageConverter . toMessage ( any ( ) , any ( MessageHeaders .class ) ) ) . willReturn ( org.springframework.messaging.simp.annotation.support.Message ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setDestinationPrefixes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> . run ( ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageConverter ) . toMessage ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<java.lang.Object> . capture ( ) , any ( MessageHeaders .class ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<java.lang.Object> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Message org.springframework.messaging.simp.annotation.support.Message = ( Message ) MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; given ( this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; given ( this . org.springframework.messaging.simp.annotation.support.MessageConverter . toMessage ( any ( ) , any ( MessageHeaders .class ) ) ) . willReturn ( org.springframework.messaging.simp.annotation.support.Message ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setDestinationPrefixes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> . run ( ) ; assertTrue ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.ListenableFutureController . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Message org.springframework.messaging.simp.annotation.support.Message = ( Message ) MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; given ( this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; given ( this . org.springframework.messaging.simp.annotation.support.MessageConverter . toMessage ( any ( ) , any ( MessageHeaders .class ) ) ) . willReturn ( org.springframework.messaging.simp.annotation.support.Message ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setDestinationPrefixes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertNotNull ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController . java.util.concurrent.CompletableFuture<java.lang.String> ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController . java.util.concurrent.CompletableFuture<java.lang.String> . boolean ( STRING ) ; verify ( this . org.springframework.messaging.simp.annotation.support.MessageConverter ) . toMessage ( this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<java.lang.Object> . capture ( ) , any ( MessageHeaders .class ) ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.ArgumentCaptor<java.lang.Object> . getValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Message org.springframework.messaging.simp.annotation.support.Message = ( Message ) MessageBuilder . withPayload ( new byte [ NUMBER ] ) . build ( ) ; given ( this . org.springframework.messaging.simp.annotation.support.SubscribableChannel . send ( any ( Message .class ) ) ) . willReturn ( true ) ; given ( this . org.springframework.messaging.simp.annotation.support.MessageConverter . toMessage ( any ( ) , any ( MessageHeaders .class ) ) ) . willReturn ( org.springframework.messaging.simp.annotation.support.Message ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController = new org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController ( ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setDestinationPrefixes ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController . java.util.concurrent.CompletableFuture<java.lang.String> . boolean ( new java.lang.IllegalStateException ( ) ) ; assertTrue ( org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.CompletableFutureController . boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < ? > org.springframework.messaging.simp.annotation.support.Message<?> = org.springframework.messaging.simp.annotation.support.Message<?> ( STRING ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . setEmbeddedValueResolver ( value -> ( STRING . equals ( value ) ? STRING : value ) ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . void ( this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController ) ; this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestSimpAnnotationMethodMessageHandler . handleMessage ( org.springframework.messaging.simp.annotation.support.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.simp.annotation.support.SimpAnnotationMethodMessageHandlerTests.TestController . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.Message<?> < ? > org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String java.lang.String ) { return org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String , null ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.messaging.simp.annotation.support.Message<?> < ? > org.springframework.messaging.simp.annotation.support.Message<?> ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setSessionAttributes ( new java.util.HashMap <> ( ) ) ; org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setDestination ( java.lang.String ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor . setHeader ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ) ; } } return MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.messaging.simp.annotation.support.SimpMessageHeaderAccessor ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public void ( SimpMessageSendingOperations org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations , SubscribableChannel org.springframework.messaging.simp.annotation.support.SubscribableChannel , MessageChannel org.springframework.messaging.simp.annotation.support.MessageChannel ) { super( org.springframework.messaging.simp.annotation.support.SubscribableChannel , org.springframework.messaging.simp.annotation.support.MessageChannel , org.springframework.messaging.simp.annotation.support.SimpMessageSendingOperations ); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object java.lang.Object ) { super. detectHandlerMethods ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( @ Header java.lang.String java.lang.String , @ Headers java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( @ Header ( name = STRING , required = false ) java.lang.String java.lang.String , @ Header ( STRING ) java.util.Optional<java.lang.String> < java.lang.String > java.util.Optional<java.lang.String> ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , ( java.util.Optional<java.lang.String> . boolean ( ) ? java.util.Optional<java.lang.String> . java.lang.String ( ) : null ) ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( @ DestinationVariable ( STRING ) java.lang.String java.lang.String , @ DestinationVariable ( STRING ) java.lang.String java.lang.String ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ SubscribeMapping ( STRING ) public void void ( @ DestinationVariable ( STRING ) java.lang.String java.lang.String , @ DestinationVariable ( STRING ) java.lang.String java.lang.String ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( @ DestinationVariable ( STRING ) java.lang.Long java.lang.Long ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( @ Validated @ Payload java.lang.String java.lang.String ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler ( MethodArgumentNotValidException .class ) public void void ( ) { this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler ( java.lang.IllegalStateException .class ) public void void ( HandlerMethod org.springframework.messaging.simp.annotation.support.HandlerMethod ) { this . java.lang.String = STRING ; this . java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.messaging.simp.annotation.support.HandlerMethod ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { SimpAttributes org.springframework.messaging.simp.annotation.support.SimpAttributes = SimpAttributesContextHolder . currentAttributes ( ) ; assertThat ( org.springframework.messaging.simp.annotation.support.SimpAttributes . getAttribute ( STRING ) , is ( STRING ) ) ; this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { this . java.lang.String = STRING ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> < java.lang.String > org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> ( ) { this . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( ( ) STRING ) ; return this . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> < java.lang.String > org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> ( ) { this . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> = new ListenableFutureTask <> ( ( ) { throw new IllegalStateException ( ) ; } ) ; return this . org.springframework.messaging.simp.annotation.support.ListenableFutureTask<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler ( java.lang.IllegalStateException .class ) public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public java.util.concurrent.CompletableFuture<java.lang.String> < java.lang.String > java.util.concurrent.CompletableFuture<java.lang.String> ( ) { this . java.util.concurrent.CompletableFuture<java.lang.String> = new java.util.concurrent.CompletableFuture<java.lang.String> <> ( ) ; return this . java.util.concurrent.CompletableFuture<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler ( java.lang.IllegalStateException .class ) public void void ( ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.String .class . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , Errors org.springframework.messaging.simp.annotation.support.Errors ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.messaging.simp.annotation.support.Errors . reject ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
