<METHOD_START> @ Before public void void ( ) java.lang.Exception { java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; java.sql.ResultSet = mock ( java.sql.ResultSet .class ) ; java.sql.ResultSetMetaData = mock ( java.sql.ResultSetMetaData .class ) ; org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate = new NamedParameterJdbcTemplate ( javax.sql.DataSource ) ; given ( javax.sql.DataSource . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( java.sql.ResultSetMetaData . int ( ) ) . willReturn ( NUMBER ) ; given ( java.sql.ResultSetMetaData . java.lang.String ( NUMBER ) ) . willReturn ( STRING ) ; given ( java.sql.Connection . java.sql.PreparedStatement ( anyString ( ) ) ) . willReturn ( java.sql.PreparedStatement ) ; given ( java.sql.PreparedStatement . java.sql.ResultSet ( ) ) . willReturn ( java.sql.ResultSet ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { verify ( java.sql.PreparedStatement ) . close ( ) ; verify ( java.sql.ResultSet ) . close ( ) ; verify ( java.sql.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , true , false ) ; given ( java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER , NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForList ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( false ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForList ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForList ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource ) ; assertEquals ( STRING , NUMBER , java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( NUMBER ) . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.util.List<java.lang.Integer> < java.lang.Integer > java.util.List<java.lang.Integer> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForList ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , java.lang.Integer .class ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . int ( ) ) ; assertEquals ( STRING , NUMBER , java.util.List<java.lang.Integer> . java.lang.Integer ( NUMBER ) . int ( ) ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . java.lang.Object ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForMap ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource ) ; assertEquals ( STRING , NUMBER , ( ( java.lang.Integer ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . int ( ) ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , new RowMapper < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; } } ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.sql.ResultSet java.sql.ResultSet , int int ) throws java.sql.SQLException { return java.sql.ResultSet . int ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , java.util.Map<java.lang.String,java.lang.Object> , java.lang.Integer .class ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , java.lang.Integer .class ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER ) ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( java.lang.String , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , java.lang.Integer .class ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( java.sql.Connection ) . prepareStatement ( java.lang.String ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; java.util.List<java.lang.Object[]> < java.lang.Object [] > java.util.List<java.lang.Object[]> = new java.util.ArrayList<java.lang.Object[]> <> ( ) ; java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { NUMBER , STRING } ) ; java.util.List<java.lang.Object[]> . boolean ( new java.lang.Object [] { NUMBER , STRING } ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , java.util.List<java.lang.Object[]> ) ; java.lang.Object java.lang.Object = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , java.lang.Integer .class ) ; assertTrue ( STRING , java.lang.Object instanceof java.lang.Integer ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . int ( NUMBER ) ) . willReturn ( NUMBER ) ; MapSqlParameterSource org.springframework.jdbc.core.namedparam.MapSqlParameterSource = new MapSqlParameterSource ( ) ; org.springframework.jdbc.core.namedparam.MapSqlParameterSource . addValue ( STRING , NUMBER ) ; int int = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.MapSqlParameterSource , java.lang.Integer .class ) . intValue ( ) ; assertEquals ( STRING , NUMBER , int ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new org.springframework.jdbc.core.namedparam.NamedParameterQueryTests.ParameterBean ( NUMBER ) ) ; long long = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource , java.lang.Long .class ) . longValue ( ) ; assertEquals ( STRING , NUMBER , long ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER , java.sql.Types . int ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { given ( java.sql.ResultSet . java.sql.ResultSetMetaData ( ) ) . willReturn ( java.sql.ResultSetMetaData ) ; given ( java.sql.ResultSet . boolean ( ) ) . willReturn ( true , false ) ; given ( java.sql.ResultSet . long ( NUMBER ) ) . willReturn ( NUMBER ) ; BeanPropertySqlParameterSource org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource = new BeanPropertySqlParameterSource ( new org.springframework.jdbc.core.namedparam.NamedParameterQueryTests.ParameterCollectionBean ( NUMBER , NUMBER ) ) ; long long = org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate . queryForObject ( STRING , org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource , java.lang.Long .class ) . longValue ( ) ; assertEquals ( STRING , NUMBER , long ) ; verify ( java.sql.Connection ) . prepareStatement ( STRING ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; verify ( java.sql.PreparedStatement ) . setObject ( NUMBER , NUMBER ) ; }  <METHOD_END>
<METHOD_START> public void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Integer ... java.lang.Integer[] ) { this . java.util.Collection<java.lang.Integer> = java.util.Arrays . java.util.List<java.lang.Integer> ( java.lang.Integer[] ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.Integer> < java.lang.Integer > java.util.Collection<java.lang.Integer> ( ) { return java.util.Collection<java.lang.Integer> ; }  <METHOD_END>
