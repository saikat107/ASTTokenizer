<METHOD_START> @ Test public void void ( ) { assertEquals ( STRING , SimpMessageHeaderAccessor . create ( ) . getShortLogMessage ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setDestination ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setUser ( new TestPrincipal ( STRING ) ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionAttributes ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ; assertEquals ( STRING + STRING , org.springframework.messaging.simp.SimpMessageHeaderAccessor . getShortLogMessage ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpMessageHeaderAccessor org.springframework.messaging.simp.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setDestination ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSubscriptionId ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setUser ( new TestPrincipal ( STRING ) ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setSessionAttributes ( java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ; org.springframework.messaging.simp.SimpMessageHeaderAccessor . setNativeHeader ( STRING , STRING ) ; assertEquals ( STRING + STRING + STRING , org.springframework.messaging.simp.SimpMessageHeaderAccessor . getDetailedLogMessage ( STRING ) ) ; }  <METHOD_END>
