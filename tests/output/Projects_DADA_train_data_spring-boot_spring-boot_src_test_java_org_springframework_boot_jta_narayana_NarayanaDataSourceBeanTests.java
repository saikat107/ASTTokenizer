<METHOD_START> @ Before public void void ( ) { this . javax.sql.XADataSource = mock ( javax.sql.XADataSource .class ) ; this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean = new NarayanaDataSourceBean ( this . javax.sql.XADataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . isWrapperFor ( javax.sql.DataSource .class ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . isWrapperFor ( javax.sql.XADataSource .class ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . unwrap ( javax.sql.DataSource .class ) ) . isInstanceOf ( javax.sql.DataSource .class ) ; assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . unwrap ( javax.sql.DataSource .class ) ) . isSameAs ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . unwrap ( javax.sql.XADataSource .class ) ) . isInstanceOf ( javax.sql.XADataSource .class ) ; assertThat ( this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . unwrap ( javax.sql.XADataSource .class ) ) . isSameAs ( this . javax.sql.XADataSource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.XAConnection javax.sql.XAConnection = mock ( javax.sql.XAConnection .class ) ; given ( javax.sql.XAConnection . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( this . javax.sql.XADataSource . javax.sql.XAConnection ( STRING , STRING ) ) . willReturn ( javax.sql.XAConnection ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . XADataSource , this . javax.sql.XADataSource ) ; java.sql.Connection java.sql.Connection = this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . getConnection ( ) ; assertThat ( java.sql.Connection ) . isInstanceOf ( ConnectionImple .class ) ; java.sql.Connection . void ( ) ; verify ( this . javax.sql.XADataSource , times ( NUMBER ) ) . getXAConnection ( STRING , STRING ) ; verify ( javax.sql.XAConnection , times ( NUMBER ) ) . getConnection ( ) ; verify ( java.sql.Connection , times ( NUMBER ) ) . commit ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; javax.sql.XAConnection javax.sql.XAConnection = mock ( javax.sql.XAConnection .class ) ; given ( javax.sql.XAConnection . java.sql.Connection ( ) ) . willReturn ( java.sql.Connection ) ; given ( this . javax.sql.XADataSource . javax.sql.XAConnection ( java.lang.String , java.lang.String ) ) . willReturn ( javax.sql.XAConnection ) ; java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . XADataSource , this . javax.sql.XADataSource ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . userName , java.lang.String ) ; java.util.Properties . java.lang.Object ( TransactionalDriver . password , java.lang.String ) ; java.sql.Connection java.sql.Connection = this . org.springframework.boot.jta.narayana.NarayanaDataSourceBean . getConnection ( java.lang.String , java.lang.String ) ; assertThat ( java.sql.Connection ) . isInstanceOf ( ConnectionImple .class ) ; java.sql.Connection . void ( ) ; verify ( this . javax.sql.XADataSource , times ( NUMBER ) ) . getXAConnection ( java.lang.String , java.lang.String ) ; verify ( javax.sql.XAConnection , times ( NUMBER ) ) . getConnection ( ) ; verify ( java.sql.Connection , times ( NUMBER ) ) . commit ( ) ; }  <METHOD_END>
