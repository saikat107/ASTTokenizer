<METHOD_START> @ java.lang.Override public abstract int int ( )  <METHOD_END>
<METHOD_START> protected void void ( TestContext org.springframework.test.context.support.TestContext , HierarchyMode org.springframework.test.context.support.HierarchyMode ) { org.springframework.test.context.support.TestContext . markApplicationContextDirty ( org.springframework.test.context.support.HierarchyMode ) ; org.springframework.test.context.support.TestContext . setAttribute ( DependencyInjectionTestExecutionListener . REINJECT_DEPENDENCIES_ATTRIBUTE , java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( TestContext org.springframework.test.context.support.TestContext , MethodMode org.springframework.test.context.support.MethodMode , ClassMode org.springframework.test.context.support.ClassMode ) throws java.lang.Exception { Assert . notNull ( org.springframework.test.context.support.TestContext , STRING ) ; Assert . notNull ( org.springframework.test.context.support.MethodMode , STRING ) ; Assert . notNull ( org.springframework.test.context.support.ClassMode , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.TestContext . getTestClass ( ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.test.context.support.TestContext . getTestMethod ( ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.reflect.Method , STRING ) ; DirtiesContext org.springframework.test.context.support.DirtiesContext = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , DirtiesContext .class ) ; DirtiesContext org.springframework.test.context.support.DirtiesContext = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , DirtiesContext .class ) ; boolean boolean = ( org.springframework.test.context.support.DirtiesContext != null ) ; boolean boolean = ( org.springframework.test.context.support.DirtiesContext != null ) ; MethodMode org.springframework.test.context.support.MethodMode = ( boolean ? org.springframework.test.context.support.DirtiesContext . methodMode ( ) : null ) ; ClassMode org.springframework.test.context.support.ClassMode = ( boolean ? org.springframework.test.context.support.DirtiesContext . classMode ( ) : null ) ; if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { java.lang.String java.lang.String = ( org.springframework.test.context.support.ClassMode . name ( ) . startsWith ( STRING ) ? STRING : STRING ) ; org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING + STRING , java.lang.String , org.springframework.test.context.support.TestContext , boolean , org.springframework.test.context.support.ClassMode , boolean , org.springframework.test.context.support.MethodMode ) ) ; } if ( ( org.springframework.test.context.support.MethodMode == org.springframework.test.context.support.MethodMode ) || ( org.springframework.test.context.support.ClassMode == org.springframework.test.context.support.ClassMode ) ) { HierarchyMode org.springframework.test.context.support.HierarchyMode = ( boolean ? org.springframework.test.context.support.DirtiesContext . hierarchyMode ( ) : org.springframework.test.context.support.DirtiesContext . hierarchyMode ( ) ) ; void ( org.springframework.test.context.support.TestContext , org.springframework.test.context.support.HierarchyMode ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( TestContext org.springframework.test.context.support.TestContext , ClassMode org.springframework.test.context.support.ClassMode ) throws java.lang.Exception { Assert . notNull ( org.springframework.test.context.support.TestContext , STRING ) ; Assert . notNull ( org.springframework.test.context.support.ClassMode , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.test.context.support.TestContext . getTestClass ( ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; DirtiesContext org.springframework.test.context.support.DirtiesContext = AnnotatedElementUtils . findMergedAnnotation ( java.lang.Class<> , DirtiesContext .class ) ; boolean boolean = ( org.springframework.test.context.support.DirtiesContext != null ) ; ClassMode org.springframework.test.context.support.ClassMode = ( boolean ? org.springframework.test.context.support.DirtiesContext . classMode ( ) : null ) ; if ( org.springframework.test.context.support.Log . isDebugEnabled ( ) ) { java.lang.String java.lang.String = ( org.springframework.test.context.support.ClassMode . name ( ) . startsWith ( STRING ) ? STRING : STRING ) ; org.springframework.test.context.support.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.String , org.springframework.test.context.support.TestContext , boolean , org.springframework.test.context.support.ClassMode ) ) ; } if ( org.springframework.test.context.support.ClassMode == org.springframework.test.context.support.ClassMode ) { void ( org.springframework.test.context.support.TestContext , org.springframework.test.context.support.DirtiesContext . hierarchyMode ( ) ) ; } }  <METHOD_END>
