<METHOD_START> public void void ( ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder ) { this . org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder ( ) { return this . org.springframework.jdbc.datasource.ConnectionHolder ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return ( this . org.springframework.jdbc.datasource.ConnectionHolder != null ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return this . java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.jdbc.datasource.TransactionException { ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ( ) ; try { if ( ! org.springframework.jdbc.datasource.ConnectionHolder . supportsSavepoints ( ) ) { throw new NestedTransactionNotSupportedException ( STRING ) ; } if ( org.springframework.jdbc.datasource.ConnectionHolder . isRollbackOnly ( ) ) { throw new CannotCreateTransactionException ( STRING ) ; } return org.springframework.jdbc.datasource.ConnectionHolder . createSavepoint ( ) ; } catch ( java.sql.SQLException java.sql.SQLException ) { throw new CannotCreateTransactionException ( STRING , java.sql.SQLException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws org.springframework.jdbc.datasource.TransactionException { ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ( ) ; try { org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) . rollback ( ( java.sql.Savepoint ) java.lang.Object ) ; org.springframework.jdbc.datasource.ConnectionHolder . resetRollbackOnly ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new TransactionSystemException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object ) throws org.springframework.jdbc.datasource.TransactionException { ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder = org.springframework.jdbc.datasource.ConnectionHolder ( ) ; try { org.springframework.jdbc.datasource.ConnectionHolder . getConnection ( ) . releaseSavepoint ( ( java.sql.Savepoint ) java.lang.Object ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.jdbc.datasource.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jdbc.datasource.ConnectionHolder org.springframework.jdbc.datasource.ConnectionHolder ( ) org.springframework.jdbc.datasource.TransactionException { if ( ! boolean ( ) ) { throw new NestedTransactionNotSupportedException ( STRING ) ; } if ( ! boolean ( ) ) { throw new TransactionUsageException ( STRING ) ; } return org.springframework.jdbc.datasource.ConnectionHolder ( ) ; }  <METHOD_END>
