<METHOD_START> @ java.lang.Override protected org.springframework.http.server.reactive.HttpHandler org.springframework.http.server.reactive.HttpHandler ( ) { return org.springframework.http.server.reactive.ZeroCopyIntegrationTests.ZeroCopyHandler ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assumeTrue ( server instanceof ReactorHttpServer || server instanceof UndertowHttpServer ) ; RestTemplate org.springframework.http.server.reactive.RestTemplate = new RestTemplate ( ) ; RequestEntity < ? > org.springframework.http.server.reactive.RequestEntity<?> = RequestEntity . get ( new java.net.URI ( STRING + port ) ) . build ( ) ; ResponseEntity < byte [] > org.springframework.http.server.reactive.ResponseEntity<byte[]> = org.springframework.http.server.reactive.RestTemplate . exchange ( org.springframework.http.server.reactive.RequestEntity<> , byte [] .class ) ; Resource org.springframework.http.server.reactive.Resource = new ClassPathResource ( STRING , org.springframework.http.server.reactive.ZeroCopyIntegrationTests .class ) ; assertTrue ( org.springframework.http.server.reactive.ResponseEntity<byte[]> . hasBody ( ) ) ; assertEquals ( org.springframework.http.server.reactive.Resource . contentLength ( ) , org.springframework.http.server.reactive.ResponseEntity<byte[]> . getHeaders ( ) . getContentLength ( ) ) ; assertEquals ( org.springframework.http.server.reactive.Resource . contentLength ( ) , org.springframework.http.server.reactive.ResponseEntity<byte[]> . getBody ( ) . length ) ; assertEquals ( MediaType . IMAGE_PNG , org.springframework.http.server.reactive.ResponseEntity<byte[]> . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.server.reactive.Mono<java.lang.Void> ( ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest , ServerHttpResponse org.springframework.http.server.reactive.ServerHttpResponse ) { try { ZeroCopyHttpOutputMessage org.springframework.http.server.reactive.ZeroCopyHttpOutputMessage = ( ZeroCopyHttpOutputMessage ) org.springframework.http.server.reactive.ServerHttpResponse ; Resource org.springframework.http.server.reactive.Resource = new ClassPathResource ( STRING , org.springframework.http.server.reactive.ZeroCopyIntegrationTests .class ) ; java.io.File java.io.File = org.springframework.http.server.reactive.Resource . getFile ( ) ; org.springframework.http.server.reactive.ZeroCopyHttpOutputMessage . getHeaders ( ) . setContentType ( MediaType . IMAGE_PNG ) ; org.springframework.http.server.reactive.ZeroCopyHttpOutputMessage . getHeaders ( ) . setContentLength ( java.io.File . long ( ) ) ; return org.springframework.http.server.reactive.ZeroCopyHttpOutputMessage . writeWith ( java.io.File , NUMBER , java.io.File . long ( ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return Mono . error ( java.lang.Throwable ) ; } }  <METHOD_END>
