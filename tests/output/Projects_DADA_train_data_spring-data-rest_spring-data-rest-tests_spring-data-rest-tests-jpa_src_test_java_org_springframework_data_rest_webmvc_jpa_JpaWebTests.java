<METHOD_START> @ java.lang.Override @ Before public void void ( ) { org.springframework.data.rest.webmvc.jpa.TestDataPopulator . populateRepositories ( ) ; super. setUp ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Iterable<java.lang.String> < java.lang.String > java.lang.Iterable<java.lang.String> ( ) { return java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ( ) java.lang.Exception { return java.util.Collections . java.util.Map ( STRING , readFileFromClasspath ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap < java.lang.String , java.lang.String > ( ) ; org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; return org.springframework.data.rest.webmvc.jpa.MultiValueMap<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( doesNotHaveLinkWithRel ( org.springframework.data.rest.webmvc.jpa.ResourceMappings . getMetadataFor ( CreditCard .class ) . getRel ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertDoesNotHaveLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; client . assertHasLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; client . assertHasLinkWithRel ( Link . REL_PREVIOUS , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertDoesNotHaveLinkWithRel ( Link . REL_NEXT , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; Link org.springframework.data.rest.webmvc.jpa.Link = assertHasContentLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertThat ( client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; assertHasJsonPathValue ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( put ( STRING , NUMBER ) . content ( readFileFromClasspath ( STRING ) ) . contentType ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isCreated ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; ObjectMapper org.springframework.data.rest.webmvc.jpa.ObjectMapper = new ObjectMapper ( ) ; Person org.springframework.data.rest.webmvc.jpa.Person = new Person ( STRING , STRING ) ; org.springframework.data.rest.webmvc.jpa.Person . setAge ( NUMBER ) ; org.springframework.data.rest.webmvc.jpa.Person . setHeight ( NUMBER ) ; org.springframework.data.rest.webmvc.jpa.Person . setWeight ( NUMBER ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathDoesntExist ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathDoesntExist ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathDoesntExist ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . APPLICATION_JSON ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . APPLICATION_JSON ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isNull ( ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) , equalTo ( STRING ) ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) , equalTo ( STRING ) ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , STRING , MediaType . APPLICATION_JSON ) ; assertThat ( ( java.lang.String ) JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) , equalTo ( STRING ) ) ; assertNull ( JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String ( java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . expand ( ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . expand ( ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . expand ( ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String ( java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING , STRING ) ; putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String ( java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String ( java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; patchAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) , org.springframework.data.rest.webmvc.jpa.MediaType ) ; java.lang.String java.lang.String = new UriTemplate ( STRING ) . match ( java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . getHref ( ) ) . get ( STRING ) ; deleteAndVerify ( new Link ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) + STRING + java.lang.String ) ) ; void ( org.springframework.data.rest.webmvc.jpa.Link , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Person org.springframework.data.rest.webmvc.jpa.Person = new Person ( ) ; org.springframework.data.rest.webmvc.jpa.Person . setFirstName ( STRING ) ; org.springframework.data.rest.webmvc.jpa.Person . setLastName ( null ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) , MediaType . APPLICATION_JSON ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) ; assertEquals ( JsonPath . read ( java.lang.String , STRING ) , STRING ) ; assertNull ( JsonPath . read ( java.lang.String , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Person org.springframework.data.rest.webmvc.jpa.Person = new Person ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) . replace ( STRING , STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = putAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( get ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) ) . andExpect ( status ( ) . isMethodNotAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( post ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) . content ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) ) . andExpect ( status ( ) . isMethodNotAllowed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; Link org.springframework.data.rest.webmvc.jpa.Link = assertContentLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse , true ) . expand ( ) ; UriComponentsBuilder org.springframework.data.rest.webmvc.jpa.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.UriComponentsBuilder . queryParam ( STRING , STRING ) . build ( ) . toUriString ( ) ; org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = mvc . perform ( get ( java.lang.String ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING , is ( NUMBER ) ) ) . andReturn ( ) . getResponse ( ) ; assertJsonPathDoesntExist ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.rest.webmvc.jpa.RelProvider . getCollectionResourceRelFor ( Person .class ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Person org.springframework.data.rest.webmvc.jpa.Person = new Person ( STRING , STRING ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) , MediaType . parseMediaType ( STRING ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) ; JSONArray org.springframework.data.rest.webmvc.jpa.JSONArray = JsonPath .< JSONArray > read ( java.lang.String , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.JSONArray ) . hasSize ( NUMBER ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.JSONArray . get ( NUMBER ) ) . isEqualTo ( ( java.lang.Object ) org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) ; assertThat ( JsonPath .< JSONArray > read ( java.lang.String , STRING ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) ; java.lang.String java.lang.String = STRING ; assertHasJsonPathValue ( java.lang.String . java.lang.String ( STRING ) , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertHasJsonPathValue ( java.lang.String . java.lang.String ( STRING ) , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertHasJsonPathValue ( java.lang.String . java.lang.String ( STRING ) , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertHasJsonPathValue ( java.lang.String . java.lang.String ( STRING ) , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) ; java.lang.String java.lang.String = JsonPath . read ( java.lang.String , java.lang.String . java.lang.String ( STRING ) ) ; client . follow ( new Link ( java.lang.String ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; mvc . perform ( delete ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) . concat ( STRING ) , NUMBER ) ) . andExpect ( status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Receipt org.springframework.data.rest.webmvc.jpa.Receipt = new Receipt ( ) ; org.springframework.data.rest.webmvc.jpa.Receipt . setAmount ( new java.math.BigDecimal ( NUMBER ) ) ; org.springframework.data.rest.webmvc.jpa.Receipt . setSaleItem ( STRING ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Receipt ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; assertJsonPathEquals ( STRING , STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ; UriComponentsBuilder org.springframework.data.rest.webmvc.jpa.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getHeader ( STRING ) ; mvc . perform ( patch ( org.springframework.data.rest.webmvc.jpa.UriComponentsBuilder . build ( ) . toUriString ( ) ) . content ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . header ( IF_MATCH , java.lang.String ) ) . andExpect ( status ( ) . is2xxSuccessful ( ) ) ; mvc . perform ( patch ( org.springframework.data.rest.webmvc.jpa.UriComponentsBuilder . build ( ) . toUriString ( ) ) . content ( STRING ) . contentType ( MediaType . APPLICATION_JSON ) . header ( IF_MATCH , STRING ) ) . andExpect ( status ( ) . isPreconditionFailed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( client . discoverUnique ( STRING ) ) ; java.lang.String java.lang.String = JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ; mvc . perform ( delete ( java.lang.String ) ) . andExpect ( status ( ) . isIAmATeapot ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( new Person ( STRING , STRING ) , new Person ( STRING , STRING ) ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) . expand ( ) ; Link org.springframework.data.rest.webmvc.jpa.Link = java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . get ( NUMBER ) ; for ( int int = NUMBER ; int <= NUMBER ; int ++ ) { mvc . perform ( post ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) . content ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) . contentType ( org.springframework.data.rest.webmvc.jpa.MediaType ) ) . andExpect ( status ( ) . isNoContent ( ) ) ; mvc . perform ( get ( org.springframework.data.rest.webmvc.jpa.Link . getHref ( ) ) ) . andExpect ( jsonPath ( STRING , hasSize ( int ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( client . discoverUnique ( STRING ) ) ; java.lang.String java.lang.String = JsonPath . read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , STRING ) ; org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = mvc . perform ( head ( java.lang.String ) ) . andExpect ( status ( ) . isNoContent ( ) ) . andReturn ( ) . getResponse ( ) ; Links org.springframework.data.rest.webmvc.jpa.Links = Links . valueOf ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getHeader ( STRING ) ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Links . hasLink ( STRING ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Links . hasLink ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING , STRING , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . isTemplated ( ) ) . isTrue ( ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING , STRING , STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING , STRING , STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { mvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; mvc . perform ( post ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( org.springframework.data.rest.webmvc.jpa.Link , STRING ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . isTemplated ( ) ) . isTrue ( ) ; assertThat ( org.springframework.data.rest.webmvc.jpa.Link . getVariableNames ( ) ) . contains ( STRING , STRING ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link . expand ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( jsonPath ( STRING ) . value ( STRING ) ) . andExpect ( client . hasLinkWithRel ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ( Person org.springframework.data.rest.webmvc.jpa.Person , Person ... org.springframework.data.rest.webmvc.jpa.Person[] ) throws java.lang.Exception { Link org.springframework.data.rest.webmvc.jpa.Link = client . discoverUnique ( STRING ) ; java.util.List<org.springframework.data.rest.webmvc.jpa.Link> < Link > java.util.List<org.springframework.data.rest.webmvc.jpa.Link> = new java.util.ArrayList<org.springframework.data.rest.webmvc.jpa.Link> < Link > ( ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) , MediaType . APPLICATION_JSON ) ; java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . add ( client . assertHasLinkWithRel ( STRING , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ) ; for ( Person org.springframework.data.rest.webmvc.jpa.Person : org.springframework.data.rest.webmvc.jpa.Person[] ) { java.lang.String java.lang.String = org.springframework.data.rest.webmvc.jpa.ObjectMapper . writeValueAsString ( org.springframework.data.rest.webmvc.jpa.Person ) ; MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = postAndGet ( org.springframework.data.rest.webmvc.jpa.Link , java.lang.String , MediaType . APPLICATION_JSON ) ; java.util.List<org.springframework.data.rest.webmvc.jpa.Link> . add ( client . assertHasLinkWithRel ( Link . REL_SELF , org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse ) ) ; } return java.util.List<org.springframework.data.rest.webmvc.jpa.Link> ; }  <METHOD_END>
<METHOD_START> private void void ( Link org.springframework.data.rest.webmvc.jpa.Link , java.lang.String ... java.lang.String[] ) throws java.lang.Exception { java.lang.String java.lang.String = client . request ( org.springframework.data.rest.webmvc.jpa.Link ) . getContentAsString ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = JsonPath . read ( java.lang.String , STRING ) ; assertThat ( java.util.List<java.lang.String> ) . hasSize ( java.lang.String[] . int ) ; assertThat ( java.util.List<java.lang.String> ) . contains ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) throws java.lang.Exception { MockHttpServletResponse org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse = client . request ( client . discoverUnique ( STRING ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING , java.lang.String ) ; java.lang.Object java.lang.Object = JsonPath .< JSONArray > read ( org.springframework.data.rest.webmvc.jpa.MockHttpServletResponse . getContentAsString ( ) , java.lang.String ) . get ( NUMBER ) ; assertThat ( java.lang.Object ) . isNotNull ( ) ; assertThat ( JsonPath .< java.lang.String > read ( java.lang.Object , STRING ) ) . isNotNull ( ) ; Link org.springframework.data.rest.webmvc.jpa.Link = new Link ( JsonPath .< java.lang.String > read ( java.lang.Object , STRING ) ) ; client . follow ( org.springframework.data.rest.webmvc.jpa.Link ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( jsonPath ( STRING , is ( notNullValue ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( Link ... org.springframework.data.rest.webmvc.jpa.Link[] ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( links . length ) ; for ( Link org.springframework.data.rest.webmvc.jpa.Link : org.springframework.data.rest.webmvc.jpa.Link[] ) { java.util.List<java.lang.String> . boolean ( org.springframework.data.rest.webmvc.jpa.Link . expand ( ) . getHref ( ) ) ; } return StringUtils . collectionToDelimitedString ( java.util.List<java.lang.String> , STRING ) ; }  <METHOD_END>
