<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.integration.amqp.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( AmqpHeaders . CONTENT_TYPE , STRING ) . build ( ) ; MessageConverter org.springframework.integration.amqp.support.MessageConverter = new SimpleMessageConverter ( ) ; AmqpHeaderMapper org.springframework.integration.amqp.support.AmqpHeaderMapper = DefaultAmqpHeaderMapper . outboundMapper ( ) ; MessageDeliveryMode org.springframework.integration.amqp.support.MessageDeliveryMode = MessageDeliveryMode . NON_PERSISTENT ; boolean boolean = false ; org . springframework . org.springframework.amqp . org.springframework.amqp . org.springframework.amqp org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.MessageConverter , org.springframework.integration.amqp.support.AmqpHeaderMapper , org.springframework.integration.amqp.support.MessageDeliveryMode , boolean ) ; assertThat ( org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) , equalTo ( STRING ) ) ; boolean = true ; org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.MessageConverter , org.springframework.integration.amqp.support.AmqpHeaderMapper , org.springframework.integration.amqp.support.MessageDeliveryMode , boolean ) ; assertThat ( org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) , equalTo ( STRING ) ) ; ContentTypeDelegatingMessageConverter org.springframework.integration.amqp.support.ContentTypeDelegatingMessageConverter = new ContentTypeDelegatingMessageConverter ( ) ; org.springframework.integration.amqp.support.ContentTypeDelegatingMessageConverter . addDelegate ( STRING , org.springframework.integration.amqp.support.MessageConverter ) ; org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.ContentTypeDelegatingMessageConverter , org.springframework.integration.amqp.support.AmqpHeaderMapper , org.springframework.integration.amqp.support.MessageDeliveryMode , boolean ) ; assertThat ( org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) , equalTo ( STRING ) ) ; boolean = false ; org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.ContentTypeDelegatingMessageConverter , org.springframework.integration.amqp.support.AmqpHeaderMapper , org.springframework.integration.amqp.support.MessageDeliveryMode , boolean ) ; assertThat ( org.springframework.amqp.core.Message . getMessageProperties ( ) . getContentType ( ) , equalTo ( STRING ) ) ; boolean = true ; org.springframework.integration.amqp.support.Message<?> = MessageBuilder . withPayload ( STRING ) . setHeader ( AmqpHeaders . CONTENT_TYPE , NUMBER ) . build ( ) ; try { org.springframework.amqp.core.Message = MappingUtils . mapMessage ( org.springframework.integration.amqp.support.Message<> , org.springframework.integration.amqp.support.ContentTypeDelegatingMessageConverter , org.springframework.integration.amqp.support.AmqpHeaderMapper , org.springframework.integration.amqp.support.MessageDeliveryMode , boolean ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , equalTo ( STRING ) ) ; } }  <METHOD_END>
