<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportAnnotationDetectionTests.MultiMetaImportConfig .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportAnnotationDetectionTests.MultiMetaImportConfigWithLocalImport .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportAnnotationDetectionTests.MultiMetaImportConfigWithLocalImportWithBeanOverride .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . register ( org.springframework.context.annotation.configuration.ImportAnnotationDetectionTests.ImportFromBean .class ) ; org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . containsBean ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.context.annotation.configuration.AnnotationConfigApplicationContext . getBean ( STRING , TestBean .class ) . getName ( ) , is ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.context.annotation.configuration.TestBean org.springframework.context.annotation.configuration.TestBean ( ) { return new TestBean ( STRING ) ; }  <METHOD_END>
