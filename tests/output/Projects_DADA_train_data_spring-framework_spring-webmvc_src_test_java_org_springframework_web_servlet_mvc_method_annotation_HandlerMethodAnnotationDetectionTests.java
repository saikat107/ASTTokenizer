<METHOD_START> @ Parameters ( name = STRING ) public static java.lang.Object [] [] java.lang.Object[][] ( ) { return new java.lang.Object [] [] { { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.SimpleController .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.SimpleController .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.AbstractClassController .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.AbstractClassController .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ParameterizedAbstractClassController .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ParameterizedAbstractClassController .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ParameterizedSubclassOverridesDefaultMappings .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ParameterizedSubclassOverridesDefaultMappings .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.InterfaceController .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.InterfaceController .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ParameterizedInterfaceController .class , false } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.SupportClassController .class , true } , { org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.SupportClassController .class , false } } ; }  <METHOD_END>
<METHOD_START> public void ( final java.lang.Class<?> < ? > java.lang.Class<?> , boolean boolean ) { GenericWebApplicationContext org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( RequestMappingHandlerMapping .class ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( RequestMappingHandlerAdapter .class ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( ExceptionHandlerExceptionResolver .class ) ) ; if ( boolean ) { DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.method.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.web.servlet.mvc.method.annotation.HandlerMethodAnnotationDetectionTests.ControllerAdvisor .class ) ) ; } org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . refresh ( ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping = org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBean ( RequestMappingHandlerMapping .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter = org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBean ( RequestMappingHandlerAdapter .class ) ; this . org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver = org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . getBean ( ExceptionHandlerExceptionResolver .class ) ; org.springframework.web.servlet.mvc.method.annotation.GenericWebApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; java.text.SimpleDateFormat java.text.SimpleDateFormat = new java.text.SimpleDateFormat ( java.lang.String ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; MockHttpServletRequest org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . setParameter ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest . addHeader ( STRING , java.lang.String ) ; HandlerExecutionChain org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping . getHandler ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest ) ; assertNotNull ( org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain ) ; ModelAndView org.springframework.web.servlet.mvc.method.annotation.ModelAndView = org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter . handle ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , new MockHttpServletResponse ( ) , org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain . getHandler ( ) ) ; assertEquals ( STRING , java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; assertEquals ( STRING , java.text.SimpleDateFormat . java.util.Date ( java.lang.String ) , org.springframework.web.servlet.mvc.method.annotation.ModelAndView . getModel ( ) . get ( STRING ) ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver . resolveException ( org.springframework.web.servlet.mvc.method.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse , org.springframework.web.servlet.mvc.method.annotation.HandlerExecutionChain . getHandler ( ) , new java.lang.Exception ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getHeader ( STRING ) ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.method.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public abstract void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ ModelAttribute public abstract void void ( java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public abstract java.util.Date java.util.Date ( java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public abstract java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ ModelAttribute void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public abstract void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , A A );  <METHOD_END>
<METHOD_START> @ ModelAttribute public abstract void void ( B B , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public abstract java.util.Date java.util.Date ( C C , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public abstract java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public abstract void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , A A );  <METHOD_END>
<METHOD_START> @ ModelAttribute public abstract void void ( B B , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public java.util.Date java.util.Date ( C C , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return ( java.util.Date ) C ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public abstract java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public abstract void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , A A );  <METHOD_END>
<METHOD_START> @ ModelAttribute public abstract void void ( B B , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public abstract java.util.Date java.util.Date ( C C , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public abstract java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , A A );  <METHOD_END>
<METHOD_START> @ ModelAttribute void void ( B B , Model org.springframework.web.servlet.mvc.method.annotation.Model );  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) java.util.Date java.util.Date ( C C , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception ;  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ModelAttribute public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> @ InitBinder public void void ( WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , @ RequestParam ( STRING ) java.lang.String java.lang.String ) { CustomDateEditor org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor = new CustomDateEditor ( new java.text.SimpleDateFormat ( java.lang.String ) , false ) ; org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . registerCustomEditor ( java.util.Date .class , org.springframework.web.servlet.mvc.method.annotation.CustomDateEditor ) ; }  <METHOD_END>
<METHOD_START> @ ModelAttribute public void void ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) { org.springframework.web.servlet.mvc.method.annotation.Model . addAttribute ( STRING , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . POST ) @ ModelAttribute ( STRING ) public java.util.Date java.util.Date ( @ RequestHeader ( STRING ) java.util.Date java.util.Date , Model org.springframework.web.servlet.mvc.method.annotation.Model ) throws java.lang.Exception { return java.util.Date ; }  <METHOD_END>
<METHOD_START> @ ExceptionHandler ( java.lang.Exception .class ) @ ResponseBody public java.lang.String java.lang.String ( java.lang.Exception java.lang.Exception ) { return java.lang.Exception . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( org.springframework.web.servlet.mvc.method.annotation.StaticMethodMatcherPointcut ( ) , new SimpleTraceInterceptor ( ) ); }  <METHOD_END>
<METHOD_START> private static org.springframework.web.servlet.mvc.method.annotation.StaticMethodMatcherPointcut org.springframework.web.servlet.mvc.method.annotation.StaticMethodMatcherPointcut ( ) { return new StaticMethodMatcherPointcut ( ) { @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( ( AnnotationUtils . findAnnotation ( java.lang.Class<> , Controller .class ) != null ) || ( AnnotationUtils . findAnnotation ( java.lang.Class<> , RequestMapping .class ) != null ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( ( AnnotationUtils . findAnnotation ( java.lang.Class<> , Controller .class ) != null ) || ( AnnotationUtils . findAnnotation ( java.lang.Class<> , RequestMapping .class ) != null ) ) ; }  <METHOD_END>
