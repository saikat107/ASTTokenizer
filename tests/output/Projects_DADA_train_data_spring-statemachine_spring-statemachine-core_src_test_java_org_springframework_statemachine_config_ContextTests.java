<METHOD_START> @ java.lang.Override protected org.springframework.statemachine.config.AnnotationConfigApplicationContext org.springframework.statemachine.config.AnnotationConfigApplicationContext ( ) { return new AnnotationConfigApplicationContext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ContextTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> ) , instanceOf ( SyncTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ContextTests.Config1 .class , org.springframework.statemachine.config.ContextTests.Config2 .class ) ; context . refresh ( ) ; ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> ) , instanceOf ( SyncTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ContextTests.Config2 .class , org.springframework.statemachine.config.ContextTests.Config3 .class ) ; context . refresh ( ) ; ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> ) , instanceOf ( ThreadPoolTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ Test public void void ( ) java.lang.Exception { context . register ( org.springframework.statemachine.config.ContextTests.Config4 .class ) ; context . refresh ( ) ; ObjectStateMachine < java.lang.String , java.lang.String > org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> = context . getBean ( StateMachineSystemConstants . DEFAULT_ID_STATEMACHINE , ObjectStateMachine .class ) ; assertThat ( TestUtils . readField ( STRING , org.springframework.statemachine.config.ObjectStateMachine<java.lang.String,java.lang.String> ) , instanceOf ( ThreadPoolTaskExecutor .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Scheduled ( fixedRate = NUMBER ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = StateMachineSystemConstants . TASK_EXECUTOR_BEAN_NAME ) public org.springframework.statemachine.config.TaskExecutor org.springframework.statemachine.config.TaskExecutor ( ) { return new ThreadPoolTaskExecutor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineConfigurationConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineConfigurationConfigurer<java.lang.String,java.lang.String> . withConfiguration ( ) . taskExecutor ( new ThreadPoolTaskExecutor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineStateConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineStateConfigurer<java.lang.String,java.lang.String> . withStates ( ) . initial ( STRING ) . state ( STRING ) . state ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StateMachineTransitionConfigurer < java.lang.String , java.lang.String > org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> ) throws java.lang.Exception { org.springframework.statemachine.config.StateMachineTransitionConfigurer<java.lang.String,java.lang.String> . withExternal ( ) . source ( STRING ) . target ( STRING ) . event ( STRING ) ; }  <METHOD_END>
