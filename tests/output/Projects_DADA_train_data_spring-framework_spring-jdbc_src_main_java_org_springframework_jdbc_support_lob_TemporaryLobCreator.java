<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , byte [] byte[] )			throws java.sql.SQLException { java.sql.Blob java.sql.Blob = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.Blob ( ) ; java.sql.Blob . int ( NUMBER , byte[] ) ; this . java.util.Set<java.sql.Blob> . boolean ( java.sql.Blob ) ; java.sql.PreparedStatement . void ( int , java.sql.Blob ) ; if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( byte[] != null ? STRING + byte[] . int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.InputStream java.io.InputStream , int int )			throws java.sql.SQLException { java.sql.Blob java.sql.Blob = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.Blob ( ) ; try { FileCopyUtils . copy ( java.io.InputStream , java.sql.Blob . java.io.OutputStream ( NUMBER ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new DataAccessResourceFailureException ( STRING , java.io.IOException ) ; } this . java.util.Set<java.sql.Blob> . boolean ( java.sql.Blob ) ; java.sql.PreparedStatement . void ( int , java.sql.Blob ) ; if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.InputStream != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.lang.String java.lang.String )			throws java.sql.SQLException { java.sql.Clob java.sql.Clob = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.Clob ( ) ; java.sql.Clob . int ( NUMBER , java.lang.String ) ; this . java.util.Set<java.sql.Clob> . boolean ( java.sql.Clob ) ; java.sql.PreparedStatement . void ( int , java.sql.Clob ) ; if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.lang.String != null ? STRING + java.lang.String . int ( ) : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.InputStream java.io.InputStream , int int )			throws java.sql.SQLException { java.sql.Clob java.sql.Clob = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.Clob ( ) ; try { FileCopyUtils . copy ( java.io.InputStream , java.sql.Clob . java.io.OutputStream ( NUMBER ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new DataAccessResourceFailureException ( STRING , java.io.IOException ) ; } this . java.util.Set<java.sql.Clob> . boolean ( java.sql.Clob ) ; java.sql.PreparedStatement . void ( int , java.sql.Clob ) ; if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.InputStream != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.sql.PreparedStatement java.sql.PreparedStatement , int int , java.io.Reader java.io.Reader , int int )			throws java.sql.SQLException { java.sql.Clob java.sql.Clob = java.sql.PreparedStatement . java.sql.Connection ( ) . java.sql.Clob ( ) ; try { FileCopyUtils . copy ( java.io.Reader , java.sql.Clob . java.io.Writer ( NUMBER ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new DataAccessResourceFailureException ( STRING , java.io.IOException ) ; } this . java.util.Set<java.sql.Clob> . boolean ( java.sql.Clob ) ; java.sql.PreparedStatement . void ( int , java.sql.Clob ) ; if ( org.springframework.jdbc.support.lob.Log . isDebugEnabled ( ) ) { org.springframework.jdbc.support.lob.Log . debug ( java.io.Reader != null ? STRING + int : STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { for ( java.sql.Blob java.sql.Blob : this . java.util.Set<java.sql.Blob> ) { java.sql.Blob . void ( ) ; } for ( java.sql.Clob java.sql.Clob : this . java.util.Set<java.sql.Clob> ) { java.sql.Clob . void ( ) ; } } catch ( java.sql.SQLException java.sql.SQLException ) { org.springframework.jdbc.support.lob.Log . error ( STRING , java.sql.SQLException ) ; } }  <METHOD_END>
