<METHOD_START> static org.springframework.data.repository.query.ReturnedType org.springframework.data.repository.query.ReturnedType ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> , ProjectionFactory org.springframework.data.repository.query.ProjectionFactory ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( org.springframework.data.repository.query.ProjectionFactory , STRING ) ; return java.lang.Class<> . boolean ( ) ? new org.springframework.data.repository.query.ReturnedType.ReturnedInterface ( org.springframework.data.repository.query.ProjectionFactory . getProjectionInformation ( java.lang.Class<> ) , java.lang.Class<> ) : new org.springframework.data.repository.query.ReturnedType.ReturnedClass ( java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public final java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public final boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Class<?> ( ) . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> public abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> public abstract boolean boolean ( )  <METHOD_END>
<METHOD_START> public abstract java.lang.Class<?> < ? > java.lang.Class<?> ( )  <METHOD_END>
<METHOD_START> public abstract java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( )  <METHOD_END>
<METHOD_START> public void ( ProjectionInformation org.springframework.data.repository.query.ProjectionInformation , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); Assert . notNull ( org.springframework.data.repository.query.ProjectionInformation , STRING ) ; this . org.springframework.data.repository.query.ProjectionInformation = org.springframework.data.repository.query.ProjectionInformation ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return org.springframework.data.repository.query.ProjectionInformation . getType ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && org.springframework.data.repository.query.ProjectionInformation . isClosed ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! org.springframework.data.repository.query.ProjectionInformation . getType ( ) . isAssignableFrom ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return boolean ( ) && org.springframework.data.repository.query.ProjectionInformation . isClosed ( ) ? null : java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( java.beans.PropertyDescriptor java.beans.PropertyDescriptor : org.springframework.data.repository.query.ProjectionInformation . getInputProperties ( ) ) { if ( ! java.util.List<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ) { java.util.List<java.lang.String> . boolean ( java.beans.PropertyDescriptor . java.lang.String ( ) ) ; } } return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.Class<> ); Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( ! java.lang.Class<> . boolean ( ) , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.util.List<java.lang.String> = java.util.List<java.lang.String> ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ( ) && ! java.util.List<java.lang.String> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( ) { return java.util.List<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> ( java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! boolean ( ) ) { return java.util.Collections . java.util.List<java.lang.String> ( ) ; } PreferredConstructorDiscoverer < ? , ? > org.springframework.data.repository.query.PreferredConstructorDiscoverer<?,?> = new PreferredConstructorDiscoverer ( java.lang.Class<> ) ; return org.springframework.data.repository.query.PreferredConstructorDiscoverer<,> . getConstructor ( ) . map ( it -> it . getParameters ( ) . stream ( ) . flatMap ( parameter -> Optionals . toStream ( parameter . getName ( ) ) ) . collect ( Collectors . toList ( ) ) ) . orElseGet ( java.util.Collections :: emptyList ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ! java.lang.Object .class . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . boolean ( ) && ! boolean ( ) && ! boolean ( ) && ! java.lang.Number .class . boolean ( java.lang.Class<> ) && ! java.util.Set<java.lang.Class<?>> . boolean ( java.lang.Class<> ) && ! java.lang.Class<> . java.lang.Package ( ) . java.lang.String ( ) . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) && java.lang.Class<?> ( ) . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return ClassUtils . isPrimitiveOrWrapper ( java.lang.Class<> ) ; }  <METHOD_END>
