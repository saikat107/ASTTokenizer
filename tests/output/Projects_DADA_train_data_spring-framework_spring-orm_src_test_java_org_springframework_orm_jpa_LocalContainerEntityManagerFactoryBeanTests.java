<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertNull ( STRING , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getJpaDialect ( ) ) ; java.lang.RuntimeException java.lang.RuntimeException = new java.lang.RuntimeException ( STRING ) ; PersistenceException org.springframework.orm.jpa.PersistenceException = new PersistenceException ( ) ; assertNull ( STRING , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . translateExceptionIfPossible ( java.lang.RuntimeException ) ) ; DataAccessException org.springframework.orm.jpa.DataAccessException = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . translateExceptionIfPossible ( org.springframework.orm.jpa.PersistenceException ) ; assertNotNull ( org.springframework.orm.jpa.DataAccessException ) ; assertSame ( org.springframework.orm.jpa.PersistenceException , org.springframework.orm.jpa.DataAccessException . getCause ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertSame ( STRING , org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; assertNotSame ( STRING , mockEmf , org.springframework.orm.jpa.EntityManagerFactory ) ; assertTrue ( org.springframework.orm.jpa.EntityManagerFactory . equals ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; DefaultListableBeanFactory org.springframework.orm.jpa.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.orm.jpa.DefaultListableBeanFactory . setSerializationId ( STRING ) ; org.springframework.orm.jpa.DefaultListableBeanFactory . registerSingleton ( STRING , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setBeanFactory ( org.springframework.orm.jpa.DefaultListableBeanFactory ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setBeanName ( STRING ) ; assertNotNull ( SerializationTestUtils . serializeAndDeserialize ( org.springframework.orm.jpa.EntityManagerFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager ) ; LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertSame ( STRING , org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; assertNotSame ( STRING , mockEmf , org.springframework.orm.jpa.EntityManagerFactory ) ; EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ; assertFalse ( org.springframework.orm.jpa.EntityManager . contains ( java.lang.Object ) ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . destroy ( ) ; verify ( mockEmf ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; EntityTransaction org.springframework.orm.jpa.EntityTransaction = mock ( EntityTransaction .class ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( new org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests.NoOpEntityTransaction ( ) ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManager ) ; LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; JpaTransactionManager org.springframework.orm.jpa.JpaTransactionManager = new JpaTransactionManager ( ) ; org.springframework.orm.jpa.JpaTransactionManager . setEntityManagerFactory ( org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; TransactionStatus org.springframework.orm.jpa.TransactionStatus = org.springframework.orm.jpa.JpaTransactionManager . getTransaction ( new DefaultTransactionAttribute ( ) ) ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertSame ( STRING , org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; assertNotSame ( STRING , mockEmf , org.springframework.orm.jpa.EntityManagerFactory ) ; EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ; org.springframework.orm.jpa.EntityManager . joinTransaction ( ) ; assertFalse ( org.springframework.orm.jpa.EntityManager . contains ( java.lang.Object ) ) ; org.springframework.orm.jpa.JpaTransactionManager . commit ( org.springframework.orm.jpa.TransactionStatus ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . destroy ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . contains ( java.lang.Object ) ; verify ( mockEmf ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; EntityTransaction org.springframework.orm.jpa.EntityTransaction = mock ( EntityTransaction .class ) ; willThrow ( new OptimisticLockException ( ) ) . given ( org.springframework.orm.jpa.EntityTransaction ) . commit ( ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( new org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests.NoOpEntityTransaction ( ) ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( org.springframework.orm.jpa.EntityTransaction ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManager ) ; LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; JpaTransactionManager org.springframework.orm.jpa.JpaTransactionManager = new JpaTransactionManager ( ) ; org.springframework.orm.jpa.JpaTransactionManager . setEntityManagerFactory ( org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; TransactionStatus org.springframework.orm.jpa.TransactionStatus = org.springframework.orm.jpa.JpaTransactionManager . getTransaction ( new DefaultTransactionAttribute ( ) ) ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertSame ( STRING , org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; assertNotSame ( STRING , mockEmf , org.springframework.orm.jpa.EntityManagerFactory ) ; EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ; org.springframework.orm.jpa.EntityManager . joinTransaction ( ) ; assertFalse ( org.springframework.orm.jpa.EntityManager . contains ( java.lang.Object ) ) ; try { org.springframework.orm.jpa.JpaTransactionManager . commit ( org.springframework.orm.jpa.TransactionStatus ) ; fail ( STRING ) ; } catch ( OptimisticLockingFailureException org.springframework.orm.jpa.OptimisticLockingFailureException ) { } org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . destroy ( ) ; verify ( org.springframework.orm.jpa.EntityTransaction ) . begin ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . contains ( java.lang.Object ) ; verify ( mockEmf ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Object java.lang.Object = new java.lang.Object ( ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( org.springframework.orm.jpa.EntityManager . getTransaction ( ) ) . willReturn ( new org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests.NoOpEntityTransaction ( ) ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; given ( mockEmf . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager , org.springframework.orm.jpa.EntityManager ) ; LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) ; MutablePersistenceUnitInfo org.springframework.orm.jpa.MutablePersistenceUnitInfo = ( ( MutablePersistenceUnitInfo ) org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getPersistenceUnitInfo ( ) ) ; org.springframework.orm.jpa.MutablePersistenceUnitInfo . setTransactionType ( PersistenceUnitTransactionType . JTA ) ; JpaTransactionManager org.springframework.orm.jpa.JpaTransactionManager = new JpaTransactionManager ( ) ; org.springframework.orm.jpa.JpaTransactionManager . setEntityManagerFactory ( org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; TransactionStatus org.springframework.orm.jpa.TransactionStatus = org.springframework.orm.jpa.JpaTransactionManager . getTransaction ( new DefaultTransactionAttribute ( ) ) ; EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ; assertSame ( STRING , org.springframework.orm.jpa.EntityManagerFactory , org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . getObject ( ) ) ; assertNotSame ( STRING , mockEmf , org.springframework.orm.jpa.EntityManagerFactory ) ; EntityManager org.springframework.orm.jpa.EntityManager = org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ; org.springframework.orm.jpa.EntityManager . joinTransaction ( ) ; assertFalse ( org.springframework.orm.jpa.EntityManager . contains ( java.lang.Object ) ) ; org.springframework.orm.jpa.JpaTransactionManager . commit ( org.springframework.orm.jpa.TransactionStatus ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . destroy ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . joinTransaction ( ) ; verify ( org.springframework.orm.jpa.EntityManager ) . contains ( java.lang.Object ) ; verify ( mockEmf ) . close ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( ) java.lang.Exception { LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( STRING , null , STRING ) ; return org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( STRING , null , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> protected org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ( java.lang.String java.lang.String , java.util.Properties java.util.Properties , java.lang.String java.lang.String ) throws java.lang.Exception { org.springframework.orm.jpa.PersistenceUnitInfo = null ; java.util.Map = null ; LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean ( ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setPersistenceUnitName ( java.lang.String ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setPersistenceProviderClass ( org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests.DummyContainerPersistenceProvider .class ) ; if ( java.util.Properties != null ) { org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setJpaProperties ( java.util.Properties ) ; } org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setLoadTimeWeaver ( new InstrumentationLoadTimeWeaver ( ) ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setPersistenceXmlLocation ( java.lang.String ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . afterPropertiesSet ( ) ; assertEquals ( java.lang.String , org.springframework.orm.jpa.PersistenceUnitInfo . getPersistenceUnitName ( ) ) ; if ( java.util.Properties != null ) { assertEquals ( java.util.Properties , java.util.Map ) ; } return org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { LocalContainerEntityManagerFactoryBean org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean ( ) ; java.lang.String java.lang.String = STRING ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setPersistenceUnitName ( java.lang.String ) ; org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . setPersistenceProviderClass ( org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBeanTests.DummyContainerPersistenceProvider .class ) ; try { org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean . afterPropertiesSet ( ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( PersistenceUnitInfo org.springframework.orm.jpa.PersistenceUnitInfo , java.util.Map java.util.Map ) { org.springframework.orm.jpa.PersistenceUnitInfo = org.springframework.orm.jpa.PersistenceUnitInfo ; java.util.Map = java.util.Map ; return mockEmf ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory ( java.lang.String java.lang.String , java.util.Map java.util.Map ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.orm.jpa.ProviderUtil org.springframework.orm.jpa.ProviderUtil ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( PersistenceUnitInfo org.springframework.orm.jpa.PersistenceUnitInfo , java.util.Map java.util.Map ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , java.util.Map java.util.Map ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
