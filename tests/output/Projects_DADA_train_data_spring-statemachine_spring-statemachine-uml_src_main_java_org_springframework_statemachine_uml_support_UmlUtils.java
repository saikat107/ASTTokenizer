<METHOD_START> public static org.springframework.statemachine.uml.support.Model org.springframework.statemachine.uml.support.Model ( java.lang.String java.lang.String ) { URI org.springframework.statemachine.uml.support.URI = URI . createFileURI ( java.lang.String ) ; ResourceSet org.springframework.statemachine.uml.support.ResourceSet = new ResourceSetImpl ( ) ; org.springframework.statemachine.uml.support.ResourceSet . getPackageRegistry ( ) . put ( UMLPackage . eNS_URI , UMLPackage . eINSTANCE ) ; org.springframework.statemachine.uml.support.ResourceSet . getResourceFactoryRegistry ( ) . getExtensionToFactoryMap ( ) . put ( UMLResource . FILE_EXTENSION , UMLResource . Factory . INSTANCE ) ; org.springframework.statemachine.uml.support.ResourceSet . createResource ( org.springframework.statemachine.uml.support.URI ) ; Resource org.springframework.statemachine.uml.support.Resource = org.springframework.statemachine.uml.support.ResourceSet . getResource ( org.springframework.statemachine.uml.support.URI , true ) ; Model org.springframework.statemachine.uml.support.Model = ( Model ) EcoreUtil . getObjectByType ( org.springframework.statemachine.uml.support.Resource . getContents ( ) , UMLPackage . Literals . MODEL ) ; return org.springframework.statemachine.uml.support.Model ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( State org.springframework.statemachine.uml.support.State ) { return org.springframework.statemachine.uml.support.Transition ( org.springframework.statemachine.uml.support.State ) != null ; }  <METHOD_END>
<METHOD_START> public static org.springframework.statemachine.uml.support.Transition org.springframework.statemachine.uml.support.Transition ( State org.springframework.statemachine.uml.support.State ) { for ( Transition org.springframework.statemachine.uml.support.Transition : org.springframework.statemachine.uml.support.State . getIncomings ( ) ) { if ( org.springframework.statemachine.uml.support.Transition . getSource ( ) instanceof Pseudostate ) { if ( ( ( Pseudostate ) org.springframework.statemachine.uml.support.Transition . getSource ( ) ) . getKind ( ) == PseudostateKind . INITIAL_LITERAL ) { return org.springframework.statemachine.uml.support.Transition ; } } } return null ; }  <METHOD_END>
<METHOD_START> public static java.util.Collection<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.Collection<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ( Transition org.springframework.statemachine.uml.support.Transition , StateMachineComponentResolver < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> = new java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> < Action < java.lang.String , java.lang.String > > ( ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ( org.springframework.statemachine.uml.support.Transition , org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> . add ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ) ; } return java.util.ArrayList<org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String>> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ( Transition org.springframework.statemachine.uml.support.Transition , StateMachineComponentResolver < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> ) { Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = null ; if ( org.springframework.statemachine.uml.support.Transition . getEffect ( ) instanceof OpaqueBehavior ) { java.lang.String java.lang.String = org.springframework.statemachine.uml.support.UmlUtils . java.lang.String ( UmlModelParser . LANGUAGE_BEAN , ( OpaqueBehavior ) org.springframework.statemachine.uml.support.Transition . getEffect ( ) ) ; Action < java.lang.String , java.lang.String > org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.StateMachineComponentResolver<java.lang.String,java.lang.String> . resolveAction ( java.lang.String ) ; if ( org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> != null ) { org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> = org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ; } } return org.springframework.statemachine.uml.support.Action<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( State org.springframework.statemachine.uml.support.State ) { return org.springframework.statemachine.uml.support.State instanceof FinalState ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( java.lang.String java.lang.String , BodyOwner org.springframework.statemachine.uml.support.BodyOwner ) { try { return org.springframework.statemachine.uml.support.BodyOwner . getBodies ( ) . get ( org.springframework.statemachine.uml.support.BodyOwner . getLanguages ( ) . indexOf ( java.lang.String ) ) . trim ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { return null ; } }  <METHOD_END>
<METHOD_START> public static java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( State org.springframework.statemachine.uml.support.State ) { java.util.ArrayList<java.lang.String> < java.lang.String > java.util.ArrayList<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( Trigger org.springframework.statemachine.uml.support.Trigger : org.springframework.statemachine.uml.support.State . getDeferrableTriggers ( ) ) { Event org.springframework.statemachine.uml.support.Event = org.springframework.statemachine.uml.support.Trigger . getEvent ( ) ; if ( org.springframework.statemachine.uml.support.Event instanceof SignalEvent ) { Signal org.springframework.statemachine.uml.support.Signal = ( ( SignalEvent ) org.springframework.statemachine.uml.support.Event ) . getSignal ( ) ; java.util.ArrayList<java.lang.String> . boolean ( org.springframework.statemachine.uml.support.Signal . getName ( ) ) ; } } return java.util.ArrayList<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public static org.springframework.statemachine.uml.support.TransitionKind org.springframework.statemachine.uml.support.TransitionKind ( Transition org.springframework.statemachine.uml.support.Transition ) { org . org.eclipse . org.eclipse . org.eclipse . org.eclipse org.eclipse.uml2.uml.TransitionKind = org.springframework.statemachine.uml.support.Transition . getKind ( ) ; if ( org.eclipse.uml2.uml.TransitionKind == org . org.eclipse . org.eclipse . org.eclipse . TransitionKind . LOCAL_LITERAL ) { return TransitionKind . LOCAL ; } else if ( org.eclipse.uml2.uml.TransitionKind == org . org.eclipse . org.eclipse . org.eclipse . TransitionKind . INTERNAL_LITERAL ) { return TransitionKind . INTERNAL ; } else { return TransitionKind . EXTERNAL ; } }  <METHOD_END>
