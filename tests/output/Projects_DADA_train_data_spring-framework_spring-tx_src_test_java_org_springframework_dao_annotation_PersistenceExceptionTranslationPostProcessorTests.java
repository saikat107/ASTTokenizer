<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { GenericApplicationContext org.springframework.dao.annotation.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( PersistenceExceptionTranslationPostProcessor .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( RepositoryInterfaceImpl .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( StereotypedRepositoryInterfaceImpl .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterfaceAndOtherwiseAdvised .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.MyPersistenceExceptionTranslator .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , BeanDefinitionBuilder . rootBeanDefinition ( AnnotationAwareAspectJAutoProxyCreator .class ) . addPropertyValue ( STRING , NUMBER ) . getBeanDefinition ( ) ) ; org.springframework.dao.annotation.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.LogAllAspect .class ) ) ; org.springframework.dao.annotation.GenericApplicationContext . refresh ( ) ; RepositoryInterface org.springframework.dao.annotation.RepositoryInterface = ( RepositoryInterface ) org.springframework.dao.annotation.GenericApplicationContext . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.dao.annotation.RepositoryInterface ) ) ; RepositoryInterface org.springframework.dao.annotation.RepositoryInterface = ( RepositoryInterface ) org.springframework.dao.annotation.GenericApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.dao.annotation.RepositoryInterface ) ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface = ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface ) org.springframework.dao.annotation.GenericApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface ) ) ; void ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.RepositoryWithoutInterface ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional = ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional ) org.springframework.dao.annotation.GenericApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isAopProxy ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional ) ) ; org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional . void ( false ) ; void ( org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional ) ; try { org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessorTests.Additional . void ( true ) ; fail ( STRING ) ; } catch ( DataAccessResourceFailureException org.springframework.dao.annotation.DataAccessResourceFailureException ) { assertEquals ( STRING , org.springframework.dao.annotation.DataAccessResourceFailureException . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object java.lang.Object ) { assertTrue ( java.lang.Object instanceof Advised ) ; Advised org.springframework.dao.annotation.Advised = ( Advised ) java.lang.Object ; for ( Advisor org.springframework.dao.annotation.Advisor : org.springframework.dao.annotation.Advised . getAdvisors ( ) ) { if ( org.springframework.dao.annotation.Advisor instanceof PersistenceExceptionTranslationAdvisor ) { return; } } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( boolean boolean );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { if ( boolean ) { throw new PersistenceException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.dao.annotation.DataAccessException org.springframework.dao.annotation.DataAccessException ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException instanceof PersistenceException ) { return new DataAccessResourceFailureException ( java.lang.RuntimeException . java.lang.String ( ) ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ Before ( STRING ) public void void ( JoinPoint org.springframework.dao.annotation.JoinPoint ) { java.lang.System . java.io.PrintStream . void ( STRING + org.springframework.dao.annotation.JoinPoint . getSignature ( ) . getName ( ) ) ; }  <METHOD_END>
