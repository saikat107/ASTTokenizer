<METHOD_START> @ Before public void void ( ) { this . org.springframework.cache.interceptor.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.cache.interceptor.CachePutEvaluationTests.Config .class ) ; this . org.springframework.cache.interceptor.Cache = this . org.springframework.cache.interceptor.ConfigurableApplicationContext . getBean ( CacheManager .class ) . getCache ( STRING ) ; this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService = this . org.springframework.cache.interceptor.ConfigurableApplicationContext . getBean ( org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService .class ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.cache.interceptor.ConfigurableApplicationContext != null ) { this . org.springframework.cache.interceptor.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( java.lang.String , true ) ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( java.lang.String , true ) ; assertSame ( java.lang.Long , java.lang.Long ) ; java.lang.Long java.lang.Long = java.lang.Long + NUMBER ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( java.lang.String , false ) ; assertEquals ( java.lang.Long , java.lang.Long ) ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( java.lang.String , true ) ; assertSame ( java.lang.Long , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.cache.interceptor.Cache . clear ( ) ; long long = NUMBER ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( long ) ; assertEquals ( STRING , java.lang.Long , this . org.springframework.cache.interceptor.Cache . get ( long ) . get ( ) ) ; assertEquals ( STRING , java.lang.Long , this . org.springframework.cache.interceptor.Cache . get ( java.lang.Long + NUMBER ) . get ( ) ) ; java.lang.Long java.lang.Long = this . org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService . java.lang.Long ( long ) ; assertNotSame ( java.lang.Long , java.lang.Long ) ; assertEquals ( STRING , java.lang.Long , this . org.springframework.cache.interceptor.Cache . get ( java.lang.Long + NUMBER ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.cache.interceptor.CacheManager org.springframework.cache.interceptor.CacheManager ( ) { return new ConcurrentMapCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService ( ) { return new org.springframework.cache.interceptor.CachePutEvaluationTests.SimpleService ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable ( condition = STRING , key = STRING ) @ CachePut ( condition = STRING , key = STRING ) public java.lang.Long java.lang.Long ( java.lang.Object java.lang.Object , boolean boolean ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
<METHOD_START> @ Cacheable @ CachePut ( key = STRING , condition = STRING ) public java.lang.Long java.lang.Long ( long long ) { return this . java.util.concurrent.atomic.AtomicLong . long ( ) ; }  <METHOD_END>
