<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; assertEquals ( EventDrivenConsumer .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; java.lang.Object java.lang.Object = TestUtils . getPropertyValue ( java.lang.Object , STRING ) ; assertEquals ( ContentEnricher .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; ContentEnricher org.springframework.integration.config.xml.ContentEnricher = ( ContentEnricher ) java.lang.Object ; assertEquals ( NUMBER , org.springframework.integration.config.xml.ContentEnricher . getOrder ( ) ) ; DirectFieldAccessor org.springframework.integration.config.xml.DirectFieldAccessor = new DirectFieldAccessor ( org.springframework.integration.config.xml.ContentEnricher ) ; assertEquals ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) , org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertEquals ( true , org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNull ( org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ) ; assertNotNull ( TestUtils . getPropertyValue ( org.springframework.integration.config.xml.ContentEnricher , STRING ) ) ; java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> = ( java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > ) org.springframework.integration.config.xml.DirectFieldAccessor . getPropertyValue ( STRING ) ; for ( java.util.Map . java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> < Expression , Expression > java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> : java.util.Map<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . entrySet ( ) ) { if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( STRING , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( STRING , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( org.springframework.integration.config.xml.EnricherParserTests.Gender . org.springframework.integration.config.xml.EnricherParserTests.Gender . java.lang.String ( ) , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else if ( STRING . boolean ( java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ) { assertEquals ( java.lang.Boolean . java.lang.Boolean . java.lang.String ( ) , java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getValue ( ) . getExpressionString ( ) ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.util.Map.Entry<org.springframework.integration.config.xml.Expression,org.springframework.integration.config.xml.Expression> . getKey ( ) . getExpressionString ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ; java.lang.Long java.lang.Long = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Long .class ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; assertEquals ( java.lang.Long . java.lang.Long ( NUMBER ) , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING ) ; boolean boolean = TestUtils . getPropertyValue ( java.lang.Object , STRING , java.lang.Boolean .class ) ; assertTrue ( STRING , boolean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { QueueChannel org.springframework.integration.config.xml.QueueChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , QueueChannel .class ) ; org.springframework.integration.config.xml.QueueChannel . purge ( null ) ; SubscribableChannel org.springframework.integration.config.xml.SubscribableChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , SubscribableChannel .class ) ; class Foo extends AbstractReplyProducingMessageHandler { @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return new org.springframework.integration.config.xml.EnricherParserTests.Source ( STRING ) ; } } Foo foo = new Foo ( ) ; foo . setOutputChannel ( org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ) ; org.springframework.integration.config.xml.SubscribableChannel . subscribe ( foo ) ; org.springframework.integration.config.xml.EnricherParserTests.Target org.springframework.integration.config.xml.EnricherParserTests.Target = new org.springframework.integration.config.xml.EnricherParserTests.Target ( ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = MessageBuilder . withPayload ( org.springframework.integration.config.xml.EnricherParserTests.Target ) . setHeader ( STRING , STRING ) . setHeader ( STRING , STRING ) . build ( ) ; org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) . send ( org.springframework.integration.config.xml.Message<> ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.QueueChannel . receive ( NUMBER ) ; org.springframework.integration.config.xml.EnricherParserTests.Target org.springframework.integration.config.xml.EnricherParserTests.Target = ( org.springframework.integration.config.xml.EnricherParserTests.Target ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ; assertEquals ( STRING , org.springframework.integration.config.xml.EnricherParserTests.Target . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.config.xml.EnricherParserTests.Target . int ( ) ) ; assertEquals ( org.springframework.integration.config.xml.EnricherParserTests.Gender . org.springframework.integration.config.xml.EnricherParserTests.Gender , org.springframework.integration.config.xml.EnricherParserTests.Target . org.springframework.integration.config.xml.EnricherParserTests.Gender ( ) ) ; assertTrue ( org.springframework.integration.config.xml.EnricherParserTests.Target . boolean ( ) ) ; assertNotSame ( org.springframework.integration.config.xml.EnricherParserTests.Target , org.springframework.integration.config.xml.EnricherParserTests.Target ) ; assertEquals ( NUMBER , int ) ; MessageHeaders org.springframework.integration.config.xml.MessageHeaders = org.springframework.integration.config.xml.Message<> . getHeaders ( ) ; assertEquals ( STRING , org.springframework.integration.config.xml.MessageHeaders . get ( STRING ) ) ; assertEquals ( org.springframework.integration.config.xml.EnricherParserTests.Gender . org.springframework.integration.config.xml.EnricherParserTests.Gender , org.springframework.integration.config.xml.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.MessageHeaders . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.config.xml.MessageHeaders . get ( STRING ) ) ; org.springframework.integration.config.xml.SubscribableChannel . unsubscribe ( foo ) ; int -- ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.config.xml.Message<?> ) { return new org.springframework.integration.config.xml.EnricherParserTests.Source ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MessageChannel org.springframework.integration.config.xml.MessageChannel = org.springframework.integration.config.xml.ApplicationContext . getBean ( STRING , MessageChannel .class ) ; try { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.Object > ( STRING ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertThat ( java.lang.Exception , Matchers . instanceOf ( MessageHandlingException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) , Matchers . instanceOf ( TypeMismatchException .class ) ) ; assertThat ( java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) , Matchers . startsWith ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.config.xml.EnricherParserTests.Gender org.springframework.integration.config.xml.EnricherParserTests.Gender ( ) { return org.springframework.integration.config.xml.EnricherParserTests.Gender ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.config.xml.EnricherParserTests.Gender org.springframework.integration.config.xml.EnricherParserTests.Gender ) { this . org.springframework.integration.config.xml.EnricherParserTests.Gender = org.springframework.integration.config.xml.EnricherParserTests.Gender ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { org.springframework.integration.config.xml.EnricherParserTests.Target org.springframework.integration.config.xml.EnricherParserTests.Target = new org.springframework.integration.config.xml.EnricherParserTests.Target ( ) ; org.springframework.integration.config.xml.EnricherParserTests.Target . void ( this . java.lang.String ) ; org.springframework.integration.config.xml.EnricherParserTests.Target . void ( this . int ) ; org.springframework.integration.config.xml.EnricherParserTests.Target . void ( this . org.springframework.integration.config.xml.EnricherParserTests.Gender ) ; org.springframework.integration.config.xml.EnricherParserTests.Target . void ( this . boolean ) ; return org.springframework.integration.config.xml.EnricherParserTests.Target ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ExecutionCallback org.springframework.integration.config.xml.ExecutionCallback , java.lang.Object java.lang.Object , Message < ? > org.springframework.integration.config.xml.Message<?> ) throws java.lang.Exception { int ++ ; return org.springframework.integration.config.xml.ExecutionCallback . execute ( ) ; }  <METHOD_END>
