<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( DataSourceFactory org.springframework.jdbc.datasource.embedded.DataSourceFactory ) { Assert . notNull ( org.springframework.jdbc.datasource.embedded.DataSourceFactory , STRING ) ; this . org.springframework.jdbc.datasource.embedded.DataSourceFactory = org.springframework.jdbc.datasource.embedded.DataSourceFactory ; }  <METHOD_END>
<METHOD_START> public void void ( EmbeddedDatabaseType org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer = EmbeddedDatabaseConfigurerFactory . getConfigurer ( org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType ) ; }  <METHOD_END>
<METHOD_START> public void void ( EmbeddedDatabaseConfigurer org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer = org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer ; }  <METHOD_END>
<METHOD_START> public void void ( DatabasePopulator org.springframework.jdbc.datasource.embedded.DatabasePopulator ) { this . org.springframework.jdbc.datasource.embedded.DatabasePopulator = org.springframework.jdbc.datasource.embedded.DatabasePopulator ; }  <METHOD_END>
<METHOD_START> public org.springframework.jdbc.datasource.embedded.EmbeddedDatabase org.springframework.jdbc.datasource.embedded.EmbeddedDatabase ( ) { if ( this . javax.sql.DataSource == null ) { void ( ) ; } return new org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactory.EmbeddedDataSourceProxy ( this . javax.sql.DataSource ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . boolean ) { void ( java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ) ; } if ( this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer == null ) { this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer = EmbeddedDatabaseConfigurerFactory . getConfigurer ( EmbeddedDatabaseType . HSQL ) ; } this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer . configureConnectionProperties ( this . org.springframework.jdbc.datasource.embedded.DataSourceFactory . getConnectionProperties ( ) , this . java.lang.String ) ; this . javax.sql.DataSource = this . org.springframework.jdbc.datasource.embedded.DataSourceFactory . getDataSource ( ) ; if ( org.springframework.jdbc.datasource.embedded.Log . isInfoEnabled ( ) ) { if ( this . javax.sql.DataSource instanceof SimpleDriverDataSource ) { SimpleDriverDataSource org.springframework.jdbc.datasource.embedded.SimpleDriverDataSource = ( SimpleDriverDataSource ) this . javax.sql.DataSource ; org.springframework.jdbc.datasource.embedded.Log . info ( java.lang.String . java.lang.String ( STRING , org.springframework.jdbc.datasource.embedded.SimpleDriverDataSource . getUrl ( ) , org.springframework.jdbc.datasource.embedded.SimpleDriverDataSource . getUsername ( ) ) ) ; } else { org.springframework.jdbc.datasource.embedded.Log . info ( java.lang.String . java.lang.String ( STRING , this . java.lang.String ) ) ; } } if ( this . org.springframework.jdbc.datasource.embedded.DatabasePopulator != null ) { try { DatabasePopulatorUtils . execute ( this . org.springframework.jdbc.datasource.embedded.DatabasePopulator , this . javax.sql.DataSource ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { void ( ) ; throw java.lang.RuntimeException ; } } }  <METHOD_END>
<METHOD_START> protected void void ( ) { if ( this . javax.sql.DataSource != null ) { if ( org.springframework.jdbc.datasource.embedded.Log . isInfoEnabled ( ) ) { if ( this . javax.sql.DataSource instanceof SimpleDriverDataSource ) { org.springframework.jdbc.datasource.embedded.Log . info ( java.lang.String . java.lang.String ( STRING , ( ( SimpleDriverDataSource ) this . javax.sql.DataSource ) . getUrl ( ) ) ) ; } else { org.springframework.jdbc.datasource.embedded.Log . info ( java.lang.String . java.lang.String ( STRING , this . java.lang.String ) ) ; } } this . org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseConfigurer . shutdown ( this . javax.sql.DataSource , this . java.lang.String ) ; this . javax.sql.DataSource = null ; } }  <METHOD_END>
<METHOD_START> protected final javax.sql.DataSource javax.sql.DataSource ( ) { return this . javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> public void ( javax.sql.DataSource javax.sql.DataSource ) { this . javax.sql.DataSource = javax.sql.DataSource ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( ) java.sql.SQLException { return this . javax.sql.DataSource . java.sql.Connection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.sql.Connection java.sql.Connection ( java.lang.String java.lang.String , java.lang.String java.lang.String ) throws java.sql.SQLException { return this . javax.sql.DataSource . java.sql.Connection ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.io.PrintWriter java.io.PrintWriter ( ) java.sql.SQLException { return this . javax.sql.DataSource . java.io.PrintWriter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.PrintWriter java.io.PrintWriter ) throws java.sql.SQLException { this . javax.sql.DataSource . void ( java.io.PrintWriter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) java.sql.SQLException { return this . javax.sql.DataSource . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) throws java.sql.SQLException { this . javax.sql.DataSource . void ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws java.sql.SQLException { return this . javax.sql.DataSource . T ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws java.sql.SQLException { return this . javax.sql.DataSource . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.logging.Logger java.util.logging.Logger ( ) { return java.util.logging.Logger . java.util.logging.Logger ( java.util.logging.Logger . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( ) ; }  <METHOD_END>
