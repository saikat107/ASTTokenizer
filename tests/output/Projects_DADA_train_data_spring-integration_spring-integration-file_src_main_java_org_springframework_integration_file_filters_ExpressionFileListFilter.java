<METHOD_START> public void ( java.lang.String java.lang.String ) { this( org.springframework.integration.file.filters.ExpressionParser . parseExpression ( java.lang.String ) ); Assert . hasText ( java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.file.filters.Expression ) { Assert . notNull ( org.springframework.integration.file.filters.Expression , STRING ) ; this . org.springframework.integration.file.filters.Expression = org.springframework.integration.file.filters.Expression ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.file.filters.BeanFactory ) throws org.springframework.integration.file.filters.BeansException { this . org.springframework.integration.file.filters.BeanFactory = org.springframework.integration.file.filters.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( F F ) { return this . org.springframework.integration.file.filters.Expression . getValue ( org.springframework.integration.file.filters.EvaluationContext ( ) , F , java.lang.Boolean .class ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.file.filters.EvaluationContext org.springframework.integration.file.filters.EvaluationContext ( ) { if ( this . org.springframework.integration.file.filters.EvaluationContext == null ) { this . org.springframework.integration.file.filters.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.file.filters.BeanFactory ) ; } return this . org.springframework.integration.file.filters.EvaluationContext ; }  <METHOD_END>
