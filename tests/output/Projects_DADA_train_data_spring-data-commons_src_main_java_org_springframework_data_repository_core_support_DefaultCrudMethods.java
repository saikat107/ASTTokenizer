<METHOD_START> public void ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { Assert . notNull ( org.springframework.data.repository.core.support.RepositoryMetadata , STRING ) ; this . java.util.Optional<java.lang.reflect.Method> = java.util.Optional<java.lang.reflect.Method> ( org.springframework.data.repository.core.support.RepositoryMetadata ) ; this . java.util.Optional<java.lang.reflect.Method> = java.util.Optional<java.lang.reflect.Method> ( org.springframework.data.repository.core.support.RepositoryMetadata ) ; this . java.util.Optional<java.lang.reflect.Method> = java.util.Optional<java.lang.reflect.Method> ( org.springframework.data.repository.core.support.RepositoryMetadata ) ; this . java.util.Optional<java.lang.reflect.Method> = java.util.Optional<java.lang.reflect.Method> ( org.springframework.data.repository.core.support.RepositoryMetadata ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) , java.lang.Object .class ) ) { java.lang.reflect.Method java.lang.reflect.Method = findMethod ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) , java.lang.String , java.lang.Class<> ) ; if ( java.lang.reflect.Method != null ) { return java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; } } return java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List ( org.springframework.data.repository.core.support.RepositoryMetadata . getDomainType ( ) , org.springframework.data.repository.core.support.RepositoryMetadata . getIdType ( ) , java.io.Serializable .class , java.lang.Iterable .class ) ) { java.lang.reflect.Method java.lang.reflect.Method = findMethod ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) , java.lang.String , java.lang.Class<> ) ; if ( java.lang.reflect.Method != null ) { return java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; } } return java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List<java.lang.Class<? extends java.lang.Object>> ( Pageable .class , Sort .class ) ) { if ( hasMethod ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) , java.lang.String , java.lang.Class<> ) ) { java.lang.reflect.Method java.lang.reflect.Method = findMethod ( PagingAndSortingRepository .class , java.lang.String , java.lang.Class<> ) ; if ( java.lang.reflect.Method != null ) { return java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; } } } if ( hasMethod ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) , java.lang.String ) ) { return java.util.Optional<java.lang.reflect.Method> ( findMethod ( CrudRepository .class , java.lang.String ) , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; } return java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( RepositoryMetadata org.springframework.data.repository.core.support.RepositoryMetadata ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.util.List ( org.springframework.data.repository.core.support.RepositoryMetadata . getIdType ( ) , java.io.Serializable .class ) ) { java.lang.reflect.Method java.lang.reflect.Method = findMethod ( org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) , java.lang.String , java.lang.Class<> ) ; if ( java.lang.reflect.Method != null ) { return java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method , org.springframework.data.repository.core.support.RepositoryMetadata . getRepositoryInterface ( ) ) ; } } return java.util.Optional . java.util.Optional<java.lang.reflect.Method> ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Optional . java.util.Optional ( ClassUtils . getMostSpecificMethod ( java.lang.reflect.Method , java.lang.Class<> ) ) . map ( it -> { ReflectionUtils . makeAccessible ( it ) ; return it ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return java.util.Optional<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Method> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return java.util.Optional<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Method> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return java.util.Optional<java.lang.reflect.Method> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Method> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.Optional<java.lang.reflect.Method> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.Optional<java.lang.reflect.Method> ( ) { return this . java.util.Optional<java.lang.reflect.Method> ; }  <METHOD_END>
