<METHOD_START> public void ( PublisherMetadataSource org.springframework.integration.aop.PublisherMetadataSource ) { Assert . notNull ( org.springframework.integration.aop.PublisherMetadataSource , STRING ) ; this . org.springframework.integration.aop.PublisherMetadataSource = org.springframework.integration.aop.PublisherMetadataSource ; }  <METHOD_END>
<METHOD_START> public void void ( PublisherMetadataSource org.springframework.integration.aop.PublisherMetadataSource ) { Assert . notNull ( org.springframework.integration.aop.PublisherMetadataSource , STRING ) ; this . org.springframework.integration.aop.PublisherMetadataSource = org.springframework.integration.aop.PublisherMetadataSource ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver < MessageChannel > org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> ) { this . org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> = org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.aop.BeanFactory ) throws org.springframework.integration.aop.BeansException { this . org.springframework.integration.aop.BeanFactory = org.springframework.integration.aop.BeanFactory ; this . org.springframework.integration.aop.MessagingTemplate . setBeanFactory ( org.springframework.integration.aop.BeanFactory ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.aop.MessageBuilderFactory org.springframework.integration.aop.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.aop.BeanFactory != null ) { this . org.springframework.integration.aop.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.aop.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.aop.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final java.lang.Object java.lang.Object ( final MethodInvocation org.springframework.integration.aop.MethodInvocation ) throws java.lang.Throwable { Assert . notNull ( this . org.springframework.integration.aop.PublisherMetadataSource , STRING ) ; final StandardEvaluationContext org.springframework.integration.aop.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . org.springframework.integration.aop.BeanFactory ) ; java.lang.Class<?> < ? > java.lang.Class<?> = AopUtils . getTargetClass ( org.springframework.integration.aop.MethodInvocation . getThis ( ) ) ; final java.lang.reflect.Method java.lang.reflect.Method = AopUtils . getMostSpecificMethod ( org.springframework.integration.aop.MethodInvocation . getMethod ( ) , java.lang.Class<> ) ; java.lang.String [] java.lang.String[] = this . java.lang.String[] ( java.lang.reflect.Method ) ; org.springframework.integration.aop.StandardEvaluationContext . setVariable ( PublisherMetadataSource . METHOD_NAME_VARIABLE_NAME , java.lang.reflect.Method . java.lang.String ( ) ) ; if ( org.springframework.integration.aop.MethodInvocation . getArguments ( ) . length > NUMBER && java.lang.String[] != null ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > ( ) ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { if ( org.springframework.integration.aop.MethodInvocation . getArguments ( ) . length <= int ) { break; } java.lang.Object java.lang.Object = org.springframework.integration.aop.MethodInvocation . getArguments ( ) [ int ] ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( int , java.lang.Object ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.String[] [ int ] , java.lang.Object ) ; } org.springframework.integration.aop.StandardEvaluationContext . setVariable ( PublisherMetadataSource . ARGUMENT_MAP_VARIABLE_NAME , java.util.Map<java.lang.Object,java.lang.Object> ) ; } try { java.lang.Object java.lang.Object = org.springframework.integration.aop.MethodInvocation . proceed ( ) ; org.springframework.integration.aop.StandardEvaluationContext . setVariable ( PublisherMetadataSource . RETURN_VALUE_VARIABLE_NAME , java.lang.Object ) ; return java.lang.Object ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.aop.StandardEvaluationContext . setVariable ( PublisherMetadataSource . EXCEPTION_VARIABLE_NAME , java.lang.Throwable ) ; throw java.lang.Throwable ; } finally { void ( java.lang.reflect.Method , org.springframework.integration.aop.StandardEvaluationContext ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( java.lang.reflect.Method java.lang.reflect.Method ) { return this . org.springframework.integration.aop.ParameterNameDiscoverer . getParameterNames ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.reflect.Method java.lang.reflect.Method , StandardEvaluationContext org.springframework.integration.aop.StandardEvaluationContext ) throws java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.integration.aop.PublisherMetadataSource . getPayloadExpression ( java.lang.reflect.Method ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING + PublisherMetadataSource . RETURN_VALUE_VARIABLE_NAME ; } Expression org.springframework.integration.aop.Expression = this . org.springframework.integration.aop.ExpressionParser . parseExpression ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.integration.aop.Expression . getValue ( org.springframework.integration.aop.StandardEvaluationContext ) ; if ( java.lang.Object != null ) { AbstractIntegrationMessageBuilder < ? > org.springframework.integration.aop.AbstractIntegrationMessageBuilder<?> = ( java.lang.Object instanceof Message < ? > ) ? org.springframework.integration.aop.MessageBuilderFactory ( ) . fromMessage ( ( Message < ? > ) java.lang.Object ) : org.springframework.integration.aop.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( java.lang.reflect.Method , org.springframework.integration.aop.StandardEvaluationContext ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { org.springframework.integration.aop.AbstractIntegrationMessageBuilder<> . copyHeaders ( java.util.Map<java.lang.String,java.lang.Object> ) ; } Message < ? > org.springframework.integration.aop.Message<?> = org.springframework.integration.aop.AbstractIntegrationMessageBuilder<> . build ( ) ; java.lang.String java.lang.String = this . org.springframework.integration.aop.PublisherMetadataSource . getChannelName ( java.lang.reflect.Method ) ; MessageChannel org.springframework.integration.aop.MessageChannel = null ; if ( java.lang.String != null ) { Assert . state ( this . org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> != null , STRING ) ; org.springframework.integration.aop.MessageChannel = this . org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> . resolveDestination ( java.lang.String ) ; } if ( org.springframework.integration.aop.MessageChannel != null ) { this . org.springframework.integration.aop.MessagingTemplate . send ( org.springframework.integration.aop.MessageChannel , org.springframework.integration.aop.Message<> ) ; } else { if ( this . java.lang.String != null ) { synchronized ( this ) { if ( this . java.lang.String != null && this . org.springframework.integration.aop.MessagingTemplate . getDefaultDestination ( ) == null ) { Assert . state ( this . org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> != null , STRING ) ; this . org.springframework.integration.aop.MessagingTemplate . setDefaultChannel ( this . org.springframework.integration.aop.DestinationResolver<org.springframework.integration.aop.MessageChannel> . resolveDestination ( this . java.lang.String ) ) ; } this . java.lang.String = null ; } } this . org.springframework.integration.aop.MessagingTemplate . send ( org.springframework.integration.aop.Message<> ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.lang.reflect.Method java.lang.reflect.Method , StandardEvaluationContext org.springframework.integration.aop.StandardEvaluationContext )			throws org.springframework.integration.aop.ParseException , org.springframework.integration.aop.EvaluationException { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = this . org.springframework.integration.aop.PublisherMetadataSource . getHeaderExpressions ( java.lang.reflect.Method ) ; if ( java.util.Map<java.lang.String,java.lang.String> != null ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map.Entry<java.lang.String,java.lang.String> : java.util.Map<java.lang.String,java.lang.String> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.String>> ( ) ) { java.lang.String java.lang.String = java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Expression org.springframework.integration.aop.Expression = this . org.springframework.integration.aop.ExpressionParser . parseExpression ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.integration.aop.Expression . getValue ( org.springframework.integration.aop.StandardEvaluationContext ) ; if ( java.lang.Object != null ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.String> . java.lang.String ( ) , java.lang.Object ) ; } } } if ( java.util.Map<java.lang.String,java.lang.Object> . int ( ) > NUMBER ) { return java.util.Map<java.lang.String,java.lang.Object> ; } } return null ; }  <METHOD_END>
