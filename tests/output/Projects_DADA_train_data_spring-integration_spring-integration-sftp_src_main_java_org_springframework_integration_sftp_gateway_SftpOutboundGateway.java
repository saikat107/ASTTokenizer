<METHOD_START> public void ( SessionFactory < LsEntry > org.springframework.integration.sftp.gateway.SessionFactory<org.springframework.integration.sftp.gateway.LsEntry> , MessageSessionCallback < LsEntry , ? > org.springframework.integration.sftp.gateway.MessageSessionCallback<org.springframework.integration.sftp.gateway.LsEntry,?> ) { this( new SftpRemoteFileTemplate ( org.springframework.integration.sftp.gateway.SessionFactory<org.springframework.integration.sftp.gateway.LsEntry> ) , org.springframework.integration.sftp.gateway.MessageSessionCallback<org.springframework.integration.sftp.gateway.LsEntry,> ); }  <METHOD_END>
<METHOD_START> public void ( RemoteFileTemplate < LsEntry > org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> , MessageSessionCallback < LsEntry , ? > org.springframework.integration.sftp.gateway.MessageSessionCallback<org.springframework.integration.sftp.gateway.LsEntry,?> ) { super( org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> , org.springframework.integration.sftp.gateway.MessageSessionCallback<org.springframework.integration.sftp.gateway.LsEntry,> ); }  <METHOD_END>
<METHOD_START> public void ( SessionFactory < LsEntry > org.springframework.integration.sftp.gateway.SessionFactory<org.springframework.integration.sftp.gateway.LsEntry> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( new SftpRemoteFileTemplate ( org.springframework.integration.sftp.gateway.SessionFactory<org.springframework.integration.sftp.gateway.LsEntry> ) , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( RemoteFileTemplate < LsEntry > org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> , java.lang.String java.lang.String , java.lang.String java.lang.String ) { super( org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> , java.lang.String , java.lang.String ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( LsEntry org.springframework.integration.sftp.gateway.LsEntry ) { return org.springframework.integration.sftp.gateway.LsEntry . getAttrs ( ) . isDir ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( LsEntry org.springframework.integration.sftp.gateway.LsEntry ) { return org.springframework.integration.sftp.gateway.LsEntry . getAttrs ( ) . isLink ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( LsEntry org.springframework.integration.sftp.gateway.LsEntry ) { return org.springframework.integration.sftp.gateway.LsEntry . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( AbstractFileInfo < LsEntry > org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry> ) { return org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry> . getFilename ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> < AbstractFileInfo < LsEntry > > java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> ( java.util.Collection<org.springframework.integration.sftp.gateway.LsEntry> < LsEntry > java.util.Collection<org.springframework.integration.sftp.gateway.LsEntry> ) { java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> < AbstractFileInfo < LsEntry > > java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> = new java.util.ArrayList<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> < AbstractFileInfo < LsEntry > > ( ) ; for ( LsEntry org.springframework.integration.sftp.gateway.LsEntry : java.util.Collection<org.springframework.integration.sftp.gateway.LsEntry> ) { java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> . add ( new SftpFileInfo ( org.springframework.integration.sftp.gateway.LsEntry ) ) ; } return java.util.List<org.springframework.integration.sftp.gateway.AbstractFileInfo<org.springframework.integration.sftp.gateway.LsEntry>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected long long ( LsEntry org.springframework.integration.sftp.gateway.LsEntry ) { return ( ( long ) org.springframework.integration.sftp.gateway.LsEntry . getAttrs ( ) . getMTime ( ) ) * NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.integration.sftp.gateway.LsEntry org.springframework.integration.sftp.gateway.LsEntry ( LsEntry org.springframework.integration.sftp.gateway.LsEntry , java.lang.String java.lang.String ) { ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.integration.sftp.gateway.LsEntry , java.lang.String + org.springframework.integration.sftp.gateway.LsEntry . getFilename ( ) ) ; return org.springframework.integration.sftp.gateway.LsEntry ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( RemoteFileTemplate < LsEntry > org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> , final java.lang.String java.lang.String , final int int ) { org.springframework.integration.sftp.gateway.RemoteFileTemplate<org.springframework.integration.sftp.gateway.LsEntry> . executeWithClient ( ( ClientCallbackWithoutResult < ChannelSftp > ) client -> { try { client . chmod ( chmod , path ) ; } catch ( SftpException e ) { throw new GeneralSftpException ( STRING , e ) ; } } ) ; }  <METHOD_END>
