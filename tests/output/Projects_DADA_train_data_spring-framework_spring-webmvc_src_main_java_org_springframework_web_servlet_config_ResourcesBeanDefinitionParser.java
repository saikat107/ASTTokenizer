<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.config.BeanDefinition org.springframework.web.servlet.config.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.web.servlet.config.ParserContext ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ; void ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element , java.lang.Object ) ; if ( java.lang.String == null ) { return null ; } java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = new ManagedMap <> ( ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . error ( STRING , org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; return null ; } java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerPathMatcher ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerUrlPathHelper ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( SimpleUrlHandlerMapping .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , java.util.Map<java.lang.String,java.lang.String> ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , StringUtils . hasText ( java.lang.String ) ? java.lang.String : Ordered . LOWEST_PRECEDENCE - NUMBER ) ; RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = MvcNamespaceUtils . registerCorsConfigurations ( null , org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.RuntimeBeanReference ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . generateBeanName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; MvcNamespaceUtils . registerDefaultComponents ( org.springframework.web.servlet.config.ParserContext , java.lang.Object ) ; return null ; }  <METHOD_END>
<METHOD_START> private void void ( ParserContext org.springframework.web.servlet.config.ParserContext , java.lang.Object java.lang.Object ) { if ( ! org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ResourceUrlProvider .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ResourceUrlProviderExposingInterceptor .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RootBeanDefinition ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( MappedInterceptor .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , ( java.lang.Object ) null ) ; org.springframework.web.servlet.config.RootBeanDefinition . getConstructorArgumentValues ( ) . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RootBeanDefinition ) ; java.lang.String java.lang.String = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . registerWithGeneratedName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ParserContext org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . error ( STRING , org.springframework.web.servlet.config.ParserContext . extractSource ( org.w3c.dom.Element ) ) ; return null ; } ManagedList < java.lang.String > org.springframework.web.servlet.config.ManagedList<java.lang.String> = new ManagedList <> ( ) ; org.springframework.web.servlet.config.ManagedList<java.lang.String> . addAll ( java.util.Arrays . java.util.List ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ResourceHttpRequestHandler .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; MutablePropertyValues org.springframework.web.servlet.config.MutablePropertyValues = org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) ; org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.String> ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , java.lang.String ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { CacheControl org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl ( org.w3c.dom.Element ) ; org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , org.springframework.web.servlet.config.CacheControl ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { void ( org.springframework.web.servlet.config.RootBeanDefinition , org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element , java.lang.Object ) ; } java.lang.Object java.lang.Object = MvcNamespaceUtils . getContentNegotiationManager ( org.springframework.web.servlet.config.ParserContext ) ; if ( java.lang.Object != null ) { org.springframework.web.servlet.config.MutablePropertyValues . add ( STRING , java.lang.Object ) ; } java.lang.String java.lang.String = org.springframework.web.servlet.config.ParserContext . getReaderContext ( ) . generateBeanName ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . getRegistry ( ) . registerBeanDefinition ( java.lang.String , org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ParserContext . registerComponent ( new BeanComponentDefinition ( org.springframework.web.servlet.config.RootBeanDefinition , java.lang.String ) ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> private void void ( RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition , ParserContext org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; boolean boolean = ! ( StringUtils . hasText ( java.lang.String ) && STRING . boolean ( java.lang.String ) ) ; ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> = new ManagedList <> ( ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . setSource ( java.lang.Object ) ; void ( org.springframework.web.servlet.config.ManagedList<java.lang.Object> , org.springframework.web.servlet.config.ManagedList<java.lang.Object> , org.w3c.dom.Element , java.lang.Object ) ; void ( boolean , org.springframework.web.servlet.config.ManagedList<java.lang.Object> , org.springframework.web.servlet.config.ManagedList<java.lang.Object> , org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element , java.lang.Object ) ; if ( ! org.springframework.web.servlet.config.ManagedList<java.lang.Object> . isEmpty ( ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; } if ( ! org.springframework.web.servlet.config.ManagedList<java.lang.Object> . isEmpty ( ) ) { org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . add ( STRING , org.springframework.web.servlet.config.ManagedList<java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.CacheControl org.springframework.web.servlet.config.CacheControl ( org.w3c.dom.Element org.w3c.dom.Element ) { CacheControl org.springframework.web.servlet.config.CacheControl = CacheControl . empty ( ) ; if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = CacheControl . noCache ( ) ; } else if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = CacheControl . noStore ( ) ; } else if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CacheControl = CacheControl . maxAge ( java.lang.Long . long ( org.w3c.dom.Element . java.lang.String ( STRING ) ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . mustRevalidate ( ) ; } if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . noTransform ( ) ; } if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . cachePublic ( ) ; } if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . cachePrivate ( ) ; } if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . proxyRevalidate ( ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . sMaxAge ( java.lang.Long . long ( org.w3c.dom.Element . java.lang.String ( STRING ) ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . staleWhileRevalidate ( java.lang.Long . long ( org.w3c.dom.Element . java.lang.String ( STRING ) ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } if ( org.w3c.dom.Element . boolean ( STRING ) ) { org.springframework.web.servlet.config.CacheControl = org.springframework.web.servlet.config.CacheControl . staleIfError ( java.lang.Long . long ( org.w3c.dom.Element . java.lang.String ( STRING ) ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } return org.springframework.web.servlet.config.CacheControl ; }  <METHOD_END>
<METHOD_START> private void void ( ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> , ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( STRING . boolean ( java.lang.String ) ) { ConstructorArgumentValues org.springframework.web.servlet.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( CachingResourceResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.web.servlet.config.ConstructorArgumentValues ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( CachingResourceTransformer .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.web.servlet.config.ConstructorArgumentValues ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) && StringUtils . hasText ( java.lang.String ) ) { RuntimeBeanReference org.springframework.web.servlet.config.RuntimeBeanReference = new RuntimeBeanReference ( java.lang.String ) ; org.springframework.web.servlet.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RuntimeBeanReference ) ; org.springframework.web.servlet.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , java.lang.String ) ; } else { ConstructorArgumentValues org.springframework.web.servlet.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.servlet.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , java.lang.String ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ConcurrentMapCache .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.web.servlet.config.ConstructorArgumentValues ) ; org.springframework.web.servlet.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.springframework.web.servlet.config.RootBeanDefinition ) ; } org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> , ManagedList < ? super java.lang.Object > org.springframework.web.servlet.config.ManagedList<? super java.lang.Object> , ParserContext org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElements ( org.w3c.dom.Element ) ) { if ( java.lang.String . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = org.springframework.web.servlet.config.RootBeanDefinition ( org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element , java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( CssLinkResourceTransformer .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } } else { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } } } if ( boolean ) { if ( boolean ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( WebJarsResourceResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( PathResourceResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( org.springframework.web.servlet.config.RootBeanDefinition ) ; } org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; if ( org.w3c.dom.Element != null ) { for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) ) { java.lang.Object java.lang.Object = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; org.springframework.web.servlet.config.ManagedList<java.lang.Object> . add ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition ( ParserContext org.springframework.web.servlet.config.ParserContext , org.w3c.dom.Element org.w3c.dom.Element , java.lang.Object java.lang.Object ) { ManagedMap < java.lang.String , ? super java.lang.Object > org.springframework.web.servlet.config.ManagedMap<java.lang.String,? super java.lang.Object> = new ManagedMap <> ( ) ; org.springframework.web.servlet.config.ManagedMap<java.lang.String,java.lang.Object> . setSource ( java.lang.Object ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( VersionResourceResolver .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . getPropertyValues ( ) . addPropertyValue ( STRING , org.springframework.web.servlet.config.ManagedMap<java.lang.String,java.lang.Object> ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElements ( org.w3c.dom.Element ) ) { java.lang.String [] java.lang.String[] = StringUtils . commaDelimitedListToStringArray ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ; java.lang.Object java.lang.Object = null ; if ( java.lang.String . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { ConstructorArgumentValues org.springframework.web.servlet.config.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.web.servlet.config.ConstructorArgumentValues . addIndexedArgumentValue ( NUMBER , org.w3c.dom.Element . java.lang.String ( STRING ) ) ; RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( FixedVersionStrategy .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.web.servlet.config.RootBeanDefinition . setConstructorArgumentValues ( org.springframework.web.servlet.config.ConstructorArgumentValues ) ; java.lang.Object = org.springframework.web.servlet.config.RootBeanDefinition ; } else if ( java.lang.String . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { RootBeanDefinition org.springframework.web.servlet.config.RootBeanDefinition = new RootBeanDefinition ( ContentVersionStrategy .class ) ; org.springframework.web.servlet.config.RootBeanDefinition . setSource ( java.lang.Object ) ; org.springframework.web.servlet.config.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; java.lang.Object = org.springframework.web.servlet.config.RootBeanDefinition ; } else if ( java.lang.String . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING , STRING ) . get ( NUMBER ) ; java.lang.Object = org.springframework.web.servlet.config.ParserContext . getDelegate ( ) . parsePropertySubElement ( org.w3c.dom.Element , null ) ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { org.springframework.web.servlet.config.ManagedMap<java.lang.String,java.lang.Object> . put ( java.lang.String , java.lang.Object ) ; } } return org.springframework.web.servlet.config.RootBeanDefinition ; }  <METHOD_END>
