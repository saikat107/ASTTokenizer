<METHOD_START> public void void ( ) { org.springframework.data.gemfire.listener.QueryService ( java.lang.String ( java.lang.String ( ) ) ) ; java.util.concurrent.Executor ( ) ; void ( java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> ) ; Assert . state ( org.springframework.data.gemfire.listener.QueryService != null , STRING ) ; boolean = true ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = this . java.lang.String ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String java.lang.String = GemfireConstants . DEFAULT_GEMFIRE_POOL_NAME ; java.lang.String = ( org.springframework.data.gemfire.listener.BeanFactory != null && org.springframework.data.gemfire.listener.BeanFactory . containsBean ( java.lang.String ) ? java.lang.String : GemfireUtils . DEFAULT_POOL_NAME ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { if ( org.springframework.data.gemfire.listener.BeanFactory != null && org.springframework.data.gemfire.listener.BeanFactory . isTypeMatch ( java.lang.String , Pool .class ) ) { org.springframework.data.gemfire.listener.BeanFactory . getBean ( java.lang.String , Pool .class ) ; } } catch ( BeansException org.springframework.data.gemfire.listener.BeansException ) { Assert . notNull ( PoolManager . find ( java.lang.String ) , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.listener.QueryService org.springframework.data.gemfire.listener.QueryService ( java.lang.String java.lang.String ) { if ( org.springframework.data.gemfire.listener.QueryService == null || StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.gemfire.listener.QueryService = DefaultableDelegatingPoolAdapter . from ( DelegatingPoolAdapter . from ( PoolManager . find ( java.lang.String ) ) ) . preferPool ( ) . getQueryService ( org.springframework.data.gemfire.listener.QueryService ) ; } return org.springframework.data.gemfire.listener.QueryService ; }  <METHOD_END>
<METHOD_START> java.util.concurrent.Executor java.util.concurrent.Executor ( ) { if ( java.util.concurrent.Executor == null ) { java.util.concurrent.Executor = org.springframework.data.gemfire.listener.TaskExecutor ( ) ; boolean = true ; } return java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.listener.TaskExecutor org.springframework.data.gemfire.listener.TaskExecutor ( ) { return new SimpleAsyncTaskExecutor ( java.lang.String != null ? java.lang.String . java.lang.String ( STRING , java.lang.String ) : java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> < ContinuousQueryDefinition > java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> ) { if ( boolean ( ) ) { void ( ) ; } void ( ) ; for ( ContinuousQueryDefinition org.springframework.data.gemfire.listener.ContinuousQueryDefinition : java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> ) { org.springframework.data.gemfire.listener.CqQuery ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) ; } }  <METHOD_END>
<METHOD_START> public synchronized void void ( ) { if ( ! boolean ( ) ) { void ( ) ; boolean = true ; if ( org.springframework.data.gemfire.listener.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.listener.Log . debug ( STRING ) ; } } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( CqQuery org.springframework.data.gemfire.listener.CqQuery : java.util.Queue<org.springframework.data.gemfire.listener.CqQuery> ) { void ( org.springframework.data.gemfire.listener.CqQuery ) ; } }  <METHOD_END>
<METHOD_START> private void void ( CqQuery org.springframework.data.gemfire.listener.CqQuery ) { try { org.springframework.data.gemfire.listener.CqQuery . execute ( ) ; } catch ( QueryException org.springframework.data.gemfire.listener.QueryException ) { throw new GemfireQueryException ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.listener.CqQuery . getName ( ) , org.springframework.data.gemfire.listener.CqQuery . getState ( ) ) , org.springframework.data.gemfire.listener.QueryException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { void ( ) ; java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) { if ( boolean ( ) ) { void ( ) ; boolean = false ; } if ( org.springframework.data.gemfire.listener.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.listener.Log . debug ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( CqQuery org.springframework.data.gemfire.listener.CqQuery : java.util.Queue<org.springframework.data.gemfire.listener.CqQuery> ) { try { org.springframework.data.gemfire.listener.CqQuery . stop ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.gemfire.listener.Log . warn ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.listener.CqQuery . getName ( ) , org.springframework.data.gemfire.listener.CqQuery . getState ( ) ) , java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { void ( ) ; void ( ) ; void ( ) ; boolean = false ; }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( CqQuery org.springframework.data.gemfire.listener.CqQuery : java.util.Queue<org.springframework.data.gemfire.listener.CqQuery> ) { try { if ( ! org.springframework.data.gemfire.listener.CqQuery . isClosed ( ) ) { org.springframework.data.gemfire.listener.CqQuery . close ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.data.gemfire.listener.Log . warn ( java.lang.String . java.lang.String ( STRING , org.springframework.data.gemfire.listener.CqQuery . getName ( ) , org.springframework.data.gemfire.listener.CqQuery . getState ( ) ) , java.lang.Exception ) ; } } java.util.Queue<org.springframework.data.gemfire.listener.CqQuery> . clear ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { if ( boolean ) { if ( java.util.concurrent.Executor instanceof DisposableBean ) { ( ( DisposableBean ) java.util.concurrent.Executor ) . destroy ( ) ; if ( org.springframework.data.gemfire.listener.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.listener.Log . debug ( STRING ) ; } } } }  <METHOD_END>
<METHOD_START> public final boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public void void ( final boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public synchronized boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.gemfire.listener.BeanFactory ) throws org.springframework.data.gemfire.listener.BeansException { this . org.springframework.data.gemfire.listener.BeanFactory = org.springframework.data.gemfire.listener.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( RegionService org.springframework.data.gemfire.listener.RegionService ) { void ( org.springframework.data.gemfire.listener.RegionService . getQueryService ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ErrorHandler org.springframework.data.gemfire.listener.ErrorHandler ) { this . org.springframework.data.gemfire.listener.ErrorHandler = org.springframework.data.gemfire.listener.ErrorHandler ; }  <METHOD_END>
<METHOD_START> public void void ( final int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> < ContinuousQueryDefinition > java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> ) { java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> . clear ( ) ; java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> . addAll ( java.util.Set<org.springframework.data.gemfire.listener.ContinuousQueryDefinition> ) ; }  <METHOD_END>
<METHOD_START> public void void ( QueryService org.springframework.data.gemfire.listener.QueryService ) { this . org.springframework.data.gemfire.listener.QueryService = org.springframework.data.gemfire.listener.QueryService ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( ContinuousQueryDefinition org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) { void ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) ; }  <METHOD_END>
<METHOD_START> private void void ( ContinuousQueryDefinition org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) { CqQuery org.springframework.data.gemfire.listener.CqQuery = org.springframework.data.gemfire.listener.CqQuery ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) ; if ( boolean ( ) ) { void ( org.springframework.data.gemfire.listener.CqQuery ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.gemfire.listener.CqQuery org.springframework.data.gemfire.listener.CqQuery ( ContinuousQueryDefinition org.springframework.data.gemfire.listener.ContinuousQueryDefinition ) { try { CqAttributesFactory org.springframework.data.gemfire.listener.CqAttributesFactory = new CqAttributesFactory ( ) ; org.springframework.data.gemfire.listener.CqAttributesFactory . addCqListener ( new org.springframework.data.gemfire.listener.ContinuousQueryListenerContainer.EventDispatcherAdapter ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition . getListener ( ) ) ) ; CqAttributes org.springframework.data.gemfire.listener.CqAttributes = org.springframework.data.gemfire.listener.CqAttributesFactory . create ( ) ; CqQuery org.springframework.data.gemfire.listener.CqQuery = ( StringUtils . hasText ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition . getName ( ) ) ? org.springframework.data.gemfire.listener.QueryService . newCq ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition . getName ( ) , org.springframework.data.gemfire.listener.ContinuousQueryDefinition . getQuery ( ) , org.springframework.data.gemfire.listener.CqAttributes , org.springframework.data.gemfire.listener.ContinuousQueryDefinition . isDurable ( ) ) : org.springframework.data.gemfire.listener.QueryService . newCq ( org.springframework.data.gemfire.listener.ContinuousQueryDefinition . getQuery ( ) , org.springframework.data.gemfire.listener.CqAttributes , org.springframework.data.gemfire.listener.ContinuousQueryDefinition . isDurable ( ) ) ) ; java.util.Queue<org.springframework.data.gemfire.listener.CqQuery> . add ( org.springframework.data.gemfire.listener.CqQuery ) ; return org.springframework.data.gemfire.listener.CqQuery ; } catch ( QueryException org.springframework.data.gemfire.listener.QueryException ) { throw new GemfireQueryException ( STRING , org.springframework.data.gemfire.listener.QueryException ) ; } }  <METHOD_END>
<METHOD_START> private void void ( final ContinuousQueryListener org.springframework.data.gemfire.listener.ContinuousQueryListener , final CqEvent org.springframework.data.gemfire.listener.CqEvent ) { java.util.concurrent.Executor . void ( ( ) void ( org.springframework.data.gemfire.listener.ContinuousQueryListener , org.springframework.data.gemfire.listener.CqEvent ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ContinuousQueryListener org.springframework.data.gemfire.listener.ContinuousQueryListener , CqEvent org.springframework.data.gemfire.listener.CqEvent ) { try { org.springframework.data.gemfire.listener.ContinuousQueryListener . onEvent ( org.springframework.data.gemfire.listener.CqEvent ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { if ( boolean ( ) ) { void ( java.lang.Throwable ) ; } else { org.springframework.data.gemfire.listener.Log . debug ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Throwable java.lang.Throwable ) { if ( this . org.springframework.data.gemfire.listener.ErrorHandler != null ) { this . org.springframework.data.gemfire.listener.ErrorHandler . handleError ( java.lang.Throwable ) ; } else if ( org.springframework.data.gemfire.listener.Log . isWarnEnabled ( ) ) { org.springframework.data.gemfire.listener.Log . warn ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void ( ContinuousQueryListener org.springframework.data.gemfire.listener.ContinuousQueryListener ) { this . org.springframework.data.gemfire.listener.ContinuousQueryListener = org.springframework.data.gemfire.listener.ContinuousQueryListener ; }  <METHOD_END>
<METHOD_START> public void void ( CqEvent org.springframework.data.gemfire.listener.CqEvent ) { void ( org.springframework.data.gemfire.listener.ContinuousQueryListener , org.springframework.data.gemfire.listener.CqEvent ) ; }  <METHOD_END>
<METHOD_START> public void void ( CqEvent org.springframework.data.gemfire.listener.CqEvent ) { void ( org.springframework.data.gemfire.listener.ContinuousQueryListener , org.springframework.data.gemfire.listener.CqEvent ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) {		}  <METHOD_END>
