<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { org.springframework.cassandra.config.PoolingOptions = org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ( ) ) ) ; if ( int != org.springframework.cassandra.config.PoolingOptions . getHeartbeatIntervalSeconds ( ) ) { org.springframework.cassandra.config.PoolingOptions . setHeartbeatIntervalSeconds ( int ) ; } if ( int != org.springframework.cassandra.config.PoolingOptions . getIdleTimeoutSeconds ( ) ) { org.springframework.cassandra.config.PoolingOptions . setIdleTimeoutSeconds ( int ) ; } if ( java.util.concurrent.Executor != null ) { org.springframework.cassandra.config.PoolingOptions . setInitializationExecutor ( java.util.concurrent.Executor ) ; } if ( int != org.springframework.cassandra.config.PoolingOptions . getPoolTimeoutMillis ( ) ) { org.springframework.cassandra.config.PoolingOptions . setPoolTimeoutMillis ( int ) ; } if ( ! boolean ( ) ) { java.util.Optional<java.lang.reflect.Method> . void ( java.lang.reflect.Method -> invokeMethod ( java.lang.reflect.Method , org.springframework.cassandra.config.PoolingOptions , int ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ) { return java.util.Optional<java.lang.reflect.Method> . java.util.Optional<java.lang.Boolean> ( java.lang.reflect.Method -> { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) invokeMethod ( java.lang.reflect.Method , org.springframework.cassandra.config.PoolingOptions ) ; return java.lang.Integer . int ( ) == int ; } ) . java.lang.Boolean ( false ) ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) { return new PoolingOptions ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions ( ) { return org.springframework.cassandra.config.PoolingOptionsFactoryBean.LocalHostDistancePoolingOptions . org.springframework.cassandra.config.PoolingOptionsFactoryBean.LocalHostDistancePoolingOptions ( java.lang.Integer ( ) , java.lang.Integer ( ) , java.lang.Integer ( ) , java.lang.Integer ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions ( ) { return org.springframework.cassandra.config.PoolingOptionsFactoryBean.RemoteHostDistancePoolingOptions . org.springframework.cassandra.config.PoolingOptionsFactoryBean.RemoteHostDistancePoolingOptions ( java.lang.Integer ( ) , java.lang.Integer ( ) , java.lang.Integer ( ) , java.lang.Integer ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { return org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions ( ) . org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { return org.springframework.cassandra.config.PoolingOptionsFactoryBean.HostDistancePoolingOptions ( ) . org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( ) java.lang.Exception { return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( org.springframework.cassandra.config.PoolingOptions != null ? org.springframework.cassandra.config.PoolingOptions . getClass ( ) : PoolingOptions .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.Executor java.util.concurrent.Executor ( ) { return java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . int = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return int ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> protected void ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.cassandra.config.HostDistance org.springframework.cassandra.config.HostDistance ( )  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { if ( java.lang.Integer != null ) { org.springframework.cassandra.config.PoolingOptions . setCoreConnectionsPerHost ( org.springframework.cassandra.config.HostDistance ( ) , java.lang.Integer ) ; } return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { if ( java.lang.Integer != null ) { org.springframework.cassandra.config.PoolingOptions . setMaxConnectionsPerHost ( org.springframework.cassandra.config.HostDistance ( ) , java.lang.Integer ) ; } return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { if ( java.lang.Integer != null ) { org.springframework.cassandra.config.PoolingOptions . setMaxRequestsPerConnection ( org.springframework.cassandra.config.HostDistance ( ) , java.lang.Integer ) ; } return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { if ( java.lang.Integer != null ) { int int = org.springframework.cassandra.config.PoolingOptions . getNewConnectionThreshold ( org.springframework.cassandra.config.HostDistance ( ) ) ; if ( int < java.lang.Integer ) { org.springframework.cassandra.config.PoolingOptions . setNewConnectionThreshold ( org.springframework.cassandra.config.HostDistance ( ) , java.lang.Integer ) ; } } return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> protected java.lang.Integer java.lang.Integer ( ) { return java.lang.Integer ; }  <METHOD_END>
<METHOD_START> org.springframework.cassandra.config.PoolingOptions org.springframework.cassandra.config.PoolingOptions ( PoolingOptions org.springframework.cassandra.config.PoolingOptions ) { org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; org.springframework.cassandra.config.PoolingOptions ( org.springframework.cassandra.config.PoolingOptions ) ; return org.springframework.cassandra.config.PoolingOptions ; }  <METHOD_END>
<METHOD_START> static org.springframework.cassandra.config.PoolingOptionsFactoryBean.LocalHostDistancePoolingOptions org.springframework.cassandra.config.PoolingOptionsFactoryBean.LocalHostDistancePoolingOptions ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { return new org.springframework.cassandra.config.PoolingOptionsFactoryBean.LocalHostDistancePoolingOptions ( java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { super( java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.HostDistance org.springframework.cassandra.config.HostDistance ( ) { return HostDistance . LOCAL ; }  <METHOD_END>
<METHOD_START> static org.springframework.cassandra.config.PoolingOptionsFactoryBean.RemoteHostDistancePoolingOptions org.springframework.cassandra.config.PoolingOptionsFactoryBean.RemoteHostDistancePoolingOptions ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { return new org.springframework.cassandra.config.PoolingOptionsFactoryBean.RemoteHostDistancePoolingOptions ( java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> void ( java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer , java.lang.Integer java.lang.Integer ) { super( java.lang.Integer , java.lang.Integer , java.lang.Integer , java.lang.Integer ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.cassandra.config.HostDistance org.springframework.cassandra.config.HostDistance ( ) { return HostDistance . REMOTE ; }  <METHOD_END>
