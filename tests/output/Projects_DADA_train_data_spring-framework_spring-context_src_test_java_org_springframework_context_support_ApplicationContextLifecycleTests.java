<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.context.support.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.support.ApplicationContextLifecycleTests> ( ) ) ; org.springframework.context.support.AbstractApplicationContext . start ( ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.context.support.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.support.ApplicationContextLifecycleTests> ( ) ) ; org.springframework.context.support.AbstractApplicationContext . start ( ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; org.springframework.context.support.AbstractApplicationContext . stop ( ) ; java.lang.String java.lang.String = STRING ; assertFalse ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertFalse ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertFalse ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; assertFalse ( java.lang.String , org.springframework.context.support.LifecycleTestBean . isRunning ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.context.support.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.support.ApplicationContextLifecycleTests> ( ) ) ; org.springframework.context.support.AbstractApplicationContext . start ( ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > NUMBER ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) > org.springframework.context.support.LifecycleTestBean . getStartOrder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AbstractApplicationContext org.springframework.context.support.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.context.support.ApplicationContextLifecycleTests> ( ) ) ; org.springframework.context.support.AbstractApplicationContext . start ( ) ; org.springframework.context.support.AbstractApplicationContext . stop ( ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; LifecycleTestBean org.springframework.context.support.LifecycleTestBean = ( LifecycleTestBean ) org.springframework.context.support.AbstractApplicationContext . getBean ( STRING ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) > NUMBER ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) > NUMBER ) ; java.lang.String java.lang.String = STRING ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) < org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) < org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) ) ; assertTrue ( java.lang.String , org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) < org.springframework.context.support.LifecycleTestBean . getStopOrder ( ) ) ; }  <METHOD_END>
