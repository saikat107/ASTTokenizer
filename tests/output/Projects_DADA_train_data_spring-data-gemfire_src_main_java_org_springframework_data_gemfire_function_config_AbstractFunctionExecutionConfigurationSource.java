<METHOD_START> static java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> < java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > > java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) { return java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ; }  <METHOD_END>
<METHOD_START> static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> < java.lang.String > ( java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) . int ( ) ) ; for ( java.lang.Class<? extends java.lang.annotation.Annotation> < ? extends java.lang.annotation.Annotation > java.lang.Class<? extends java.lang.annotation.Annotation> : java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ) { java.util.Set<java.lang.String> . boolean ( java.lang.Class<> . java.lang.String ( ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> < ScannedGenericBeanDefinition > java.util.Collection<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> ( ResourceLoader org.springframework.data.gemfire.function.config.ResourceLoader ) { ClassPathScanningCandidateComponentProvider org.springframework.data.gemfire.function.config.ClassPathScanningCandidateComponentProvider = new FunctionExecutionComponentProvider ( getIncludeFilters ( ) , java.util.Set<java.lang.Class<? extends java.lang.annotation.Annotation>> ( ) ) ; org.springframework.data.gemfire.function.config.ClassPathScanningCandidateComponentProvider . setResourceLoader ( org.springframework.data.gemfire.function.config.ResourceLoader ) ; for ( TypeFilter org.springframework.data.gemfire.function.config.TypeFilter : getExcludeFilters ( ) ) { org.springframework.data.gemfire.function.config.ClassPathScanningCandidateComponentProvider . addExcludeFilter ( org.springframework.data.gemfire.function.config.TypeFilter ) ; } java.util.Set<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> < ScannedGenericBeanDefinition > java.util.Set<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> = new java.util.HashSet<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> < ScannedGenericBeanDefinition > ( ) ; for ( java.lang.String java.lang.String : getBasePackages ( ) ) { if ( org.springframework.data.gemfire.function.config.Log . isDebugEnabled ( ) ) { org.springframework.data.gemfire.function.config.Log . debug ( STRING + java.lang.String ) ; } java.util.Collection<org.springframework.data.gemfire.function.config.BeanDefinition> < BeanDefinition > java.util.Collection<org.springframework.data.gemfire.function.config.BeanDefinition> = org.springframework.data.gemfire.function.config.ClassPathScanningCandidateComponentProvider . findCandidateComponents ( java.lang.String ) ; for ( BeanDefinition org.springframework.data.gemfire.function.config.BeanDefinition : java.util.Collection<org.springframework.data.gemfire.function.config.BeanDefinition> ) { java.util.Set<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> . add ( ( ScannedGenericBeanDefinition ) org.springframework.data.gemfire.function.config.BeanDefinition ) ; } } return java.util.Set<org.springframework.data.gemfire.function.config.ScannedGenericBeanDefinition> ; }  <METHOD_END>
