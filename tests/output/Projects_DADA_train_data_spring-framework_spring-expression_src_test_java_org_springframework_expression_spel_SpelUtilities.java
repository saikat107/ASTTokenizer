<METHOD_START> public static void void ( java.io.PrintStream java.io.PrintStream , Expression org.springframework.expression.spel.Expression ) { java.io.PrintStream . void ( STRING + org.springframework.expression.spel.Expression . getExpressionString ( ) + STRING ) ; void ( java.io.PrintStream , ( ( SpelExpression ) org.springframework.expression.spel.Expression ) . getAST ( ) , STRING ) ; java.io.PrintStream . void ( STRING + org.springframework.expression.spel.Expression . getExpressionString ( ) + STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.io.PrintStream java.io.PrintStream , SpelNode org.springframework.expression.spel.SpelNode , java.lang.String java.lang.String ) { if ( org.springframework.expression.spel.SpelNode != null ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) . java.lang.StringBuilder ( org.springframework.expression.spel.SpelNode . getClass ( ) . getSimpleName ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) . java.lang.StringBuilder ( org.springframework.expression.spel.SpelNode . toStringAST ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( org.springframework.expression.spel.SpelNode . getChildCount ( ) < NUMBER ? STRING : STRING + org.springframework.expression.spel.SpelNode . getChildCount ( ) ) ; java.io.PrintStream . void ( java.lang.StringBuilder . java.lang.String ( ) ) ; for ( int int = NUMBER ; int < org.springframework.expression.spel.SpelNode . getChildCount ( ) ; int ++ ) { void ( java.io.PrintStream , org.springframework.expression.spel.SpelNode . getChild ( int ) , java.lang.String + STRING ) ; } } }  <METHOD_END>
