<METHOD_START> protected void void ( ) java.io.IOException { void ( STRING , STRING , true ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean )			throws java.io.IOException { void ( STRING , STRING , boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( boolean boolean )			throws java.io.IOException { void ( STRING , STRING , boolean ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , boolean boolean ) throws java.io.IOException { CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; byte [] byte[] = byte[] ( java.lang.String ) ; org.springframework.boot.cli.command.init.HttpEntity ( org.springframework.boot.cli.command.init.CloseableHttpResponse , byte[] , java.lang.String ) ; void ( org.springframework.boot.cli.command.init.CloseableHttpResponse , NUMBER ) ; given ( this . org.springframework.boot.cli.command.init.CloseableHttpClient . execute ( argThat ( org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> ( boolean ) ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; }  <METHOD_END>
<METHOD_START> protected byte [] byte[] ( java.lang.String java.lang.String ) throws java.io.IOException { Resource org.springframework.boot.cli.command.init.Resource = new ClassPathResource ( java.lang.String ) ; return StreamUtils . copyToByteArray ( org.springframework.boot.cli.command.init.Resource . getInputStream ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest ) throws java.io.IOException { void ( false ) ; CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; org.springframework.boot.cli.command.init.HttpEntity ( org.springframework.boot.cli.command.init.CloseableHttpResponse , org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest . byte[] , org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest . java.lang.String ) ; void ( org.springframework.boot.cli.command.init.CloseableHttpResponse , NUMBER ) ; java.lang.String java.lang.String = ( org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest . java.lang.String != null ? java.lang.String ( org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.MockHttpProjectGenerationRequest . java.lang.String ) : null ) ; void ( org.springframework.boot.cli.command.init.CloseableHttpResponse , STRING , java.lang.String ) ; given ( this . org.springframework.boot.cli.command.init.CloseableHttpClient . execute ( argThat ( org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> ( ) ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; }  <METHOD_END>
<METHOD_START> protected void void ( int int , java.lang.String java.lang.String )			throws java.io.IOException , org.springframework.boot.cli.command.init.JSONException { void ( false ) ; CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; org.springframework.boot.cli.command.init.HttpEntity ( org.springframework.boot.cli.command.init.CloseableHttpResponse , java.lang.String ( int , java.lang.String ) . byte[] ( ) , STRING ) ; void ( org.springframework.boot.cli.command.init.CloseableHttpResponse , int ) ; given ( this . org.springframework.boot.cli.command.init.CloseableHttpClient . execute ( isA ( HttpGet .class ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; }  <METHOD_END>
<METHOD_START> protected void void ( int int , java.lang.String java.lang.String )			throws java.io.IOException , org.springframework.boot.cli.command.init.JSONException { CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse = mock ( CloseableHttpResponse .class ) ; org.springframework.boot.cli.command.init.HttpEntity ( org.springframework.boot.cli.command.init.CloseableHttpResponse , java.lang.String ( int , java.lang.String ) . byte[] ( ) , STRING ) ; void ( org.springframework.boot.cli.command.init.CloseableHttpResponse , int ) ; given ( this . org.springframework.boot.cli.command.init.CloseableHttpClient . execute ( isA ( HttpGet .class ) ) ) . willReturn ( org.springframework.boot.cli.command.init.CloseableHttpResponse ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.cli.command.init.HttpEntity org.springframework.boot.cli.command.init.HttpEntity ( CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse , byte [] byte[] , java.lang.String java.lang.String ) { try { HttpEntity org.springframework.boot.cli.command.init.HttpEntity = mock ( HttpEntity .class ) ; given ( org.springframework.boot.cli.command.init.HttpEntity . getContent ( ) ) . willReturn ( new java.io.ByteArrayInputStream ( byte[] ) ) ; Header org.springframework.boot.cli.command.init.Header = java.lang.String != null ? new BasicHeader ( STRING , java.lang.String ) : null ; given ( org.springframework.boot.cli.command.init.HttpEntity . getContentType ( ) ) . willReturn ( org.springframework.boot.cli.command.init.Header ) ; given ( org.springframework.boot.cli.command.init.CloseableHttpResponse . getEntity ( ) ) . willReturn ( org.springframework.boot.cli.command.init.HttpEntity ) ; return org.springframework.boot.cli.command.init.HttpEntity ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse , int int ) { StatusLine org.springframework.boot.cli.command.init.StatusLine = mock ( StatusLine .class ) ; given ( org.springframework.boot.cli.command.init.StatusLine . getStatusCode ( ) ) . willReturn ( int ) ; given ( org.springframework.boot.cli.command.init.CloseableHttpResponse . getStatusLine ( ) ) . willReturn ( org.springframework.boot.cli.command.init.StatusLine ) ; }  <METHOD_END>
<METHOD_START> protected void void ( CloseableHttpResponse org.springframework.boot.cli.command.init.CloseableHttpResponse , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Header org.springframework.boot.cli.command.init.Header = java.lang.String != null ? new BasicHeader ( java.lang.String , java.lang.String ) : null ; given ( org.springframework.boot.cli.command.init.CloseableHttpResponse . getFirstHeader ( java.lang.String ) ) . willReturn ( org.springframework.boot.cli.command.init.Header ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> < HttpGet > org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> ( boolean boolean ) { if ( ! boolean ) { return new org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.HasAcceptHeader ( InitializrService . ACCEPT_META_DATA , true ) ; } return new org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.HasAcceptHeader ( InitializrService . ACCEPT_SERVICE_CAPABILITIES , true ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> < HttpGet > org.springframework.boot.cli.command.init.ArgumentMatcher<org.springframework.boot.cli.command.init.HttpGet> ( ) { return new org.springframework.boot.cli.command.init.AbstractHttpClientMockTests.HasAcceptHeader ( InitializrService . ACCEPT_META_DATA , false ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING + java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( int int , java.lang.String java.lang.String ) throws org.springframework.boot.cli.command.init.JSONException { JSONObject org.springframework.boot.cli.command.init.JSONObject = new JSONObject ( ) ; org.springframework.boot.cli.command.init.JSONObject . put ( STRING , int ) ; if ( java.lang.String != null ) { org.springframework.boot.cli.command.init.JSONObject . put ( STRING , java.lang.String ) ; } return org.springframework.boot.cli.command.init.JSONObject . toString ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this( java.lang.String , java.lang.String , new byte [] { NUMBER , NUMBER , NUMBER , NUMBER } ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , byte [] byte[] ) { this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; this . byte[] = byte[] ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String , boolean boolean ) { this . java.lang.String = java.lang.String ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpGet org.springframework.boot.cli.command.init.HttpGet ) { if ( org.springframework.boot.cli.command.init.HttpGet == null ) { return false ; } Header org.springframework.boot.cli.command.init.Header = org.springframework.boot.cli.command.init.HttpGet . getFirstHeader ( HttpHeaders . ACCEPT ) ; if ( this . boolean ) { return org.springframework.boot.cli.command.init.Header != null && this . java.lang.String . boolean ( org.springframework.boot.cli.command.init.Header . getValue ( ) ) ; } return org.springframework.boot.cli.command.init.Header == null || ! this . java.lang.String . boolean ( org.springframework.boot.cli.command.init.Header . getValue ( ) ) ; }  <METHOD_END>
