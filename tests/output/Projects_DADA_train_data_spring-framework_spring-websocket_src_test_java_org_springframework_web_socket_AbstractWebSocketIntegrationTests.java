<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.socket.Log . debug ( STRING + this . org.springframework.web.socket.TestName . getMethodName ( ) + STRING + this . org.springframework.web.socket.WebSocketClient . getClass ( ) . getSimpleName ( ) + STRING + this . org.springframework.web.socket.WebSocketTestServer . getClass ( ) . getSimpleName ( ) ) ; this . org.springframework.web.socket.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.web.socket.AnnotationConfigWebApplicationContext . register ( java.lang.Class<?>[] ( ) ) ; this . org.springframework.web.socket.AnnotationConfigWebApplicationContext . register ( java.util.Map<java.lang.Class<?>,java.lang.Class<?>> . java.lang.Class<?> ( this . org.springframework.web.socket.WebSocketTestServer . getClass ( ) ) ) ; if ( this . org.springframework.web.socket.WebSocketClient instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.WebSocketClient ) . start ( ) ; } this . org.springframework.web.socket.WebSocketTestServer . setup ( ) ; this . org.springframework.web.socket.WebSocketTestServer . deployConfig ( this . org.springframework.web.socket.AnnotationConfigWebApplicationContext ) ; this . org.springframework.web.socket.WebSocketTestServer . start ( ) ; this . org.springframework.web.socket.AnnotationConfigWebApplicationContext . setServletContext ( this . org.springframework.web.socket.WebSocketTestServer . getServletContext ( ) ) ; this . org.springframework.web.socket.AnnotationConfigWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> protected abstract java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( )  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { try { if ( this . org.springframework.web.socket.WebSocketClient instanceof Lifecycle ) { ( ( Lifecycle ) this . org.springframework.web.socket.WebSocketClient ) . stop ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.WebSocketTestServer . undeployConfig ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.WebSocketTestServer . stop ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.Log . error ( STRING , java.lang.Throwable ) ; } try { this . org.springframework.web.socket.AnnotationConfigWebApplicationContext . close ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { org.springframework.web.socket.Log . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return STRING + this . org.springframework.web.socket.WebSocketTestServer . getPort ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.socket.ListenableFuture<org.springframework.web.socket.WebSocketSession> < WebSocketSession > org.springframework.web.socket.ListenableFuture<org.springframework.web.socket.WebSocketSession> ( WebSocketHandler org.springframework.web.socket.WebSocketHandler , java.lang.String java.lang.String ) { return this . org.springframework.web.socket.WebSocketClient . doHandshake ( org.springframework.web.socket.WebSocketHandler , java.lang.String ( ) + java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.DefaultHandshakeHandler org.springframework.web.socket.DefaultHandshakeHandler ( ) { return new DefaultHandshakeHandler ( org.springframework.web.socket.RequestUpgradeStrategy ( ) ) ; }  <METHOD_END>
<METHOD_START> public abstract org.springframework.web.socket.RequestUpgradeStrategy org.springframework.web.socket.RequestUpgradeStrategy ( )  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.RequestUpgradeStrategy org.springframework.web.socket.RequestUpgradeStrategy ( ) { return new JettyRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.RequestUpgradeStrategy org.springframework.web.socket.RequestUpgradeStrategy ( ) { return new TomcatRequestUpgradeStrategy ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.socket.RequestUpgradeStrategy org.springframework.web.socket.RequestUpgradeStrategy ( ) { return new UndertowRequestUpgradeStrategy ( ) ; }  <METHOD_END>
