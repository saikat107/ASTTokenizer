<METHOD_START> @ Test public void void ( ) { RepositoryConfiguration < RepositoryConfigurationSource > org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> = org.springframework.data.repository.config.DefaultRepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> ( org.springframework.data.repository.config.RepositoryConfigurationSource ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . getConfigurationSource ( ) ) . isEqualTo ( org.springframework.data.repository.config.RepositoryConfigurationSource ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . getImplementationBeanName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . getImplementationClassName ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . getRepositoryInterface ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . getQueryLookupStrategyKey ( ) ) . isEqualTo ( Key . CREATE_IF_NOT_FOUND ) ; assertThat ( org.springframework.data.repository.config.RepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> . isLazyInit ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.repository.config.DefaultRepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> ( org.springframework.data.repository.config.RepositoryConfigurationSource ) . getRepositoryFactoryBeanClassName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.repository.config.RepositoryConfigurationSource . getRepositoryFactoryBeanClassName ( ) ) . thenReturn ( java.util.Optional . java.util.Optional<java.lang.String> ( STRING ) ) ; assertThat ( org.springframework.data.repository.config.DefaultRepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> ( org.springframework.data.repository.config.RepositoryConfigurationSource ) . getRepositoryFactoryBeanClassName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.repository.config.DefaultRepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> < RepositoryConfigurationSource > org.springframework.data.repository.config.DefaultRepositoryConfiguration<org.springframework.data.repository.config.RepositoryConfigurationSource> ( RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource ) { return new DefaultRepositoryConfiguration <> ( org.springframework.data.repository.config.RepositoryConfigurationSource , org.springframework.data.repository.config.BeanDefinition , org.springframework.data.repository.config.RepositoryConfigurationExtension ) ; }  <METHOD_END>
