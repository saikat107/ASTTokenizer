<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( containsString ( STRING ) ) ; buildMergedTestPropertySources ( org.springframework.test.context.support.TestPropertySourceUtilsTests.EmptyPropertySources .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( startsWith ( STRING ) ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( containsString ( STRING ) ) ; buildMergedTestPropertySources ( org.springframework.test.context.support.TestPropertySourceUtilsTests.ExtendedEmptyPropertySources .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.ValuePropertySources .class , java.lang.String[] ( STRING ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( AnnotationConfigurationException .class ) ; buildMergedTestPropertySources ( org.springframework.test.context.support.TestPropertySourceUtilsTests.LocationsAndValuePropertySources .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.LocationsAndPropertiesPropertySources .class , java.lang.String[] ( STRING , STRING ) , java.lang.String[] ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.InheritedPropertySources .class , java.lang.String[] ( STRING , STRING ) , java.lang.String[] ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.ExtendedPropertySources .class , java.lang.String[] ( STRING , STRING , STRING , STRING ) , java.lang.String[] ( STRING , STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.OverriddenLocationsPropertySources .class , java.lang.String[] ( STRING ) , java.lang.String[] ( STRING , STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.OverriddenPropertiesPropertySources .class , java.lang.String[] ( STRING , STRING , STRING ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.test.context.support.TestPropertySourceUtilsTests.OverriddenLocationsAndPropertiesPropertySources .class , java.lang.String[] ( STRING ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addPropertiesFilesToEnvironment ( ( ConfigurableApplicationContext ) null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addPropertiesFilesToEnvironment ( mock ( ConfigurableApplicationContext .class ) , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addPropertiesFilesToEnvironment ( ( ConfigurableEnvironment ) null , mock ( ResourceLoader .class ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addPropertiesFilesToEnvironment ( new MockEnvironment ( ) , mock ( ResourceLoader .class ) , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableEnvironment org.springframework.test.context.support.ConfigurableEnvironment = new MockEnvironment ( ) ; MutablePropertySources org.springframework.test.context.support.MutablePropertySources = org.springframework.test.context.support.ConfigurableEnvironment . getPropertySources ( ) ; org.springframework.test.context.support.MutablePropertySources . remove ( MockPropertySource . MOCK_PROPERTIES_PROPERTY_SOURCE_NAME ) ; assertEquals ( NUMBER , org.springframework.test.context.support.MutablePropertySources . size ( ) ) ; java.lang.String java.lang.String = STRING ; ByteArrayResource org.springframework.test.context.support.ByteArrayResource = new ByteArrayResource ( java.lang.String . byte[] ( ) , STRING + java.lang.String ) ; ResourceLoader org.springframework.test.context.support.ResourceLoader = mock ( ResourceLoader .class ) ; when ( org.springframework.test.context.support.ResourceLoader . getResource ( anyString ( ) ) ) . thenReturn ( org.springframework.test.context.support.ByteArrayResource ) ; addPropertiesFilesToEnvironment ( org.springframework.test.context.support.ConfigurableEnvironment , org.springframework.test.context.support.ResourceLoader , java.lang.String[] ) ; assertEquals ( NUMBER , org.springframework.test.context.support.MutablePropertySources . size ( ) ) ; assertEquals ( STRING , org.springframework.test.context.support.ConfigurableEnvironment . getProperty ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( ( ConfigurableApplicationContext ) null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( mock ( ConfigurableApplicationContext .class ) , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( ( ConfigurableEnvironment ) null , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( new MockEnvironment ( ) , ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( new MockEnvironment ( ) , java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; addInlinedPropertiesToEnvironment ( new MockEnvironment ( ) , java.lang.String[] ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ConfigurableEnvironment org.springframework.test.context.support.ConfigurableEnvironment = new MockEnvironment ( ) ; MutablePropertySources org.springframework.test.context.support.MutablePropertySources = org.springframework.test.context.support.ConfigurableEnvironment . getPropertySources ( ) ; org.springframework.test.context.support.MutablePropertySources . remove ( MockPropertySource . MOCK_PROPERTIES_PROPERTY_SOURCE_NAME ) ; assertEquals ( NUMBER , org.springframework.test.context.support.MutablePropertySources . size ( ) ) ; addInlinedPropertiesToEnvironment ( org.springframework.test.context.support.ConfigurableEnvironment , java.lang.String[] ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.test.context.support.MutablePropertySources . size ( ) ) ; assertEquals ( NUMBER , ( ( java.util.Map ) org.springframework.test.context.support.MutablePropertySources . iterator ( ) . next ( ) . getSource ( ) ) . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.test.context.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.test.context.support.ExpectedException . expectMessage ( STRING ) ; convertInlinedPropertiesToMap ( ( java.lang.String [] ) null ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { MergedTestPropertySources org.springframework.test.context.support.MergedTestPropertySources = buildMergedTestPropertySources ( java.lang.Class<> ) ; assertNotNull ( org.springframework.test.context.support.MergedTestPropertySources ) ; assertArrayEquals ( java.lang.String[] , org.springframework.test.context.support.MergedTestPropertySources . getLocations ( ) ) ; assertArrayEquals ( java.lang.String[] , org.springframework.test.context.support.MergedTestPropertySources . getProperties ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SafeVarargs private static < T > T [] T[] ( T ... T[] ) { return T[] ; }  <METHOD_END>
