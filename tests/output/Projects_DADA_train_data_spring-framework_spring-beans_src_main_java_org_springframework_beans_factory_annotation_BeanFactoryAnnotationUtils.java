<METHOD_START> public static < T > T T ( BeanFactory org.springframework.beans.factory.annotation.BeanFactory , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String )			throws org.springframework.beans.factory.annotation.BeansException { Assert . notNull ( org.springframework.beans.factory.annotation.BeanFactory , STRING ) ; if ( org.springframework.beans.factory.annotation.BeanFactory instanceof ConfigurableListableBeanFactory ) { return T ( ( ConfigurableListableBeanFactory ) org.springframework.beans.factory.annotation.BeanFactory , java.lang.Class<T> , java.lang.String ) ; } else if ( org.springframework.beans.factory.annotation.BeanFactory . containsBean ( java.lang.String ) ) { return org.springframework.beans.factory.annotation.BeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } else { throw new NoSuchBeanDefinitionException ( java.lang.String , STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + java.lang.String + STRING + STRING ) ; } }  <METHOD_END>
<METHOD_START> private static < T > T T ( ConfigurableListableBeanFactory org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.String java.lang.String ) { java.lang.String [] java.lang.String[] = BeanFactoryUtils . beanNamesForTypeIncludingAncestors ( org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory , java.lang.Class<T> ) ; java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( boolean ( java.lang.String :: boolean , java.lang.String , org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory ) ) { if ( java.lang.String != null ) { throw new NoUniqueBeanDefinitionException ( java.lang.Class<T> , java.lang.String , java.lang.String ) ; } java.lang.String = java.lang.String ; } } if ( java.lang.String != null ) { return org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } else if ( org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { return org.springframework.beans.factory.annotation.ConfigurableListableBeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } else { throw new NoSuchBeanDefinitionException ( java.lang.String , STRING + java.lang.Class<T> . java.lang.String ( ) + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.util.function.Predicate<java.lang.String> < java.lang.String > java.util.function.Predicate<java.lang.String> , java.lang.String java.lang.String , BeanFactory org.springframework.beans.factory.annotation.BeanFactory ) { if ( java.util.function.Predicate<java.lang.String> . boolean ( java.lang.String ) ) { return true ; } if ( org.springframework.beans.factory.annotation.BeanFactory != null ) { for ( java.lang.String java.lang.String : org.springframework.beans.factory.annotation.BeanFactory . getAliases ( java.lang.String ) ) { if ( java.util.function.Predicate<java.lang.String> . boolean ( java.lang.String ) ) { return true ; } } try { if ( org.springframework.beans.factory.annotation.BeanFactory instanceof ConfigurableBeanFactory ) { BeanDefinition org.springframework.beans.factory.annotation.BeanDefinition = ( ( ConfigurableBeanFactory ) org.springframework.beans.factory.annotation.BeanFactory ) . getMergedBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.annotation.BeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.beans.factory.annotation.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.beans.factory.annotation.BeanDefinition ; AutowireCandidateQualifier org.springframework.beans.factory.annotation.AutowireCandidateQualifier = org.springframework.beans.factory.annotation.AbstractBeanDefinition . getQualifier ( Qualifier .class . java.lang.String ( ) ) ; if ( org.springframework.beans.factory.annotation.AutowireCandidateQualifier != null ) { java.lang.Object java.lang.Object = org.springframework.beans.factory.annotation.AutowireCandidateQualifier . getAttribute ( AutowireCandidateQualifier . VALUE_KEY ) ; if ( java.lang.Object != null && java.util.function.Predicate<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ) { return true ; } } } if ( org.springframework.beans.factory.annotation.BeanDefinition instanceof RootBeanDefinition ) { java.lang.reflect.Method java.lang.reflect.Method = ( ( RootBeanDefinition ) org.springframework.beans.factory.annotation.BeanDefinition ) . getResolvedFactoryMethod ( ) ; if ( java.lang.reflect.Method != null ) { Qualifier org.springframework.beans.factory.annotation.Qualifier = AnnotationUtils . getAnnotation ( java.lang.reflect.Method , Qualifier .class ) ; if ( org.springframework.beans.factory.annotation.Qualifier != null ) { return java.util.function.Predicate<java.lang.String> . boolean ( org.springframework.beans.factory.annotation.Qualifier . value ( ) ) ; } } } } java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.annotation.BeanFactory . getType ( java.lang.String ) ; if ( java.lang.Class<> != null ) { Qualifier org.springframework.beans.factory.annotation.Qualifier = AnnotationUtils . getAnnotation ( java.lang.Class<> , Qualifier .class ) ; if ( org.springframework.beans.factory.annotation.Qualifier != null ) { return java.util.function.Predicate<java.lang.String> . boolean ( org.springframework.beans.factory.annotation.Qualifier . value ( ) ) ; } } } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.annotation.NoSuchBeanDefinitionException ) { } } return false ; }  <METHOD_END>
