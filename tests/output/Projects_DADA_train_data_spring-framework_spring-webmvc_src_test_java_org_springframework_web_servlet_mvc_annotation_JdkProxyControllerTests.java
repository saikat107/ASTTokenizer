<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests.TypeLevelImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.annotation.DispatcherServlet . service ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests.MethodLevelImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.annotation.DispatcherServlet . service ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.web.servlet.mvc.annotation.JdkProxyControllerTests.TypeAndMethodLevelImpl .class ) ; MockHttpServletRequest org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.mvc.annotation.DispatcherServlet . service ( org.springframework.web.servlet.mvc.annotation.MockHttpServletRequest , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.mvc.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( final java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.web.servlet.mvc.annotation.ServletException { org.springframework.web.servlet.mvc.annotation.DispatcherServlet = new DispatcherServlet ( ) { @ java.lang.Override protected org.springframework.web.servlet.mvc.annotation.WebApplicationContext org.springframework.web.servlet.mvc.annotation.WebApplicationContext ( WebApplicationContext org.springframework.web.servlet.mvc.annotation.WebApplicationContext ) { GenericWebApplicationContext org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( true ) ) ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . refresh ( ) ; return org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext ; } } ; org.springframework.web.servlet.mvc.annotation.DispatcherServlet . init ( new MockServletConfig ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.web.servlet.mvc.annotation.WebApplicationContext org.springframework.web.servlet.mvc.annotation.WebApplicationContext ( WebApplicationContext org.springframework.web.servlet.mvc.annotation.WebApplicationContext ) { GenericWebApplicationContext org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext = new GenericWebApplicationContext ( ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<> ) ) ; DefaultAdvisorAutoProxyCreator org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) . addBeanPostProcessor ( org.springframework.web.servlet.mvc.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( true ) ) ) ; org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext . refresh ( ) ; return org.springframework.web.servlet.mvc.annotation.GenericWebApplicationContext ; }  <METHOD_END>
<METHOD_START> @ RequestMapping void void ( java.io.Writer java.io.Writer ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) void void ( java.io.Writer java.io.Writer ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) void void ( java.io.Writer java.io.Writer ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.io.Writer java.io.Writer ) throws java.io.IOException { java.io.Writer . void ( STRING ) ; }  <METHOD_END>
