<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.monitoring.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.monitoring.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.monitoring.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . string ( allOf ( containsString ( STRING ) , containsString ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.monitoring.MockMvc . perform ( get ( STRING ) . param ( STRING , STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; demo.monitoring.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING , is ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { demo.monitoring.MockMvc . perform ( get ( STRING ) ) . andExpect ( status ( ) . isOk ( ) ) ; demo.monitoring.MockMvc . perform ( get ( STRING ) ) . andExpect ( jsonPath ( STRING , containsInAnyOrder ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.lang.Exception { demo.monitoring.MockMvc = MockMvcBuilders . webAppContextSetup ( demo.monitoring.WebApplicationContext ) . build ( ) ; }  <METHOD_END>
