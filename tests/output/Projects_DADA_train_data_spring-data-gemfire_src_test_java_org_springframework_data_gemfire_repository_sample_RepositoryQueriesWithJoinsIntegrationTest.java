<METHOD_START> protected org.springframework.data.gemfire.repository.sample.Account org.springframework.data.gemfire.repository.sample.Account ( Customer org.springframework.data.gemfire.repository.sample.Customer , java.lang.String java.lang.String ) { Account org.springframework.data.gemfire.repository.sample.Account = new Account ( java.util.concurrent.atomic.AtomicLong . long ( ) , org.springframework.data.gemfire.repository.sample.Customer ) ; org.springframework.data.gemfire.repository.sample.Account . setNumber ( java.lang.String ) ; return org.springframework.data.gemfire.repository.sample.Account ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.repository.sample.Customer org.springframework.data.gemfire.repository.sample.Customer ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { Customer org.springframework.data.gemfire.repository.sample.Customer = new Customer ( java.lang.String , java.lang.String ) ; org.springframework.data.gemfire.repository.sample.Customer . setId ( java.util.concurrent.atomic.AtomicLong . long ( ) ) ; return org.springframework.data.gemfire.repository.sample.Customer ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Customer org.springframework.data.gemfire.repository.sample.Customer = org.springframework.data.gemfire.repository.sample.CustomerRepository . save ( org.springframework.data.gemfire.repository.sample.Customer ( STRING , STRING ) ) ; Customer org.springframework.data.gemfire.repository.sample.Customer = org.springframework.data.gemfire.repository.sample.CustomerRepository . save ( org.springframework.data.gemfire.repository.sample.Customer ( STRING , STRING ) ) ; Customer org.springframework.data.gemfire.repository.sample.Customer = org.springframework.data.gemfire.repository.sample.CustomerRepository . save ( org.springframework.data.gemfire.repository.sample.Customer ( STRING , STRING ) ) ; Account org.springframework.data.gemfire.repository.sample.Account = org.springframework.data.gemfire.repository.sample.AccountRepository . save ( org.springframework.data.gemfire.repository.sample.Account ( org.springframework.data.gemfire.repository.sample.Customer , STRING ) ) ; Account org.springframework.data.gemfire.repository.sample.Account = org.springframework.data.gemfire.repository.sample.AccountRepository . save ( org.springframework.data.gemfire.repository.sample.Account ( org.springframework.data.gemfire.repository.sample.Customer , STRING ) ) ; Account org.springframework.data.gemfire.repository.sample.Account = org.springframework.data.gemfire.repository.sample.AccountRepository . save ( org.springframework.data.gemfire.repository.sample.Account ( org.springframework.data.gemfire.repository.sample.Customer , STRING ) ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Customer> < Customer > java.util.List<org.springframework.data.gemfire.repository.sample.Customer> = org.springframework.data.gemfire.repository.sample.CustomerRepository . findCustomersWithAccounts ( ) ; java.util.List<org.springframework.data.gemfire.repository.sample.Customer> < Customer > java.util.List<org.springframework.data.gemfire.repository.sample.Customer> = java.util.Arrays . java.util.List ( org.springframework.data.gemfire.repository.sample.Customer , org.springframework.data.gemfire.repository.sample.Customer ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Customer> ) . isNotNull ( ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Customer> ) . hasSize ( NUMBER ) ; assertThat ( java.util.List<org.springframework.data.gemfire.repository.sample.Customer> ) . containsAll ( java.util.List<org.springframework.data.gemfire.repository.sample.Customer> ) ; }  <METHOD_END>
