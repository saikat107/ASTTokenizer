<METHOD_START> public void ( TaskScheduler org.springframework.web.socket.sockjs.support.TaskScheduler ) { Assert . notNull ( org.springframework.web.socket.sockjs.support.TaskScheduler , STRING ) ; this . org.springframework.web.socket.sockjs.support.TaskScheduler = org.springframework.web.socket.sockjs.support.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.sockjs.support.TaskScheduler org.springframework.web.socket.sockjs.support.TaskScheduler ( ) { return this . org.springframework.web.socket.sockjs.support.TaskScheduler ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { Assert . notNull ( java.util.Collection<java.lang.String> , STRING ) ; this . java.util.Set<java.lang.String> . void ( ) ; this . java.util.Set<java.lang.String> . boolean ( java.util.Collection<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set<java.lang.String> ( this . java.util.Set<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , java.lang.String java.lang.String , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler ) throws org.springframework.web.socket.sockjs.support.SockJsException { if ( java.lang.String == null ) { if ( org.springframework.web.socket.sockjs.support.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING + org.springframework.web.socket.sockjs.support.ServerHttpRequest . getURI ( ) ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } try { org.springframework.web.socket.sockjs.support.ServerHttpRequest . getHeaders ( ) ; } catch ( InvalidMediaTypeException org.springframework.web.socket.sockjs.support.InvalidMediaTypeException ) { } java.lang.String java.lang.String = ( org.springframework.web.socket.sockjs.support.Log . isDebugEnabled ( ) ? org.springframework.web.socket.sockjs.support.ServerHttpRequest . getMethod ( ) + STRING + org.springframework.web.socket.sockjs.support.ServerHttpRequest . getURI ( ) : null ) ; try { if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getBody ( ) . write ( STRING . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; } else if ( java.lang.String . boolean ( STRING ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } this . org.springframework.web.socket.sockjs.support.AbstractSockJsService.SockJsRequestHandler . void ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ; } else if ( java.lang.String . boolean ( STRING ) ) { if ( ! this . java.util.Set<java.lang.String> . boolean ( ) && ! this . java.util.Set<java.lang.String> . boolean ( STRING ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + STRING + java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } if ( this . java.util.Set<java.lang.String> . boolean ( ) ) { org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . add ( java.lang.String , STRING ) ; } if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } this . org.springframework.web.socket.sockjs.support.AbstractSockJsService.SockJsRequestHandler . void ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ; } else if ( java.lang.String . boolean ( STRING ) ) { if ( boolean ( ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } void ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse , org.springframework.web.socket.sockjs.support.WebSocketHandler ) ; } else if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } } else { java.lang.String [] java.lang.String[] = StringUtils . tokenizeToStringArray ( java.lang.String . java.lang.String ( NUMBER ) , STRING ) ; if ( java.lang.String[] . int != NUMBER ) { if ( org.springframework.web.socket.sockjs.support.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING + java.lang.String + STRING ) ; } if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; java.lang.String java.lang.String = java.lang.String[] [ NUMBER ] ; if ( ! boolean ( ) && java.lang.String . boolean ( STRING ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } else if ( ! boolean ( java.lang.String , java.lang.String , java.lang.String ) || ! boolean ( org.springframework.web.socket.sockjs.support.ServerHttpRequest ) ) { if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_FOUND ) ; return; } if ( java.lang.String != null ) { org.springframework.web.socket.sockjs.support.Log . debug ( STRING + java.lang.String ) ; } void ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse , org.springframework.web.socket.sockjs.support.WebSocketHandler , java.lang.String , java.lang.String ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . close ( ) ; } catch ( java.io.IOException java.io.IOException ) { throw new SockJsException ( STRING , null , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) || ! StringUtils . hasText ( java.lang.String ) || ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING ) ; return false ; } if ( java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING ) ; return false ; } return true ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest ) { java.lang.String java.lang.String = org.springframework.web.socket.sockjs.support.ServerHttpRequest . getURI ( ) . getPath ( ) ; int int = java.lang.String . int ( '/' ) + NUMBER ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int ) ; return ( java.lang.String . int ( ';' ) == - NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , HttpMethod ... org.springframework.web.socket.sockjs.support.HttpMethod[] )			throws java.io.IOException { if ( WebUtils . isSameOrigin ( org.springframework.web.socket.sockjs.support.ServerHttpRequest ) ) { return true ; } if ( ! WebUtils . isValidOrigin ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , this . java.util.Set<java.lang.String> ) ) { if ( org.springframework.web.socket.sockjs.support.Log . isWarnEnabled ( ) ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING + org.springframework.web.socket.sockjs.support.ServerHttpRequest . getHeaders ( ) . getOrigin ( ) + STRING ) ; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . FORBIDDEN ) ; return false ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.support.CorsConfiguration org.springframework.web.socket.sockjs.support.CorsConfiguration ( HttpServletRequest org.springframework.web.socket.sockjs.support.HttpServletRequest ) { if ( ! this . boolean && CorsUtils . isCorsRequest ( org.springframework.web.socket.sockjs.support.HttpServletRequest ) ) { CorsConfiguration org.springframework.web.socket.sockjs.support.CorsConfiguration = new CorsConfiguration ( ) ; org.springframework.web.socket.sockjs.support.CorsConfiguration . addAllowedOrigin ( STRING ) ; org.springframework.web.socket.sockjs.support.CorsConfiguration . addAllowedMethod ( STRING ) ; org.springframework.web.socket.sockjs.support.CorsConfiguration . setAllowCredentials ( true ) ; org.springframework.web.socket.sockjs.support.CorsConfiguration . setMaxAge ( long ) ; org.springframework.web.socket.sockjs.support.CorsConfiguration . addAllowedHeader ( STRING ) ; return org.springframework.web.socket.sockjs.support.CorsConfiguration ; } return null ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse ) { org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setCacheControl ( STRING + long ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setExpires ( new java.util.Date ( ) . long ( ) + long * NUMBER ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse ) { org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setCacheControl ( STRING ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , HttpMethod ... org.springframework.web.socket.sockjs.support.HttpMethod[] ) { org.springframework.web.socket.sockjs.support.Log . warn ( STRING ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . METHOD_NOT_ALLOWED ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setAllow ( new java.util.HashSet <> ( java.util.Arrays . java.util.List ( org.springframework.web.socket.sockjs.support.HttpMethod[] ) ) ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> protected abstract void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse , WebSocketHandler org.springframework.web.socket.sockjs.support.WebSocketHandler , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.web.socket.sockjs.support.SockJsException ;  <METHOD_END>
<METHOD_START> void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse ) throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse ) throws java.io.IOException { if ( HttpMethod . GET == org.springframework.web.socket.sockjs.support.ServerHttpRequest . getMethod ( ) ) { void ( org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ; if ( boolean ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ) { org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.util.Random . int ( ) , boolean ( ) , boolean ( ) ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getBody ( ) . write ( java.lang.String . byte[] ( ) ) ; } } else if ( HttpMethod . OPTIONS == org.springframework.web.socket.sockjs.support.ServerHttpRequest . getMethod ( ) ) { if ( boolean ( org.springframework.web.socket.sockjs.support.ServerHttpRequest , org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ) { void ( org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NO_CONTENT ) ; } } else { void ( org.springframework.web.socket.sockjs.support.ServerHttpResponse , HttpMethod . OPTIONS , HttpMethod . GET ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.sockjs.support.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.sockjs.support.ServerHttpResponse ) throws java.io.IOException { if ( ! HttpMethod . GET . equals ( org.springframework.web.socket.sockjs.support.ServerHttpRequest . getMethod ( ) ) ) { void ( org.springframework.web.socket.sockjs.support.ServerHttpResponse , HttpMethod . GET ) ; return; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String , java.lang.String ( ) ) ; byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( STRING ) ; DigestUtils . appendMd5DigestAsHex ( byte[] , java.lang.StringBuilder ) ; java.lang.StringBuilder . java.lang.StringBuilder ( '"' ) ; java.lang.String java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.socket.sockjs.support.ServerHttpRequest . getHeaders ( ) . getIfNoneMatch ( ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) && java.util.List<java.lang.String> . java.lang.String ( NUMBER ) . boolean ( java.lang.String ) ) { org.springframework.web.socket.sockjs.support.ServerHttpResponse . setStatusCode ( HttpStatus . NOT_MODIFIED ) ; return; } org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setContentLength ( byte[] . int ) ; void ( org.springframework.web.socket.sockjs.support.ServerHttpResponse ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getHeaders ( ) . setETag ( java.lang.String ) ; org.springframework.web.socket.sockjs.support.ServerHttpResponse . getBody ( ) . write ( byte[] ) ; }  <METHOD_END>
