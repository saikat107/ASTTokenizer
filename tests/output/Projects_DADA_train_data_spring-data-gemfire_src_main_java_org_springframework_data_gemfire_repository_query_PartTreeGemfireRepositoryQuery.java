<METHOD_START> public void ( GemfireQueryMethod org.springframework.data.gemfire.repository.query.GemfireQueryMethod , GemfireTemplate org.springframework.data.gemfire.repository.query.GemfireTemplate ) { super( org.springframework.data.gemfire.repository.query.GemfireQueryMethod ); java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getEntityInformation ( ) . getJavaType ( ) ; this . org.springframework.data.gemfire.repository.query.PartTree = new PartTree ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getName ( ) , java.lang.Class<> ) ; this . org.springframework.data.gemfire.repository.query.GemfireQueryMethod = org.springframework.data.gemfire.repository.query.GemfireQueryMethod ; this . org.springframework.data.gemfire.repository.query.GemfireTemplate = org.springframework.data.gemfire.repository.query.GemfireTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object [] java.lang.Object[] ) { ParametersParameterAccessor org.springframework.data.gemfire.repository.query.ParametersParameterAccessor = new ParametersParameterAccessor ( org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getParameters ( ) , java.lang.Object[] ) ; QueryString org.springframework.data.gemfire.repository.query.QueryString = new GemfireQueryCreator ( org.springframework.data.gemfire.repository.query.PartTree , org.springframework.data.gemfire.repository.query.GemfireQueryMethod . getPersistentEntity ( ) ) . createQuery ( org.springframework.data.gemfire.repository.query.ParametersParameterAccessor . getSort ( ) ) ; RepositoryQuery org.springframework.data.gemfire.repository.query.RepositoryQuery = new StringBasedGemfireRepositoryQuery ( org.springframework.data.gemfire.repository.query.QueryString . toString ( ) , org.springframework.data.gemfire.repository.query.GemfireQueryMethod , org.springframework.data.gemfire.repository.query.GemfireTemplate ) ; return org.springframework.data.gemfire.repository.query.RepositoryQuery . execute ( java.lang.Object[] ( java.lang.Object[] ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object [] java.lang.Object[] ( java.lang.Object [] java.lang.Object[] ) { java.util.Iterator<org.springframework.data.gemfire.repository.query.Part> < Part > java.util.Iterator<org.springframework.data.gemfire.repository.query.Part> = org.springframework.data.gemfire.repository.query.PartTree . getParts ( ) . iterator ( ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> < java.lang.Object > ( java.lang.Object[] . int ) ; for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object == null || java.lang.Object instanceof Sort ) { java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } else { switch ( java.util.Iterator<org.springframework.data.gemfire.repository.query.Part> . next ( ) . getType ( ) ) { case CONTAINING : java.util.List<java.lang.Object> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ) ; break; case STARTING_WITH : java.util.List<java.lang.Object> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ) ; break; case ENDING_WITH : java.util.List<java.lang.Object> . boolean ( java.lang.String . java.lang.String ( STRING , java.lang.Object . java.lang.String ( ) ) ) ; break; default: java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } } return java.util.List<java.lang.Object> . java.lang.Object[] ( ) ; }  <METHOD_END>
