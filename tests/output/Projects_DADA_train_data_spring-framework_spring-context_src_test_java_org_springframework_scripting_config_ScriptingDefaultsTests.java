<METHOD_START> @ Test public void void ( ) java.lang.Exception { ApplicationContext org.springframework.scripting.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; Advised org.springframework.scripting.config.Advised = ( Advised ) org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; AbstractRefreshableTargetSource org.springframework.scripting.config.AbstractRefreshableTargetSource = ( ( AbstractRefreshableTargetSource ) org.springframework.scripting.config.Advised . getTargetSource ( ) ) ; java.lang.reflect.Field java.lang.reflect.Field = AbstractRefreshableTargetSource .class . java.lang.reflect.Field ( STRING ) ; java.lang.reflect.Field . void ( true ) ; long long = ( ( java.lang.Long ) java.lang.reflect.Field . java.lang.Object ( org.springframework.scripting.config.AbstractRefreshableTargetSource ) ) . long ( ) ; assertEquals ( NUMBER , long ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; ITestBean org.springframework.scripting.config.ITestBean = ( ITestBean ) org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.scripting.config.ITestBean . isInitialized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; ITestBean org.springframework.scripting.config.ITestBean = ( ITestBean ) org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( org.springframework.scripting.config.ITestBean . isInitialized ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassPathXmlApplicationContext org.springframework.scripting.config.ClassPathXmlApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; ITestBean org.springframework.scripting.config.ITestBean = ( ITestBean ) org.springframework.scripting.config.ClassPathXmlApplicationContext . getBean ( STRING ) ; assertFalse ( org.springframework.scripting.config.ITestBean . isDestroyed ( ) ) ; org.springframework.scripting.config.ClassPathXmlApplicationContext . close ( ) ; assertTrue ( org.springframework.scripting.config.ITestBean . isDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; ITestBean org.springframework.scripting.config.ITestBean = ( ITestBean ) org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; ITestBean org.springframework.scripting.config.ITestBean = ( ITestBean ) org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( org.springframework.scripting.config.ITestBean , org.springframework.scripting.config.ITestBean . getOtherBean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.scripting.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.String ) ; java.lang.Object java.lang.Object = org.springframework.scripting.config.ApplicationContext . getBean ( STRING ) ; assertTrue ( AopUtils . isCglibProxy ( java.lang.Object ) ) ; }  <METHOD_END>
