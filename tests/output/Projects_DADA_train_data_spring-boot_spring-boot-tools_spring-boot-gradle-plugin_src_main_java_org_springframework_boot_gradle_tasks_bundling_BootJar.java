<METHOD_START> public void ( ) { CopySpec org.springframework.boot.gradle.tasks.bundling.CopySpec = getRootSpec ( ) . addChildBeforeSpec ( getMainSpec ( ) ) . into ( STRING ) ; org.springframework.boot.gradle.tasks.bundling.CopySpec . into ( STRING , org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.CopySpec> ( java.io.File :: boolean ) ) ; org.springframework.boot.gradle.tasks.bundling.CopySpec . into ( STRING , org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.CopySpec> ( java.io.File :: boolean ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.CopySpec> < CopySpec > org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.CopySpec> ( Spec < java.io.File > org.springframework.boot.gradle.tasks.bundling.Spec<java.io.File> ) { return copySpec -> copySpec . from ( ( Callable < Iterable < File > > ) ( ) this . classpath == null ? Collections . emptyList ( ) : this . classpath . filter ( filter ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . configureManifest ( this , java.lang.String ( ) ) ; super. copy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.gradle.tasks.bundling.CopyAction org.springframework.boot.gradle.tasks.bundling.CopyAction ( ) { return this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . createCopyAction ( this ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . requiresUnpack ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Spec < FileTreeElement > org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ) { this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . requiresUnpack ( org.springframework.boot.gradle.tasks.bundling.Spec<org.springframework.boot.gradle.tasks.bundling.FileTreeElement> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ( ) { return this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . getLaunchScript ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Action < LaunchScriptConfiguration > org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration> ) { org.springframework.boot.gradle.tasks.bundling.Action<org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration> . execute ( org.springframework.boot.gradle.tasks.bundling.LaunchScriptConfiguration ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.gradle.tasks.bundling.FileCollection org.springframework.boot.gradle.tasks.bundling.FileCollection ( ) { return this . org.springframework.boot.gradle.tasks.bundling.FileCollection ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object ... java.lang.Object[] ) { FileCollection org.springframework.boot.gradle.tasks.bundling.FileCollection = this . org.springframework.boot.gradle.tasks.bundling.FileCollection ; this . org.springframework.boot.gradle.tasks.bundling.FileCollection = getProject ( ) . files ( org.springframework.boot.gradle.tasks.bundling.FileCollection == null ? java.util.Collections . java.util.List<java.lang.Object> ( ) : org.springframework.boot.gradle.tasks.bundling.FileCollection , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . isExcludeDevtools ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . org.springframework.boot.gradle.tasks.bundling.BootArchiveSupport . setExcludeDevtools ( boolean ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.boot.gradle.tasks.bundling.ZipCompression org.springframework.boot.gradle.tasks.bundling.ZipCompression ( FileCopyDetails org.springframework.boot.gradle.tasks.bundling.FileCopyDetails ) { if ( org.springframework.boot.gradle.tasks.bundling.FileCopyDetails . getRelativePath ( ) . getPathString ( ) . startsWith ( STRING ) ) { return ZipCompression . STORED ; } return ZipCompression . DEFLATED ; }  <METHOD_END>
