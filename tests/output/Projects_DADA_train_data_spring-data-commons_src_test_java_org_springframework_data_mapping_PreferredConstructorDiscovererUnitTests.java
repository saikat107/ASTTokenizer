<METHOD_START> @ Test public void void ( ) { PreferredConstructorDiscoverer < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.EntityWithoutConstructor , P > org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.EntityWithoutConstructor,P> = new PreferredConstructorDiscoverer <> ( org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.EntityWithoutConstructor .class ) ; assertThat ( org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.EntityWithoutConstructor,P> . getConstructor ( ) ) . hasValueSatisfying ( constructor -> { assertThat ( constructor ) . isNotNull ( ) ; assertThat ( constructor . isNoArgConstructor ( ) ) . isTrue ( ) ; assertThat ( constructor . isExplicitlyAnnotated ( ) ) . isFalse ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PreferredConstructorDiscoverer < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithEmptyConstructor , P > org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithEmptyConstructor,P> = new PreferredConstructorDiscoverer <> ( org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithEmptyConstructor .class ) ; assertThat ( org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithEmptyConstructor,P> . getConstructor ( ) ) . hasValueSatisfying ( constructor -> { assertThat ( constructor ) . isNotNull ( ) ; assertThat ( constructor . isNoArgConstructor ( ) ) . isTrue ( ) ; assertThat ( constructor . isExplicitlyAnnotated ( ) ) . isFalse ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PreferredConstructorDiscoverer < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsWithoutEmptyOne , P > org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsWithoutEmptyOne,P> = new PreferredConstructorDiscoverer <> ( org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsWithoutEmptyOne .class ) ; assertThat ( org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsWithoutEmptyOne,P> . getConstructor ( ) ) . isNotPresent ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PreferredConstructorDiscoverer < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsAndAnnotation , P > org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsAndAnnotation,P> = new PreferredConstructorDiscoverer <> ( org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsAndAnnotation .class ) ; assertThat ( org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.ClassWithMultipleConstructorsAndAnnotation,P> . getConstructor ( ) ) . hasValueSatisfying ( constructor -> { assertThat ( constructor ) . isNotNull ( ) ; assertThat ( constructor . isNoArgConstructor ( ) ) . isFalse ( ) ; assertThat ( constructor . isExplicitlyAnnotated ( ) ) . isTrue ( ) ; assertThat ( constructor . hasParameters ( ) ) . isTrue ( ) ; Iterator < Parameter < Object , P > > parameters = constructor . getParameters ( ) . iterator ( ) ; Parameter < ? , P > parameter = parameters . next ( ) ; assertThat ( parameter . getType ( ) . getType ( ) ) . isEqualTo ( Long .class ) ; assertThat ( parameters . hasNext ( ) ) . isFalse ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PersistentEntity < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner , P > org.springframework.data.mapping.PersistentEntity<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner,P> = new BasicPersistentEntity <> ( ClassTypeInformation . from ( org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner .class ) ) ; PreferredConstructorDiscoverer < org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner , P > org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner,P> = new PreferredConstructorDiscoverer <> ( org.springframework.data.mapping.PersistentEntity<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner,P> ) ; assertThat ( org.springframework.data.mapping.PreferredConstructorDiscoverer<org.springframework.data.mapping.PreferredConstructorDiscovererUnitTests.Outer.Inner,P> . getConstructor ( ) ) . hasValueSatisfying ( constructor -> { Parameter < ? , P > parameter = constructor . getParameters ( ) . iterator ( ) . next ( ) ; assertThat ( constructor . isEnclosingClassParameter ( parameter ) ) . isTrue ( ) ; } ) ; }  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.Long java.lang.Long ) {}  <METHOD_END>
<METHOD_START> public void ( ) {}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) {}  <METHOD_END>
<METHOD_START> @ PersistenceConstructor public void ( java.lang.Long java.lang.Long ) {}  <METHOD_END>
