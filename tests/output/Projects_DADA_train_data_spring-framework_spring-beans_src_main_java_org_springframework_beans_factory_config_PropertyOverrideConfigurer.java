<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ConfigurableListableBeanFactory org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.util.Properties java.util.Properties )			throws org.springframework.beans.factory.config.BeansException { for ( java.util.Enumeration<?> < ? > java.util.Enumeration<?> = java.util.Properties . java.util.Enumeration<?> ( ) ; java.util.Enumeration<> . boolean ( ) ;) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; try { void ( org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.lang.String , java.util.Properties . java.lang.String ( java.lang.String ) ) ; } catch ( BeansException org.springframework.beans.factory.config.BeansException ) { java.lang.String java.lang.String = STRING + java.lang.String + STRING ; if ( ! this . boolean ) { throw new BeanInitializationException ( java.lang.String , org.springframework.beans.factory.config.BeansException ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( java.lang.String , org.springframework.beans.factory.config.BeansException ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableListableBeanFactory org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.lang.String java.lang.String , java.lang.String java.lang.String )			throws org.springframework.beans.factory.config.BeansException { int int = java.lang.String . int ( this . java.lang.String ) ; if ( int == - NUMBER ) { throw new BeanInitializationException ( STRING + java.lang.String + STRING + this . java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; void ( org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.lang.String , java.lang.String , java.lang.String ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableListableBeanFactory org.springframework.beans.factory.config.ConfigurableListableBeanFactory , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { BeanDefinition org.springframework.beans.factory.config.BeanDefinition = org.springframework.beans.factory.config.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; while ( org.springframework.beans.factory.config.BeanDefinition . getOriginatingBeanDefinition ( ) != null ) { org.springframework.beans.factory.config.BeanDefinition = org.springframework.beans.factory.config.BeanDefinition . getOriginatingBeanDefinition ( ) ; } PropertyValue org.springframework.beans.factory.config.PropertyValue = new PropertyValue ( java.lang.String , java.lang.String ) ; org.springframework.beans.factory.config.PropertyValue . setOptional ( this . boolean ) ; org.springframework.beans.factory.config.BeanDefinition . getPropertyValues ( ) . addPropertyValue ( org.springframework.beans.factory.config.PropertyValue ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
