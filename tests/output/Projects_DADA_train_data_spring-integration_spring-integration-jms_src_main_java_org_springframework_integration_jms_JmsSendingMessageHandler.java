<METHOD_START> public void ( JmsTemplate org.springframework.integration.jms.JmsTemplate ) { this . org.springframework.integration.jms.JmsTemplate = org.springframework.integration.jms.JmsTemplate ; }  <METHOD_END>
<METHOD_START> public void void ( Destination org.springframework.integration.jms.Destination ) { Assert . isTrue ( this . java.lang.String == null && this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> == null , STRING ) ; this . org.springframework.integration.jms.Destination = org.springframework.integration.jms.Destination ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . isTrue ( this . org.springframework.integration.jms.Destination == null && this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> == null , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.jms.Expression ) { Assert . isTrue ( this . org.springframework.integration.jms.Destination == null && this . java.lang.String == null , STRING ) ; this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<?> = new ExpressionEvaluatingMessageProcessor < java.lang.Object > ( org.springframework.integration.jms.Expression ) ; setPrimaryExpression ( org.springframework.integration.jms.Expression ) ; }  <METHOD_END>
<METHOD_START> public void void ( JmsHeaderMapper org.springframework.integration.jms.JmsHeaderMapper ) { this . org.springframework.integration.jms.JmsHeaderMapper = org.springframework.integration.jms.JmsHeaderMapper ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setBeanFactory ( getBeanFactory ( ) ) ; ConversionService org.springframework.integration.jms.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.jms.ConversionService != null ) { this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . setConversionService ( org.springframework.integration.jms.ConversionService ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( final Message < ? > org.springframework.integration.jms.Message<?> ) throws java.lang.Exception { if ( org.springframework.integration.jms.Message<> == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } java.lang.Object java.lang.Object = this . java.lang.Object ( org.springframework.integration.jms.Message<> ) ; java.lang.Object java.lang.Object = ( this . boolean ) ? org.springframework.integration.jms.Message<> . getPayload ( ) : org.springframework.integration.jms.Message<> ; MessagePostProcessor org.springframework.integration.jms.MessagePostProcessor = new org.springframework.integration.jms.JmsSendingMessageHandler.HeaderMappingMessagePostProcessor ( org.springframework.integration.jms.Message<> , this . org.springframework.integration.jms.JmsHeaderMapper ) ; try { DynamicJmsTemplateProperties . setPriority ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.jms.Message<> ) . getPriority ( ) ) ; this . void ( java.lang.Object , java.lang.Object , org.springframework.integration.jms.MessagePostProcessor ) ; } finally { DynamicJmsTemplateProperties . clearPriority ( ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.jms.Message<?> ) { if ( this . org.springframework.integration.jms.Destination != null ) { return this . org.springframework.integration.jms.Destination ; } if ( this . java.lang.String != null ) { return this . java.lang.String ; } if ( this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> != null ) { java.lang.Object java.lang.Object = this . org.springframework.integration.jms.ExpressionEvaluatingMessageProcessor<> . processMessage ( org.springframework.integration.jms.Message<> ) ; if ( ! ( java.lang.Object instanceof Destination || java.lang.Object instanceof java.lang.String ) ) { throw new MessageDeliveryException ( org.springframework.integration.jms.Message<> , STRING + java.lang.Object ) ; } return java.lang.Object ; } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object , MessagePostProcessor org.springframework.integration.jms.MessagePostProcessor ) { if ( java.lang.Object instanceof Destination ) { this . org.springframework.integration.jms.JmsTemplate . convertAndSend ( ( Destination ) java.lang.Object , java.lang.Object , org.springframework.integration.jms.MessagePostProcessor ) ; } else if ( java.lang.Object instanceof java.lang.String ) { this . org.springframework.integration.jms.JmsTemplate . convertAndSend ( ( java.lang.String ) java.lang.Object , java.lang.Object , org.springframework.integration.jms.MessagePostProcessor ) ; } else { this . org.springframework.integration.jms.JmsTemplate . convertAndSend ( java.lang.Object , org.springframework.integration.jms.MessagePostProcessor ) ; } }  <METHOD_END>
<METHOD_START> void ( Message < ? > org.springframework.integration.jms.Message<?> , JmsHeaderMapper org.springframework.integration.jms.JmsHeaderMapper ) { this . org.springframework.integration.jms.Message<?> = org.springframework.integration.jms.Message<> ; this . org.springframework.integration.jms.JmsHeaderMapper = org.springframework.integration.jms.JmsHeaderMapper ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax . javax.jms . javax.jms.Message javax.jms.Message ( javax . javax.jms . javax.jms javax.jms.Message ) throws org.springframework.integration.jms.JMSException { this . org.springframework.integration.jms.JmsHeaderMapper . fromHeaders ( this . org.springframework.integration.jms.Message<> . getHeaders ( ) , javax.jms.Message ) ; return javax.jms.Message ; }  <METHOD_END>
