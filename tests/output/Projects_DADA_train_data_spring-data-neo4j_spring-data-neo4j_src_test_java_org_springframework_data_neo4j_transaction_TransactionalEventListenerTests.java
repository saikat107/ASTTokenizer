<METHOD_START> @ Before public void void ( ) { if ( this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext != null ) { this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.ImmediateTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertEvents ( EventCollector . IMMEDIATELY , STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertTotalEventsCount ( NUMBER ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.ImmediateTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BeforeCommitTestListener .class ) ; try { this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; fail ( STRING ) ; return null ; } ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String ) ) ; } org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; status . setRollbackOnly ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionExplicitTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.TransactionalComponentTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionExplicitTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; status . setRollbackOnly ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BeforeCommitTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionSynchronizationManager . registerSynchronization ( new EventTransactionSynchronization ( NUMBER ) { @ Override public void beforeCommit ( boolean readOnly ) { getEventCollector ( ) . assertNoEventReceived ( ) ; } } ) ; TransactionSynchronizationManager . registerSynchronization ( new EventTransactionSynchronization ( NUMBER ) { @ Override public void beforeCommit ( boolean readOnly ) { getEventCollector ( ) . assertEvents ( EventCollector . BEFORE_COMMIT , STRING ) ; getEventCollector ( ) . assertTotalEventsCount ( NUMBER ) ; } } ) ; TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; return null ; } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Override public void beforeCommit ( boolean readOnly ) { getEventCollector ( ) . assertNoEventReceived ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public void beforeCommit ( boolean readOnly ) { getEventCollector ( ) . assertEvents ( EventCollector . BEFORE_COMMIT , STRING ) ; getEventCollector ( ) . assertTotalEventsCount ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BeforeCommitTestListener .class ) ; try { this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( status -> { TransactionSynchronizationManager . registerSynchronization ( new EventTransactionSynchronization ( NUMBER ) { @ Override public void beforeCommit ( boolean readOnly ) { throw new IllegalStateException ( STRING ) ; } } ) ; TransactionalEventListenerTests .this . getContext ( ) . publishEvent ( STRING ) ; TransactionalEventListenerTests .this . getEventCollector ( ) . assertNoEventReceived ( ) ; return null ; } ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { } org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Override public void beforeCommit ( boolean readOnly ) { throw new IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.ImmediateTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BeforeCommitTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionExplicitTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( new TransactionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventTransactionSynchronization ( NUMBER ) { @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; } } ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventTransactionSynchronization ( NUMBER ) { @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; return null ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventTransactionSynchronization ( NUMBER ) { @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; } } ) ; TransactionSynchronizationManager . registerSynchronization ( new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventTransactionSynchronization ( NUMBER ) { @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BeforeCommitTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionTestListener .class , org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCompletionExplicitTestListener .class ) ; this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.FallbackExecutionTestListener .class ) ; this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext . publishEvent ( STRING ) ; this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.ImmediateTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( new TransactionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCommitMetaAnnotationTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( new TransactionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCommitMetaAnnotationTestListener .class ) ; this . org.springframework.data.neo4j.transaction.TransactionTemplate . execute ( new TransactionCallback < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; } } ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( TransactionStatus org.springframework.data.neo4j.transaction.TransactionStatus ) { org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) . publishEvent ( STRING ) ; org.springframework.data.neo4j.transaction.TransactionalEventListenerTests .this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) . void ( ) ; return null ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) { return org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.neo4j.transaction.ConfigurableApplicationContext org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ( ) { return org.springframework.data.neo4j.transaction.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.util.List<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.List<java.lang.Class<?>> = new java.util.ArrayList<java.lang.Class<?>> <> ( ) ; java.util.List<java.lang.Class<?>> . boolean ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.BasicConfiguration .class ) ; java.util.List<java.lang.Class<?>> . boolean ( java.util.Arrays . java.util.List<java.lang.Class<?>> ( java.lang.Class<?>[] ) ) ; void ( java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector = this . org.springframework.data.neo4j.transaction.ConfigurableApplicationContext . getBean ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.transaction.TransactionalEventListenerFactory org.springframework.data.neo4j.transaction.TransactionalEventListenerFactory ( ) { return new TransactionalEventListenerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) { return new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.CallCountingTransactionManager org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.CallCountingTransactionManager ( ) { return new org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.CallCountingTransactionManager ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { this . org.springframework.data.neo4j.transaction.MultiValueMap<java.lang.String,java.lang.Object> . add ( java.lang.String , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ( java.lang.String java.lang.String ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ; return ( ( ( java.util.List<java.lang.Object> = org.springframework.data.neo4j.transaction.MultiValueMap<java.lang.String,java.lang.Object> . get ( java.lang.String ) ) != null ) || org.springframework.data.neo4j.transaction.MultiValueMap<java.lang.String,java.lang.Object> . containsKey ( java.lang.String ) ) ? java.util.List<java.lang.Object> : java.util.Collections . java.util.List<java.lang.Object> ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String ... java.lang.String[] ) { if ( java.lang.String[] . int == NUMBER ) { java.lang.String[] = java.lang.String[] ; } for ( java.lang.String java.lang.String : java.lang.String[] ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.lang.String ) ; assertEquals ( STRING + java.lang.String + STRING + STRING + java.util.List<java.lang.Object> + STRING , NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = java.util.List<java.lang.Object> ( java.lang.String ) ; assertEquals ( STRING + java.lang.String + STRING , java.lang.Object[] . int , java.util.List<java.lang.Object> . int ( ) ) ; for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { assertEquals ( STRING + java.lang.String + STRING + int , java.lang.Object[] [ int ] , java.util.List<java.lang.Object> . java.lang.Object ( int ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( int int ) { int int = NUMBER ; for ( java.util.Map . java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> < java.lang.String , java.util.List<java.lang.Object> < java.lang.Object > > java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> : this . org.springframework.data.neo4j.transaction.MultiValueMap<java.lang.String,java.lang.Object> . entrySet ( ) ) { int += java.util.Map.Entry<java.lang.String,java.util.List<java.lang.Object>> . java.util.List<java.lang.Object> ( ) . int ( ) ; } assertEquals ( STRING + this . org.springframework.data.neo4j.transaction.MultiValueMap<java.lang.String,java.lang.Object> . size ( ) + STRING + STRING , int , int ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . void ( java.lang.String , java.lang.String ) ; if ( java.lang.String . boolean ( java.lang.String ) ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.util.EventListener ( condition = STRING ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_COMPLETION ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_COMMIT ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_ROLLBACK ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( condition = STRING ) void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = BEFORE_COMMIT ) @ Order ( NUMBER ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = BEFORE_COMMIT , fallbackExecution = true ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_COMMIT , fallbackExecution = true ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_ROLLBACK , fallbackExecution = true ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ TransactionalEventListener ( phase = AFTER_COMPLETION , fallbackExecution = true ) public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.AfterCommitEventListener public void void ( java.lang.String java.lang.String ) { void ( org.springframework.data.neo4j.transaction.TransactionalEventListenerTests.EventCollector . java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { return new java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.data.neo4j.transaction.TransactionDefinition ) { this . org.springframework.data.neo4j.transaction.TransactionDefinition = org.springframework.data.neo4j.transaction.TransactionDefinition ; ++ int ; ++ int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.neo4j.transaction.DefaultTransactionStatus ) { ++ int ; -- int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.neo4j.transaction.DefaultTransactionStatus ) { ++ int ; -- int ; }  <METHOD_END>
<METHOD_START> public void void ( ) { int = int = int = int = NUMBER ; }  <METHOD_END>
