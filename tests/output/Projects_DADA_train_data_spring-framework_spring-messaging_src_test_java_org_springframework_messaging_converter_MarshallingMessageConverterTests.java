<METHOD_START> @ Before public void void ( ) java.lang.Exception { Jaxb2Marshaller org.springframework.messaging.converter.Jaxb2Marshaller = new Jaxb2Marshaller ( ) ; org.springframework.messaging.converter.Jaxb2Marshaller . setClassesToBeBound ( org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean .class ) ; org.springframework.messaging.converter.Jaxb2Marshaller . afterPropertiesSet ( ) ; this . org.springframework.messaging.converter.MarshallingMessageConverter = new MarshallingMessageConverter ( org.springframework.messaging.converter.Jaxb2Marshaller ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.converter.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . build ( ) ; org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean = ( org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean ) this . org.springframework.messaging.converter.MarshallingMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<> , org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean .class ) ; assertNotNull ( org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean ) ; assertEquals ( STRING , org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageConversionException .class ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.converter.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . build ( ) ; this . org.springframework.messaging.converter.MarshallingMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<> , org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageConversionException .class ) public void void ( ) java.io.IOException { java.lang.String java.lang.String = STRING ; Message < ? > org.springframework.messaging.converter.Message<?> = MessageBuilder . withPayload ( java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) . build ( ) ; this . org.springframework.messaging.converter.MarshallingMessageConverter . fromMessage ( org.springframework.messaging.converter.Message<> , org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean = new org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean ( ) ; org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean . void ( STRING ) ; Message < ? > org.springframework.messaging.converter.Message<?> = this . org.springframework.messaging.converter.MarshallingMessageConverter . toMessage ( org.springframework.messaging.converter.MarshallingMessageConverterTests.MyBean , null ) ; assertNotNull ( org.springframework.messaging.converter.Message<> ) ; java.lang.String java.lang.String = new java.lang.String ( ( byte [] ) org.springframework.messaging.converter.Message<> . getPayload ( ) , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; DifferenceEvaluator org.springframework.messaging.converter.DifferenceEvaluator = chain ( Default , downgradeDifferencesToEqual ( XML_STANDALONE ) ) ; assertThat ( java.lang.String , isSimilarTo ( STRING ) . withDifferenceEvaluator ( org.springframework.messaging.converter.DifferenceEvaluator ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
