<METHOD_START> @ java.lang.Override public void void ( ) org.springframework.web.servlet.BeansException { registerSingleton ( DispatcherServlet . LOCALE_RESOLVER_BEAN_NAME , SessionLocaleResolver .class ) ; registerSingleton ( DispatcherServlet . THEME_RESOLVER_BEAN_NAME , SessionThemeResolver .class ) ; LocaleChangeInterceptor org.springframework.web.servlet.LocaleChangeInterceptor = new LocaleChangeInterceptor ( ) ; LocaleChangeInterceptor org.springframework.web.servlet.LocaleChangeInterceptor = new LocaleChangeInterceptor ( ) ; org.springframework.web.servlet.LocaleChangeInterceptor . setParamName ( STRING ) ; ThemeChangeInterceptor org.springframework.web.servlet.ThemeChangeInterceptor = new ThemeChangeInterceptor ( ) ; ThemeChangeInterceptor org.springframework.web.servlet.ThemeChangeInterceptor = new ThemeChangeInterceptor ( ) ; org.springframework.web.servlet.ThemeChangeInterceptor . setParamName ( STRING ) ; UserRoleAuthorizationInterceptor org.springframework.web.servlet.UserRoleAuthorizationInterceptor = new UserRoleAuthorizationInterceptor ( ) ; org.springframework.web.servlet.UserRoleAuthorizationInterceptor . setAuthorizedRoles ( STRING , STRING ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.UserRoleAuthorizationInterceptor ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.LocaleChangeInterceptor ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.LocaleChangeInterceptor ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.ThemeChangeInterceptor ) ; java.util.List<java.lang.Object> . boolean ( org.springframework.web.servlet.ThemeChangeInterceptor ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.web.servlet.ComplexWebApplicationContext.MyHandlerInterceptor1 ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.web.servlet.ComplexWebApplicationContext.MyHandlerInterceptor2 ( ) ) ; java.util.List<java.lang.Object> . boolean ( new org.springframework.web.servlet.ComplexWebApplicationContext.MyWebRequestInterceptor ( ) ) ; MutablePropertyValues org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , java.util.List<java.lang.Object> ) ; registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING + STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , SimpleUrlHandlerMapping .class , org.springframework.web.servlet.MutablePropertyValues ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.MyDummyAdapter .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.MyHandlerAdapter .class ) ; registerSingleton ( STRING , SimpleControllerHandlerAdapter .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.NoViewController .class ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , NUMBER ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , ResourceBundleViewResolver .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , InternalResourceViewResolver .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , ParameterizableViewController .class , org.springframework.web.servlet.MutablePropertyValues ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.ComplexLocaleChecker .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.ComplexLocaleChecker .class ) ; registerSingleton ( STRING , java.lang.Object .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.HeadController .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.BodyController .class ) ; registerSingleton ( STRING , SimpleServletPostProcessor .class ) ; registerSingleton ( STRING , SimpleServletHandlerAdapter .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.MyServlet .class ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING + STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , SimpleMappingExceptionResolver .class , org.springframework.web.servlet.MutablePropertyValues ) ; org.springframework.web.servlet.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; java.util.List<org.springframework.web.servlet.RuntimeBeanReference> < RuntimeBeanReference > java.util.List<org.springframework.web.servlet.RuntimeBeanReference> = new ManagedList <> ( ) ; java.util.List<org.springframework.web.servlet.RuntimeBeanReference> . add ( new RuntimeBeanReference ( STRING ) ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , java.util.List<org.springframework.web.servlet.RuntimeBeanReference> ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; org.springframework.web.servlet.MutablePropertyValues . add ( STRING , STRING ) ; registerSingleton ( STRING , SimpleMappingExceptionResolver .class , org.springframework.web.servlet.MutablePropertyValues ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.MockMultipartResolver .class ) ; registerSingleton ( STRING , org.springframework.web.servlet.ComplexWebApplicationContext.TestApplicationListener .class ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; addMessage ( STRING , java.util.Locale . java.util.Locale , STRING ) ; super. refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse ) throws java.lang.Exception { if ( STRING . boolean ( org.springframework.web.servlet.HttpServletRequest . getMethod ( ) ) ) { org.springframework.web.servlet.HttpServletResponse . setContentLength ( NUMBER ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse ) throws java.lang.Exception { org.springframework.web.servlet.HttpServletResponse . getOutputStream ( ) . write ( STRING . byte[] ( ) ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse ) throws java.lang.Exception { return new ModelAndView ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletConfig org.springframework.web.servlet.ServletConfig ) throws org.springframework.web.servlet.ServletException { this . org.springframework.web.servlet.ServletConfig = org.springframework.web.servlet.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ServletConfig org.springframework.web.servlet.ServletConfig ( ) { return org.springframework.web.servlet.ServletConfig ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletRequest org.springframework.web.servlet.ServletRequest , ServletResponse org.springframework.web.servlet.ServletResponse ) throws java.io.IOException { org.springframework.web.servlet.ServletResponse . getOutputStream ( ) . write ( STRING . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { this . org.springframework.web.servlet.ServletConfig = null ; }  <METHOD_END>
<METHOD_START> void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) throws org.springframework.web.servlet.ServletException , java.lang.IllegalAccessException ;  <METHOD_END>
<METHOD_START> long long ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object != null && org.springframework.web.servlet.ComplexWebApplicationContext.MyHandler .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object )				throws org.springframework.web.servlet.ServletException , java.lang.IllegalAccessException { ( ( org.springframework.web.servlet.ComplexWebApplicationContext.MyHandler ) java.lang.Object ) . void ( org.springframework.web.servlet.HttpServletRequest ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , java.lang.Object java.lang.Object ) { return ( ( org.springframework.web.servlet.ComplexWebApplicationContext.MyHandler ) java.lang.Object ) . long ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.lang.Object != null && org.springframework.web.servlet.ComplexWebApplicationContext.MyHandler .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.ModelAndView org.springframework.web.servlet.ModelAndView ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object )			throws java.io.IOException , org.springframework.web.servlet.ServletException { throw new ServletException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , java.lang.Object java.lang.Object ) { return - NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object )				throws org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) != null ) { throw new ServletException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object , ModelAndView org.springframework.web.servlet.ModelAndView )				throws org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) != null ) { throw new ServletException ( STRING ) ; } if ( ! STRING . boolean ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) ) ) { throw new ServletException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . removeAttribute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception )				throws org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) != null ) { throw new ServletException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) == null ) { throw new ServletException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . removeAttribute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object )				throws org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) == null ) { throw new ServletException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { return false ; } org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , STRING ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object , ModelAndView org.springframework.web.servlet.ModelAndView )				throws org.springframework.web.servlet.ServletException { if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { org.springframework.web.servlet.ModelAndView . clear ( ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) == null ) { throw new ServletException ( STRING ) ; } if ( ! STRING . boolean ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) ) ) { throw new ServletException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . removeAttribute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest , HttpServletResponse org.springframework.web.servlet.HttpServletResponse , java.lang.Object java.lang.Object , java.lang.Exception java.lang.Exception )				throws java.lang.Exception { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) == null ) { throw new ServletException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) == null ) { throw new ServletException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . removeAttribute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.WebRequest ) throws java.lang.Exception { org.springframework.web.servlet.WebRequest . setAttribute ( STRING , STRING , WebRequest . SCOPE_REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.WebRequest , ModelMap org.springframework.web.servlet.ModelMap ) throws java.lang.Exception { org.springframework.web.servlet.WebRequest . setAttribute ( STRING , STRING , WebRequest . SCOPE_REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.web.servlet.WebRequest , java.lang.Exception java.lang.Exception ) throws java.lang.Exception { org.springframework.web.servlet.WebRequest . setAttribute ( STRING , STRING , WebRequest . SCOPE_REQUEST ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) throws org.springframework.web.servlet.ServletException , java.lang.IllegalAccessException { WebApplicationContext org.springframework.web.servlet.WebApplicationContext = RequestContextUtils . findWebApplicationContext ( org.springframework.web.servlet.HttpServletRequest ) ; if ( ! ( org.springframework.web.servlet.WebApplicationContext instanceof org.springframework.web.servlet.ComplexWebApplicationContext ) ) { throw new ServletException ( STRING ) ; } if ( WebUtils . getNativeRequest ( org.springframework.web.servlet.HttpServletRequest , MultipartHttpServletRequest .class ) == null ) { throw new ServletException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { throw new ModelAndViewDefiningException ( new ModelAndView ( STRING ) ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { throw new java.lang.IllegalAccessException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { throw new ServletRequestBindingException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getParameter ( STRING ) != null ) { throw new java.lang.RuntimeException ( STRING ) ; } if ( ! ( RequestContextUtils . getLocaleResolver ( org.springframework.web.servlet.HttpServletRequest ) instanceof SessionLocaleResolver ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.Locale . java.util.Locale . boolean ( RequestContextUtils . getLocale ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.Locale . java.util.Locale . boolean ( LocaleContextHolder . getLocale ( ) ) ) { throw new ServletException ( STRING ) ; } if ( RequestContextUtils . getTimeZone ( org.springframework.web.servlet.HttpServletRequest ) != null ) { throw new ServletException ( STRING ) ; } if ( ! java.util.TimeZone . java.util.TimeZone ( ) . boolean ( LocaleContextHolder . getTimeZone ( ) ) ) { throw new ServletException ( STRING ) ; } if ( ! ( RequestContextUtils . getThemeResolver ( org.springframework.web.servlet.HttpServletRequest ) instanceof SessionThemeResolver ) ) { throw new ServletException ( STRING ) ; } if ( ! STRING . boolean ( RequestContextUtils . getThemeResolver ( org.springframework.web.servlet.HttpServletRequest ) . resolveThemeName ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } RequestContext org.springframework.web.servlet.RequestContext = new RequestContext ( org.springframework.web.servlet.HttpServletRequest ) ; org.springframework.web.servlet.RequestContext . changeLocale ( java.util.Locale . java.util.Locale , java.util.TimeZone . java.util.TimeZone ( STRING ) ) ; org.springframework.web.servlet.RequestContext . changeTheme ( STRING ) ; if ( ! java.util.Locale . java.util.Locale . boolean ( RequestContextUtils . getLocale ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.Locale . java.util.Locale . boolean ( LocaleContextHolder . getLocale ( ) ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.TimeZone . java.util.TimeZone ( STRING ) . boolean ( RequestContextUtils . getTimeZone ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } if ( ! java.util.TimeZone . java.util.TimeZone ( STRING ) . boolean ( LocaleContextHolder . getTimeZone ( ) ) ) { throw new ServletException ( STRING ) ; } if ( ! STRING . boolean ( RequestContextUtils . getThemeResolver ( org.springframework.web.servlet.HttpServletRequest ) . resolveThemeName ( org.springframework.web.servlet.HttpServletRequest ) ) ) { throw new ServletException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.MultipartHttpServletRequest org.springframework.web.servlet.MultipartHttpServletRequest ( HttpServletRequest org.springframework.web.servlet.HttpServletRequest ) throws org.springframework.web.servlet.MultipartException { if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) != null ) { throw new MaxUploadSizeExceededException ( NUMBER ) ; } if ( org.springframework.web.servlet.HttpServletRequest instanceof MultipartHttpServletRequest ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( org.springframework.web.servlet.HttpServletRequest . getAttribute ( STRING ) != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } org.springframework.web.servlet.HttpServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; return new AbstractMultipartHttpServletRequest ( org.springframework.web.servlet.HttpServletRequest ) { @ java.lang.Override public org.springframework.web.servlet.HttpHeaders org.springframework.web.servlet.HttpHeaders ( java.lang.String java.lang.String ) { return null ; } @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.servlet.HttpHeaders org.springframework.web.servlet.HttpHeaders ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MultipartHttpServletRequest org.springframework.web.servlet.MultipartHttpServletRequest ) { if ( org.springframework.web.servlet.MultipartHttpServletRequest . getAttribute ( STRING ) != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } org.springframework.web.servlet.MultipartHttpServletRequest . setAttribute ( STRING , java.lang.Boolean . java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.web.servlet.ApplicationEvent ) { if ( org.springframework.web.servlet.ApplicationEvent instanceof RequestHandledEvent ) { this . int ++ ; } }  <METHOD_END>
