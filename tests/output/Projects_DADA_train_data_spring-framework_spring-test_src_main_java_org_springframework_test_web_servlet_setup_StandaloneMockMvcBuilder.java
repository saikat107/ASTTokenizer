<METHOD_START> protected void ( java.lang.Object ... java.lang.Object[] ) { Assert . isTrue ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) , STRING ) ; this . java.lang.Object[] = java.lang.Object[] ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( java.lang.Object ... java.lang.Object[] ) { this . java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( org.springframework.test.web.servlet.setup.HttpMessageConverter<?> < ? > ... org.springframework.test.web.servlet.setup.HttpMessageConverter<?>[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.HttpMessageConverter<?>> = java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.setup.HttpMessageConverter<?>[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( Validator org.springframework.test.web.servlet.setup.Validator ) { this . org.springframework.test.web.servlet.setup.Validator = org.springframework.test.web.servlet.setup.Validator ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( FormattingConversionService org.springframework.test.web.servlet.setup.FormattingConversionService ) { this . org.springframework.test.web.servlet.setup.FormattingConversionService = org.springframework.test.web.servlet.setup.FormattingConversionService ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( HandlerInterceptor ... org.springframework.test.web.servlet.setup.HandlerInterceptor[] ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( null , org.springframework.test.web.servlet.setup.HandlerInterceptor[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( java.lang.String [] java.lang.String[] , HandlerInterceptor ... org.springframework.test.web.servlet.setup.HandlerInterceptor[] ) { for ( HandlerInterceptor org.springframework.test.web.servlet.setup.HandlerInterceptor : org.springframework.test.web.servlet.setup.HandlerInterceptor[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.MappedInterceptor> . add ( new MappedInterceptor ( java.lang.String[] , org.springframework.test.web.servlet.setup.HandlerInterceptor ) ) ; } return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( ContentNegotiationManager org.springframework.test.web.servlet.setup.ContentNegotiationManager ) { this . org.springframework.test.web.servlet.setup.ContentNegotiationManager = org.springframework.test.web.servlet.setup.ContentNegotiationManager ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( long long ) { this . java.lang.Long = long ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( HandlerMethodArgumentResolver ... org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver> = java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( HandlerMethodReturnValueHandler ... org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler> = java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> ) { this . java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> = java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( HandlerExceptionResolver ... org.springframework.test.web.servlet.setup.HandlerExceptionResolver[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> = java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.setup.HandlerExceptionResolver[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( ViewResolver ... org.springframework.test.web.servlet.setup.ViewResolver[] ) { this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> = java.util.Arrays . java.util.List ( org.springframework.test.web.servlet.setup.ViewResolver[] ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( View org.springframework.test.web.servlet.setup.View ) { this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> = java.util.Collections .< ViewResolver > java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticViewResolver ( org.springframework.test.web.servlet.setup.View ) ) ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( LocaleResolver org.springframework.test.web.servlet.setup.LocaleResolver ) { this . org.springframework.test.web.servlet.setup.LocaleResolver = org.springframework.test.web.servlet.setup.LocaleResolver ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( FlashMapManager org.springframework.test.web.servlet.setup.FlashMapManager ) { this . org.springframework.test.web.servlet.setup.FlashMapManager = org.springframework.test.web.servlet.setup.FlashMapManager ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( boolean boolean ) { this . java.lang.Boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String , java.lang.String ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.test.web.servlet.setup.WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext ( ) { MockServletContext org.springframework.test.web.servlet.setup.MockServletContext = new MockServletContext ( ) ; StubWebApplicationContext org.springframework.test.web.servlet.setup.StubWebApplicationContext = new StubWebApplicationContext ( org.springframework.test.web.servlet.setup.MockServletContext ) ; void ( org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ; org.springframework.test.web.servlet.setup.MockServletContext . setAttribute ( WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ; return org.springframework.test.web.servlet.setup.StubWebApplicationContext ; }  <METHOD_END>
<METHOD_START> private void void ( StubWebApplicationContext org.springframework.test.web.servlet.setup.StubWebApplicationContext ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration ( ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration . setApplicationContext ( org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBeans ( this . java.util.List<java.lang.Object> ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping = org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration . org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping ( ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setServletContext ( org.springframework.test.web.servlet.setup.StubWebApplicationContext . getServletContext ( ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setApplicationContext ( org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . afterPropertiesSet ( ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . void ( this . java.lang.Object[] ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( STRING , org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping ) ; RequestMappingHandlerAdapter org.springframework.test.web.servlet.setup.RequestMappingHandlerAdapter = org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration . requestMappingHandlerAdapter ( ) ; org.springframework.test.web.servlet.setup.RequestMappingHandlerAdapter . setServletContext ( org.springframework.test.web.servlet.setup.StubWebApplicationContext . getServletContext ( ) ) ; org.springframework.test.web.servlet.setup.RequestMappingHandlerAdapter . setApplicationContext ( org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ; org.springframework.test.web.servlet.setup.RequestMappingHandlerAdapter . afterPropertiesSet ( ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( STRING , org.springframework.test.web.servlet.setup.RequestMappingHandlerAdapter ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( STRING , org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StandaloneConfiguration . handlerExceptionResolver ( ) ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBeans ( java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ( org.springframework.test.web.servlet.setup.StubWebApplicationContext ) ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( DispatcherServlet . LOCALE_RESOLVER_BEAN_NAME , this . org.springframework.test.web.servlet.setup.LocaleResolver ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( DispatcherServlet . THEME_RESOLVER_BEAN_NAME , new FixedThemeResolver ( ) ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( DispatcherServlet . REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME , new DefaultRequestToViewNameTranslator ( ) ) ; this . org.springframework.test.web.servlet.setup.FlashMapManager = new SessionFlashMapManager ( ) ; org.springframework.test.web.servlet.setup.StubWebApplicationContext . addBean ( DispatcherServlet . FLASH_MAP_MANAGER_BEAN_NAME , this . org.springframework.test.web.servlet.setup.FlashMapManager ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> < ViewResolver > java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ( WebApplicationContext org.springframework.test.web.servlet.setup.WebApplicationContext ) { this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> = ( this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> != null ? this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> : java.util.Collections .< ViewResolver > java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ( new InternalResourceViewResolver ( ) ) ) ; for ( java.lang.Object java.lang.Object : this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ) { if ( java.lang.Object instanceof WebApplicationObjectSupport ) { ( ( WebApplicationObjectSupport ) java.lang.Object ) . setApplicationContext ( org.springframework.test.web.servlet.setup.WebApplicationContext ) ; } } return this . java.util.List<org.springframework.test.web.servlet.setup.ViewResolver> ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping ( ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping = new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping ( ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setEmbeddedValueResolver ( new org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticStringValueResolver ( java.util.Map<java.lang.String,java.lang.String> ) ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setUseSuffixPatternMatch ( boolean ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setUseTrailingSlashMatch ( boolean ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setOrder ( NUMBER ) ; org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setInterceptors ( getInterceptors ( ) ) ; if ( java.lang.Boolean != null ) { org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping . setRemoveSemicolonContent ( java.lang.Boolean ) ; } return org.springframework.test.web.servlet.setup.StandaloneMockMvcBuilder.StaticRequestMappingHandlerMapping ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.test.web.servlet.setup.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.test.web.servlet.setup.HttpMessageConverter<?>> ) { java.util.List<org.springframework.test.web.servlet.setup.HttpMessageConverter<?>> . addAll ( java.util.List<org.springframework.test.web.servlet.setup.HttpMessageConverter<?>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver> < HandlerMethodArgumentResolver > java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver> ) { java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver> . addAll ( java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodArgumentResolver> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler> < HandlerMethodReturnValueHandler > java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler> ) { java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler> . addAll ( java.util.List<org.springframework.test.web.servlet.setup.HandlerMethodReturnValueHandler> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( InterceptorRegistry org.springframework.test.web.servlet.setup.InterceptorRegistry ) { for ( MappedInterceptor org.springframework.test.web.servlet.setup.MappedInterceptor : java.util.List<org.springframework.test.web.servlet.setup.MappedInterceptor> ) { InterceptorRegistration org.springframework.test.web.servlet.setup.InterceptorRegistration = org.springframework.test.web.servlet.setup.InterceptorRegistry . addInterceptor ( org.springframework.test.web.servlet.setup.MappedInterceptor . getInterceptor ( ) ) ; if ( org.springframework.test.web.servlet.setup.MappedInterceptor . getPathPatterns ( ) != null ) { org.springframework.test.web.servlet.setup.InterceptorRegistration . addPathPatterns ( org.springframework.test.web.servlet.setup.MappedInterceptor . getPathPatterns ( ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.setup.ContentNegotiationManager org.springframework.test.web.servlet.setup.ContentNegotiationManager ( ) { return ( org.springframework.test.web.servlet.setup.ContentNegotiationManager != null ) ? org.springframework.test.web.servlet.setup.ContentNegotiationManager : super. mvcContentNegotiationManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.setup.FormattingConversionService org.springframework.test.web.servlet.setup.FormattingConversionService ( ) { return ( org.springframework.test.web.servlet.setup.FormattingConversionService != null ) ? org.springframework.test.web.servlet.setup.FormattingConversionService : super. mvcConversionService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncSupportConfigurer org.springframework.test.web.servlet.setup.AsyncSupportConfigurer ) { if ( java.lang.Long != null ) { org.springframework.test.web.servlet.setup.AsyncSupportConfigurer . setDefaultTimeout ( java.lang.Long ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.setup.Validator org.springframework.test.web.servlet.setup.Validator ( ) { Validator org.springframework.test.web.servlet.setup.Validator = ( org.springframework.test.web.servlet.setup.Validator != null ) ? org.springframework.test.web.servlet.setup.Validator : super. mvcValidator ( ) ; if ( org.springframework.test.web.servlet.setup.Validator instanceof InitializingBean ) { try { ( ( InitializingBean ) org.springframework.test.web.servlet.setup.Validator ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new BeanInitializationException ( STRING , java.lang.Exception ) ; } } return org.springframework.test.web.servlet.setup.Validator ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> < HandlerExceptionResolver > java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> ) { if ( java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> == null ) { return; } for ( HandlerExceptionResolver org.springframework.test.web.servlet.setup.HandlerExceptionResolver : java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> ) { if ( org.springframework.test.web.servlet.setup.HandlerExceptionResolver instanceof ApplicationContextAware ) { ( ( ApplicationContextAware ) org.springframework.test.web.servlet.setup.HandlerExceptionResolver ) . setApplicationContext ( getApplicationContext ( ) ) ; } if ( org.springframework.test.web.servlet.setup.HandlerExceptionResolver instanceof InitializingBean ) { try { ( ( InitializingBean ) org.springframework.test.web.servlet.setup.HandlerExceptionResolver ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( STRING , java.lang.Exception ) ; } } java.util.List<org.springframework.test.web.servlet.setup.HandlerExceptionResolver> . add ( org.springframework.test.web.servlet.setup.HandlerExceptionResolver ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Object ... java.lang.Object[] ) { for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { detectHandlerMethods ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> public void ( final java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . org.springframework.test.web.servlet.setup.PropertyPlaceholderHelper = new PropertyPlaceholderHelper ( STRING , STRING , STRING , false ) ; this . org.springframework.test.web.servlet.setup.PlaceholderResolver = new PlaceholderResolver ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,java.lang.String> . java.lang.String ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) throws org.springframework.test.web.servlet.setup.BeansException { return this . org.springframework.test.web.servlet.setup.PropertyPlaceholderHelper . replacePlaceholders ( java.lang.String , this . org.springframework.test.web.servlet.setup.PlaceholderResolver ) ; }  <METHOD_END>
<METHOD_START> public void ( View org.springframework.test.web.servlet.setup.View ) { this . org.springframework.test.web.servlet.setup.View = org.springframework.test.web.servlet.setup.View ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.servlet.setup.View org.springframework.test.web.servlet.setup.View ( java.lang.String java.lang.String , java.util.Locale java.util.Locale ) throws java.lang.Exception { return this . org.springframework.test.web.servlet.setup.View ; }  <METHOD_END>
