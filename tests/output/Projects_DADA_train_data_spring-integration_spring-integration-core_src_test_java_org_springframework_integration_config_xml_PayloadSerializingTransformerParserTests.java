<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( org.springframework.integration.config.xml.Message<> . getPayload ( ) instanceof byte [] ) ; assertEquals ( STRING , java.lang.Object ( ( byte [] ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( org.springframework.integration.config.xml.Message<> . getPayload ( ) instanceof byte [] ) ; assertEquals ( STRING , java.lang.Object ( ( byte [] ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean > ( new org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean ( ) ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertTrue ( org.springframework.integration.config.xml.Message<> . getPayload ( ) instanceof byte [] ) ; java.lang.Object java.lang.Object = java.lang.Object ( ( byte [] ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean ) java.lang.Object ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean > ( new org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean ( ) ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.config.xml.Message<> . getPayload ( ) instanceof byte [] ) ; java.lang.Object java.lang.Object = java.lang.Object ( ( byte [] ) org.springframework.integration.config.xml.Message<> . getPayload ( ) ) ; assertEquals ( org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , ( ( org.springframework.integration.config.xml.PayloadSerializingTransformerParserTests.TestBean ) java.lang.Object ) . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = MessageTransformationException .class ) public void void ( ) { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.Object > ( new java.lang.Object ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.integration.config.xml.MessageChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.config.xml.Message<?> = org.springframework.integration.config.xml.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.config.xml.Message<> ) ; assertEquals ( byte [] .class , org.springframework.integration.config.xml.Message<> . getPayload ( ) . getClass ( ) ) ; assertEquals ( STRING , new java.lang.String ( ( byte [] ) org.springframework.integration.config.xml.Message<> . getPayload ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.Object java.lang.Object ( byte [] byte[] ) throws java.lang.Exception { java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; java.io.ObjectInputStream java.io.ObjectInputStream = new java.io.ObjectInputStream ( java.io.ByteArrayInputStream ) ; return java.io.ObjectInputStream . java.lang.Object ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , java.io.OutputStream java.io.OutputStream ) throws java.io.IOException { java.io.OutputStream . void ( java.lang.Object . java.lang.String ( ) . java.lang.String ( ) . byte[] ( STRING ) ) ; java.io.OutputStream . void ( ) ; java.io.OutputStream . void ( ) ; }  <METHOD_END>
