<METHOD_START> public void ( ) { }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( java.lang.Class<> . boolean ( ) , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . isTrue ( java.lang.Class<> . boolean ( ) , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( MessageChannel org.springframework.integration.gateway.MessageChannel ) { this . org.springframework.integration.gateway.MessageChannel = org.springframework.integration.gateway.MessageChannel ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; if ( ! CollectionUtils . isEmpty ( this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ) ) { for ( org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway : this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> . java.util.Collection<org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ( ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setShouldTrack ( boolean ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { if ( java.util.concurrent.Executor == null && logger . isInfoEnabled ( ) ) { logger . info ( STRING + STRING ) ; } this . org.springframework.integration.gateway.AsyncTaskExecutor = ( java.util.concurrent.Executor instanceof AsyncTaskExecutor || java.util.concurrent.Executor == null ) ? ( AsyncTaskExecutor ) java.util.concurrent.Executor : new TaskExecutorAdapter ( java.util.concurrent.Executor ) ; }  <METHOD_END>
<METHOD_START> public void void ( TypeConverter org.springframework.integration.gateway.TypeConverter ) { Assert . notNull ( org.springframework.integration.gateway.TypeConverter , STRING ) ; this . org.springframework.integration.gateway.TypeConverter = org.springframework.integration.gateway.TypeConverter ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> < java.lang.String , GatewayMethodMetadata > java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> ) { this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> = java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> ; }  <METHOD_END>
<METHOD_START> public void void ( GatewayMethodMetadata org.springframework.integration.gateway.GatewayMethodMetadata ) { this . org.springframework.integration.gateway.GatewayMethodMetadata = org.springframework.integration.gateway.GatewayMethodMetadata ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> public final void void ( MethodArgsMessageMapper org.springframework.integration.gateway.MethodArgsMessageMapper ) { this . org.springframework.integration.gateway.MethodArgsMessageMapper = org.springframework.integration.gateway.MethodArgsMessageMapper ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.gateway.AsyncTaskExecutor org.springframework.integration.gateway.AsyncTaskExecutor ( ) { return this . org.springframework.integration.gateway.AsyncTaskExecutor ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> < java.lang.reflect.Method , MessagingGatewaySupport > java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.MessagingGatewaySupport> ( ) { return java.util.Collections . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ( this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { synchronized ( this . java.lang.Object ) { if ( this . boolean ) { return; } BeanFactory org.springframework.integration.gateway.BeanFactory = this . getBeanFactory ( ) ; if ( this . org.springframework.integration.gateway.DestinationResolver<org.springframework.integration.gateway.MessageChannel> == null && org.springframework.integration.gateway.BeanFactory != null ) { this . org.springframework.integration.gateway.DestinationResolver<org.springframework.integration.gateway.MessageChannel> = new BeanFactoryChannelResolver ( org.springframework.integration.gateway.BeanFactory ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<?> ( ) ; java.lang.reflect.Method [] java.lang.reflect.Method[] = ReflectionUtils . getAllDeclaredMethods ( java.lang.Class<> ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway = this . org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ( java.lang.reflect.Method ) ; this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> . org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ( java.lang.reflect.Method , org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ) ; } this . java.lang.Object = new ProxyFactory ( java.lang.Class<> , this ) . getProxy ( this . java.lang.ClassLoader ) ; if ( this . org.springframework.integration.gateway.AsyncTaskExecutor != null ) { java.util.concurrent.Callable<java.lang.String> < java.lang.String > java.util.concurrent.Callable<java.lang.String> = ( ) null ; java.util.concurrent.Future<java.lang.String> < java.lang.String > java.util.concurrent.Future<java.lang.String> = this . org.springframework.integration.gateway.AsyncTaskExecutor . submit ( java.util.concurrent.Callable<java.lang.String> ) ; this . java.lang.Class<?> = java.util.concurrent.Future<java.lang.String> . java.lang.Class<? extends java.util.concurrent.Future> ( ) ; if ( this . org.springframework.integration.gateway.AsyncTaskExecutor instanceof AsyncListenableTaskExecutor ) { java.util.concurrent.Future<java.lang.String> = ( ( AsyncListenableTaskExecutor ) this . org.springframework.integration.gateway.AsyncTaskExecutor ) . submitListenable ( java.util.concurrent.Callable<java.lang.String> ) ; this . java.lang.Class<?> = java.util.concurrent.Future<java.lang.String> . java.lang.Class<? extends java.util.concurrent.Future> ( ) ; } } this . boolean = true ; } }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( ) { if ( this . java.lang.Class<> == null ) { this . java.lang.Class<?> = RequestReplyExchanger .class ; } return this . java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return ( this . java.lang.Class<> != null ? this . java.lang.Class<> : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { if ( this . java.lang.Object == null ) { this . void ( ) ; Assert . notNull ( this . java.lang.Object , STRING ) ; } return this . java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final MethodInvocation org.springframework.integration.gateway.MethodInvocation ) throws java.lang.Throwable { final java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.integration.gateway.MethodInvocation . getMethod ( ) . getReturnType ( ) ; if ( this . org.springframework.integration.gateway.AsyncTaskExecutor != null && ! java.lang.Object .class . boolean ( java.lang.Class<> ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker = new org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker ( org.springframework.integration.gateway.MethodInvocation ) ; if ( java.lang.Class<> . boolean ( this . java.lang.Class<> ) ) { return this . org.springframework.integration.gateway.AsyncTaskExecutor . submit ( org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker :: java.lang.Object ) ; } else if ( java.lang.Class<> . boolean ( this . java.lang.Class<> ) ) { return ( ( AsyncListenableTaskExecutor ) this . org.springframework.integration.gateway.AsyncTaskExecutor ) . submitListenable ( org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker :: java.lang.Object ) ; } else if ( java.util.concurrent.CompletableFuture .class . boolean ( java.lang.Class<> ) ) { return java.util.concurrent.CompletableFuture . java.util.concurrent.CompletableFuture ( org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker , this . org.springframework.integration.gateway.AsyncTaskExecutor ) ; } else if ( java.util.concurrent.Future .class . boolean ( java.lang.Class<> ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + STRING + java.lang.Class<> . java.lang.String ( ) ) ; } } } if ( Mono .class . boolean ( java.lang.Class<> ) ) { return Mono . fromSupplier ( new org.springframework.integration.gateway.GatewayProxyFactoryBean.Invoker ( org.springframework.integration.gateway.MethodInvocation ) ) ; } return this . java.lang.Object ( org.springframework.integration.gateway.MethodInvocation , true ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.gateway.MethodInvocation , boolean boolean ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.MethodInvocation . getMethod ( ) ; if ( AopUtils . isToStringMethod ( java.lang.reflect.Method ) ) { return STRING + this . java.lang.Class<> + STRING ; } try { return this . java.lang.Object ( org.springframework.integration.gateway.MethodInvocation , boolean ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { this . void ( java.lang.Throwable , org.springframework.integration.gateway.MethodInvocation . getMethod ( ) ) ; return null ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( MethodInvocation org.springframework.integration.gateway.MethodInvocation , boolean boolean ) throws java.lang.Exception { if ( ! this . boolean ) { this . afterPropertiesSet ( ) ; } java.lang.reflect.Method java.lang.reflect.Method = org.springframework.integration.gateway.MethodInvocation . getMethod ( ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway = this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> . org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ( java.lang.reflect.Method ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.reflect.Method . java.lang.Class<?> ( ) ; boolean boolean = Message .class . boolean ( java.lang.Class<> ) || boolean ( java.lang.reflect.Method , boolean ) ; boolean boolean = java.lang.Class<> != void .class ; int int = java.lang.reflect.Method . java.lang.Class<?>[] ( ) . int ; java.lang.Object java.lang.Object = null ; boolean boolean = java.lang.reflect.Method . boolean ( Payload .class ) ; if ( ! boolean && this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> != null ) { GatewayMethodMetadata org.springframework.integration.gateway.GatewayMethodMetadata = this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> . get ( java.lang.reflect.Method . java.lang.String ( ) ) ; boolean = ( org.springframework.integration.gateway.GatewayMethodMetadata != null ) && StringUtils . hasText ( org.springframework.integration.gateway.GatewayMethodMetadata . getPayloadExpression ( ) ) ; } if ( int == NUMBER && ! boolean ) { if ( boolean ) { if ( boolean ) { return org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . receiveMessage ( ) ; } java.lang.Object = org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . receive ( ) ; } } else { java.lang.Object [] java.lang.Object[] = org.springframework.integration.gateway.MethodInvocation . getArguments ( ) ; if ( boolean ) { java.lang.Object = boolean ? org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . sendAndReceiveMessage ( java.lang.Object[] ) : org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . sendAndReceive ( java.lang.Object[] ) ; } else { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . send ( java.lang.Object[] ) ; java.lang.Object = null ; } } return ( java.lang.Object != null ) ? this . convert ( java.lang.Object , java.lang.Class<> ) : null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable , java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.Throwable { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.lang.reflect.Method . java.lang.Class<?>[] ( ) ; java.lang.Throwable java.lang.Throwable = java.lang.Throwable ; while ( java.lang.Throwable != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( java.lang.Throwable . java.lang.Class<? extends java.lang.Throwable> ( ) ) ) { throw java.lang.Throwable ; } } if ( java.lang.Throwable instanceof java.lang.RuntimeException && ! ( java.lang.Throwable instanceof MessagingException ) && ! ( java.lang.Throwable instanceof java.lang.reflect.UndeclaredThrowableException ) && ! ( java.lang.Throwable instanceof java.lang.IllegalStateException && ( STRING ) . boolean ( java.lang.Throwable . java.lang.String ( ) ) ) ) { throw java.lang.Throwable ; } java.lang.Throwable = java.lang.Throwable . java.lang.Throwable ( ) ; } throw java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ( java.lang.reflect.Method java.lang.reflect.Method ) { Gateway org.springframework.integration.gateway.Gateway = java.lang.reflect.Method . T ( Gateway .class ) ; java.lang.String java.lang.String = null ; java.lang.String java.lang.String = null ; java.lang.Long java.lang.Long = this . java.lang.Long ; java.lang.Long java.lang.Long = this . java.lang.Long ; java.lang.String java.lang.String = this . org.springframework.integration.gateway.GatewayMethodMetadata != null ? this . org.springframework.integration.gateway.GatewayMethodMetadata . getPayloadExpression ( ) : null ; java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> = new java.util.HashMap<java.lang.String,org.springframework.integration.gateway.Expression> < java.lang.String , Expression > ( ) ; if ( org.springframework.integration.gateway.Gateway != null ) { java.lang.String = org.springframework.integration.gateway.Gateway . requestChannel ( ) ; java.lang.String = org.springframework.integration.gateway.Gateway . replyChannel ( ) ; if ( java.lang.Long == null || org.springframework.integration.gateway.Gateway . requestTimeout ( ) != java.lang.Long . long ) { java.lang.Long = org.springframework.integration.gateway.Gateway . requestTimeout ( ) ; } if ( java.lang.Long == null || org.springframework.integration.gateway.Gateway . replyTimeout ( ) != java.lang.Long . long ) { java.lang.Long = org.springframework.integration.gateway.Gateway . replyTimeout ( ) ; } if ( java.lang.String == null || StringUtils . hasText ( org.springframework.integration.gateway.Gateway . payloadExpression ( ) ) ) { java.lang.String = org.springframework.integration.gateway.Gateway . payloadExpression ( ) ; } if ( ! ObjectUtils . isEmpty ( org.springframework.integration.gateway.Gateway . headers ( ) ) ) { for ( GatewayHeader org.springframework.integration.gateway.GatewayHeader : org.springframework.integration.gateway.Gateway . headers ( ) ) { java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayHeader . value ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayHeader . expression ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayHeader . name ( ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean == StringUtils . hasText ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( STRING + STRING ) ; } java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . put ( java.lang.String , boolean ? new LiteralExpression ( java.lang.String ) : EXPRESSION_PARSER . parseExpression ( java.lang.String ) ) ; } } } else if ( this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> != null && this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> . size ( ) > NUMBER ) { GatewayMethodMetadata org.springframework.integration.gateway.GatewayMethodMetadata = this . java.util.Map<java.lang.String,org.springframework.integration.gateway.GatewayMethodMetadata> . get ( java.lang.reflect.Method . java.lang.String ( ) ) ; if ( org.springframework.integration.gateway.GatewayMethodMetadata != null ) { if ( StringUtils . hasText ( org.springframework.integration.gateway.GatewayMethodMetadata . getPayloadExpression ( ) ) ) { java.lang.String = org.springframework.integration.gateway.GatewayMethodMetadata . getPayloadExpression ( ) ; } if ( ! CollectionUtils . isEmpty ( org.springframework.integration.gateway.GatewayMethodMetadata . getHeaderExpressions ( ) ) ) { java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> . putAll ( org.springframework.integration.gateway.GatewayMethodMetadata . getHeaderExpressions ( ) ) ; } java.lang.String = org.springframework.integration.gateway.GatewayMethodMetadata . getRequestChannelName ( ) ; java.lang.String = org.springframework.integration.gateway.GatewayMethodMetadata . getReplyChannelName ( ) ; java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayMethodMetadata . getRequestTimeout ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.Long = this . java.lang.Long ( java.lang.String , java.lang.Long .class ) ; } java.lang.String java.lang.String = org.springframework.integration.gateway.GatewayMethodMetadata . getReplyTimeout ( ) ; if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.Long = this . java.lang.Long ( java.lang.String , java.lang.Long .class ) ; } } } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = null ; java.lang.Object java.lang.Object = this . org.springframework.integration.gateway.MessageChannel == null ? this . java.lang.String : this . org.springframework.integration.gateway.MessageChannel ; if ( java.lang.Object != null && java.lang.reflect.Method . java.lang.Class<?> ( ) . boolean ( void .class ) ) { java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( MessageHeaders . ERROR_CHANNEL , java.lang.Object ) ; } GatewayMethodInboundMessageMapper org.springframework.integration.gateway.GatewayMethodInboundMessageMapper = new GatewayMethodInboundMessageMapper ( java.lang.reflect.Method , java.util.Map<java.lang.String,org.springframework.integration.gateway.Expression> , this . org.springframework.integration.gateway.GatewayMethodMetadata != null ? this . org.springframework.integration.gateway.GatewayMethodMetadata . getHeaderExpressions ( ) : null , java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.integration.gateway.MethodArgsMessageMapper , this . getMessageBuilderFactory ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.gateway.GatewayMethodInboundMessageMapper . setPayloadExpression ( java.lang.String ) ; } org.springframework.integration.gateway.GatewayMethodInboundMessageMapper . setBeanFactory ( this . getBeanFactory ( ) ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway = new org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper ) ; if ( this . org.springframework.integration.gateway.MessageChannel != null ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setErrorChannel ( this . org.springframework.integration.gateway.MessageChannel ) ; } else if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setErrorChannelName ( this . java.lang.String ) ; } if ( this . getTaskScheduler ( ) != null ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setTaskScheduler ( this . getTaskScheduler ( ) ) ; } org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setBeanName ( this . getComponentName ( ) ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setRequestChannelName ( java.lang.String ) ; } else if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setRequestChannelName ( this . java.lang.String ) ; } else { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setRequestChannel ( this . org.springframework.integration.gateway.MessageChannel ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setReplyChannelName ( java.lang.String ) ; } else if ( StringUtils . hasText ( this . java.lang.String ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setReplyChannelName ( this . java.lang.String ) ; } else { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setReplyChannel ( this . org.springframework.integration.gateway.MessageChannel ) ; } if ( java.lang.Long == null ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setRequestTimeout ( - NUMBER ) ; } else { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setRequestTimeout ( java.lang.Long ) ; } if ( java.lang.Long == null ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setReplyTimeout ( - NUMBER ) ; } else { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setReplyTimeout ( java.lang.Long ) ; } if ( this . getBeanFactory ( ) != null ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setBeanFactory ( this . getBeanFactory ( ) ) ; } org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . setShouldTrack ( this . boolean ) ; org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . afterPropertiesSet ( ) ; return org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway : this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> . java.util.Collection<org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ( ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . start ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { for ( org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway : this . java.util.Map<java.lang.reflect.Method,org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> . java.util.Collection<org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway> ( ) ) { org.springframework.integration.gateway.GatewayProxyFactoryBean.MethodInvocationGateway . stop ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > T T ( java.lang.Object java.lang.Object , java.lang.Class<T> < T > java.lang.Class<T> ) { if ( java.util.concurrent.Future .class . boolean ( java.lang.Class<T> ) ) { return ( T ) java.lang.Object ; } if ( Mono .class . boolean ( java.lang.Class<T> ) ) { return ( T ) java.lang.Object ; } if ( getConversionService ( ) != null ) { return getConversionService ( ) . convert ( java.lang.Object , java.lang.Class<T> ) ; } else { return this . org.springframework.integration.gateway.TypeConverter . convertIfNecessary ( java.lang.Object , java.lang.Class<T> ) ; } }  <METHOD_END>
<METHOD_START> private static boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method , boolean boolean ) { if ( ! boolean && ( java.util.concurrent.Future .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) || Mono .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Method . java.lang.reflect.Type ( ) ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type [] java.lang.reflect.Type[] = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type[] ( ) ; if ( java.lang.reflect.Type[] != null && java.lang.reflect.Type[] . int == NUMBER ) { java.lang.reflect.Type java.lang.reflect.Type = java.lang.reflect.Type[] [ NUMBER ] ; if ( java.lang.reflect.Type instanceof java.lang.reflect.ParameterizedType ) { java.lang.reflect.Type java.lang.reflect.Type = ( ( java.lang.reflect.ParameterizedType ) java.lang.reflect.Type ) . java.lang.reflect.Type ( ) ; if ( java.lang.reflect.Type instanceof java.lang.Class ) { return Message .class . boolean ( ( java.lang.Class<?> < ? > ) java.lang.reflect.Type ) ; } } } } } return false ; }  <METHOD_END>
<METHOD_START> void ( GatewayMethodInboundMessageMapper org.springframework.integration.gateway.GatewayMethodInboundMessageMapper ) { this . setRequestMapper ( org.springframework.integration.gateway.GatewayMethodInboundMessageMapper ) ; }  <METHOD_END>
<METHOD_START> void ( MethodInvocation org.springframework.integration.gateway.MethodInvocation ) { this . org.springframework.integration.gateway.MethodInvocation = org.springframework.integration.gateway.MethodInvocation ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { try { return java.lang.Object ( this . org.springframework.integration.gateway.MethodInvocation , false ) ; } catch ( java.lang.Error java.lang.Error ) { throw java.lang.Error ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { throw ( java.lang.RuntimeException ) java.lang.Throwable ; } throw new MessagingException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
