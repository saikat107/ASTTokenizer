<METHOD_START> @ java.lang.Override public boolean boolean ( ResolvableType org.springframework.boot.context.logging.ResolvableType ) { return boolean ( org.springframework.boot.context.logging.ResolvableType . getRawClass ( ) , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return boolean ( java.lang.Class<> , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { if ( java.lang.Class<> != null ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { if ( java.lang.Class<> . boolean ( java.lang.Class<> ) ) { return true ; } } } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEvent org.springframework.boot.context.logging.ApplicationEvent ) { if ( org.springframework.boot.context.logging.ApplicationEvent instanceof ApplicationStartingEvent ) { void ( ( ApplicationStartingEvent ) org.springframework.boot.context.logging.ApplicationEvent ) ; } else if ( org.springframework.boot.context.logging.ApplicationEvent instanceof ApplicationEnvironmentPreparedEvent ) { void ( ( ApplicationEnvironmentPreparedEvent ) org.springframework.boot.context.logging.ApplicationEvent ) ; } else if ( org.springframework.boot.context.logging.ApplicationEvent instanceof ApplicationPreparedEvent ) { void ( ( ApplicationPreparedEvent ) org.springframework.boot.context.logging.ApplicationEvent ) ; } else if ( org.springframework.boot.context.logging.ApplicationEvent instanceof ContextClosedEvent && ( ( ContextClosedEvent ) org.springframework.boot.context.logging.ApplicationEvent ) . getApplicationContext ( ) . getParent ( ) == null ) { void ( ) ; } else if ( org.springframework.boot.context.logging.ApplicationEvent instanceof ApplicationFailedEvent ) { void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ApplicationStartingEvent org.springframework.boot.context.logging.ApplicationStartingEvent ) { this . org.springframework.boot.context.logging.LoggingSystem = LoggingSystem . get ( org.springframework.boot.context.logging.ApplicationStartingEvent . getSpringApplication ( ) . getClassLoader ( ) ) ; this . org.springframework.boot.context.logging.LoggingSystem . beforeInitialize ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationEnvironmentPreparedEvent org.springframework.boot.context.logging.ApplicationEnvironmentPreparedEvent ) { if ( this . org.springframework.boot.context.logging.LoggingSystem == null ) { this . org.springframework.boot.context.logging.LoggingSystem = LoggingSystem . get ( org.springframework.boot.context.logging.ApplicationEnvironmentPreparedEvent . getSpringApplication ( ) . getClassLoader ( ) ) ; } void ( org.springframework.boot.context.logging.ApplicationEnvironmentPreparedEvent . getEnvironment ( ) , org.springframework.boot.context.logging.ApplicationEnvironmentPreparedEvent . getSpringApplication ( ) . getClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ApplicationPreparedEvent org.springframework.boot.context.logging.ApplicationPreparedEvent ) { ConfigurableListableBeanFactory org.springframework.boot.context.logging.ConfigurableListableBeanFactory = org.springframework.boot.context.logging.ApplicationPreparedEvent . getApplicationContext ( ) . getBeanFactory ( ) ; if ( ! org.springframework.boot.context.logging.ConfigurableListableBeanFactory . containsBean ( java.lang.String ) ) { org.springframework.boot.context.logging.ConfigurableListableBeanFactory . registerSingleton ( java.lang.String , this . org.springframework.boot.context.logging.LoggingSystem ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.boot.context.logging.LoggingSystem != null ) { this . org.springframework.boot.context.logging.LoggingSystem . cleanUp ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . org.springframework.boot.context.logging.LoggingSystem != null ) { this . org.springframework.boot.context.logging.LoggingSystem . cleanUp ( ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( ConfigurableEnvironment org.springframework.boot.context.logging.ConfigurableEnvironment , java.lang.ClassLoader java.lang.ClassLoader ) { new LoggingSystemProperties ( org.springframework.boot.context.logging.ConfigurableEnvironment ) . apply ( ) ; LogFile org.springframework.boot.context.logging.LogFile = LogFile . get ( org.springframework.boot.context.logging.ConfigurableEnvironment ) ; if ( org.springframework.boot.context.logging.LogFile != null ) { org.springframework.boot.context.logging.LogFile . applyToSystemProperties ( ) ; } void ( org.springframework.boot.context.logging.ConfigurableEnvironment ) ; void ( org.springframework.boot.context.logging.ConfigurableEnvironment , this . org.springframework.boot.context.logging.LoggingSystem , org.springframework.boot.context.logging.LogFile ) ; void ( org.springframework.boot.context.logging.ConfigurableEnvironment , this . org.springframework.boot.context.logging.LoggingSystem ) ; void ( org.springframework.boot.context.logging.ConfigurableEnvironment , this . org.springframework.boot.context.logging.LoggingSystem ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.context.logging.ConfigurableEnvironment ) { if ( this . boolean && this . org.springframework.boot.context.logging.LogLevel == null ) { if ( boolean ( org.springframework.boot.context.logging.ConfigurableEnvironment , STRING ) ) { this . org.springframework.boot.context.logging.LogLevel = LogLevel . DEBUG ; } if ( boolean ( org.springframework.boot.context.logging.ConfigurableEnvironment , STRING ) ) { this . org.springframework.boot.context.logging.LogLevel = LogLevel . TRACE ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableEnvironment org.springframework.boot.context.logging.ConfigurableEnvironment , java.lang.String java.lang.String ) { java.lang.String java.lang.String = org.springframework.boot.context.logging.ConfigurableEnvironment . getProperty ( java.lang.String ) ; return ( java.lang.String != null && ! java.lang.String . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.context.logging.ConfigurableEnvironment , LoggingSystem org.springframework.boot.context.logging.LoggingSystem , LogFile org.springframework.boot.context.logging.LogFile ) { LoggingInitializationContext org.springframework.boot.context.logging.LoggingInitializationContext = new LoggingInitializationContext ( org.springframework.boot.context.logging.ConfigurableEnvironment ) ; java.lang.String java.lang.String = org.springframework.boot.context.logging.ConfigurableEnvironment . getProperty ( java.lang.String ) ; if ( boolean ( java.lang.String ) ) { org.springframework.boot.context.logging.LoggingSystem . initialize ( org.springframework.boot.context.logging.LoggingInitializationContext , null , org.springframework.boot.context.logging.LogFile ) ; } else { try { ResourceUtils . getURL ( java.lang.String ) . openStream ( ) . close ( ) ; org.springframework.boot.context.logging.LoggingSystem . initialize ( org.springframework.boot.context.logging.LoggingInitializationContext , java.lang.String , org.springframework.boot.context.logging.LogFile ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.System . java.io.PrintStream . void ( STRING + STRING + java.lang.String + STRING ) ; java.lang.Exception . void ( java.lang.System . java.io.PrintStream ) ; throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.String java.lang.String ) { return ! StringUtils . hasLength ( java.lang.String ) || java.lang.String . boolean ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableEnvironment org.springframework.boot.context.logging.ConfigurableEnvironment , LoggingSystem org.springframework.boot.context.logging.LoggingSystem ) { if ( this . org.springframework.boot.context.logging.LogLevel != null ) { void ( org.springframework.boot.context.logging.LoggingSystem , this . org.springframework.boot.context.logging.LogLevel ) ; } void ( org.springframework.boot.context.logging.LoggingSystem , org.springframework.boot.context.logging.ConfigurableEnvironment ) ; }  <METHOD_END>
<METHOD_START> protected void void ( LoggingSystem org.springframework.boot.context.logging.LoggingSystem , LogLevel org.springframework.boot.context.logging.LogLevel ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.boot.context.logging.MultiValueMap<org.springframework.boot.context.logging.LogLevel,java.lang.String> . get ( org.springframework.boot.context.logging.LogLevel ) ; if ( java.util.List<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.List<java.lang.String> ) { org.springframework.boot.context.logging.LoggingSystem . setLogLevel ( java.lang.String , org.springframework.boot.context.logging.LogLevel ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( LoggingSystem org.springframework.boot.context.logging.LoggingSystem , Environment org.springframework.boot.context.logging.Environment ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new RelaxedPropertyResolver ( org.springframework.boot.context.logging.Environment ) . getSubProperties ( STRING ) ; for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { void ( org.springframework.boot.context.logging.LoggingSystem , org.springframework.boot.context.logging.Environment , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( LoggingSystem org.springframework.boot.context.logging.LoggingSystem , Environment org.springframework.boot.context.logging.Environment , java.lang.String java.lang.String , java.lang.String java.lang.String ) { try { if ( java.lang.String . boolean ( LoggingSystem . ROOT_LOGGER_NAME ) ) { java.lang.String = null ; } java.lang.String = org.springframework.boot.context.logging.Environment . resolvePlaceholders ( java.lang.String ) ; org.springframework.boot.context.logging.LoggingSystem . setLogLevel ( java.lang.String , org.springframework.boot.context.logging.LogLevel ( java.lang.String ) ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { this . org.springframework.boot.context.logging.Log . error ( STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.context.logging.LogLevel org.springframework.boot.context.logging.LogLevel ( java.lang.String java.lang.String ) { if ( STRING . boolean ( java.lang.String ) ) { return LogLevel . OFF ; } return LogLevel . valueOf ( java.lang.String . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Environment org.springframework.boot.context.logging.Environment , LoggingSystem org.springframework.boot.context.logging.LoggingSystem ) { boolean boolean = new RelaxedPropertyResolver ( org.springframework.boot.context.logging.Environment ) . getProperty ( java.lang.String , java.lang.Boolean .class , false ) ; if ( boolean ) { java.lang.Runnable java.lang.Runnable = org.springframework.boot.context.logging.LoggingSystem . getShutdownHandler ( ) ; if ( java.lang.Runnable != null && java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ) { void ( new java.lang.Thread ( java.lang.Runnable ) ) ; } } }  <METHOD_END>
<METHOD_START> void void ( java.lang.Thread java.lang.Thread ) { java.lang.Runtime . java.lang.Runtime ( ) . void ( java.lang.Thread ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public void void ( LogLevel org.springframework.boot.context.logging.LogLevel ) { this . org.springframework.boot.context.logging.LogLevel = org.springframework.boot.context.logging.LogLevel ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
