<METHOD_START> public void ( JpaQueryMethod org.springframework.data.jpa.repository.query.JpaQueryMethod , EntityManager org.springframework.data.jpa.repository.query.EntityManager , java.lang.String java.lang.String , EvaluationContextProvider org.springframework.data.jpa.repository.query.EvaluationContextProvider , SpelExpressionParser org.springframework.data.jpa.repository.query.SpelExpressionParser ) { super( org.springframework.data.jpa.repository.query.JpaQueryMethod , org.springframework.data.jpa.repository.query.EntityManager , java.lang.String , org.springframework.data.jpa.repository.query.EvaluationContextProvider , org.springframework.data.jpa.repository.query.SpelExpressionParser ); Parameters < ? , ? > org.springframework.data.jpa.repository.query.Parameters<?,?> = org.springframework.data.jpa.repository.query.JpaQueryMethod . getParameters ( ) ; boolean boolean = org.springframework.data.jpa.repository.query.Parameters<,> . hasPageableParameter ( ) || org.springframework.data.jpa.repository.query.Parameters<,> . hasSortParameter ( ) ; boolean boolean = java.lang.String . boolean ( STRING ) || java.lang.String . boolean ( STRING ) ; if ( boolean && ! boolean ) { throw new InvalidJpaQueryMethodException ( STRING + org.springframework.data.jpa.repository.query.JpaQueryMethod ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.jpa.repository.query.Query org.springframework.data.jpa.repository.query.Query ( java.lang.String java.lang.String ) { return getQueryMethod ( ) . isQueryForEntity ( ) ? getEntityManager ( ) . createNativeQuery ( java.lang.String , getQueryMethod ( ) . getReturnedObjectType ( ) ) : getEntityManager ( ) . createNativeQuery ( java.lang.String ) ; }  <METHOD_END>
