<METHOD_START> public void ( HttpMethod org.springframework.http.client.reactive.HttpMethod , java.net.URI java.net.URI , HttpClientRequest org.springframework.http.client.reactive.HttpClientRequest ) { this . org.springframework.http.client.reactive.HttpMethod = org.springframework.http.client.reactive.HttpMethod ; this . java.net.URI = java.net.URI ; this . org.springframework.http.client.reactive.HttpClientRequest = org.springframework.http.client.reactive.HttpClientRequest . failOnClientError ( false ) ; this . org.springframework.http.client.reactive.NettyDataBufferFactory = new NettyDataBufferFactory ( org.springframework.http.client.reactive.HttpClientRequest . alloc ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.DataBufferFactory org.springframework.http.client.reactive.DataBufferFactory ( ) { return this . org.springframework.http.client.reactive.NettyDataBufferFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.HttpMethod org.springframework.http.client.reactive.HttpMethod ( ) { return this . org.springframework.http.client.reactive.HttpMethod ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { return this . java.net.URI ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( Publisher < ? extends DataBuffer > org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.DataBuffer> ) { return doCommit ( ( ) this . httpRequest . send ( Flux . from ( body ) . map ( NettyDataBufferFactory :: toByteBuf ) ) . then ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( Publisher < ? extends Publisher < ? extends DataBuffer > > org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.DataBuffer>> ) { Publisher < Publisher < ByteBuf > > org.springframework.http.client.reactive.Publisher<org.springframework.http.client.reactive.Publisher<org.springframework.http.client.reactive.ByteBuf>> = Flux . from ( org.springframework.http.client.reactive.Publisher<> ) . map ( org.springframework.http.client.reactive.ReactorClientHttpRequest :: org.springframework.http.client.reactive.Publisher<org.springframework.http.client.reactive.ByteBuf> ) ; return doCommit ( ( ) this . httpRequest . sendGroups ( byteBufs ) . then ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.client.reactive.Publisher<org.springframework.http.client.reactive.ByteBuf> < ByteBuf > org.springframework.http.client.reactive.Publisher<org.springframework.http.client.reactive.ByteBuf> ( Publisher < ? extends DataBuffer > org.springframework.http.client.reactive.Publisher<? extends org.springframework.http.client.reactive.DataBuffer> ) { return Flux . from ( org.springframework.http.client.reactive.Publisher<> ) . map ( NettyDataBufferFactory :: toByteBuf ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.http.client.reactive.Mono<java.lang.Void> ( ) { return doCommit ( ( ) httpRequest . sendHeaders ( ) . then ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { getHeaders ( ) . entrySet ( ) . forEach ( e -> this . httpRequest . requestHeaders ( ) . set ( e . getKey ( ) , e . getValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { getCookies ( ) . values ( ) . stream ( ) . flatMap ( java.util.Collection :: stream ) . map ( cookie -> new DefaultCookie ( cookie . getName ( ) , cookie . getValue ( ) ) ) . forEach ( this . org.springframework.http.client.reactive.HttpClientRequest :: addCookie ) ; }  <METHOD_END>
