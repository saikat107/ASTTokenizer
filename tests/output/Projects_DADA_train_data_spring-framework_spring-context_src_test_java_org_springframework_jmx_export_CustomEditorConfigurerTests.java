<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { javax.management.ObjectName javax.management.ObjectName = new javax.management.ObjectName ( STRING ) ; java.util.Date java.util.Date = ( java.util.Date ) getServer ( ) . getAttribute ( javax.management.ObjectName , STRING ) ; java.util.Date java.util.Date = ( java.util.Date ) getServer ( ) . getAttribute ( javax.management.ObjectName , STRING ) ; assertEquals ( STRING , java.util.Date ( ) , java.util.Date ) ; assertEquals ( STRING , java.util.Date ( ) , java.util.Date ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { DateRange org.springframework.jmx.export.DateRange = ( DateRange ) getContext ( ) . getBean ( STRING ) ; assertEquals ( STRING , java.util.Date ( ) , org.springframework.jmx.export.DateRange . getStartDate ( ) ) ; assertEquals ( STRING , java.util.Date ( ) , org.springframework.jmx.export.DateRange . getEndDate ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Date java.util.Date ( ) java.text.ParseException { java.util.Date java.util.Date = java.text.SimpleDateFormat . java.util.Date ( STRING ) ; return java.util.Date ; }  <METHOD_END>
<METHOD_START> private java.util.Date java.util.Date ( ) java.text.ParseException { java.util.Date java.util.Date = java.text.SimpleDateFormat . java.util.Date ( STRING ) ; return java.util.Date ; }  <METHOD_END>
