<METHOD_START> public void ( ) { this( null , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this( java.lang.ClassLoader , java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader , java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.xml.NamespaceHandler org.springframework.beans.factory.xml.NamespaceHandler ( java.lang.String java.lang.String ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ( ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String ) ; if ( java.lang.Object == null ) { return null ; } else if ( java.lang.Object instanceof NamespaceHandler ) { return ( NamespaceHandler ) java.lang.Object ; } else { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; try { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . forName ( java.lang.String , this . java.lang.ClassLoader ) ; if ( ! NamespaceHandler .class . boolean ( java.lang.Class<> ) ) { throw new FatalBeanException ( STRING + java.lang.String + STRING + java.lang.String + STRING + NamespaceHandler .class . java.lang.String ( ) + STRING ) ; } NamespaceHandler org.springframework.beans.factory.xml.NamespaceHandler = ( NamespaceHandler ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; org.springframework.beans.factory.xml.NamespaceHandler . init ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.lang.String , org.springframework.beans.factory.xml.NamespaceHandler ) ; return org.springframework.beans.factory.xml.NamespaceHandler ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new FatalBeanException ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.ClassNotFoundException ) ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { throw new FatalBeanException ( STRING + java.lang.String + STRING + java.lang.String + STRING , java.lang.LinkageError ) ; } } }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { synchronized ( this ) { if ( this . java.util.Map<java.lang.String,java.lang.Object> == null ) { try { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadAllProperties ( this . java.lang.String , this . java.lang.ClassLoader ) ; if ( org.springframework.beans.factory.xml.Log . isDebugEnabled ( ) ) { org.springframework.beans.factory.xml.Log . debug ( STRING + java.util.Properties ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.Object> <> ( java.util.Properties . int ( ) ) ; CollectionUtils . mergePropertiesIntoMap ( java.util.Properties , java.util.Map<java.lang.String,java.lang.Object> ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Map<java.lang.String,java.lang.Object> ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING + this . java.lang.String + STRING , java.io.IOException ) ; } } } } return this . java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + java.util.Map<java.lang.String,java.lang.Object> ( ) ; }  <METHOD_END>
