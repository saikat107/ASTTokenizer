<METHOD_START> @ BeforeClass public static void void ( ) { Assume . assumeTrue ( java.lang.System . java.lang.String ( STRING ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.oxm.jibx.JibxMarshaller org.springframework.oxm.jibx.JibxMarshaller ( ) java.lang.Exception { JibxMarshaller org.springframework.oxm.jibx.JibxMarshaller = new JibxMarshaller ( ) ; org.springframework.oxm.jibx.JibxMarshaller . setTargetClass ( Flights .class ) ; org.springframework.oxm.jibx.JibxMarshaller . afterPropertiesSet ( ) ; return org.springframework.oxm.jibx.JibxMarshaller ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { Flights org.springframework.oxm.jibx.Flights = ( Flights ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.jibx.Flights ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.jibx.Flights . sizeFlightList ( ) ) ; void ( org.springframework.oxm.jibx.Flights . getFlight ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { FlightType org.springframework.oxm.jibx.FlightType = ( FlightType ) java.lang.Object ; assertNotNull ( STRING , org.springframework.oxm.jibx.FlightType ) ; assertEquals ( STRING , NUMBER , org.springframework.oxm.jibx.FlightType . getNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.Override public void void ( ) java.lang.Exception { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; unmarshaller . setEncoding ( java.lang.String ) ; javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( java.lang.String ) ) ) ; java.lang.Object java.lang.Object = unmarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; void ( java.lang.Object ) ; FlightType org.springframework.oxm.jibx.FlightType = ( ( Flights ) java.lang.Object ) . getFlight ( NUMBER ) ; assertEquals ( STRING , STRING , org.springframework.oxm.jibx.FlightType . getAirline ( ) ) ; }  <METHOD_END>
