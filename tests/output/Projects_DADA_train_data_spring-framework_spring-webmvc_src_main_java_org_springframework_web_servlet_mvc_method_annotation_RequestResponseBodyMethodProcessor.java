<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , null , java.util.List<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> public void ( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> < HttpMessageConverter < ? > > java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , ContentNegotiationManager org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> ) { super( java.util.List<org.springframework.web.servlet.mvc.method.annotation.HttpMessageConverter<?>> , org.springframework.web.servlet.mvc.method.annotation.ContentNegotiationManager , java.util.List<java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasParameterAnnotation ( RequestBody .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return ( AnnotatedElementUtils . hasAnnotation ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getContainingClass ( ) , ResponseBody .class ) || org.springframework.web.servlet.mvc.method.annotation.MethodParameter . hasMethodAnnotation ( ResponseBody .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , WebDataBinderFactory org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory ) throws java.lang.Exception { org.springframework.web.servlet.mvc.method.annotation.MethodParameter = org.springframework.web.servlet.mvc.method.annotation.MethodParameter . nestedIfOptional ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getNestedGenericParameterType ( ) ) ; java.lang.String java.lang.String = Conventions . getVariableNameForParameter ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; WebDataBinder org.springframework.web.servlet.mvc.method.annotation.WebDataBinder = org.springframework.web.servlet.mvc.method.annotation.WebDataBinderFactory . createBinder ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , java.lang.Object , java.lang.String ) ; if ( java.lang.Object != null ) { validateIfApplicable ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; if ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) . hasErrors ( ) && isBindExceptionRequired ( org.springframework.web.servlet.mvc.method.annotation.WebDataBinder , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) { throw new MethodArgumentNotValidException ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) ) ; } } org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . addAttribute ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , org.springframework.web.servlet.mvc.method.annotation.WebDataBinder . getBindingResult ( ) ) ; return adaptArgumentIfNecessary ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected < T > java.lang.Object java.lang.Object ( NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type java.lang.reflect.Type ) throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotSupportedException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotReadableException { HttpServletRequest org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest = org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest . getNativeRequest ( HttpServletRequest .class ) ; ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest = new ServletServerHttpRequest ( org.springframework.web.servlet.mvc.method.annotation.HttpServletRequest ) ; java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , java.lang.reflect.Type ) ; if ( java.lang.Object == null ) { if ( boolean ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) ) { throw new HttpMessageNotReadableException ( STRING + org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getMethod ( ) . toGenericString ( ) ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter ) { return ( org.springframework.web.servlet.mvc.method.annotation.MethodParameter . getParameterAnnotation ( RequestBody .class ) . required ( ) && ! org.springframework.web.servlet.mvc.method.annotation.MethodParameter . isOptional ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Object java.lang.Object , MethodParameter org.springframework.web.servlet.mvc.method.annotation.MethodParameter , ModelAndViewContainer org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer , NativeWebRequest org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest )			throws java.io.IOException , org.springframework.web.servlet.mvc.method.annotation.HttpMediaTypeNotAcceptableException , org.springframework.web.servlet.mvc.method.annotation.HttpMessageNotWritableException { org.springframework.web.servlet.mvc.method.annotation.ModelAndViewContainer . setRequestHandled ( true ) ; ServletServerHttpRequest org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest = createInputMessage ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; ServletServerHttpResponse org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse = createOutputMessage ( org.springframework.web.servlet.mvc.method.annotation.NativeWebRequest ) ; writeWithMessageConverters ( java.lang.Object , org.springframework.web.servlet.mvc.method.annotation.MethodParameter , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpRequest , org.springframework.web.servlet.mvc.method.annotation.ServletServerHttpResponse ) ; }  <METHOD_END>
