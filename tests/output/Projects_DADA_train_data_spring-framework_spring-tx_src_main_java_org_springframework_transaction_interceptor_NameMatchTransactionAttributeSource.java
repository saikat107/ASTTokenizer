<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> < java.lang.String , TransactionAttribute > java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> < java.lang.String , TransactionAttribute > java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> : java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . getValue ( ) ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.util.Properties java.util.Properties ) { TransactionAttributeEditor org.springframework.transaction.interceptor.TransactionAttributeEditor = new TransactionAttributeEditor ( ) ; java.util.Enumeration<?> < ? > java.util.Enumeration<?> = java.util.Properties . java.util.Enumeration<?> ( ) ; while ( java.util.Enumeration<> . boolean ( ) ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Enumeration<> . nextElement ( ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; org.springframework.transaction.interceptor.TransactionAttributeEditor . setAsText ( java.lang.String ) ; TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = ( TransactionAttribute ) org.springframework.transaction.interceptor.TransactionAttributeEditor . getValue ( ) ; void ( java.lang.String , org.springframework.transaction.interceptor.TransactionAttribute ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.String + STRING + org.springframework.transaction.interceptor.TransactionAttribute + STRING ) ; } this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . put ( java.lang.String , org.springframework.transaction.interceptor.TransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( ! ClassUtils . isUserLevelMethod ( java.lang.reflect.Method ) ) { return null ; } java.lang.String java.lang.String = java.lang.reflect.Method . java.lang.String ( ) ; TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute = this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . get ( java.lang.String ) ; if ( org.springframework.transaction.interceptor.TransactionAttribute == null ) { java.lang.String java.lang.String = null ; for ( java.lang.String java.lang.String : this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . keySet ( ) ) { if ( boolean ( java.lang.String , java.lang.String ) && ( java.lang.String == null || java.lang.String . int ( ) <= java.lang.String . int ( ) ) ) { org.springframework.transaction.interceptor.TransactionAttribute = this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . get ( java.lang.String ) ; java.lang.String = java.lang.String ; } } } return org.springframework.transaction.interceptor.TransactionAttribute ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource ) ) { return false ; } org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource = ( org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> , org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource .class . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource> ( ) . java.lang.String ( ) + STRING + this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ; }  <METHOD_END>
