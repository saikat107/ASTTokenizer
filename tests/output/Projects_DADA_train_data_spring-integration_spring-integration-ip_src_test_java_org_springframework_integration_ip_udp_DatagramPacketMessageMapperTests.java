<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( false , true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean ) throws java.lang.Exception { Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( STRING . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setAckAddress ( STRING ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setAcknowledge ( boolean ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( boolean ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . toMessage ( java.net.DatagramPacket ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; if ( boolean ) { assertEquals ( org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . ACK_ID ) . toString ( ) , org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . getId ( ) . toString ( ) ) ; } assertTrue ( ( ( java.lang.String ) org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) . boolean ( STRING ) ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLookupHost ( false ) ; org.springframework.integration.ip.udp.Message<byte[]> = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . toMessage ( java.net.DatagramPacket ) ; assertEquals ( new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) , new java.lang.String ( org.springframework.integration.ip.udp.Message<byte[]> . getPayload ( ) ) ) ; if ( boolean ) { assertEquals ( org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . ACK_ID ) . toString ( ) , org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . getId ( ) . toString ( ) ) ; } assertFalse ( ( ( java.lang.String ) org.springframework.integration.ip.udp.Message<byte[]> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = MessageBuilder . withPayload ( java.lang.String . byte[] ( ) ) . build ( ) ; DatagramPacketMessageMapper org.springframework.integration.ip.udp.DatagramPacketMessageMapper = new DatagramPacketMessageMapper ( ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setAckAddress ( STRING ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setAcknowledge ( false ) ; org.springframework.integration.ip.udp.DatagramPacketMessageMapper . setLengthCheck ( true ) ; java.net.DatagramPacket java.net.DatagramPacket = org.springframework.integration.ip.udp.DatagramPacketMessageMapper . fromMessage ( org.springframework.integration.ip.udp.Message<byte[]> ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.net.DatagramPacket . byte[] ( ) ) ; int int = NUMBER ; java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; java.net.DatagramPacket . void ( new java.net.InetSocketAddress ( STRING , NUMBER ) ) ; try { org.springframework.integration.ip.udp.DatagramPacketMessageMapper . toMessage ( java.net.DatagramPacket ) ; fail ( STRING ) ; } catch ( MessageMappingException org.springframework.integration.ip.udp.MessageMappingException ) { assertTrue ( org.springframework.integration.ip.udp.MessageMappingException . getMessage ( ) . contains ( STRING + ( int + NUMBER ) + STRING + ( java.lang.String . int ( ) + NUMBER ) ) ) ; } }  <METHOD_END>
