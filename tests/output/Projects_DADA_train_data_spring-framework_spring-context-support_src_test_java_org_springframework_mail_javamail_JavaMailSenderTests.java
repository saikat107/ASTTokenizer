<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException , java.io.IOException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPort ( NUMBER ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setFrom ( STRING ) ; org.springframework.mail.javamail.SimpleMailMessage . setReplyTo ( STRING ) ; org.springframework.mail.javamail.SimpleMailMessage . setTo ( STRING ) ; org.springframework.mail.javamail.SimpleMailMessage . setCc ( new java.lang.String [] { STRING , STRING } ) ; org.springframework.mail.javamail.SimpleMailMessage . setBcc ( new java.lang.String [] { STRING , STRING } ) ; java.util.Date java.util.Date = new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER ) . java.util.Date ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setSentDate ( java.util.Date ) ; org.springframework.mail.javamail.SimpleMailMessage . setSubject ( STRING ) ; org.springframework.mail.javamail.SimpleMailMessage . setText ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . int ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getFrom ( ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getReplyTo ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getRecipients ( Message . RecipientType . TO ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getRecipients ( Message . RecipientType . CC ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getRecipients ( Message . RecipientType . BCC ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; assertEquals ( java.util.Date . long ( ) , org.springframework.mail.javamail.MimeMessage . getSentDate ( ) . getTime ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.MimeMessage . getSubject ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.MimeMessage . getContent ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.mail.javamail.MessagingException , java.io.IOException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setTo ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setTo ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage , org.springframework.mail.javamail.SimpleMailMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getRecipients ( Message . RecipientType . TO ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ; java.util.List<org.springframework.mail.javamail.Address> < Address > java.util.List<org.springframework.mail.javamail.Address> = java.util.Arrays . java.util.List ( org.springframework.mail.javamail.MimeMessage . getRecipients ( Message . RecipientType . TO ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.mail.javamail.Address> . size ( ) ) ; assertEquals ( STRING , ( ( InternetAddress ) java.util.List<org.springframework.mail.javamail.Address> . get ( NUMBER ) ) . getAddress ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.MimeMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; final java.util.List<org.springframework.mail.javamail.Message> < Message > java.util.List<org.springframework.mail.javamail.Message> = new java.util.ArrayList<org.springframework.mail.javamail.Message> <> ( ) ; MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator = new MimeMessagePreparator ( ) { @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; } } ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessagePreparator ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( java.util.List<org.springframework.mail.javamail.Message> . get ( NUMBER ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; final java.util.List<org.springframework.mail.javamail.Message> < Message > java.util.List<org.springframework.mail.javamail.Message> = new java.util.ArrayList<org.springframework.mail.javamail.Message> <> ( ) ; MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator = new MimeMessagePreparator ( ) { @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; } } ; MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator = new MimeMessagePreparator ( ) { @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; } } ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessagePreparator , org.springframework.mail.javamail.MimeMessagePreparator ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( java.util.List<org.springframework.mail.javamail.Message> . get ( NUMBER ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; assertEquals ( java.util.List<org.springframework.mail.javamail.Message> . get ( NUMBER ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.MimeMessage ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessageHelper org.springframework.mail.javamail.MimeMessageHelper = new MimeMessageHelper ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ) ; assertNull ( org.springframework.mail.javamail.MimeMessageHelper . getEncoding ( ) ) ; assertTrue ( org.springframework.mail.javamail.MimeMessageHelper . getFileTypeMap ( ) instanceof ConfigurableMimeFileTypeMap ) ; org.springframework.mail.javamail.MimeMessageHelper . setTo ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessageHelper org.springframework.mail.javamail.MimeMessageHelper = new MimeMessageHelper ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) , STRING ) ; assertEquals ( STRING , org.springframework.mail.javamail.MimeMessageHelper . getEncoding ( ) ) ; javax.activation.FileTypeMap javax.activation.FileTypeMap = new ConfigurableMimeFileTypeMap ( ) ; org.springframework.mail.javamail.MimeMessageHelper . setFileTypeMap ( javax.activation.FileTypeMap ) ; assertEquals ( javax.activation.FileTypeMap , org.springframework.mail.javamail.MimeMessageHelper . getFileTypeMap ( ) ) ; org.springframework.mail.javamail.MimeMessageHelper . setTo ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setDefaultEncoding ( STRING ) ; javax.activation.FileTypeMap javax.activation.FileTypeMap = new ConfigurableMimeFileTypeMap ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setDefaultFileTypeMap ( javax.activation.FileTypeMap ) ; MimeMessageHelper org.springframework.mail.javamail.MimeMessageHelper = new MimeMessageHelper ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.MimeMessageHelper . getEncoding ( ) ) ; assertEquals ( javax.activation.FileTypeMap , org.springframework.mail.javamail.MimeMessageHelper . getFileTypeMap ( ) ) ; org.springframework.mail.javamail.MimeMessageHelper . setTo ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessageHelper . getMimeMessage ( ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setFrom ( STRING ) ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage ) ; } catch ( MailParseException org.springframework.mail.javamail.MailParseException ) { assertTrue ( org.springframework.mail.javamail.MailParseException . getCause ( ) instanceof AddressException ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; MimeMessagePreparator org.springframework.mail.javamail.MimeMessagePreparator = new MimeMessagePreparator ( ) { @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setFrom ( new InternetAddress ( STRING ) ) ; } } ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessagePreparator ) ; } catch ( MailParseException org.springframework.mail.javamail.MailParseException ) { assertTrue ( org.springframework.mail.javamail.MailParseException . getCause ( ) instanceof AddressException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MimeMessage org.springframework.mail.javamail.MimeMessage ) throws org.springframework.mail.javamail.MessagingException { org.springframework.mail.javamail.MimeMessage . setFrom ( new InternetAddress ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { final Session org.springframework.mail.javamail.Session = Session . getInstance ( new java.util.Properties ( ) ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) { @ java.lang.Override protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { assertEquals ( org.springframework.mail.javamail.Session , org.springframework.mail.javamail.Session ) ; return super. org.springframework.mail.javamail.Transport ( org.springframework.mail.javamail.Session ) ; } } ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setSession ( org.springframework.mail.javamail.Session ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setSubject ( STRING ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; org.springframework.mail.javamail.MimeMessage . setSentDate ( new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER ) . java.util.Date ( ) ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { assertEquals ( org.springframework.mail.javamail.Session , org.springframework.mail.javamail.Session ) ; return super. org.springframework.mail.javamail.Transport ( org.springframework.mail.javamail.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.mail.javamail.MessagingException { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) { @ java.lang.Override protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { assertEquals ( STRING , org.springframework.mail.javamail.Session . getProperty ( STRING ) ) ; return super. org.springframework.mail.javamail.Transport ( org.springframework.mail.javamail.Session ) ; } } ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setJavaMailProperties ( java.util.Properties ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessage ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { assertEquals ( STRING , org.springframework.mail.javamail.Session . getProperty ( STRING ) ) ; return super. org.springframework.mail.javamail.Transport ( org.springframework.mail.javamail.Session ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( null ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage ) ; fail ( STRING ) ; } catch ( MailSendException org.springframework.mail.javamail.MailSendException ) { org.springframework.mail.javamail.MailSendException . printStackTrace ( ) ; assertTrue ( org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) != null ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . size ( ) ) ; assertSame ( org.springframework.mail.javamail.SimpleMailMessage , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . keySet ( ) . iterator ( ) . next ( ) ) ; assertSame ( org.springframework.mail.javamail.MailSendException . getCause ( ) , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . values ( ) . iterator ( ) . next ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage ) ; fail ( STRING ) ; } catch ( MailSendException org.springframework.mail.javamail.MailSendException ) { org.springframework.mail.javamail.MailSendException . printStackTrace ( ) ; assertTrue ( org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) != null ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . size ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setTo ( STRING ) ; org.springframework.mail.javamail.SimpleMailMessage . setSubject ( STRING ) ; SimpleMailMessage org.springframework.mail.javamail.SimpleMailMessage = new SimpleMailMessage ( ) ; org.springframework.mail.javamail.SimpleMailMessage . setTo ( STRING ) ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.SimpleMailMessage , org.springframework.mail.javamail.SimpleMailMessage ) ; } catch ( MailSendException org.springframework.mail.javamail.MailSendException ) { org.springframework.mail.javamail.MailSendException . printStackTrace ( ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( new InternetAddress ( STRING ) , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) . getAllRecipients ( ) [ NUMBER ] ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.SimpleMailMessage , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . keySet ( ) . iterator ( ) . next ( ) ) ; java.lang.Object java.lang.Object = org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . values ( ) . iterator ( ) . next ( ) ; assertTrue ( java.lang.Object instanceof MessagingException ) ; assertEquals ( STRING , ( ( MessagingException ) java.lang.Object ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setUsername ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setPassword ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; org.springframework.mail.javamail.MimeMessage . setSubject ( STRING ) ; MimeMessage org.springframework.mail.javamail.MimeMessage = org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . createMimeMessage ( ) ; org.springframework.mail.javamail.MimeMessage . setRecipient ( Message . RecipientType . TO , new InternetAddress ( STRING ) ) ; try { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . send ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.MimeMessage ) ; } catch ( MailSendException org.springframework.mail.javamail.MailSendException ) { org.springframework.mail.javamail.MailSendException . printStackTrace ( ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.lang.String ( ) ) ; assertTrue ( org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . boolean ( ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . java.util.List<org.springframework.mail.javamail.Message> ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport . org.springframework.mail.javamail.MimeMessage ( NUMBER ) ) ; assertEquals ( NUMBER , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . size ( ) ) ; assertEquals ( org.springframework.mail.javamail.MimeMessage , org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . keySet ( ) . iterator ( ) . next ( ) ) ; java.lang.Object java.lang.Object = org.springframework.mail.javamail.MailSendException . getFailedMessages ( ) . values ( ) . iterator ( ) . next ( ) ; assertTrue ( java.lang.Object instanceof MessagingException ) ; assertEquals ( STRING , ( ( MessagingException ) java.lang.Object ) . getMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( STRING ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . testConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender = new org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender ( ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . setHost ( null ) ; org.springframework.mail.javamail.ExpectedException . expect ( MessagingException .class ) ; org.springframework.mail.javamail.JavaMailSenderTests.MockJavaMailSender . testConnection ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.mail.javamail.Transport org.springframework.mail.javamail.Transport ( Session org.springframework.mail.javamail.Session ) throws org.springframework.mail.javamail.NoSuchProviderException { this . org.springframework.mail.javamail.JavaMailSenderTests.MockTransport = new org.springframework.mail.javamail.JavaMailSenderTests.MockTransport ( org.springframework.mail.javamail.Session , null ) ; return org.springframework.mail.javamail.JavaMailSenderTests.MockTransport ; }  <METHOD_END>
<METHOD_START> private void ( Session org.springframework.mail.javamail.Session , URLName org.springframework.mail.javamail.URLName ) { super( org.springframework.mail.javamail.Session , org.springframework.mail.javamail.URLName ); }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return int ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return boolean ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.mail.javamail.Message> < Message > java.util.List<org.springframework.mail.javamail.Message> ( ) { return java.util.List<org.springframework.mail.javamail.Message> ; }  <METHOD_END>
<METHOD_START> public org.springframework.mail.javamail.MimeMessage org.springframework.mail.javamail.MimeMessage ( int int ) { return ( MimeMessage ) this . java.util.List<org.springframework.mail.javamail.Message> . get ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String , java.lang.String java.lang.String ) throws org.springframework.mail.javamail.MessagingException { if ( java.lang.String == null ) { throw new MessagingException ( STRING ) ; } this . java.lang.String = java.lang.String ; this . int = int ; this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; setConnected ( true ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public synchronized void void ( ) org.springframework.mail.javamail.MessagingException { if ( STRING . boolean ( java.lang.String ) ) { throw new MessagingException ( STRING ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message org.springframework.mail.javamail.Message , Address [] org.springframework.mail.javamail.Address[] ) throws org.springframework.mail.javamail.MessagingException { if ( STRING . boolean ( org.springframework.mail.javamail.Message . getSubject ( ) ) ) { throw new MessagingException ( STRING ) ; } if ( ! ObjectUtils . nullSafeEquals ( org.springframework.mail.javamail.Address[] , org.springframework.mail.javamail.Message . getAllRecipients ( ) ) ) { throw new MessagingException ( STRING ) ; } if ( org.springframework.mail.javamail.Message . getSentDate ( ) == null ) { throw new MessagingException ( STRING ) ; } if ( org.springframework.mail.javamail.Message . getSubject ( ) != null && org.springframework.mail.javamail.Message . getSubject ( ) . contains ( STRING ) ) { assertEquals ( new java.util.GregorianCalendar ( NUMBER , NUMBER , NUMBER ) . java.util.Date ( ) , org.springframework.mail.javamail.Message . getSentDate ( ) ) ; } this . java.util.List<org.springframework.mail.javamail.Message> . add ( org.springframework.mail.javamail.Message ) ; }  <METHOD_END>
