<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; HttpEntity < java.lang.String > org.springframework.http.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String ) ; assertSame ( java.lang.String , org.springframework.http.HttpEntity<java.lang.String> . getBody ( ) ) ; assertTrue ( org.springframework.http.HttpEntity<java.lang.String> . getHeaders ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.http.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; java.lang.String java.lang.String = STRING ; HttpEntity < java.lang.String > org.springframework.http.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.http.HttpHeaders ) ; assertEquals ( java.lang.String , org.springframework.http.HttpEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.http.HttpEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.HttpEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; java.lang.String java.lang.String = STRING ; HttpEntity < java.lang.String > org.springframework.http.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ; assertEquals ( java.lang.String , org.springframework.http.HttpEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.http.HttpEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.HttpEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> . set ( STRING , STRING ) ; assertTrue ( new HttpEntity <> ( ) . equals ( new HttpEntity < java.lang.Object > ( ) ) ) ; assertFalse ( new HttpEntity <> ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) . equals ( new HttpEntity < java.lang.Object > ( ) ) ) ; assertFalse ( new HttpEntity <> ( ) . equals ( new HttpEntity < java.lang.Object > ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ) ) ; assertTrue ( new HttpEntity <> ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) . equals ( new HttpEntity < java.lang.Object > ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ) ) ; assertFalse ( new HttpEntity <> ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) . equals ( new HttpEntity < java.lang.Object > ( org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ) ) ; assertTrue ( new HttpEntity < java.lang.String > ( null , null ) . equals ( new HttpEntity < java.lang.String > ( null , null ) ) ) ; assertFalse ( new HttpEntity <> ( STRING , null ) . equals ( new HttpEntity < java.lang.String > ( null , null ) ) ) ; assertFalse ( new HttpEntity < java.lang.String > ( null , null ) . equals ( new HttpEntity <> ( STRING , null ) ) ) ; assertTrue ( new HttpEntity <> ( STRING , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) . equals ( new HttpEntity < java.lang.String > ( STRING , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ) ) ; assertFalse ( new HttpEntity <> ( STRING , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) . equals ( new HttpEntity < java.lang.String > ( STRING , org.springframework.http.MultiValueMap<java.lang.String,java.lang.String> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { HttpHeaders org.springframework.http.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; java.lang.String java.lang.String = STRING ; HttpEntity < java.lang.String > org.springframework.http.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.http.HttpHeaders ) ; ResponseEntity < java.lang.String > org.springframework.http.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , org.springframework.http.HttpHeaders , HttpStatus . OK ) ; ResponseEntity < java.lang.String > org.springframework.http.ResponseEntity<java.lang.String> = new ResponseEntity <> ( java.lang.String , org.springframework.http.HttpHeaders , HttpStatus . OK ) ; assertEquals ( java.lang.String , org.springframework.http.ResponseEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.http.ResponseEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.http.ResponseEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; assertFalse ( org.springframework.http.HttpEntity<java.lang.String> . equals ( org.springframework.http.ResponseEntity<java.lang.String> ) ) ; assertFalse ( org.springframework.http.ResponseEntity<java.lang.String> . equals ( org.springframework.http.HttpEntity<java.lang.String> ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.String> . equals ( org.springframework.http.ResponseEntity<java.lang.String> ) ) ; assertTrue ( org.springframework.http.ResponseEntity<java.lang.String> . equals ( org.springframework.http.ResponseEntity<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders org.springframework.http.HttpHeaders = new HttpHeaders ( ) ; org.springframework.http.HttpHeaders . setContentType ( MediaType . TEXT_PLAIN ) ; java.lang.String java.lang.String = STRING ; HttpEntity < java.lang.String > org.springframework.http.HttpEntity<java.lang.String> = new HttpEntity <> ( java.lang.String , org.springframework.http.HttpHeaders ) ; RequestEntity < java.lang.String > org.springframework.http.RequestEntity<java.lang.String> = new RequestEntity <> ( java.lang.String , org.springframework.http.HttpHeaders , HttpMethod . GET , new java.net.URI ( STRING ) ) ; RequestEntity < java.lang.String > org.springframework.http.RequestEntity<java.lang.String> = new RequestEntity <> ( java.lang.String , org.springframework.http.HttpHeaders , HttpMethod . GET , new java.net.URI ( STRING ) ) ; assertEquals ( java.lang.String , org.springframework.http.RequestEntity<java.lang.String> . getBody ( ) ) ; assertEquals ( MediaType . TEXT_PLAIN , org.springframework.http.RequestEntity<java.lang.String> . getHeaders ( ) . getContentType ( ) ) ; assertEquals ( STRING , org.springframework.http.RequestEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; assertEquals ( STRING , org.springframework.http.RequestEntity<java.lang.String> . getHeaders ( ) . getFirst ( STRING ) ) ; assertFalse ( org.springframework.http.HttpEntity<java.lang.String> . equals ( org.springframework.http.RequestEntity<java.lang.String> ) ) ; assertFalse ( org.springframework.http.RequestEntity<java.lang.String> . equals ( org.springframework.http.HttpEntity<java.lang.String> ) ) ; assertTrue ( org.springframework.http.RequestEntity<java.lang.String> . equals ( org.springframework.http.RequestEntity<java.lang.String> ) ) ; assertTrue ( org.springframework.http.RequestEntity<java.lang.String> . equals ( org.springframework.http.RequestEntity<java.lang.String> ) ) ; }  <METHOD_END>
