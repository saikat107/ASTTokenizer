<METHOD_START> @ java.lang.Override public org.springframework.boot.devtools.remote.client.ConditionOutcome org.springframework.boot.devtools.remote.client.ConditionOutcome ( ConditionContext org.springframework.boot.devtools.remote.client.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.devtools.remote.client.AnnotatedTypeMetadata ) { ConditionMessage . ConditionMessage ConditionMessage.Builder = ConditionMessage . forCondition ( STRING ) ; RelaxedPropertyResolver org.springframework.boot.devtools.remote.client.RelaxedPropertyResolver = new RelaxedPropertyResolver ( org.springframework.boot.devtools.remote.client.ConditionContext . getEnvironment ( ) , STRING ) ; java.lang.Integer java.lang.Integer = org.springframework.boot.devtools.remote.client.RelaxedPropertyResolver . getProperty ( STRING , java.lang.Integer .class ) ; if ( java.lang.Integer == null ) { java.lang.Integer = RemoteDevToolsProperties . Debug . DEFAULT_LOCAL_PORT ; } if ( boolean ( java.lang.Integer ) ) { return ConditionOutcome . match ( ConditionMessage.Builder . foundExactly ( STRING ) ) ; } return ConditionOutcome . noMatch ( ConditionMessage.Builder . didNotFind ( STRING ) . atAll ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( int int ) { try { javax.net.ServerSocketFactory . javax.net.ServerSocketFactory ( ) . java.net.ServerSocket ( int ) . void ( ) ; return true ; } catch ( java.lang.Exception java.lang.Exception ) { return false ; } }  <METHOD_END>
