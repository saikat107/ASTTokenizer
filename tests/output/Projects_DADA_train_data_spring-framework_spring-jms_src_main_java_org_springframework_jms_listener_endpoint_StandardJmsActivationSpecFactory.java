<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> ) { this . java.util.Map<java.lang.String,java.lang.String> = java.util.Map<java.lang.String,java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver org.springframework.jms.listener.endpoint.DestinationResolver ) { this . org.springframework.jms.listener.endpoint.DestinationResolver = org.springframework.jms.listener.endpoint.DestinationResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.jms.listener.endpoint.DestinationResolver org.springframework.jms.listener.endpoint.DestinationResolver ( ) { return org.springframework.jms.listener.endpoint.DestinationResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.listener.endpoint.ActivationSpec org.springframework.jms.listener.endpoint.ActivationSpec ( ResourceAdapter org.springframework.jms.listener.endpoint.ResourceAdapter , JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) { java.lang.Class<?> < ? > java.lang.Class<?> = this . java.lang.Class<> ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = java.lang.Class<?> ( org.springframework.jms.listener.endpoint.ResourceAdapter ) ; if ( java.lang.Class<> == null ) { throw new java.lang.IllegalStateException ( STRING ) ; } } ActivationSpec org.springframework.jms.listener.endpoint.ActivationSpec = ( ActivationSpec ) BeanUtils . instantiateClass ( java.lang.Class<> ) ; BeanWrapper org.springframework.jms.listener.endpoint.BeanWrapper = PropertyAccessorFactory . forBeanPropertyAccess ( org.springframework.jms.listener.endpoint.ActivationSpec ) ; if ( this . java.util.Map<java.lang.String,java.lang.String> != null ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValues ( this . java.util.Map<java.lang.String,java.lang.String> ) ; } void ( org.springframework.jms.listener.endpoint.BeanWrapper , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) ; return org.springframework.jms.listener.endpoint.ActivationSpec ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( ResourceAdapter org.springframework.jms.listener.endpoint.ResourceAdapter ) { return null ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanWrapper org.springframework.jms.listener.endpoint.BeanWrapper , JmsActivationSpecConfig org.springframework.jms.listener.endpoint.JmsActivationSpecConfig ) { java.lang.String java.lang.String = org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getDestinationName ( ) ; boolean boolean = org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . isPubSubDomain ( ) ; java.lang.Object java.lang.Object = java.lang.String ; if ( this . org.springframework.jms.listener.endpoint.DestinationResolver != null ) { try { java.lang.Object = this . org.springframework.jms.listener.endpoint.DestinationResolver . resolveDestinationName ( null , java.lang.String , boolean ) ; } catch ( JMSException org.springframework.jms.listener.endpoint.JMSException ) { throw new DestinationResolutionException ( STRING + java.lang.String + STRING , org.springframework.jms.listener.endpoint.JMSException ) ; } } org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , java.lang.Object ) ; org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , boolean ? Topic .class . java.lang.String ( ) : Queue .class . java.lang.String ( ) ) ; if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . isSubscriptionDurable ( ) ? STRING : STRING ) ; } else if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . isSubscriptionDurable ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Class<> . java.lang.String ( ) ) ; } if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . isSubscriptionShared ( ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getSubscriptionName ( ) != null ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getSubscriptionName ( ) ) ; } if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getClientId ( ) != null ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getClientId ( ) ) ; } if ( org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMessageSelector ( ) != null ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getMessageSelector ( ) ) ; } void ( org.springframework.jms.listener.endpoint.BeanWrapper , org.springframework.jms.listener.endpoint.JmsActivationSpecConfig . getAcknowledgeMode ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanWrapper org.springframework.jms.listener.endpoint.BeanWrapper , int int ) { if ( int == Session . SESSION_TRANSACTED ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } else if ( int == Session . CLIENT_ACKNOWLEDGE ) { throw new java.lang.IllegalArgumentException ( STRING + STRING ) ; } else if ( org.springframework.jms.listener.endpoint.BeanWrapper . isWritableProperty ( STRING ) ) { org.springframework.jms.listener.endpoint.BeanWrapper . setPropertyValue ( STRING , int == Session . DUPS_OK_ACKNOWLEDGE ? STRING : STRING ) ; } else if ( int == Session . DUPS_OK_ACKNOWLEDGE ) { throw new java.lang.IllegalArgumentException ( STRING + this . java.lang.Class<> . java.lang.String ( ) ) ; } }  <METHOD_END>
