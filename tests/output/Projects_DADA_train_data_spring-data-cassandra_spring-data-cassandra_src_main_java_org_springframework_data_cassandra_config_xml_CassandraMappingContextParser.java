<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element ) { return BasicCassandraMappingContext .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.data.cassandra.config.xml.AbstractBeanDefinition , ParserContext org.springframework.data.cassandra.config.xml.ParserContext )			throws org.springframework.data.cassandra.config.xml.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.AbstractBeanDefinition , org.springframework.data.cassandra.config.xml.ParserContext ) ; return ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : DefaultBeanNames . CONTEXT ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.data.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { CassandraMappingXmlBeanFactoryPostProcessorRegistrar . ensureRegistration ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.ParserContext ) ; void ( org.w3c.dom.Element , org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { try { java.util.Set<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Set<java.lang.Class<?>> = CassandraEntityClassScanner . scan ( StringUtils . commaDelimitedListToStringArray ( java.lang.String ) ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Set<java.lang.Class<?>> ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String ) , java.lang.Exception ) ; } } java.util.Set<org.springframework.data.cassandra.config.xml.EntityMapping> < EntityMapping > java.util.Set<org.springframework.data.cassandra.config.xml.EntityMapping> = new java.util.HashSet<org.springframework.data.cassandra.config.xml.EntityMapping> <> ( ) ; DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) . forEach ( entity -> { EntityMapping entityMapping = parseEntity ( entity ) ; if ( entityMapping != null ) { mappings . add ( entityMapping ) ; } } ) ; java.util.List<org.w3c.dom.Element> < org.w3c.dom.Element > java.util.List<org.w3c.dom.Element> = DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Assert . isTrue ( java.util.List<org.w3c.dom.Element> . boolean ( ) , STRING ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } if ( ! java.util.List<org.w3c.dom.Element> . boolean ( ) ) { BeanDefinition org.springframework.data.cassandra.config.xml.BeanDefinition = org.springframework.data.cassandra.config.xml.BeanDefinition ( java.util.List<org.w3c.dom.Element> . org.w3c.dom.Element ( NUMBER ) ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.cassandra.config.xml.BeanDefinition ) ; } Mapping org.springframework.data.cassandra.config.xml.Mapping = new Mapping ( ) ; org.springframework.data.cassandra.config.xml.Mapping . setEntityMappings ( java.util.Set<org.springframework.data.cassandra.config.xml.EntityMapping> ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.data.cassandra.config.xml.Mapping ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.config.xml.EntityMapping org.springframework.data.cassandra.config.xml.EntityMapping ( org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING ) ; org.w3c.dom.Element org.w3c.dom.Element = DomUtils . getChildElementByTagName ( org.w3c.dom.Element , STRING ) ; java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = STRING ; if ( org.w3c.dom.Element != null ) { java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ) ; java.lang.String = java.lang.String . java.lang.String ( java.lang.Boolean . boolean ( org.w3c.dom.Element . java.lang.String ( STRING ) ) ) ; } java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> < java.lang.String , PropertyMapping > java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> = java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> ( org.w3c.dom.Element ) ; EntityMapping org.springframework.data.cassandra.config.xml.EntityMapping = new EntityMapping ( java.lang.String , java.lang.String , java.lang.String ) ; org.springframework.data.cassandra.config.xml.EntityMapping . setPropertyMappings ( java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> ) ; return org.springframework.data.cassandra.config.xml.EntityMapping ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.cassandra.config.xml.BeanDefinition org.springframework.data.cassandra.config.xml.BeanDefinition ( org.w3c.dom.Element org.w3c.dom.Element ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING ) ; java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; BeanDefinitionBuilder org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( SimpleUserTypeResolver .class ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addConstructorArgReference ( StringUtils . hasText ( java.lang.String ) ? java.lang.String : DefaultCqlBeanNames . CLUSTER ) ; org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; return org.springframework.data.cassandra.config.xml.BeanDefinitionBuilder . getBeanDefinition ( ) ; }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> < java.lang.String , PropertyMapping > java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> ( org.w3c.dom.Element org.w3c.dom.Element ) { java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> < java.lang.String , PropertyMapping > java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> = new java.util.HashMap<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> <> ( ) ; for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElementsByTagName ( org.w3c.dom.Element , STRING ) ) { java.lang.String java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; Assert . state ( StringUtils . hasText ( java.lang.String ) , STRING ) ; PropertyMapping org.springframework.data.cassandra.config.xml.PropertyMapping = new PropertyMapping ( java.lang.String ) ; java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.cassandra.config.xml.PropertyMapping . setColumnName ( java.lang.String ) ; } java.lang.String = org.w3c.dom.Element . java.lang.String ( STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.cassandra.config.xml.PropertyMapping . setForceQuote ( java.lang.String ) ; } java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> . put ( org.springframework.data.cassandra.config.xml.PropertyMapping . getPropertyName ( ) , org.springframework.data.cassandra.config.xml.PropertyMapping ) ; } return java.util.Map<java.lang.String,org.springframework.data.cassandra.config.xml.PropertyMapping> ; }  <METHOD_END>
