<METHOD_START> public void ( ProjectionFactory org.springframework.data.projection.ProjectionFactory , MethodInterceptor org.springframework.data.projection.MethodInterceptor ) { Assert . notNull ( org.springframework.data.projection.ProjectionFactory , STRING ) ; Assert . notNull ( org.springframework.data.projection.MethodInterceptor , STRING ) ; this . org.springframework.data.projection.ProjectionFactory = org.springframework.data.projection.ProjectionFactory ; this . org.springframework.data.projection.MethodInterceptor = org.springframework.data.projection.MethodInterceptor ; this . org.springframework.data.projection.ConversionService = new DefaultConversionService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.projection.MethodInvocation ) throws java.lang.Throwable { java.lang.Object java.lang.Object = org.springframework.data.projection.MethodInterceptor . invoke ( org.springframework.data.projection.MethodInvocation ) ; if ( java.lang.Object == null ) { return null ; } TypeInformation < ? > org.springframework.data.projection.TypeInformation<?> = ClassTypeInformation . fromReturnTypeOf ( org.springframework.data.projection.MethodInvocation . getMethod ( ) ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.projection.TypeInformation<> . getType ( ) ; if ( org.springframework.data.projection.TypeInformation<> . isCollectionLike ( ) && ! ClassUtils . isPrimitiveArray ( java.lang.Class<> ) ) { return java.lang.Object ( java.util.Collection<?> ( java.lang.Object ) , org.springframework.data.projection.TypeInformation<> ) ; } else if ( org.springframework.data.projection.TypeInformation<> . isMap ( ) ) { return java.util.Map<java.lang.Object,java.lang.Object> ( ( java.util.Map<?,?> < ? , ? > ) java.lang.Object , org.springframework.data.projection.TypeInformation<> ) ; } else if ( boolean ( java.lang.Object , java.lang.Class<> ) ) { return org.springframework.data.projection.ConversionService . convert ( java.lang.Object , java.lang.Class<> ) ; } else { return java.lang.Object ( java.lang.Object , java.lang.Class<> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.util.Collection<?> < ? > java.util.Collection<?> , TypeInformation < ? > org.springframework.data.projection.TypeInformation<?> ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.projection.TypeInformation<> . getType ( ) ; java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> = CollectionFactory . createCollection ( java.lang.Class<> . boolean ( ) ? java.util.List .class : java.lang.Class<> , java.util.Collection<> . int ( ) ) ; for ( java.lang.Object java.lang.Object : java.util.Collection<> ) { java.util.Collection<java.lang.Object> . boolean ( java.lang.Object ( java.lang.Object , org.springframework.data.projection.TypeInformation<> . getRequiredComponentType ( ) . getType ( ) ) ) ; } if ( java.lang.Class<> . boolean ( ) ) { return java.util.Collection<java.lang.Object> . java.lang.Object[] ( ( java.lang.Object [] ) java.lang.reflect.Array . java.lang.Object ( org.springframework.data.projection.TypeInformation<> . getRequiredComponentType ( ) . getType ( ) , java.util.Collection<java.lang.Object> . int ( ) ) ) ; } return java.util.Collection<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> , TypeInformation < ? > org.springframework.data.projection.TypeInformation<?> ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = CollectionFactory . createMap ( org.springframework.data.projection.TypeInformation<> . getType ( ) , java.util.Map<,> . int ( ) ) ; for ( java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<,> . getKey ( ) , java.lang.Object ( java.util.Map.Entry<,> . getValue ( ) , org.springframework.data.projection.TypeInformation<> . getRequiredMapValueType ( ) . getType ( ) ) ) ; } return java.util.Map<java.lang.Object,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.lang.Object == null || ClassUtils . isAssignable ( java.lang.Class<> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ? java.lang.Object : org.springframework.data.projection.ProjectionFactory . createProjection ( java.lang.Class<> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( java.lang.Object == null || java.lang.Class<> . boolean ( java.lang.Object ) ) { return false ; } return org.springframework.data.projection.ConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Collection<?> < ? > java.util.Collection<?> ( java.lang.Object java.lang.Object ) { Assert . notNull ( java.lang.Object , STRING ) ; if ( java.lang.Object instanceof java.util.Collection ) { return ( java.util.Collection<?> < ? > ) java.lang.Object ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { return java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( java.lang.Object ) ) ; } else { return java.util.Collections . java.util.Set<java.lang.Object> ( java.lang.Object ) ; } }  <METHOD_END>
