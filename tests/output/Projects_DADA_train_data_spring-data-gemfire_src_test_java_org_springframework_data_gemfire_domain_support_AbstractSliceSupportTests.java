<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . getNumberOfElements ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . hasContent ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . getNumberOfElements ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . getNumberOfElements ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . hasContent ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . getNumberOfElements ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( false ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . hasPrevious ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . isFirst ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . hasPrevious ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( true ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . hasPrevious ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . isFirst ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . hasPrevious ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( false ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . hasNext ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . isLast ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( true ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . hasNext ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . isLast ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( null ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . previousPageable ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . getNumber ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . previousPageable ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.gemfire.domain.support.Pageable = mock ( Pageable .class ) ; when ( org.springframework.data.gemfire.domain.support.Pageable . previousOrFirst ( ) ) . thenReturn ( org.springframework.data.gemfire.domain.support.Pageable ) ; doReturn ( org.springframework.data.gemfire.domain.support.Pageable ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . previousPageable ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . getNumber ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . previousPageable ( ) ; verify ( org.springframework.data.gemfire.domain.support.Pageable , times ( NUMBER ) ) . previousOrFirst ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Pageable org.springframework.data.gemfire.domain.support.Pageable = mock ( Pageable .class , STRING ) ; Pageable org.springframework.data.gemfire.domain.support.Pageable = mock ( Pageable .class , STRING ) ; when ( org.springframework.data.gemfire.domain.support.Pageable . previousOrFirst ( ) ) . thenReturn ( org.springframework.data.gemfire.domain.support.Pageable ) ; when ( org.springframework.data.gemfire.domain.support.Pageable . previousOrFirst ( ) ) . thenReturn ( org.springframework.data.gemfire.domain.support.Pageable ) ; doReturn ( org.springframework.data.gemfire.domain.support.Pageable ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . previousPageable ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . getNumber ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . previousPageable ( ) ; verify ( org.springframework.data.gemfire.domain.support.Pageable , times ( NUMBER ) ) . previousOrFirst ( ) ; verify ( org.springframework.data.gemfire.domain.support.Pageable , times ( NUMBER ) ) . previousOrFirst ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.List<?> < ? > java.util.List<?> = mock ( java.util.List .class ) ; when ( java.util.List<> . int ( ) ) . thenReturn ( NUMBER ) ; doReturn ( java.util.List<> ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . getContent ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . getNumberOfElements ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . getContent ( ) ; verify ( java.util.List<> , times ( NUMBER ) ) . size ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { doReturn ( NUMBER ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . getNumberOfElements ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . getSize ( ) ) . isEqualTo ( NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . getNumberOfElements ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { doReturn ( java.util.Arrays . java.util.List<java.lang.Integer> ( NUMBER , NUMBER , NUMBER ) ) . when ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport ) . getContent ( ) ; assertThat ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport . iterator ( ) ) . contains ( NUMBER , NUMBER , NUMBER ) ; verify ( org.springframework.data.gemfire.domain.support.AbstractSliceSupport , times ( NUMBER ) ) . getContent ( ) ; }  <METHOD_END>
