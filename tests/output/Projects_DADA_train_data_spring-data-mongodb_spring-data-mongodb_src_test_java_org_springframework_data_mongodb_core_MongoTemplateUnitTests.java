<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> ) ; when ( org.springframework.data.mongodb.core.MongoDbFactory . getDb ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoDatabase ) ; when ( org.springframework.data.mongodb.core.MongoDbFactory . getExceptionTranslator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoExceptionTranslator ) ; when ( org.springframework.data.mongodb.core.MongoDatabase . getCollection ( Mockito . any ( java.lang.String .class ) , eq ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . find ( Mockito . any ( org . org.bson . org.bson .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; when ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . sort ( Mockito . any ( org . org.bson . org.bson .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; when ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . modifiers ( Mockito . any ( org . org.bson . org.bson .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; this . org.springframework.data.mongodb.core.MongoMappingContext = new MongoMappingContext ( ) ; this . org.springframework.data.mongodb.core.MappingMongoConverter = new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.data.mongodb.core.MongoDbFactory ) , org.springframework.data.mongodb.core.MongoMappingContext ) ; this . org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory , org.springframework.data.mongodb.core.MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new MongoTemplate ( org.springframework.data.mongodb.core.MongoClient , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { new MongoTemplate ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = DataAccessException .class ) public void void ( ) java.lang.Exception { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = org.springframework.data.mongodb.core.MongoTemplate ( ) ; org.springframework.data.mongodb.core.MongoTemplate . remove ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoClient , STRING ) ; assertTrue ( ReflectionTestUtils . getField ( org.springframework.data.mongodb.core.MongoTemplate , STRING ) instanceof MappingMongoConverter ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { GenericApplicationContext org.springframework.data.mongodb.core.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.data.mongodb.core.GenericApplicationContext . refresh ( ) ; org.springframework.data.mongodb.core.MongoTemplate . setApplicationContext ( org.springframework.data.mongodb.core.GenericApplicationContext ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( STRING , STRING , STRING , Person .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { java.lang.Object java.lang.Object = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId ( ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.data.mongodb.core.MappingMongoConverter . afterPropertiesSet ( ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = spy ( this . org.springframework.data.mongodb.core.MongoTemplate ) ; doReturn ( new ObjectId ( ) ) . when ( org.springframework.data.mongodb.core.MongoTemplate ) . saveDocument ( Mockito . any ( java.lang.String .class ) , Mockito . any ( Document .class ) , Mockito . any ( java.lang.Class .class ) ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId ( ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId . java.math.BigInteger , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CustomConversions org.springframework.data.mongodb.core.CustomConversions = new CustomConversions ( java.util.Collections . java.util.List<org.springframework.data.mongodb.core.MongoTemplateUnitTests.MyConverter> ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.MyConverter . org.springframework.data.mongodb.core.MongoTemplateUnitTests.MyConverter ) ) ; this . org.springframework.data.mongodb.core.MappingMongoConverter . setCustomConversions ( org.springframework.data.mongodb.core.CustomConversions ) ; this . org.springframework.data.mongodb.core.MappingMongoConverter . afterPropertiesSet ( ) ; Query org.springframework.data.mongodb.core.Query = new Query ( ) ; Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , new org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; QueryMapper org.springframework.data.mongodb.core.QueryMapper = new QueryMapper ( org.springframework.data.mongodb.core.MappingMongoConverter ) ; Document org.springframework.data.mongodb.core.Document = org.springframework.data.mongodb.core.QueryMapper . getMappedObject ( org.springframework.data.mongodb.core.Update . getUpdateObject ( ) , java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . updateOne ( Mockito . any ( org . org.bson . org.bson .class ) , eq ( org.springframework.data.mongodb.core.Document ) , Mockito . any ( UpdateOptions .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId ( ) ; org.springframework.data.mongodb.core.MongoTemplate . populateIdIfNecessary ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId . java.lang.Integer , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId ( ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplate . populateIdIfNecessary ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.NotAutogenerateableId . java.lang.Integer , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity ( ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; ArgumentCaptor < org . org.bson . org.bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> = ArgumentCaptor . forClass ( org . org.bson . org.bson .class ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( new Query ( ) , new Update ( ) . set ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . findOneAndUpdate ( Matchers . any ( org . org.bson . org.bson .class ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . capture ( ) , Matchers . any ( FindOneAndUpdateOptions .class ) ) ; Assert . assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . getValue ( ) . get ( STRING ) , Is .< java.lang.Object > is ( new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity ( ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; ArgumentCaptor < org . org.bson . org.bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> = ArgumentCaptor . forClass ( org . org.bson . org.bson .class ) ; org.springframework.data.mongodb.core.MongoTemplate . findAndModify ( new Query ( ) , new Update ( ) . set ( STRING , NUMBER ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . findOneAndUpdate ( Matchers . any ( org . org.bson . org.bson .class ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . capture ( ) , Matchers . any ( FindOneAndUpdateOptions .class ) ) ; Assert . assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . getValue ( ) . get ( STRING ) , Is .< java.lang.Object > is ( new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; Assert . assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . getValue ( ) . get ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.data.mongodb.core.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.data.mongodb.core.GenericApplicationContext . getBeanFactory ( ) . registerSingleton ( STRING , new MongoPersistentEntityIndexCreator ( new MongoMappingContext ( ) , org.springframework.data.mongodb.core.MongoTemplate ) ) ; org.springframework.data.mongodb.core.GenericApplicationContext . refresh ( ) ; GenericApplicationContext org.springframework.data.mongodb.core.GenericApplicationContext = spy ( org.springframework.data.mongodb.core.GenericApplicationContext ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory , org.springframework.data.mongodb.core.MappingMongoConverter ) ; org.springframework.data.mongodb.core.MongoTemplate . setApplicationContext ( org.springframework.data.mongodb.core.GenericApplicationContext ) ; verify ( org.springframework.data.mongodb.core.GenericApplicationContext , times ( NUMBER ) ) . addApplicationListener ( argThat ( new ArgumentMatcher < MongoPersistentEntityIndexCreator > ( ) { @ java.lang.Override public boolean boolean ( MongoPersistentEntityIndexCreator org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) { return org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator . isIndexCreatorFor ( org.springframework.data.mongodb.core.MongoMappingContext ) ; } } ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MongoPersistentEntityIndexCreator org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator ) { return org.springframework.data.mongodb.core.MongoPersistentEntityIndexCreator . isIndexCreatorFor ( org.springframework.data.mongodb.core.MongoMappingContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { BasicQuery org.springframework.data.mongodb.core.BasicQuery = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . findAllAndRemove ( org.springframework.data.mongodb.core.BasicQuery , org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . find ( Matchers . eq ( org.springframework.data.mongodb.core.BasicQuery . getQueryObject ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Mockito . when ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . hasNext ( ) ) . thenReturn ( true ) . thenReturn ( true ) . thenReturn ( false ) ; Mockito . when ( org.springframework.data.mongodb.core.MongoCursor<org.springframework.data.mongodb.core.Document> . next ( ) ) . thenReturn ( new org . org.bson . org.bson ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) ) ) . thenReturn ( new org . org.bson . org.bson ( STRING , java.lang.Integer . java.lang.Integer ( NUMBER ) ) ) ; ArgumentCaptor < org . org.bson . org.bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> = ArgumentCaptor . forClass ( org . org.bson . org.bson .class ) ; BasicQuery org.springframework.data.mongodb.core.BasicQuery = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . findAllAndRemove ( org.springframework.data.mongodb.core.BasicQuery , org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . deleteMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . capture ( ) ) ; Document org.springframework.data.mongodb.core.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . getValue ( ) , STRING ) ; assertThat ( ( java.util.List<java.lang.Object> < java.lang.Object > ) org.springframework.data.mongodb.core.Document . get ( STRING ) , IsIterableContainingInOrder .< java.lang.Object > contains ( java.lang.Integer . java.lang.Integer ( NUMBER ) , java.lang.Integer . java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . findAllAndRemove ( new BasicQuery ( STRING ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> , never ( ) ) . deleteMany ( Mockito . any ( org . org.bson . org.bson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = Query . query ( Criteria . where ( STRING ) . is ( STRING ) ) . with ( new Sort ( STRING ) ) ; org.springframework.data.mongodb.core.MongoTemplate . executeQuery ( org.springframework.data.mongodb.core.Query , STRING , new DocumentCallbackHandler ( ) { @ java.lang.Override public void void ( Document org.springframework.data.mongodb.core.Document ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { } } ) ; ArgumentCaptor < org . org.bson . org.bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> = ArgumentCaptor . forClass ( org . org.bson . org.bson .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> , times ( NUMBER ) ) . sort ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.bson.Document> . getValue ( ) , equalTo ( new org . org.bson . org.bson ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Document org.springframework.data.mongodb.core.Document ) throws org.springframework.data.mongodb.core.MongoException , org.springframework.data.mongodb.core.DataAccessException { }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , Mockito . any ( ReadPreference .class ) , eq ( Document .class ) ) ) . thenReturn ( mock ( Document .class ) ) ; org.springframework.data.mongodb.core.MongoTemplate . setReadPreference ( ReadPreference . secondary ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . aggregate ( Aggregation . newAggregation ( Aggregation . unwind ( STRING ) ) , STRING , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( this . org.springframework.data.mongodb.core.MongoDatabase , times ( NUMBER ) ) . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , eq ( ReadPreference . secondary ( ) ) , eq ( Document .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , eq ( org . org.bson . org.bson .class ) ) ) . thenReturn ( mock ( Document .class ) ) ; org.springframework.data.mongodb.core.MongoTemplate . aggregate ( Aggregation . newAggregation ( Aggregation . unwind ( STRING ) ) , STRING , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( this . org.springframework.data.mongodb.core.MongoDatabase , times ( NUMBER ) ) . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , eq ( org . org.bson . org.bson .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , Mockito . any ( ReadPreference .class ) , eq ( Document .class ) ) ) . thenReturn ( mock ( Document .class ) ) ; org.springframework.data.mongodb.core.MongoTemplate . setReadPreference ( ReadPreference . secondary ( ) ) ; NearQuery org.springframework.data.mongodb.core.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . geoNear ( org.springframework.data.mongodb.core.NearQuery , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( this . org.springframework.data.mongodb.core.MongoDatabase , times ( NUMBER ) ) . runCommand ( Mockito . any ( org . org.bson . org.bson .class ) , eq ( ReadPreference . secondary ( ) ) , eq ( Document .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDatabase . runCommand ( Mockito . any ( Document .class ) , eq ( Document .class ) ) ) . thenReturn ( mock ( Document .class ) ) ; NearQuery org.springframework.data.mongodb.core.NearQuery = NearQuery . near ( new Point ( NUMBER , NUMBER ) ) ; org.springframework.data.mongodb.core.MongoTemplate . geoNear ( org.springframework.data.mongodb.core.NearQuery , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( this . org.springframework.data.mongodb.core.MongoDatabase , times ( NUMBER ) ) . runCommand ( Mockito . any ( Document .class ) , eq ( Document .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { MongoCursor org.springframework.data.mongodb.core.MongoCursor = mock ( MongoCursor .class ) ; MapReduceIterable org.springframework.data.mongodb.core.MapReduceIterable = mock ( MapReduceIterable .class ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . limit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . sort ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . filter ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor ) ; when ( org.springframework.data.mongodb.core.MongoCursor . hasNext ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.Query , STRING , STRING , STRING , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( org.springframework.data.mongodb.core.MapReduceIterable , times ( NUMBER ) ) . limit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoCursor org.springframework.data.mongodb.core.MongoCursor = mock ( MongoCursor .class ) ; MapReduceIterable org.springframework.data.mongodb.core.MapReduceIterable = mock ( MapReduceIterable .class ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . limit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . sort ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . filter ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor ) ; when ( org.springframework.data.mongodb.core.MongoCursor . hasNext ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.Query . limit ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.Query , STRING , STRING , STRING , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( org.springframework.data.mongodb.core.MapReduceIterable , times ( NUMBER ) ) . limit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoCursor org.springframework.data.mongodb.core.MongoCursor = mock ( MongoCursor .class ) ; MapReduceIterable org.springframework.data.mongodb.core.MapReduceIterable = mock ( MapReduceIterable .class ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . limit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . sort ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . filter ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor ) ; when ( org.springframework.data.mongodb.core.MongoCursor . hasNext ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.Query , STRING , STRING , STRING , new MapReduceOptions ( ) . limit ( NUMBER ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( org.springframework.data.mongodb.core.MapReduceIterable , times ( NUMBER ) ) . limit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoCursor org.springframework.data.mongodb.core.MongoCursor = mock ( MongoCursor .class ) ; MapReduceIterable org.springframework.data.mongodb.core.MapReduceIterable = mock ( MapReduceIterable .class ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . limit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor ) ; when ( org.springframework.data.mongodb.core.MongoCursor . hasNext ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( STRING , STRING , STRING , new MapReduceOptions ( ) . limit ( NUMBER ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( org.springframework.data.mongodb.core.MapReduceIterable , times ( NUMBER ) ) . limit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MongoCursor org.springframework.data.mongodb.core.MongoCursor = mock ( MongoCursor .class ) ; MapReduceIterable org.springframework.data.mongodb.core.MapReduceIterable = mock ( MapReduceIterable .class ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . limit ( anyInt ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . sort ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . filter ( Mockito . any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; when ( org.springframework.data.mongodb.core.MapReduceIterable . iterator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoCursor ) ; when ( org.springframework.data.mongodb.core.MongoCursor . hasNext ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> . mapReduce ( anyString ( ) , anyString ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.MapReduceIterable ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.Query . limit ( NUMBER ) ; org.springframework.data.mongodb.core.MongoTemplate . mapReduce ( org.springframework.data.mongodb.core.Query , STRING , STRING , STRING , new MapReduceOptions ( ) . limit ( NUMBER ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; verify ( org.springframework.data.mongodb.core.MapReduceIterable , times ( NUMBER ) ) . limit ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity = new org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity ( ) ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity . java.lang.Integer = NUMBER ; GenericApplicationContext org.springframework.data.mongodb.core.GenericApplicationContext = new GenericApplicationContext ( ) ; org.springframework.data.mongodb.core.GenericApplicationContext . refresh ( ) ; org.springframework.data.mongodb.core.GenericApplicationContext . addApplicationListener ( new AbstractMongoEventListener < org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity > ( ) { @ java.lang.Override public void void ( BeforeConvertEvent < org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity > org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity> ) { assertThat ( org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity> . getSource ( ) . version , is ( NUMBER ) ) ; } } ) ; org.springframework.data.mongodb.core.MongoTemplate . setApplicationContext ( org.springframework.data.mongodb.core.GenericApplicationContext ) ; MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = Mockito . spy ( org.springframework.data.mongodb.core.MongoTemplate ) ; UpdateResult org.springframework.data.mongodb.core.UpdateResult = mock ( UpdateResult .class ) ; doReturn ( NUMBER ) . when ( org.springframework.data.mongodb.core.UpdateResult ) . getModifiedCount ( ) ; doReturn ( org.springframework.data.mongodb.core.UpdateResult ) . when ( org.springframework.data.mongodb.core.MongoTemplate ) . doUpdate ( anyString ( ) , Mockito . any ( Query .class ) , Mockito . any ( Update .class ) , Mockito . any ( java.lang.Class .class ) , anyBoolean ( ) , anyBoolean ( ) ) ; org.springframework.data.mongodb.core.MongoTemplate . save ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeforeConvertEvent < org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity > org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity> ) { assertThat ( org.springframework.data.mongodb.core.BeforeConvertEvent<org.springframework.data.mongodb.core.MongoTemplateUnitTests.VersionedEntity> . getSource ( ) . version , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . updateFirst ( new Query ( ) , new Update ( ) . isolated ( ) . set ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateOne ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . notContaining ( STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( new Query ( ) , new Update ( ) . isolated ( ) . set ( STRING , STRING ) , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . withSize ( NUMBER ) . containing ( STRING , NUMBER ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.Update = new Update ( ) . isolated ( ) . set ( STRING , STRING ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . notContaining ( STRING ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.Update = new Update ( ) . set ( STRING , STRING ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.Update = new Update ( ) . isolated ( ) . set ( STRING , STRING ) ; Query org.springframework.data.mongodb.core.Query = new BasicQuery ( STRING ) ; org.springframework.data.mongodb.core.MongoTemplate . updateMulti ( org.springframework.data.mongodb.core.Query , org.springframework.data.mongodb.core.Update , org.springframework.data.mongodb.core.MongoTemplateUnitTests.Wrapper .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; ArgumentCaptor < Bson > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> = ArgumentCaptor . forClass ( Bson .class ) ; verify ( org.springframework.data.mongodb.core.MongoCollection<org.springframework.data.mongodb.core.Document> ) . updateMany ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . capture ( ) , any ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , NUMBER ) . containing ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Bson> . getValue ( ) , isBsonObject ( ) . containing ( STRING , STRING ) . notContaining ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.regex.Pattern java.util.regex.Pattern ( ) { return java.util.regex.Pattern . java.util.regex.Pattern ( STRING ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId ) { return org.springframework.data.mongodb.core.MongoTemplateUnitTests.AutogenerateableId . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.MongoTemplate org.springframework.data.mongodb.core.MongoTemplate ( ) { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = spy ( this . org.springframework.data.mongodb.core.MongoTemplate ) ; when ( org.springframework.data.mongodb.core.MongoTemplate . getDb ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoDatabase ) ; return org.springframework.data.mongodb.core.MongoTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.MongoOperations org.springframework.data.mongodb.core.MongoOperations ( ) { MongoTemplate org.springframework.data.mongodb.core.MongoTemplate = spy ( this . org.springframework.data.mongodb.core.MongoTemplate ) ; when ( org.springframework.data.mongodb.core.MongoTemplate . getDb ( ) ) . thenThrow ( new MongoException ( STRING ) ) ; return org.springframework.data.mongodb.core.MongoTemplate ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.mongodb.core.MongoOperations org.springframework.data.mongodb.core.MongoOperations ( ) { return this . org.springframework.data.mongodb.core.MongoTemplate ; }  <METHOD_END>
