<METHOD_START> public void ( Environment org.springframework.boot.logging.Environment ) { Assert . notNull ( org.springframework.boot.logging.Environment , STRING ) ; this . org.springframework.boot.logging.Environment = org.springframework.boot.logging.Environment ; }  <METHOD_END>
<METHOD_START> public void void ( ) { void ( null ) ; }  <METHOD_END>
<METHOD_START> public void void ( LogFile org.springframework.boot.logging.LogFile ) { RelaxedPropertyResolver org.springframework.boot.logging.RelaxedPropertyResolver = RelaxedPropertyResolver . ignoringUnresolvableNestedPlaceholders ( this . org.springframework.boot.logging.Environment , STRING ) ; void ( org.springframework.boot.logging.RelaxedPropertyResolver , java.lang.String , STRING ) ; void ( org.springframework.boot.logging.RelaxedPropertyResolver , java.lang.String , STRING ) ; void ( org.springframework.boot.logging.RelaxedPropertyResolver , java.lang.String , STRING ) ; void ( org.springframework.boot.logging.RelaxedPropertyResolver , java.lang.String , STRING ) ; void ( java.lang.String , new ApplicationPid ( ) . toString ( ) ) ; if ( org.springframework.boot.logging.LogFile != null ) { org.springframework.boot.logging.LogFile . applyToSystemProperties ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( RelaxedPropertyResolver org.springframework.boot.logging.RelaxedPropertyResolver , java.lang.String java.lang.String , java.lang.String java.lang.String ) { void ( java.lang.String , org.springframework.boot.logging.RelaxedPropertyResolver . getProperty ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( java.lang.System . java.lang.String ( java.lang.String ) == null && java.lang.String != null ) { java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; } }  <METHOD_END>
