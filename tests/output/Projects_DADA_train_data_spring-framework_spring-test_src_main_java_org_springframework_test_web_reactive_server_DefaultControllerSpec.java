<METHOD_START> void ( java.lang.Object ... java.lang.Object[] ) { Assert . isTrue ( ! ObjectUtils . isEmpty ( java.lang.Object[] ) , STRING ) ; this . java.util.List<java.lang.Object> = java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.lang.Object ... java.lang.Object[] ) { this . java.util.List<java.lang.Object> . boolean ( java.util.Arrays . java.util.List<java.lang.Object> ( java.lang.Object[] ) ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> < RequestedContentTypeResolverBuilder > java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> = java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> < CorsRegistry > java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> = java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> < PathMatchConfigurer > java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> = java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> < ServerCodecConfigurer > java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> = java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> < FormatterRegistry > java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> = java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( Validator org.springframework.test.web.reactive.server.Validator ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . org.springframework.test.web.reactive.server.Validator = org.springframework.test.web.reactive.server.Validator ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.test.web.reactive.server.DefaultControllerSpec org.springframework.test.web.reactive.server.DefaultControllerSpec ( java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> < ViewResolverRegistry > java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> ) { this . org.springframework.test.web.reactive.server.DefaultControllerSpec.TestWebFluxConfigurer . java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> = java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.test.web.reactive.server.WebHttpHandlerBuilder org.springframework.test.web.reactive.server.WebHttpHandlerBuilder ( ) { return WebHttpHandlerBuilder . applicationContext ( org.springframework.test.web.reactive.server.ApplicationContext ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.reactive.server.ApplicationContext org.springframework.test.web.reactive.server.ApplicationContext ( ) { AnnotationConfigApplicationContext org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . java.util.List<java.lang.Object> . void ( java.lang.Object -> { java.lang.String java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext . registerBean ( java.lang.String , java.lang.Object .class , ( ) controller ) ; } ) ; this . java.util.List<java.lang.Object> . void ( java.lang.Object -> { java.lang.String java.lang.String = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ; org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext . registerBean ( java.lang.String , java.lang.Object .class , ( ) advice ) ; } ) ; org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext . register ( DelegatingWebFluxConfiguration .class ) ; org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext . registerBean ( WebFluxConfigurer .class , ( ) this . configurer ) ; org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.test.web.reactive.server.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( RequestedContentTypeResolverBuilder org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder> . accept ( org.springframework.test.web.reactive.server.RequestedContentTypeResolverBuilder ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( CorsRegistry org.springframework.test.web.reactive.server.CorsRegistry ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.CorsRegistry> . accept ( org.springframework.test.web.reactive.server.CorsRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PathMatchConfigurer org.springframework.test.web.reactive.server.PathMatchConfigurer ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.PathMatchConfigurer> . accept ( org.springframework.test.web.reactive.server.PathMatchConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerCodecConfigurer org.springframework.test.web.reactive.server.ServerCodecConfigurer ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.ServerCodecConfigurer> . accept ( org.springframework.test.web.reactive.server.ServerCodecConfigurer ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FormatterRegistry org.springframework.test.web.reactive.server.FormatterRegistry ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.FormatterRegistry> . accept ( org.springframework.test.web.reactive.server.FormatterRegistry ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.test.web.reactive.server.Validator> < Validator > java.util.Optional<org.springframework.test.web.reactive.server.Validator> ( ) { return java.util.Optional . java.util.Optional ( this . org.springframework.test.web.reactive.server.Validator ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.test.web.reactive.server.ViewResolverRegistry ) { if ( this . java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> != null ) { this . java.util.function.Consumer<org.springframework.test.web.reactive.server.ViewResolverRegistry> . accept ( org.springframework.test.web.reactive.server.ViewResolverRegistry ) ; } }  <METHOD_END>
