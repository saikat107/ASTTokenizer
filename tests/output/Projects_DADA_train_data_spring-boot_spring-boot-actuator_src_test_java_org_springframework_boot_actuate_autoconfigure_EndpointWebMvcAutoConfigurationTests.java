<METHOD_START> @ Before public void void ( ) { org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports = new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) ; java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . void ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING , STRING , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . close ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; assertThat ( boolean ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ) . isFalse ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( boolean ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ) . isTrue ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( EndpointHandlerMapping .class ) , STRING ) ; assertThat ( java.util.List<> ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificWebServerConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( EndpointHandlerMapping .class ) , STRING ) ; assertThat ( java.util.List<> ) . hasSize ( NUMBER ) ; ServletWebServerFactory org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ServletWebServerFactory .class ) ; ServletWebServerFactory org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory = org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( ServletWebServerFactory .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . isInstanceOf ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificServletWebServerFactory .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . isInstanceOf ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificServletWebServerFactory .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . isNotSameAs ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; ServletContext org.springframework.boot.actuate.autoconfigure.ServletContext = mock ( ServletContext .class ) ; given ( org.springframework.boot.actuate.autoconfigure.ServletContext . getInitParameterNames ( ) ) . willReturn ( new java.util.Vector<java.lang.String> < java.lang.String > ( ) . java.util.Enumeration<java.lang.String> ( ) ) ; given ( org.springframework.boot.actuate.autoconfigure.ServletContext . getAttributeNames ( ) ) . willReturn ( new java.util.Vector<java.lang.String> < java.lang.String > ( ) . java.util.Enumeration<java.lang.String> ( ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . setServletContext ( org.springframework.boot.actuate.autoconfigure.ServletContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.GrabManagementPort org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.GrabManagementPort = new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.GrabManagementPort ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . addApplicationListener ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.GrabManagementPort ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; int int = org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.GrabManagementPort . org.springframework.boot.actuate.autoconfigure.WebServer ( ) . getPort ( ) ; assertThat ( int ) . isNotEqualTo ( java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , int , null ) ; void ( STRING , int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; ApplicationFailedEvent org.springframework.boot.actuate.autoconfigure.ApplicationFailedEvent = mock ( ApplicationFailedEvent .class ) ; given ( org.springframework.boot.actuate.autoconfigure.ApplicationFailedEvent . getApplicationContext ( ) ) . willReturn ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . publishEvent ( org.springframework.boot.actuate.autoconfigure.ApplicationFailedEvent ) ; assertThat ( ( ( ConfigurableApplicationContext ) org.springframework.boot.actuate.autoconfigure.ApplicationContext ) . isActive ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { int int = java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ; java.net.ServerSocket java.net.ServerSocket = new java.net.ServerSocket ( ) ; java.net.ServerSocket . void ( new java.net.InetSocketAddress ( int ) ) ; try { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.ExpectedException . expect ( WebServerException .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; } finally { java.net.ServerSocket . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , PropertyPlaceholderAutoConfiguration .class , JacksonAutoConfiguration .class , ServletWebServerFactoryAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , DispatcherServletAutoConfiguration .class , WebMvcAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , AuditAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , PropertyPlaceholderAutoConfiguration .class , JacksonAutoConfiguration .class , ServletWebServerFactoryAutoConfiguration .class , HttpMessageConvertersAutoConfiguration .class , DispatcherServletAutoConfiguration .class , WebMvcAutoConfiguration .class , EndpointWebMvcAutoConfiguration .class , AuditAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; ServerProperties org.springframework.boot.actuate.autoconfigure.ServerProperties = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ServerProperties .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServerProperties . getDisplayName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; java.lang.Integer java.lang.Integer = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ; java.lang.Integer java.lang.Integer = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; assertThat ( java.lang.Integer ) . isEqualTo ( java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; new ServerPortInfoApplicationContextInitializer ( ) . initialize ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; java.lang.Integer java.lang.Integer = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ; java.lang.Integer java.lang.Integer = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getEnvironment ( ) . getProperty ( STRING , java.lang.Integer .class ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; assertThat ( java.lang.Integer ) . isNotNull ( ) ; assertThat ( java.lang.Integer ) . isNotEqualTo ( java.lang.Integer ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; RequestMappingInfoHandlerMapping org.springframework.boot.actuate.autoconfigure.RequestMappingInfoHandlerMapping = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( RequestMappingInfoHandlerMapping .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.RequestMappingInfoHandlerMapping ) . isNotEqualTo ( instanceOf ( EndpointHandlerMapping .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.LoggingConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MvcEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( MvcEndpoint .class ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , EnvironmentMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , EnvironmentMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , LoggersMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , LoggersMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , MetricsMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , MetricsMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , HealthMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( STRING , HealthMvcEndpoint .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( ShutdownMvcEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( HalJsonMvcEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( EndpointHandlerMapping .class ) , STRING ) ; assertThat ( java.util.List<> ) . hasSize ( NUMBER ) ; ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementServerProperties .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) . isEnabled ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.actuate.autoconfigure.ExpectedException . expectMessage ( STRING + STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , startsWith ( STRING ) ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; java.util.List<?> < ? > java.util.List<?> = ( java.util.List<?> < ? > ) ReflectionTestUtils . getField ( org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( EndpointHandlerMapping .class ) , STRING ) ; assertThat ( java.util.List<> ) . hasSize ( NUMBER ) ; ManagementServerProperties org.springframework.boot.actuate.autoconfigure.ManagementServerProperties = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementServerProperties .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ManagementServerProperties . getSsl ( ) . isEnabled ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TomcatWebServerConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; ServletWebServerFactory org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory = org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( ServletWebServerFactory .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . isInstanceOf ( TomcatServletWebServerFactory .class ) ; AccessLogValve org.springframework.boot.actuate.autoconfigure.AccessLogValve = org.springframework.boot.actuate.autoconfigure.AccessLogValve ( ( ( TomcatServletWebServerFactory ) org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AccessLogValve ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.AccessLogValve . getPrefix ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING + java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.UndertowWebServerConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.EndpointConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class , ErrorMvcAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBean ( ManagementContextResolver .class ) . getApplicationContext ( ) ; ServletWebServerFactory org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory = org.springframework.boot.actuate.autoconfigure.ApplicationContext . getBean ( ServletWebServerFactory .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . isInstanceOf ( UndertowServletWebServerFactory .class ) ; assertThat ( ( ( UndertowServletWebServerFactory ) org.springframework.boot.actuate.autoconfigure.ServletWebServerFactory ) . getAccessLogPrefix ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.actuate.autoconfigure.AccessLogValve org.springframework.boot.actuate.autoconfigure.AccessLogValve ( TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ) { for ( Valve org.springframework.boot.actuate.autoconfigure.Valve : org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory . getEngineValves ( ) ) { if ( org.springframework.boot.actuate.autoconfigure.Valve instanceof AccessLogValve ) { return ( AccessLogValve ) org.springframework.boot.actuate.autoconfigure.Valve ; } } return null ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> < ? extends MvcEndpoint > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( java.lang.Class<> ) ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> < ? extends MvcEndpoint > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.MvcEndpoint> )			throws java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.LoggingConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.RootConfig .class , org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.BaseConfiguration .class , EndpointWebMvcAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext , STRING , java.lang.String . java.lang.String ( STRING , java.lang.String ) ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigServletWebServerApplicationContext . getBeansOfType ( java.lang.Class<> ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.lang.Exception { void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; void ( STRING , java.lang.ThreadLocal<org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports> . org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.Ports ( ) . int , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , int int , java.lang.Object java.lang.Object )			throws java.lang.Exception { void ( STRING , java.lang.String , int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , int int , java.lang.Object java.lang.Object ) throws java.lang.Exception { void ( STRING , java.lang.String , int , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , int int , java.lang.Object java.lang.Object )			throws java.lang.Exception { SSLConnectionSocketFactory org.springframework.boot.actuate.autoconfigure.SSLConnectionSocketFactory = new SSLConnectionSocketFactory ( new SSLContextBuilder ( ) . loadTrustMaterial ( null , new TrustSelfSignedStrategy ( ) ) . build ( ) ) ; HttpClient org.springframework.boot.actuate.autoconfigure.HttpClient = HttpClients . custom ( ) . setSSLSocketFactory ( org.springframework.boot.actuate.autoconfigure.SSLConnectionSocketFactory ) . build ( ) ; HttpComponentsClientHttpRequestFactory org.springframework.boot.actuate.autoconfigure.HttpComponentsClientHttpRequestFactory = new HttpComponentsClientHttpRequestFactory ( org.springframework.boot.actuate.autoconfigure.HttpClient ) ; ClientHttpRequest org.springframework.boot.actuate.autoconfigure.ClientHttpRequest = org.springframework.boot.actuate.autoconfigure.HttpComponentsClientHttpRequestFactory . createRequest ( new java.net.URI ( java.lang.String + STRING + int + java.lang.String ) , HttpMethod . GET ) ; try { ClientHttpResponse org.springframework.boot.actuate.autoconfigure.ClientHttpResponse = org.springframework.boot.actuate.autoconfigure.ClientHttpRequest . execute ( ) ; if ( HttpStatus . NOT_FOUND . equals ( org.springframework.boot.actuate.autoconfigure.ClientHttpResponse . getStatusCode ( ) ) ) { throw new java.io.FileNotFoundException ( ) ; } try { java.lang.String java.lang.String = StreamUtils . copyToString ( org.springframework.boot.actuate.autoconfigure.ClientHttpResponse . getBody ( ) , java.nio.charset.Charset . java.nio.charset.Charset ( STRING ) ) ; if ( java.lang.Object instanceof Matcher ) { assertThat ( java.lang.String ) . is ( Matched . by ( ( Matcher < ? > ) java.lang.Object ) ) ; } else { assertThat ( java.lang.String ) . isEqualTo ( java.lang.Object ) ; } } finally { org.springframework.boot.actuate.autoconfigure.ClientHttpResponse . close ( ) ; } } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Object == null ) { if ( java.net.SocketException .class . boolean ( java.lang.Exception ) || java.io.FileNotFoundException .class . boolean ( java.lang.Exception ) ) { return; } } throw java.lang.Exception ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String , int int , java.lang.String java.lang.String ) throws java.lang.Exception { SimpleClientHttpRequestFactory org.springframework.boot.actuate.autoconfigure.SimpleClientHttpRequestFactory = new SimpleClientHttpRequestFactory ( ) ; ClientHttpRequest org.springframework.boot.actuate.autoconfigure.ClientHttpRequest = org.springframework.boot.actuate.autoconfigure.SimpleClientHttpRequestFactory . createRequest ( new java.net.URI ( STRING + int + java.lang.String ) , HttpMethod . GET ) ; ClientHttpResponse org.springframework.boot.actuate.autoconfigure.ClientHttpResponse = org.springframework.boot.actuate.autoconfigure.ClientHttpRequest . execute ( ) ; return org.springframework.boot.actuate.autoconfigure.ClientHttpResponse . getHeaders ( ) . containsKey ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestController org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestController ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestController ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestEndpoint org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestEndpoint ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.TestEndpoint ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.LoggingSystem org.springframework.boot.actuate.autoconfigure.LoggingSystem ( ) { return LoggingSystem . get ( java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.LoggingConfig> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( STRING ) @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificServletWebServerFactory org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificServletWebServerFactory ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.SpecificServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory org.springframework.boot.actuate.autoconfigure.TomcatServletWebServerFactory ( ) { return new TomcatServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.UndertowServletWebServerFactory org.springframework.boot.actuate.autoconfigure.UndertowServletWebServerFactory ( ) { return new UndertowServletWebServerFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer org.springframework.boot.actuate.autoconfigure.EndpointHandlerMappingCustomizer ( ) { return new EndpointHandlerMappingCustomizer ( ) { @ java.lang.Override public void void ( EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . setInterceptors ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig.TestInterceptor ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EndpointHandlerMapping org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping ) { org.springframework.boot.actuate.autoconfigure.EndpointHandlerMapping . setInterceptors ( org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig.TestInterceptor ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean protected org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig.TestInterceptor org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig.TestInterceptor ( ) { return new org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfigurationTests.DifferentPortConfig.TestInterceptor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( HttpServletRequest org.springframework.boot.actuate.autoconfigure.HttpServletRequest , HttpServletResponse org.springframework.boot.actuate.autoconfigure.HttpServletResponse , java.lang.Object java.lang.Object , ModelAndView org.springframework.boot.actuate.autoconfigure.ModelAndView ) throws java.lang.Exception { this . int ++ ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ RequestMapping @ ResponseBody public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.Endpoint> < ? extends Endpoint > java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.Endpoint> ( ) { return Endpoint .class ; }  <METHOD_END>
<METHOD_START> void ( ApplicationContext org.springframework.boot.actuate.autoconfigure.ApplicationContext ) { this . org.springframework.boot.actuate.autoconfigure.ApplicationContext = org.springframework.boot.actuate.autoconfigure.ApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletWebServerInitializedEvent org.springframework.boot.actuate.autoconfigure.ServletWebServerInitializedEvent ) { if ( org.springframework.boot.actuate.autoconfigure.ServletWebServerInitializedEvent . getApplicationContext ( ) != this . org.springframework.boot.actuate.autoconfigure.ApplicationContext ) { this . org.springframework.boot.actuate.autoconfigure.WebServer = org.springframework.boot.actuate.autoconfigure.ServletWebServerInitializedEvent . getWebServer ( ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.actuate.autoconfigure.WebServer org.springframework.boot.actuate.autoconfigure.WebServer ( ) { return this . org.springframework.boot.actuate.autoconfigure.WebServer ; }  <METHOD_END>
