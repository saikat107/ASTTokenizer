<METHOD_START> void ( R R ) { super( R ); this . org.springframework.integration.dsl.RouterSpec.RouterMappingProvider = new org.springframework.integration.dsl.RouterSpec.RouterMappingProvider ( this . handler ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.RouterSpec<K,R> < K , R > org.springframework.integration.dsl.RouterSpec<K,R> ( boolean boolean ) { this . handler . setResolutionRequired ( boolean ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.RouterSpec<K,R> < K , R > org.springframework.integration.dsl.RouterSpec<K,R> ( java.lang.String java.lang.String ) { Assert . state ( this . componentsToRegister . isEmpty ( ) , STRING ) ; this . java.lang.String = java.lang.String ; this . handler . setPrefix ( java.lang.String ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.RouterSpec<K,R> < K , R > org.springframework.integration.dsl.RouterSpec<K,R> ( java.lang.String java.lang.String ) { Assert . state ( this . componentsToRegister . isEmpty ( ) , STRING ) ; this . java.lang.String = java.lang.String ; this . handler . setSuffix ( java.lang.String ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.RouterSpec<K,R> < K , R > org.springframework.integration.dsl.RouterSpec<K,R> ( K K , final java.lang.String java.lang.String ) { Assert . notNull ( K , STRING ) ; Assert . hasText ( java.lang.String , STRING ) ; if ( K instanceof java.lang.String ) { this . handler . setChannelMapping ( ( java.lang.String ) K , java.lang.String ) ; } else { this . org.springframework.integration.dsl.RouterSpec.RouterMappingProvider . void ( K , new NamedComponent ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ) ; } return _this ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.dsl.RouterSpec<K,R> < K , R > org.springframework.integration.dsl.RouterSpec<K,R> ( K K , IntegrationFlow org.springframework.integration.dsl.IntegrationFlow ) { Assert . notNull ( K , STRING ) ; Assert . notNull ( org.springframework.integration.dsl.IntegrationFlow , STRING ) ; Assert . state ( ! ( StringUtils . hasText ( this . java.lang.String ) || StringUtils . hasText ( this . java.lang.String ) ) , STRING ) ; DirectChannel org.springframework.integration.dsl.DirectChannel = new DirectChannel ( ) ; IntegrationFlowBuilder org.springframework.integration.dsl.IntegrationFlowBuilder = IntegrationFlows . from ( org.springframework.integration.dsl.DirectChannel ) ; org.springframework.integration.dsl.IntegrationFlow . configure ( org.springframework.integration.dsl.IntegrationFlowBuilder ) ; this . componentsToRegister . add ( org.springframework.integration.dsl.IntegrationFlowBuilder ) ; this . org.springframework.integration.dsl.RouterSpec.RouterMappingProvider . void ( K , org.springframework.integration.dsl.DirectChannel ) ; return _this ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.Object> < java.lang.Object > java.util.Collection<java.lang.Object> ( ) { if ( ! this . boolean ) { if ( ! this . org.springframework.integration.dsl.RouterSpec.RouterMappingProvider . java.util.Map<java.lang.Object,org.springframework.integration.dsl.NamedComponent> . isEmpty ( ) ) { this . componentsToRegister . add ( this . org.springframework.integration.dsl.RouterSpec.RouterMappingProvider ) ; } this . boolean = true ; } return super. getComponentsToRegister ( ) ; }  <METHOD_END>
<METHOD_START> void ( MappingMessageRouterManagement org.springframework.integration.dsl.MappingMessageRouterManagement ) { this . org.springframework.integration.dsl.MappingMessageRouterManagement = org.springframework.integration.dsl.MappingMessageRouterManagement ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , NamedComponent org.springframework.integration.dsl.NamedComponent ) { this . java.util.Map<java.lang.Object,org.springframework.integration.dsl.NamedComponent> . put ( java.lang.Object , org.springframework.integration.dsl.NamedComponent ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { ConversionService org.springframework.integration.dsl.ConversionService = getConversionService ( ) ; if ( org.springframework.integration.dsl.ConversionService == null ) { org.springframework.integration.dsl.ConversionService = DefaultConversionService . getSharedInstance ( ) ; } for ( java.util.Map . java.util.Map.Entry<java.lang.Object,org.springframework.integration.dsl.NamedComponent> < java.lang.Object , NamedComponent > java.util.Map.Entry<java.lang.Object,org.springframework.integration.dsl.NamedComponent> : this . java.util.Map<java.lang.Object,org.springframework.integration.dsl.NamedComponent> . entrySet ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.Object,org.springframework.integration.dsl.NamedComponent> . getKey ( ) ; java.lang.String java.lang.String ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String = ( java.lang.String ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.Class ) { java.lang.String = ( ( java.lang.Class<?> < ? > ) java.lang.Object ) . java.lang.String ( ) ; } else if ( org.springframework.integration.dsl.ConversionService . canConvert ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String .class ) ) { java.lang.String = org.springframework.integration.dsl.ConversionService . convert ( java.lang.Object , java.lang.String .class ) ; } else { throw new MessagingException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) + STRING ) ; } this . org.springframework.integration.dsl.MappingMessageRouterManagement . setChannelMapping ( java.lang.String , java.util.Map.Entry<java.lang.Object,org.springframework.integration.dsl.NamedComponent> . getValue ( ) . getComponentName ( ) ) ; } }  <METHOD_END>
