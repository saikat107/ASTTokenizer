<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.data.projection.MethodInvocation ) throws java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.projection.MethodInvocation . getMethod ( ) ; if ( ReflectionUtils . isObjectMethod ( java.lang.reflect.Method ) ) { return org.springframework.data.projection.MethodInvocation . proceed ( ) ; } Accessor org.springframework.data.projection.Accessor = new Accessor ( java.lang.reflect.Method ) ; if ( org.springframework.data.projection.Accessor . isGetter ( ) ) { return java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.projection.Accessor . getPropertyName ( ) ) ; } else if ( org.springframework.data.projection.Accessor . isSetter ( ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( org.springframework.data.projection.Accessor . getPropertyName ( ) , org.springframework.data.projection.MethodInvocation . getArguments ( ) [ NUMBER ] ) ; return null ; } throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
