<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( ResultFactory org.springframework.integration.xml.transformer.ResultFactory ) { Assert . notNull ( org.springframework.integration.xml.transformer.ResultFactory , STRING ) ; this . org.springframework.integration.xml.transformer.ResultFactory = org.springframework.integration.xml.transformer.ResultFactory ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.xml.transformer.ResultFactory org.springframework.integration.xml.transformer.ResultFactory ( ) { return this . org.springframework.integration.xml.transformer.ResultFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { super. onInit ( ) ; ResultFactory org.springframework.integration.xml.transformer.ResultFactory = org.springframework.integration.xml.transformer.ResultFactory ( this . java.lang.String , this . java.lang.String , this . getBeanFactory ( ) ) ; if ( org.springframework.integration.xml.transformer.ResultFactory != null ) { this . org.springframework.integration.xml.transformer.ResultFactory = org.springframework.integration.xml.transformer.ResultFactory ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.xml.transformer.ResultFactory org.springframework.integration.xml.transformer.ResultFactory ( java.lang.String java.lang.String , java.lang.String java.lang.String , BeanFactory org.springframework.integration.xml.transformer.BeanFactory ) { boolean boolean = StringUtils . hasText ( java.lang.String ) && StringUtils . hasText ( java.lang.String ) ; ResultFactory org.springframework.integration.xml.transformer.ResultFactory = null ; Assert . state ( ! boolean , STRING ) ; if ( StringUtils . hasText ( java.lang.String ) ) { Assert . state ( java.lang.String . boolean ( java.lang.String ) || java.lang.String . boolean ( java.lang.String ) , STRING ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.xml.transformer.ResultFactory = ( ResultFactory ) org.springframework.integration.xml.transformer.BeanFactory . getBean ( java.lang.String ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.integration.xml.transformer.ResultFactory = new StringResultFactory ( ) ; } else if ( java.lang.String . boolean ( java.lang.String ) ) { org.springframework.integration.xml.transformer.ResultFactory = new DomResultFactory ( ) ; } return org.springframework.integration.xml.transformer.ResultFactory ; }  <METHOD_END>
