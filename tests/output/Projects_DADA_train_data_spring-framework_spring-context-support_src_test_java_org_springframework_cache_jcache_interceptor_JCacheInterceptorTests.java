<METHOD_START> @ Test public void void ( ) { JCacheInterceptor org.springframework.cache.jcache.interceptor.JCacheInterceptor = org.springframework.cache.jcache.interceptor.JCacheInterceptor ( org.springframework.cache.jcache.interceptor.JCacheOperationSource ( cacheManager , new NamedCacheResolver ( cacheManager , STRING , STRING ) , defaultExceptionCacheResolver , defaultKeyGenerator ) ) ; AnnotatedJCacheableService org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService = new AnnotatedJCacheableService ( cacheManager . getCache ( STRING ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( AnnotatedJCacheableService .class , STRING , java.lang.String .class ) ; try { org.springframework.cache.jcache.interceptor.JCacheInterceptor . execute ( org.springframework.cache.jcache.interceptor.CacheOperationInvoker , org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService , java.lang.reflect.Method , new java.lang.Object [] { STRING } ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING + java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JCacheInterceptor org.springframework.cache.jcache.interceptor.JCacheInterceptor = org.springframework.cache.jcache.interceptor.JCacheInterceptor ( org.springframework.cache.jcache.interceptor.JCacheOperationSource ( cacheManager , new NamedCacheResolver ( cacheManager ) , defaultExceptionCacheResolver , defaultKeyGenerator ) ) ; AnnotatedJCacheableService org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService = new AnnotatedJCacheableService ( cacheManager . getCache ( STRING ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( AnnotatedJCacheableService .class , STRING , java.lang.String .class ) ; try { org.springframework.cache.jcache.interceptor.JCacheInterceptor . execute ( org.springframework.cache.jcache.interceptor.CacheOperationInvoker , org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService , java.lang.reflect.Method , new java.lang.Object [] { STRING } ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { fail ( STRING + java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { thrown . expect ( java.lang.IllegalStateException .class ) ; org.springframework.cache.jcache.interceptor.JCacheOperationSource ( null , null , null , defaultKeyGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.cache.jcache.interceptor.JCacheOperationSource ( null , defaultCacheResolver , defaultExceptionCacheResolver , defaultKeyGenerator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { JCacheInterceptor org.springframework.cache.jcache.interceptor.JCacheInterceptor = org.springframework.cache.jcache.interceptor.JCacheInterceptor ( org.springframework.cache.jcache.interceptor.JCacheOperationSource ( cacheManager , defaultCacheResolver , defaultExceptionCacheResolver , defaultKeyGenerator ) ) ; AnnotatedJCacheableService org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService = new AnnotatedJCacheableService ( cacheManager . getCache ( STRING ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( AnnotatedJCacheableService .class , STRING , java.lang.String .class ) ; CacheOperationInvoker org.springframework.cache.jcache.interceptor.CacheOperationInvoker = new org.springframework.cache.jcache.interceptor.JCacheInterceptorTests.DummyInvoker ( NUMBER ) ; java.lang.Object java.lang.Object = org.springframework.cache.jcache.interceptor.JCacheInterceptor . execute ( org.springframework.cache.jcache.interceptor.CacheOperationInvoker , org.springframework.cache.jcache.interceptor.AnnotatedJCacheableService , java.lang.reflect.Method , new java.lang.Object [] { STRING } ) ; assertNotNull ( STRING , java.lang.Object ) ; assertEquals ( STRING , java.lang.Long .class , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; assertEquals ( STRING , NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.JCacheOperationSource org.springframework.cache.jcache.interceptor.JCacheOperationSource ( CacheManager org.springframework.cache.jcache.interceptor.CacheManager , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , CacheResolver org.springframework.cache.jcache.interceptor.CacheResolver , KeyGenerator org.springframework.cache.jcache.interceptor.KeyGenerator ) { DefaultJCacheOperationSource org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource = new DefaultJCacheOperationSource ( ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setCacheManager ( org.springframework.cache.jcache.interceptor.CacheManager ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setCacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolver ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setExceptionCacheResolver ( org.springframework.cache.jcache.interceptor.CacheResolver ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setKeyGenerator ( org.springframework.cache.jcache.interceptor.KeyGenerator ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . setBeanFactory ( new StaticListableBeanFactory ( ) ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . afterPropertiesSet ( ) ; org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource . afterSingletonsInstantiated ( ) ; return org.springframework.cache.jcache.interceptor.DefaultJCacheOperationSource ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.jcache.interceptor.JCacheInterceptor org.springframework.cache.jcache.interceptor.JCacheInterceptor ( JCacheOperationSource org.springframework.cache.jcache.interceptor.JCacheOperationSource ) { JCacheInterceptor org.springframework.cache.jcache.interceptor.JCacheInterceptor = new JCacheInterceptor ( ) ; org.springframework.cache.jcache.interceptor.JCacheInterceptor . setCacheOperationSource ( org.springframework.cache.jcache.interceptor.JCacheOperationSource ) ; org.springframework.cache.jcache.interceptor.JCacheInterceptor . afterPropertiesSet ( ) ; return org.springframework.cache.jcache.interceptor.JCacheInterceptor ; }  <METHOD_END>
<METHOD_START> private void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.cache.jcache.interceptor.ThrowableWrapper { return java.lang.Object ; }  <METHOD_END>
