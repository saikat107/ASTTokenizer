<METHOD_START> public void void ( WebSessionIdResolver org.springframework.web.server.session.WebSessionIdResolver ) { Assert . notNull ( org.springframework.web.server.session.WebSessionIdResolver , STRING ) ; this . org.springframework.web.server.session.WebSessionIdResolver = org.springframework.web.server.session.WebSessionIdResolver ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.server.session.WebSessionIdResolver org.springframework.web.server.session.WebSessionIdResolver ( ) { return this . org.springframework.web.server.session.WebSessionIdResolver ; }  <METHOD_END>
<METHOD_START> public void void ( WebSessionStore org.springframework.web.server.session.WebSessionStore ) { Assert . notNull ( org.springframework.web.server.session.WebSessionStore , STRING ) ; this . org.springframework.web.server.session.WebSessionStore = org.springframework.web.server.session.WebSessionStore ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.server.session.WebSessionStore org.springframework.web.server.session.WebSessionStore ( ) { return this . org.springframework.web.server.session.WebSessionStore ; }  <METHOD_END>
<METHOD_START> public void void ( java.time.Clock java.time.Clock ) { Assert . notNull ( java.time.Clock , STRING ) ; this . java.time.Clock = java.time.Clock ; }  <METHOD_END>
<METHOD_START> public java.time.Clock java.time.Clock ( ) { return this . java.time.Clock ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> < WebSession > org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange ) { return Mono . defer ( ( ) Flux . fromIterable ( getSessionIdResolver ( ) . resolveSessionIds ( exchange ) ) . concatMap ( this . sessionStore :: retrieveSession ) . next ( ) . then ( session -> validateSession ( exchange , session ) ) . otherwiseIfEmpty ( createSession ( exchange ) ) . map ( session -> extendSession ( exchange , session ) ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> < WebSession > org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange , WebSession org.springframework.web.server.session.WebSession ) { if ( org.springframework.web.server.session.WebSession . isExpired ( ) ) { this . org.springframework.web.server.session.WebSessionIdResolver . setSessionId ( org.springframework.web.server.session.ServerWebExchange , STRING ) ; return this . org.springframework.web.server.session.WebSessionStore . removeSession ( org.springframework.web.server.session.WebSession . getId ( ) ) . cast ( WebSession .class ) ; } else { return Mono . just ( org.springframework.web.server.session.WebSession ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> < WebSession > org.springframework.web.server.session.Mono<org.springframework.web.server.session.WebSession> ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange ) { java.lang.String java.lang.String = java.util.UUID . java.util.UUID ( ) . java.lang.String ( ) ; WebSession org.springframework.web.server.session.WebSession = new DefaultWebSession ( java.lang.String , java.time.Clock ( ) ) ; return Mono . just ( org.springframework.web.server.session.WebSession ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.server.session.WebSession org.springframework.web.server.session.WebSession ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange , WebSession org.springframework.web.server.session.WebSession ) { if ( org.springframework.web.server.session.WebSession instanceof ConfigurableWebSession ) { ConfigurableWebSession org.springframework.web.server.session.ConfigurableWebSession = ( ConfigurableWebSession ) org.springframework.web.server.session.WebSession ; org.springframework.web.server.session.ConfigurableWebSession . setSaveOperation ( ( ) saveSession ( exchange , session ) ) ; org.springframework.web.server.session.ConfigurableWebSession . setLastAccessTime ( java.time.Instant . java.time.Instant ( java.time.Clock ( ) ) ) ; } org.springframework.web.server.session.ServerWebExchange . getResponse ( ) . beforeCommit ( org.springframework.web.server.session.WebSession :: save ) ; return org.springframework.web.server.session.WebSession ; }  <METHOD_END>
<METHOD_START> protected org.springframework.web.server.session.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.server.session.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.server.session.ServerWebExchange , WebSession org.springframework.web.server.session.WebSession ) { if ( org.springframework.web.server.session.WebSession . isExpired ( ) ) { return Mono . error ( new java.lang.IllegalStateException ( STRING + STRING + STRING + STRING ) ) ; } if ( ! org.springframework.web.server.session.WebSession . isStarted ( ) ) { return Mono . empty ( ) ; } org.springframework.web.server.session.WebSession . start ( ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.web.server.session.WebSessionIdResolver ( ) . resolveSessionIds ( org.springframework.web.server.session.ServerWebExchange ) ; if ( java.util.List<java.lang.String> . boolean ( ) || ! org.springframework.web.server.session.WebSession . getId ( ) . equals ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ) { this . org.springframework.web.server.session.WebSessionIdResolver . setSessionId ( org.springframework.web.server.session.ServerWebExchange , org.springframework.web.server.session.WebSession . getId ( ) ) ; } return this . org.springframework.web.server.session.WebSessionStore . storeSession ( org.springframework.web.server.session.WebSession ) ; }  <METHOD_END>
