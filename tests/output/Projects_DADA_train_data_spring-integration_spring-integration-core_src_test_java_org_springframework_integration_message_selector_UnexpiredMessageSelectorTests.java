<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) - NUMBER ; Message < java.lang.String > org.springframework.integration.message.selector.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setExpirationDate ( long ) . build ( ) ; UnexpiredMessageSelector org.springframework.integration.message.selector.UnexpiredMessageSelector = new UnexpiredMessageSelector ( ) ; assertFalse ( org.springframework.integration.message.selector.UnexpiredMessageSelector . accept ( org.springframework.integration.message.selector.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { long long = java.lang.System . long ( ) + NUMBER ; Message < java.lang.String > org.springframework.integration.message.selector.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setExpirationDate ( long ) . build ( ) ; UnexpiredMessageSelector org.springframework.integration.message.selector.UnexpiredMessageSelector = new UnexpiredMessageSelector ( ) ; assertTrue ( org.springframework.integration.message.selector.UnexpiredMessageSelector . accept ( org.springframework.integration.message.selector.Message<java.lang.String> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < java.lang.String > org.springframework.integration.message.selector.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; UnexpiredMessageSelector org.springframework.integration.message.selector.UnexpiredMessageSelector = new UnexpiredMessageSelector ( ) ; assertTrue ( org.springframework.integration.message.selector.UnexpiredMessageSelector . accept ( org.springframework.integration.message.selector.Message<java.lang.String> ) ) ; }  <METHOD_END>
