<METHOD_START> @ java.lang.Override public void void ( final TestContext org.springframework.data.couchbase.repository.TestContext ) throws java.lang.Exception { Bucket org.springframework.data.couchbase.repository.Bucket = ( Bucket ) org.springframework.data.couchbase.repository.TestContext . getApplicationContext ( ) . getBean ( BeanNames . COUCHBASE_BUCKET ) ; ClusterInfo org.springframework.data.couchbase.repository.ClusterInfo = ( ClusterInfo ) org.springframework.data.couchbase.repository.TestContext . getApplicationContext ( ) . getBean ( BeanNames . COUCHBASE_CLUSTER_INFO ) ; void ( org.springframework.data.couchbase.repository.Bucket , org.springframework.data.couchbase.repository.ClusterInfo ) ; void ( org.springframework.data.couchbase.repository.Bucket ) ; }  <METHOD_END>
<METHOD_START> private void void ( Bucket org.springframework.data.couchbase.repository.Bucket , ClusterInfo org.springframework.data.couchbase.repository.ClusterInfo ) { CouchbaseTemplate org.springframework.data.couchbase.repository.CouchbaseTemplate = new CouchbaseTemplate ( org.springframework.data.couchbase.repository.ClusterInfo , org.springframework.data.couchbase.repository.Bucket ) ; java.util.Calendar java.util.Calendar = java.util.Calendar . java.util.Calendar ( ) ; java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , java.util.Calendar . int ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Party org.springframework.data.couchbase.repository.Party = new Party ( STRING + int , STRING + int , STRING , java.util.Calendar . java.util.Date ( ) , NUMBER + int * NUMBER , new Point ( int , - int ) ) ; org.springframework.data.couchbase.repository.CouchbaseTemplate . save ( org.springframework.data.couchbase.repository.Party , PersistTo . MASTER , ReplicateTo . NONE ) ; java.util.Calendar . void ( java.util.Calendar . int , true ) ; } java.util.Calendar . void ( ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; java.util.Calendar . void ( java.util.Calendar . int , java.util.Calendar . int ) ; java.util.Calendar . void ( java.util.Calendar . int , NUMBER ) ; org.springframework.data.couchbase.repository.CouchbaseTemplate . save ( new Party ( STRING , STRING , STRING , java.util.Calendar . java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ) ; org.springframework.data.couchbase.repository.CouchbaseTemplate . save ( new Party ( STRING , STRING , STRING , java.util.Calendar . java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ) ; org.springframework.data.couchbase.repository.CouchbaseTemplate . save ( new Party ( STRING , STRING , STRING , java.util.Calendar . java.util.Date ( ) , NUMBER , new Point ( NUMBER , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( Bucket org.springframework.data.couchbase.repository.Bucket ) { java.util.List<org.springframework.data.couchbase.repository.View> < View > java.util.List<org.springframework.data.couchbase.repository.View> = new java.util.ArrayList<org.springframework.data.couchbase.repository.View> < View > ( ) ; java.lang.String java.lang.String = STRING + Party .class . java.lang.String ( ) + STRING + STRING ; java.util.List<org.springframework.data.couchbase.repository.View> . add ( DefaultView . create ( STRING , java.lang.String , STRING ) ) ; DesignDocument org.springframework.data.couchbase.repository.DesignDocument = DesignDocument . create ( STRING , java.util.List<org.springframework.data.couchbase.repository.View> ) ; org.springframework.data.couchbase.repository.Bucket . bucketManager ( ) . upsertDesignDocument ( org.springframework.data.couchbase.repository.DesignDocument ) ; java.util.List<org.springframework.data.couchbase.repository.View> < View > java.util.List<org.springframework.data.couchbase.repository.View> = new java.util.ArrayList<org.springframework.data.couchbase.repository.View> < View > ( ) ; java.lang.String = STRING + Party .class . java.lang.String ( ) + STRING + STRING ; java.util.List<org.springframework.data.couchbase.repository.View> . add ( SpatialView . create ( STRING , java.lang.String ) ) ; java.lang.String = STRING + Party .class . java.lang.String ( ) + STRING + STRING ; java.util.List<org.springframework.data.couchbase.repository.View> . add ( SpatialView . create ( STRING , java.lang.String ) ) ; DesignDocument org.springframework.data.couchbase.repository.DesignDocument = DesignDocument . create ( STRING , java.util.List<org.springframework.data.couchbase.repository.View> ) ; org.springframework.data.couchbase.repository.Bucket . bucketManager ( ) . upsertDesignDocument ( org.springframework.data.couchbase.repository.DesignDocument ) ; }  <METHOD_END>
