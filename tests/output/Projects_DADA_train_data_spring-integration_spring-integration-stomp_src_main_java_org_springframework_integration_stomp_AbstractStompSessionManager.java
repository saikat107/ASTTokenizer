<METHOD_START> public void ( StompClientSupport org.springframework.integration.stomp.StompClientSupport ) { Assert . notNull ( org.springframework.integration.stomp.StompClientSupport , STRING ) ; this . org.springframework.integration.stomp.StompClientSupport = org.springframework.integration.stomp.StompClientSupport ; }  <METHOD_END>
<METHOD_START> public void void ( StompHeaders org.springframework.integration.stomp.StompHeaders ) { this . org.springframework.integration.stomp.StompHeaders = org.springframework.integration.stomp.StompHeaders ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationEventPublisher org.springframework.integration.stomp.ApplicationEventPublisher ) { this . org.springframework.integration.stomp.ApplicationEventPublisher = org.springframework.integration.stomp.ApplicationEventPublisher ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . long = int ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> private synchronized void void ( ) { if ( this . boolean || this . boolean ) { if ( this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.stomp.Log . debug ( STRING ) ; } return; } final int int = this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; this . boolean = true ; if ( this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { this . org.springframework.integration.stomp.Log . debug ( STRING + this ) ; } try { this . org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> = org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> ( this . org.springframework.integration.stomp.AbstractStompSessionManager.CompositeStompSessionHandler ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( int == this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) { void ( java.lang.Exception ) ; } else { this . org.springframework.integration.stomp.Log . error ( STRING + this , java.lang.Exception ) ; } return; } final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; this . org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> . addCallback ( new ListenableFutureCallback < StompSession > ( ) { @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . debug ( STRING , java.lang.Throwable ) ; } java.util.concurrent.CountDownLatch . void ( ) ; if ( int == org.springframework.integration.stomp.AbstractStompSessionManager .this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) { void ( java.lang.Throwable ) ; } } @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession ) { if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . debug ( STRING ) ; } org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = true ; org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; org.springframework.integration.stomp.StompSession . setAutoReceipt ( boolean ( ) ) ; if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.ApplicationEventPublisher != null ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.ApplicationEventPublisher . publishEvent ( new StompSessionConnectedEvent ( this ) ) ; } org.springframework.integration.stomp.AbstractStompSessionManager .this . java.util.concurrent.ScheduledFuture<?> = null ; java.util.concurrent.CountDownLatch . void ( ) ; } } ) ; try { if ( ! java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) { this . org.springframework.integration.stomp.Log . error ( STRING ) ; if ( int == this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) { void ( null ) ; } } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { this . org.springframework.integration.stomp.Log . error ( STRING ) ; java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . debug ( STRING , java.lang.Throwable ) ; } java.util.concurrent.CountDownLatch . void ( ) ; if ( int == org.springframework.integration.stomp.AbstractStompSessionManager .this . java.util.concurrent.atomic.AtomicInteger . int ( ) ) { void ( java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession ) { if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . isDebugEnabled ( ) ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . debug ( STRING ) ; } org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = true ; org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; org.springframework.integration.stomp.StompSession . setAutoReceipt ( boolean ( ) ) ; if ( org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.ApplicationEventPublisher != null ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.ApplicationEventPublisher . publishEvent ( new StompSessionConnectedEvent ( this ) ) ; } org.springframework.integration.stomp.AbstractStompSessionManager .this . java.util.concurrent.ScheduledFuture<?> = null ; java.util.concurrent.CountDownLatch . void ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Throwable java.lang.Throwable ) { this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; this . boolean = this . boolean = false ; if ( java.lang.Throwable != null ) { this . org.springframework.integration.stomp.Log . error ( STRING + this , java.lang.Throwable ) ; } if ( this . org.springframework.integration.stomp.ApplicationEventPublisher != null ) { this . org.springframework.integration.stomp.ApplicationEventPublisher . publishEvent ( new StompConnectionFailedEvent ( this , java.lang.Throwable ) ) ; } if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } if ( this . org.springframework.integration.stomp.StompClientSupport . getTaskScheduler ( ) != null ) { this . java.util.concurrent.ScheduledFuture<?> = this . org.springframework.integration.stomp.StompClientSupport . getTaskScheduler ( ) . schedule ( ( java.lang.Runnable ) ( ) void ( ) , new java.util.Date ( java.lang.System . long ( ) + this . long ) ) ; } else { this . org.springframework.integration.stomp.Log . info ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> != null ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( false ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } this . org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> . addCallback ( new ListenableFutureCallback < StompSession > ( ) { @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; } @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession ) { org.springframework.integration.stomp.StompSession . disconnect ( ) ; org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; } } ) ; this . org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession ) { org.springframework.integration.stomp.StompSession . disconnect ( ) ; org.springframework.integration.stomp.AbstractStompSessionManager .this . boolean = false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( ! boolean ( ) ) { if ( this . org.springframework.integration.stomp.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.stomp.Log . info ( STRING + java.lang.Class<? extends org.springframework.integration.stomp.AbstractStompSessionManager> ( ) . java.lang.String ( ) ) ; } void ( ) ; this . boolean = true ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { synchronized ( this . java.lang.Object ) { void ( ) ; if ( java.lang.Runnable != null ) { java.lang.Runnable . void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { this . boolean = false ; if ( this . org.springframework.integration.stomp.Log . isInfoEnabled ( ) ) { this . org.springframework.integration.stomp.Log . info ( STRING + java.lang.Class<? extends org.springframework.integration.stomp.AbstractStompSessionManager> ( ) . java.lang.String ( ) ) ; } void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { this . org.springframework.integration.stomp.AbstractStompSessionManager.CompositeStompSessionHandler . void ( org.springframework.integration.stomp.StompSessionHandler ) ; if ( ! boolean ( ) && ! this . boolean ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { this . org.springframework.integration.stomp.AbstractStompSessionManager.CompositeStompSessionHandler . void ( org.springframework.integration.stomp.StompSessionHandler ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.stomp.StompHeaders org.springframework.integration.stomp.StompHeaders ( ) { return this . org.springframework.integration.stomp.StompHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return ObjectUtils . identityToString ( this ) + STRING + this . boolean + STRING + this . boolean + STRING + this . java.lang.String + '\'' + '}' ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> < StompSession > org.springframework.integration.stomp.ListenableFuture<org.springframework.integration.stomp.StompSession> ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler );  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> void void ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { if ( this . org.springframework.integration.stomp.StompSession != null ) { org.springframework.integration.stomp.StompSessionHandler . afterConnected ( this . org.springframework.integration.stomp.StompSession , org.springframework.integration.stomp.StompHeaders ( ) ) ; } this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> . add ( org.springframework.integration.stomp.StompSessionHandler ) ; }  <METHOD_END>
<METHOD_START> void void ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler ) { this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> . remove ( org.springframework.integration.stomp.StompSessionHandler ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession , StompHeaders org.springframework.integration.stomp.StompHeaders ) { this . org.springframework.integration.stomp.StompSession = org.springframework.integration.stomp.StompSession ; synchronized ( this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { for ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler : this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { org.springframework.integration.stomp.StompSessionHandler . afterConnected ( org.springframework.integration.stomp.StompSession , org.springframework.integration.stomp.StompHeaders ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession , StompCommand org.springframework.integration.stomp.StompCommand , StompHeaders org.springframework.integration.stomp.StompHeaders , byte [] byte[] , java.lang.Throwable java.lang.Throwable ) { synchronized ( this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { for ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler : this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { org.springframework.integration.stomp.StompSessionHandler . handleException ( org.springframework.integration.stomp.StompSession , org.springframework.integration.stomp.StompCommand , org.springframework.integration.stomp.StompHeaders , byte[] , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompSession org.springframework.integration.stomp.StompSession , java.lang.Throwable java.lang.Throwable ) { org.springframework.integration.stomp.AbstractStompSessionManager .this . org.springframework.integration.stomp.Log . error ( STRING + org.springframework.integration.stomp.StompSession + STRING , java.lang.Throwable ) ; this . org.springframework.integration.stomp.StompSession = null ; void ( java.lang.Throwable ) ; synchronized ( this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { for ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler : this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { org.springframework.integration.stomp.StompSessionHandler . handleTransportError ( org.springframework.integration.stomp.StompSession , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StompHeaders org.springframework.integration.stomp.StompHeaders , java.lang.Object java.lang.Object ) { synchronized ( this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { for ( StompSessionHandler org.springframework.integration.stomp.StompSessionHandler : this . java.util.List<org.springframework.integration.stomp.StompSessionHandler> ) { org.springframework.integration.stomp.StompSessionHandler . handleFrame ( org.springframework.integration.stomp.StompHeaders , java.lang.Object ) ; } } }  <METHOD_END>
