<METHOD_START> @ Before public void void ( ) { org.springframework.messaging.core.TestMessageChannelDestinationResolver org.springframework.messaging.core.TestMessageChannelDestinationResolver = new org.springframework.messaging.core.TestMessageChannelDestinationResolver ( ) ; this . org.springframework.messaging.core.ExecutorSubscribableChannel = new ExecutorSubscribableChannel ( ) ; org.springframework.messaging.core.TestMessageChannelDestinationResolver . void ( STRING , this . org.springframework.messaging.core.ExecutorSubscribableChannel ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate = new org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate ( ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . setDestinationResolver ( org.springframework.messaging.core.TestMessageChannelDestinationResolver ) ; this . java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ; this . org.springframework.messaging.core.TestMessagePostProcessor = new TestMessagePostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . send ( STRING , org.springframework.messaging.core.Message<> ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; assertSame ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate = new org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate ( ) ; org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . send ( STRING , new GenericMessage < java.lang.Object > ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertAndSend ( STRING , STRING ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; assertNotNull ( this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertSame ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertAndSend ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; assertNotNull ( this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertAndSend ( STRING , STRING , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; assertNotNull ( this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) ) ; assertSame ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertAndSend ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; assertNotNull ( this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertNotNull ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) ) ; assertSame ( this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . receive ( STRING ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . receiveAndConvert ( STRING , java.lang.String .class ) ; assertEquals ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . sendAndReceive ( STRING , org.springframework.messaging.core.Message<> ) ; assertEquals ( org.springframework.messaging.core.Message<> , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertSendAndReceive ( STRING , STRING , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertSendAndReceive ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertSendAndReceive ( STRING , STRING , java.lang.String .class , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . convertSendAndReceive ( STRING , STRING , this . java.util.Map<java.lang.String,java.lang.Object> , java.lang.String .class , this . org.springframework.messaging.core.TestMessagePostProcessor ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.Message<> . getPayload ( ) ) ; assertSame ( STRING , this . org.springframework.messaging.core.TestMessagePostProcessor . getMessage ( ) . getPayload ( ) ) ; assertSame ( STRING , java.lang.String ) ; assertSame ( this . org.springframework.messaging.core.ExecutorSubscribableChannel , this . org.springframework.messaging.core.DestinationResolvingMessagingTemplateTests.TestDestinationResolvingMessagingTemplate . org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MessageChannel org.springframework.messaging.core.MessageChannel , Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.MessageChannel = org.springframework.messaging.core.MessageChannel ; this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( MessageChannel org.springframework.messaging.core.MessageChannel ) { this . org.springframework.messaging.core.MessageChannel = org.springframework.messaging.core.MessageChannel ; return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( MessageChannel org.springframework.messaging.core.MessageChannel , Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; this . org.springframework.messaging.core.MessageChannel = org.springframework.messaging.core.MessageChannel ; return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , MessageChannel org.springframework.messaging.core.MessageChannel ) { this . java.util.Map<java.lang.String,org.springframework.messaging.core.MessageChannel> . put ( java.lang.String , org.springframework.messaging.core.MessageChannel ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.messaging.core.MessageChannel org.springframework.messaging.core.MessageChannel ( java.lang.String java.lang.String ) throws org.springframework.messaging.core.DestinationResolutionException { return this . java.util.Map<java.lang.String,org.springframework.messaging.core.MessageChannel> . get ( java.lang.String ) ; }  <METHOD_END>
