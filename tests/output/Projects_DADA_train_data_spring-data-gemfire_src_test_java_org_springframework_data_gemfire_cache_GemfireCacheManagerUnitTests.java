<METHOD_START> @ Before public void void ( ) { org.springframework.data.gemfire.cache.GemfireCacheManager = new GemfireCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> protected < T > java.util.Set<T> < T > java.util.Set<T> ( T ... T[] ) { java.util.Set<T> < T > java.util.Set<T> = new java.util.HashSet<T> < T > ( T[] . int ) ; java.util.Collections . boolean ( java.util.Set<T> , T[] ) ; return java.util.Set<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.gemfire.cache.Region<?,?> < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> ( java.lang.String java.lang.String ) { Region < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> = mock ( Region .class , java.lang.String ) ; when ( org.springframework.data.gemfire.cache.Region<,> . getName ( ) ) . thenReturn ( java.lang.String ) ; return org.springframework.data.gemfire.cache.Region<,> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.cache.Region<?,?> < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> ( java.lang.Iterable<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.lang.Iterable<org.springframework.data.gemfire.cache.Region<?,?>> , java.lang.String java.lang.String ) { for ( Region < ? , ? > org.springframework.data.gemfire.cache.Region<?,?> : java.lang.Iterable<org.springframework.data.gemfire.cache.Region<?,?>> ) { if ( org.springframework.data.gemfire.cache.Region<,> . getName ( ) . equals ( java.lang.String ) ) { return org.springframework.data.gemfire.cache.Region<,> ; } } return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.GemFireCache . isClosed ( ) ) . thenReturn ( false ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireCacheAvailable ( org.springframework.data.gemfire.cache.GemFireCache ) ) . isSameAs ( org.springframework.data.gemfire.cache.GemFireCache ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getName ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireCacheAvailable ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.GemFireCache . isClosed ( ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getName ( ) ) . thenReturn ( STRING ) ; try { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireCacheAvailable ( org.springframework.data.gemfire.cache.GemFireCache ) ; } finally { verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getName ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . isDestroyed ( ) ) . thenReturn ( false ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireRegionAvailable ( org.springframework.data.gemfire.cache.Region , STRING ) ) . isSameAs ( org.springframework.data.gemfire.cache.Region ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . isDestroyed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireRegionAvailable ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.gemfire.cache.Region . isDestroyed ( ) ) . thenReturn ( true ) ; try { org.springframework.data.gemfire.cache.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.cache.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.cache.ExpectedException . expectMessage ( is ( equalTo ( STRING ) ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . assertGemFireRegionAvailable ( org.springframework.data.gemfire.cache.Region , STRING ) ; } finally { verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . isDestroyed ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setRegions ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; java.util.Collection<org.springframework.data.gemfire.cache.Cache> < Cache > java.util.Collection<org.springframework.data.gemfire.cache.Cache> = org.springframework.data.gemfire.cache.GemfireCacheManager . loadCaches ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.cache.Cache> ) . isNotNull ( ) ; assertThat ( java.util.Collection<org.springframework.data.gemfire.cache.Cache> . size ( ) ) . isEqualTo ( NUMBER ) ; for ( Cache org.springframework.data.gemfire.cache.Cache : java.util.Collection<org.springframework.data.gemfire.cache.Cache> ) { assertThat ( org.springframework.data.gemfire.cache.Cache ) . isInstanceOf ( GemfireCache .class ) ; assertThat ( org.springframework.data.gemfire.cache.Region<?,?> ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> , org.springframework.data.gemfire.cache.Cache . getName ( ) ) ) . isSameAs ( org.springframework.data.gemfire.cache.Cache . getNativeCache ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . resolveRegions ( org.springframework.data.gemfire.cache.GemFireCache , java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> , java.util.Set<java.lang.String> ( STRING , STRING ) ) ) . isSameAs ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isDynamic ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , never ( ) ) . getRegion ( anyString ( ) ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , never ( ) ) . rootRegions ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Region org.springframework.data.gemfire.cache.Region = org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ; Region org.springframework.data.gemfire.cache.Region = org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getRegion ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.cache.Region ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getRegion ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.cache.Region ) ; java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = org.springframework.data.gemfire.cache.GemfireCacheManager . resolveRegions ( org.springframework.data.gemfire.cache.GemFireCache , null , java.util.Set<java.lang.String> ( STRING , STRING ) ) ; assertThat ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) . isNotNull ( ) ; assertThat ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> . size ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) . containsAll ( this .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ( org.springframework.data.gemfire.cache.Region , org.springframework.data.gemfire.cache.Region ) ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isDynamic ( ) ) . isFalse ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getRegion ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getRegion ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , never ( ) ) . getRegion ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . rootRegions ( ) ) . thenReturn ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . resolveRegions ( org.springframework.data.gemfire.cache.GemFireCache , null , null ) ) . isSameAs ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isDynamic ( ) ) . isTrue ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . rootRegions ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , never ( ) ) . getRegion ( anyString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isSet ( java.util.Collections . java.util.Set<java.lang.Integer> ( NUMBER ) ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isSet ( null ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isSet ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { when ( org.springframework.data.gemfire.cache.GemFireCache . isClosed ( ) ) . thenReturn ( false ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getRegion ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.cache.Region ) ; when ( org.springframework.data.gemfire.cache.Region . isDestroyed ( ) ) . thenReturn ( false ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . regionFor ( org.springframework.data.gemfire.cache.GemFireCache , STRING ) ) . isSameAs ( org.springframework.data.gemfire.cache.Region ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . isClosed ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getName ( ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getRegion ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.cache.Region , times ( NUMBER ) ) . isDestroyed ( ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { Region org.springframework.data.gemfire.cache.Region = org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ; when ( org.springframework.data.gemfire.cache.GemFireCache . getRegion ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.cache.Region ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setCache ( org.springframework.data.gemfire.cache.GemFireCache ) ; Cache org.springframework.data.gemfire.cache.Cache = org.springframework.data.gemfire.cache.GemfireCacheManager . getMissingCache ( STRING ) ; assertThat ( org.springframework.data.gemfire.cache.Cache ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.cache.Cache . getNativeCache ( ) ) . isEqualTo ( org.springframework.data.gemfire.cache.Region ) ; verify ( org.springframework.data.gemfire.cache.GemFireCache , times ( NUMBER ) ) . getRegion ( eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.gemfire.cache.GemfireCacheManager . setRegions ( java.util.Collections .< Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . isDynamic ( ) ) . isFalse ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getMissingCache ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getCache ( ) ) . isNull ( ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setCache ( org.springframework.data.gemfire.cache.GemFireCache ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getCache ( ) ) . isSameAs ( org.springframework.data.gemfire.cache.GemFireCache ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setCache ( null ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getCache ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setRegions ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . afterPropertiesSet ( ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getCacheNames ( ) ) . containsAll ( java.util.Set<java.lang.String> ( STRING , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> < Region < ? , ? > > java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> = java.util.Set ( org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) , org.springframework.data.gemfire.cache.Region<?,?> ( STRING ) ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getRegions ( ) ) . isNull ( ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setRegions ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getRegions ( ) ) . isSameAs ( java.util.Set<org.springframework.data.gemfire.cache.Region<?,?>> ) ; org.springframework.data.gemfire.cache.GemfireCacheManager . setRegions ( null ) ; assertThat ( org.springframework.data.gemfire.cache.GemfireCacheManager . getRegions ( ) ) . isNull ( ) ; }  <METHOD_END>
