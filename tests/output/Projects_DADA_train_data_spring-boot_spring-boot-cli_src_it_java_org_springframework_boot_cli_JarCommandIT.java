<METHOD_START> @ Test public void void ( ) java.lang.Exception { Invocation org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , containsString ( STRING + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Invocation org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING , STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , containsString ( STRING + STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; Invocation org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING , java.io.File . java.lang.String ( ) , STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , equalTo ( STRING ) ) ; org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING , java.io.File . java.lang.String ( ) , STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertEquals ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , NUMBER , org.springframework.boot.cli.Invocation . getErrorOutput ( ) . length ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.lang.Process java.lang.Process = new JavaExecutable ( ) . processBuilder ( STRING , java.io.File . java.lang.String ( ) ) . start ( ) ; org.springframework.boot.cli.Invocation = new Invocation ( java.lang.Process ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; Invocation org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING , java.io.File . java.lang.String ( ) , STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertEquals ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , NUMBER , org.springframework.boot.cli.Invocation . getErrorOutput ( ) . length ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.lang.Process java.lang.Process = new JavaExecutable ( ) . processBuilder ( STRING , java.io.File . java.lang.String ( ) ) . start ( ) ; org.springframework.boot.cli.Invocation = new Invocation ( java.lang.Process ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = new java.io.File ( STRING ) ; Invocation org.springframework.boot.cli.Invocation = this . org.springframework.boot.cli.CommandLineInvoker . invoke ( STRING , java.io.File . java.lang.String ( ) , STRING , STRING , STRING ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertEquals ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , NUMBER , org.springframework.boot.cli.Invocation . getErrorOutput ( ) . length ( ) ) ; assertTrue ( java.io.File . boolean ( ) ) ; java.lang.Process java.lang.Process = new JavaExecutable ( ) . processBuilder ( STRING , java.io.File . java.lang.String ( ) ) . start ( ) ; org.springframework.boot.cli.Invocation = new Invocation ( java.lang.Process ) ; org.springframework.boot.cli.Invocation . await ( ) ; assertThat ( org.springframework.boot.cli.Invocation . getErrorOutput ( ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , not ( containsString ( STRING ) ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , not ( containsString ( STRING ) ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; assertThat ( org.springframework.boot.cli.Invocation . getStandardOutput ( ) , containsString ( STRING ) ) ; }  <METHOD_END>
