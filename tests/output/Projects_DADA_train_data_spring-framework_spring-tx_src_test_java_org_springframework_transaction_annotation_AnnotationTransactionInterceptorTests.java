<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestClassLevelOnly . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverride . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithSingleMethodOverrideInverted . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithMultiMethodOverride . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; try { org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback . void ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { void ( NUMBER ) ; } try { org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithRollback . void ( ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { void ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterfaceImpl ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addInterface ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface .class ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.TestWithInterface . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeServiceImpl ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addInterface ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService .class ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService . void ( ) ; void ( NUMBER ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.SomeService . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ProxyFactory org.springframework.transaction.annotation.ProxyFactory = new ProxyFactory ( ) ; org.springframework.transaction.annotation.ProxyFactory . setTarget ( new org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherServiceImpl ( ) ) ; org.springframework.transaction.annotation.ProxyFactory . addInterface ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherService .class ) ; org.springframework.transaction.annotation.ProxyFactory . addAdvice ( this . org.springframework.transaction.annotation.TransactionInterceptor ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherService org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherService = ( org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherService ) org.springframework.transaction.annotation.ProxyFactory . getProxy ( ) ; org.springframework.transaction.annotation.AnnotationTransactionInterceptorTests.OtherService . void ( ) ; void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { assertEquals ( int , this . org.springframework.transaction.annotation.CallCountingTransactionManager . begun ) ; assertEquals ( int , this . org.springframework.transaction.annotation.CallCountingTransactionManager . commits ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { assertEquals ( int , this . org.springframework.transaction.annotation.CallCountingTransactionManager . begun ) ; assertEquals ( int , this . org.springframework.transaction.annotation.CallCountingTransactionManager . rollbacks ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ Transactional ( rollbackFor = java.lang.IllegalArgumentException .class ) public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; throw new java.lang.IllegalArgumentException ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( )  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) public void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertFalse ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { assertTrue ( TransactionSynchronizationManager . isActualTransactionActive ( ) ) ; assertTrue ( TransactionSynchronizationManager . isCurrentTransactionReadOnly ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ Transactional void void ( )  <METHOD_END>
<METHOD_START> @ Transactional ( readOnly = true ) void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional public void void ( ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional ( readOnly = false ) public void void ( ) {		}  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {		}  <METHOD_END>
