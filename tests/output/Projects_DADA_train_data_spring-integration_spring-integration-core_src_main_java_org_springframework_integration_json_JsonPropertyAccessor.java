<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.integration.json.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.integration.json.AccessException { ContainerNode < ? > org.springframework.integration.json.ContainerNode<?> = org.springframework.integration.json.ContainerNode<?> ( java.lang.Object ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( java.lang.String ) ; if ( org.springframework.integration.json.ContainerNode<> instanceof ArrayNode ) { return java.lang.Integer != null ; } else { return ( ( java.lang.Integer != null && org.springframework.integration.json.ContainerNode<> . has ( java.lang.Integer ) ) || org.springframework.integration.json.ContainerNode<> . has ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.json.ContainerNode<?> < ? > org.springframework.integration.json.ContainerNode<?> ( JsonNode org.springframework.integration.json.JsonNode ) throws org.springframework.integration.json.AccessException { if ( org.springframework.integration.json.JsonNode instanceof ContainerNode ) { return ( ContainerNode < ? > ) org.springframework.integration.json.JsonNode ; } else { throw new AccessException ( STRING + org.springframework.integration.json.JsonNode . getClass ( ) . getSimpleName ( ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.json.ContainerNode<?> < ? > org.springframework.integration.json.ContainerNode<?> ( java.lang.Object java.lang.Object ) throws org.springframework.integration.json.AccessException { if ( java.lang.Object instanceof ContainerNode ) { return ( ContainerNode < ? > ) java.lang.Object ; } else if ( java.lang.Object instanceof org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode ) { org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode = ( org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode ) java.lang.Object ; return org.springframework.integration.json.ContainerNode<?> ( org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode . org.springframework.integration.json.JsonNode ) ; } else if ( java.lang.Object instanceof org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList ) { org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList = ( org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList ) java.lang.Object ; return org.springframework.integration.json.ContainerNode<?> ( org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList . org.springframework.integration.json.ArrayNode ) ; } else if ( java.lang.Object instanceof java.lang.String ) { try { JsonNode org.springframework.integration.json.JsonNode = this . org.springframework.integration.json.ObjectMapper . readTree ( ( java.lang.String ) java.lang.Object ) ; return org.springframework.integration.json.ContainerNode<?> ( org.springframework.integration.json.JsonNode ) ; } catch ( JsonProcessingException org.springframework.integration.json.JsonProcessingException ) { throw new AccessException ( STRING , org.springframework.integration.json.JsonProcessingException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new AccessException ( STRING , java.io.IOException ) ; } } else { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.Integer java.lang.Integer ( java.lang.String java.lang.String ) { try { return java.lang.Integer . java.lang.Integer ( java.lang.String ) ; } catch ( java.lang.NumberFormatException java.lang.NumberFormatException ) { return null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.json.TypedValue org.springframework.integration.json.TypedValue ( EvaluationContext org.springframework.integration.json.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.integration.json.AccessException { ContainerNode < ? > org.springframework.integration.json.ContainerNode<?> = org.springframework.integration.json.ContainerNode<?> ( java.lang.Object ) ; java.lang.Integer java.lang.Integer = java.lang.Integer ( java.lang.String ) ; if ( java.lang.Integer != null && org.springframework.integration.json.ContainerNode<> . has ( java.lang.Integer ) ) { return org.springframework.integration.json.TypedValue ( org.springframework.integration.json.ContainerNode<> . get ( java.lang.Integer ) ) ; } else { return org.springframework.integration.json.TypedValue ( org.springframework.integration.json.ContainerNode<> . get ( java.lang.String ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( EvaluationContext org.springframework.integration.json.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String ) throws org.springframework.integration.json.AccessException { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( EvaluationContext org.springframework.integration.json.EvaluationContext , java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) throws org.springframework.integration.json.AccessException { throw new java.lang.UnsupportedOperationException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public void void ( ObjectMapper org.springframework.integration.json.ObjectMapper ) { Assert . notNull ( org.springframework.integration.json.ObjectMapper , STRING ) ; this . org.springframework.integration.json.ObjectMapper = org.springframework.integration.json.ObjectMapper ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.json.TypedValue org.springframework.integration.json.TypedValue ( JsonNode org.springframework.integration.json.JsonNode ) { if ( org.springframework.integration.json.JsonNode == null ) { return TypedValue . NULL ; } else { return new TypedValue ( org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( org.springframework.integration.json.JsonNode ) ) ; } }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( JsonNode org.springframework.integration.json.JsonNode ) { if ( org.springframework.integration.json.JsonNode == null ) { return null ; } else if ( org.springframework.integration.json.JsonNode instanceof ArrayNode ) { return new org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList ( ( ArrayNode ) org.springframework.integration.json.JsonNode ) ; } else { return new org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode ( org.springframework.integration.json.JsonNode ) ; } }  <METHOD_END>
<METHOD_START> void ( JsonNode org.springframework.integration.json.JsonNode ) { this . org.springframework.integration.json.JsonNode = org.springframework.integration.json.JsonNode ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { if ( this . org.springframework.integration.json.JsonNode == null ) { return STRING ; } if ( this . org.springframework.integration.json.JsonNode . isValueNode ( ) ) { return this . org.springframework.integration.json.JsonNode . asText ( ) ; } else { return this . org.springframework.integration.json.JsonNode . toString ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode = ( org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode ) java.lang.Object ; return ( this . org.springframework.integration.json.JsonNode == org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode . org.springframework.integration.json.JsonNode ) || ( this . org.springframework.integration.json.JsonNode != null && this . org.springframework.integration.json.JsonNode . equals ( org.springframework.integration.json.JsonPropertyAccessor.ToStringFriendlyJsonNode . org.springframework.integration.json.JsonNode ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.json.JsonNode != null ? this . org.springframework.integration.json.JsonNode . toString ( ) . hashCode ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> void ( ArrayNode org.springframework.integration.json.ArrayNode ) { this . org.springframework.integration.json.ArrayNode = org.springframework.integration.json.ArrayNode ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( int int ) { return org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( this . org.springframework.integration.json.ArrayNode . get ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . org.springframework.integration.json.ArrayNode . size ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Iterator<org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode> < org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode > java.util.Iterator<org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode> ( ) { return new java.util.Iterator<org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode> < org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode > ( ) { private final java.util.Iterator<org.springframework.integration.json.JsonNode> < JsonNode > java.util.Iterator<org.springframework.integration.json.JsonNode> = org.springframework.integration.json.JsonPropertyAccessor.ArrayNodeAsList .this . org.springframework.integration.json.ArrayNode . iterator ( ) ; @ java.lang.Override public boolean boolean ( ) { return this . java.util.Iterator<org.springframework.integration.json.JsonNode> . hasNext ( ) ; } @ java.lang.Override public org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( ) { return org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( this . java.util.Iterator<org.springframework.integration.json.JsonNode> . next ( ) ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.Iterator<org.springframework.integration.json.JsonNode> . hasNext ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( ) { return org.springframework.integration.json.JsonPropertyAccessor.WrappedJsonNode ( this . java.util.Iterator<org.springframework.integration.json.JsonNode> . next ( ) ) ; }  <METHOD_END>
