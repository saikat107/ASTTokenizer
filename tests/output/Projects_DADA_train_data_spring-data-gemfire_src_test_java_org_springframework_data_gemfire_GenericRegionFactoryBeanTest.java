<METHOD_START> @ BeforeClass public static void void ( ) java.lang.Exception { Cache org.springframework.data.gemfire.Cache = new CacheFactory ( ) . set ( STRING , org.springframework.data.gemfire.GenericRegionFactoryBeanTest .class . java.lang.String ( ) ) . set ( STRING , STRING ) . set ( STRING , STRING ) . create ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . EMPTY ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setScope ( Scope . DISTRIBUTED_NO_ACK ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . NORMAL ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setScope ( Scope . LOCAL ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . NORMAL ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setScope ( Scope . DISTRIBUTED_ACK ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . PERSISTENT_PARTITION ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setPersistent ( true ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . PRELOADED ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; RegionFactoryBean < java.lang.Object , java.lang.Object > org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> = new GenericRegionFactoryBean < java.lang.Object , java.lang.Object > ( ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setCache ( org.springframework.data.gemfire.Cache ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setDataPolicy ( DataPolicy . REPLICATE ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setName ( STRING ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . setScope ( Scope . GLOBAL ) ; org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . afterPropertiesSet ( ) ; org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> = org.springframework.data.gemfire.RegionFactoryBean<java.lang.Object,java.lang.Object> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { CacheUtils . closeCache ( ) ; java.io.FileFilter java.io.FileFilter = FileSystemUtils . CompositeFileFilter . or ( newFileExtensionFilter ( STRING ) , newFileExtensionFilter ( STRING ) , newFileExtensionFilter ( STRING ) , newFileExtensionFilter ( STRING ) ) ; FileSystemUtils . deleteRecursive ( FileSystemUtils . WORKING_DIRECTORY , java.io.FileFilter ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.DataPolicy , Scope org.springframework.data.gemfire.Scope ) { void ( org.springframework.data.gemfire.Region<,> , java.lang.String , java.lang.String . java.lang.String ( STRING , Region . SEPARATOR , java.lang.String ) , org.springframework.data.gemfire.DataPolicy , org.springframework.data.gemfire.Scope ) ; }  <METHOD_END>
<METHOD_START> protected void void ( Region < ? , ? > org.springframework.data.gemfire.Region<?,?> , java.lang.String java.lang.String , java.lang.String java.lang.String , DataPolicy org.springframework.data.gemfire.DataPolicy , Scope org.springframework.data.gemfire.Scope ) { assertNotNull ( STRING , org.springframework.data.gemfire.Region<,> ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.Region<,> . getName ( ) ) ; assertEquals ( java.lang.String , org.springframework.data.gemfire.Region<,> . getFullPath ( ) ) ; assertNotNull ( STRING , org.springframework.data.gemfire.Region<,> . getAttributes ( ) ) ; assertEquals ( org.springframework.data.gemfire.DataPolicy , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getDataPolicy ( ) ) ; assertEquals ( org.springframework.data.gemfire.Scope , org.springframework.data.gemfire.Region<,> . getAttributes ( ) . getScope ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . DEFAULT , org.springframework.data.gemfire.Scope ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . EMPTY , Scope . DISTRIBUTED_NO_ACK ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . NORMAL , Scope . LOCAL ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . NORMAL , Scope . DISTRIBUTED_ACK ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . PERSISTENT_PARTITION , org.springframework.data.gemfire.Scope ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . PRELOADED , org.springframework.data.gemfire.Scope ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.data.gemfire.Region<java.lang.Object,java.lang.Object> , STRING , DataPolicy . REPLICATE , Scope . GLOBAL ) ; }  <METHOD_END>
