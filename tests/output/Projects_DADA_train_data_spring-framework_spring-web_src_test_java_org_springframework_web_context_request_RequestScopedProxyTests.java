<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.context.request.DefaultListableBeanFactory . registerScope ( STRING , new RequestScope ( ) ) ; XmlBeanDefinitionReader org.springframework.web.context.request.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( this . org.springframework.web.context.request.DefaultListableBeanFactory ) ; org.springframework.web.context.request.XmlBeanDefinitionReader . loadBeanDefinitions ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.context.request.RequestScopedProxyTests> ( ) ) ) ; this . org.springframework.web.context.request.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.web.context.request.TestBean ) ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestAttributes org.springframework.web.context.request.RequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.RequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.context.request.TestBean . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ; assertEquals ( TestBean .class , org.springframework.web.context.request.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.web.context.request.TestBean . getName ( ) ) ; assertSame ( org.springframework.web.context.request.TestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; assertEquals ( org.springframework.web.context.request.TestBean . toString ( ) , org.springframework.web.context.request.TestBean . toString ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; ITestBean org.springframework.web.context.request.ITestBean = ( ITestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.web.context.request.ITestBean ) ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestAttributes org.springframework.web.context.request.RequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.RequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.context.request.ITestBean . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ; assertEquals ( TestBean .class , org.springframework.web.context.request.TestBean . getClass ( ) ) ; assertEquals ( STRING , org.springframework.web.context.request.TestBean . getName ( ) ) ; assertSame ( org.springframework.web.context.request.ITestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; assertEquals ( org.springframework.web.context.request.ITestBean . toString ( ) , org.springframework.web.context.request.TestBean . toString ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; DerivedTestBean org.springframework.web.context.request.DerivedTestBean = ( DerivedTestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.web.context.request.DerivedTestBean ) ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; ServletRequestAttributes org.springframework.web.context.request.ServletRequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.ServletRequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.context.request.DerivedTestBean . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( DerivedTestBean .class , org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) . getClass ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) . getName ( ) ) ; assertSame ( org.springframework.web.context.request.DerivedTestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; org.springframework.web.context.request.ServletRequestAttributes . requestCompleted ( ) ; assertTrue ( ( ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) . wasDestroyed ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.web.context.request.TestBean ) ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestAttributes org.springframework.web.context.request.RequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.RequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( DummyFactory . SINGLETON_NAME , org.springframework.web.context.request.TestBean . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( DummyFactory .class , org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) . getClass ( ) ) ; assertSame ( org.springframework.web.context.request.TestBean , this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( java.lang.String ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.web.context.request.TestBean ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.web.context.request.TestBean . getSpouse ( ) ) ) ; java.lang.String java.lang.String = STRING ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestAttributes org.springframework.web.context.request.RequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.RequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.context.request.TestBean . getSpouse ( ) . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( TestBean .class , org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) . getClass ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) . getName ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestBean org.springframework.web.context.request.TestBean = ( TestBean ) this . org.springframework.web.context.request.DefaultListableBeanFactory . getBean ( STRING ) ; assertFalse ( AopUtils . isAopProxy ( org.springframework.web.context.request.TestBean ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.web.context.request.TestBean . getSpouse ( ) ) ) ; BeanDefinition org.springframework.web.context.request.BeanDefinition = this . org.springframework.web.context.request.DefaultListableBeanFactory . getBeanDefinition ( STRING ) ; BeanDefinitionHolder org.springframework.web.context.request.BeanDefinitionHolder = ( BeanDefinitionHolder ) org.springframework.web.context.request.BeanDefinition . getPropertyValues ( ) . getPropertyValue ( STRING ) . getValue ( ) ; java.lang.String java.lang.String = org.springframework.web.context.request.BeanDefinitionHolder . getBeanName ( ) ; MockHttpServletRequest org.springframework.web.context.request.MockHttpServletRequest = new MockHttpServletRequest ( ) ; RequestAttributes org.springframework.web.context.request.RequestAttributes = new ServletRequestAttributes ( org.springframework.web.context.request.MockHttpServletRequest ) ; RequestContextHolder . setRequestAttributes ( org.springframework.web.context.request.RequestAttributes ) ; try { assertNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( STRING , org.springframework.web.context.request.TestBean . getSpouse ( ) . getName ( ) ) ; assertNotNull ( org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) ; assertEquals ( TestBean .class , org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) . getClass ( ) ) ; assertEquals ( STRING , ( ( TestBean ) org.springframework.web.context.request.MockHttpServletRequest . getAttribute ( STRING + java.lang.String ) ) . getName ( ) ) ; } finally { RequestContextHolder . setRequestAttributes ( null ) ; } }  <METHOD_END>
