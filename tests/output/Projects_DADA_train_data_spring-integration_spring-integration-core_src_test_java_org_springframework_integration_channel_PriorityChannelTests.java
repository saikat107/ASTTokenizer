<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; assertTrue ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; assertTrue ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; assertTrue ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; assertFalse ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) ; assertTrue ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.Integer > ( int ) ) ; } for ( int int = NUMBER ; int < NUMBER ; int ++ ) { assertEquals ( int , org.springframework.integration.channel.PriorityChannel . receive ( ) . getPayload ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( - NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( - NUMBER ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { final PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( ) ; final Message < java.lang.String > org.springframework.integration.channel.Message<java.lang.String> = new GenericMessage < java.lang.String > ( STRING ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<java.lang.String> ) ; new java.lang.Thread ( ( ) org.springframework.integration.channel.PriorityChannel . receive ( ) ) . void ( ) ; new java.lang.Thread ( ( ) org.springframework.integration.channel.Message<java.lang.String> . getHeaders ( ) . toString ( ) ) . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER , new org.springframework.integration.channel.PriorityChannelTests.StringPayloadComparator ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER , new org.springframework.integration.channel.PriorityChannelTests.FooHeaderComparator ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setHeader ( STRING , NUMBER ) . build ( ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = MessageBuilder . withPayload ( NUMBER ) . build ( ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; assertEquals ( NUMBER , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( - NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.Message<java.lang.String> ( - NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; org.springframework.integration.channel.PriorityChannel . send ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { final PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) ; org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.ExecutorService . void ( ( ) java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; assertNull ( org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { final PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; java.util.concurrent.Executor java.util.concurrent.Executor = java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) ; org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.Executor . void ( ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ) ; java.util.concurrent.CountDownLatch . void ( ) ; } ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PriorityChannel . receive ( ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PriorityChannel . receive ( ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { final PriorityChannel org.springframework.integration.channel.PriorityChannel = new PriorityChannel ( NUMBER ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; java.util.concurrent.ExecutorService java.util.concurrent.ExecutorService = java.util.concurrent.Executors . java.util.concurrent.ScheduledExecutorService ( ) ; org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; java.util.concurrent.ExecutorService . void ( ( ) java.util.concurrent.atomic.AtomicBoolean . void ( org.springframework.integration.channel.PriorityChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , - NUMBER ) ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; java.lang.Thread . void ( NUMBER ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PriorityChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; java.util.concurrent.ExecutorService . void ( ) ; assertTrue ( java.util.concurrent.ExecutorService . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; Message < ? > org.springframework.integration.channel.Message<?> = org.springframework.integration.channel.PriorityChannel . receive ( ) ; assertNotNull ( org.springframework.integration.channel.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.integration.channel.Message<java.lang.String> < java.lang.String > org.springframework.integration.channel.Message<java.lang.String> ( int int ) { return MessageBuilder . withPayload ( STRING + int ) . setPriority ( int ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Message < ? > org.springframework.integration.channel.Message<?> , Message < ? > org.springframework.integration.channel.Message<?> ) { java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.channel.Message<> . getPayload ( ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.channel.Message<> . getPayload ( ) ; return java.lang.String . int ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Message < ? > org.springframework.integration.channel.Message<?> , Message < ? > org.springframework.integration.channel.Message<?> ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.channel.Message<> . getHeaders ( ) . get ( STRING ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.integration.channel.Message<> . getHeaders ( ) . get ( STRING ) ; java.lang.Integer = java.lang.Integer != null ? java.lang.Integer : NUMBER ; java.lang.Integer = java.lang.Integer != null ? java.lang.Integer : NUMBER ; return java.lang.Integer . int ( java.lang.Integer ) ; }  <METHOD_END>
