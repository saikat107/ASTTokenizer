<METHOD_START> @ Test public void void ( ) { SmartApplicationListener org.springframework.context.event.SmartApplicationListener = mock ( SmartApplicationListener .class ) ; GenericApplicationListenerAdapter org.springframework.context.event.GenericApplicationListenerAdapter = new GenericApplicationListenerAdapter ( org.springframework.context.event.SmartApplicationListener ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forClass ( ApplicationEvent .class ) ; org.springframework.context.event.GenericApplicationListenerAdapter . supportsEventType ( org.springframework.context.event.ResolvableType ) ; verify ( org.springframework.context.event.SmartApplicationListener , times ( NUMBER ) ) . supportsEventType ( ApplicationEvent .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SmartApplicationListener org.springframework.context.event.SmartApplicationListener = mock ( SmartApplicationListener .class ) ; GenericApplicationListenerAdapter org.springframework.context.event.GenericApplicationListenerAdapter = new GenericApplicationListenerAdapter ( org.springframework.context.event.SmartApplicationListener ) ; org.springframework.context.event.GenericApplicationListenerAdapter . supportsSourceType ( java.lang.Object .class ) ; verify ( org.springframework.context.event.SmartApplicationListener , times ( NUMBER ) ) . supportsSourceType ( java.lang.Object .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , StringEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.GenericTestEvent<java.lang.String> . getClass ( ) ) ; void ( false , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forClassWithGenerics ( GenericTestEvent .class , java.lang.String .class ) ; void ( true , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ResolvableType org.springframework.context.event.ResolvableType = new SmartGenericTestEvent <> ( this , STRING ) . getResolvableType ( ) ; void ( true , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StringEvent org.springframework.context.event.StringEvent = new StringEvent ( this , STRING ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.StringEvent . getClass ( ) ) ; void ( true , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , StringEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { LongEvent org.springframework.context.event.LongEvent = new LongEvent ( this , NUMBER ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.LongEvent . getClass ( ) ) ; void ( false , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericTestEvent < java.lang.Long > org.springframework.context.event.GenericTestEvent<java.lang.Long> = createGenericTestEvent ( NUMBER ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.GenericTestEvent<java.lang.Long> . getClass ( ) ) ; void ( false , StringEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( false , ObjectEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , UpperBoundEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.NoSuchFieldException { void ( false , UpperBoundEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , GenericEventListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.GenericTestEvent<java.lang.String> . getClass ( ) ) ; void ( true , GenericEventListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( true , RawApplicationListener .class , getGenericApplicationEventType ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericTestEvent < java.lang.String > org.springframework.context.event.GenericTestEvent<java.lang.String> = createGenericTestEvent ( STRING ) ; ResolvableType org.springframework.context.event.ResolvableType = ResolvableType . forType ( org.springframework.context.event.GenericTestEvent<java.lang.String> . getClass ( ) ) ; void ( true , RawApplicationListener .class , org.springframework.context.event.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , java.lang.Class<? extends org.springframework.context.event.ApplicationListener> < ? extends ApplicationListener > java.lang.Class<? extends org.springframework.context.event.ApplicationListener> , ResolvableType org.springframework.context.event.ResolvableType ) { ApplicationListener < ? > org.springframework.context.event.ApplicationListener<?> = mock ( java.lang.Class<> ) ; GenericApplicationListenerAdapter org.springframework.context.event.GenericApplicationListenerAdapter = new GenericApplicationListenerAdapter ( org.springframework.context.event.ApplicationListener<> ) ; assertEquals ( STRING + org.springframework.context.event.ResolvableType + STRING + java.lang.Class<> . java.lang.Class<? extends java.lang.Class> ( ) . java.lang.String ( ) , boolean , org.springframework.context.event.GenericApplicationListenerAdapter . supportsEventType ( org.springframework.context.event.ResolvableType ) ) ; }  <METHOD_END>
