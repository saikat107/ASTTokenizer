<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.integration.gateway.InnerGatewayWithChainTests.TestGateway . java.lang.String ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.integration.gateway.InnerGatewayWithChainTests.TestGateway . java.lang.String ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = org.springframework.integration.gateway.InnerGatewayWithChainTests.TestGateway . java.lang.String ( NUMBER ) ; assertEquals ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.ArithmeticException .class ) public void void ( ) { org.springframework.integration.gateway.InnerGatewayWithChainTests.TestGateway . java.lang.String ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.gateway.SubscribableChannel . subscribe ( message -> errorLatch . countDown ( ) ) ; org.springframework.integration.gateway.SourcePollingChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.gateway.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.gateway.SubscribableChannel . subscribe ( message -> errorLatch . countDown ( ) ) ; org.springframework.integration.gateway.SourcePollingChannelAdapter . start ( ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.gateway.SourcePollingChannelAdapter . stop ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( int int );  <METHOD_END>
