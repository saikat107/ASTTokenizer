<METHOD_START> public void ( ) { super( SpringAsmInfo . ASM_VERSION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int , int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { this . java.lang.String = ClassUtils . convertResourcePathToClassName ( java.lang.String ) ; this . boolean = ( ( int & Opcodes . ACC_INTERFACE ) != NUMBER ) ; this . boolean = ( ( int & Opcodes . ACC_ANNOTATION ) != NUMBER ) ; this . boolean = ( ( int & Opcodes . ACC_ABSTRACT ) != NUMBER ) ; this . boolean = ( ( int & Opcodes . ACC_FINAL ) != NUMBER ) ; if ( java.lang.String != null && ! this . boolean ) { this . java.lang.String = ClassUtils . convertResourcePathToClassName ( java.lang.String ) ; } this . java.lang.String[] = new java.lang.String [ java.lang.String[] . int ] ; for ( int int = NUMBER ; int < java.lang.String[] . int ; int ++ ) { this . java.lang.String[] [ int ] = ClassUtils . convertResourcePathToClassName ( java.lang.String[] [ int ] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String ) { this . java.lang.String = ClassUtils . convertResourcePathToClassName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , int int ) { if ( java.lang.String != null ) { java.lang.String java.lang.String = ClassUtils . convertResourcePathToClassName ( java.lang.String ) ; java.lang.String java.lang.String = ClassUtils . convertResourcePathToClassName ( java.lang.String ) ; if ( this . java.lang.String . boolean ( java.lang.String ) ) { this . java.lang.String = java.lang.String ; this . boolean = ( ( int & Opcodes . ACC_STATIC ) != NUMBER ) ; } else if ( this . java.lang.String . boolean ( java.lang.String ) ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String , boolean boolean ) { return new org.springframework.core.type.classreading.ClassMetadataReadingVisitor.EmptyAnnotationVisitor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Attribute org.springframework.core.type.classreading.Attribute ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.FieldVisitor org.springframework.core.type.classreading.FieldVisitor ( int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return new org.springframework.core.type.classreading.ClassMetadataReadingVisitor.EmptyFieldVisitor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.MethodVisitor org.springframework.core.type.classreading.MethodVisitor ( int int , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.String [] java.lang.String[] ) { return new org.springframework.core.type.classreading.ClassMetadataReadingVisitor.EmptyMethodVisitor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! ( this . boolean || this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . java.lang.String == null || this . boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return this . java.lang.String[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return this . java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ this . java.util.Set<java.lang.String> . int ( ) ] ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( SpringAsmInfo . ASM_VERSION ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.core.type.classreading.AnnotationVisitor org.springframework.core.type.classreading.AnnotationVisitor ( java.lang.String java.lang.String ) { return this ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( SpringAsmInfo . ASM_VERSION ); }  <METHOD_END>
<METHOD_START> public void ( ) { super( SpringAsmInfo . ASM_VERSION ); }  <METHOD_END>
