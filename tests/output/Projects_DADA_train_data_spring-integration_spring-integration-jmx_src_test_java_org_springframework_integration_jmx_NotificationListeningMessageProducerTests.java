<METHOD_START> @ Before public void void ( ) java.lang.Exception { MBeanServerFactoryBean org.springframework.integration.jmx.MBeanServerFactoryBean = new MBeanServerFactoryBean ( ) ; org.springframework.integration.jmx.MBeanServerFactoryBean . setLocateExistingServerIfPossible ( true ) ; org.springframework.integration.jmx.MBeanServerFactoryBean . afterPropertiesSet ( ) ; this . javax.management.MBeanServer = org.springframework.integration.jmx.MBeanServerFactoryBean . getObject ( ) ; MBeanExporter org.springframework.integration.jmx.MBeanExporter = new MBeanExporter ( ) ; org.springframework.integration.jmx.MBeanExporter . setAutodetect ( false ) ; org.springframework.integration.jmx.MBeanExporter . afterPropertiesSet ( ) ; this . javax.management.ObjectName = ObjectNameManager . getInstance ( STRING ) ; org.springframework.integration.jmx.MBeanExporter . registerManagedResource ( this . org.springframework.integration.jmx.NotificationListeningMessageProducerTests.NumberHolder , this . javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) java.lang.Exception { this . javax.management.MBeanServer . void ( this . javax.management.ObjectName ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; NotificationListeningMessageProducer org.springframework.integration.jmx.NotificationListeningMessageProducer = new NotificationListeningMessageProducer ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setObjectName ( this . javax.management.ObjectName ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . start ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . onApplicationEvent ( new ContextRefreshedEvent ( Mockito . mock ( ApplicationContext .class ) ) ) ; this . org.springframework.integration.jmx.NotificationListeningMessageProducerTests.NumberHolder . void ( STRING ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertTrue ( org.springframework.integration.jmx.Message<> . getPayload ( ) instanceof javax.management.Notification ) ; javax.management.Notification javax.management.Notification = ( javax.management.Notification ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertEquals ( javax.management.ObjectName , javax.management.Notification . java.lang.Object ( ) ) ; assertNull ( org.springframework.integration.jmx.Message<> . getHeaders ( ) . get ( JmxHeaders . NOTIFICATION_HANDBACK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; NotificationListeningMessageProducer org.springframework.integration.jmx.NotificationListeningMessageProducer = new NotificationListeningMessageProducer ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setObjectName ( this . javax.management.ObjectName ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; java.lang.Integer java.lang.Integer = NUMBER ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setHandback ( java.lang.Integer ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . start ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . onApplicationEvent ( new ContextRefreshedEvent ( Mockito . mock ( ApplicationContext .class ) ) ) ; this . org.springframework.integration.jmx.NotificationListeningMessageProducerTests.NumberHolder . void ( STRING ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertTrue ( org.springframework.integration.jmx.Message<> . getPayload ( ) instanceof javax.management.Notification ) ; javax.management.Notification javax.management.Notification = ( javax.management.Notification ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; assertEquals ( javax.management.ObjectName , javax.management.Notification . java.lang.Object ( ) ) ; assertEquals ( java.lang.Integer , org.springframework.integration.jmx.Message<> . getHeaders ( ) . get ( JmxHeaders . NOTIFICATION_HANDBACK ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { QueueChannel org.springframework.integration.jmx.QueueChannel = new QueueChannel ( ) ; NotificationListeningMessageProducer org.springframework.integration.jmx.NotificationListeningMessageProducer = new NotificationListeningMessageProducer ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setServer ( this . javax.management.MBeanServer ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setObjectName ( this . javax.management.ObjectName ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setOutputChannel ( org.springframework.integration.jmx.QueueChannel ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setFilter ( notification -> ! notification . getMessage ( ) . equals ( STRING ) ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . afterPropertiesSet ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . start ( ) ; org.springframework.integration.jmx.NotificationListeningMessageProducer . onApplicationEvent ( new ContextRefreshedEvent ( Mockito . mock ( ApplicationContext .class ) ) ) ; this . org.springframework.integration.jmx.NotificationListeningMessageProducerTests.NumberHolder . void ( STRING ) ; Message < ? > org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNull ( org.springframework.integration.jmx.Message<> ) ; this . org.springframework.integration.jmx.NotificationListeningMessageProducerTests.NumberHolder . void ( STRING ) ; org.springframework.integration.jmx.Message<?> = org.springframework.integration.jmx.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jmx.Message<> ) ; assertTrue ( org.springframework.integration.jmx.Message<> . getPayload ( ) instanceof javax.management.Notification ) ; javax.management.Notification javax.management.Notification = ( javax.management.Notification ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; assertEquals ( STRING , javax.management.Notification . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . java.util.concurrent.atomic.AtomicInteger . void ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( NotificationPublisher org.springframework.integration.jmx.NotificationPublisher ) { this . org.springframework.integration.jmx.NotificationPublisher = org.springframework.integration.jmx.NotificationPublisher ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { javax.management.Notification javax.management.Notification = new javax.management.Notification ( STRING , this , java.util.concurrent.atomic.AtomicInteger . int ( ) , java.lang.String ) ; this . org.springframework.integration.jmx.NotificationPublisher . sendNotification ( javax.management.Notification ) ; }  <METHOD_END>
