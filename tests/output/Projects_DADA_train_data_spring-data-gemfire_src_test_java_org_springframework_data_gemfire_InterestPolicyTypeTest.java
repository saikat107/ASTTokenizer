<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestPolicy . ALL , InterestPolicyType . getInterestPolicy ( InterestPolicyType . ALL ) ) ; assertEquals ( InterestPolicy . CACHE_CONTENT , InterestPolicyType . getInterestPolicy ( InterestPolicyType . CACHE_CONTENT ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestPolicyType . getInterestPolicy ( null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestPolicy . ALL , InterestPolicyType . ALL . getInterestPolicy ( ) ) ; assertEquals ( InterestPolicy . CACHE_CONTENT , InterestPolicyType . CACHE_CONTENT . getInterestPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestPolicy . DEFAULT , InterestPolicyType . DEFAULT . getInterestPolicy ( ) ) ; assertSame ( InterestPolicyType . CACHE_CONTENT , InterestPolicyType . DEFAULT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { for ( byte byte = NUMBER ; byte < java.lang.Byte . byte ; byte ++ ) { InterestPolicy org.springframework.data.gemfire.InterestPolicy = InterestPolicy . fromOrdinal ( byte ) ; InterestPolicyType org.springframework.data.gemfire.InterestPolicyType = InterestPolicyType . valueOf ( org.springframework.data.gemfire.InterestPolicy ) ; assertNotNull ( org.springframework.data.gemfire.InterestPolicyType ) ; assertEquals ( org.springframework.data.gemfire.InterestPolicy , org.springframework.data.gemfire.InterestPolicyType . getInterestPolicy ( ) ) ; } } catch ( java.lang.ArrayIndexOutOfBoundsException java.lang.ArrayIndexOutOfBoundsException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestPolicyType . valueOf ( ( InterestPolicy ) null ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( InterestPolicyType . ALL , InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestPolicyType . CACHE_CONTENT , InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestPolicyType . ALL , InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertEquals ( InterestPolicyType . CACHE_CONTENT , InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( STRING ) ) ; assertNull ( InterestPolicyType . valueOfIgnoreCase ( null ) ) ; }  <METHOD_END>
