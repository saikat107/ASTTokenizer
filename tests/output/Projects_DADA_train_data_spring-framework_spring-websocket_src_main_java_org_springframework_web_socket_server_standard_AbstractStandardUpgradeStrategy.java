<METHOD_START> protected org.springframework.web.socket.server.standard.ServerContainer org.springframework.web.socket.server.standard.ServerContainer ( HttpServletRequest org.springframework.web.socket.server.standard.HttpServletRequest ) { ServletContext org.springframework.web.socket.server.standard.ServletContext = org.springframework.web.socket.server.standard.HttpServletRequest . getServletContext ( ) ; java.lang.String java.lang.String = STRING ; ServerContainer org.springframework.web.socket.server.standard.ServerContainer = ( ServerContainer ) org.springframework.web.socket.server.standard.ServletContext . getAttribute ( java.lang.String ) ; Assert . notNull ( org.springframework.web.socket.server.standard.ServerContainer , STRING + STRING ) ; return org.springframework.web.socket.server.standard.ServerContainer ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.socket.server.standard.HttpServletRequest org.springframework.web.socket.server.standard.HttpServletRequest ( ServerHttpRequest org.springframework.web.socket.server.standard.ServerHttpRequest ) { Assert . isInstanceOf ( ServletServerHttpRequest .class , org.springframework.web.socket.server.standard.ServerHttpRequest , STRING ) ; return ( ( ServletServerHttpRequest ) org.springframework.web.socket.server.standard.ServerHttpRequest ) . getServletRequest ( ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.web.socket.server.standard.HttpServletResponse org.springframework.web.socket.server.standard.HttpServletResponse ( ServerHttpResponse org.springframework.web.socket.server.standard.ServerHttpResponse ) { Assert . isInstanceOf ( ServletServerHttpResponse .class , org.springframework.web.socket.server.standard.ServerHttpResponse , STRING ) ; return ( ( ServletServerHttpResponse ) org.springframework.web.socket.server.standard.ServerHttpResponse ) . getServletResponse ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ( ServerHttpRequest org.springframework.web.socket.server.standard.ServerHttpRequest ) { if ( this . java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> == null ) { HttpServletRequest org.springframework.web.socket.server.standard.HttpServletRequest = ( ( ServletServerHttpRequest ) org.springframework.web.socket.server.standard.ServerHttpRequest ) . getServletRequest ( ) ; this . java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> = java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ( org.springframework.web.socket.server.standard.ServerContainer ( org.springframework.web.socket.server.standard.HttpServletRequest ) ) ; } return this . java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ( WebSocketContainer org.springframework.web.socket.server.standard.WebSocketContainer ) { java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> = new java.util.ArrayList<org.springframework.web.socket.server.standard.WebSocketExtension> <> ( ) ; for ( Extension org.springframework.web.socket.server.standard.Extension : org.springframework.web.socket.server.standard.WebSocketContainer . getInstalledExtensions ( ) ) { java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> . add ( new StandardToWebSocketExtensionAdapter ( org.springframework.web.socket.server.standard.Extension ) ) ; } return java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServerHttpRequest org.springframework.web.socket.server.standard.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.standard.ServerHttpResponse , java.lang.String java.lang.String , java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> , java.security.Principal java.security.Principal , WebSocketHandler org.springframework.web.socket.server.standard.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) throws org.springframework.web.socket.server.standard.HandshakeFailureException { HttpHeaders org.springframework.web.socket.server.standard.HttpHeaders = org.springframework.web.socket.server.standard.ServerHttpRequest . getHeaders ( ) ; java.net.InetSocketAddress java.net.InetSocketAddress = null ; try { java.net.InetSocketAddress = org.springframework.web.socket.server.standard.ServerHttpRequest . getLocalAddress ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } java.net.InetSocketAddress java.net.InetSocketAddress = null ; try { java.net.InetSocketAddress = org.springframework.web.socket.server.standard.ServerHttpRequest . getRemoteAddress ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { } StandardWebSocketSession org.springframework.web.socket.server.standard.StandardWebSocketSession = new StandardWebSocketSession ( org.springframework.web.socket.server.standard.HttpHeaders , java.util.Map<java.lang.String,java.lang.Object> , java.net.InetSocketAddress , java.net.InetSocketAddress , java.security.Principal ) ; StandardWebSocketHandlerAdapter org.springframework.web.socket.server.standard.StandardWebSocketHandlerAdapter = new StandardWebSocketHandlerAdapter ( org.springframework.web.socket.server.standard.WebSocketHandler , org.springframework.web.socket.server.standard.StandardWebSocketSession ) ; java.util.List<org.springframework.web.socket.server.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.server.standard.Extension> = new java.util.ArrayList<org.springframework.web.socket.server.standard.Extension> <> ( ) ; for ( WebSocketExtension org.springframework.web.socket.server.standard.WebSocketExtension : java.util.List<org.springframework.web.socket.server.standard.WebSocketExtension> ) { java.util.List<org.springframework.web.socket.server.standard.Extension> . add ( new WebSocketToStandardExtensionAdapter ( org.springframework.web.socket.server.standard.WebSocketExtension ) ) ; } void ( org.springframework.web.socket.server.standard.ServerHttpRequest , org.springframework.web.socket.server.standard.ServerHttpResponse , java.lang.String , java.util.List<org.springframework.web.socket.server.standard.Extension> , org.springframework.web.socket.server.standard.StandardWebSocketHandlerAdapter ) ; }  <METHOD_END>
<METHOD_START> protected abstract void void ( ServerHttpRequest org.springframework.web.socket.server.standard.ServerHttpRequest , ServerHttpResponse org.springframework.web.socket.server.standard.ServerHttpResponse , java.lang.String java.lang.String , java.util.List<org.springframework.web.socket.server.standard.Extension> < Extension > java.util.List<org.springframework.web.socket.server.standard.Extension> , Endpoint org.springframework.web.socket.server.standard.Endpoint )			throws org.springframework.web.socket.server.standard.HandshakeFailureException ;  <METHOD_END>
