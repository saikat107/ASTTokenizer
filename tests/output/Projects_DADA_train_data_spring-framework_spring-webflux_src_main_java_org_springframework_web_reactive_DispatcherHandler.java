<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( ApplicationContext org.springframework.web.reactive.ApplicationContext ) { void ( org.springframework.web.reactive.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContext org.springframework.web.reactive.ApplicationContext ) { void ( org.springframework.web.reactive.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected void void ( ApplicationContext org.springframework.web.reactive.ApplicationContext ) { java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerMapping> < java.lang.String , HandlerMapping > java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerMapping> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.web.reactive.ApplicationContext , HandlerMapping .class , true , false ) ; this . java.util.List<org.springframework.web.reactive.HandlerMapping> = new java.util.ArrayList <> ( java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerMapping> . values ( ) ) ; AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.reactive.HandlerMapping> ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerAdapter> < java.lang.String , HandlerAdapter > java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerAdapter> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.web.reactive.ApplicationContext , HandlerAdapter .class , true , false ) ; this . java.util.List<org.springframework.web.reactive.HandlerAdapter> = new java.util.ArrayList <> ( java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerAdapter> . values ( ) ) ; AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.reactive.HandlerAdapter> ) ; java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerResultHandler> < java.lang.String , HandlerResultHandler > java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerResultHandler> = BeanFactoryUtils . beansOfTypeIncludingAncestors ( org.springframework.web.reactive.ApplicationContext , HandlerResultHandler .class , true , false ) ; this . java.util.List<org.springframework.web.reactive.HandlerResultHandler> = new java.util.ArrayList <> ( java.util.Map<java.lang.String,org.springframework.web.reactive.HandlerResultHandler> . values ( ) ) ; AnnotationAwareOrderComparator . sort ( this . java.util.List<org.springframework.web.reactive.HandlerResultHandler> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.ServerWebExchange ) { if ( org.springframework.web.reactive.Log . isDebugEnabled ( ) ) { ServerHttpRequest org.springframework.web.reactive.ServerHttpRequest = org.springframework.web.reactive.ServerWebExchange . getRequest ( ) ; org.springframework.web.reactive.Log . debug ( STRING + org.springframework.web.reactive.ServerHttpRequest . getMethod ( ) + STRING + org.springframework.web.reactive.ServerHttpRequest . getURI ( ) + STRING ) ; } return Flux . fromIterable ( this . java.util.List<org.springframework.web.reactive.HandlerMapping> ) . concatMap ( mapping -> mapping . getHandler ( exchange ) ) . next ( ) . otherwiseIfEmpty ( Mono . error ( java.lang.Exception ) ) . then ( handler -> invokeHandler ( exchange , handler ) ) . then ( result -> handleResult ( exchange , result ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.Mono<org.springframework.web.reactive.HandlerResult> < HandlerResult > org.springframework.web.reactive.Mono<org.springframework.web.reactive.HandlerResult> ( ServerWebExchange org.springframework.web.reactive.ServerWebExchange , java.lang.Object java.lang.Object ) { for ( HandlerAdapter org.springframework.web.reactive.HandlerAdapter : this . java.util.List<org.springframework.web.reactive.HandlerAdapter> ) { if ( org.springframework.web.reactive.HandlerAdapter . supports ( java.lang.Object ) ) { return org.springframework.web.reactive.HandlerAdapter . handle ( org.springframework.web.reactive.ServerWebExchange , java.lang.Object ) ; } } return Mono . error ( new java.lang.IllegalStateException ( STRING + java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.Mono<java.lang.Void> ( ServerWebExchange org.springframework.web.reactive.ServerWebExchange , HandlerResult org.springframework.web.reactive.HandlerResult ) { return org.springframework.web.reactive.HandlerResultHandler ( org.springframework.web.reactive.HandlerResult ) . handleResult ( org.springframework.web.reactive.ServerWebExchange , org.springframework.web.reactive.HandlerResult ) . otherwise ( ex -> result . applyExceptionHandler ( ex ) . then ( exceptionResult -> getResultHandler ( exceptionResult ) . handleResult ( exchange , exceptionResult ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.HandlerResultHandler org.springframework.web.reactive.HandlerResultHandler ( HandlerResult org.springframework.web.reactive.HandlerResult ) { for ( HandlerResultHandler org.springframework.web.reactive.HandlerResultHandler : this . java.util.List<org.springframework.web.reactive.HandlerResultHandler> ) { if ( org.springframework.web.reactive.HandlerResultHandler . supports ( org.springframework.web.reactive.HandlerResult ) ) { return org.springframework.web.reactive.HandlerResultHandler ; } } throw new java.lang.IllegalStateException ( STRING + org.springframework.web.reactive.HandlerResult . getReturnValue ( ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.reactive.WebHandler org.springframework.web.reactive.WebHandler ( ApplicationContext org.springframework.web.reactive.ApplicationContext ) { return new org.springframework.web.reactive.DispatcherHandler ( org.springframework.web.reactive.ApplicationContext ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.web.reactive.HttpHandler org.springframework.web.reactive.HttpHandler ( ApplicationContext org.springframework.web.reactive.ApplicationContext ) { return WebHttpHandlerBuilder . applicationContext ( org.springframework.web.reactive.ApplicationContext ) . build ( ) ; }  <METHOD_END>
