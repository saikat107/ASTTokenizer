<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ( ) { return org.springframework.boot.cli.compiler.ResolveDependencyCoordinatesTransformationTests .this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver ; }  <METHOD_END>
<METHOD_START> @ Before public void void ( ) { given ( this . org.springframework.boot.cli.compiler.ArtifactCoordinatesResolver . getGroupId ( STRING ) ) . willReturn ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . addImport ( null , null , java.util.Arrays . java.util.List ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . addStarImport ( STRING , java.util.Arrays . java.util.List ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . addStaticImport ( null , null , null , java.util.Arrays . java.util.List ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.cli.compiler.ModuleNode . addStaticStarImport ( null , null , java.util.Arrays . java.util.List ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PackageNode org.springframework.boot.cli.compiler.PackageNode = new PackageNode ( STRING ) ; org.springframework.boot.cli.compiler.PackageNode . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; this . org.springframework.boot.cli.compiler.ModuleNode . setPackage ( org.springframework.boot.cli.compiler.PackageNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; org.springframework.boot.cli.compiler.ClassNode . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) {	}  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; FieldNode org.springframework.boot.cli.compiler.FieldNode = new FieldNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) , org.springframework.boot.cli.compiler.ClassNode , null ) ; org.springframework.boot.cli.compiler.ClassNode . addField ( org.springframework.boot.cli.compiler.FieldNode ) ; org.springframework.boot.cli.compiler.FieldNode . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; ConstructorNode org.springframework.boot.cli.compiler.ConstructorNode = new ConstructorNode ( NUMBER , null ) ; org.springframework.boot.cli.compiler.ConstructorNode . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; org.springframework.boot.cli.compiler.ClassNode . addMethod ( org.springframework.boot.cli.compiler.ConstructorNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; MethodNode org.springframework.boot.cli.compiler.MethodNode = new MethodNode ( STRING , NUMBER , new ClassNode ( java.lang.Void .class ) , new Parameter [ NUMBER ] , new ClassNode [ NUMBER ] , null ) ; org.springframework.boot.cli.compiler.MethodNode . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; org.springframework.boot.cli.compiler.ClassNode . addMethod ( org.springframework.boot.cli.compiler.MethodNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; Parameter org.springframework.boot.cli.compiler.Parameter = new Parameter ( new ClassNode ( java.lang.Object .class ) , STRING ) ; org.springframework.boot.cli.compiler.Parameter . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; MethodNode org.springframework.boot.cli.compiler.MethodNode = new MethodNode ( STRING , NUMBER , new ClassNode ( java.lang.Void .class ) , new Parameter [] { org.springframework.boot.cli.compiler.Parameter } , new ClassNode [ NUMBER ] , null ) ; org.springframework.boot.cli.compiler.ClassNode . addMethod ( org.springframework.boot.cli.compiler.MethodNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( STRING , NUMBER , new ClassNode ( java.lang.Object .class ) ) ; this . org.springframework.boot.cli.compiler.ModuleNode . addClass ( org.springframework.boot.cli.compiler.ClassNode ) ; DeclarationExpression org.springframework.boot.cli.compiler.DeclarationExpression = new DeclarationExpression ( new VariableExpression ( STRING ) , null , new ConstantExpression ( STRING ) ) ; org.springframework.boot.cli.compiler.DeclarationExpression . addAnnotation ( this . org.springframework.boot.cli.compiler.AnnotationNode ) ; BlockStatement org.springframework.boot.cli.compiler.BlockStatement = new BlockStatement ( java.util.Arrays . java.util.List<T> ( ( Statement ) new ExpressionStatement ( org.springframework.boot.cli.compiler.DeclarationExpression ) ) , new VariableScope ( ) ) ; MethodNode org.springframework.boot.cli.compiler.MethodNode = new MethodNode ( STRING , NUMBER , new ClassNode ( java.lang.Void .class ) , new Parameter [ NUMBER ] , new ClassNode [ NUMBER ] , org.springframework.boot.cli.compiler.BlockStatement ) ; org.springframework.boot.cli.compiler.ClassNode . addMethod ( org.springframework.boot.cli.compiler.MethodNode ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.cli.compiler.AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode ( ) { ClassNode org.springframework.boot.cli.compiler.ClassNode = new ClassNode ( Grab .class ) ; AnnotationNode org.springframework.boot.cli.compiler.AnnotationNode = new AnnotationNode ( org.springframework.boot.cli.compiler.ClassNode ) ; org.springframework.boot.cli.compiler.AnnotationNode . addMember ( STRING , new ConstantExpression ( STRING ) ) ; return org.springframework.boot.cli.compiler.AnnotationNode ; }  <METHOD_END>
<METHOD_START> private void void ( ) { this . org.springframework.boot.cli.compiler.ASTTransformation . visit ( new ASTNode [] { this . org.springframework.boot.cli.compiler.ModuleNode } , this . org.springframework.boot.cli.compiler.SourceUnit ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) { Expression org.springframework.boot.cli.compiler.Expression = this . org.springframework.boot.cli.compiler.AnnotationNode . getMember ( java.lang.String ) ; if ( org.springframework.boot.cli.compiler.Expression instanceof ConstantExpression ) { return ( ( ConstantExpression ) org.springframework.boot.cli.compiler.Expression ) . getValue ( ) ; } else if ( org.springframework.boot.cli.compiler.Expression == null ) { return null ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } }  <METHOD_END>
