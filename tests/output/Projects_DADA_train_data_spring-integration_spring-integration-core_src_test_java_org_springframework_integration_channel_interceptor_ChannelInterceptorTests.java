<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.interceptor.Message<> . getHeaders ( ) . get ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor .class . java.lang.String ( ) ) ) ; assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( NUMBER , org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor . int ( ) ) ; assertTrue ( org.springframework.integration.channel.interceptor.QueueChannel . removeInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsNullInterceptor . int ( ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( STRING , org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests .this . org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; assertTrue ( boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } } ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests .this . org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; assertTrue ( boolean ) ; java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( NUMBER ) ; final QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( NUMBER ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; if ( boolean ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } java.util.concurrent.atomic.AtomicInteger . int ( ) ; } } ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertNotNull ( org.springframework.integration.channel.interceptor.QueueChannel . removeInterceptor ( NUMBER ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) , NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; if ( boolean ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final AbstractMessageChannel org.springframework.integration.channel.interceptor.AbstractMessageChannel = new AbstractMessageChannel ( ) { @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; } } ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ( ) ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ( ) ; org.springframework.integration.channel.interceptor.AbstractMessageChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ) ; org.springframework.integration.channel.interceptor.AbstractMessageChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ) ; try { org.springframework.integration.channel.interceptor.AbstractMessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor . boolean ( ) ) ; assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , long long ) { throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ( ) ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ( ) ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor . void ( new java.lang.RuntimeException ( STRING ) ) ; this . org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ) ; this . org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor ) ; try { this . org.springframework.integration.channel.interceptor.QueueChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.Throwable ( ) . java.lang.String ( ) ) ; } assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor . boolean ( ) ) ; assertFalse ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.AfterCompletionTestInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor . java.util.concurrent.atomic.AtomicInteger ( ) . int ( ) ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsFalseInterceptor ( ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = new GenericMessage < java.lang.String > ( STRING ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( org.springframework.integration.channel.interceptor.Message<> ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsFalseInterceptor . java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertNull ( org.springframework.integration.channel.interceptor.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; final java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger = new java.util.concurrent.atomic.AtomicInteger ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new ChannelInterceptorAdapter ( ) { @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests .this . org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; if ( org.springframework.integration.channel.interceptor.Message<> != null ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.integration.channel.interceptor.Message<> ; } } ) ; org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage < java.lang.String > ( STRING ) ) ; Message < ? > org.springframework.integration.channel.interceptor.Message<?> = org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; assertEquals ( NUMBER , java.util.concurrent.atomic.AtomicInteger . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { assertNotNull ( org.springframework.integration.channel.interceptor.MessageChannel ) ; assertSame ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests .this . org.springframework.integration.channel.interceptor.QueueChannel , org.springframework.integration.channel.interceptor.MessageChannel ) ; if ( org.springframework.integration.channel.interceptor.Message<> != null ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; } java.util.concurrent.atomic.AtomicInteger . int ( ) ; return org.springframework.integration.channel.interceptor.Message<> ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ( ) ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor = new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ( ) ; org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor . void ( new java.lang.RuntimeException ( STRING ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor ) ; try { org.springframework.integration.channel.interceptor.QueueChannel . receive ( NUMBER ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertEquals ( STRING , java.lang.Exception . java.lang.String ( ) ) ; } assertTrue ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor . boolean ( ) ) ; assertFalse ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreReceiveReturnsTrueInterceptor . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.integration.channel.interceptor.ConfigurableApplicationContext = new ClassPathXmlApplicationContext ( STRING , org.springframework.integration.channel.interceptor.ChannelInterceptorTests .class ) ; ChannelInterceptorAware org.springframework.integration.channel.interceptor.ChannelInterceptorAware = org.springframework.integration.channel.interceptor.ConfigurableApplicationContext . getBean ( STRING , AbstractMessageChannel .class ) ; java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> < ChannelInterceptor > java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> = org.springframework.integration.channel.interceptor.ChannelInterceptorAware . getChannelInterceptors ( ) ; ChannelInterceptor org.springframework.integration.channel.interceptor.ChannelInterceptor = java.util.List<org.springframework.integration.channel.interceptor.ChannelInterceptor> . get ( NUMBER ) ; assertThat ( org.springframework.integration.channel.interceptor.ChannelInterceptor , Matchers . instanceOf ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor .class ) ) ; java.lang.String java.lang.String = ( ( org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor ) org.springframework.integration.channel.interceptor.ChannelInterceptor ) . java.lang.String ( ) ; assertTrue ( StringUtils . hasText ( java.lang.String ) ) ; assertEquals ( STRING , java.lang.String ) ; org.springframework.integration.channel.interceptor.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { TestUtils . TestUtils TestUtils.TestApplicationContext = TestUtils . createTestApplicationContext ( ) ; QueueChannel org.springframework.integration.channel.interceptor.QueueChannel = new QueueChannel ( ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; final java.util.List<org.springframework.integration.channel.interceptor.Message<?>> < Message < ? > > java.util.List<org.springframework.integration.channel.interceptor.Message<?>> = new java.util.ArrayList<org.springframework.integration.channel.interceptor.Message<?>> <> ( ) ; PollingConsumer org.springframework.integration.channel.interceptor.PollingConsumer = new PollingConsumer ( org.springframework.integration.channel.interceptor.QueueChannel , message -> { messages . add ( message ) ; latch1 . countDown ( ) ; latch2 . countDown ( ) ; } ) ; TestUtils.TestApplicationContext . registerBean ( STRING , org.springframework.integration.channel.interceptor.PollingConsumer ) ; TestUtils.TestApplicationContext . refresh ( ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage <> ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . addInterceptor ( new org.springframework.integration.channel.interceptor.ChannelInterceptorTests.TestExecutorInterceptor ( ) ) ; org.springframework.integration.channel.interceptor.QueueChannel . send ( new GenericMessage <> ( STRING ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , java.util.List<org.springframework.integration.channel.interceptor.Message<?>> . size ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.channel.interceptor.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.integration.channel.interceptor.Message<?>> . get ( NUMBER ) . getPayload ( ) ) ; TestUtils.TestApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; return MessageBuilder . fromMessage ( org.springframework.integration.channel.interceptor.Message<> ) . setHeader ( this . java.lang.Class<? extends org.springframework.integration.channel.interceptor.ChannelInterceptorTests.PreSendReturnsMessageInterceptor> ( ) . java.lang.String ( ) , java.util.concurrent.atomic.AtomicInteger . int ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> protected int int ( ) { return java.util.concurrent.atomic.AtomicInteger . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; return null ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . java.lang.RuntimeException = java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( ) { return this . java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { assertNotNull ( org.springframework.integration.channel.interceptor.Message<> ) ; java.util.concurrent.atomic.AtomicInteger . int ( ) ; if ( this . java.lang.RuntimeException != null ) { throw this . java.lang.RuntimeException ; } return org.springframework.integration.channel.interceptor.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , boolean boolean , java.lang.Exception java.lang.Exception ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . java.lang.RuntimeException = java.lang.RuntimeException ; }  <METHOD_END>
<METHOD_START> public java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicInteger ( ) { return this . java.util.concurrent.atomic.AtomicInteger ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; if ( this . java.lang.RuntimeException != null ) { throw this . java.lang.RuntimeException ; } return true ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , java.lang.Exception java.lang.Exception ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MessageChannel org.springframework.integration.channel.interceptor.MessageChannel ) { java.util.concurrent.atomic.AtomicInteger . int ( ) ; return false ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.channel.interceptor.Message<?> < ? > org.springframework.integration.channel.interceptor.Message<?> ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , MessageHandler org.springframework.integration.channel.interceptor.MessageHandler ) { return MessageBuilder . withPayload ( ( ( java.lang.String ) org.springframework.integration.channel.interceptor.Message<> . getPayload ( ) ) . java.lang.String ( ) ) . copyHeaders ( org.springframework.integration.channel.interceptor.Message<> . getHeaders ( ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.channel.interceptor.Message<?> , MessageChannel org.springframework.integration.channel.interceptor.MessageChannel , MessageHandler org.springframework.integration.channel.interceptor.MessageHandler , java.lang.Exception java.lang.Exception ) {		}  <METHOD_END>
