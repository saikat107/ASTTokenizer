<METHOD_START> @ Test public void void ( ) java.lang.Exception { JsonContent < java.lang.Object > org.springframework.boot.test.json.JsonContent<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) . write ( org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.JsonContent<java.lang.Object> ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; java.util.List<org.springframework.boot.test.json.ExampleObject> < ExampleObject > java.util.List<org.springframework.boot.test.json.ExampleObject> = java.util.Collections . java.util.List ( org.springframework.boot.test.json.ExampleObject ) ; JsonContent < java.lang.Object > org.springframework.boot.test.json.JsonContent<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) . write ( java.util.List<org.springframework.boot.test.json.ExampleObject> ) ; assertThat ( org.springframework.boot.test.json.JsonContent<java.lang.Object> ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; ExampleObject [] org.springframework.boot.test.json.ExampleObject[] = new ExampleObject [] { org.springframework.boot.test.json.ExampleObject } ; JsonContent < java.lang.Object > org.springframework.boot.test.json.JsonContent<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) . write ( org.springframework.boot.test.json.ExampleObject[] ) ; assertThat ( org.springframework.boot.test.json.JsonContent<java.lang.Object> ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.LinkedHashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.boot.test.json.ExampleObject ) ; JsonContent < java.lang.Object > org.springframework.boot.test.json.JsonContent<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) . write ( java.util.Map<java.lang.String,java.lang.Object> ) ; assertThat ( org.springframework.boot.test.json.JsonContent<java.lang.Object> ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( null , ResolvableType . forClass ( ExampleObject .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( java.lang.Class<? extends org.springframework.boot.test.json.AbstractJsonMarshalTesterTests> ( ) , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . parse ( java.lang.String . byte[] ( ) ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . parse ( java.lang.String ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . read ( STRING ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.File java.io.File = this . org.springframework.boot.test.json.TemporaryFolder . newFile ( STRING ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( ) , java.io.File ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . read ( java.io.File ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.InputStream java.io.InputStream = new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . read ( java.io.InputStream ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Resource org.springframework.boot.test.json.Resource = new ByteArrayResource ( java.lang.String . byte[] ( ) ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . read ( org.springframework.boot.test.json.Resource ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.Reader java.io.Reader = new java.io.StringReader ( java.lang.String ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . read ( java.io.Reader ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . parse ( java.lang.String ) ) . asList ( ) . containsOnly ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . parse ( java.lang.String ) ) . asArray ( ) . containsOnly ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResolvableType org.springframework.boot.test.json.ResolvableType = org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes . org.springframework.boot.test.json.ResolvableType ( STRING ) ; AbstractJsonMarshalTester < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> = org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.ResolvableType ) ; assertThat ( org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> . parse ( java.lang.String ) ) . asMap ( ) . containsEntry ( STRING , org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> protected static final org.springframework.boot.test.json.ExampleObject org.springframework.boot.test.json.ExampleObject ( java.lang.String java.lang.String , int int ) { ExampleObject org.springframework.boot.test.json.ExampleObject = new ExampleObject ( ) ; org.springframework.boot.test.json.ExampleObject . setName ( java.lang.String ) ; org.springframework.boot.test.json.ExampleObject . setAge ( int ) ; return org.springframework.boot.test.json.ExampleObject ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( ResolvableType org.springframework.boot.test.json.ResolvableType ) { return org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( org.springframework.boot.test.json.AbstractJsonMarshalTesterTests .class , org.springframework.boot.test.json.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> protected abstract org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> < java.lang.Object > org.springframework.boot.test.json.AbstractJsonMarshalTester<java.lang.Object> ( java.lang.Class<?> < ? > java.lang.Class<?> , ResolvableType org.springframework.boot.test.json.ResolvableType );  <METHOD_END>
<METHOD_START> public static org.springframework.boot.test.json.ResolvableType org.springframework.boot.test.json.ResolvableType ( java.lang.String java.lang.String ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( org.springframework.boot.test.json.AbstractJsonMarshalTesterTests.ResolvableTypes .class , java.lang.String ) ; return ResolvableType . forField ( java.lang.reflect.Field ) ; }  <METHOD_END>
