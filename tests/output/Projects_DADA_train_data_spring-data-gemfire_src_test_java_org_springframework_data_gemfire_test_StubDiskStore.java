<METHOD_START> public static org.springframework.data.gemfire.test.DiskStore org.springframework.data.gemfire.test.DiskStore ( final java.lang.String java.lang.String ) { return java.util.Map<java.lang.String,org.springframework.data.gemfire.test.DiskStore> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( boolean boolean ) { this . boolean = boolean ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( long long ) { this . long = long ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( long long ) { this . long = long ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( int int ) { this . int = int ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( java.io.File [] java.io.File[] ) { this . java.io.File[] = java.io.File[] ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( java.io.File [] java.io.File[] , int [] int[] ) { this . java.io.File[] = java.io.File[] ; this . int[] = int[] ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( final float float ) { this . float = float ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStoreFactory org.springframework.data.gemfire.test.DiskStoreFactory ( final float float ) { this . float = float ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.gemfire.test.DiskStore org.springframework.data.gemfire.test.DiskStore ( final java.lang.String java.lang.String ) { DiskStore org.springframework.data.gemfire.test.DiskStore = mock ( DiskStore .class , java.lang.String ) ; when ( org.springframework.data.gemfire.test.DiskStore . getName ( ) ) . thenReturn ( java.lang.String ) ; when ( org.springframework.data.gemfire.test.DiskStore . getAllowForceCompaction ( ) ) . thenReturn ( boolean ) ; when ( org.springframework.data.gemfire.test.DiskStore . getAutoCompact ( ) ) . thenReturn ( boolean ) ; when ( org.springframework.data.gemfire.test.DiskStore . getCompactionThreshold ( ) ) . thenReturn ( int ) ; when ( org.springframework.data.gemfire.test.DiskStore . getDiskUsageCriticalPercentage ( ) ) . thenReturn ( float ) ; when ( org.springframework.data.gemfire.test.DiskStore . getDiskUsageWarningPercentage ( ) ) . thenReturn ( float ) ; when ( org.springframework.data.gemfire.test.DiskStore . getDiskDirs ( ) ) . thenReturn ( java.io.File[] ) ; when ( org.springframework.data.gemfire.test.DiskStore . getDiskDirSizes ( ) ) . thenReturn ( int[] ) ; when ( org.springframework.data.gemfire.test.DiskStore . getMaxOplogSize ( ) ) . thenReturn ( long ) ; when ( org.springframework.data.gemfire.test.DiskStore . getQueueSize ( ) ) . thenReturn ( int ) ; when ( org.springframework.data.gemfire.test.DiskStore . getTimeInterval ( ) ) . thenReturn ( long ) ; when ( org.springframework.data.gemfire.test.DiskStore . getWriteBufferSize ( ) ) . thenReturn ( int ) ; java.util.Map<java.lang.String,org.springframework.data.gemfire.test.DiskStore> . put ( java.lang.String , org.springframework.data.gemfire.test.DiskStore ) ; return org.springframework.data.gemfire.test.DiskStore ; }  <METHOD_END>
