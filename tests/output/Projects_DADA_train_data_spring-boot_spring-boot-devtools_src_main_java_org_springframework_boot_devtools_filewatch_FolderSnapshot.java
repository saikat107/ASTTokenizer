<METHOD_START> void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; Assert . isTrue ( java.io.File . boolean ( ) , STRING ) ; this . java.io.File = java.io.File ; this . java.util.Date = new java.util.Date ( ) ; java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> = new java.util.LinkedHashSet<org.springframework.boot.devtools.filewatch.FileSnapshot> <> ( ) ; void ( java.io.File , java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) ; this . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> = java.util.Collections . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ( java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) { java.io.File [] java.io.File[] = java.io.File . java.io.File[] ( ) ; if ( java.io.File[] != null ) { for ( java.io.File java.io.File : java.io.File[] ) { if ( java.io.File . boolean ( ) && ! java.util.Set<java.lang.String> . boolean ( java.io.File . java.lang.String ( ) ) ) { void ( java.io.File , java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) ; } else if ( java.io.File . boolean ( ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> . add ( new FileSnapshot ( java.io.File ) ) ; } } } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.devtools.filewatch.ChangedFiles org.springframework.boot.devtools.filewatch.ChangedFiles ( org.springframework.boot.devtools.filewatch.FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot , java.io.FileFilter java.io.FileFilter ) { Assert . notNull ( org.springframework.boot.devtools.filewatch.FolderSnapshot , STRING ) ; java.io.File java.io.File = this . java.io.File ; Assert . isTrue ( org.springframework.boot.devtools.filewatch.FolderSnapshot . java.io.File . boolean ( java.io.File ) , STRING + java.io.File + STRING ) ; java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> < ChangedFile > java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> = new java.util.LinkedHashSet<org.springframework.boot.devtools.filewatch.ChangedFile> <> ( ) ; java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> < java.io.File , FileSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> ( ) ; for ( FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot : org.springframework.boot.devtools.filewatch.FolderSnapshot . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) { if ( boolean ( java.io.FileFilter , org.springframework.boot.devtools.filewatch.FileSnapshot ) ) { FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot = java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> . remove ( org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) ) ; if ( org.springframework.boot.devtools.filewatch.FileSnapshot == null ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) , Type . ADD ) ) ; } else if ( ! org.springframework.boot.devtools.filewatch.FileSnapshot . equals ( org.springframework.boot.devtools.filewatch.FileSnapshot ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) , Type . MODIFY ) ) ; } } } for ( FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot : java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> . values ( ) ) { if ( boolean ( java.io.FileFilter , org.springframework.boot.devtools.filewatch.FileSnapshot ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> . add ( new ChangedFile ( java.io.File , org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) , Type . DELETE ) ) ; } } return new ChangedFiles ( java.io.File , java.util.Set<org.springframework.boot.devtools.filewatch.ChangedFile> ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.io.FileFilter java.io.FileFilter , FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot ) { return ( java.io.FileFilter == null || ! java.io.FileFilter . boolean ( org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> < java.io.File , FileSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> ( ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> < java.io.File , FileSnapshot > java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> = new java.util.LinkedHashMap<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> <> ( ) ; for ( FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot : this . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) { java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> . put ( org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) , org.springframework.boot.devtools.filewatch.FileSnapshot ) ; } return java.util.Map<java.io.File,org.springframework.boot.devtools.filewatch.FileSnapshot> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( java.lang.Object instanceof org.springframework.boot.devtools.filewatch.FolderSnapshot ) { return boolean ( ( org.springframework.boot.devtools.filewatch.FolderSnapshot ) java.lang.Object , null ) ; } return super. boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.boot.devtools.filewatch.FolderSnapshot org.springframework.boot.devtools.filewatch.FolderSnapshot , java.io.FileFilter java.io.FileFilter ) { if ( this . java.io.File . boolean ( org.springframework.boot.devtools.filewatch.FolderSnapshot . java.io.File ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> = java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ( this . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> , java.io.FileFilter ) ; java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> = java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ( org.springframework.boot.devtools.filewatch.FolderSnapshot . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> , java.io.FileFilter ) ; return java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> . equals ( java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) ; } return false ; }  <METHOD_END>
<METHOD_START> private java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ( java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> , java.io.FileFilter java.io.FileFilter ) { if ( java.io.FileFilter == null ) { return java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ; } java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> < FileSnapshot > java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> = new java.util.LinkedHashSet<org.springframework.boot.devtools.filewatch.FileSnapshot> <> ( ) ; for ( FileSnapshot org.springframework.boot.devtools.filewatch.FileSnapshot : java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ) { if ( java.io.FileFilter . boolean ( org.springframework.boot.devtools.filewatch.FileSnapshot . getFile ( ) ) ) { java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> . add ( org.springframework.boot.devtools.filewatch.FileSnapshot ) ; } } return java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { int int = this . java.io.File . int ( ) ; int = NUMBER * int + this . java.util.Set<org.springframework.boot.devtools.filewatch.FileSnapshot> . hashCode ( ) ; return int ; }  <METHOD_END>
<METHOD_START> public java.io.File java.io.File ( ) { return this . java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.io.File + STRING + this . java.util.Date ; }  <METHOD_END>
