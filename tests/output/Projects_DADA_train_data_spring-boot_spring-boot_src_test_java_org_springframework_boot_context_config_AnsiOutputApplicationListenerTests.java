<METHOD_START> @ Before public void void ( ) { AnsiOutput . setEnabled ( Enabled . DETECT ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { void ( ) ; if ( this . org.springframework.boot.context.config.ConfigurableApplicationContext != null ) { this . org.springframework.boot.context.config.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.boot.context.config.SpringApplication . setDefaultProperties ( java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; assertThat ( AnsiOutputEnabledValue . get ( ) ) . isEqualTo ( Enabled . ALWAYS ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.boot.context.config.SpringApplication . setDefaultProperties ( java.util.Map<java.lang.String,java.lang.Object> ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; assertThat ( AnsiOutputEnabledValue . get ( ) ) . isEqualTo ( Enabled . NEVER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableEnvironment org.springframework.boot.context.config.ConfigurableEnvironment = new StandardEnvironment ( ) ; TestPropertySourceUtils . addInlinedPropertiesToEnvironment ( org.springframework.boot.context.config.ConfigurableEnvironment , STRING ) ; SpringApplication org.springframework.boot.context.config.SpringApplication = new SpringApplication ( org.springframework.boot.context.config.AnsiOutputApplicationListenerTests.Config .class ) ; org.springframework.boot.context.config.SpringApplication . setEnvironment ( org.springframework.boot.context.config.ConfigurableEnvironment ) ; org.springframework.boot.context.config.SpringApplication . setWebApplicationType ( WebApplicationType . NONE ) ; this . org.springframework.boot.context.config.ConfigurableApplicationContext = org.springframework.boot.context.config.SpringApplication . run ( ) ; assertThat ( AnsiOutputEnabledValue . get ( ) ) . isEqualTo ( Enabled . NEVER ) ; }  <METHOD_END>
