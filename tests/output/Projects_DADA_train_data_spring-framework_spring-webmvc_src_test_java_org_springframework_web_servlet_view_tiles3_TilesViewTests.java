<METHOD_START> @ Before public void void ( ) java.lang.Exception { MockServletContext org.springframework.web.servlet.view.tiles3.MockServletContext = new MockServletContext ( ) ; StaticWebApplicationContext org.springframework.web.servlet.view.tiles3.StaticWebApplicationContext = new StaticWebApplicationContext ( ) ; org.springframework.web.servlet.view.tiles3.StaticWebApplicationContext . setServletContext ( org.springframework.web.servlet.view.tiles3.MockServletContext ) ; org.springframework.web.servlet.view.tiles3.StaticWebApplicationContext . refresh ( ) ; org.springframework.web.servlet.view.tiles3.MockHttpServletRequest = new MockHttpServletRequest ( ) ; org.springframework.web.servlet.view.tiles3.MockHttpServletRequest . setAttribute ( DispatcherServlet . WEB_APPLICATION_CONTEXT_ATTRIBUTE , org.springframework.web.servlet.view.tiles3.StaticWebApplicationContext ) ; org.springframework.web.servlet.view.tiles3.MockHttpServletResponse = new MockHttpServletResponse ( ) ; org.springframework.web.servlet.view.tiles3.Renderer = mock ( Renderer .class ) ; org.springframework.web.servlet.view.tiles3.TilesView = new TilesView ( ) ; org.springframework.web.servlet.view.tiles3.TilesView . setServletContext ( org.springframework.web.servlet.view.tiles3.MockServletContext ) ; org.springframework.web.servlet.view.tiles3.TilesView . setRenderer ( org.springframework.web.servlet.view.tiles3.Renderer ) ; org.springframework.web.servlet.view.tiles3.TilesView . setUrl ( java.lang.String ) ; org.springframework.web.servlet.view.tiles3.TilesView . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> <> ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , STRING ) ; org.springframework.web.servlet.view.tiles3.TilesView . render ( java.util.Map<java.lang.String,java.lang.Object> , org.springframework.web.servlet.view.tiles3.MockHttpServletRequest , org.springframework.web.servlet.view.tiles3.MockHttpServletResponse ) ; assertEquals ( STRING , org.springframework.web.servlet.view.tiles3.MockHttpServletRequest . getAttribute ( STRING ) ) ; verify ( org.springframework.web.servlet.view.tiles3.Renderer ) . render ( eq ( java.lang.String ) , isA ( Request .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.tiles3.TilesView . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.tiles3.MockHttpServletRequest , org.springframework.web.servlet.view.tiles3.MockHttpServletResponse ) ; assertNull ( org.springframework.web.servlet.view.tiles3.MockHttpServletRequest . getAttribute ( AbstractRequest . FORCE_INCLUDE_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.servlet.view.tiles3.TilesView . setAlwaysInclude ( true ) ; org.springframework.web.servlet.view.tiles3.TilesView . render ( new java.util.HashMap <> ( ) , org.springframework.web.servlet.view.tiles3.MockHttpServletRequest , org.springframework.web.servlet.view.tiles3.MockHttpServletResponse ) ; assertTrue ( ( java.lang.Boolean ) org.springframework.web.servlet.view.tiles3.MockHttpServletRequest . getAttribute ( AbstractRequest . FORCE_INCLUDE_ATTRIBUTE_NAME ) ) ; }  <METHOD_END>
