<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String ... java.lang.String[] ) { void ( java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ) { if ( java.util.Collection<java.lang.String> != null ) { for ( java.lang.String java.lang.String : java.util.Collection<java.lang.String> ) { this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . put ( java.lang.String , org.springframework.cache.caffeine.Cache ( java.lang.String ) ) ; } this . boolean = false ; } else { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> public void void ( Caffeine < java.lang.Object , java.lang.Object > org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> ) { Assert . notNull ( org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> , STRING ) ; void ( org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> public void void ( CaffeineSpec org.springframework.cache.caffeine.CaffeineSpec ) { void ( Caffeine . from ( org.springframework.cache.caffeine.CaffeineSpec ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { void ( Caffeine . from ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( CacheLoader < java.lang.Object , java.lang.Object > org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> ) { if ( ! ObjectUtils . nullSafeEquals ( this . org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> , org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> ) ) { this . org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> = org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> ; void ( ) ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { if ( this . boolean != boolean ) { this . boolean = boolean ; void ( ) ; } }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Collections . java.util.Set ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.caffeine.Cache org.springframework.cache.caffeine.Cache ( java.lang.String java.lang.String ) { Cache org.springframework.cache.caffeine.Cache = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . get ( java.lang.String ) ; if ( org.springframework.cache.caffeine.Cache == null && this . boolean ) { synchronized ( this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> ) { org.springframework.cache.caffeine.Cache = this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . get ( java.lang.String ) ; if ( org.springframework.cache.caffeine.Cache == null ) { org.springframework.cache.caffeine.Cache = org.springframework.cache.caffeine.Cache ( java.lang.String ) ; this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . put ( java.lang.String , org.springframework.cache.caffeine.Cache ) ; } } } return org.springframework.cache.caffeine.Cache ; }  <METHOD_END>
<METHOD_START> protected org.springframework.cache.caffeine.Cache org.springframework.cache.caffeine.Cache ( java.lang.String java.lang.String ) { return new CaffeineCache ( java.lang.String , createNativeCaffeineCache ( java.lang.String ) , boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> protected com . com.github . com.github . com.github . com.github . com.github < java.lang.Object , java.lang.Object > createNativeCaffeineCache ( java.lang.String java.lang.String ) { if ( this . org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> != null ) { return this . org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> . build ( this . org.springframework.cache.caffeine.CacheLoader<java.lang.Object,java.lang.Object> ) ; } else { return this . org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> . build ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Caffeine < java.lang.Object , java.lang.Object > org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> ) { if ( ! ObjectUtils . nullSafeEquals ( this . org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> , org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> ) ) { this . org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> = org.springframework.cache.caffeine.Caffeine<java.lang.Object,java.lang.Object> ; void ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.cache.caffeine.Cache> < java.lang.String , Cache > java.util.Map.Entry<java.lang.String,org.springframework.cache.caffeine.Cache> : this . java.util.concurrent.ConcurrentMap<java.lang.String,org.springframework.cache.caffeine.Cache> . entrySet ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.cache.caffeine.Cache> . setValue ( org.springframework.cache.caffeine.Cache ( java.util.Map.Entry<java.lang.String,org.springframework.cache.caffeine.Cache> . getKey ( ) ) ) ; } }  <METHOD_END>
