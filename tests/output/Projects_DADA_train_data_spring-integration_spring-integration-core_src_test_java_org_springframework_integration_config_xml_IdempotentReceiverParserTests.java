<METHOD_START> @ Test public void void ( ) { assertSame ( this . org.springframework.integration.config.xml.MessageSelector , getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING ) ) ; assertNull ( getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING ) ) ; assertFalse ( getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING , java.lang.Boolean .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) getPropertyValue ( this . org.springframework.integration.config.xml.BeanPostProcessor , STRING , java.util.Map .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertFalse ( java.util.List<java.lang.String> . boolean ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertSame ( this . org.springframework.integration.config.xml.MessageChannel , getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING ) ) ; assertTrue ( getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING , java.lang.Boolean .class ) ) ; java.lang.Object java.lang.Object = getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING ) ; assertThat ( java.lang.Object , instanceOf ( MetadataStoreSelector .class ) ) ; assertSame ( this . org.springframework.integration.config.xml.MessageProcessor<java.lang.String> , getPropertyValue ( java.lang.Object , STRING ) ) ; assertSame ( this . org.springframework.integration.config.xml.MessageProcessor<java.lang.String> , getPropertyValue ( java.lang.Object , STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) getPropertyValue ( this . org.springframework.integration.config.xml.BeanPostProcessor , STRING , java.util.Map .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertFalse ( java.util.List<java.lang.String> . boolean ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Object java.lang.Object = getPropertyValue ( this . org.springframework.integration.config.xml.IdempotentReceiverInterceptor , STRING ) ; assertThat ( java.lang.Object , instanceOf ( MetadataStoreSelector .class ) ) ; assertSame ( this . org.springframework.integration.config.xml.MetadataStore , getPropertyValue ( java.lang.Object , STRING ) ) ; java.lang.Object java.lang.Object = getPropertyValue ( java.lang.Object , STRING ) ; assertThat ( java.lang.Object , instanceOf ( ExpressionEvaluatingMessageProcessor .class ) ) ; assertThat ( java.lang.Object . java.lang.String ( ) , containsString ( STRING ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = ( java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > ) getPropertyValue ( this . org.springframework.integration.config.xml.BeanPostProcessor , STRING , java.util.Map .class ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( STRING ) ; assertNotNull ( java.util.List<java.lang.String> ) ; assertFalse ( java.util.List<java.lang.String> . boolean ( ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; assertTrue ( java.util.List<java.lang.String> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING + STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { org.springframework.integration.config.xml.ApplicationContext ( STRING ) ; fail ( STRING ) ; } catch ( BeanDefinitionParsingException org.springframework.integration.config.xml.BeanDefinitionParsingException ) { assertThat ( org.springframework.integration.config.xml.BeanDefinitionParsingException . getMessage ( ) , containsString ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.integration.config.xml.ApplicationContext org.springframework.integration.config.xml.ApplicationContext ( java.lang.String java.lang.String ) throws java.lang.Exception { PropertiesFactoryBean org.springframework.integration.config.xml.PropertiesFactoryBean = new PropertiesFactoryBean ( ) ; org.springframework.integration.config.xml.PropertiesFactoryBean . setLocation ( new ClassPathResource ( STRING ) ) ; org.springframework.integration.config.xml.PropertiesFactoryBean . afterPropertiesSet ( ) ; java.util.Properties java.util.Properties = org.springframework.integration.config.xml.PropertiesFactoryBean . getObject ( ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( ( java.util.Properties . java.lang.String ( STRING ) + java.util.Properties . java.lang.String ( java.lang.String ) + java.util.Properties . java.lang.String ( STRING ) ) . byte[] ( ) ) ; GenericApplicationContext org.springframework.integration.config.xml.GenericApplicationContext = new GenericApplicationContext ( ) ; XmlBeanDefinitionReader org.springframework.integration.config.xml.XmlBeanDefinitionReader = new XmlBeanDefinitionReader ( org.springframework.integration.config.xml.GenericApplicationContext ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . setValidationMode ( XmlBeanDefinitionReader . VALIDATION_XSD ) ; org.springframework.integration.config.xml.XmlBeanDefinitionReader . loadBeanDefinitions ( new InputStreamResource ( java.io.ByteArrayInputStream ) ) ; org.springframework.integration.config.xml.GenericApplicationContext . refresh ( ) ; return org.springframework.integration.config.xml.GenericApplicationContext ; }  <METHOD_END>
