<METHOD_START> @ Test public void void ( ) { DefaultSingletonBeanRegistry org.springframework.beans.factory.support.DefaultSingletonBeanRegistry = new DefaultSingletonBeanRegistry ( ) ; TestBean org.springframework.beans.factory.support.TestBean = new TestBean ( ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerSingleton ( STRING , org.springframework.beans.factory.support.TestBean ) ; assertSame ( org.springframework.beans.factory.support.TestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; TestBean org.springframework.beans.factory.support.TestBean = ( TestBean ) org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING , new ObjectFactory < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { return new TestBean ( ) ; } } ) ; assertSame ( org.springframework.beans.factory.support.TestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; assertSame ( org.springframework.beans.factory.support.TestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; assertSame ( org.springframework.beans.factory.support.TestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonCount ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonNames ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . destroySingletons ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonCount ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonNames ( ) . length ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSingletonBeanRegistry org.springframework.beans.factory.support.DefaultSingletonBeanRegistry = new DefaultSingletonBeanRegistry ( ) ; DerivedTestBean org.springframework.beans.factory.support.DerivedTestBean = new DerivedTestBean ( ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerSingleton ( STRING , org.springframework.beans.factory.support.DerivedTestBean ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerDisposableBean ( STRING , org.springframework.beans.factory.support.DerivedTestBean ) ; assertSame ( org.springframework.beans.factory.support.DerivedTestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; assertSame ( org.springframework.beans.factory.support.DerivedTestBean , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingleton ( STRING ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonCount ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonNames ( ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertFalse ( org.springframework.beans.factory.support.DerivedTestBean . wasDestroyed ( ) ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . destroySingletons ( ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonCount ( ) ) ; assertEquals ( NUMBER , org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . getSingletonNames ( ) . length ) ; assertTrue ( org.springframework.beans.factory.support.DerivedTestBean . wasDestroyed ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultSingletonBeanRegistry org.springframework.beans.factory.support.DefaultSingletonBeanRegistry = new DefaultSingletonBeanRegistry ( ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerDependentBean ( STRING , STRING ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerDependentBean ( STRING , STRING ) ; org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . registerDependentBean ( STRING , STRING ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertFalse ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; assertTrue ( org.springframework.beans.factory.support.DefaultSingletonBeanRegistry . isDependent ( STRING , STRING ) ) ; }  <METHOD_END>
