<METHOD_START> @ Test public void void ( ) { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; assertEquals ( org.springframework.core.ConstantsTests.A .class . java.lang.String ( ) , org.springframework.core.Constants . getClassName ( ) ) ; assertEquals ( NUMBER , org.springframework.core.Constants . getSize ( ) ) ; assertEquals ( org.springframework.core.Constants . asNumber ( STRING ) . intValue ( ) , org.springframework.core.ConstantsTests.A . int ) ; assertEquals ( org.springframework.core.Constants . asNumber ( STRING ) . intValue ( ) , org.springframework.core.ConstantsTests.A . int ) ; assertEquals ( org.springframework.core.Constants . asNumber ( STRING ) . intValue ( ) , org.springframework.core.ConstantsTests.A . int ) ; try { org.springframework.core.Constants . asNumber ( STRING ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} assertTrue ( org.springframework.core.Constants . asString ( STRING ) . equals ( org.springframework.core.ConstantsTests.A . java.lang.String ) ) ; try { org.springframework.core.Constants . asNumber ( STRING ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getNames ( STRING ) ; assertEquals ( org.springframework.core.Constants . getSize ( ) , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; java.util.Set<?> = org.springframework.core.Constants . getNames ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; java.util.Set<?> = org.springframework.core.Constants . getNames ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValuesForProperty ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Locale java.util.Locale = java.util.Locale . java.util.Locale ( ) ; java.util.Locale . void ( new java.util.Locale ( STRING , STRING ) ) ; try { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; java.util.Set<?> = org.springframework.core.Constants . getValuesForProperty ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; } finally { java.util.Locale . void ( java.util.Locale ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getNamesForSuffix ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; assertTrue ( java.util.Set<> . boolean ( STRING ) ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValuesForSuffix ( STRING ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; assertTrue ( java.util.Set<> . boolean ( new java.lang.Integer ( NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , null ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( new java.lang.Integer ( NUMBER ) , null ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCode ( STRING , null ) , STRING ) ; try { org.springframework.core.Constants . toCode ( STRING , STRING ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} try { org.springframework.core.Constants . toCode ( STRING , null ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} assertEquals ( org.springframework.core.Constants . toCodeForProperty ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForProperty ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; try { org.springframework.core.Constants . toCodeForProperty ( STRING , STRING ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , null ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( new java.lang.Integer ( NUMBER ) , null ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( STRING , STRING ) , STRING ) ; assertEquals ( org.springframework.core.Constants . toCodeForSuffix ( STRING , null ) , STRING ) ; try { org.springframework.core.Constants . toCodeForSuffix ( STRING , STRING ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} try { org.springframework.core.Constants . toCodeForSuffix ( STRING , null ) ; fail ( STRING ) ; } catch ( Constants . Constants Constants.ConstantException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValues ( null ) ; assertEquals ( STRING , NUMBER , java.util.Set<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<java.lang.Object> < java.lang.Object > java.util.Set<java.lang.Object> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.Set<java.lang.Object> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.A .class ) ; java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertEquals ( STRING , NUMBER , java.util.Set<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Constants org.springframework.core.Constants = new Constants ( org.springframework.core.ConstantsTests.NoConstants .class ) ; assertEquals ( NUMBER , org.springframework.core.Constants . getSize ( ) ) ; final java.util.Set<?> < ? > java.util.Set<?> = org.springframework.core.Constants . getValues ( STRING ) ; assertNotNull ( java.util.Set<> ) ; assertEquals ( NUMBER , java.util.Set<> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { new Constants ( null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) {} }  <METHOD_END>
