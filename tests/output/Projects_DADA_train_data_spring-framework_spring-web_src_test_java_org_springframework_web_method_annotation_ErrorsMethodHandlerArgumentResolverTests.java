<METHOD_START> @ Before public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.MethodParameter = new MethodParameter ( java.lang.Class<? extends org.springframework.web.method.annotation.ErrorsMethodHandlerArgumentResolverTests> ( ) . java.lang.reflect.Method ( STRING , Errors .class ) , NUMBER ) ; org.springframework.web.method.annotation.BindingResult = new WebDataBinder ( new java.lang.Object ( ) , STRING ) . getBindingResult ( ) ; org.springframework.web.method.annotation.NativeWebRequest = new ServletWebRequest ( new MockHttpServletRequest ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.ErrorsMethodArgumentResolver . supportsParameter ( org.springframework.web.method.annotation.MethodParameter ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAllAttributes ( org.springframework.web.method.annotation.BindingResult . getModel ( ) ) ; java.lang.Object java.lang.Object = org.springframework.web.method.annotation.ErrorsMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.NativeWebRequest , null ) ; assertSame ( java.lang.Object , org.springframework.web.method.annotation.BindingResult ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { ModelAndViewContainer org.springframework.web.method.annotation.ModelAndViewContainer = new ModelAndViewContainer ( ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAllAttributes ( org.springframework.web.method.annotation.BindingResult . getModel ( ) ) ; org.springframework.web.method.annotation.ModelAndViewContainer . addAttribute ( STRING , STRING ) ; org.springframework.web.method.annotation.ErrorsMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , org.springframework.web.method.annotation.ModelAndViewContainer , org.springframework.web.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Exception { org.springframework.web.method.annotation.ErrorsMethodArgumentResolver . resolveArgument ( org.springframework.web.method.annotation.MethodParameter , new ModelAndViewContainer ( ) , org.springframework.web.method.annotation.NativeWebRequest , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( Errors org.springframework.web.method.annotation.Errors ) {	}  <METHOD_END>
