<METHOD_START> @ java.lang.SafeVarargs protected static < T > T [] T[] ( T ... T[] ) { return T[] ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PdxInstanceMethodInterceptor org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor = newPdxInstanceMethodInterceptor ( ( java.lang.Object ) org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor . getSource ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { newPdxInstanceMethodInterceptor ( new java.lang.Object ( ) ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessageStartingWith ( java.lang.String . java.lang.String ( STRING , PdxInstance .class . java.lang.String ( ) ) ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { PdxInstanceMethodInterceptor org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor = newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor ) . isNotNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor . getSource ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { try { new PdxInstanceMethodInterceptor ( null ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . newPerson ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . java.lang.Class<? extends org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person> ( ) . java.lang.reflect.Method ( STRING ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . proceed ( ) ) . thenAnswer ( invocationOnMock -> toString . invoke ( jonDoe ) ) ; assertThat ( newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getMethod ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . proceed ( ) ; verifyZeroInteractions ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . newPerson ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . java.lang.Class<? extends org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person> ( ) . java.lang.reflect.Method ( STRING ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . hasField ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . getField ( eq ( STRING ) ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . getFirstName ( ) ) ; assertThat ( newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ) . isEqualTo ( STRING ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , never ( ) ) . proceed ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . hasField ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . getField ( eq ( STRING ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Throwable { org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . newPerson ( STRING , STRING ) ; java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person . java.lang.Class<? extends org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person> ( ) . java.lang.reflect.Method ( STRING , java.lang.String .class ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getArguments ( ) ) . thenReturn ( java.lang.String[] ( STRING ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . hasField ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . createWriter ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.support.WritablePdxInstance ) ; PdxInstanceMethodInterceptor org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor = newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor . getSource ( ) ) . isSameAs ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ) . isNull ( ) ; assertThat ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptor . getSource ( ) ) . isEqualTo ( org.springframework.data.gemfire.search.lucene.support.WritablePdxInstance ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getMethod ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getArguments ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . hasField ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.WritablePdxInstance , times ( NUMBER ) ) . setField ( eq ( STRING ) , eq ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person .class . java.lang.reflect.Method ( STRING ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . hasField ( anyString ( ) ) ) . thenReturn ( false ) ; try { newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException ) . hasMessage ( STRING , org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( java.lang.IllegalStateException ) . hasNoCause ( ) ; throw java.lang.IllegalStateException ; } finally { verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getMethod ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . hasField ( eq ( STRING ) ) ; verifyNoMoreInteractions ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person .class . java.lang.reflect.Method ( STRING , org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender .class ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . hasField ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getArguments ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender[] ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender . org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender , org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender . org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender ) ) ; try { newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException ) . hasMessage ( STRING ) ; assertThat ( java.lang.IllegalArgumentException ) . hasNoCause ( ) ; throw java.lang.IllegalArgumentException ; } finally { verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getMethod ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getArguments ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . hasField ( eq ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) java.lang.Throwable { java.lang.reflect.Method java.lang.reflect.Method = org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Person .class . java.lang.reflect.Method ( STRING , org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender .class ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getMethod ( ) ) . thenReturn ( java.lang.reflect.Method ) ; when ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation . getArguments ( ) ) . thenReturn ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender[] ( org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender . org.springframework.data.gemfire.search.lucene.support.PdxInstanceMethodInterceptorUnitTests.Gender ) ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . hasField ( eq ( STRING ) ) ) . thenReturn ( true ) ; when ( org.springframework.data.gemfire.search.lucene.support.PdxInstance . createWriter ( ) ) . thenReturn ( null ) ; try { newPdxInstanceMethodInterceptor ( org.springframework.data.gemfire.search.lucene.support.PdxInstance ) . invoke ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertThat ( java.lang.IllegalStateException ) . hasMessage ( STRING , org.springframework.data.gemfire.search.lucene.support.PdxInstance ) ; assertThat ( java.lang.IllegalStateException ) . hasNoCause ( ) ; throw java.lang.IllegalStateException ; } finally { verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getMethod ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.MethodInvocation , times ( NUMBER ) ) . getArguments ( ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . hasField ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.search.lucene.support.PdxInstance , times ( NUMBER ) ) . createWriter ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , getFirstName ( ) , getLastName ( ) ) ; }  <METHOD_END>
