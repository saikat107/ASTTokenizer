<METHOD_START> @ Before @ After public void void ( ) { this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.redis.store.PollableChannel . send ( new GenericMessage < java.lang.Integer > ( int ) ) ; } assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.redis.store.PollableChannel . send ( MutableMessageBuilder . withPayload ( int ) . build ( ) ) ; } assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageCountForAllMessageGroups ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertThat ( org.springframework.integration.redis.store.Message<> , Matchers . instanceOf ( GenericMessage .class ) ) ; assertEquals ( int , org.springframework.integration.redis.store.Message<> . getPayload ( ) ) ; } assertNull ( this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertEquals ( STRING , org.springframework.integration.redis.store.Message<> . getClass ( ) . getName ( ) ) ; assertEquals ( int , org.springframework.integration.redis.store.Message<> . getPayload ( ) ) ; } assertNull ( this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.redis.store.PollableChannel . send ( new GenericMessage < java.lang.Integer > ( int ) ) ; } assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) { for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( int ) . setPriority ( int ) . build ( ) ) ; this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( int ) . setPriority ( int ) . build ( ) ) ; } this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageCountForAllMessageGroups ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( NUMBER ) . build ( ) ) ; this . org.springframework.integration.redis.store.PollableChannel . send ( MessageBuilder . withPayload ( NUMBER ) . setPriority ( NUMBER ) . build ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroup ( STRING ) . size ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageCountForAllMessageGroups ( ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { Message < ? > org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER - int ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER - int ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; } Message < ? > org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.Message<> . getPayload ( ) ) ; org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertNull ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.redis.store.Message<> . getPayload ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; org.springframework.integration.redis.store.Message<?> = this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.redis.store.Message<> ) ; assertNull ( new IntegrationMessageHeaderAccessor ( org.springframework.integration.redis.store.Message<> ) . getPriority ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageCountForAllMessageGroups ( ) ) ; assertNull ( this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ) ; assertNull ( this . org.springframework.integration.redis.store.PollableChannel . receive ( NUMBER ) ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { this . org.springframework.integration.redis.store.PollableChannel . send ( new GenericMessage < java.lang.Integer > ( int ) ) ; } assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; this . org.springframework.integration.redis.store.RedisChannelMessageStore . removeMessageGroup ( STRING ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.redis.store.RedisChannelMessageStore . messageGroupSize ( STRING ) ) ; }  <METHOD_END>
