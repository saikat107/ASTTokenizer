<METHOD_START> public void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { super( java.lang.String , java.lang.Object[] ); this . org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> = null ; this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) { super( java.lang.String , java.lang.Object[] ); this . org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> = new BeanCreatingHandlerProvider <> ( java.lang.Class<> ) ; this . java.lang.Object = null ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketContainer org.springframework.web.socket.client.standard.WebSocketContainer ) { this . org.springframework.web.socket.client.standard.WebSocketContainer = org.springframework.web.socket.client.standard.WebSocketContainer ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.client.standard.WebSocketContainer org.springframework.web.socket.client.standard.WebSocketContainer ( ) { return this . org.springframework.web.socket.client.standard.WebSocketContainer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.web.socket.client.standard.BeanFactory ) throws org.springframework.web.socket.client.standard.BeansException { if ( this . org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> != null ) { this . org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> . setBeanFactory ( org.springframework.web.socket.client.standard.BeanFactory ) ; } }  <METHOD_END>
<METHOD_START> public void void ( TaskExecutor org.springframework.web.socket.client.standard.TaskExecutor ) { Assert . notNull ( org.springframework.web.socket.client.standard.TaskExecutor , STRING ) ; this . org.springframework.web.socket.client.standard.TaskExecutor = org.springframework.web.socket.client.standard.TaskExecutor ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.socket.client.standard.TaskExecutor org.springframework.web.socket.client.standard.TaskExecutor ( ) { return this . org.springframework.web.socket.client.standard.TaskExecutor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.web.socket.client.standard.TaskExecutor . execute ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + getUri ( ) ) ; } java.lang.Object java.lang.Object = ( java.lang.Object != null ) ? java.lang.Object : org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> . getHandler ( ) ; org.springframework.web.socket.client.standard.Session = org.springframework.web.socket.client.standard.WebSocketContainer . connectToServer ( java.lang.Object , getUri ( ) ) ; logger . info ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + getUri ( ) ) ; } java.lang.Object java.lang.Object = ( java.lang.Object != null ) ? java.lang.Object : org.springframework.web.socket.client.standard.BeanCreatingHandlerProvider<java.lang.Object> . getHandler ( ) ; org.springframework.web.socket.client.standard.Session = org.springframework.web.socket.client.standard.WebSocketContainer . connectToServer ( java.lang.Object , getUri ( ) ) ; logger . info ( STRING ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { try { if ( boolean ( ) ) { this . org.springframework.web.socket.client.standard.Session . close ( ) ; } } finally { this . org.springframework.web.socket.client.standard.Session = null ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return ( this . org.springframework.web.socket.client.standard.Session != null && this . org.springframework.web.socket.client.standard.Session . isOpen ( ) ) ; }  <METHOD_END>
