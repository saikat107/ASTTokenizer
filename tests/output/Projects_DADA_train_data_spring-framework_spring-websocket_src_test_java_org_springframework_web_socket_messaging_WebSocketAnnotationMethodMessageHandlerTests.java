<METHOD_START> @ Before public void void ( ) java.lang.Exception { this . org.springframework.web.socket.messaging.StaticApplicationContext = new StaticApplicationContext ( ) ; this . org.springframework.web.socket.messaging.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestController .class ) ; this . org.springframework.web.socket.messaging.StaticApplicationContext . registerSingleton ( STRING , org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestControllerAdvice .class ) ; this . org.springframework.web.socket.messaging.StaticApplicationContext . refresh ( ) ; SubscribableChannel org.springframework.web.socket.messaging.SubscribableChannel = Mockito . mock ( SubscribableChannel .class ) ; SimpMessageSendingOperations org.springframework.web.socket.messaging.SimpMessageSendingOperations = new SimpMessagingTemplate ( org.springframework.web.socket.messaging.SubscribableChannel ) ; this . org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestWebSocketAnnotationMethodMessageHandler = new org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestWebSocketAnnotationMethodMessageHandler ( org.springframework.web.socket.messaging.SimpMessageSendingOperations , org.springframework.web.socket.messaging.SubscribableChannel , org.springframework.web.socket.messaging.SubscribableChannel ) ; this . org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestWebSocketAnnotationMethodMessageHandler . setApplicationContext ( this . org.springframework.web.socket.messaging.StaticApplicationContext ) ; this . org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestWebSocketAnnotationMethodMessageHandler . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpMessageHeaderAccessor org.springframework.web.socket.messaging.SimpMessageHeaderAccessor = SimpMessageHeaderAccessor . create ( ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setSessionId ( STRING ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setSessionAttributes ( new java.util.concurrent.ConcurrentHashMap <> ( ) ) ; org.springframework.web.socket.messaging.SimpMessageHeaderAccessor . setDestination ( STRING ) ; Message < ? > org.springframework.web.socket.messaging.Message<?> = MessageBuilder . withPayload ( new byte [ NUMBER ] ) . setHeaders ( org.springframework.web.socket.messaging.SimpMessageHeaderAccessor ) . build ( ) ; this . org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestWebSocketAnnotationMethodMessageHandler . handleMessage ( org.springframework.web.socket.messaging.Message<> ) ; org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestControllerAdvice org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestControllerAdvice = this . org.springframework.web.socket.messaging.StaticApplicationContext . getBean ( org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestControllerAdvice .class ) ; assertTrue ( org.springframework.web.socket.messaging.WebSocketAnnotationMethodMessageHandlerTests.TestControllerAdvice . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ MessageMapping ( STRING ) public void void ( ) { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ MessageExceptionHandler public void void ( java.lang.IllegalStateException java.lang.IllegalStateException ) { this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void ( SimpMessageSendingOperations org.springframework.web.socket.messaging.SimpMessageSendingOperations , SubscribableChannel org.springframework.web.socket.messaging.SubscribableChannel , MessageChannel org.springframework.web.socket.messaging.MessageChannel ) { super( org.springframework.web.socket.messaging.SubscribableChannel , org.springframework.web.socket.messaging.MessageChannel , org.springframework.web.socket.messaging.SimpMessageSendingOperations ); }  <METHOD_END>
