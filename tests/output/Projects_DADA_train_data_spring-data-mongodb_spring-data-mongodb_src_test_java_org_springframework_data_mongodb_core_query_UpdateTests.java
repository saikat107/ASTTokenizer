<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) . set ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . inc ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . unset ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . push ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pushAll ( STRING , new java.lang.Object [] { java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> } ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pushAll ( STRING , new java.lang.Object [] { java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> } ) ; org.springframework.data.mongodb.core.query.Update . pushAll ( STRING , new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . addToSet ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pop ( STRING , Update . Position . FIRST ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; org.springframework.data.mongodb.core.query.Update = new Update ( ) . pop ( STRING , Update . Position . LAST ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pull ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> = java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pullAll ( STRING , new java.lang.Object [] { java.util.Map<java.lang.String,java.lang.String> , java.util.Map<java.lang.String,java.lang.String> } ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . rename ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new BasicUpdate ( STRING ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . setOnInsert ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . setOnInsert ( STRING , NUMBER ) . setOnInsert ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pullAll ( STRING , new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . pullAll ( STRING , new java.lang.Object [] { STRING } ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( new Update ( ) . modifies ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = Update . fromDocument ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . set ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = Update . fromDocument ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . modifies ( STRING ) , is ( false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . addMultiFieldOperation ( STRING , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . addFieldOperation ( STRING , null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { Update . update ( null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . set ( STRING , null ) . set ( STRING , STRING ) . push ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . pop ( STRING , Update . Position . FIRST ) . set ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . set ( STRING , null ) . set ( STRING , STRING ) . push ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . pop ( STRING , Update . Position . FIRST ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update , is ( equalTo ( org.springframework.data.mongodb.core.query.Update ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . hashCode ( ) , is ( equalTo ( org.springframework.data.mongodb.core.query.Update . hashCode ( ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update , is ( equalTo ( org.springframework.data.mongodb.core.query.Update ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . hashCode ( ) , is ( equalTo ( org.springframework.data.mongodb.core.query.Update . hashCode ( ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . set ( STRING , null ) . set ( STRING , STRING ) . push ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . pop ( STRING , Update . Position . FIRST ) . set ( STRING , STRING ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . inc ( STRING , NUMBER ) . set ( STRING , null ) . set ( STRING , STRING ) . push ( STRING , java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ) . pop ( STRING , Update . Position . FIRST ) . set ( STRING , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . toString ( ) , is ( equalTo ( org.springframework.data.mongodb.core.query.Update . toString ( ) ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , is ( Document . parse ( STRING + STRING + STRING + STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . currentDate ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , true ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . currentDate ( STRING ) . currentDate ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , true ) . append ( STRING , true ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . currentTimestamp ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , new Document ( STRING , STRING ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . currentTimestamp ( STRING ) . currentTimestamp ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , new Document ( STRING , STRING ) ) . append ( STRING , new Document ( STRING , STRING ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . currentDate ( STRING ) . currentTimestamp ( STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , true ) . append ( STRING , new Document ( STRING , STRING ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . addToSet ( STRING , new DateTime ( ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . toString ( ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . multiply ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . multiply ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . bitwise ( STRING ) . and ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . bitwise ( STRING ) . or ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . bitwise ( STRING ) . xor ( NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( ) . append ( STRING , new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . push ( STRING ) . atPosition ( - NUMBER ) . each ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) ; org.springframework.data.mongodb.core.query.Update . pullAll ( STRING , new java.lang.String [] { STRING } ) ; org.springframework.data.mongodb.core.query.Update . pullAll ( STRING , new java.lang.String [] { STRING } ) ; Document org.springframework.data.mongodb.core.query.Document = org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) ; Document org.springframework.data.mongodb.core.query.Document = DocumentTestUtils . getAsDocument ( org.springframework.data.mongodb.core.query.Document , STRING ) ; assertThat ( org.springframework.data.mongodb.core.query.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.mongodb.core.query.Document . get ( STRING ) , is ( notNullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . max ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new Update ( ) . min ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . max ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . min ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . max ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Update . max ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . min ( STRING , NUMBER ) ; org.springframework.data.mongodb.core.query.Update . min ( STRING , NUMBER ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , NUMBER ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . max ( STRING , java.util.Date ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , java.util.Date ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Date java.util.Date = new java.util.Date ( ) ; Update org.springframework.data.mongodb.core.query.Update = new Update ( ) . min ( STRING , java.util.Date ) ; assertThat ( org.springframework.data.mongodb.core.query.Update . getUpdateObject ( ) , equalTo ( new Document ( STRING , new Document ( STRING , java.util.Date ) ) ) ) ; }  <METHOD_END>
