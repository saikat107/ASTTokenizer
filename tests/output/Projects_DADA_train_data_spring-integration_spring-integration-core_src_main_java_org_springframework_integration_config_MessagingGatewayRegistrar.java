<METHOD_START> @ java.lang.Override public void void ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata , BeanDefinitionRegistry org.springframework.integration.config.BeanDefinitionRegistry ) { if ( org.springframework.integration.config.AnnotationMetadata != null && org.springframework.integration.config.AnnotationMetadata . isAnnotated ( MessagingGateway .class . java.lang.String ( ) ) ) { Assert . isTrue ( org.springframework.integration.config.AnnotationMetadata . isInterface ( ) , STRING ) ; java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> < MultiValueMap < java.lang.String , java.lang.Object > > java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> = java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> ( org.springframework.integration.config.AnnotationMetadata ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.integration.config.AnnotationMetadata . getAnnotationAttributes ( MessagingGateway .class . java.lang.String ( ) ) ; void ( java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> , java.util.Map<java.lang.String,java.lang.Object> ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING , org.springframework.integration.config.AnnotationMetadata . getClassName ( ) ) ; BeanDefinitionReaderUtils . registerBeanDefinition ( this . org.springframework.integration.config.BeanDefinitionHolder ( java.util.Map<java.lang.String,java.lang.Object> ) , org.springframework.integration.config.BeanDefinitionRegistry ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.config.BeanDefinitionHolder org.springframework.integration.config.BeanDefinitionHolder ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] java.util.Map<java.lang.String,java.lang.Object>[] = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; Assert . state ( ! boolean || ! boolean , STRING ) ; boolean boolean = ! ObjectUtils . isEmpty ( java.util.Map<java.lang.String,java.lang.Object>[] ) ; Assert . state ( ! boolean || ! boolean , STRING ) ; BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GatewayProxyFactoryBean .class ) ; if ( boolean || boolean ) { BeanDefinitionBuilder org.springframework.integration.config.BeanDefinitionBuilder = BeanDefinitionBuilder . genericBeanDefinition ( GatewayMethodMetadata .class ) ; if ( boolean ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new ManagedMap < java.lang.String , java.lang.Object > ( ) ; for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object>[] ) { java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; boolean boolean = StringUtils . hasText ( java.lang.String ) ; if ( boolean == StringUtils . hasText ( java.lang.String ) ) { throw new BeanDefinitionStoreException ( STRING + STRING ) ; } BeanDefinition org.springframework.integration.config.BeanDefinition = new RootBeanDefinition ( boolean ? LiteralExpression .class : ExpressionFactoryBean .class ) ; org.springframework.integration.config.BeanDefinition . getConstructorArgumentValues ( ) . addGenericArgumentValue ( boolean ? java.lang.String : java.lang.String ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) , org.springframework.integration.config.BeanDefinition ) ; } org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> ) ; org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.lang.String ) ; } if ( java.lang.String == null || AnnotationConstants . NULL . equals ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , null ) ; } else if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } if ( StringUtils . hasText ( java.lang.String ) ) { org.springframework.integration.config.BeanDefinitionBuilder . addPropertyReference ( STRING , java.lang.String ) ; } org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; org.springframework.integration.config.BeanDefinitionBuilder . addPropertyValue ( STRING , java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ; java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = STRING ; } java.lang.String java.lang.String = ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { java.lang.String = java.beans.Introspector . java.lang.String ( java.lang.String . java.lang.String ( java.lang.String . int ( STRING ) + NUMBER ) ) ; } org.springframework.integration.config.BeanDefinitionBuilder . addConstructorArgValue ( java.lang.String ) ; AbstractBeanDefinition org.springframework.integration.config.AbstractBeanDefinition = org.springframework.integration.config.BeanDefinitionBuilder . getBeanDefinition ( ) ; org.springframework.integration.config.AbstractBeanDefinition . addMetadataAttribute ( new BeanMetadataAttribute ( IntegrationConfigUtils . FACTORY_BEAN_OBJECT_TYPE , java.lang.String ) ) ; return new BeanDefinitionHolder ( org.springframework.integration.config.AbstractBeanDefinition , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> < MultiValueMap < java.lang.String , java.lang.Object > > java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> ( AnnotationMetadata org.springframework.integration.config.AnnotationMetadata ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.integration.config.AnnotationMetadata . getAnnotationTypes ( ) ; java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> < MultiValueMap < java.lang.String , java.lang.Object > > java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> = new java.util.ArrayList<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> < MultiValueMap < java.lang.String , java.lang.Object > > ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = org.springframework.integration.config.AnnotationMetadata . getMetaAnnotationTypes ( java.lang.String ) ; if ( java.util.Set<java.lang.String> . boolean ( MessagingGateway .class . java.lang.String ( ) ) ) { for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> . add ( org.springframework.integration.config.AnnotationMetadata . getAllAnnotationAttributes ( java.lang.String ) ) ; } } } return java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> ; }  <METHOD_END>
<METHOD_START> private void void ( java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> < MultiValueMap < java.lang.String , java.lang.Object > > java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { for ( java.util.Map.Entry<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map.Entry<java.lang.String,java.lang.Object> : java.util.Map<java.lang.String,java.lang.Object> . java.util.Set<java.util.Map.Entry<java.lang.String,java.lang.Object>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.Object ( ) ; if ( ! MessagingAnnotationUtils . hasValue ( java.lang.Object ) ) { for ( MultiValueMap < java.lang.String , java.lang.Object > org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object> : java.util.List<org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object>> ) { java.lang.Object java.lang.Object = org.springframework.integration.config.MultiValueMap<java.lang.String,java.lang.Object> . getFirst ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) ) ; if ( MessagingAnnotationUtils . hasValue ( java.lang.Object ) ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<java.lang.String,java.lang.Object> . java.lang.String ( ) , java.lang.Object ) ; break; } } } } }  <METHOD_END>
