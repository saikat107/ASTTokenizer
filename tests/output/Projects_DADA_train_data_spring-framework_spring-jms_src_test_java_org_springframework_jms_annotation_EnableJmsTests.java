<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsSampleConfig .class , SampleBean .class ) ; testSampleConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsFullConfig .class , FullBean .class ) ; testFullConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsFullConfigurableConfig .class , FullConfigurableBean .class ) ; testFullConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsCustomConfig .class , CustomBean .class ) ; testCustomConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsCustomContainerFactoryConfig .class , DefaultBean .class ) ; testExplicitContainerFactoryConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , DefaultBean .class ) ; testDefaultContainerFactoryConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , DefaultBean .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerContainerTestFactory .class ) ; MessageListenerTestContainer org.springframework.jms.annotation.MessageListenerTestContainer = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) ; assertTrue ( org.springframework.jms.annotation.MessageListenerTestContainer . isAutoStartup ( ) ) ; assertTrue ( org.springframework.jms.annotation.MessageListenerTestContainer . isStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsAutoStartupFalseConfig .class , DefaultBean .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerContainerTestFactory .class ) ; MessageListenerTestContainer org.springframework.jms.annotation.MessageListenerTestContainer = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) ; assertFalse ( org.springframework.jms.annotation.MessageListenerTestContainer . isAutoStartup ( ) ) ; assertFalse ( org.springframework.jms.annotation.MessageListenerTestContainer . isStarted ( ) ) ; JmsListenerEndpointRegistry org.springframework.jms.annotation.JmsListenerEndpointRegistry = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerEndpointRegistry .class ) ; org.springframework.jms.annotation.JmsListenerEndpointRegistry . start ( ) ; assertTrue ( org.springframework.jms.annotation.MessageListenerTestContainer . isStarted ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) org.springframework.jms.annotation.JMSException { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsHandlerMethodFactoryConfig .class , ValidationBean .class ) ; org.springframework.jms.annotation.ExpectedException . expect ( ListenerExecutionFailedException .class ) ; org.springframework.jms.annotation.ExpectedException . expectCause ( Is .< MethodArgumentNotValidException > isA ( MethodArgumentNotValidException .class ) ) ; testJmsHandlerMethodFactoryConfiguration ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , JmsListenerRepeatableBean .class ) ; testJmsListenerRepeatable ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , JmsListenersBean .class ) ; testJmsListenerRepeatable ( org.springframework.jms.annotation.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try ( ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , org.springframework.jms.annotation.EnableJmsTests.ComposedJmsListenersBean .class ) ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainer ( STRING ) . getEndpoint ( ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getId ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getDestination ( ) ) ; assertNull ( org.springframework.jms.annotation.MethodJmsListenerEndpoint . getConcurrency ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainer ( STRING ) . getEndpoint ( ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getId ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getDestination ( ) ) ; assertEquals ( STRING , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getConcurrency ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.jms.annotation.ExpectedException . expect ( BeanCreationException .class ) ; org.springframework.jms.annotation.ExpectedException . expectMessage ( STRING ) ; new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsSampleConfig .class , CustomBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.EnableJmsTests.EnableJmsDefaultContainerFactoryConfig .class , org.springframework.jms.annotation.EnableJmsTests.LazyBean .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( STRING , JmsListenerContainerTestFactory .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( org.springframework.jms.annotation.EnableJmsTests.LazyBean .class ) ; assertEquals ( NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MessageListenerTestContainer org.springframework.jms.annotation.MessageListenerTestContainer = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) ; assertTrue ( STRING + org.springframework.jms.annotation.MessageListenerTestContainer , org.springframework.jms.annotation.MessageListenerTestContainer . isStarted ( ) ) ; org.springframework.jms.annotation.ConfigurableApplicationContext . close ( ) ; assertTrue ( STRING + org.springframework.jms.annotation.MessageListenerTestContainer , org.springframework.jms.annotation.MessageListenerTestContainer . isStopped ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.PropertySourcesPlaceholderConfigurer org.springframework.jms.annotation.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JmsListenerEndpointRegistrar org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) { org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setEndpointRegistry ( org.springframework.jms.annotation.JmsListenerEndpointRegistry ( ) ) ; SimpleJmsListenerEndpoint org.springframework.jms.annotation.SimpleJmsListenerEndpoint = new SimpleJmsListenerEndpoint ( ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setId ( STRING ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setDestination ( STRING ) ; org.springframework.jms.annotation.SimpleJmsListenerEndpoint . setMessageListener ( org.springframework.jms.annotation.MessageListener ( ) ) ; org.springframework.jms.annotation.JmsListenerEndpointRegistrar . registerEndpoint ( org.springframework.jms.annotation.SimpleJmsListenerEndpoint ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerEndpointRegistry org.springframework.jms.annotation.JmsListenerEndpointRegistry ( ) { return new JmsListenerEndpointRegistry ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.MessageListener org.springframework.jms.annotation.MessageListener ( ) { return new MessageListenerAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JmsListenerEndpointRegistrar org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) { org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setContainerFactory ( org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JmsListenerEndpointRegistrar org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) { org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setMessageHandlerMethodFactory ( org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.MessageHandlerMethodFactory org.springframework.jms.annotation.MessageHandlerMethodFactory ( ) { DefaultMessageHandlerMethodFactory org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory = new DefaultMessageHandlerMethodFactory ( ) ; org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory . setValidator ( new TestValidator ( ) ) ; return org.springframework.jms.annotation.DefaultMessageHandlerMethodFactory ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( JmsListenerEndpointRegistrar org.springframework.jms.annotation.JmsListenerEndpointRegistrar ) { org.springframework.jms.annotation.JmsListenerEndpointRegistrar . setContainerFactory ( org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = new JmsListenerContainerTestFactory ( ) ; org.springframework.jms.annotation.JmsListenerContainerTestFactory . setAutoStartup ( false ) ; return org.springframework.jms.annotation.JmsListenerContainerTestFactory ; }  <METHOD_END>
<METHOD_START> @ JmsListener ( destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.jms.annotation.EnableJmsTests.OrderQueueListener ( java.lang.String = STRING ) @ org.springframework.jms.annotation.EnableJmsTests.BillingQueueListener ( java.lang.String = STRING , java.lang.String = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
