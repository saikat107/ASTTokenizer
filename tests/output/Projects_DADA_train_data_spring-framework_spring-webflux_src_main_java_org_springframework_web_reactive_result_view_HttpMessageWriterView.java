<METHOD_START> public void ( Encoder < ? > org.springframework.web.reactive.result.view.Encoder<?> ) { this( new EncoderHttpMessageWriter <> ( org.springframework.web.reactive.result.view.Encoder<> ) ); }  <METHOD_END>
<METHOD_START> public void ( HttpMessageWriter < ? > org.springframework.web.reactive.result.view.HttpMessageWriter<?> ) { Assert . notNull ( org.springframework.web.reactive.result.view.HttpMessageWriter<> , STRING ) ; this . org.springframework.web.reactive.result.view.HttpMessageWriter<?> = org.springframework.web.reactive.result.view.HttpMessageWriter<> ; this . boolean = org.springframework.web.reactive.result.view.HttpMessageWriter<> . canWrite ( ResolvableType . forClass ( java.util.Map .class ) , null ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.result.view.HttpMessageWriter<?> < ? > org.springframework.web.reactive.result.view.HttpMessageWriter<?> ( ) { return this . org.springframework.web.reactive.result.view.HttpMessageWriter<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.reactive.result.view.MediaType> < MediaType > java.util.List<org.springframework.web.reactive.result.view.MediaType> ( ) { return this . org.springframework.web.reactive.result.view.HttpMessageWriter<> . getWritableMediaTypes ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ) { this . java.util.Set<java.lang.String> . void ( ) ; if ( java.util.Set<java.lang.String> != null ) { this . java.util.Set<java.lang.String> . boolean ( java.util.Set<java.lang.String> ) ; } }  <METHOD_END>
<METHOD_START> public final java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( ) { return this . java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ java.lang.SuppressWarnings ( STRING ) public org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> , MediaType org.springframework.web.reactive.result.view.MediaType , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { return java.util.Optional<java.lang.Object> ( java.util.Map<java.lang.String,> ) . java.util.Optional<java.lang.Object> ( java.lang.Object -> org.springframework.web.reactive.result.view.Mono ( java.lang.Object , org.springframework.web.reactive.result.view.MediaType , org.springframework.web.reactive.result.view.ServerWebExchange ) ) . orElseGet ( ( ) exchange . getResponse ( ) . setComplete ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Optional<java.lang.Object> < java.lang.Object > java.util.Optional<java.lang.Object> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = java.util.Map<java.lang.String,> . java.util.Set<java.util.Map.Entry<java.lang.String,>> ( ) . java.util.stream.Stream<java.util.Map.Entry<java.lang.String,>> ( ) . java.util.stream.Stream<java.util.Map.Entry<java.lang.String,>> ( this :: boolean ) . java.util.Map<java.lang.String,> ( java.util.stream.Collectors . java.util.stream.Collector<java.util.Map.Entry<java.lang.String,>,?,java.util.Map<java.lang.String,>> ( java.util.Map . java.util.Map.Entry :: java.lang.String , java.util.Map . java.util.Map.Entry :: getValue ) ) ; if ( java.util.Map<java.lang.String,> . boolean ( ) ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( ) ; } else if ( java.util.Map<java.lang.String,> . int ( ) == NUMBER ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.util.Map<java.lang.String,> . java.util.Collection<> ( ) . java.util.Iterator<> ( ) . next ( ) ) ; } else if ( this . boolean ) { return java.util.Optional . java.util.Optional<java.lang.Object> ( java.util.Map<java.lang.String,> ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.util.Map<java.lang.String,> + STRING + STRING + org.springframework.web.reactive.result.view.HttpMessageWriter<?> ( ) . getClass ( ) . getName ( ) ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Map . java.util.Map.Entry<java.lang.String,?> < java.lang.String , ? > java.util.Map.Entry<java.lang.String,?> ) { if ( java.util.Map.Entry<java.lang.String,> . getValue ( ) == null ) { return false ; } if ( ! java.util.Set<java.lang.String> ( ) . boolean ( ) && ! java.util.Set<java.lang.String> ( ) . boolean ( java.util.Map.Entry<java.lang.String,> . java.lang.String ( ) ) ) { return false ; } ResolvableType org.springframework.web.reactive.result.view.ResolvableType = ResolvableType . forInstance ( java.util.Map.Entry<java.lang.String,> . getValue ( ) ) ; return org.springframework.web.reactive.result.view.HttpMessageWriter<?> ( ) . canWrite ( org.springframework.web.reactive.result.view.ResolvableType , null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private < T > org.springframework.web.reactive.result.view.Mono<java.lang.Void> < java.lang.Void > org.springframework.web.reactive.result.view.Mono<java.lang.Void> ( T T , MediaType org.springframework.web.reactive.result.view.MediaType , ServerWebExchange org.springframework.web.reactive.result.view.ServerWebExchange ) { Publisher < T > org.springframework.web.reactive.result.view.Publisher<T> = Mono . justOrEmpty ( T ) ; ResolvableType org.springframework.web.reactive.result.view.ResolvableType = ResolvableType . forClass ( T . java.lang.Class<? extends java.lang.Object> ( ) ) ; return ( ( HttpMessageWriter < T > ) this . org.springframework.web.reactive.result.view.HttpMessageWriter<> ) . write ( org.springframework.web.reactive.result.view.Publisher<T> , org.springframework.web.reactive.result.view.ResolvableType , org.springframework.web.reactive.result.view.MediaType , org.springframework.web.reactive.result.view.ServerWebExchange . getResponse ( ) , java.util.Collections . java.util.Map<java.lang.Object,java.lang.Object> ( ) ) ; }  <METHOD_END>
