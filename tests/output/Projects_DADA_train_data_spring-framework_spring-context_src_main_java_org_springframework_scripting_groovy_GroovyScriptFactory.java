<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , GroovyObjectCustomizer org.springframework.scripting.groovy.GroovyObjectCustomizer ) { this( java.lang.String ); this . org.springframework.scripting.groovy.GroovyObjectCustomizer = org.springframework.scripting.groovy.GroovyObjectCustomizer ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , CompilerConfiguration org.springframework.scripting.groovy.CompilerConfiguration ) { this( java.lang.String ); this . org.springframework.scripting.groovy.CompilerConfiguration = org.springframework.scripting.groovy.CompilerConfiguration ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , CompilationCustomizer ... org.springframework.scripting.groovy.CompilationCustomizer[] ) { this( java.lang.String ); if ( ! ObjectUtils . isEmpty ( org.springframework.scripting.groovy.CompilationCustomizer[] ) ) { this . org.springframework.scripting.groovy.CompilerConfiguration = new CompilerConfiguration ( ) ; this . org.springframework.scripting.groovy.CompilerConfiguration . addCompilationCustomizers ( org.springframework.scripting.groovy.CompilationCustomizer[] ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.scripting.groovy.BeanFactory ) { if ( org.springframework.scripting.groovy.BeanFactory instanceof ConfigurableListableBeanFactory ) { ( ( ConfigurableListableBeanFactory ) org.springframework.scripting.groovy.BeanFactory ) . ignoreDependencyType ( MetaClass .class ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . org.springframework.scripting.groovy.GroovyClassLoader = org.springframework.scripting.groovy.GroovyClassLoader ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.scripting.groovy.GroovyClassLoader org.springframework.scripting.groovy.GroovyClassLoader ( ) { synchronized ( this . java.lang.Object ) { if ( this . org.springframework.scripting.groovy.GroovyClassLoader == null ) { this . org.springframework.scripting.groovy.GroovyClassLoader = org.springframework.scripting.groovy.GroovyClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; } return this . org.springframework.scripting.groovy.GroovyClassLoader ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.scripting.groovy.GroovyClassLoader org.springframework.scripting.groovy.GroovyClassLoader ( java.lang.ClassLoader java.lang.ClassLoader ) { return ( this . org.springframework.scripting.groovy.CompilerConfiguration != null ? new GroovyClassLoader ( java.lang.ClassLoader , this . org.springframework.scripting.groovy.CompilerConfiguration ) : new GroovyClassLoader ( java.lang.ClassLoader ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.groovy.ScriptSource , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.io.IOException , org.springframework.scripting.groovy.ScriptCompilationException { synchronized ( this . java.lang.Object ) { try { java.lang.Class<?> < ? > java.lang.Class<?> ; this . boolean = false ; if ( this . org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder != null ) { java.lang.Object java.lang.Object = this . org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder . java.lang.Object ; this . org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder = null ; return java.lang.Object ; } if ( this . java.lang.Class<> == null || org.springframework.scripting.groovy.ScriptSource . isModified ( ) ) { this . java.lang.Class<?> = org.springframework.scripting.groovy.GroovyClassLoader ( ) . parseClass ( org.springframework.scripting.groovy.ScriptSource . getScriptAsString ( ) , org.springframework.scripting.groovy.ScriptSource . suggestedClassName ( ) ) ; if ( Script .class . boolean ( this . java.lang.Class<> ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.scripting.groovy.ScriptSource , this . java.lang.Class<> ) ; this . java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) ; return java.lang.Object ; } else { this . java.lang.Class<?> = this . java.lang.Class<> ; } } java.lang.Class<?> = this . java.lang.Class<> ; return java.lang.Object ( org.springframework.scripting.groovy.ScriptSource , java.lang.Class<> ) ; } catch ( CompilationFailedException org.springframework.scripting.groovy.CompilationFailedException ) { this . java.lang.Class<?> = null ; this . java.lang.Class<?> = null ; throw new ScriptCompilationException ( org.springframework.scripting.groovy.ScriptSource , org.springframework.scripting.groovy.CompilationFailedException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ScriptSource org.springframework.scripting.groovy.ScriptSource )			throws java.io.IOException , org.springframework.scripting.groovy.ScriptCompilationException { synchronized ( this . java.lang.Object ) { try { if ( this . java.lang.Class<> == null || org.springframework.scripting.groovy.ScriptSource . isModified ( ) ) { this . boolean = true ; this . java.lang.Class<?> = org.springframework.scripting.groovy.GroovyClassLoader ( ) . parseClass ( org.springframework.scripting.groovy.ScriptSource . getScriptAsString ( ) , org.springframework.scripting.groovy.ScriptSource . suggestedClassName ( ) ) ; if ( Script .class . boolean ( this . java.lang.Class<> ) ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.scripting.groovy.ScriptSource , this . java.lang.Class<> ) ; this . java.lang.Class<?> = ( java.lang.Object != null ? java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) : null ) ; this . org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder = new org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder ( java.lang.Object ) ; } else { this . java.lang.Class<?> = this . java.lang.Class<> ; } } return this . java.lang.Class<> ; } catch ( CompilationFailedException org.springframework.scripting.groovy.CompilationFailedException ) { this . java.lang.Class<?> = null ; this . java.lang.Class<?> = null ; this . org.springframework.scripting.groovy.GroovyScriptFactory.CachedResultHolder = null ; throw new ScriptCompilationException ( org.springframework.scripting.groovy.ScriptSource , org.springframework.scripting.groovy.CompilationFailedException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ScriptSource org.springframework.scripting.groovy.ScriptSource ) { synchronized ( this . java.lang.Object ) { return ( org.springframework.scripting.groovy.ScriptSource . isModified ( ) || this . boolean ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( ScriptSource org.springframework.scripting.groovy.ScriptSource , java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.scripting.groovy.ScriptCompilationException { try { GroovyObject org.springframework.scripting.groovy.GroovyObject = ( GroovyObject ) ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; if ( this . org.springframework.scripting.groovy.GroovyObjectCustomizer != null ) { this . org.springframework.scripting.groovy.GroovyObjectCustomizer . customize ( org.springframework.scripting.groovy.GroovyObject ) ; } if ( org.springframework.scripting.groovy.GroovyObject instanceof Script ) { return ( ( Script ) org.springframework.scripting.groovy.GroovyObject ) . run ( ) ; } else { return org.springframework.scripting.groovy.GroovyObject ; } } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { throw new ScriptCompilationException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.NoSuchMethodException ) ; } catch ( java.lang.InstantiationException java.lang.InstantiationException ) { throw new ScriptCompilationException ( org.springframework.scripting.groovy.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.InstantiationException ) ; } catch ( java.lang.IllegalAccessException java.lang.IllegalAccessException ) { throw new ScriptCompilationException ( org.springframework.scripting.groovy.ScriptSource , STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.IllegalAccessException ) ; } catch ( java.lang.reflect.InvocationTargetException java.lang.reflect.InvocationTargetException ) { throw new ScriptCompilationException ( STRING + java.lang.Class<> . java.lang.String ( ) , java.lang.reflect.InvocationTargetException . java.lang.Throwable ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + this . java.lang.String + STRING ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Object java.lang.Object ) { this . java.lang.Object = java.lang.Object ; }  <METHOD_END>
