<METHOD_START> public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { if ( org.springframework.context.annotation.ConfigurationClassEnhancer.EnhancedConfiguration .class . boolean ( java.lang.Class<> ) ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( java.lang.String . java.lang.String ( STRING + STRING + STRING + STRING + STRING , java.lang.Class<> . java.lang.String ( ) ) ) ; } return java.lang.Class<> ; } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.context.annotation.Enhancer ( java.lang.Class<> , java.lang.ClassLoader ) ) ; if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( java.lang.String . java.lang.String ( STRING , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ) ; } return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.Enhancer org.springframework.context.annotation.Enhancer ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.ClassLoader java.lang.ClassLoader ) { Enhancer org.springframework.context.annotation.Enhancer = new Enhancer ( ) ; org.springframework.context.annotation.Enhancer . setSuperclass ( java.lang.Class<> ) ; org.springframework.context.annotation.Enhancer . setInterfaces ( new java.lang.Class<?> < ? > [] { org.springframework.context.annotation.ConfigurationClassEnhancer.EnhancedConfiguration .class } ) ; org.springframework.context.annotation.Enhancer . setUseFactory ( false ) ; org.springframework.context.annotation.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; org.springframework.context.annotation.Enhancer . setStrategy ( new org.springframework.context.annotation.ConfigurationClassEnhancer.BeanFactoryAwareGeneratorStrategy ( java.lang.ClassLoader ) ) ; org.springframework.context.annotation.Enhancer . setCallbackFilter ( org.springframework.context.annotation.ConfigurationClassEnhancer.ConditionalCallbackFilter ) ; org.springframework.context.annotation.Enhancer . setCallbackTypes ( org.springframework.context.annotation.ConfigurationClassEnhancer.ConditionalCallbackFilter . java.lang.Class<?>[] ( ) ) ; return org.springframework.context.annotation.Enhancer ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( Enhancer org.springframework.context.annotation.Enhancer ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.Enhancer . createClass ( ) ; Enhancer . registerStaticCallbacks ( java.lang.Class<> , org.springframework.context.annotation.Callback[] ) ; return java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method );  <METHOD_END>
<METHOD_START> public void ( Callback [] org.springframework.context.annotation.Callback[] ) { this . org.springframework.context.annotation.Callback[] = org.springframework.context.annotation.Callback[] ; this . java.lang.Class<?>[] = new java.lang.Class<?> < ? > [ callbacks . length ] ; for ( int int = NUMBER ; int < callbacks . length ; int ++ ) { this . java.lang.Class<?>[] [ int ] = org.springframework.context.annotation.Callback[] [ int ] . getClass ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.reflect.Method java.lang.reflect.Method ) { for ( int int = NUMBER ; int < this . org.springframework.context.annotation.Callback[] . length ; int ++ ) { if ( ! ( this . org.springframework.context.annotation.Callback[] [ int ] instanceof org.springframework.context.annotation.ConfigurationClassEnhancer.ConditionalCallback ) || ( ( org.springframework.context.annotation.ConfigurationClassEnhancer.ConditionalCallback ) this . org.springframework.context.annotation.Callback[] [ int ] ) . boolean ( java.lang.reflect.Method ) ) { return int ; } } throw new java.lang.IllegalStateException ( STRING + java.lang.reflect.Method . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Class<?> < ? > [] java.lang.Class<?>[] ( ) { return this . java.lang.Class<?>[] ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.context.annotation.ClassGenerator org.springframework.context.annotation.ClassGenerator ( ClassGenerator org.springframework.context.annotation.ClassGenerator ) throws java.lang.Exception { ClassEmitterTransformer org.springframework.context.annotation.ClassEmitterTransformer = new ClassEmitterTransformer ( ) { @ java.lang.Override public void void ( ) { declare_field ( Constants . ACC_PUBLIC , java.lang.String , Type . getType ( BeanFactory .class ) , null ) ; super. end_class ( ) ; } } ; return new TransformingClassGenerator ( org.springframework.context.annotation.ClassGenerator , org.springframework.context.annotation.ClassEmitterTransformer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { declare_field ( Constants . ACC_PUBLIC , java.lang.String , Type . getType ( BeanFactory .class ) , null ) ; super. end_class ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ClassGenerator org.springframework.context.annotation.ClassGenerator ) throws java.lang.Exception { if ( this . java.lang.ClassLoader == null ) { return super. generate ( org.springframework.context.annotation.ClassGenerator ) ; } java.lang.Thread java.lang.Thread = java.lang.Thread . java.lang.Thread ( ) ; java.lang.ClassLoader java.lang.ClassLoader ; try { java.lang.ClassLoader = java.lang.Thread . java.lang.ClassLoader ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { return super. generate ( org.springframework.context.annotation.ClassGenerator ) ; } boolean boolean = ! this . java.lang.ClassLoader . boolean ( java.lang.ClassLoader ) ; if ( boolean ) { java.lang.Thread . void ( this . java.lang.ClassLoader ) ; } try { return super. generate ( org.springframework.context.annotation.ClassGenerator ) ; } finally { if ( boolean ) { java.lang.Thread . void ( java.lang.ClassLoader ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.context.annotation.MethodProxy ) throws java.lang.Throwable { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ; Assert . state ( java.lang.reflect.Field != null , STRING ) ; java.lang.reflect.Field . void ( java.lang.Object , java.lang.Object[] [ NUMBER ] ) ; if ( BeanFactoryAware .class . boolean ( ClassUtils . getUserClass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.Class<? super > ( ) ) ) ) { return org.springframework.context.annotation.MethodProxy . invokeSuper ( java.lang.Object , java.lang.Object[] ) ; } return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.reflect.Method . int ( ) == NUMBER && BeanFactory .class == java.lang.reflect.Method . java.lang.Class<?>[] ( ) [ NUMBER ] && BeanFactoryAware .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.context.annotation.MethodProxy ) throws java.lang.Throwable { ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory = org.springframework.context.annotation.ConfigurableBeanFactory ( java.lang.Object ) ; java.lang.String java.lang.String = BeanAnnotationHelper . determineBeanNameFor ( java.lang.reflect.Method ) ; Scope org.springframework.context.annotation.Scope = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , Scope .class ) ; if ( org.springframework.context.annotation.Scope != null && org.springframework.context.annotation.Scope . proxyMode ( ) != ScopedProxyMode . NO ) { java.lang.String java.lang.String = ScopedProxyCreator . getTargetBeanName ( java.lang.String ) ; if ( org.springframework.context.annotation.ConfigurableBeanFactory . isCurrentlyInCreation ( java.lang.String ) ) { java.lang.String = java.lang.String ; } } if ( boolean ( org.springframework.context.annotation.ConfigurableBeanFactory , BeanFactory . FACTORY_BEAN_PREFIX + java.lang.String ) && boolean ( org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String ) ) { java.lang.Object java.lang.Object = org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( BeanFactory . FACTORY_BEAN_PREFIX + java.lang.String ) ; if ( java.lang.Object instanceof ScopedProxyFactoryBean ) { } else { return java.lang.Object ( java.lang.Object , java.lang.reflect.Method . java.lang.Class<?> ( ) , org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String ) ; } } if ( boolean ( java.lang.reflect.Method ) ) { if ( org.springframework.context.annotation.Log . isWarnEnabled ( ) && BeanFactoryPostProcessor .class . boolean ( java.lang.reflect.Method . java.lang.Class<?> ( ) ) ) { org.springframework.context.annotation.Log . warn ( java.lang.String . java.lang.String ( STRING + STRING + STRING + STRING + STRING + STRING , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) ) ) ; } return org.springframework.context.annotation.MethodProxy . invokeSuper ( java.lang.Object , java.lang.Object[] ) ; } return java.lang.Object ( java.lang.reflect.Method , java.lang.Object[] , org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String java.lang.String ) { boolean boolean = org.springframework.context.annotation.ConfigurableBeanFactory . isCurrentlyInCreation ( java.lang.String ) ; try { if ( boolean ) { org.springframework.context.annotation.ConfigurableBeanFactory . setCurrentlyInCreation ( java.lang.String , false ) ; } boolean boolean = ! ObjectUtils . isEmpty ( java.lang.Object[] ) ; if ( boolean && org.springframework.context.annotation.ConfigurableBeanFactory . isSingleton ( java.lang.String ) ) { for ( java.lang.Object java.lang.Object : java.lang.Object[] ) { if ( java.lang.Object == null ) { boolean = false ; break; } } } java.lang.Object java.lang.Object = ( boolean ? org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String , java.lang.Object[] ) : org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String ) ) ; if ( java.lang.Object != null && ! ClassUtils . isAssignableValue ( java.lang.reflect.Method . java.lang.Class<?> ( ) , java.lang.Object ) ) { java.lang.String java.lang.String = java.lang.String . java.lang.String ( STRING + STRING , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.reflect.Method . java.lang.String ( ) , java.lang.reflect.Method . java.lang.Class<?> ( ) . java.lang.String ( ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; try { BeanDefinition org.springframework.context.annotation.BeanDefinition = org.springframework.context.annotation.ConfigurableBeanFactory . getMergedBeanDefinition ( java.lang.String ) ; java.lang.String += STRING + org.springframework.context.annotation.BeanDefinition . getResourceDescription ( ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { } throw new java.lang.IllegalStateException ( java.lang.String ) ; } java.lang.reflect.Method java.lang.reflect.Method = SimpleInstantiationStrategy . getCurrentlyInvokedFactoryMethod ( ) ; if ( java.lang.reflect.Method != null ) { java.lang.String java.lang.String = BeanAnnotationHelper . determineBeanNameFor ( java.lang.reflect.Method ) ; org.springframework.context.annotation.ConfigurableBeanFactory . registerDependentBean ( java.lang.String , java.lang.String ) ; } return java.lang.Object ; } finally { if ( boolean ) { org.springframework.context.annotation.ConfigurableBeanFactory . setCurrentlyInCreation ( java.lang.String , true ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { return BeanAnnotationHelper . isBeanAnnotated ( java.lang.reflect.Method ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.context.annotation.ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory ( java.lang.Object java.lang.Object ) { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ; Assert . state ( java.lang.reflect.Field != null , STRING ) ; java.lang.Object java.lang.Object = ReflectionUtils . getField ( java.lang.reflect.Field , java.lang.Object ) ; Assert . state ( java.lang.Object != null , STRING ) ; Assert . state ( java.lang.Object instanceof ConfigurableBeanFactory , STRING ) ; return ( ConfigurableBeanFactory ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String java.lang.String ) { return ( org.springframework.context.annotation.ConfigurableBeanFactory . containsBean ( java.lang.String ) && ! org.springframework.context.annotation.ConfigurableBeanFactory . isCurrentlyInCreation ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.reflect.Method java.lang.reflect.Method ) { java.lang.reflect.Method java.lang.reflect.Method = SimpleInstantiationStrategy . getCurrentlyInvokedFactoryMethod ( ) ; return ( java.lang.reflect.Method != null && java.lang.reflect.Method . java.lang.String ( ) . boolean ( java.lang.reflect.Method . java.lang.String ( ) ) && java.util.Arrays . boolean ( java.lang.reflect.Method . java.lang.Class<?>[] ( ) , java.lang.reflect.Method . java.lang.Class<?>[] ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , final ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory , final java.lang.String java.lang.String ) { try { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; boolean boolean = java.lang.reflect.Modifier . boolean ( java.lang.Class<> . int ( ) ) ; boolean boolean = java.lang.reflect.Modifier . boolean ( java.lang.Class<> . java.lang.reflect.Method ( STRING ) . int ( ) ) ; if ( boolean || boolean ) { if ( java.lang.Class<> . boolean ( ) ) { if ( org.springframework.context.annotation.Log . isDebugEnabled ( ) ) { org.springframework.context.annotation.Log . debug ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + ( boolean ? STRING : STRING ) + STRING ) ; } return java.lang.Object ( java.lang.Object , java.lang.Class<> , org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String ) ; } else { if ( org.springframework.context.annotation.Log . isInfoEnabled ( ) ) { org.springframework.context.annotation.Log . info ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING + ( boolean ? STRING : STRING ) + STRING + STRING ) ; } return java.lang.Object ; } } } catch ( java.lang.NoSuchMethodException java.lang.NoSuchMethodException ) { } return java.lang.Object ( java.lang.Object , org.springframework.context.annotation.ConfigurableBeanFactory , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , java.lang.Class<?> < ? > java.lang.Class<?> , final ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory , final java.lang.String java.lang.String ) { return java.lang.reflect.Proxy . java.lang.Object ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.ClassLoader ( ) , new java.lang.Class<?> < ? > [] { java.lang.Class<> } , new java.lang.reflect.InvocationHandler ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] == null ) { return org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String ) ; } return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] == null ) { return org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String ) ; } return ReflectionUtils . invokeMethod ( java.lang.reflect.Method , java.lang.Object , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Object java.lang.Object ( final java.lang.Object java.lang.Object , final ConfigurableBeanFactory org.springframework.context.annotation.ConfigurableBeanFactory , final java.lang.String java.lang.String ) { Enhancer org.springframework.context.annotation.Enhancer = new Enhancer ( ) ; org.springframework.context.annotation.Enhancer . setSuperclass ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; org.springframework.context.annotation.Enhancer . setNamingPolicy ( SpringNamingPolicy . INSTANCE ) ; org.springframework.context.annotation.Enhancer . setCallbackType ( MethodInterceptor .class ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.context.annotation.Enhancer . createClass ( ) ; java.lang.Object java.lang.Object = null ; if ( org.springframework.context.annotation.SpringObjenesis . isWorthTrying ( ) ) { try { java.lang.Object = org.springframework.context.annotation.SpringObjenesis . newInstance ( java.lang.Class<> , org.springframework.context.annotation.Enhancer . getUseCache ( ) ) ; } catch ( ObjenesisException org.springframework.context.annotation.ObjenesisException ) { org.springframework.context.annotation.Log . debug ( STRING + STRING , org.springframework.context.annotation.ObjenesisException ) ; } } if ( java.lang.Object == null ) { try { java.lang.Object = ReflectionUtils . accessibleConstructor ( java.lang.Class<> ) . newInstance ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { throw new java.lang.IllegalStateException ( STRING + STRING , java.lang.Throwable ) ; } } ( ( Factory ) java.lang.Object ) . setCallback ( NUMBER , new MethodInterceptor ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.context.annotation.MethodProxy ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] . int == NUMBER ) { return org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String ) ; } return org.springframework.context.annotation.MethodProxy . invoke ( java.lang.Object , java.lang.Object[] ) ; } } ) ; return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.reflect.Method java.lang.reflect.Method , java.lang.Object [] java.lang.Object[] , MethodProxy org.springframework.context.annotation.MethodProxy ) throws java.lang.Throwable { if ( java.lang.reflect.Method . java.lang.String ( ) . boolean ( STRING ) && java.lang.Object[] . int == NUMBER ) { return org.springframework.context.annotation.ConfigurableBeanFactory . getBean ( java.lang.String ) ; } return org.springframework.context.annotation.MethodProxy . invoke ( java.lang.Object , java.lang.Object[] ) ; }  <METHOD_END>
