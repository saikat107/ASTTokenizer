<METHOD_START> @ java.lang.Override public java.util.Optional<org.springframework.data.convert.TypeInformation<?>> < TypeInformation < ? > > java.util.Optional<org.springframework.data.convert.TypeInformation<?>> ( Alias org.springframework.data.convert.Alias ) { return org.springframework.data.convert.Alias . mapTyped ( java.lang.String .class ) . flatMap ( it -> CACHE . computeIfAbsent ( it , SimpleTypeInformationMapper :: loadClass ) . map ( type -> type ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.convert.Alias org.springframework.data.convert.Alias ( TypeInformation < ? > org.springframework.data.convert.TypeInformation<?> ) { return Alias . of ( org.springframework.data.convert.TypeInformation<> . getType ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Optional<org.springframework.data.convert.ClassTypeInformation<?>> < ClassTypeInformation < ? > > java.util.Optional<org.springframework.data.convert.ClassTypeInformation<?>> ( java.lang.String java.lang.String ) { try { return java.util.Optional . java.util.Optional ( ClassTypeInformation . from ( ClassUtils . forName ( java.lang.String , null ) ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { return java.util.Optional . java.util.Optional<org.springframework.data.convert.ClassTypeInformation<?>> ( ) ; } }  <METHOD_END>
