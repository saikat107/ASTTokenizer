<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.Config .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleMessageListenerTestBean .class ) ; JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerContainerTestFactory .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; MessageListenerTestContainer org.springframework.jms.annotation.MessageListenerTestContainer = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) ; JmsListenerEndpoint org.springframework.jms.annotation.JmsListenerEndpoint = org.springframework.jms.annotation.MessageListenerTestContainer . getEndpoint ( ) ; assertEquals ( STRING , MethodJmsListenerEndpoint .class , org.springframework.jms.annotation.JmsListenerEndpoint . getClass ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerEndpoint ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleMessageListenerTestBean .class , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getBean ( ) . getClass ( ) ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleMessageListenerTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMethod ( ) ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleMessageListenerTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMostSpecificMethod ( ) ) ; SimpleMessageListenerContainer org.springframework.jms.annotation.SimpleMessageListenerContainer = new SimpleMessageListenerContainer ( ) ; org.springframework.jms.annotation.MethodJmsListenerEndpoint . setupListenerContainer ( org.springframework.jms.annotation.SimpleMessageListenerContainer ) ; assertNotNull ( org.springframework.jms.annotation.SimpleMessageListenerContainer . getMessageListener ( ) ) ; assertTrue ( STRING + org.springframework.jms.annotation.MessageListenerTestContainer , org.springframework.jms.annotation.MessageListenerTestContainer . isStarted ( ) ) ; org.springframework.jms.annotation.ConfigurableApplicationContext . close ( ) ; assertTrue ( STRING + org.springframework.jms.annotation.MessageListenerTestContainer , org.springframework.jms.annotation.MessageListenerTestContainer . isStopped ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.Config .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.MetaAnnotationTestBean .class ) ; try { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerContainerTestFactory .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; JmsListenerEndpoint org.springframework.jms.annotation.JmsListenerEndpoint = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) . getEndpoint ( ) ; assertEquals ( STRING , MethodJmsListenerEndpoint .class , org.springframework.jms.annotation.JmsListenerEndpoint . getClass ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerEndpoint ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.MetaAnnotationTestBean .class , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getBean ( ) . getClass ( ) ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.MetaAnnotationTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMethod ( ) ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.MetaAnnotationTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMostSpecificMethod ( ) ) ; assertEquals ( STRING , ( ( AbstractJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerEndpoint ) . getDestination ( ) ) ; } finally { org.springframework.jms.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ConfigurableApplicationContext org.springframework.jms.annotation.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.Config .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.ProxyConfig .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.ProxyTestBean .class ) ; try { JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory = org.springframework.jms.annotation.ConfigurableApplicationContext . getBean ( JmsListenerContainerTestFactory .class ) ; assertEquals ( STRING , NUMBER , org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . size ( ) ) ; JmsListenerEndpoint org.springframework.jms.annotation.JmsListenerEndpoint = org.springframework.jms.annotation.JmsListenerContainerTestFactory . getListenerContainers ( ) . get ( NUMBER ) . getEndpoint ( ) ; assertEquals ( STRING , MethodJmsListenerEndpoint .class , org.springframework.jms.annotation.JmsListenerEndpoint . getClass ( ) ) ; MethodJmsListenerEndpoint org.springframework.jms.annotation.MethodJmsListenerEndpoint = ( MethodJmsListenerEndpoint ) org.springframework.jms.annotation.JmsListenerEndpoint ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.jms.annotation.MethodJmsListenerEndpoint . getBean ( ) ) ) ; assertTrue ( org.springframework.jms.annotation.MethodJmsListenerEndpoint . getBean ( ) instanceof org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleService ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.SimpleService .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMethod ( ) ) ; assertEquals ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.ProxyTestBean .class . java.lang.reflect.Method ( STRING , java.lang.String .class ) , org.springframework.jms.annotation.MethodJmsListenerEndpoint . getMostSpecificMethod ( ) ) ; java.lang.reflect.Method java.lang.reflect.Method = ReflectionUtils . findMethod ( org.springframework.jms.annotation.JmsListenerEndpoint . getClass ( ) , STRING ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Method ) ; java.lang.Object java.lang.Object = ReflectionUtils . invokeMethod ( java.lang.reflect.Method , org.springframework.jms.annotation.JmsListenerEndpoint ) ; assertEquals ( STRING , STRING , java.lang.Object ) ; } finally { org.springframework.jms.annotation.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.jms.annotation.ExpectedException . expect ( BeanCreationException .class ) ; org.springframework.jms.annotation.ExpectedException . expectCause ( is ( instanceOf ( java.lang.IllegalStateException .class ) ) ) ; org.springframework.jms.annotation.ExpectedException . expectMessage ( STRING ) ; new AnnotationConfigApplicationContext ( org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.Config .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.ProxyConfig .class , org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.InvalidProxyTestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ JmsListener ( destination = STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessorTests.FooListener public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor ( ) { JmsListenerAnnotationBeanPostProcessor org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor = new JmsListenerAnnotationBeanPostProcessor ( ) ; org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor . setEndpointRegistry ( org.springframework.jms.annotation.JmsListenerEndpointRegistry ( ) ) ; org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor . setContainerFactoryBeanName ( STRING ) ; return org.springframework.jms.annotation.JmsListenerAnnotationBeanPostProcessor ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerEndpointRegistry org.springframework.jms.annotation.JmsListenerEndpointRegistry ( ) { return new JmsListenerEndpointRegistry ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.JmsListenerContainerTestFactory org.springframework.jms.annotation.JmsListenerContainerTestFactory ( ) { return new JmsListenerContainerTestFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.jms.annotation.PlatformTransactionManager org.springframework.jms.annotation.PlatformTransactionManager ( ) { return mock ( PlatformTransactionManager .class ) ; }  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Transactional @ JmsListener ( destination = STRING ) @ SendTo ( STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
<METHOD_START> @ Transactional @ JmsListener ( destination = STRING ) @ SendTo ( STRING ) public void void ( java.lang.String java.lang.String ) {		}  <METHOD_END>
