<METHOD_START> @ BeforeClass public static void void ( ) { org.springframework.integration.jdbc.EmbeddedDatabase = new EmbeddedDatabaseBuilder ( ) . setType ( EmbeddedDatabaseType . H2 ) . addScript ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ AfterClass public static void void ( ) { org.springframework.integration.jdbc.EmbeddedDatabase . shutdown ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.jdbc.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.DelayerHandlerRescheduleIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.jdbc.MessageChannel = org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageGroupStore org.springframework.integration.jdbc.MessageGroupStore = org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , MessageGroupStore .class ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . getMessageGroupCount ( ) ) ; Message < java.lang.String > org.springframework.integration.jdbc.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.jdbc.MessageChannel . send ( org.springframework.integration.jdbc.Message<java.lang.String> ) ; org.springframework.integration.jdbc.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; ThreadPoolTaskScheduler org.springframework.integration.jdbc.ThreadPoolTaskScheduler = ( ThreadPoolTaskScheduler ) IntegrationContextUtils . getTaskScheduler ( org.springframework.integration.jdbc.AbstractApplicationContext ) ; org.springframework.integration.jdbc.ThreadPoolTaskScheduler . shutdown ( ) ; org.springframework.integration.jdbc.ThreadPoolTaskScheduler . getScheduledExecutor ( ) . awaitTermination ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.integration.jdbc.AbstractApplicationContext . destroy ( ) ; try { org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; fail ( STRING ) ; } catch ( java.lang.Exception java.lang.Exception ) { assertTrue ( java.lang.Exception instanceof java.lang.IllegalStateException ) ; assertTrue ( java.lang.Exception . java.lang.String ( ) . boolean ( STRING ) ) ; } java.lang.String java.lang.String = UUIDConverter . getUUID ( java.lang.String + STRING ) . toString ( ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( java.lang.String , org.springframework.integration.jdbc.MessageGroupStore . iterator ( ) . next ( ) . getGroupId ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . getMessageCountForAllMessageGroups ( ) ) ; MessageGroup org.springframework.integration.jdbc.MessageGroup = org.springframework.integration.jdbc.MessageGroupStore . getMessageGroup ( java.lang.String ) ; assertThat ( org.springframework.integration.jdbc.MessageGroup , instanceOf ( SimpleMessageGroup .class ) ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.MessageGroup . getMessages ( ) . iterator ( ) . next ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<> . getPayload ( ) ; assertTrue ( java.lang.Object instanceof DelayHandler . DelayHandler ) ; assertEquals ( org.springframework.integration.jdbc.Message<java.lang.String> , ( ( DelayHandler . DelayHandler ) java.lang.Object ) . getOriginal ( ) ) ; org.springframework.integration.jdbc.AbstractApplicationContext . refresh ( ) ; PollableChannel org.springframework.integration.jdbc.PollableChannel = org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , PollableChannel .class ) ; Message < ? > org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<> . getPayload ( ) ; org.springframework.integration.jdbc.Message<?> = org.springframework.integration.jdbc.PollableChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.jdbc.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.jdbc.Message<> . getPayload ( ) ; assertNotSame ( java.lang.Object , java.lang.Object ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . getMessageGroupCount ( ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.jdbc.AbstractApplicationContext . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AbstractApplicationContext org.springframework.integration.jdbc.AbstractApplicationContext = new ClassPathXmlApplicationContext ( STRING , java.lang.Class<? extends org.springframework.integration.jdbc.DelayerHandlerRescheduleIntegrationTests> ( ) ) ; MessageChannel org.springframework.integration.jdbc.MessageChannel = org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , MessageChannel .class ) ; MessageGroupStore org.springframework.integration.jdbc.MessageGroupStore = org.springframework.integration.jdbc.AbstractApplicationContext . getBean ( STRING , MessageGroupStore .class ) ; java.lang.String java.lang.String = UUIDConverter . getUUID ( STRING ) . toString ( ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.jdbc.MessageChannel . send ( MessageBuilder . withPayload ( STRING ) . build ( ) ) ; java.lang.Thread . void ( NUMBER ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.jdbc.AbstractApplicationContext . destroy ( ) ; org.springframework.integration.jdbc.AbstractApplicationContext . refresh ( ) ; assertTrue ( org.springframework.integration.jdbc.DelayerHandlerRescheduleIntegrationTests.RollbackTxSync . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( java.lang.String ) ) ; org.springframework.integration.jdbc.AbstractApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> void ( ) { this . setDataSource ( org.springframework.integration.jdbc.EmbeddedDatabase ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.jdbc.Message<?> ) throws org.springframework.integration.jdbc.MessagingException { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.integration.jdbc.DelayerHandlerRescheduleIntegrationTests.RollbackTxSync ( ) ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( TransactionSynchronization . STATUS_ROLLED_BACK == int ) { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
