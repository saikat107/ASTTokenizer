<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.bind.WebTestClient . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.bind.WebTestClient . exchangeMutator ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> ( STRING ) ) . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.test.web.reactive.server.samples.bind.WebTestClient . exchangeMutator ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> ( STRING , STRING ) ) . exchangeMutator ( java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> ( STRING , STRING ) ) . get ( ) . uri ( STRING ) . exchange ( ) . expectStatus ( ) . isOk ( ) . expectBody ( java.lang.String .class ) . value ( ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> private java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> < ServerWebExchange > java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> ( java.lang.String java.lang.String ) { return org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange -> org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange . mutate ( ) . principal ( Mono . just ( new org.springframework.test.web.reactive.server.samples.bind.ControllerTests.TestUser ( java.lang.String ) ) ) . build ( ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.test.web.reactive.server.samples.bind.WebFilter org.springframework.test.web.reactive.server.samples.bind.WebFilter ( java.lang.String java.lang.String ) { return ( exchange , chain ) -> { Mono < Principal > user = exchange . getPrincipal ( ) . map ( p -> new TestUser ( prefix + STRING + p . getName ( ) ) ) ; return chain . filter ( exchange . mutate ( ) . principal ( user ) . build ( ) ) ; } ; }  <METHOD_END>
<METHOD_START> private java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> < ServerWebExchange > java.util.function.UnaryOperator<org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange> ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange -> { org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange . getAttributes ( ) . put ( java.lang.String , java.lang.String ) ; return org.springframework.test.web.reactive.server.samples.bind.ServerWebExchange ; } ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( java.security.Principal java.security.Principal ) { return STRING + java.security.Principal . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ GetMapping ( STRING ) public java.lang.String java.lang.String ( @ RequestAttribute java.lang.String java.lang.String , @ RequestAttribute java.lang.String java.lang.String ) { return java.lang.String + STRING + java.lang.String ; }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
