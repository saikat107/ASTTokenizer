<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.String java.lang.String , ApplicationEventPublisher org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ) { super( org.springframework.integration.ip.tcp.connection.ApplicationEventPublisher ); this . java.lang.String = java.lang.String ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) { if ( ! this . boolean ) { synchronized ( this ) { if ( ! this . boolean ) { java.lang.Object java.lang.Object = org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ; org.springframework.integration.ip.tcp.connection.Log . debug ( this . java.lang.String ( ) + STRING + java.lang.Object ) ; if ( this . isServer ( ) ) { if ( java.lang.Object . boolean ( java.lang.String ) ) { try { org.springframework.integration.ip.tcp.connection.Log . debug ( this . java.lang.String ( ) + STRING + this . java.lang.String ) ; super. send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; this . boolean = true ; return true ; } catch ( java.lang.Exception java.lang.Exception ) { throw new MessagingException ( STRING , java.lang.Exception ) ; } } else { throw new MessagingException ( STRING + java.lang.String + STRING + java.lang.Object + STRING ) ; } } else { if ( java.lang.Object . boolean ( java.lang.String ) ) { this . boolean = true ; this . java.util.concurrent.Semaphore . void ( ) ; } else { throw new MessagingException ( STRING + java.lang.String + STRING + java.lang.Object ) ; } return true ; } } } } try { return super. onMessage ( org.springframework.integration.ip.tcp.connection.Message<> ) ; } finally { if ( ! ( this . isServer ( ) && this . hasRealSender ( ) ) && ! this . boolean ) { this . void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception { this . boolean = true ; try { if ( ! this . boolean ) { if ( ! this . isServer ( ) ) { org.springframework.integration.ip.tcp.connection.Log . debug ( this . java.lang.String ( ) + STRING + java.lang.String ) ; super. send ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; this . java.util.concurrent.Semaphore . boolean ( this . long , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; if ( ! this . boolean ) { throw new MessagingException ( STRING ) ; } } } super. send ( org.springframework.integration.ip.tcp.connection.Message<> ) ; } finally { this . boolean = false ; this . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . boolean && ! this . boolean ) { super. close ( ) ; return; } boolean = true ; org.springframework.integration.ip.tcp.connection.Log . debug ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { if ( this . boolean ) { org.springframework.integration.ip.tcp.connection.Log . debug ( STRING ) ; this . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + boolean + STRING + java.lang.String + STRING + java.lang.String + STRING + boolean + STRING + boolean + STRING ; }  <METHOD_END>
