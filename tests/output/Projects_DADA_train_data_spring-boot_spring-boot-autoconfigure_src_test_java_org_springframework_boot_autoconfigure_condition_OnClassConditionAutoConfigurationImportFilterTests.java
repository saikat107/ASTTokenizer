<METHOD_START> @ Before public void void ( ) { this . org.springframework.boot.autoconfigure.condition.OnClassCondition . setBeanClassLoader ( java.lang.Class<? extends org.springframework.boot.autoconfigure.condition.OnClassConditionAutoConfigurationImportFilterTests> ( ) . java.lang.ClassLoader ( ) ) ; this . org.springframework.boot.autoconfigure.condition.OnClassCondition . setBeanFactory ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( SpringFactoriesLoader . loadFactories ( AutoConfigurationImportFilter .class , null ) ) . hasAtLeastOneElementOfType ( OnClassCondition .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; boolean [] boolean[] = this . org.springframework.boot.autoconfigure.condition.OnClassCondition . match ( java.lang.String[] , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ( ) ) ; assertThat ( boolean[] ) . containsExactly ( true , false ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String [] java.lang.String[] = new java.lang.String [] { STRING , STRING } ; this . org.springframework.boot.autoconfigure.condition.OnClassCondition . match ( java.lang.String[] , org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ( ) ) ; ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) ) . hasSize ( NUMBER ) . containsKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ( ) { AutoConfigurationMetadata org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata = mock ( AutoConfigurationMetadata .class ) ; given ( org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata . wasProcessed ( STRING ) ) . willReturn ( true ) ; given ( org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata . getSet ( STRING , STRING ) ) . willReturn ( java.util.Collections .< java.lang.String > java.util.Set<java.lang.String> ( STRING ) ) ; given ( org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata . wasProcessed ( STRING ) ) . willReturn ( true ) ; given ( org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata . getSet ( STRING , STRING ) ) . willReturn ( java.util.Collections .< java.lang.String > java.util.Set<java.lang.String> ( STRING ) ) ; return org.springframework.boot.autoconfigure.condition.AutoConfigurationMetadata ; }  <METHOD_END>
