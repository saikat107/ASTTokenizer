<METHOD_START> public static void void ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ( org.springframework.context.annotation.BeanDefinitionRegistry , null ) ; }  <METHOD_END>
<METHOD_START> public static java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , java.lang.Object java.lang.Object ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = org.springframework.context.annotation.DefaultListableBeanFactory ( org.springframework.context.annotation.BeanDefinitionRegistry ) ; if ( org.springframework.context.annotation.DefaultListableBeanFactory != null ) { if ( ! ( org.springframework.context.annotation.DefaultListableBeanFactory . getDependencyComparator ( ) instanceof AnnotationAwareOrderComparator ) ) { org.springframework.context.annotation.DefaultListableBeanFactory . setDependencyComparator ( AnnotationAwareOrderComparator . INSTANCE ) ; } if ( ! ( org.springframework.context.annotation.DefaultListableBeanFactory . getAutowireCandidateResolver ( ) instanceof ContextAnnotationAutowireCandidateResolver ) ) { org.springframework.context.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new ContextAnnotationAutowireCandidateResolver ( ) ) ; } } java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> < BeanDefinitionHolder > java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> = new java.util.LinkedHashSet<org.springframework.context.annotation.BeanDefinitionHolder> <> ( NUMBER ) ; if ( ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( ConfigurationClassPostProcessor .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( AutowiredAnnotationBeanPostProcessor .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( RequiredAnnotationBeanPostProcessor .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( boolean && ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( CommonAnnotationBeanPostProcessor .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( boolean && ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( ) ; try { org.springframework.context.annotation.RootBeanDefinition . setBeanClass ( ClassUtils . forName ( java.lang.String , org.springframework.context.annotation.AnnotationConfigUtils .class . java.lang.ClassLoader ( ) ) ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , java.lang.ClassNotFoundException ) ; } org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( EventListenerMethodProcessor .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } if ( ! org.springframework.context.annotation.BeanDefinitionRegistry . containsBeanDefinition ( java.lang.String ) ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( DefaultEventListenerFactory .class ) ; org.springframework.context.annotation.RootBeanDefinition . setSource ( java.lang.Object ) ; java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> . add ( org.springframework.context.annotation.BeanDefinitionHolder ( org.springframework.context.annotation.BeanDefinitionRegistry , org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ) ; } return java.util.Set<org.springframework.context.annotation.BeanDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.annotation.BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry , RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition , java.lang.String java.lang.String ) { org.springframework.context.annotation.RootBeanDefinition . setRole ( BeanDefinition . ROLE_INFRASTRUCTURE ) ; org.springframework.context.annotation.BeanDefinitionRegistry . registerBeanDefinition ( java.lang.String , org.springframework.context.annotation.RootBeanDefinition ) ; return new BeanDefinitionHolder ( org.springframework.context.annotation.RootBeanDefinition , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.context.annotation.DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory ( BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof DefaultListableBeanFactory ) { return ( DefaultListableBeanFactory ) org.springframework.context.annotation.BeanDefinitionRegistry ; } else if ( org.springframework.context.annotation.BeanDefinitionRegistry instanceof GenericApplicationContext ) { return ( ( GenericApplicationContext ) org.springframework.context.annotation.BeanDefinitionRegistry ) . getDefaultListableBeanFactory ( ) ; } else { return null ; } }  <METHOD_END>
<METHOD_START> public static void void ( AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition ) { void ( org.springframework.context.annotation.AnnotatedBeanDefinition , org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) ) ; }  <METHOD_END>
<METHOD_START> static void void ( AnnotatedBeanDefinition org.springframework.context.annotation.AnnotatedBeanDefinition , AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata ) { if ( org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( Lazy .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AnnotatedBeanDefinition . setLazyInit ( org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedTypeMetadata , Lazy .class ) . getBoolean ( STRING ) ) ; } else if ( org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) != org.springframework.context.annotation.AnnotatedTypeMetadata && org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) . isAnnotated ( Lazy .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AnnotatedBeanDefinition . setLazyInit ( org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedBeanDefinition . getMetadata ( ) , Lazy .class ) . getBoolean ( STRING ) ) ; } if ( org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( Primary .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AnnotatedBeanDefinition . setPrimary ( true ) ; } if ( org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( DependsOn .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AnnotatedBeanDefinition . setDependsOn ( org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedTypeMetadata , DependsOn .class ) . getStringArray ( STRING ) ) ; } if ( org.springframework.context.annotation.AnnotatedBeanDefinition instanceof AbstractBeanDefinition ) { AbstractBeanDefinition org.springframework.context.annotation.AbstractBeanDefinition = ( AbstractBeanDefinition ) org.springframework.context.annotation.AnnotatedBeanDefinition ; if ( org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( Role .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AbstractBeanDefinition . setRole ( org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedTypeMetadata , Role .class ) . getNumber ( STRING ) . intValue ( ) ) ; } if ( org.springframework.context.annotation.AnnotatedTypeMetadata . isAnnotated ( Description .class . java.lang.String ( ) ) ) { org.springframework.context.annotation.AbstractBeanDefinition . setDescription ( org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedTypeMetadata , Description .class ) . getString ( STRING ) ) ; } } }  <METHOD_END>
<METHOD_START> static org.springframework.context.annotation.BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder ( ScopeMetadata org.springframework.context.annotation.ScopeMetadata , BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder , BeanDefinitionRegistry org.springframework.context.annotation.BeanDefinitionRegistry ) { ScopedProxyMode org.springframework.context.annotation.ScopedProxyMode = org.springframework.context.annotation.ScopeMetadata . getScopedProxyMode ( ) ; if ( org.springframework.context.annotation.ScopedProxyMode . equals ( ScopedProxyMode . NO ) ) { return org.springframework.context.annotation.BeanDefinitionHolder ; } boolean boolean = org.springframework.context.annotation.ScopedProxyMode . equals ( ScopedProxyMode . TARGET_CLASS ) ; return ScopedProxyCreator . createScopedProxy ( org.springframework.context.annotation.BeanDefinitionHolder , org.springframework.context.annotation.BeanDefinitionRegistry , boolean ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.context.annotation.AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes ( AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata , java.lang.Class<?> < ? > java.lang.Class<?> ) { return org.springframework.context.annotation.AnnotationAttributes ( org.springframework.context.annotation.AnnotatedTypeMetadata , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> static org.springframework.context.annotation.AnnotationAttributes org.springframework.context.annotation.AnnotationAttributes ( AnnotatedTypeMetadata org.springframework.context.annotation.AnnotatedTypeMetadata , java.lang.String java.lang.String ) { return AnnotationAttributes . fromMap ( org.springframework.context.annotation.AnnotatedTypeMetadata . getAnnotationAttributes ( java.lang.String , false ) ) ; }  <METHOD_END>
<METHOD_START> static java.util.Set<org.springframework.context.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ( org.springframework.context.annotation.AnnotationMetadata , java.lang.Class<> . java.lang.String ( ) , java.lang.Class<> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) static java.util.Set<org.springframework.context.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ( AnnotationMetadata org.springframework.context.annotation.AnnotationMetadata , java.lang.String java.lang.String , java.lang.String java.lang.String ) { java.util.Set<org.springframework.context.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.Set<org.springframework.context.annotation.AnnotationAttributes> = new java.util.LinkedHashSet<org.springframework.context.annotation.AnnotationAttributes> <> ( ) ; void ( java.util.Set<org.springframework.context.annotation.AnnotationAttributes> , org.springframework.context.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.String , false ) ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.context.annotation.AnnotationMetadata . getAnnotationAttributes ( java.lang.String , false ) ; if ( java.util.Map<java.lang.String,java.lang.Object> != null && java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) { for ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> : ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > [] ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) { void ( java.util.Set<org.springframework.context.annotation.AnnotationAttributes> , java.util.Map<java.lang.String,java.lang.Object> ) ; } } return java.util.Collections . java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ( java.util.Set<org.springframework.context.annotation.AnnotationAttributes> ) ; }  <METHOD_END>
<METHOD_START> private static void void ( java.util.Set<org.springframework.context.annotation.AnnotationAttributes> < AnnotationAttributes > java.util.Set<org.springframework.context.annotation.AnnotationAttributes> , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { if ( java.util.Map<java.lang.String,java.lang.Object> != null ) { java.util.Set<org.springframework.context.annotation.AnnotationAttributes> . add ( AnnotationAttributes . fromMap ( java.util.Map<java.lang.String,java.lang.Object> ) ) ; } }  <METHOD_END>
