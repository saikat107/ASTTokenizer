<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( DispatcherServlet .class ) ) . isNotNull ( ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getUrlMappings ( ) . toString ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.NonServletConfiguration .class , DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeanNamesForType ( ServletRegistrationBean .class ) . length ) . isEqualTo ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.CustomDispatcherServletWrongName .class , DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getUrlMappings ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getServletName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.CustomAutowiredRegistration .class , DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getUrlMappings ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getServletName ( ) ) . isEqualTo ( STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBeanNamesForType ( DispatcherServlet .class ) . length ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( DispatcherServletAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( DispatcherServlet .class ) ) . isNotNull ( ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getUrlMappings ( ) . toString ( ) ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getMultipartConfig ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.MultipartConfiguration .class , DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; ServletRegistrationBean < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( ServletRegistrationBean .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<> . getMultipartConfig ( ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.MultipartResolverConfiguration .class , DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( DispatcherServlet .class ) ; org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . onApplicationEvent ( new ContextRefreshedEvent ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext ) ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet . getMultipartResolver ( ) ) . isInstanceOf ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.MockMultipartResolver .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( DispatcherServletAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( DispatcherServlet .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( false ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( true ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( false ) ; assertThat ( new DirectFieldAccessor ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( STRING ) ) . getPropertyValue ( STRING ) ) . isEqualTo ( - NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . setServletContext ( new MockServletContext ( ) ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . register ( DispatcherServletAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext , STRING , STRING , STRING , STRING ) ; this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . refresh ( ) ; DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet = this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( DispatcherServlet .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( true ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( false ) ; assertThat ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) . extracting ( STRING ) . containsExactly ( true ) ; assertThat ( new DirectFieldAccessor ( this . org.springframework.boot.autoconfigure.web.servlet.AnnotationConfigWebApplicationContext . getBean ( STRING ) ) . getPropertyValue ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement org.springframework.boot.autoconfigure.web.servlet.MultipartConfigElement ( ) { MultipartConfigFactory org.springframework.boot.autoconfigure.web.servlet.MultipartConfigFactory = new MultipartConfigFactory ( ) ; org.springframework.boot.autoconfigure.web.servlet.MultipartConfigFactory . setMaxFileSize ( STRING ) ; org.springframework.boot.autoconfigure.web.servlet.MultipartConfigFactory . setMaxRequestSize ( STRING ) ; return org.springframework.boot.autoconfigure.web.servlet.MultipartConfigFactory . createMultipartConfig ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ( ) { return new DispatcherServlet ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> < ? > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<?> ( DispatcherServlet org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet ) { ServletRegistrationBean < DispatcherServlet > org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> = new ServletRegistrationBean <> ( org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet , STRING ) ; org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> . setName ( STRING ) ; return org.springframework.boot.autoconfigure.web.servlet.ServletRegistrationBean<org.springframework.boot.autoconfigure.web.servlet.DispatcherServlet> ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.servlet.MultipartResolver org.springframework.boot.autoconfigure.web.servlet.MultipartResolver ( ) { return new org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfigurationTests.MockMultipartResolver ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.web.servlet.MultipartHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.MultipartHttpServletRequest ( HttpServletRequest org.springframework.boot.autoconfigure.web.servlet.HttpServletRequest )				throws org.springframework.boot.autoconfigure.web.servlet.MultipartException { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MultipartHttpServletRequest org.springframework.boot.autoconfigure.web.servlet.MultipartHttpServletRequest ) {		}  <METHOD_END>
