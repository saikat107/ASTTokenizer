<METHOD_START> @ Before @ After public void void ( ) { Restarter . clearInstance ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Restarter . clearInstance ( ) ; ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.devtools.restart.OnInitializedRestarterConditionTests.Config .class ) ; assertThat ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Restarter . initialize ( new java.lang.String [ NUMBER ] , false , RestartInitializer . NONE ) ; ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.devtools.restart.OnInitializedRestarterConditionTests.Config .class ) ; assertThat ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.Thread java.lang.Thread = new java.lang.Thread ( ) { @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.OnInitializedRestarterConditionTests.TestInitialized . void ( ) ; } ;		} ; java.lang.Thread . void ( ) ; synchronized ( java.lang.Object ) { java.lang.Object . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { org.springframework.boot.devtools.restart.OnInitializedRestarterConditionTests.TestInitialized . void ( ) ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.String ... java.lang.String[] ) { RestartInitializer org.springframework.boot.devtools.restart.RestartInitializer = mock ( RestartInitializer .class ) ; given ( org.springframework.boot.devtools.restart.RestartInitializer . getInitialUrls ( ( java.lang.Thread ) any ( ) ) ) . willReturn ( new java.net.URL [ NUMBER ] ) ; Restarter . initialize ( new java.lang.String [ NUMBER ] , false , org.springframework.boot.devtools.restart.RestartInitializer ) ; ConfigurableApplicationContext org.springframework.boot.devtools.restart.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.devtools.restart.OnInitializedRestarterConditionTests.Config .class ) ; assertThat ( org.springframework.boot.devtools.restart.ConfigurableApplicationContext . containsBean ( STRING ) ) . isTrue ( ) ; org.springframework.boot.devtools.restart.ConfigurableApplicationContext . close ( ) ; synchronized ( java.lang.Object ) { java.lang.Object . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Bean @ ConditionalOnInitializedRestarter public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
