<METHOD_START> public void ( ) { final java.util.List<org.springframework.integration.file.FileListFilter<java.io.File>> < FileListFilter < java.io.File > > java.util.List<org.springframework.integration.file.FileListFilter<java.io.File>> = new java.util.ArrayList<org.springframework.integration.file.FileListFilter<java.io.File>> <> ( NUMBER ) ; java.util.List<org.springframework.integration.file.FileListFilter<java.io.File>> . add ( new IgnoreHiddenFileListFilter ( ) ) ; java.util.List<org.springframework.integration.file.FileListFilter<java.io.File>> . add ( new AcceptOnceFileListFilter <> ( ) ) ; this . org.springframework.integration.file.FileListFilter<java.io.File> = new CompositeFileListFilter <> ( java.util.List<org.springframework.integration.file.FileListFilter<java.io.File>> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( FileListFilter < java.io.File > org.springframework.integration.file.FileListFilter<java.io.File> ) { this . org.springframework.integration.file.FileListFilter<java.io.File> = org.springframework.integration.file.FileListFilter<java.io.File> ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.FileListFilter<java.io.File> < java.io.File > org.springframework.integration.file.FileListFilter<java.io.File> ( ) { return this . org.springframework.integration.file.FileListFilter<java.io.File> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( FileLocker org.springframework.integration.file.FileLocker ) { this . org.springframework.integration.file.FileLocker = org.springframework.integration.file.FileLocker ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.file.FileLocker org.springframework.integration.file.FileLocker ( ) { return this . org.springframework.integration.file.FileLocker ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.io.File java.io.File ) { return ( this . org.springframework.integration.file.FileLocker == null ) || this . org.springframework.integration.file.FileLocker . lock ( java.io.File ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> ( java.io.File java.io.File ) throws java.lang.IllegalArgumentException { java.io.File [] java.io.File[] = java.io.File[] ( java.io.File ) ; if ( java.io.File[] == null ) { throw new MessagingException ( STRING + java.io.File + STRING ) ; } return ( this . org.springframework.integration.file.FileListFilter<java.io.File> != null ) ? this . org.springframework.integration.file.FileListFilter<java.io.File> . filterFiles ( java.io.File[] ) : java.util.Arrays . java.util.List<java.io.File> ( java.io.File[] ) ; }  <METHOD_END>
<METHOD_START> protected java.io.File [] java.io.File[] ( java.io.File java.io.File ) { return java.io.File . java.io.File[] ( ) ; }  <METHOD_END>
