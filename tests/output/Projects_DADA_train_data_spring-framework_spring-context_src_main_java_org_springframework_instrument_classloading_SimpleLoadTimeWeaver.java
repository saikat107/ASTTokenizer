<METHOD_START> public void ( ) { this . org.springframework.instrument.classloading.SimpleInstrumentableClassLoader = new SimpleInstrumentableClassLoader ( ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( SimpleInstrumentableClassLoader org.springframework.instrument.classloading.SimpleInstrumentableClassLoader ) { Assert . notNull ( org.springframework.instrument.classloading.SimpleInstrumentableClassLoader , STRING ) ; this . org.springframework.instrument.classloading.SimpleInstrumentableClassLoader = org.springframework.instrument.classloading.SimpleInstrumentableClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.instrument.ClassFileTransformer java.lang.instrument.ClassFileTransformer ) { this . org.springframework.instrument.classloading.SimpleInstrumentableClassLoader . addTransformer ( java.lang.instrument.ClassFileTransformer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . org.springframework.instrument.classloading.SimpleInstrumentableClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return new SimpleThrowawayClassLoader ( java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
