<METHOD_START> @ Before public void void ( ) { when ( org.springframework.data.mongodb.core.MongoDbFactory . getExceptionTranslator ( ) ) . thenReturn ( org.springframework.data.mongodb.core.MongoExceptionTranslator ) ; when ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . modifiers ( any ( Document .class ) ) ) . thenReturn ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; when ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> . noCursorTimeout ( anyBoolean ( ) ) ) . thenReturn ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . withHint ( STRING ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . modifiers ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . getValue ( ) , equalTo ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) ; org.springframework.data.mongodb.core.Query . setMeta ( new Meta ( ) ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> , never ( ) ) . modifiers ( any ( Document .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . maxScan ( NUMBER ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . modifiers ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . getValue ( ) , equalTo ( new Document ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . maxTime ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . modifiers ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . getValue ( ) , equalTo ( new Document ( STRING , NUMBER ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . comment ( STRING ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . modifiers ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . getValue ( ) , equalTo ( new Document ( STRING , STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . useSnapshot ( ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; ArgumentCaptor < Document > org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> = ArgumentCaptor . forClass ( Document .class ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . modifiers ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . capture ( ) ) ; assertThat ( org.springframework.data.mongodb.core.ArgumentCaptor<org.springframework.data.mongodb.core.Document> . getValue ( ) , equalTo ( new Document ( STRING , true ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Query org.springframework.data.mongodb.core.Query = query ( where ( STRING ) . is ( STRING ) ) . noCursorTimeout ( ) ; org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( org.springframework.data.mongodb.core.Query ) ; verify ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) . noCursorTimeout ( eq ( true ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> < Document > org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ( Query org.springframework.data.mongodb.core.Query ) { CursorPreparer org.springframework.data.mongodb.core.CursorPreparer = new MongoTemplate ( org.springframework.data.mongodb.core.MongoDbFactory ) .new QueryCursorPreparer ( org.springframework.data.mongodb.core.Query , null ) ; return org.springframework.data.mongodb.core.CursorPreparer . prepare ( org.springframework.data.mongodb.core.FindIterable<org.springframework.data.mongodb.core.Document> ) ; }  <METHOD_END>
