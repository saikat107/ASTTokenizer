<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.jms.support.converter.Marshaller ) { Assert . notNull ( org.springframework.jms.support.converter.Marshaller , STRING ) ; if ( ! ( org.springframework.jms.support.converter.Marshaller instanceof Unmarshaller ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.jms.support.converter.Marshaller + STRING + STRING + STRING ) ; } else { this . org.springframework.jms.support.converter.Marshaller = org.springframework.jms.support.converter.Marshaller ; this . org.springframework.jms.support.converter.Unmarshaller = ( Unmarshaller ) org.springframework.jms.support.converter.Marshaller ; } }  <METHOD_END>
<METHOD_START> public void ( Marshaller org.springframework.jms.support.converter.Marshaller , Unmarshaller org.springframework.jms.support.converter.Unmarshaller ) { Assert . notNull ( org.springframework.jms.support.converter.Marshaller , STRING ) ; Assert . notNull ( org.springframework.jms.support.converter.Unmarshaller , STRING ) ; this . org.springframework.jms.support.converter.Marshaller = org.springframework.jms.support.converter.Marshaller ; this . org.springframework.jms.support.converter.Unmarshaller = org.springframework.jms.support.converter.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Marshaller org.springframework.jms.support.converter.Marshaller ) { this . org.springframework.jms.support.converter.Marshaller = org.springframework.jms.support.converter.Marshaller ; }  <METHOD_END>
<METHOD_START> public void void ( Unmarshaller org.springframework.jms.support.converter.Unmarshaller ) { this . org.springframework.jms.support.converter.Unmarshaller = org.springframework.jms.support.converter.Unmarshaller ; }  <METHOD_END>
<METHOD_START> public void void ( MessageType org.springframework.jms.support.converter.MessageType ) { Assert . notNull ( org.springframework.jms.support.converter.MessageType , STRING ) ; this . org.springframework.jms.support.converter.MessageType = org.springframework.jms.support.converter.MessageType ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { Assert . notNull ( this . org.springframework.jms.support.converter.Marshaller , STRING ) ; Assert . notNull ( this . org.springframework.jms.support.converter.Unmarshaller , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { try { switch ( this . org.springframework.jms.support.converter.MessageType ) { case TEXT : return org.springframework.jms.support.converter.TextMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.Marshaller ) ; case BYTES : return org.springframework.jms.support.converter.BytesMessage ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.Marshaller ) ; default: return org.springframework.jms.support.converter.Message ( java.lang.Object , org.springframework.jms.support.converter.Session , this . org.springframework.jms.support.converter.Marshaller , this . org.springframework.jms.support.converter.MessageType ) ; } } catch ( XmlMappingException org.springframework.jms.support.converter.XmlMappingException ) { throw new MessageConversionException ( STRING + java.lang.Object + STRING , org.springframework.jms.support.converter.XmlMappingException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING + java.lang.Object + STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message org.springframework.jms.support.converter.Message ) throws org.springframework.jms.support.converter.JMSException , org.springframework.jms.support.converter.MessageConversionException { try { if ( org.springframework.jms.support.converter.Message instanceof TextMessage ) { TextMessage org.springframework.jms.support.converter.TextMessage = ( TextMessage ) org.springframework.jms.support.converter.Message ; return java.lang.Object ( org.springframework.jms.support.converter.TextMessage , this . org.springframework.jms.support.converter.Unmarshaller ) ; } else if ( org.springframework.jms.support.converter.Message instanceof BytesMessage ) { BytesMessage org.springframework.jms.support.converter.BytesMessage = ( BytesMessage ) org.springframework.jms.support.converter.Message ; return java.lang.Object ( org.springframework.jms.support.converter.BytesMessage , this . org.springframework.jms.support.converter.Unmarshaller ) ; } else { return java.lang.Object ( org.springframework.jms.support.converter.Message , this . org.springframework.jms.support.converter.Unmarshaller ) ; } } catch ( java.io.IOException java.io.IOException ) { throw new MessageConversionException ( STRING + org.springframework.jms.support.converter.Message , java.io.IOException ) ; } catch ( XmlMappingException org.springframework.jms.support.converter.XmlMappingException ) { throw new MessageConversionException ( STRING + org.springframework.jms.support.converter.Message , org.springframework.jms.support.converter.XmlMappingException ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.TextMessage org.springframework.jms.support.converter.TextMessage ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , Marshaller org.springframework.jms.support.converter.Marshaller )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { java.io.StringWriter java.io.StringWriter = new java.io.StringWriter ( ) ; javax.xml.transform.Result javax.xml.transform.Result = new javax.xml.transform.stream.StreamResult ( java.io.StringWriter ) ; org.springframework.jms.support.converter.Marshaller . marshal ( java.lang.Object , javax.xml.transform.Result ) ; return org.springframework.jms.support.converter.Session . createTextMessage ( java.io.StringWriter . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.BytesMessage org.springframework.jms.support.converter.BytesMessage ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , Marshaller org.springframework.jms.support.converter.Marshaller )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( NUMBER ) ; javax.xml.transform.stream.StreamResult javax.xml.transform.stream.StreamResult = new javax.xml.transform.stream.StreamResult ( java.io.ByteArrayOutputStream ) ; org.springframework.jms.support.converter.Marshaller . marshal ( java.lang.Object , javax.xml.transform.stream.StreamResult ) ; BytesMessage org.springframework.jms.support.converter.BytesMessage = org.springframework.jms.support.converter.Session . createBytesMessage ( ) ; org.springframework.jms.support.converter.BytesMessage . writeBytes ( java.io.ByteArrayOutputStream . byte[] ( ) ) ; return org.springframework.jms.support.converter.BytesMessage ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.support.converter.Message org.springframework.jms.support.converter.Message ( java.lang.Object java.lang.Object , Session org.springframework.jms.support.converter.Session , Marshaller org.springframework.jms.support.converter.Marshaller , MessageType org.springframework.jms.support.converter.MessageType )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.jms.support.converter.MessageType + STRING ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( TextMessage org.springframework.jms.support.converter.TextMessage , Unmarshaller org.springframework.jms.support.converter.Unmarshaller )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { javax.xml.transform.Source javax.xml.transform.Source = new javax.xml.transform.stream.StreamSource ( new java.io.StringReader ( org.springframework.jms.support.converter.TextMessage . getText ( ) ) ) ; return org.springframework.jms.support.converter.Unmarshaller . unmarshal ( javax.xml.transform.Source ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( BytesMessage org.springframework.jms.support.converter.BytesMessage , Unmarshaller org.springframework.jms.support.converter.Unmarshaller )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { byte [] byte[] = new byte [ ( int ) org.springframework.jms.support.converter.BytesMessage . getBodyLength ( ) ] ; org.springframework.jms.support.converter.BytesMessage . readBytes ( byte[] ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; javax.xml.transform.stream.StreamSource javax.xml.transform.stream.StreamSource = new javax.xml.transform.stream.StreamSource ( java.io.ByteArrayInputStream ) ; return org.springframework.jms.support.converter.Unmarshaller . unmarshal ( javax.xml.transform.stream.StreamSource ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( Message org.springframework.jms.support.converter.Message , Unmarshaller org.springframework.jms.support.converter.Unmarshaller )			throws org.springframework.jms.support.converter.JMSException , java.io.IOException , org.springframework.jms.support.converter.XmlMappingException { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.jms.support.converter.Message . getClass ( ) + STRING ) ; }  <METHOD_END>
