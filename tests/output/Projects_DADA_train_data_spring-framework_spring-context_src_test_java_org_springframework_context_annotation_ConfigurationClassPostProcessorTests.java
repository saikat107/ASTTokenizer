<METHOD_START> @ Before public void void ( ) { QualifierAnnotationAutowireCandidateResolver org.springframework.context.annotation.QualifierAnnotationAutowireCandidateResolver = new QualifierAnnotationAutowireCandidateResolver ( ) ; org.springframework.context.annotation.QualifierAnnotationAutowireCandidateResolver . setBeanFactory ( this . org.springframework.context.annotation.DefaultListableBeanFactory ) ; this . org.springframework.context.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( org.springframework.context.annotation.QualifierAnnotationAutowireCandidateResolver ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; assertTrue ( java.util.Arrays . java.util.List ( org.springframework.context.annotation.DefaultListableBeanFactory . getDependentBeans ( STRING ) ) . contains ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( java.lang.Class<? extends org.springframework.context.annotation.ConfigurationClassPostProcessorTests> ( ) . java.lang.String ( ) + STRING ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.UnloadedConfig .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.LoadedConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( TestBean .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new ChildBeanDefinition ( STRING ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationClass .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationClass .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationWithAttributeOverrideForBasePackage .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationWithAttributeOverrideForBasePackage .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationWithAttributeOverrideForExcludeFilter .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedConfigurationWithAttributeOverrideForExcludeFilter .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedComposedConfigurationWithAttributeOverridesClass .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ComposedComposedConfigurationWithAttributeOverridesClass .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.MetaComponentScanConfigurationWithAttributeOverridesClass .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.MetaComponentScanConfigurationWithAttributeOverridesClass .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SubMetaComponentScanConfigurationWithAttributeOverridesClass .class ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SubMetaComponentScanConfigurationWithAttributeOverridesClass .class . java.lang.String ( ) ) ; void ( org.springframework.context.annotation.RootBeanDefinition ) ; }  <METHOD_END>
<METHOD_START> private void void ( RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . setEnvironment ( new StandardEnvironment ( ) ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; SimpleComponent org.springframework.context.annotation.SimpleComponent = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( SimpleComponent .class ) ; assertNotNull ( org.springframework.context.annotation.SimpleComponent ) ; }  <METHOD_END>
<METHOD_START> private void void ( RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . setEnvironment ( new StandardEnvironment ( ) ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; try { org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( SimpleComponent .class ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setRole ( RootBeanDefinition . ROLE_SUPPORT ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setResource ( new DescriptiveResource ( STRING ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setResource ( new DescriptiveResource ( STRING ) ) ; BeanDefinitionHolder org.springframework.context.annotation.BeanDefinitionHolder = ScopedProxyUtils . createScopedProxy ( new BeanDefinitionHolder ( org.springframework.context.annotation.RootBeanDefinition , STRING ) , org.springframework.context.annotation.DefaultListableBeanFactory , true ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.BeanDefinitionHolder . getBeanDefinition ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , TestBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setResource ( new DescriptiveResource ( STRING ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . setAllowBeanDefinitionOverriding ( false ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; try { org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( BeanDefinitionStoreException org.springframework.context.annotation.BeanDefinitionStoreException ) { assertTrue ( org.springframework.context.annotation.BeanDefinitionStoreException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.BeanDefinitionStoreException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.BeanDefinitionStoreException . getMessage ( ) . contains ( TestBean .class . java.lang.String ( ) ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.OverridingSingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; assertTrue ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo instanceof org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.OverridingAgainSingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.OverridingSingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; assertTrue ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo instanceof org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedAgainFoo ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.InvalidOverridingSingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.OverridingSingletonBeanConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SingletonBeanConfig .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; try { org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo .class . java.lang.String ( ) ) ) ; assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class . java.lang.String ( ) ) ) ; assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ConfigWithOrderedNestedClasses .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo .class ) ; assertTrue ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo instanceof org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar .class ) ; assertSame ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedProxyConfigurationClass .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedProxyConsumer .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; ITestBean org.springframework.context.annotation.ITestBean = org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedProxyConsumer .class ) . testBean ; assertTrue ( org.springframework.context.annotation.ITestBean instanceof ScopedObject ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.ITestBean ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( ITestBean .class ) , org.springframework.context.annotation.ITestBean ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; try { org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; try { org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; fail ( STRING ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) {		} }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedRepositoryConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedProxyRepositoryConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . freezeConfiguration ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> . java.lang.String ( ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean .class . java.lang.String ( ) ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ScopedProxyRepositoryConfiguration .class . java.lang.String ( ) ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . freezeConfiguration ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> . java.lang.String ( ) ) ; assertEquals ( STRING , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> . java.lang.String ( ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ) ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.SpecificRepositoryInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.GenericRepository<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean = ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<> ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<> ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBeanInjectionBean . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RawMatchingConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.WildcardMatchingConfiguration .class ) ) ; ConfigurationClassPostProcessor org.springframework.context.annotation.ConfigurationClassPostProcessor = new ConfigurationClassPostProcessor ( ) ; org.springframework.context.annotation.ConfigurationClassPostProcessor . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.WildcardWithExtendsConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.WildcardWithGenericExtendsConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; assertSame ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) , org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setProxyTargetClass ( true ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setProxyTargetClass ( true ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RawRepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setProxyTargetClass ( true ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isCglibProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RawRepositoryConfiguration .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; DefaultAdvisorAutoProxyCreator org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator ( ) ; org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.DefaultAdvisorAutoProxyCreator ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerSingleton ( STRING , new DefaultPointcutAdvisor ( new SimpleTraceInterceptor ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; java.lang.String [] java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class ) ; assertTrue ( ObjectUtils . containsElement ( java.lang.String[] , STRING ) ) ; java.lang.String[] = org.springframework.context.annotation.DefaultListableBeanFactory . getBeanNamesForType ( ResolvableType . forClassWithGenerics ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryInterface .class , java.lang.String .class ) ) ; assertEquals ( NUMBER , java.lang.String[] . int ) ; assertEquals ( STRING , java.lang.String[] [ NUMBER ] ) ; assertTrue ( AopUtils . isJdkDynamicProxy ( org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ConcreteConfig .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ConcreteConfigWithDefaultMethods .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( new CommonAnnotationBeanPostProcessor ( ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ConcreteConfigWithDefaultMethods .class . java.lang.String ( ) ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider .class . java.lang.String ( ) ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.A .class ) ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.AStrich .class ) ) ; new ConfigurationClassPostProcessor ( ) . postProcessBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; try { org.springframework.context.annotation.DefaultListableBeanFactory . preInstantiateSingletons ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.A .class , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.AStrich .class ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.context.annotation.BeanCreationException ) { assertTrue ( org.springframework.context.annotation.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanArgumentConfigWithPrototype .class ) ; org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory .class ) . createFoo ( new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanArgumentConfigWithSingleton .class ) ; org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory .class ) . createFoo ( new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanArgumentConfigWithNull .class ) ; org.springframework.context.annotation.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooBarConfiguration .class ) ; assertSame ( org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarImpl .class ) , org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooImpl .class ) . bar ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration = org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration .class ) ; assertNotNull ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration . java.util.List<org.springframework.context.annotation.TestBean> ) ; assertEquals ( NUMBER , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration . java.util.List<org.springframework.context.annotation.TestBean> . size ( ) ) ; assertSame ( org.springframework.context.annotation.ApplicationContext . getBean ( TestBean .class ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.CollectionInjectionConfiguration . java.util.List<org.springframework.context.annotation.TestBean> . get ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ApplicationContext org.springframework.context.annotation.ApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration .class ) ; org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration = org.springframework.context.annotation.ApplicationContext . getBean ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration .class ) ; assertNotNull ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration . org.springframework.context.annotation.TestBean ( ) ) ; assertSame ( org.springframework.context.annotation.ApplicationContext . getBean ( TestBean .class ) , org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BeanLookupConfiguration . org.springframework.context.annotation.TestBean ( ) ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedAgainFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedAgainFoo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedAgainFoo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ExtendedFoo ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ) { this . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo = org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ; }  <METHOD_END>
<METHOD_START> public @ Bean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Bar ( new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Foo ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy @ Scope ( proxyMode = ScopedProxyMode . INTERFACES ) public org.springframework.context.annotation.ITestBean org.springframework.context.annotation.ITestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) { throw new java.lang.IllegalStateException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<?> < ? > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<?> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) @ java.lang.SuppressWarnings ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Object> < java.lang.Object > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( scopeName = STRING , proxyMode = ScopedProxyMode . TARGET_CLASS ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean @ org.springframework.context.annotation.ConfigurationClassPostProcessorTests.PrototypeScoped public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Integer> < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Object> < java.lang.Object > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Object> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.GenericRepository<java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<java.lang.Object> < java.lang.Object > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<java.lang.Object> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.RepositoryFactoryBean<java.lang.Object> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<?> < ? > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<?> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.String> < ? extends java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.String> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Number> < ? extends java.lang.Number > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Number> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Number> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.String> < ? extends java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.String> ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<> ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Object> < ? extends java.lang.Object > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Object> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Number> < ? extends java.lang.Number > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<? extends java.lang.Number> ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.Number> <> ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.Object java.lang.Object ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> < java.lang.String > org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Repository<java.lang.String> ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { Assert . notNull ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider , STRING ) ; }  <METHOD_END>
<METHOD_START> org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( )  <METHOD_END>
<METHOD_START> @ Bean default org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override default org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) . org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ( ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider ; }  <METHOD_END>
<METHOD_START> @ javax.annotation.PostConstruct public void void ( ) { Assert . notNull ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBeanProvider , STRING ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.ServiceBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.B org.springframework.context.annotation.ConfigurationClassPostProcessorTests.B ( ) { if ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z == null ) { throw new java.lang.NullPointerException ( STRING ) ; } return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.B ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z ( ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z org.springframework.context.annotation.ConfigurationClassPostProcessorTests.Z ) {		}  <METHOD_END>
<METHOD_START> @ Bean @ Scope ( STRING ) public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory ( ) { @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooFactory ( ) { @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( ) { return org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( null ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Lazy public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ( ) ; }  <METHOD_END>
<METHOD_START> void ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument ) { Assert . notNull ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument , STRING ) ; }  <METHOD_END>
<METHOD_START> abstract org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo org.springframework.context.annotation.ConfigurationClassPostProcessorTests.DependingFoo ( org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarArgument );  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarInterface org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarInterface ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.BarImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooImpl org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooImpl ( ) { return new org.springframework.context.annotation.ConfigurationClassPostProcessorTests.FooImpl ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return new TestBean ( ) ; }  <METHOD_END>
<METHOD_START> @ Lookup public abstract org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( )  <METHOD_END>
