<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( org.w3c.dom.Element org.w3c.dom.Element ) { return CassandraCqlSessionFactoryBean .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.String java.lang.String ( org.w3c.dom.Element org.w3c.dom.Element , AbstractBeanDefinition org.springframework.cassandra.config.xml.AbstractBeanDefinition , ParserContext org.springframework.cassandra.config.xml.ParserContext )			throws org.springframework.cassandra.config.xml.BeanDefinitionStoreException { java.lang.String java.lang.String = super. resolveId ( org.w3c.dom.Element , org.springframework.cassandra.config.xml.AbstractBeanDefinition , org.springframework.cassandra.config.xml.ParserContext ) ; return StringUtils . hasText ( java.lang.String ) ? java.lang.String : DefaultCqlBeanNames . SESSION ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , org.w3c.dom.Element . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Attr org.w3c.dom.Attr , ParserContext org.springframework.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( STRING , org.w3c.dom.Attr . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { void ( org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) ; void ( org.w3c.dom.Element , org.springframework.cassandra.config.xml.ParserContext , org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) ; void ( org.w3c.dom.Element , org.springframework.cassandra.config.xml.ParserContext , org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { addRequiredPropertyReference ( org.springframework.cassandra.config.xml.BeanDefinitionBuilder , STRING , DefaultCqlBeanNames . CLUSTER ) ; }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { org.w3c.dom.NamedNodeMap org.w3c.dom.NamedNodeMap = org.w3c.dom.Element . org.w3c.dom.NamedNodeMap ( ) ; int int = org.w3c.dom.NamedNodeMap . int ( ) ; for ( int int = NUMBER ; int < int ; int ++ ) { org.w3c.dom.Attr org.w3c.dom.Attr = ( org.w3c.dom.Attr ) org.w3c.dom.NamedNodeMap . org.w3c.dom.Node ( int ) ; if ( STRING . boolean ( org.w3c.dom.Attr . java.lang.String ( ) ) ) { continue; } java.lang.String java.lang.String = org.w3c.dom.Attr . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { addRequiredPropertyValue ( org.springframework.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Attr ) ; } else if ( STRING . boolean ( java.lang.String ) ) { addOptionalPropertyReference ( org.springframework.cassandra.config.xml.BeanDefinitionBuilder , STRING , org.w3c.dom.Attr , DefaultCqlBeanNames . CLUSTER ) ; } else { void ( org.w3c.dom.Attr , org.springframework.cassandra.config.xml.ParserContext , org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( org.w3c.dom.Element org.w3c.dom.Element , ParserContext org.springframework.cassandra.config.xml.ParserContext , BeanDefinitionBuilder org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) { for ( org.w3c.dom.Element org.w3c.dom.Element : DomUtils . getChildElements ( org.w3c.dom.Element ) ) { if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { org.springframework.cassandra.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , DomUtils . getTextValue ( org.w3c.dom.Element ) ) ; } else if ( STRING . boolean ( org.w3c.dom.Element . java.lang.String ( ) ) ) { org.springframework.cassandra.config.xml.BeanDefinitionBuilder . addPropertyValue ( STRING , DomUtils . getTextValue ( org.w3c.dom.Element ) ) ; } else { void ( org.w3c.dom.Element , org.springframework.cassandra.config.xml.ParserContext , org.springframework.cassandra.config.xml.BeanDefinitionBuilder ) ; } } }  <METHOD_END>
