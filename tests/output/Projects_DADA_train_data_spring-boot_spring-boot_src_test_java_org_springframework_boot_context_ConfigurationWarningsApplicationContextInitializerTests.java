<METHOD_START> @ Test public void void ( ) { void ( InDefaultPackageConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( InDefaultPackageWithMetaAnnotationConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InRealPackageConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . doesNotContain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InDefaultPackageWithoutScanConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . doesNotContain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InDefaultPackageWithValueConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . doesNotContain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InDefaultPackageWithBasePackagesConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . doesNotContain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InDefaultPackageWithBasePackageClassesConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . doesNotContain ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( InOrgSpringPackageConfiguration .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . contains ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( InRealButScanningProblemPackages .class ) ; assertThat ( this . org.springframework.boot.context.InternalOutputCapture . toString ( ) ) . contains ( STRING + STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { AnnotationConfigApplicationContext org.springframework.boot.context.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; new org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.TestConfigurationWarningsApplicationContextInitializer ( ) . initialize ( org.springframework.boot.context.AnnotationConfigApplicationContext ) ; org.springframework.boot.context.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; try { org.springframework.boot.context.AnnotationConfigApplicationContext . refresh ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { java.lang.Exception . void ( ) ; } finally { org.springframework.boot.context.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.boot.context.Check [] org.springframework.boot.context.Check[] ( ) { return new Check [] { new org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializerTests.TestComponentScanPackageCheck ( ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( BeanDefinitionRegistry org.springframework.boot.context.BeanDefinitionRegistry ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = super. getComponentScanningPackages ( org.springframework.boot.context.BeanDefinitionRegistry ) ; java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet<java.lang.String> <> ( ) ; for ( java.lang.String java.lang.String : java.util.Set<java.lang.String> ) { if ( java.lang.String . boolean ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( STRING ) ; } else if ( java.lang.String . boolean ( STRING ) ) { java.util.Set<java.lang.String> . boolean ( STRING ) ; } else { java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } return java.util.Set<java.lang.String> ; }  <METHOD_END>
