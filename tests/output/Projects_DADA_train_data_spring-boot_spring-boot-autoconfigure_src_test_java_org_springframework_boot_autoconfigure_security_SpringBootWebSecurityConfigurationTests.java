<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.TestWebConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( AuthenticationManagerBuilder .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( AuthenticationManager .class ) . authenticate ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , Matchers . containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isNotFound ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , Matchers . containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) . header ( STRING , STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , Matchers . containsString ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.TestInjectWebConfiguration .class , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( AuthenticationManagerBuilder .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( AuthenticationManager .class ) . authenticate ( new UsernamePasswordAuthenticationToken ( STRING , STRING ) ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.DenyPostRequestConfig .class , STRING ) ; int int = java.lang.Integer . int ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getEnvironment ( ) . getProperty ( STRING ) ) ; TestRestTemplate org.springframework.boot.autoconfigure.security.TestRestTemplate = new TestRestTemplate ( ) ; MultiValueMap < java.lang.String , java.lang.String > org.springframework.boot.autoconfigure.security.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; ResponseEntity < java.lang.Object > org.springframework.boot.autoconfigure.security.ResponseEntity<java.lang.Object> = org.springframework.boot.autoconfigure.security.TestRestTemplate . postForEntity ( STRING + int + STRING , org.springframework.boot.autoconfigure.security.MultiValueMap<java.lang.String,java.lang.String> , java.lang.Object .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.ResponseEntity<java.lang.Object> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . FORBIDDEN ) ; org.springframework.boot.autoconfigure.security.MultiValueMap<java.lang.String,java.lang.String> = new LinkedMultiValueMap <> ( ) ; org.springframework.boot.autoconfigure.security.MultiValueMap<java.lang.String,java.lang.String> . add ( STRING , STRING ) ; org.springframework.boot.autoconfigure.security.ResponseEntity<java.lang.Object> = org.springframework.boot.autoconfigure.security.TestRestTemplate . postForEntity ( STRING + int + STRING , org.springframework.boot.autoconfigure.security.MultiValueMap<java.lang.String,java.lang.String> , java.lang.Object .class ) ; assertThat ( org.springframework.boot.autoconfigure.security.ResponseEntity<java.lang.Object> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . NOT_FOUND ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( ( FilterChainProxy ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( notNullValue ( ) ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING , STRING , STRING , STRING , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . status ( ) . isUnauthorized ( ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( ( FilterChainProxy ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( STRING ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext = SpringApplication . run ( org.springframework.boot.autoconfigure.security.SpringBootWebSecurityConfigurationTests.VanillaWebConfiguration .class , STRING , STRING , STRING ) ; MockMvc org.springframework.boot.autoconfigure.security.MockMvc = MockMvcBuilders . webAppContextSetup ( ( WebApplicationContext ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext ) . addFilters ( ( FilterChainProxy ) this . org.springframework.boot.autoconfigure.security.ConfigurableApplicationContext . getBean ( STRING , Filter .class ) ) . build ( ) ; org.springframework.boot.autoconfigure.security.MockMvc . perform ( MockMvcRequestBuilders . get ( STRING ) ) . andExpect ( MockMvcResultMatchers . header ( ) . string ( STRING , is ( STRING ) ) ) . andExpect ( MockMvcResultMatchers . header ( ) . doesNotExist ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> protected void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) { this . org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder = org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebSecurity org.springframework.boot.autoconfigure.security.WebSecurity ) throws java.lang.Exception { this . org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . getOrBuild ( ) ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . inMemoryAuthentication ( ) . withUser ( STRING ) . password ( STRING ) . roles ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.HttpSecurity . authorizeRequests ( ) . anyRequest ( ) . denyAll ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpSecurity org.springframework.boot.autoconfigure.security.HttpSecurity ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.HttpSecurity . authorizeRequests ( ) . antMatchers ( HttpMethod . POST , STRING ) . denyAll ( ) ; }  <METHOD_END>
