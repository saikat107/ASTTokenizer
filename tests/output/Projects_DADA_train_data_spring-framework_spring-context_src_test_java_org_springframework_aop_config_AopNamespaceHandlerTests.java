<METHOD_START> @ Before public void void ( ) { this . org.springframework.aop.config.ApplicationContext = new ClassPathXmlApplicationContext ( java.lang.Class<? extends org.springframework.aop.config.AopNamespaceHandlerTests> ( ) . java.lang.String ( ) + STRING , java.lang.Class<? extends org.springframework.aop.config.AopNamespaceHandlerTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.aop.config.ITestBean org.springframework.aop.config.ITestBean ( ) { return ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.aop.config.ITestBean = org.springframework.aop.config.ITestBean ( ) ; assertTrue ( STRING , AopUtils . isAopProxy ( org.springframework.aop.config.ITestBean ) ) ; Advised org.springframework.aop.config.Advised = ( Advised ) org.springframework.aop.config.ITestBean ; Advisor [] org.springframework.aop.config.Advisor[] = org.springframework.aop.config.Advised . getAdvisors ( ) ; assertTrue ( STRING , advisors . length > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CountingBeforeAdvice org.springframework.aop.config.CountingBeforeAdvice = ( CountingBeforeAdvice ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; CountingBeforeAdvice org.springframework.aop.config.CountingBeforeAdvice = ( CountingBeforeAdvice ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; ITestBean org.springframework.aop.config.ITestBean = org.springframework.aop.config.ITestBean ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; org.springframework.aop.config.ITestBean . getAge ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; org.springframework.aop.config.ITestBean . getName ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingBeforeAdvice . getCalls ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ITestBean org.springframework.aop.config.ITestBean = org.springframework.aop.config.ITestBean ( ) ; org.springframework.aop.config.CountingAspectJAdvice org.springframework.aop.config.CountingAspectJAdvice = ( org.springframework.aop.config.CountingAspectJAdvice ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; org.springframework.aop.config.ITestBean . setName ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; org.springframework.aop.config.ITestBean . getName ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ITestBean org.springframework.aop.config.ITestBean = ( ITestBean ) this . org.springframework.aop.config.ApplicationContext . getAutowireCapableBeanFactory ( ) . initializeBean ( new TestBean ( ) , null ) ; org.springframework.aop.config.CountingAspectJAdvice org.springframework.aop.config.CountingAspectJAdvice = ( org.springframework.aop.config.CountingAspectJAdvice ) this . org.springframework.aop.config.ApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; org.springframework.aop.config.ITestBean . setName ( STRING ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; org.springframework.aop.config.ITestBean . getName ( ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; assertEquals ( STRING , NUMBER , org.springframework.aop.config.CountingAspectJAdvice . int ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Throwable { this . int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( ) java.lang.Throwable { this . int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( ProceedingJoinPoint org.springframework.aop.config.ProceedingJoinPoint ) throws java.lang.Throwable { this . int ++ ; org.springframework.aop.config.ProceedingJoinPoint . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.RuntimeException java.lang.RuntimeException ) { this . int ++ ; }  <METHOD_END>
<METHOD_START> public void void ( int int , ITestBean org.springframework.aop.config.ITestBean ) { }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> public int int ( ) { return this . int ; }  <METHOD_END>
