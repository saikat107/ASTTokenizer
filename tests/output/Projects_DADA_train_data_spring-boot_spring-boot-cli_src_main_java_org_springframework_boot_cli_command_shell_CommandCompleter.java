<METHOD_START> public void ( ConsoleReader org.springframework.boot.cli.command.shell.ConsoleReader , ArgumentDelimiter org.springframework.boot.cli.command.shell.ArgumentDelimiter , java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> < Command > java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> ) { this . org.springframework.boot.cli.command.shell.ConsoleReader = org.springframework.boot.cli.command.shell.ConsoleReader ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( Command org.springframework.boot.cli.command.shell.Command : java.lang.Iterable<org.springframework.boot.cli.command.shell.Command> ) { this . java.util.List<org.springframework.boot.cli.command.shell.Command> . add ( org.springframework.boot.cli.command.shell.Command ) ; java.util.List<java.lang.String> . boolean ( org.springframework.boot.cli.command.shell.Command . getName ( ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( OptionHelp org.springframework.boot.cli.command.shell.OptionHelp : org.springframework.boot.cli.command.shell.Command . getOptionsHelp ( ) ) { java.util.List<java.lang.String> . boolean ( org.springframework.boot.cli.command.shell.OptionHelp . getOptions ( ) ) ; } AggregateCompleter org.springframework.boot.cli.command.shell.AggregateCompleter = new AggregateCompleter ( new StringsCompleter ( java.util.List<java.lang.String> ) , new FileNameCompleter ( ) ) ; ArgumentCompleter org.springframework.boot.cli.command.shell.ArgumentCompleter = new ArgumentCompleter ( org.springframework.boot.cli.command.shell.ArgumentDelimiter , org.springframework.boot.cli.command.shell.AggregateCompleter ) ; org.springframework.boot.cli.command.shell.ArgumentCompleter . setStrict ( false ) ; this . java.util.Map<java.lang.String,org.springframework.boot.cli.command.shell.Completer> . put ( org.springframework.boot.cli.command.shell.Command . getName ( ) , org.springframework.boot.cli.command.shell.ArgumentCompleter ) ; } getStrings ( ) . addAll ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( java.lang.String java.lang.String , int int , java.util.List<java.lang.CharSequence> < java.lang.CharSequence > java.util.List<java.lang.CharSequence> ) { int int = super. complete ( java.lang.String , int , java.util.List<java.lang.CharSequence> ) ; int int = java.lang.String . int ( ' ' ) ; java.lang.String java.lang.String = ( int == - NUMBER ) ? STRING : java.lang.String . java.lang.String ( NUMBER , int ) ; if ( ! STRING . boolean ( java.lang.String . java.lang.String ( ) ) ) { for ( Command org.springframework.boot.cli.command.shell.Command : this . java.util.List<org.springframework.boot.cli.command.shell.Command> ) { if ( org.springframework.boot.cli.command.shell.Command . getName ( ) . equals ( java.lang.String ) ) { if ( int == java.lang.String . int ( ) && java.lang.String . boolean ( STRING ) ) { void ( org.springframework.boot.cli.command.shell.Command ) ; break; } Completer org.springframework.boot.cli.command.shell.Completer = this . java.util.Map<java.lang.String,org.springframework.boot.cli.command.shell.Completer> . get ( org.springframework.boot.cli.command.shell.Command . getName ( ) ) ; if ( org.springframework.boot.cli.command.shell.Completer != null ) { int = org.springframework.boot.cli.command.shell.Completer . complete ( java.lang.String , int , java.util.List<java.lang.CharSequence> ) ; break; } } } } return int ; }  <METHOD_END>
<METHOD_START> private void void ( Command org.springframework.boot.cli.command.shell.Command ) { try { int int = NUMBER ; java.util.List<org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine> < org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine > java.util.List<org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine> = new java.util.ArrayList<org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine> <> ( ) ; for ( OptionHelp org.springframework.boot.cli.command.shell.OptionHelp : org.springframework.boot.cli.command.shell.Command . getOptionsHelp ( ) ) { org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine = new org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine ( org.springframework.boot.cli.command.shell.OptionHelp ) ; java.util.List<org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine> . boolean ( org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine ) ; int = java.lang.Math . int ( int , org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine . java.lang.String ( ) . int ( ) ) ; } this . org.springframework.boot.cli.command.shell.ConsoleReader . println ( ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . println ( STRING ) ; this . org.springframework.boot.cli.command.shell.ConsoleReader . println ( org.springframework.boot.cli.command.shell.Command . getName ( ) + STRING + org.springframework.boot.cli.command.shell.Command . getUsageHelp ( ) ) ; for ( org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine : java.util.List<org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine> ) { this . org.springframework.boot.cli.command.shell.ConsoleReader . println ( java.lang.String . java.lang.String ( STRING + int + STRING , org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine . java.lang.String ( ) , org.springframework.boot.cli.command.shell.CommandCompleter.OptionHelpLine . java.lang.String ( ) ) ) ; } this . org.springframework.boot.cli.command.shell.ConsoleReader . drawLine ( ) ; } catch ( java.io.IOException java.io.IOException ) { Log . error ( java.io.IOException . java.lang.String ( ) + STRING + java.io.IOException . java.lang.Class<? extends java.io.IOException> ( ) . java.lang.String ( ) + STRING ) ; } }  <METHOD_END>
<METHOD_START> void ( OptionHelp org.springframework.boot.cli.command.shell.OptionHelp ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( java.lang.String java.lang.String : org.springframework.boot.cli.command.shell.OptionHelp . getOptions ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.StringBuilder . int ( ) == NUMBER ? STRING : STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String ) ; } this . java.lang.String = java.lang.StringBuilder . java.lang.String ( ) ; this . java.lang.String = org.springframework.boot.cli.command.shell.OptionHelp . getUsageHelp ( ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
