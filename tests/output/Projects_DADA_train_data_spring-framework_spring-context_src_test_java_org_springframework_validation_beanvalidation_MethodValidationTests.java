<METHOD_START> @ Test public void void ( ) { org.springframework.validation.beanvalidation.MethodValidationTests.MyValidBean org.springframework.validation.beanvalidation.MethodValidationTests.MyValidBean = new org.springframework.validation.beanvalidation.MethodValidationTests.MyValidBean ( ) ; ProxyFactory org.springframework.validation.beanvalidation.ProxyFactory = new ProxyFactory ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidBean ) ; org.springframework.validation.beanvalidation.ProxyFactory . addAdvice ( new MethodValidationInterceptor ( ) ) ; org.springframework.validation.beanvalidation.ProxyFactory . addAdvisor ( new AsyncAnnotationAdvisor ( ) ) ; void ( ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface ) org.springframework.validation.beanvalidation.ProxyFactory . getProxy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { StaticApplicationContext org.springframework.validation.beanvalidation.StaticApplicationContext = new StaticApplicationContext ( ) ; org.springframework.validation.beanvalidation.StaticApplicationContext . registerSingleton ( STRING , MethodValidationPostProcessor .class ) ; MutablePropertyValues org.springframework.validation.beanvalidation.MutablePropertyValues = new MutablePropertyValues ( ) ; org.springframework.validation.beanvalidation.MutablePropertyValues . add ( STRING , false ) ; org.springframework.validation.beanvalidation.StaticApplicationContext . registerSingleton ( STRING , AsyncAnnotationBeanPostProcessor .class , org.springframework.validation.beanvalidation.MutablePropertyValues ) ; org.springframework.validation.beanvalidation.StaticApplicationContext . registerSingleton ( STRING , org.springframework.validation.beanvalidation.MethodValidationTests.MyValidBean .class ) ; org.springframework.validation.beanvalidation.StaticApplicationContext . refresh ( ) ; void ( org.springframework.validation.beanvalidation.StaticApplicationContext . getBean ( STRING , org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface .class ) ) ; org.springframework.validation.beanvalidation.StaticApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface ) { assertNotNull ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( STRING , NUMBER ) ) ; try { assertNotNull ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( STRING , NUMBER ) ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } try { assertNotNull ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( null , NUMBER ) ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } try { assertNotNull ( org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( STRING , NUMBER ) ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . void ( STRING , NUMBER ) ; try { org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . void ( STRING , NUMBER ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } try { org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . void ( null , NUMBER ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } assertEquals ( STRING , org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( STRING ) ) ; try { org.springframework.validation.beanvalidation.MethodValidationTests.MyValidInterface . java.lang.Object ( null ) ; fail ( STRING ) ; } catch ( javax . javax.validation . javax.validation javax.validation.ValidationException ) { } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , int int ) { return ( int == NUMBER ? null : STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , int int ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ NotNull java.lang.Object java.lang.Object ( @ NotNull ( groups = org.springframework.validation.beanvalidation.MethodValidationTests.MyGroup .class ) java.lang.String java.lang.String , @ Max ( NUMBER ) int int );  <METHOD_END>
<METHOD_START> @ org.springframework.validation.beanvalidation.MethodValidationTests.MyValid @ Async void void ( @ NotNull ( groups = org.springframework.validation.beanvalidation.MethodValidationTests.OtherGroup .class ) java.lang.String java.lang.String , @ Max ( NUMBER ) int int );  <METHOD_END>
<METHOD_START> T T ( @ NotNull T T );  <METHOD_END>
