<METHOD_START> public void ( ServletRequest org.springframework.mock.web.test.ServletRequest , ServletResponse org.springframework.mock.web.test.ServletResponse ) { this . org.springframework.mock.web.test.HttpServletRequest = ( HttpServletRequest ) org.springframework.mock.web.test.ServletRequest ; this . org.springframework.mock.web.test.HttpServletResponse = ( HttpServletResponse ) org.springframework.mock.web.test.ServletResponse ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Runnable java.lang.Runnable ) { Assert . notNull ( java.lang.Runnable , STRING ) ; this . java.util.List<java.lang.Runnable> . boolean ( java.lang.Runnable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.ServletRequest org.springframework.mock.web.test.ServletRequest ( ) { return this . org.springframework.mock.web.test.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.mock.web.test.ServletResponse org.springframework.mock.web.test.ServletResponse ( ) { return this . org.springframework.mock.web.test.HttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.mock.web.test.HttpServletRequest instanceof MockHttpServletRequest && this . org.springframework.mock.web.test.HttpServletResponse instanceof MockHttpServletResponse ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( this . org.springframework.mock.web.test.HttpServletRequest . getRequestURI ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { void ( null , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ServletContext org.springframework.mock.web.test.ServletContext , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; for ( java.lang.Runnable java.lang.Runnable : this . java.util.List<java.lang.Runnable> ) { java.lang.Runnable . void ( ) ; } }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { MockHttpServletRequest org.springframework.mock.web.test.MockHttpServletRequest = WebUtils . getNativeRequest ( org.springframework.mock.web.test.HttpServletRequest , MockHttpServletRequest .class ) ; if ( org.springframework.mock.web.test.MockHttpServletRequest != null ) { org.springframework.mock.web.test.MockHttpServletRequest . setAsyncStarted ( false ) ; } for ( AsyncListener org.springframework.mock.web.test.AsyncListener : this . java.util.List<org.springframework.mock.web.test.AsyncListener> ) { try { org.springframework.mock.web.test.AsyncListener . onComplete ( new AsyncEvent ( this , this . org.springframework.mock.web.test.HttpServletRequest , this . org.springframework.mock.web.test.HttpServletResponse ) ) ; } catch ( java.io.IOException java.io.IOException ) { throw new java.lang.IllegalStateException ( STRING , java.io.IOException ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Runnable java.lang.Runnable ) { java.lang.Runnable . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncListener org.springframework.mock.web.test.AsyncListener ) { this . java.util.List<org.springframework.mock.web.test.AsyncListener> . add ( org.springframework.mock.web.test.AsyncListener ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AsyncListener org.springframework.mock.web.test.AsyncListener , ServletRequest org.springframework.mock.web.test.ServletRequest , ServletResponse org.springframework.mock.web.test.ServletResponse ) { this . java.util.List<org.springframework.mock.web.test.AsyncListener> . add ( org.springframework.mock.web.test.AsyncListener ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.mock.web.test.AsyncListener> < AsyncListener > java.util.List<org.springframework.mock.web.test.AsyncListener> ( ) { return this . java.util.List<org.springframework.mock.web.test.AsyncListener> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T extends org.springframework.mock.web.test.AsyncListener > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.mock.web.test.ServletException { return BeanUtils . instantiateClass ( java.lang.Class<T> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public long long ( ) { return this . long ; }  <METHOD_END>
