<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.FreeMarkerWebConfig .class ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.TilesWebConfig .class ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getForwardedUrl ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.GroovyMarkupWebConfig .class ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.InvalidFreeMarkerWebConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.InvalidTilesWebConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.web.servlet.config.annotation.ExpectedException . expectMessage ( STRING ) ; org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.InvalidGroovyMarkupWebConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.ExistingViewResolverConfig .class ) ; assertEquals ( STRING , org.springframework.web.servlet.config.annotation.MockHttpServletResponse . getContentAsString ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.servlet.config.annotation.MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse ( java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.web.servlet.config.annotation.ServletException , java.io.IOException { java.lang.String java.lang.String = STRING ; MockServletContext org.springframework.web.servlet.config.annotation.MockServletContext = new MockServletContext ( java.lang.String ) ; MockServletConfig org.springframework.web.servlet.config.annotation.MockServletConfig = new MockServletConfig ( org.springframework.web.servlet.config.annotation.MockServletContext ) ; MockHttpServletRequest org.springframework.web.servlet.config.annotation.MockHttpServletRequest = new MockHttpServletRequest ( STRING , STRING ) ; MockHttpServletResponse org.springframework.web.servlet.config.annotation.MockHttpServletResponse = new MockHttpServletResponse ( ) ; AnnotationConfigWebApplicationContext org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext = new AnnotationConfigWebApplicationContext ( ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . register ( java.lang.Class<> ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . setServletContext ( org.springframework.web.servlet.config.annotation.MockServletContext ) ; org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext . refresh ( ) ; DispatcherServlet org.springframework.web.servlet.config.annotation.DispatcherServlet = new DispatcherServlet ( org.springframework.web.servlet.config.annotation.AnnotationConfigWebApplicationContext ) ; org.springframework.web.servlet.config.annotation.DispatcherServlet . init ( org.springframework.web.servlet.config.annotation.MockServletConfig ) ; org.springframework.web.servlet.config.annotation.DispatcherServlet . service ( org.springframework.web.servlet.config.annotation.MockHttpServletRequest , org.springframework.web.servlet.config.annotation.MockHttpServletResponse ) ; return org.springframework.web.servlet.config.annotation.MockHttpServletResponse ; }  <METHOD_END>
<METHOD_START> @ RequestMapping ( value = STRING , method = RequestMethod . GET ) public java.lang.String java.lang.String ( ModelMap org.springframework.web.servlet.config.annotation.ModelMap ) { org.springframework.web.servlet.config.annotation.ModelMap . addAttribute ( STRING , STRING ) ; return STRING ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.SampleController org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.SampleController ( ) { return new org.springframework.web.servlet.config.annotation.ViewResolutionIntegrationTests.SampleController ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . freeMarker ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer ( ) { FreeMarkerConfigurer org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer . setTemplateLoaderPath ( STRING ) ; return org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . tiles ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.TilesConfigurer org.springframework.web.servlet.config.annotation.TilesConfigurer ( ) { TilesConfigurer org.springframework.web.servlet.config.annotation.TilesConfigurer = new TilesConfigurer ( ) ; org.springframework.web.servlet.config.annotation.TilesConfigurer . setDefinitions ( STRING ) ; return org.springframework.web.servlet.config.annotation.TilesConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . groovy ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.GroovyMarkupConfigurer org.springframework.web.servlet.config.annotation.GroovyMarkupConfigurer ( ) { GroovyMarkupConfigurer org.springframework.web.servlet.config.annotation.GroovyMarkupConfigurer = new GroovyMarkupConfigurer ( ) ; org.springframework.web.servlet.config.annotation.GroovyMarkupConfigurer . setResourceLoaderPath ( STRING ) ; return org.springframework.web.servlet.config.annotation.GroovyMarkupConfigurer ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . freeMarker ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . tiles ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ViewResolverRegistry org.springframework.web.servlet.config.annotation.ViewResolverRegistry ) { org.springframework.web.servlet.config.annotation.ViewResolverRegistry . groovy ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver org.springframework.web.servlet.config.annotation.FreeMarkerViewResolver ( ) { return new FreeMarkerViewResolver ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer ( ) { FreeMarkerConfigurer org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer = new FreeMarkerConfigurer ( ) ; org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer . setTemplateLoaderPath ( STRING ) ; return org.springframework.web.servlet.config.annotation.FreeMarkerConfigurer ; }  <METHOD_END>
