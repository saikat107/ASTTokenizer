<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomLoggingConfig .class , EndpointAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( BeansEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( DumpEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( EnvironmentEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( HealthEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( InfoEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( LoggersEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( ShutdownEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( TraceEndpoint .class ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( RequestMappingEndpoint .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( EmbeddedDataSourceConfiguration .class , EndpointAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; HealthEndpoint org.springframework.boot.actuate.autoconfigure.HealthEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( HealthEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.HealthEndpoint ) . isNotNull ( ) ; Health org.springframework.boot.actuate.autoconfigure.Health = org.springframework.boot.actuate.autoconfigure.HealthEndpoint . invoke ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health . getDetails ( ) . containsKey ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( EndpointAutoConfiguration .class , HealthIndicatorAutoConfiguration .class ) ; HealthEndpoint org.springframework.boot.actuate.autoconfigure.HealthEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( HealthEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.HealthEndpoint ) . isNotNull ( ) ; Health org.springframework.boot.actuate.autoconfigure.Health = org.springframework.boot.actuate.autoconfigure.HealthEndpoint . invoke ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.Health ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomLoggingConfig .class , EndpointAutoConfiguration .class ) ; LoggersEndpoint org.springframework.boot.actuate.autoconfigure.LoggersEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( LoggersEndpoint .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.autoconfigure.LoggersEndpoint . invoke ( ) ; assertThat ( ( java.util.Map<?,?> < ? , ? > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . size ( ) . isGreaterThan ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( PublicMetricsAutoConfiguration .class , EndpointAutoConfiguration .class ) ; MetricsEndpoint org.springframework.boot.actuate.autoconfigure.MetricsEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsEndpoint .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.autoconfigure.MetricsEndpoint . invoke ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomPublicMetricsConfig .class , PublicMetricsAutoConfiguration .class , EndpointAutoConfiguration .class ) ; MetricsEndpoint org.springframework.boot.actuate.autoconfigure.MetricsEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( MetricsEndpoint .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.autoconfigure.MetricsEndpoint . invoke ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) . isTrue ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . boolean ( STRING ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( EndpointAutoConfiguration .class , ConditionEvaluationReport .class ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( AutoConfigurationReportEndpoint .class ) ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( ProjectInfoAutoConfiguration .class , InfoContributorAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; InfoEndpoint org.springframework.boot.actuate.autoconfigure.InfoEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( InfoEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.InfoEndpoint ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.InfoEndpoint . invoke ( ) . get ( STRING ) ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.InfoEndpoint . invoke ( ) . get ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( InfoContributorAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; InfoEndpoint org.springframework.boot.actuate.autoconfigure.InfoEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( InfoEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.InfoEndpoint ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.InfoEndpoint . invoke ( ) . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext , STRING ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomInfoContributorsConfig .class , ProjectInfoAutoConfiguration .class , InfoContributorAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; InfoEndpoint org.springframework.boot.actuate.autoconfigure.InfoEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( InfoEndpoint .class ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.boot.actuate.autoconfigure.InfoEndpoint . invoke ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . isNotNull ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.util.Map .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , FlywayAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; FlywayEndpoint org.springframework.boot.actuate.autoconfigure.FlywayEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( FlywayEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FlywayEndpoint ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.FlywayEndpoint . invoke ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.MultipleFlywayBeansConfig .class , FlywayAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( Flyway .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( FlywayEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( EmbeddedDataSourceConfiguration .class , LiquibaseAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; LiquibaseEndpoint org.springframework.boot.actuate.autoconfigure.LiquibaseEndpoint = this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBean ( LiquibaseEndpoint .class ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.LiquibaseEndpoint ) . isNotNull ( ) ; assertThat ( org.springframework.boot.actuate.autoconfigure.LiquibaseEndpoint . invoke ( ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.MultipleLiquibaseBeansConfig .class , LiquibaseAutoConfiguration .class , EndpointAutoConfiguration .class ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( SpringLiquibase .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . getBeansOfType ( LiquibaseEndpoint .class ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; this . org.springframework.boot.actuate.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.actuate.autoconfigure.LoggingSystem org.springframework.boot.actuate.autoconfigure.LoggingSystem ( ) { return LoggingSystem . get ( java.lang.Class<? extends org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomLoggingConfig> ( ) . java.lang.ClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.boot.actuate.autoconfigure.PublicMetrics org.springframework.boot.actuate.autoconfigure.PublicMetrics ( ) { return new PublicMetrics ( ) { @ java.lang.Override public java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> ( ) { Metric < java.lang.Integer > org.springframework.boot.actuate.autoconfigure.Metric<java.lang.Integer> = new Metric <> ( STRING , NUMBER ) ; return java.util.Collections .< Metric < ? > > java.util.Set<org.springframework.boot.actuate.autoconfigure.Metric<?>> ( org.springframework.boot.actuate.autoconfigure.Metric<java.lang.Integer> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> < Metric < ? > > java.util.Collection<org.springframework.boot.actuate.autoconfigure.Metric<?>> ( ) { Metric < java.lang.Integer > org.springframework.boot.actuate.autoconfigure.Metric<java.lang.Integer> = new Metric <> ( STRING , NUMBER ) ; return java.util.Collections .< Metric < ? > > java.util.Set<org.springframework.boot.actuate.autoconfigure.Metric<?>> ( org.springframework.boot.actuate.autoconfigure.Metric<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( InfoContributorAutoConfiguration . DEFAULT_ORDER - NUMBER ) public org.springframework.boot.actuate.autoconfigure.InfoContributor org.springframework.boot.actuate.autoconfigure.InfoContributor ( ) { return new InfoContributor ( ) { @ java.lang.Override public void void ( Info . Info Info.Builder ) { Info.Builder . withDetail ( STRING , STRING ) ; Info.Builder . withDetail ( STRING , STRING ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Info . Info Info.Builder ) { Info.Builder . withDetail ( STRING , STRING ) ; Info.Builder . withDetail ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( InfoContributorAutoConfiguration . DEFAULT_ORDER + NUMBER ) public org.springframework.boot.actuate.autoconfigure.InfoContributor org.springframework.boot.actuate.autoconfigure.InfoContributor ( ProjectInfoProperties org.springframework.boot.actuate.autoconfigure.ProjectInfoProperties )				throws java.io.IOException , org.springframework.boot.actuate.autoconfigure.BindException { return new org.springframework.boot.actuate.autoconfigure.EndpointAutoConfigurationTests.CustomInfoContributorsConfig.GitFullInfoContributor ( org.springframework.boot.actuate.autoconfigure.ProjectInfoProperties . getGit ( ) . getLocation ( ) ) ; }  <METHOD_END>
<METHOD_START> void ( Resource org.springframework.boot.actuate.autoconfigure.Resource ) throws org.springframework.boot.actuate.autoconfigure.BindException , java.io.IOException { if ( org.springframework.boot.actuate.autoconfigure.Resource . exists ( ) ) { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( org.springframework.boot.actuate.autoconfigure.Resource ) ; PropertiesPropertySource org.springframework.boot.actuate.autoconfigure.PropertiesPropertySource = new PropertiesPropertySource ( STRING , java.util.Properties ) ; this . java.util.Map<java.lang.String,java.lang.Object> = new PropertySourcesBinder ( org.springframework.boot.actuate.autoconfigure.PropertiesPropertySource ) . extractAll ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Info . Info Info.Builder ) { if ( ! this . java.util.Map<java.lang.String,java.lang.Object> . boolean ( ) ) { Info.Builder . withDetail ( STRING , this . java.util.Map<java.lang.String,java.lang.Object> ) ; } }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return DataSourceBuilder . create ( ) . url ( STRING ) . username ( STRING ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.Flyway org.springframework.boot.actuate.autoconfigure.Flyway ( ) { Flyway org.springframework.boot.actuate.autoconfigure.Flyway = new Flyway ( ) ; org.springframework.boot.actuate.autoconfigure.Flyway . setDataSource ( javax.sql.DataSource ( ) ) ; return org.springframework.boot.actuate.autoconfigure.Flyway ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.Flyway org.springframework.boot.actuate.autoconfigure.Flyway ( ) { Flyway org.springframework.boot.actuate.autoconfigure.Flyway = new Flyway ( ) ; org.springframework.boot.actuate.autoconfigure.Flyway . setDataSource ( javax.sql.DataSource ( ) ) ; return org.springframework.boot.actuate.autoconfigure.Flyway ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.SpringLiquibase org.springframework.boot.actuate.autoconfigure.SpringLiquibase ( ) { SpringLiquibase org.springframework.boot.actuate.autoconfigure.SpringLiquibase = new SpringLiquibase ( ) ; org.springframework.boot.actuate.autoconfigure.SpringLiquibase . setChangeLog ( STRING ) ; org.springframework.boot.actuate.autoconfigure.SpringLiquibase . setDataSource ( javax.sql.DataSource ( ) ) ; return org.springframework.boot.actuate.autoconfigure.SpringLiquibase ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.actuate.autoconfigure.SpringLiquibase org.springframework.boot.actuate.autoconfigure.SpringLiquibase ( ) { SpringLiquibase org.springframework.boot.actuate.autoconfigure.SpringLiquibase = new SpringLiquibase ( ) ; org.springframework.boot.actuate.autoconfigure.SpringLiquibase . setChangeLog ( STRING ) ; org.springframework.boot.actuate.autoconfigure.SpringLiquibase . setDataSource ( javax.sql.DataSource ( ) ) ; return org.springframework.boot.actuate.autoconfigure.SpringLiquibase ; }  <METHOD_END>
