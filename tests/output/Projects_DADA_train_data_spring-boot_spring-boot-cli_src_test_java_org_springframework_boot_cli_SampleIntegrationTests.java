<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; java.net.URI java.net.URI = new java.io.File ( STRING ) . java.net.URI ( ) ; assertThat ( java.lang.String ) . contains ( STRING + java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; java.net.URI java.net.URI = new java.io.File ( STRING ) . java.net.URI ( ) ; assertThat ( java.lang.String ) . contains ( STRING + java.net.URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.CliTester . run ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING , STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING , STRING , STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.CliTester . run ( STRING , STRING ) ; java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; java.lang.String = this . org.springframework.boot.cli.CliTester . getHttpOutput ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING , STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.System . java.lang.String ( STRING , STRING ) ; try { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; } finally { java.lang.System . java.lang.String ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) java.lang.Exception { java.lang.String java.lang.String = this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.cli.CliTester . run ( STRING ) ; assertThat ( this . org.springframework.boot.cli.CliTester . getHttpOutput ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.cli.CliTester . run ( STRING ) ) . contains ( STRING ) ; }  <METHOD_END>
