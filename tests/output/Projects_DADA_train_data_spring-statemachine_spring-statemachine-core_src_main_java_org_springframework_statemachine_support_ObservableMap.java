<METHOD_START> public void ( ) { java.util.Map<K,V> = new java.util.concurrent.ConcurrentHashMap<K,V> < K , V > ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Map<K,V> < K , V > java.util.Map<K,V> , org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> < K , V > org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> ) { Assert . notNull ( java.util.Map<K,V> , STRING ) ; Assert . notNull ( org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> , STRING ) ; this . java.util.Map<K,V> = java.util.Map<K,V> ; this . org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> = org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return java.util.Map<K,V> . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return java.util.Map<K,V> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.util.Map<K,V> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { return java.util.Map<K,V> . boolean ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( java.lang.Object java.lang.Object ) { return java.util.Map<K,V> . V ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public V V ( K K , V V ) { V V = java.util.Map<K,V> . V ( K , V ) ; if ( org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> != null ) { if ( V == null ) { org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> . void ( K , V ) ; } else if ( V != null && ! V . boolean ( V ) ) { org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> . void ( K , V ) ; } } return V ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) @ java.lang.Override public V V ( java.lang.Object java.lang.Object ) { V V = java.util.Map<K,V> . V ( java.lang.Object ) ; if ( org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> != null && V != null ) { org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> . void ( ( K ) java.lang.Object , V ) ; } return V ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Map<? extends K,? extends V> < ? extends K , ? extends V > java.util.Map<? extends K,? extends V> ) { java.util.Map<K,V> . void ( java.util.Map<,> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.Map<K,V> . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<K> < K > java.util.Set<K> ( ) { return java.util.Map<K,V> . java.util.Set<K> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Collection<V> < V > java.util.Collection<V> ( ) { return java.util.Map<K,V> . java.util.Collection<V> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<java.util.Map.Entry<K,V>> < java . util . java.util.Map . java.util.Map.Entry<K,V> < K , V > > java.util.Set<java.util.Map.Entry<K,V>> ( ) { return java.util.Map<K,V> . java.util.Set<java.util.Map.Entry<K,V>> ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.util.Map<K,V> . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<K,V> < K , V > java.util.Map<K,V> ( ) { return java.util.Map<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( java.util.Map<K,V> < K , V > java.util.Map<K,V> ) { this . java.util.Map<K,V> = java.util.Map<K,V> ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> < K , V > org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> ) { this . org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> = org.springframework.statemachine.support.ObservableMap.MapChangeListener<K,V> ; }  <METHOD_END>
<METHOD_START> void void ( K K , V V );  <METHOD_END>
<METHOD_START> void void ( K K , V V );  <METHOD_END>
<METHOD_START> void void ( K K , V V );  <METHOD_END>
