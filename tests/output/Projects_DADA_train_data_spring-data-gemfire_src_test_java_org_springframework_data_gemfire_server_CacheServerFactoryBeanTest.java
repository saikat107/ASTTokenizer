<METHOD_START> @ Test public void void ( ) { assertNull ( new CacheServerFactoryBean ( ) . getObject ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertEquals ( CacheServer .class , new CacheServerFactoryBean ( ) . getObjectType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( new CacheServerFactoryBean ( ) . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.io.IOException { Cache org.springframework.data.gemfire.server.Cache = mock ( Cache .class , STRING ) ; CacheServer org.springframework.data.gemfire.server.CacheServer = mock ( CacheServer .class , STRING ) ; ClientSubscriptionConfig org.springframework.data.gemfire.server.ClientSubscriptionConfig = mock ( ClientSubscriptionConfig .class , STRING ) ; InterestRegistrationListener org.springframework.data.gemfire.server.InterestRegistrationListener = mock ( InterestRegistrationListener .class , STRING ) ; InterestRegistrationListener org.springframework.data.gemfire.server.InterestRegistrationListener = mock ( InterestRegistrationListener .class , STRING ) ; ServerLoadProbe org.springframework.data.gemfire.server.ServerLoadProbe = mock ( ServerLoadProbe .class , STRING ) ; when ( org.springframework.data.gemfire.server.Cache . addCacheServer ( ) ) . thenReturn ( org.springframework.data.gemfire.server.CacheServer ) ; when ( org.springframework.data.gemfire.server.CacheServer . getClientSubscriptionConfig ( ) ) . thenReturn ( org.springframework.data.gemfire.server.ClientSubscriptionConfig ) ; CacheServerFactoryBean org.springframework.data.gemfire.server.CacheServerFactoryBean = new CacheServerFactoryBean ( ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setCache ( org.springframework.data.gemfire.server.Cache ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setBindAddress ( STRING ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setHostNameForClients ( STRING ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setListeners ( new java.util.HashSet<org.springframework.data.gemfire.server.InterestRegistrationListener> < InterestRegistrationListener > ( java.util.Arrays . java.util.List ( org.springframework.data.gemfire.server.InterestRegistrationListener , org.springframework.data.gemfire.server.InterestRegistrationListener ) ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setLoadPollInterval ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setMaxConnections ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setMaxMessageCount ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setMaxTimeBetweenPings ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setMaxThreads ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setMessageTimeToLive ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setNotifyBySubscription ( true ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setPort ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setServerGroups ( new java.lang.String [] { STRING } ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setServerLoadProbe ( org.springframework.data.gemfire.server.ServerLoadProbe ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSocketBufferSize ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSubscriptionCapacity ( NUMBER ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSubscriptionEvictionPolicy ( SubscriptionEvictionPolicy . ENTRY ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSubscriptionDiskStore ( STRING ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . afterPropertiesSet ( ) ; assertSame ( org.springframework.data.gemfire.server.CacheServer , org.springframework.data.gemfire.server.CacheServerFactoryBean . getObject ( ) ) ; assertEquals ( org.springframework.data.gemfire.server.CacheServer . getClass ( ) , org.springframework.data.gemfire.server.CacheServerFactoryBean . getObjectType ( ) ) ; verify ( org.springframework.data.gemfire.server.Cache , times ( NUMBER ) ) . addCacheServer ( ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setBindAddress ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setGroups ( eq ( new java.lang.String [] { STRING } ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setHostnameForClients ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setLoadPollInterval ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setLoadProbe ( same ( org.springframework.data.gemfire.server.ServerLoadProbe ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setMaxConnections ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setMaximumMessageCount ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setMaximumTimeBetweenPings ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setMaxThreads ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setMessageTimeToLive ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setNotifyBySubscription ( eq ( true ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setPort ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . setSocketBufferSize ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . registerInterestRegistrationListener ( same ( org.springframework.data.gemfire.server.InterestRegistrationListener ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . registerInterestRegistrationListener ( same ( org.springframework.data.gemfire.server.InterestRegistrationListener ) ) ; verify ( org.springframework.data.gemfire.server.CacheServer , times ( NUMBER ) ) . getClientSubscriptionConfig ( ) ; verify ( org.springframework.data.gemfire.server.ClientSubscriptionConfig , times ( NUMBER ) ) . setCapacity ( eq ( NUMBER ) ) ; verify ( org.springframework.data.gemfire.server.ClientSubscriptionConfig , times ( NUMBER ) ) . setDiskStoreName ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.server.ClientSubscriptionConfig , times ( NUMBER ) ) . setEvictionPolicy ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.io.IOException { try { new CacheServerFactoryBean ( ) . afterPropertiesSet ( ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertEquals ( STRING , java.lang.IllegalArgumentException . java.lang.String ( ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheServerFactoryBean org.springframework.data.gemfire.server.CacheServerFactoryBean = new CacheServerFactoryBean ( ) ; assertTrue ( org.springframework.data.gemfire.server.CacheServerFactoryBean . isAutoStartup ( ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setAutoStartup ( false ) ; assertFalse ( org.springframework.data.gemfire.server.CacheServerFactoryBean . isAutoStartup ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { CacheServerFactoryBean org.springframework.data.gemfire.server.CacheServerFactoryBean = new CacheServerFactoryBean ( ) ; assertEquals ( SubscriptionEvictionPolicy . DEFAULT , org.springframework.data.gemfire.server.CacheServerFactoryBean . getSubscriptionEvictionPolicy ( ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSubscriptionEvictionPolicy ( SubscriptionEvictionPolicy . MEM ) ; assertEquals ( SubscriptionEvictionPolicy . MEM , org.springframework.data.gemfire.server.CacheServerFactoryBean . getSubscriptionEvictionPolicy ( ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setSubscriptionEvictionPolicy ( null ) ; assertEquals ( SubscriptionEvictionPolicy . DEFAULT , org.springframework.data.gemfire.server.CacheServerFactoryBean . getSubscriptionEvictionPolicy ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { CacheServer org.springframework.data.gemfire.server.CacheServer = mock ( CacheServer .class , STRING ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; final java.util.concurrent.atomic.AtomicBoolean java.util.concurrent.atomic.AtomicBoolean = new java.util.concurrent.atomic.AtomicBoolean ( false ) ; doAnswer ( new Answer ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; return null ; } } ) . when ( org.springframework.data.gemfire.server.CacheServer ) . start ( ) ; doAnswer ( new Answer ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicBoolean . boolean ( true , false ) ; return null ; } } ) . when ( org.springframework.data.gemfire.server.CacheServer ) . stop ( ) ; when ( org.springframework.data.gemfire.server.CacheServer . isRunning ( ) ) . then ( new Answer < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; } } ) ; CacheServerFactoryBean org.springframework.data.gemfire.server.CacheServerFactoryBean = new CacheServerFactoryBean ( ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . setCacheServer ( org.springframework.data.gemfire.server.CacheServer ) ; assertSame ( org.springframework.data.gemfire.server.CacheServer , org.springframework.data.gemfire.server.CacheServerFactoryBean . getObject ( ) ) ; assertFalse ( org.springframework.data.gemfire.server.CacheServerFactoryBean . isRunning ( ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . start ( ) ; assertTrue ( org.springframework.data.gemfire.server.CacheServerFactoryBean . isRunning ( ) ) ; assertFalse ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; org.springframework.data.gemfire.server.CacheServerFactoryBean . stop ( new java.lang.Runnable ( ) { @ java.lang.Override public void void ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; } } ) ; assertFalse ( org.springframework.data.gemfire.server.CacheServerFactoryBean . isRunning ( ) ) ; assertTrue ( java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicBoolean . boolean ( false , true ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { java.util.concurrent.atomic.AtomicBoolean . boolean ( true , false ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( final InvocationOnMock org.springframework.data.gemfire.server.InvocationOnMock ) throws java.lang.Throwable { return java.util.concurrent.atomic.AtomicBoolean . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { java.util.concurrent.atomic.AtomicBoolean . void ( true ) ; }  <METHOD_END>
