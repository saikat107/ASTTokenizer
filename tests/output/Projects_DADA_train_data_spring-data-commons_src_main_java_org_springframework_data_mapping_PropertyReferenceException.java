<METHOD_START> public void ( java.lang.String java.lang.String , TypeInformation < ? > org.springframework.data.mapping.TypeInformation<?> , java.util.List<org.springframework.data.mapping.PropertyPath> < PropertyPath > java.util.List<org.springframework.data.mapping.PropertyPath> ) { Assert . hasText ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.data.mapping.TypeInformation<> , STRING ) ; Assert . notNull ( java.util.List<org.springframework.data.mapping.PropertyPath> , STRING ) ; this . java.lang.String = java.lang.String ; this . org.springframework.data.mapping.TypeInformation<?> = org.springframework.data.mapping.TypeInformation<> ; this . java.util.List<org.springframework.data.mapping.PropertyPath> = java.util.List<org.springframework.data.mapping.PropertyPath> ; this . java.util.Set<java.lang.String> = java.util.Set<java.lang.String> ( java.lang.String , org.springframework.data.mapping.TypeInformation<> . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.TypeInformation<?> < ? > org.springframework.data.mapping.TypeInformation<?> ( ) { return org.springframework.data.mapping.TypeInformation<> ; }  <METHOD_END>
<METHOD_START> java.util.Collection<java.lang.String> < java.lang.String > java.util.Collection<java.lang.String> ( ) { return java.util.Set<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String , org.springframework.data.mapping.TypeInformation<> . getType ( ) . getSimpleName ( ) ) ) ; if ( ! java.util.Set<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = StringUtils . collectionToDelimitedString ( java.util.Set<java.lang.String> , STRING , STRING , STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.lang.String . java.lang.String ( java.lang.String , java.lang.String ) ) ; } if ( ! java.util.List<org.springframework.data.mapping.PropertyPath> . isEmpty ( ) ) { java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; java.lang.StringBuilder . java.lang.StringBuilder ( java.util.List<org.springframework.data.mapping.PropertyPath> . get ( NUMBER ) . toString ( ) ) ; java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; } return java.lang.StringBuilder . java.lang.String ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mapping.PropertyPath org.springframework.data.mapping.PropertyPath ( ) { return java.util.List<org.springframework.data.mapping.PropertyPath> . isEmpty ( ) ? null : java.util.List<org.springframework.data.mapping.PropertyPath> . get ( java.util.List<org.springframework.data.mapping.PropertyPath> . size ( ) - NUMBER ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( org.springframework.data.mapping.PropertyReferenceException org.springframework.data.mapping.PropertyReferenceException ) { return this . java.util.List<org.springframework.data.mapping.PropertyPath> . size ( ) > org.springframework.data.mapping.PropertyReferenceException . java.util.List<org.springframework.data.mapping.PropertyPath> . size ( ) ; }  <METHOD_END>
<METHOD_START> private static java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( PropertyMatches . forField ( java.lang.String , java.lang.Class<> ) . getPossibleMatches ( ) ) ) ; java.util.Set<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( PropertyMatches . forProperty ( java.lang.String , java.lang.Class<> ) . getPossibleMatches ( ) ) ) ; return java.util.Set<java.lang.String> ; }  <METHOD_END>
