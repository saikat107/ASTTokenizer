<METHOD_START> @ Test public void void ( ) java.lang.Exception { DerivedTestBean org.springframework.aop.interceptor.DerivedTestBean = new DerivedTestBean ( ) ; ProxyFactory org.springframework.aop.interceptor.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.interceptor.ProxyFactory . setInterfaces ( new java.lang.Class [] { ITestBean .class } ) ; ConcurrencyThrottleInterceptor org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor = new ConcurrencyThrottleInterceptor ( ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvice ( org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor ) ; org.springframework.aop.interceptor.ProxyFactory . setTarget ( org.springframework.aop.interceptor.DerivedTestBean ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) org.springframework.aop.interceptor.ProxyFactory . getProxy ( ) ; org.springframework.aop.interceptor.ITestBean . getAge ( ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) SerializationTestUtils . serializeAndDeserialize ( org.springframework.aop.interceptor.ITestBean ) ; Advised org.springframework.aop.interceptor.Advised = ( Advised ) org.springframework.aop.interceptor.ITestBean ; ConcurrencyThrottleInterceptor org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor = ( ConcurrencyThrottleInterceptor ) org.springframework.aop.interceptor.Advised . getAdvisors ( ) [ NUMBER ] . getAdvice ( ) ; assertEquals ( org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor . getConcurrencyLimit ( ) , org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor . getConcurrencyLimit ( ) ) ; org.springframework.aop.interceptor.ITestBean . getAge ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( int int ) { TestBean org.springframework.aop.interceptor.TestBean = new TestBean ( ) ; ProxyFactory org.springframework.aop.interceptor.ProxyFactory = new ProxyFactory ( ) ; org.springframework.aop.interceptor.ProxyFactory . setInterfaces ( new java.lang.Class [] { ITestBean .class } ) ; ConcurrencyThrottleInterceptor org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor = new ConcurrencyThrottleInterceptor ( ) ; org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor . setConcurrencyLimit ( int ) ; org.springframework.aop.interceptor.ProxyFactory . addAdvice ( org.springframework.aop.interceptor.ConcurrencyThrottleInterceptor ) ; org.springframework.aop.interceptor.ProxyFactory . setTarget ( org.springframework.aop.interceptor.TestBean ) ; ITestBean org.springframework.aop.interceptor.ITestBean = ( ITestBean ) org.springframework.aop.interceptor.ProxyFactory . getProxy ( ) ; java.lang.Thread [] java.lang.Thread[] = new java.lang.Thread [ int ] ; for ( int int = NUMBER ; int < int ; int ++ ) { java.lang.Thread[] [ int ] = new org.springframework.aop.interceptor.ConcurrencyThrottleInterceptorTests.ConcurrencyThread ( org.springframework.aop.interceptor.ITestBean , null ) ; java.lang.Thread[] [ int ] . void ( ) ; } for ( int int = NUMBER ; int < int / NUMBER ; int ++ ) { try { java.lang.Thread . void ( NUMBER ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } java.lang.Thread[] [ int ] = new org.springframework.aop.interceptor.ConcurrencyThrottleInterceptorTests.ConcurrencyThread ( org.springframework.aop.interceptor.ITestBean , int % NUMBER == NUMBER ? ( java.lang.Throwable ) new java.lang.OutOfMemoryError ( ) : ( java.lang.Throwable ) new java.lang.IllegalStateException ( ) ) ; java.lang.Thread[] [ int ] . void ( ) ; } for ( int int = NUMBER ; int < int ; int ++ ) { try { java.lang.Thread[] [ int ] . void ( ) ; } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.InterruptedException . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public void ( ITestBean org.springframework.aop.interceptor.ITestBean , java.lang.Throwable java.lang.Throwable ) { this . org.springframework.aop.interceptor.ITestBean = org.springframework.aop.interceptor.ITestBean ; this . java.lang.Throwable = java.lang.Throwable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.lang.Throwable != null ) { try { this . org.springframework.aop.interceptor.ITestBean . exceptional ( this . java.lang.Throwable ) ; } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { if ( java.lang.RuntimeException == this . java.lang.Throwable ) { org.springframework.aop.interceptor.Log . debug ( STRING , java.lang.RuntimeException ) ; } else { java.lang.RuntimeException . void ( ) ; } } catch ( java.lang.Error java.lang.Error ) { if ( java.lang.Error == this . java.lang.Throwable ) { org.springframework.aop.interceptor.Log . debug ( STRING , java.lang.Error ) ; } else { java.lang.Throwable . void ( ) ; } } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.Throwable . void ( ) ; } } else { for ( int int = NUMBER ; int < int ; int ++ ) { this . org.springframework.aop.interceptor.ITestBean . getName ( ) ; } } org.springframework.aop.interceptor.Log . debug ( STRING ) ; }  <METHOD_END>
