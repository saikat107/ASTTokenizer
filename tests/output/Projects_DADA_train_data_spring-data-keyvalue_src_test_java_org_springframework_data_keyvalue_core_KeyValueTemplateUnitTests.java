<METHOD_START> @ Before public void void ( ) java.lang.InstantiationException , java.lang.IllegalAccessException { this . org.springframework.data.keyvalue.core.KeyValueTemplate = new KeyValueTemplate ( org.springframework.data.keyvalue.core.KeyValueAdapter ) ; this . org.springframework.data.keyvalue.core.KeyValueTemplate . setApplicationEventPublisher ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new KeyValueTemplate ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new KeyValueTemplate ( org.springframework.data.keyvalue.core.KeyValueAdapter , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . contains ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.ExpectedException . expect ( DuplicateKeyException .class ) ; org.springframework.data.keyvalue.core.ExpectedException . expectMessage ( STRING ) ; when ( org.springframework.data.keyvalue.core.KeyValueAdapter . contains ( anyString ( ) , anyString ( ) ) ) . thenReturn ( true ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( null , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( new org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ( ) ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String , notNullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId , sameInstance ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String = STRING ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . get ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( ( java.io.Serializable ) null , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . findAll ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . getAllOf ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . findAll ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . find ( org.springframework.data.keyvalue.core.KeyValueQuery<java.lang.String> , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . find ( org.springframework.data.keyvalue.core.KeyValueQuery<java.lang.String> , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { ArgumentCaptor < KeyValueQuery > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.KeyValueQuery> = ArgumentCaptor . forClass ( KeyValueQuery .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . findInRange ( NUMBER , NUMBER , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . find ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.KeyValueQuery> . capture ( ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.KeyValueQuery> . getValue ( ) . getOffset ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.KeyValueQuery> . getValue ( ) . getRows ( ) , is ( NUMBER ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.KeyValueQuery> . getValue ( ) . getCritieria ( ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . update ( null , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String = STRING ; org.springframework.data.keyvalue.core.KeyValueTemplate . update ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = InvalidDataAccessApiUsageException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . update ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = new org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ( ) ; org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String = STRING ; org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId .class . java.lang.String ( ) , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . count ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { when ( org.springframework.data.keyvalue.core.KeyValueAdapter . count ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) . thenReturn ( NUMBER ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . count ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) , is ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . count ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotation ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotation , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) @ Test public void void ( ) { java.util.Collection java.util.Collection = java.util.Arrays . java.util.List ( org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotation , org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation ) ; when ( org.springframework.data.keyvalue.core.KeyValueAdapter . getAllOf ( STRING ) ) . thenReturn ( java.util.Collection ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findAll ( org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation . getClass ( ) ) , containsInAnyOrder ( org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotation ) ; assertThat ( org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.SubclassOfTypeWithCustomComposedKeySpaceAnnotation . getClass ( ) ) , is ( java.util.Optional . java.util.Optional<java.lang.Object> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . setExceptionTranslator ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . setApplicationEventPublisher ( null ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verifyZeroInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . setEventTypesToPublish ( null ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verifyZeroInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . setEventTypesToPublish ( java.util.Collections .< java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent> < ? extends KeyValueEvent > > java.util.Set<java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent>> ( ) ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verifyZeroInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , atLeastOnce ( ) ) . publishEvent ( Matchers . any ( KeyValueEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , } ) public void void ( ) { void ( BeforeDeleteEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; verifyZeroInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( BeforeInsertEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; ArgumentCaptor < BeforeInsertEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeInsertEvent> = ArgumentCaptor . forClass ( BeforeInsertEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeInsertEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeInsertEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeInsertEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeInsertEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( AfterInsertEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; ArgumentCaptor < AfterInsertEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterInsertEvent> = ArgumentCaptor . forClass ( AfterInsertEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterInsertEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterInsertEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterInsertEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterInsertEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( BeforeUpdateEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; ArgumentCaptor < BeforeUpdateEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeUpdateEvent> = ArgumentCaptor . forClass ( BeforeUpdateEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeUpdateEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeUpdateEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeUpdateEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeUpdateEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( AfterUpdateEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . update ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; ArgumentCaptor < AfterUpdateEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterUpdateEvent> = ArgumentCaptor . forClass ( AfterUpdateEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterUpdateEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterUpdateEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterUpdateEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterUpdateEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( BeforeDeleteEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) ) ; ArgumentCaptor < BeforeDeleteEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeDeleteEvent> = ArgumentCaptor . forClass ( BeforeDeleteEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeDeleteEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeDeleteEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeDeleteEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( AfterDeleteEvent .class ) ; when ( org.springframework.data.keyvalue.core.KeyValueAdapter . delete ( eq ( STRING ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) . java.lang.String ( ) ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ) ) . thenReturn ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) ) ; ArgumentCaptor < AfterDeleteEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDeleteEvent> = ArgumentCaptor . forClass ( AfterDeleteEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDeleteEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDeleteEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDeleteEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDeleteEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( BeforeGetEvent .class ) ; when ( org.springframework.data.keyvalue.core.KeyValueAdapter . get ( eq ( STRING ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) . java.lang.String ( ) ) ) ) . thenReturn ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) ) ; ArgumentCaptor < BeforeGetEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeGetEvent> = ArgumentCaptor . forClass ( BeforeGetEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeGetEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeGetEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.BeforeGetEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( AfterGetEvent .class ) ; when ( org.springframework.data.keyvalue.core.KeyValueAdapter . get ( eq ( STRING ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) . java.lang.String ( ) ) , eq ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class ) ) ) . thenReturn ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . findById ( STRING , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) ) ; ArgumentCaptor < AfterGetEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterGetEvent> = ArgumentCaptor . forClass ( AfterGetEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterGetEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterGetEvent> . getValue ( ) . getKey ( ) , is ( ( java.io.Serializable ) STRING ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterGetEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterGetEvent> . getValue ( ) . getPayload ( ) , is ( ( java.lang.Object ) org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) { void ( AfterDropKeySpaceEvent .class ) ; org.springframework.data.keyvalue.core.KeyValueTemplate . delete ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo> ( ) ) ; ArgumentCaptor < AfterDropKeySpaceEvent > org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDropKeySpaceEvent> = ArgumentCaptor . forClass ( AfterDropKeySpaceEvent .class ) ; verify ( org.springframework.data.keyvalue.core.ApplicationEventPublisher , times ( NUMBER ) ) . publishEvent ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDropKeySpaceEvent> . capture ( ) ) ; verifyNoMoreInteractions ( org.springframework.data.keyvalue.core.ApplicationEventPublisher ) ; assertThat ( org.springframework.data.keyvalue.core.ArgumentCaptor<org.springframework.data.keyvalue.core.AfterDropKeySpaceEvent> . getValue ( ) . getKeyspace ( ) , is ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo .class . java.lang.String ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { org.springframework.data.keyvalue.core.KeyValueTemplate . insert ( STRING , org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotationUsingAliasFor ) ; verify ( org.springframework.data.keyvalue.core.KeyValueAdapter , times ( NUMBER ) ) . put ( STRING , org.springframework.data.keyvalue.core.TypeWithCustomComposedKeySpaceAnnotationUsingAliasFor , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private void void ( java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent> < ? extends KeyValueEvent > ... java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent>[] ) { org.springframework.data.keyvalue.core.KeyValueTemplate . setEventTypesToPublish ( new java.util.HashSet<java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent>> < java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent> < ? extends KeyValueEvent > > ( java.util.Arrays . java.util.List<java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent>> ( java.lang.Class<? extends org.springframework.data.keyvalue.core.KeyValueEvent>[] ) ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo = ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Foo . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Bar ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Bar org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Bar = ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Bar ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.Bar . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { final int int = NUMBER ; int int = NUMBER ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; int = int * int + ObjectUtils . nullSafeHashCode ( this . java.lang.String ) ; return int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null ) { return false ; } if ( ! ( java.lang.Object instanceof org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) ) { return false ; } org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId = ( org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId ) java.lang.Object ; if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String ) ) { return false ; } if ( ! ObjectUtils . nullSafeEquals ( this . java.lang.String , org.springframework.data.keyvalue.core.KeyValueTemplateUnitTests.ClassWithStringId . java.lang.String ) ) { return false ; } return true ; }  <METHOD_END>
