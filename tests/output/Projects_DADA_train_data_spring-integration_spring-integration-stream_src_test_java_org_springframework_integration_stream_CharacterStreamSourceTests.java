<METHOD_START> @ Test public void void ( ) { java.io.StringReader java.io.StringReader = new java.io.StringReader ( STRING ) ; CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource = new CharacterStreamReadingMessageSource ( java.io.StringReader ) ; Message < ? > org.springframework.integration.stream.Message<?> = org.springframework.integration.stream.CharacterStreamReadingMessageSource . receive ( ) ; assertEquals ( STRING , org.springframework.integration.stream.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.stream.Message<?> = org.springframework.integration.stream.CharacterStreamReadingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.stream.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.io.StringReader java.io.StringReader = new java.io.StringReader ( STRING ) ; CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource = new CharacterStreamReadingMessageSource ( java.io.StringReader , - NUMBER , true ) ; ApplicationEventPublisher org.springframework.integration.stream.ApplicationEventPublisher = mock ( ApplicationEventPublisher .class ) ; org.springframework.integration.stream.CharacterStreamReadingMessageSource . setApplicationEventPublisher ( org.springframework.integration.stream.ApplicationEventPublisher ) ; Message < ? > org.springframework.integration.stream.Message<?> = org.springframework.integration.stream.CharacterStreamReadingMessageSource . receive ( ) ; assertEquals ( STRING , org.springframework.integration.stream.Message<> . getPayload ( ) ) ; Message < ? > org.springframework.integration.stream.Message<?> = org.springframework.integration.stream.CharacterStreamReadingMessageSource . receive ( ) ; assertNull ( org.springframework.integration.stream.Message<> ) ; verify ( org.springframework.integration.stream.ApplicationEventPublisher ) . publishEvent ( any ( StreamClosedEvent .class ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.io.StringReader java.io.StringReader = new java.io.StringReader ( STRING ) ; CharacterStreamReadingMessageSource org.springframework.integration.stream.CharacterStreamReadingMessageSource = new CharacterStreamReadingMessageSource ( java.io.StringReader , - NUMBER , true ) ; SourcePollingChannelAdapter org.springframework.integration.stream.SourcePollingChannelAdapter = new SourcePollingChannelAdapter ( ) ; java.util.concurrent.CountDownLatch java.util.concurrent.CountDownLatch = new java.util.concurrent.CountDownLatch ( NUMBER ) ; org.springframework.integration.stream.CharacterStreamReadingMessageSource . setApplicationEventPublisher ( e -> { if ( e instanceof StreamClosedEvent ) { if ( latch . getCount ( ) == NUMBER ) { adapter . stop ( ) ; } latch . countDown ( ) ; } } ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . setSource ( org.springframework.integration.stream.CharacterStreamReadingMessageSource ) ; ThreadPoolTaskScheduler org.springframework.integration.stream.ThreadPoolTaskScheduler = new ThreadPoolTaskScheduler ( ) ; org.springframework.integration.stream.ThreadPoolTaskScheduler . afterPropertiesSet ( ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . setTaskScheduler ( org.springframework.integration.stream.ThreadPoolTaskScheduler ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . setTrigger ( new PeriodicTrigger ( NUMBER ) ) ; QueueChannel org.springframework.integration.stream.QueueChannel = new QueueChannel ( ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . setOutputChannel ( org.springframework.integration.stream.QueueChannel ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . setBeanFactory ( mock ( BeanFactory .class ) ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . afterPropertiesSet ( ) ; org.springframework.integration.stream.SourcePollingChannelAdapter . start ( ) ; Message < ? > org.springframework.integration.stream.Message<?> = org.springframework.integration.stream.QueueChannel . receive ( NUMBER ) ; assertNotNull ( org.springframework.integration.stream.Message<> ) ; assertEquals ( STRING , org.springframework.integration.stream.Message<> . getPayload ( ) ) ; assertTrue ( java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertFalse ( org.springframework.integration.stream.SourcePollingChannelAdapter . isRunning ( ) ) ; org.springframework.integration.stream.ThreadPoolTaskScheduler . shutdown ( ) ; }  <METHOD_END>
