<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isNotEqualTo ( nullValue ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isSameAs ( ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . setParentBeanFactory ( new DefaultListableBeanFactory ( ) ) ; ConditionEvaluationReport . get ( ( ConfigurableListableBeanFactory ) this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . getParentBeanFactory ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isSameAs ( ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isNotEqualTo ( nullValue ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getParent ( ) ) . isNotEqualTo ( nullValue ( ) ) ; ConditionEvaluationReport . get ( ( ConfigurableListableBeanFactory ) this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . getParentBeanFactory ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isSameAs ( ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getParent ( ) ) . isSameAs ( ConditionEvaluationReport . get ( ( ConfigurableListableBeanFactory ) this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . getParentBeanFactory ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . setParentBeanFactory ( new DefaultListableBeanFactory ( ) ) ; ConditionEvaluationReport . get ( ( ConfigurableListableBeanFactory ) this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory . getParentBeanFactory ( ) ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( this . org.springframework.boot.autoconfigure.condition.DefaultListableBeanFactory ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport ) . isNotSameAs ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getParent ( ) ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getParent ( ) ) . isNotNull ( ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getParent ( ) . getParent ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( false , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( false , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( false , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> < java.lang.String , ConditionAndOutcomes > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> = this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> . size ( ) ) . isEqualTo ( NUMBER ) ; java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> < ConditionAndOutcome > java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> = java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> . get ( STRING ) . iterator ( ) ; ConditionAndOutcome org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . next ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getCondition ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.Condition ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getOutcome ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . next ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getCondition ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.Condition ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getOutcome ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; assertThat ( java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . hasNext ( ) ) . isFalse ( ) ; java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> = java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> . get ( STRING ) . iterator ( ) ; org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . next ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getCondition ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.Condition ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getOutcome ( ) ) . isEqualTo ( this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; assertThat ( java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . hasNext ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , true , true ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) . get ( STRING ) . isFullMatch ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( true , false , true ) ; assertThat ( this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) . get ( STRING ) . isFullMatch ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( boolean boolean , boolean boolean , boolean boolean ) { this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( boolean , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( boolean , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionOutcome = new ConditionOutcome ( boolean , STRING ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; this . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . recordConditionEvaluation ( STRING , this . org.springframework.boot.autoconfigure.condition.Condition , this . org.springframework.boot.autoconfigure.condition.ConditionOutcome ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.Config .class ) . getBeanFactory ( ) ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) . size ( ) ) . isNotEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ConditionAndOutcome org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = new ConditionAndOutcome ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; ConditionAndOutcome org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = new ConditionAndOutcome ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; ConditionAndOutcome org.springframework.boot.autoconfigure.condition.ConditionAndOutcome = new ConditionAndOutcome ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) . isEqualTo ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) . isNotEqualTo ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) . isEqualTo ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome ) ; ConditionAndOutcomes org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes = new ConditionAndOutcomes ( ) ; org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes . add ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes . add ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes . add ( this . org.springframework.boot.autoconfigure.condition.Condition , new ConditionOutcome ( true , STRING ) ) ; assertThat ( int ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.DuplicateConfig .class ) ; ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeanFactory ( ) ) ; java.lang.String java.lang.String = MultipartAutoConfiguration .class . java.lang.String ( ) ; ConditionAndOutcomes org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes = org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) . get ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes ) . isNotEqualTo ( nullValue ( ) ) ; assertThat ( int ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes ) ) . isEqualTo ( NUMBER ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; for ( ConditionAndOutcome org.springframework.boot.autoconfigure.condition.ConditionAndOutcome : org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes ) { java.util.List<java.lang.String> . boolean ( org.springframework.boot.autoconfigure.condition.ConditionAndOutcome . getOutcome ( ) . getMessage ( ) ) ; } assertThat ( java.util.List<java.lang.String> ) . areAtLeastOne ( Matched . by ( containsString ( STRING + STRING + STRING + STRING ) ) ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext , STRING ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.NegativeOuterConfig .class ) ; org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . refresh ( ) ; ConditionEvaluationReport org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport = ConditionEvaluationReport . get ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . getBeanFactory ( ) ) ; java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> < java.lang.String , ConditionAndOutcomes > java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> = org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport . getConditionAndOutcomesBySource ( ) ; assertThat ( org.springframework.boot.autoconfigure.condition.AnnotationConfigApplicationContext . containsBean ( STRING ) ) . isFalse ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.NegativeOuterConfig .class . java.lang.String ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> . get ( java.lang.String ) . isFullMatch ( ) ) . isFalse ( ) ; java.lang.String java.lang.String = org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.NegativeOuterConfig . org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.NegativeOuterConfig.PositiveInnerConfig .class . java.lang.String ( ) ; assertThat ( java.util.Map<java.lang.String,org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes> . get ( java.lang.String ) . isFullMatch ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( ConditionAndOutcomes org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes ) { java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> < ConditionAndOutcome > java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> = org.springframework.boot.autoconfigure.condition.ConditionAndOutcomes . iterator ( ) ; int int = NUMBER ; while ( java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . hasNext ( ) ) { int ++ ; java.util.Iterator<org.springframework.boot.autoconfigure.condition.ConditionAndOutcome> . next ( ) ; } return int ; }  <METHOD_END>
<METHOD_START> @ Bean public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> void ( ConfigurationPhase org.springframework.boot.autoconfigure.condition.ConfigurationPhase , boolean boolean ) { this . org.springframework.boot.autoconfigure.condition.ConfigurationPhase = org.springframework.boot.autoconfigure.condition.ConfigurationPhase ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConfigurationPhase org.springframework.boot.autoconfigure.condition.ConfigurationPhase ( ) { return this . org.springframework.boot.autoconfigure.condition.ConfigurationPhase ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.autoconfigure.condition.ConditionOutcome org.springframework.boot.autoconfigure.condition.ConditionOutcome ( ConditionContext org.springframework.boot.autoconfigure.condition.ConditionContext , AnnotatedTypeMetadata org.springframework.boot.autoconfigure.condition.AnnotatedTypeMetadata ) { return new ConditionOutcome ( this . boolean , ClassUtils . getShortName ( java.lang.Class<? extends org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportTests.TestMatchCondition> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION , true ); }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . REGISTER_BEAN , true ); }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . PARSE_CONFIGURATION , false ); }  <METHOD_END>
<METHOD_START> void ( ) { super( ConfigurationPhase . REGISTER_BEAN , false ); }  <METHOD_END>
