<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; try { MimeType . valueOf ( java.lang.String ) ; } catch ( InvalidMimeTypeException org.springframework.integration.ip.tcp.connection.InvalidMimeTypeException ) { throw new java.lang.IllegalArgumentException ( STRING , org.springframework.integration.ip.tcp.connection.InvalidMimeTypeException ) ; } this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.ip.tcp.connection.BeanFactory ) throws org.springframework.integration.ip.tcp.connection.BeansException { this . org.springframework.integration.ip.tcp.connection.BeanFactory = org.springframework.integration.ip.tcp.connection.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.tcp.connection.MessageBuilderFactory org.springframework.integration.ip.tcp.connection.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.ip.tcp.connection.BeanFactory != null ) { this . org.springframework.integration.ip.tcp.connection.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.ip.tcp.connection.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.ip.tcp.connection.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.tcp.connection.Message<?> < ? > org.springframework.integration.ip.tcp.connection.Message<?> ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) throws java.lang.Exception { Message < java.lang.Object > org.springframework.integration.ip.tcp.connection.Message<java.lang.Object> = null ; java.lang.Object java.lang.Object = org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ; if ( java.lang.Object != null ) { AbstractIntegrationMessageBuilder < java.lang.Object > org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<java.lang.Object> = org.springframework.integration.ip.tcp.connection.MessageBuilderFactory ( ) . withPayload ( java.lang.Object ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpConnection , org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<java.lang.Object> ) ; this . void ( org.springframework.integration.ip.tcp.connection.TcpConnection , org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<java.lang.Object> ) ; org.springframework.integration.ip.tcp.connection.Message<java.lang.Object> = org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<java.lang.Object> . build ( ) ; } else { if ( this . org.springframework.integration.ip.tcp.connection.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.ip.tcp.connection.Log . warn ( STRING + org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) ; } } return org.springframework.integration.ip.tcp.connection.Message<java.lang.Object> ; }  <METHOD_END>
<METHOD_START> protected final void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection , AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<?> ) { java.lang.String java.lang.String = org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ; org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setHeader ( IpHeaders . HOSTNAME , org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . setHeader ( IpHeaders . IP_ADDRESS , org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . setHeader ( IpHeaders . REMOTE_PORT , org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . setHeader ( IpHeaders . CONNECTION_ID , java.lang.String ) ; SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo = org.springframework.integration.ip.tcp.connection.TcpConnection . getSocketInfo ( ) ; if ( org.springframework.integration.ip.tcp.connection.SocketInfo != null ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setHeader ( IpHeaders . LOCAL_ADDRESS , org.springframework.integration.ip.tcp.connection.SocketInfo . getLocalAddress ( ) ) ; } if ( this . boolean ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setCorrelationId ( java.lang.String ) . setSequenceNumber ( ( int ) org.springframework.integration.ip.tcp.connection.TcpConnection . incrementAndGetConnectionSequence ( ) ) ; } if ( this . boolean ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . setHeader ( MessageHeaders . CONTENT_TYPE , this . java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected final void void ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection , AbstractIntegrationMessageBuilder < ? > org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<?> ) { java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> = this . java.util.Map<java.lang.String,?> ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; if ( java.util.Map<java.lang.String,> != null ) { org.springframework.integration.ip.tcp.connection.AbstractIntegrationMessageBuilder<> . copyHeadersIfAbsent ( java.util.Map<java.lang.String,> ) ; } }  <METHOD_END>
<METHOD_START> protected java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception { if ( this . boolean ) { return byte[] ( org.springframework.integration.ip.tcp.connection.Message<> ) ; } return org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) { byte [] byte[] = null ; java.lang.Object java.lang.Object = org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ; if ( java.lang.Object instanceof byte [] ) { byte[] = ( byte [] ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { try { byte[] = ( ( java.lang.String ) java.lang.Object ) . byte[] ( this . java.lang.String ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessageHandlingException ( org.springframework.integration.ip.tcp.connection.Message<> , java.io.UnsupportedEncodingException ) ; } } else { throw new MessageHandlingException ( org.springframework.integration.ip.tcp.connection.Message<> , STRING + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return byte[] ; }  <METHOD_END>
