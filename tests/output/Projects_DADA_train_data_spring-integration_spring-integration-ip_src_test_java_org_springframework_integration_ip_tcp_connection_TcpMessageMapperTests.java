<METHOD_START> @ Before public void void ( ) { java.util.Map<java.lang.Class<?>,org.springframework.integration.ip.tcp.connection.Codec> < java.lang.Class<?> < ? > , Codec > java.util.Map<java.lang.Class<?>,org.springframework.integration.ip.tcp.connection.Codec> = new java.util.HashMap<java.lang.Class<?>,org.springframework.integration.ip.tcp.connection.Codec> < java.lang.Class<?> < ? > , Codec > ( ) ; this . org.springframework.integration.ip.tcp.connection.Codec = new CompositeCodec ( java.util.Map<java.lang.Class<?>,org.springframework.integration.ip.tcp.connection.Codec> , new MessageCodec ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; java.net.InetAddress java.net.InetAddress = mock ( java.net.InetAddress .class ) ; SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo = new SocketInfo ( java.net.Socket ) ; when ( java.net.Socket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( java.lang.String . byte[] ( ) ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getSocketInfo ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.SocketInfo ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertSame ( java.net.InetAddress , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . LOCAL_ADDRESS ) ) ; assertNull ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setAddContentTypeHeader ( true ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; java.net.InetAddress java.net.InetAddress = mock ( java.net.InetAddress .class ) ; SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo = new SocketInfo ( java.net.Socket ) ; when ( java.net.Socket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( java.lang.String . byte[] ( ) ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getSocketInfo ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.SocketInfo ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertSame ( java.net.InetAddress , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . LOCAL_ADDRESS ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; MimeType org.springframework.integration.ip.tcp.connection.MimeType = MimeType . valueOf ( ( java.lang.String ) org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; assertEquals ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) , org.springframework.integration.ip.tcp.connection.MimeType . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setAddContentTypeHeader ( true ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setContentType ( STRING ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; java.net.Socket java.net.Socket = mock ( java.net.Socket .class ) ; java.net.InetAddress java.net.InetAddress = mock ( java.net.InetAddress .class ) ; SocketInfo org.springframework.integration.ip.tcp.connection.SocketInfo = new SocketInfo ( java.net.Socket ) ; when ( java.net.Socket . java.net.InetAddress ( ) ) . thenReturn ( java.net.InetAddress ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( java.lang.String . byte[] ( ) ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getSocketInfo ( ) ) . thenReturn ( org.springframework.integration.ip.tcp.connection.SocketInfo ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertSame ( java.net.InetAddress , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . LOCAL_ADDRESS ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; MimeType org.springframework.integration.ip.tcp.connection.MimeType = MimeType . valueOf ( ( java.lang.String ) org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) ) ; assertEquals ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( MessageHeaders . CONTENT_TYPE ) , org.springframework.integration.ip.tcp.connection.MimeType . toString ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setAddContentTypeHeader ( true ) ; try { org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setContentType ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { assertThat ( java.lang.IllegalArgumentException . java.lang.String ( ) , containsString ( STRING ) ) ; throw java.lang.IllegalArgumentException ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = new TcpConnectionSupport ( java.net.Socket , false , false , null , null ) { @ java.lang.Override public void void ( ) {			} @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception {			} @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public int int ( ) { return NUMBER ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.String . byte[] ( ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; } @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return null ; } } ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.ip.tcp.connection.Message<> ) . getSequenceNumber ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , new IntegrationMessageHeaderAccessor ( org.springframework.integration.ip.tcp.connection.Message<> ) . getSequenceNumber ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) { @ java.lang.Override protected java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; } } ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setApplySequence ( true ) ; java.net.Socket java.net.Socket = javax.net.SocketFactory . javax.net.SocketFactory ( ) . java.net.Socket ( ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = new TcpConnectionSupport ( java.net.Socket , false , false , null , null ) { @ java.lang.Override public void void ( ) {			} @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception {			} @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public int int ( ) { return NUMBER ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.String . byte[] ( ) ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; } @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; } @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return null ; } } ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; IntegrationMessageHeaderAccessor org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) , org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor . getCorrelationId ( ) ) ; org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.TcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor = new IntegrationMessageHeaderAccessor ( org.springframework.integration.ip.tcp.connection.Message<> ) ; assertEquals ( java.lang.String , new java.lang.String ( ( byte [] ) org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( java.lang.Integer . java.lang.Integer ( NUMBER ) , org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor . getSequenceNumber ( ) ) ; assertEquals ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) , org.springframework.integration.ip.tcp.connection.IntegrationMessageHeaderAccessor . getCorrelationId ( ) ) ; assertNotNull ( org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ( TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection ) { return java.util.Collections . java.util.Map<java.lang.String,java.lang.String> ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> ) throws java.lang.Exception {			}  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) java.lang.Exception { return java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.net.ssl.SSLSession javax.net.ssl.SSLSession ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setStringToBytes ( true ) ; byte [] byte[] = ( byte [] ) org.springframework.integration.ip.tcp.connection.TcpMessageMapper . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; assertEquals ( java.lang.String , new java.lang.String ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( java.lang.String ) . build ( ) ; TcpMessageMapper org.springframework.integration.ip.tcp.connection.TcpMessageMapper = new TcpMessageMapper ( ) ; org.springframework.integration.ip.tcp.connection.TcpMessageMapper . setStringToBytes ( false ) ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.integration.ip.tcp.connection.TcpMessageMapper . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MapMessageConverter org.springframework.integration.ip.tcp.connection.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.ip.tcp.connection.MapMessageConverter . setHeaderNames ( STRING ) ; MessageConvertingTcpMessageMapper org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper = new MessageConvertingTcpMessageMapper ( org.springframework.integration.ip.tcp.connection.MapMessageConverter ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; MapJsonSerializer org.springframework.integration.ip.tcp.connection.MapJsonSerializer = new MapJsonSerializer ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.connection.MapJsonSerializer . serialize ( java.util.Map<,> , java.io.ByteArrayOutputStream ) ; assertEquals ( STRING , new java.lang.String ( java.io.ByteArrayOutputStream . byte[] ( ) , STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; MapMessageConverter org.springframework.integration.ip.tcp.connection.MapMessageConverter = new MapMessageConverter ( ) ; MessageConvertingTcpMessageMapper org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper = new MessageConvertingTcpMessageMapper ( org.springframework.integration.ip.tcp.connection.MapMessageConverter ) ; MapJsonSerializer org.springframework.integration.ip.tcp.connection.MapJsonSerializer = new MapJsonSerializer ( ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = org.springframework.integration.ip.tcp.connection.MapJsonSerializer . deserialize ( new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( STRING ) ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( java.util.Map<,> ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) . thenReturn ( STRING ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MapMessageConverter org.springframework.integration.ip.tcp.connection.MapMessageConverter = new MapMessageConverter ( ) ; org.springframework.integration.ip.tcp.connection.MapMessageConverter . setHeaderNames ( STRING ) ; MessageConvertingTcpMessageMapper org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper = new MessageConvertingTcpMessageMapper ( org.springframework.integration.ip.tcp.connection.MapMessageConverter ) ; java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; DefaultSerializer org.springframework.integration.ip.tcp.connection.DefaultSerializer = new DefaultSerializer ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( ) ; org.springframework.integration.ip.tcp.connection.DefaultSerializer . serialize ( java.util.Map<,> , java.io.ByteArrayOutputStream ) ; DefaultDeserializer org.springframework.integration.ip.tcp.connection.DefaultDeserializer = new DefaultDeserializer ( ) ; java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) org.springframework.integration.ip.tcp.connection.DefaultDeserializer . deserialize ( new java.io.ByteArrayInputStream ( java.io.ByteArrayOutputStream . byte[] ( ) ) ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( java.util.Map<,> ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) . thenReturn ( STRING ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { Message < java.lang.String > org.springframework.integration.ip.tcp.connection.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . setHeader ( STRING , STRING ) . build ( ) ; MessageConverter org.springframework.integration.ip.tcp.connection.MessageConverter = new CodecMessageConverter ( this . org.springframework.integration.ip.tcp.connection.Codec ) ; MessageConvertingTcpMessageMapper org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper = new MessageConvertingTcpMessageMapper ( org.springframework.integration.ip.tcp.connection.MessageConverter ) ; byte [] byte[] = ( byte [] ) org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . fromMessage ( org.springframework.integration.ip.tcp.connection.Message<java.lang.String> ) ; TcpConnection org.springframework.integration.ip.tcp.connection.TcpConnection = mock ( TcpConnection .class ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPayload ( ) ) . thenReturn ( byte[] ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostName ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getHostAddress ( ) ) . thenReturn ( STRING ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getPort ( ) ) . thenReturn ( NUMBER ) ; when ( org.springframework.integration.ip.tcp.connection.TcpConnection . getConnectionId ( ) ) . thenReturn ( STRING ) ; Message < ? > org.springframework.integration.ip.tcp.connection.Message<?> = org.springframework.integration.ip.tcp.connection.MessageConvertingTcpMessageMapper . toMessage ( org.springframework.integration.ip.tcp.connection.TcpConnection ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getPayload ( ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( STRING ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . HOSTNAME ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . IP_ADDRESS ) ) ; assertEquals ( NUMBER , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . REMOTE_PORT ) ) ; assertEquals ( STRING , org.springframework.integration.ip.tcp.connection.Message<> . getHeaders ( ) . get ( IpHeaders . CONNECTION_ID ) ) ; }  <METHOD_END>
