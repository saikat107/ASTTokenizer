<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; given ( this . org.springframework.boot.test.mock.mockito.ApplicationContext . getBean ( MockitoPostProcessor .class ) ) . willReturn ( this . org.springframework.boot.test.mock.mockito.MockitoPostProcessor ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations = new org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations ( ) ; this . org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener . prepareTestInstance ( org.springframework.boot.test.mock.mockito.TestContext ( org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations ) ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations . java.io.InputStream ) . isNotNull ( ) ; assertThat ( org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockitoAnnotations . org.springframework.boot.test.mock.mockito.ArgumentCaptor<java.io.InputStream> ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockBean org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockBean = new org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockBean ( ) ; this . org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener . prepareTestInstance ( org.springframework.boot.test.mock.mockito.TestContext ( org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockBean ) ) ; verify ( this . org.springframework.boot.test.mock.mockito.MockitoPostProcessor ) . inject ( this . org.springframework.boot.test.mock.mockito.ArgumentCaptor<java.lang.reflect.Field> . capture ( ) , eq ( org.springframework.boot.test.mock.mockito.MockitoTestExecutionListenerTests.WithMockBean ) , ( MockDefinition ) any ( ) ) ; assertThat ( this . org.springframework.boot.test.mock.mockito.ArgumentCaptor<java.lang.reflect.Field> . getValue ( ) . getName ( ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private org.springframework.boot.test.mock.mockito.TestContext org.springframework.boot.test.mock.mockito.TestContext ( java.lang.Object java.lang.Object ) { TestContext org.springframework.boot.test.mock.mockito.TestContext = mock ( TestContext .class ) ; given ( org.springframework.boot.test.mock.mockito.TestContext . getTestInstance ( ) ) . willReturn ( java.lang.Object ) ; given ( org.springframework.boot.test.mock.mockito.TestContext . getTestClass ( ) ) . willReturn ( ( java.lang.Class ) java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; given ( org.springframework.boot.test.mock.mockito.TestContext . getApplicationContext ( ) ) . willReturn ( this . org.springframework.boot.test.mock.mockito.ApplicationContext ) ; return org.springframework.boot.test.mock.mockito.TestContext ; }  <METHOD_END>
