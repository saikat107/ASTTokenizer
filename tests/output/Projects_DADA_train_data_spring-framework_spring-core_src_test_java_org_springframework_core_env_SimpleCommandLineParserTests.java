<METHOD_START> @ Test public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; assertThat ( org.springframework.core.env.SimpleCommandLineArgsParser . parse ( ) . getOptionValues ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; CommandLineArgs org.springframework.core.env.CommandLineArgs = org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; assertThat ( org.springframework.core.env.CommandLineArgs . containsOption ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) , equalTo ( java.util.Collections . java.util.List ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; CommandLineArgs org.springframework.core.env.CommandLineArgs = org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; assertThat ( org.springframework.core.env.CommandLineArgs . containsOption ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; CommandLineArgs org.springframework.core.env.CommandLineArgs = org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING , STRING ) ; assertThat ( org.springframework.core.env.CommandLineArgs . containsOption ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . containsOption ( STRING ) , is ( true ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . containsOption ( STRING ) , is ( false ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) , equalTo ( java.util.Collections . java.util.List ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { SimpleCommandLineArgsParser org.springframework.core.env.SimpleCommandLineArgsParser = new SimpleCommandLineArgsParser ( ) ; CommandLineArgs org.springframework.core.env.CommandLineArgs = org.springframework.core.env.SimpleCommandLineArgsParser . parse ( STRING , STRING , STRING , STRING ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; assertThat ( org.springframework.core.env.CommandLineArgs . getOptionValues ( STRING ) . get ( NUMBER ) , equalTo ( STRING ) ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = org.springframework.core.env.CommandLineArgs . getNonOptionArgs ( ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<java.lang.String> . java.lang.String ( NUMBER ) , equalTo ( STRING ) ) ; assertThat ( java.util.List<java.lang.String> . int ( ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { CommandLineArgs org.springframework.core.env.CommandLineArgs = new SimpleCommandLineArgsParser ( ) . parse ( ) ; org.springframework.core.env.CommandLineArgs . getOptionNames ( ) . add ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.UnsupportedOperationException .class ) public void void ( ) { CommandLineArgs org.springframework.core.env.CommandLineArgs = new SimpleCommandLineArgsParser ( ) . parse ( ) ; org.springframework.core.env.CommandLineArgs . getNonOptionArgs ( ) . add ( STRING ) ; }  <METHOD_END>
