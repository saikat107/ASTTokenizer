<METHOD_START> @ Test public void void ( ) java.lang.InterruptedException { this . org.springframework.integration.jdbc.MessageChannel . send ( new GenericMessage < java.lang.Integer > ( NUMBER , java.util.Map<java.lang.String,java.lang.Object> ( NUMBER , NUMBER , NUMBER ) ) ) ; assertTrue ( org.springframework.integration.jdbc.AggregatorIntegrationTests.RollbackTxSync . java.util.concurrent.CountDownLatch . boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) ; assertEquals ( NUMBER , this . org.springframework.integration.jdbc.MessageGroupStore . messageGroupSize ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( int int , int int , int int ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_NUMBER , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . SEQUENCE_SIZE , int ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( IntegrationMessageHeaderAccessor . CORRELATION_ID , int ) ; return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.jdbc.Message<?> ) throws org.springframework.integration.jdbc.MessagingException { TransactionSynchronizationManager . registerSynchronization ( new org.springframework.integration.jdbc.AggregatorIntegrationTests.RollbackTxSync ( ) ) ; throw new java.lang.RuntimeException ( STRING ) ; }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { if ( TransactionSynchronization . STATUS_ROLLED_BACK == int ) { java.util.concurrent.CountDownLatch . void ( ) ; } }  <METHOD_END>
