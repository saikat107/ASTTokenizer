<METHOD_START> private void void ( java.lang.Class<? extends org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder> < ? extends org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder > java.lang.Class<? extends org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder> ) { AnnotationConfigApplicationContext org.springframework.context.annotation.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( java.lang.Class<> ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( TestBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setLazyInit ( true ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder = org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING , org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder .class ) ; assertFalse ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; assertNotNull ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder . org.springframework.context.annotation.TestBean ( ) ) ; assertNull ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder . org.springframework.context.annotation.TestBean ( ) . getName ( ) ) ; assertTrue ( org.springframework.context.annotation.AnnotationConfigApplicationContext . getBeanFactory ( ) . containsSingleton ( STRING ) ) ; TestBean org.springframework.context.annotation.TestBean = ( TestBean ) org.springframework.context.annotation.AnnotationConfigApplicationContext . getBean ( STRING ) ; org.springframework.context.annotation.TestBean . setName ( STRING ) ; assertSame ( STRING , org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.TestBeanHolder . org.springframework.context.annotation.TestBean ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBeanWithCompositeAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.MethodResourceInjectionBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.MethodResourceInjectionBeanWithMethodLevelLazy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.MethodResourceInjectionBeanWithCompositeAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBean .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBeanWithConstructorLevelLazy .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.ConstructorResourceInjectionBeanWithCompositeAnnotation .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new ContextAnnotationAutowireCandidateResolver ( ) ) ; AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean = ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; try { org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.FieldResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) . getName ( ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { DefaultListableBeanFactory org.springframework.context.annotation.DefaultListableBeanFactory = new DefaultListableBeanFactory ( ) ; org.springframework.context.annotation.DefaultListableBeanFactory . setAutowireCandidateResolver ( new ContextAnnotationAutowireCandidateResolver ( ) ) ; AutowiredAnnotationBeanPostProcessor org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor = new AutowiredAnnotationBeanPostProcessor ( ) ; org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor . setBeanFactory ( org.springframework.context.annotation.DefaultListableBeanFactory ) ; org.springframework.context.annotation.DefaultListableBeanFactory . addBeanPostProcessor ( org.springframework.context.annotation.AutowiredAnnotationBeanPostProcessor ) ; RootBeanDefinition org.springframework.context.annotation.RootBeanDefinition = new RootBeanDefinition ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean .class ) ; org.springframework.context.annotation.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_PROTOTYPE ) ; org.springframework.context.annotation.DefaultListableBeanFactory . registerBeanDefinition ( STRING , org.springframework.context.annotation.RootBeanDefinition ) ; org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean = ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean ) org.springframework.context.annotation.DefaultListableBeanFactory . getBean ( STRING ) ; assertNotNull ( org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) ) ; try { org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.OptionalFieldResourceInjectionBean . org.springframework.context.annotation.TestBean ( ) . getName ( ) ; fail ( STRING ) ; } catch ( NoSuchBeanDefinitionException org.springframework.context.annotation.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( )  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( @ Lazy TestBean org.springframework.context.annotation.TestBean ) { if ( this . org.springframework.context.annotation.TestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Autowired @ Lazy public void void ( TestBean org.springframework.context.annotation.TestBean ) { if ( this . org.springframework.context.annotation.TestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.LazyInject public void void ( TestBean org.springframework.context.annotation.TestBean ) { if ( this . org.springframework.context.annotation.TestBean != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( @ Lazy TestBean org.springframework.context.annotation.TestBean ) { this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ Autowired @ Lazy public void ( TestBean org.springframework.context.annotation.TestBean ) { this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> @ org.springframework.context.annotation.LazyAutowiredAnnotationBeanPostProcessorTests.LazyInject public void ( TestBean org.springframework.context.annotation.TestBean ) { this . org.springframework.context.annotation.TestBean = org.springframework.context.annotation.TestBean ; }  <METHOD_END>
<METHOD_START> public org.springframework.context.annotation.TestBean org.springframework.context.annotation.TestBean ( ) { return this . org.springframework.context.annotation.TestBean ; }  <METHOD_END>
