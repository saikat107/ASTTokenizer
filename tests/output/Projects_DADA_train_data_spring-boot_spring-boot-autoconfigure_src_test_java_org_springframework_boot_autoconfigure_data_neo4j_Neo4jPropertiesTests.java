<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext != null ) { this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . EMBEDDED_DRIVER , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( false ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . BOLT_DRIVER , Neo4jProperties . DEFAULT_BOLT_URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . HTTP_DRIVER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . BOLT_DRIVER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . EMBEDDED_DRIVER , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING , STRING , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . HTTP_DRIVER , STRING ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . HTTP_DRIVER , STRING ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . BOLT_DRIVER , Neo4jProperties . DEFAULT_BOLT_URI ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( true , STRING ) ; Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration = org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties . createConfiguration ( ) ; void ( org.springframework.boot.autoconfigure.data.neo4j.Configuration , Neo4jProperties . EMBEDDED_DRIVER , STRING ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration , java.lang.String java.lang.String , java.lang.String java.lang.String ) { assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Configuration ) . isNotNull ( ) ; assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Configuration . getDriverClassName ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Configuration . getURI ( ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private static void void ( Configuration org.springframework.boot.autoconfigure.data.neo4j.Configuration , java.lang.String java.lang.String , java.lang.String java.lang.String ) { Credentials < ? > org.springframework.boot.autoconfigure.data.neo4j.Credentials<?> = org.springframework.boot.autoconfigure.data.neo4j.Configuration . getCredentials ( ) ; if ( java.lang.String == null & java.lang.String == null ) { assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Credentials<> ) . isNull ( ) ; } else { assertThat ( org.springframework.boot.autoconfigure.data.neo4j.Credentials<> ) . isNotNull ( ) ; java.lang.Object java.lang.Object = org.springframework.boot.autoconfigure.data.neo4j.Credentials<> . credentials ( ) ; assertThat ( java.lang.Object ) . isInstanceOf ( java.lang.String .class ) ; java.lang.String [] java.lang.String[] = new java.lang.String ( Base64 . decode ( ( ( java.lang.String ) java.lang.Object ) . byte[] ( ) ) ) . java.lang.String[] ( STRING ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( java.lang.String ) ; assertThat ( java.lang.String[] [ NUMBER ] ) . isEqualTo ( java.lang.String ) ; assertThat ( java.lang.String[] ) . hasSize ( NUMBER ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties org.springframework.boot.autoconfigure.data.neo4j.Neo4jProperties ( final boolean boolean , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . setClassLoader ( new java.net.URLClassLoader ( new java.net.URL [ NUMBER ] , java.lang.Class<? extends org.springframework.boot.autoconfigure.data.neo4j.Neo4jPropertiesTests> ( ) . java.lang.ClassLoader ( ) ) { @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )					throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( Neo4jProperties . EMBEDDED_DRIVER ) ) { if ( boolean ) { return org.springframework.boot.autoconfigure.data.neo4j.Neo4jPropertiesTests.TestEmbeddedDriver .class ; } else { throw new java.lang.ClassNotFoundException ( ) ; } } return super. java.lang.Class<?> ( java.lang.String , boolean ) ; } } ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . register ( org.springframework.boot.autoconfigure.data.neo4j.Neo4jPropertiesTests.TestConfiguration .class ) ; org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext ; return this . org.springframework.boot.autoconfigure.data.neo4j.AnnotationConfigApplicationContext . getBean ( Neo4jProperties .class ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , boolean boolean )					throws java.lang.ClassNotFoundException { if ( java.lang.String . boolean ( Neo4jProperties . EMBEDDED_DRIVER ) ) { if ( boolean ) { return org.springframework.boot.autoconfigure.data.neo4j.Neo4jPropertiesTests.TestEmbeddedDriver .class ; } else { throw new java.lang.ClassNotFoundException ( ) ; } } return super. java.lang.Class<?> ( java.lang.String , boolean ) ; }  <METHOD_END>
