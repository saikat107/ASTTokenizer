<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.integration.ip.udp.BeanFactory ) throws org.springframework.integration.ip.udp.BeansException { this . org.springframework.integration.ip.udp.BeanFactory = org.springframework.integration.ip.udp.BeanFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.integration.ip.udp.MessageBuilderFactory org.springframework.integration.ip.udp.MessageBuilderFactory ( ) { if ( ! this . boolean ) { if ( this . org.springframework.integration.ip.udp.BeanFactory != null ) { this . org.springframework.integration.ip.udp.MessageBuilderFactory = IntegrationUtils . getMessageBuilderFactory ( this . org.springframework.integration.ip.udp.BeanFactory ) ; } this . boolean = true ; } return this . org.springframework.integration.ip.udp.MessageBuilderFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.DatagramPacket java.net.DatagramPacket ( Message < ? > org.springframework.integration.ip.udp.Message<?> ) throws java.lang.Exception { if ( this . boolean ) { return java.net.DatagramPacket ( org.springframework.integration.ip.udp.Message<> ) ; } byte [] byte[] = byte[] ( org.springframework.integration.ip.udp.Message<> ) ; if ( this . boolean ) { java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] . int + NUMBER ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] . int ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; byte[] = java.nio.ByteBuffer . byte[] ( ) ; } return new java.net.DatagramPacket ( byte[] , byte[] . int ) ; }  <METHOD_END>
<METHOD_START> private java.net.DatagramPacket java.net.DatagramPacket ( Message < ? > org.springframework.integration.ip.udp.Message<?> ) throws java.lang.Exception { Assert . state ( StringUtils . hasText ( this . java.lang.String ) , STRING ) ; byte [] byte[] = byte[] ( org.springframework.integration.ip.udp.Message<> ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER + byte[] . int ) ; if ( this . boolean ) { java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ; } java.nio.ByteBuffer . java.nio.ByteBuffer ( IpHeaders . ACK_ADDRESS . getBytes ( this . java.lang.String ) ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) '=' ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( this . java.lang.String . byte[] ( this . java.lang.String ) ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) ';' ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( MessageHeaders . ID . getBytes ( this . java.lang.String ) ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) '=' ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( org.springframework.integration.ip.udp.Message<> . getHeaders ( ) . getId ( ) . toString ( ) . getBytes ( this . java.lang.String ) ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) ';' ) ; int int = java.nio.ByteBuffer . int ( ) - NUMBER ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; if ( this . boolean ) { java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER , byte[] . int + int ) ; } return new java.net.DatagramPacket ( java.nio.ByteBuffer . byte[] ( ) , java.nio.ByteBuffer . int ( ) ) ; }  <METHOD_END>
<METHOD_START> private byte [] byte[] ( Message < ? > org.springframework.integration.ip.udp.Message<?> ) { byte [] byte[] = null ; java.lang.Object java.lang.Object = org.springframework.integration.ip.udp.Message<> . getPayload ( ) ; if ( java.lang.Object instanceof byte [] ) { byte[] = ( byte [] ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { try { byte[] = ( ( java.lang.String ) java.lang.Object ) . byte[] ( this . java.lang.String ) ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessageHandlingException ( org.springframework.integration.ip.udp.Message<> , java.io.UnsupportedEncodingException ) ; } } else { throw new MessageHandlingException ( org.springframework.integration.ip.udp.Message<> , STRING + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } return byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.ip.udp.Message<byte[]> < byte [] > org.springframework.integration.ip.udp.Message<byte[]> ( java.net.DatagramPacket java.net.DatagramPacket ) throws java.lang.Exception { int int = java.net.DatagramPacket . int ( ) ; int int = java.net.DatagramPacket . int ( ) ; byte [] byte[] ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( java.net.DatagramPacket . byte[] ( ) , int , int ) ; Message < byte [] > org.springframework.integration.ip.udp.Message<byte[]> = null ; if ( this . boolean ) { int int = java.nio.ByteBuffer . int ( ) ; if ( int != ( int - NUMBER ) ) { throw new MessageMappingException ( STRING + ( int + NUMBER ) + STRING + int ) ; } int += NUMBER ; int -= NUMBER ; } java.lang.String java.lang.String = java.net.DatagramPacket . java.net.InetAddress ( ) . java.lang.String ( ) ; java.lang.String java.lang.String ; if ( this . boolean ) { java.lang.String = java.net.DatagramPacket . java.net.InetAddress ( ) . java.lang.String ( ) ; } else { java.lang.String = java.lang.String ; } int int = java.net.DatagramPacket . int ( ) ; if ( this . boolean || boolean ( java.nio.ByteBuffer , IpHeaders . ACK_ADDRESS ) ) { try { java.lang.String java.lang.String = new java.lang.String ( java.net.DatagramPacket . byte[] ( ) , int , int , this . java.lang.String ) ; java.util.regex.Matcher java.util.regex.Matcher = java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) ; if ( java.util.regex.Matcher . boolean ( ) ) { int = int - java.util.regex.Matcher . int ( ) ; byte[] = new byte [ int ] ; java.lang.System . void ( java.net.DatagramPacket . byte[] ( ) , int + java.util.regex.Matcher . int ( ) , byte[] , NUMBER , int ) ; org.springframework.integration.ip.udp.Message<byte[]> = org.springframework.integration.ip.udp.MessageBuilderFactory ( ) . withPayload ( byte[] ) . setHeader ( IpHeaders . ACK_ID , java.util.UUID . java.util.UUID ( java.util.regex.Matcher . java.lang.String ( NUMBER ) ) ) . setHeader ( IpHeaders . ACK_ADDRESS , java.util.regex.Matcher . java.lang.String ( NUMBER ) ) . setHeader ( IpHeaders . HOSTNAME , java.lang.String ) . setHeader ( IpHeaders . IP_ADDRESS , java.lang.String ) . setHeader ( IpHeaders . PORT , int ) . setHeader ( IpHeaders . PACKET_ADDRESS , java.net.DatagramPacket . java.net.SocketAddress ( ) ) . build ( ) ; } } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessageMappingException ( STRING , java.io.UnsupportedEncodingException ) ; } } if ( org.springframework.integration.ip.udp.Message<byte[]> == null ) { byte[] = new byte [ int ] ; java.lang.System . void ( java.net.DatagramPacket . byte[] ( ) , int , byte[] , NUMBER , int ) ; if ( byte[] . int > NUMBER ) { org.springframework.integration.ip.udp.Message<byte[]> = org.springframework.integration.ip.udp.MessageBuilderFactory ( ) . withPayload ( byte[] ) . setHeader ( IpHeaders . HOSTNAME , java.lang.String ) . setHeader ( IpHeaders . IP_ADDRESS , java.lang.String ) . setHeader ( IpHeaders . PORT , int ) . setHeader ( IpHeaders . PACKET_ADDRESS , java.net.DatagramPacket . java.net.SocketAddress ( ) ) . build ( ) ; } } return org.springframework.integration.ip.udp.Message<byte[]> ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.nio.ByteBuffer java.nio.ByteBuffer , java.lang.String java.lang.String ) { int int = java.nio.ByteBuffer . int ( ) ; if ( java.nio.ByteBuffer . int ( ) - int < java.lang.String . int ( ) ) { return false ; } try { byte [] byte[] ; byte[] = java.lang.String . byte[] ( this . java.lang.String ) ; for ( int int = NUMBER ; int < byte[] . int ; int ++ ) { if ( java.nio.ByteBuffer . byte ( ) != byte[] [ int ] ) { return false ; } } return true ; } catch ( java.io.UnsupportedEncodingException java.io.UnsupportedEncodingException ) { throw new MessageMappingException ( STRING , java.io.UnsupportedEncodingException ) ; } finally { java.nio.ByteBuffer . java.nio.Buffer ( int ) ; } }  <METHOD_END>
