<METHOD_START> public void void ( java.util.concurrent.Executor java.util.concurrent.Executor ) { this . java.util.concurrent.Executor = java.util.concurrent.Executor ; }  <METHOD_END>
<METHOD_START> public void void ( PlatformTransactionManager org.springframework.jms.config.PlatformTransactionManager ) { this . org.springframework.jms.config.PlatformTransactionManager = org.springframework.jms.config.PlatformTransactionManager ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Integer java.lang.Integer ) { this . java.lang.Integer = java.lang.Integer ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Long java.lang.Long ) { this . java.lang.Long = java.lang.Long ; }  <METHOD_END>
<METHOD_START> public void void ( BackOff org.springframework.jms.config.BackOff ) { this . org.springframework.jms.config.BackOff = org.springframework.jms.config.BackOff ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.jms.config.DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer ( ) { return new DefaultMessageListenerContainer ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultMessageListenerContainer org.springframework.jms.config.DefaultMessageListenerContainer ) { if ( this . java.util.concurrent.Executor != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setTaskExecutor ( this . java.util.concurrent.Executor ) ; } if ( this . org.springframework.jms.config.PlatformTransactionManager != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setTransactionManager ( this . org.springframework.jms.config.PlatformTransactionManager ) ; } if ( this . java.lang.Integer != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setCacheLevel ( this . java.lang.Integer ) ; } else if ( this . java.lang.String != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setCacheLevelName ( this . java.lang.String ) ; } if ( this . java.lang.String != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setConcurrency ( this . java.lang.String ) ; } if ( this . java.lang.Integer != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setMaxMessagesPerTask ( this . java.lang.Integer ) ; } if ( this . java.lang.Long != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setReceiveTimeout ( this . java.lang.Long ) ; } if ( this . org.springframework.jms.config.BackOff != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setBackOff ( this . org.springframework.jms.config.BackOff ) ; if ( this . java.lang.Long != null ) { logger . warn ( STRING ) ; } } else if ( this . java.lang.Long != null ) { org.springframework.jms.config.DefaultMessageListenerContainer . setRecoveryInterval ( this . java.lang.Long ) ; } }  <METHOD_END>
