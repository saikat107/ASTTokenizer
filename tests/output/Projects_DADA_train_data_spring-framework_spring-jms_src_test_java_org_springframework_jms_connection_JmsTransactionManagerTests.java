<METHOD_START> @ After public void void ( ) { assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; assertFalse ( TransactionSynchronizationManager . isSynchronizationActive ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . rollback ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.Session ) . rollback ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; final JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; TransactionTemplate org.springframework.jms.connection.TransactionTemplate = new TransactionTemplate ( org.springframework.jms.connection.JmsTransactionManager ) ; org.springframework.jms.connection.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; final JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; TransactionTemplate org.springframework.jms.connection.TransactionTemplate = new TransactionTemplate ( org.springframework.jms.connection.JmsTransactionManager ) ; org.springframework.jms.connection.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.TransactionStatus . setRollbackOnly ( ) ; } } ) ; try { org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; fail ( STRING ) ; } catch ( UnexpectedRollbackException org.springframework.jms.connection.UnexpectedRollbackException ) { } verify ( org.springframework.jms.connection.Session ) . rollback ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.TransactionStatus . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { final ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; given ( org.springframework.jms.connection.Connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; final JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; TransactionTemplate org.springframework.jms.connection.TransactionTemplate = new TransactionTemplate ( org.springframework.jms.connection.JmsTransactionManager ) ; org.springframework.jms.connection.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_NOT_SUPPORTED ) ; org.springframework.jms.connection.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; } } ) ; } } ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { final ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; final Session org.springframework.jms.connection.Session = mock ( Session .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session , org.springframework.jms.connection.Session ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; final JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; TransactionTemplate org.springframework.jms.connection.TransactionTemplate = new TransactionTemplate ( org.springframework.jms.connection.JmsTransactionManager ) ; org.springframework.jms.connection.TransactionTemplate . setPropagationBehavior ( TransactionDefinition . PROPAGATION_REQUIRES_NEW ) ; org.springframework.jms.connection.TransactionTemplate . execute ( new TransactionCallbackWithoutResult ( ) { @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; } } ) ; } } ) ; org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection , times ( NUMBER ) ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( TransactionStatus org.springframework.jms.connection.TransactionStatus ) { org.springframework.jms.connection.JmsTemplate . execute ( new SessionCallback < java.lang.Void > ( ) { @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session != org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Void java.lang.Void ( Session org.springframework.jms.connection.Session ) { assertTrue ( org.springframework.jms.connection.Session == org.springframework.jms.connection.Session ) ; return null ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.jms.connection.JMSException { Destination org.springframework.jms.connection.Destination = new StubQueue ( ) ; ConnectionFactory org.springframework.jms.connection.ConnectionFactory = mock ( ConnectionFactory .class ) ; Connection org.springframework.jms.connection.Connection = mock ( Connection .class ) ; Session org.springframework.jms.connection.Session = mock ( Session .class ) ; MessageProducer org.springframework.jms.connection.MessageProducer = mock ( MessageProducer .class ) ; final Message org.springframework.jms.connection.Message = mock ( Message .class ) ; given ( org.springframework.jms.connection.ConnectionFactory . createConnection ( ) ) . willReturn ( org.springframework.jms.connection.Connection ) ; given ( org.springframework.jms.connection.Connection . createSession ( true , Session . AUTO_ACKNOWLEDGE ) ) . willReturn ( org.springframework.jms.connection.Session ) ; given ( org.springframework.jms.connection.Session . createProducer ( org.springframework.jms.connection.Destination ) ) . willReturn ( org.springframework.jms.connection.MessageProducer ) ; given ( org.springframework.jms.connection.Session . getTransacted ( ) ) . willReturn ( true ) ; JmsTransactionManager org.springframework.jms.connection.JmsTransactionManager = new JmsTransactionManager ( org.springframework.jms.connection.ConnectionFactory ) ; TransactionStatus org.springframework.jms.connection.TransactionStatus = org.springframework.jms.connection.JmsTransactionManager . getTransaction ( new DefaultTransactionDefinition ( ) ) ; JmsTemplate org.springframework.jms.connection.JmsTemplate = new JmsTemplate ( org.springframework.jms.connection.ConnectionFactory ) ; org.springframework.jms.connection.JmsTemplate . send ( org.springframework.jms.connection.Destination , new MessageCreator ( ) { @ java.lang.Override public org.springframework.jms.connection.Message org.springframework.jms.connection.Message ( Session org.springframework.jms.connection.Session ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Message ; } } ) ; org.springframework.jms.connection.JmsTransactionManager . commit ( org.springframework.jms.connection.TransactionStatus ) ; verify ( org.springframework.jms.connection.MessageProducer ) . send ( org.springframework.jms.connection.Message ) ; verify ( org.springframework.jms.connection.Session ) . commit ( ) ; verify ( org.springframework.jms.connection.MessageProducer ) . close ( ) ; verify ( org.springframework.jms.connection.Session ) . close ( ) ; verify ( org.springframework.jms.connection.Connection ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.jms.connection.Message org.springframework.jms.connection.Message ( Session org.springframework.jms.connection.Session ) throws org.springframework.jms.connection.JMSException { return org.springframework.jms.connection.Message ; }  <METHOD_END>
