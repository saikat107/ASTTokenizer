<METHOD_START> @ Before public void void ( ) { GroovyCompilerConfiguration org.springframework.boot.cli.command.install.GroovyCompilerConfiguration = new GroovyCompilerConfiguration ( ) { @ java.lang.Override public boolean boolean ( ) { return true ; } @ java.lang.Override public boolean boolean ( ) { return true ; } @ java.lang.Override public boolean boolean ( ) { return false ; } @ java.lang.Override public org.springframework.boot.cli.command.install.GroovyCompilerScope org.springframework.boot.cli.command.install.GroovyCompilerScope ( ) { return GroovyCompilerScope . DEFAULT ; } @ java.lang.Override public java.util.List<org.springframework.boot.cli.command.install.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.command.install.RepositoryConfiguration> ( ) { return RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; } @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; } } ; this . org.springframework.boot.cli.command.install.DependencyResolver = new GroovyGrabDependencyResolver ( org.springframework.boot.cli.command.install.GroovyCompilerConfiguration ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.cli.command.install.GroovyCompilerScope org.springframework.boot.cli.command.install.GroovyCompilerScope ( ) { return GroovyCompilerScope . DEFAULT ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.boot.cli.command.install.RepositoryConfiguration> < RepositoryConfiguration > java.util.List<org.springframework.boot.cli.command.install.RepositoryConfiguration> ( ) { return RepositoryConfigurationFactory . createDefaultRepositoryConfiguration ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return new java.lang.String [] { STRING } ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.boot.cli.command.install.DependencyResolver . resolve ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.List<java.io.File> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> ( java.util.List<java.io.File> ) ) . containsOnly ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.boot.cli.command.install.DependencyResolver . resolve ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.List<java.io.File> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> ( java.util.List<java.io.File> ) ) . containsOnly ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( { STRING , STRING } ) public void void ( ) java.lang.Exception { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.boot.cli.command.install.DependencyResolver . resolve ( java.util.Arrays . java.util.List<java.lang.String> ( STRING ) ) ; assertThat ( java.util.List<java.io.File> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> ( java.util.List<java.io.File> ) ) . has ( ( Condition ) Matched . by ( hasItems ( startsWith ( STRING ) , startsWith ( STRING ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.util.List<java.io.File> < java.io.File > java.util.List<java.io.File> = this . org.springframework.boot.cli.command.install.DependencyResolver . resolve ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) ) ; assertThat ( java.util.List<java.io.File> ) . hasSize ( NUMBER ) ; assertThat ( java.util.Set<java.lang.String> ( java.util.List<java.io.File> ) ) . containsOnly ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> ( java.util.Collection<java.io.File> < java.io.File > java.util.Collection<java.io.File> ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( java.util.Collection<java.io.File> . int ( ) ) ; for ( java.io.File java.io.File : java.util.Collection<java.io.File> ) { java.util.Set<java.lang.String> . boolean ( java.io.File . java.lang.String ( ) ) ; } return java.util.Set<java.lang.String> ; }  <METHOD_END>
