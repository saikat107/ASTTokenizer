<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertEquals ( - NUMBER , TestUtils . getPropertyValue ( this . org.springframework.integration.xml.config.EventDrivenConsumer , STRING ) ) ; assertFalse ( TestUtils . getPropertyValue ( this . org.springframework.integration.xml.config.EventDrivenConsumer , STRING , java.lang.Boolean .class ) ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > java.util.List<org.springframework.integration.xml.config.SmartLifecycle> = ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> < SmartLifecycle > ) TestUtils . getPropertyValue ( org.springframework.integration.xml.config.SmartLifecycleRoleController , STRING , MultiValueMap .class ) . get ( STRING ) ; assertThat ( java.util.List<org.springframework.integration.xml.config.SmartLifecycle> , contains ( ( SmartLifecycle ) this . org.springframework.integration.xml.config.EventDrivenConsumer ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( new java.lang.Double ( NUMBER ) , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( java.lang.Boolean . java.lang.Boolean , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.lang.Object instanceof org.w3c.dom.Node ) ; org.w3c.dom.Node org.w3c.dom.Node = ( org.w3c.dom.Node ) java.lang.Object ; assertEquals ( STRING , org.w3c.dom.Node . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; java.lang.Object java.lang.Object = org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ; assertTrue ( java.util.List .class . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) ; java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > java.util.List<org.w3c.dom.Node> = ( java.util.List<org.w3c.dom.Node> < org.w3c.dom.Node > ) java.lang.Object ; assertEquals ( NUMBER , java.util.List<org.w3c.dom.Node> . int ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( STRING , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.integration.xml.config.MessageChannel . send ( org.springframework.integration.xml.config.Message<> ) ; assertEquals ( new java.lang.Double ( NUMBER ) , org.springframework.integration.xml.config.PollableChannel . receive ( NUMBER ) . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( org.w3c.dom.Node org.w3c.dom.Node , int int ) throws org.w3c.dom.DOMException { return org.w3c.dom.Node . java.lang.String ( ) + STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public javax.xml.transform.Source javax.xml.transform.Source ( java.lang.Object java.lang.Object ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Node org.w3c.dom.Node ( java.lang.Object java.lang.Object ) { try { return javax.xml.parsers.DocumentBuilderFactory . javax.xml.parsers.DocumentBuilderFactory ( ) . javax.xml.parsers.DocumentBuilder ( ) . org.w3c.dom.Document ( new org.xml.sax.InputSource ( new java.io.StringReader ( STRING ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.w3c.dom.Document org.w3c.dom.Document ( java.lang.Object java.lang.Object ) { throw new java.lang.UnsupportedOperationException ( ) ; }  <METHOD_END>
