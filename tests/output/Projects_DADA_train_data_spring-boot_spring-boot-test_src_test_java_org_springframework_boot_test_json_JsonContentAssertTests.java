<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( null ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualTo ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( null ) ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isStrictlyEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.lang.String . byte[] ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.File ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( java.io.InputStream ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( null ) ) . isNotEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualTo ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( null ) ) . isNotEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.io.File ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( java.io.InputStream ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotStrictlyEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , JSONCompareMode . LENIENT ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( STRING , java.lang.Class<? extends org.springframework.boot.test.json.JsonContentAssertTests> ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.lang.String . byte[] ( ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.File ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( java.io.InputStream ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.AssertionError .class ) public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . isNotEqualToJson ( org.springframework.boot.test.json.Resource ( java.lang.String ) , org.springframework.boot.test.json.JSONComparator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . doesNotHaveEmptyJsonPathValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathStringValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathStringValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathStringValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathNumberValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathNumberValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathBooleanValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathBooleanValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathArrayValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathArrayValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathArrayValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathMapValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathMapValue ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . hasJsonPathMapValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathValue ( STRING ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathStringValue ( STRING ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathStringValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathStringValue ( STRING ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathStringValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathNumberValue ( STRING ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathNumberValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathNumberValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathBooleanValue ( STRING ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathBooleanValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathBooleanValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathArrayValue ( STRING ) . containsExactly ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathArrayValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathArrayValue ( STRING ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathArrayValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathMapValue ( STRING ) . containsEntry ( STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathMapValue ( STRING ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathMapValue ( STRING ) . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { java.lang.String java.lang.String = STRING ; this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.AssertionError .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING + java.lang.String + STRING ) ; assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( java.lang.String ) ) . extractingJsonPathMapValue ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { assertThat ( org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( null ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.lang.String java.lang.String ) throws java.io.IOException { java.io.File java.io.File = this . org.springframework.boot.test.json.TemporaryFolder . newFile ( STRING ) ; FileCopyUtils . copy ( java.lang.String . byte[] ( ) , java.io.File ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private java.io.InputStream java.io.InputStream ( java.lang.String java.lang.String ) throws java.io.IOException { return new java.io.ByteArrayInputStream ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.json.Resource org.springframework.boot.test.json.Resource ( java.lang.String java.lang.String ) throws java.io.IOException { return new ByteArrayResource ( java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( java.lang.String java.lang.String ) { try { ClassPathResource org.springframework.boot.test.json.ClassPathResource = new ClassPathResource ( java.lang.String , org.springframework.boot.test.json.JsonContentAssertTests .class ) ; return new java.lang.String ( FileCopyUtils . copyToByteArray ( org.springframework.boot.test.json.ClassPathResource . getInputStream ( ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.IllegalStateException ( java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> < JsonContentAssert > org.springframework.boot.test.json.AssertProvider<org.springframework.boot.test.json.JsonContentAssert> ( final java.lang.String java.lang.String ) { return new AssertProvider < JsonContentAssert > ( ) { @ java.lang.Override public org.springframework.boot.test.json.JsonContentAssert org.springframework.boot.test.json.JsonContentAssert ( ) { return new JsonContentAssert ( org.springframework.boot.test.json.JsonContentAssertTests .class , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.test.json.JsonContentAssert org.springframework.boot.test.json.JsonContentAssert ( ) { return new JsonContentAssert ( org.springframework.boot.test.json.JsonContentAssertTests .class , java.lang.String ) ; }  <METHOD_END>
