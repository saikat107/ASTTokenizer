<METHOD_START> public void void ( SessionFactory org.springframework.data.neo4j.web.support.SessionFactory ) { this . org.springframework.data.neo4j.web.support.SessionFactory = org.springframework.data.neo4j.web.support.SessionFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.neo4j.web.support.SessionFactory org.springframework.data.neo4j.web.support.SessionFactory ( ) { return this . org.springframework.data.neo4j.web.support.SessionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.neo4j.web.support.BeanFactory ) throws org.springframework.data.neo4j.web.support.BeansException { if ( org.springframework.data.neo4j.web.support.SessionFactory ( ) == null ) { void ( org.springframework.data.neo4j.web.support.BeanFactory . getBean ( SessionFactory .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.data.neo4j.web.support.WebRequest ) throws org.springframework.data.neo4j.web.support.DataAccessException { java.lang.String java.lang.String = java.lang.String ( ) ; WebAsyncManager org.springframework.data.neo4j.web.support.WebAsyncManager = WebAsyncUtils . getAsyncManager ( org.springframework.data.neo4j.web.support.WebRequest ) ; if ( org.springframework.data.neo4j.web.support.WebAsyncManager . hasConcurrentResult ( ) ) { if ( boolean ( org.springframework.data.neo4j.web.support.WebAsyncManager , java.lang.String ) ) { return; } } if ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.web.support.SessionFactory ( ) ) ) { java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.data.neo4j.web.support.WebRequest . getAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; int int = ( java.lang.Integer != null ? java.lang.Integer + NUMBER : NUMBER ) ; org.springframework.data.neo4j.web.support.WebRequest . setAttribute ( java.lang.String ( ) , int , WebRequest . SCOPE_REQUEST ) ; } else { org.springframework.data.neo4j.web.support.Logger . debug ( STRING ) ; Session org.springframework.data.neo4j.web.support.Session = org.springframework.data.neo4j.web.support.SessionFactory . openSession ( ) ; SessionHolder org.springframework.data.neo4j.web.support.SessionHolder = new SessionHolder ( org.springframework.data.neo4j.web.support.Session ) ; TransactionSynchronizationManager . bindResource ( org.springframework.data.neo4j.web.support.SessionFactory ( ) , org.springframework.data.neo4j.web.support.SessionHolder ) ; AsyncRequestInterceptor org.springframework.data.neo4j.web.support.AsyncRequestInterceptor = new AsyncRequestInterceptor ( org.springframework.data.neo4j.web.support.SessionFactory ( ) , org.springframework.data.neo4j.web.support.SessionHolder ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . registerCallableInterceptor ( java.lang.String , org.springframework.data.neo4j.web.support.AsyncRequestInterceptor ) ; org.springframework.data.neo4j.web.support.WebAsyncManager . registerDeferredResultInterceptor ( java.lang.String , org.springframework.data.neo4j.web.support.AsyncRequestInterceptor ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.data.neo4j.web.support.WebRequest , ModelMap org.springframework.data.neo4j.web.support.ModelMap ) {	}  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.data.neo4j.web.support.WebRequest , java.lang.Exception java.lang.Exception ) throws org.springframework.data.neo4j.web.support.DataAccessException { if ( ! boolean ( org.springframework.data.neo4j.web.support.WebRequest ) ) { TransactionSynchronizationManager . unbindResource ( org.springframework.data.neo4j.web.support.SessionFactory ( ) ) ; org.springframework.data.neo4j.web.support.Logger . debug ( STRING ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebRequest org.springframework.data.neo4j.web.support.WebRequest ) { java.lang.String java.lang.String = java.lang.String ( ) ; java.lang.Integer java.lang.Integer = ( java.lang.Integer ) org.springframework.data.neo4j.web.support.WebRequest . getAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; if ( java.lang.Integer == null ) { return false ; } if ( java.lang.Integer > NUMBER ) { org.springframework.data.neo4j.web.support.WebRequest . setAttribute ( java.lang.String , java.lang.Integer - NUMBER , WebRequest . SCOPE_REQUEST ) ; } else { org.springframework.data.neo4j.web.support.WebRequest . removeAttribute ( java.lang.String , WebRequest . SCOPE_REQUEST ) ; } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( WebRequest org.springframework.data.neo4j.web.support.WebRequest ) { if ( ! boolean ( org.springframework.data.neo4j.web.support.WebRequest ) ) { TransactionSynchronizationManager . unbindResource ( org.springframework.data.neo4j.web.support.SessionFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return org.springframework.data.neo4j.web.support.SessionFactory ( ) . toString ( ) + java.lang.String ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( WebAsyncManager org.springframework.data.neo4j.web.support.WebAsyncManager , java.lang.String java.lang.String ) { if ( org.springframework.data.neo4j.web.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) == null ) { return false ; } ( ( AsyncRequestInterceptor ) org.springframework.data.neo4j.web.support.WebAsyncManager . getCallableInterceptor ( java.lang.String ) ) . bindSession ( ) ; return true ; }  <METHOD_END>
