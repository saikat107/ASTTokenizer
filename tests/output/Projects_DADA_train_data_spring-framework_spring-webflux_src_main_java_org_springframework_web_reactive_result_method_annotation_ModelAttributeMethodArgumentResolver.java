<METHOD_START> public void ( ReactiveAdapterRegistry org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry , boolean boolean ) { super( org.springframework.web.reactive.result.method.annotation.ReactiveAdapterRegistry ); this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { if ( org.springframework.web.reactive.result.method.annotation.MethodParameter . hasParameterAnnotation ( ModelAttribute .class ) ) { return true ; } else if ( this . boolean ) { return checkParameterType ( org.springframework.web.reactive.result.method.annotation.MethodParameter , type -> ! BeanUtils . isSimpleProperty ( type ) ) ; } return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> < java.lang.Object > org.springframework.web.reactive.result.method.annotation.Mono<java.lang.Object> ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ResolvableType . forMethodParameter ( org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; ReactiveAdapter org.springframework.web.reactive.result.method.annotation.ReactiveAdapter = getAdapterRegistry ( ) . getAdapter ( org.springframework.web.reactive.result.method.annotation.ResolvableType . resolve ( ) ) ; ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType = ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null ? org.springframework.web.reactive.result.method.annotation.ResolvableType . getGeneric ( NUMBER ) : org.springframework.web.reactive.result.method.annotation.ResolvableType ) ; Assert . state ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter == null || ! org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . isMultiValue ( ) , ( ) getClass ( ) . getSimpleName ( ) + STRING + parameter . getGenericParameterType ( ) ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.MethodParameter ) ; Mono < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> = org.springframework.web.reactive.result.method.annotation.Mono<?> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.ResolvableType , org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) ; MonoProcessor < BindingResult > org.springframework.web.reactive.result.method.annotation.MonoProcessor<org.springframework.web.reactive.result.method.annotation.BindingResult> = MonoProcessor . create ( ) ; java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( BindingResult . MODEL_KEY_PREFIX + java.lang.String , org.springframework.web.reactive.result.method.annotation.MonoProcessor<org.springframework.web.reactive.result.method.annotation.BindingResult> ) ; return org.springframework.web.reactive.result.method.annotation.Mono<> . then ( value -> { WebExchangeDataBinder binder = context . createDataBinder ( exchange , value , name ) ; return binder . bind ( exchange ) . doOnError ( bindingResultMono :: onError ) . doOnSuccess ( aVoid -> { validateIfApplicable ( binder , parameter ) ; BindingResult errors = binder . getBindingResult ( ) ; model . put ( BindingResult . MODEL_KEY_PREFIX + name , errors ) ; model . put ( name , value ) ; bindingResultMono . onNext ( errors ) ; } ) . then ( Mono . fromCallable ( ( ) { BindingResult errors = binder . getBindingResult ( ) ; if ( adapter != null ) { return adapter . fromPublisher ( errors . hasErrors ( ) ? Mono . error ( new WebExchangeBindException ( parameter , errors ) ) : valueMono ) ; } else { if ( errors . hasErrors ( ) && ! hasErrorsArgument ( parameter ) ) { throw new WebExchangeBindException ( parameter , errors ) ; } return value ; } } ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { ModelAttribute org.springframework.web.reactive.result.method.annotation.ModelAttribute = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotation ( ModelAttribute .class ) ; if ( org.springframework.web.reactive.result.method.annotation.ModelAttribute != null && StringUtils . hasText ( org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ) ) { return org.springframework.web.reactive.result.method.annotation.ModelAttribute . value ( ) ; } return ClassUtils . getShortNameAsProperty ( org.springframework.web.reactive.result.method.annotation.ResolvableType . getRawClass ( ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.Mono<?> < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> ( java.lang.String java.lang.String , ResolvableType org.springframework.web.reactive.result.method.annotation.ResolvableType , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.Object java.lang.Object = org.springframework.web.reactive.result.method.annotation.BindingContext . getModel ( ) . asMap ( ) . get ( java.lang.String ) ; if ( java.lang.Object == null ) { return org.springframework.web.reactive.result.method.annotation.Mono<?> ( java.lang.String , org.springframework.web.reactive.result.method.annotation.ResolvableType . getRawClass ( ) , org.springframework.web.reactive.result.method.annotation.BindingContext , org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) ; } ReactiveAdapter org.springframework.web.reactive.result.method.annotation.ReactiveAdapter = getAdapterRegistry ( ) . getAdapter ( null , java.lang.Object ) ; if ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter != null ) { Assert . isTrue ( ! org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . isMultiValue ( ) , STRING ) ; return Mono . from ( org.springframework.web.reactive.result.method.annotation.ReactiveAdapter . toPublisher ( java.lang.Object ) ) ; } else { return Mono . justOrEmpty ( java.lang.Object ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.web.reactive.result.method.annotation.Mono<?> < ? > org.springframework.web.reactive.result.method.annotation.Mono<?> ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , BindingContext org.springframework.web.reactive.result.method.annotation.BindingContext , ServerWebExchange org.springframework.web.reactive.result.method.annotation.ServerWebExchange ) { java.lang.reflect.Constructor<?> < ? > [] java.lang.reflect.Constructor<?>[] = java.lang.Class<> . java.lang.reflect.Constructor<?>[] ( ) ; if ( java.lang.reflect.Constructor<?>[] . int != NUMBER ) { return Mono . just ( BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } java.lang.reflect.Constructor<?> < ? > java.lang.reflect.Constructor<?> = java.lang.reflect.Constructor<?>[] [ NUMBER ] ; if ( java.lang.reflect.Constructor<> . int ( ) == NUMBER ) { return Mono . just ( BeanUtils . instantiateClass ( java.lang.reflect.Constructor<> ) ) ; } return org.springframework.web.reactive.result.method.annotation.ServerWebExchange . getRequestParams ( ) . then ( requestParams -> { ConstructorProperties cp = ctor . getAnnotation ( ConstructorProperties .class ) ; String [] paramNames = ( cp != null ? cp . value ( ) : parameterNameDiscoverer . getParameterNames ( ctor ) ) ; Assert . state ( paramNames != null , ( ) STRING + ctor ) ; Class < ? > [] paramTypes = ctor . getParameterTypes ( ) ; Assert . state ( paramNames . length == paramTypes . length , ( ) STRING + paramNames . length + STRING + ctor ) ; Object [] args = new Object [ paramTypes . length ] ; WebDataBinder binder = context . createDataBinder ( exchange , null , attributeName ) ; for ( int i = NUMBER ; i < paramNames . length ; i ++ ) { List < String > paramValues = requestParams . get ( paramNames [ i ] ) ; Object paramValue = null ; if ( paramValues != null ) { paramValue = ( paramValues . size ( ) == NUMBER ? paramValues . get ( NUMBER ) : paramValues . toArray ( new String [ paramValues . size ( ) ] ) ) ; } args [ i ] = binder . convertIfNecessary ( paramValue , paramTypes [ i ] , new MethodParameter ( ctor , i ) ) ; } return Mono . fromSupplier ( ( ) BeanUtils . instantiateClass ( ctor , args ) ) ; } ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { int int = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterIndex ( ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = org.springframework.web.reactive.result.method.annotation.MethodParameter . getMethod ( ) . getParameterTypes ( ) ; return ( java.lang.Class<?>[] . int > int && Errors .class . boolean ( java.lang.Class<?>[] [ int + NUMBER ] ) ) ; }  <METHOD_END>
<METHOD_START> private void void ( WebExchangeDataBinder org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder , MethodParameter org.springframework.web.reactive.result.method.annotation.MethodParameter ) { java.lang.annotation.Annotation [] java.lang.annotation.Annotation[] = org.springframework.web.reactive.result.method.annotation.MethodParameter . getParameterAnnotations ( ) ; for ( java.lang.annotation.Annotation java.lang.annotation.Annotation : java.lang.annotation.Annotation[] ) { Validated org.springframework.web.reactive.result.method.annotation.Validated = AnnotationUtils . getAnnotation ( java.lang.annotation.Annotation , Validated .class ) ; if ( org.springframework.web.reactive.result.method.annotation.Validated != null || java.lang.annotation.Annotation . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) . boolean ( STRING ) ) { java.lang.Object java.lang.Object = ( org.springframework.web.reactive.result.method.annotation.Validated != null ? org.springframework.web.reactive.result.method.annotation.Validated . value ( ) : AnnotationUtils . getValue ( java.lang.annotation.Annotation ) ) ; java.lang.Object java.lang.Object = ( java.lang.Object instanceof java.lang.Object [] ? ( java.lang.Object [] ) java.lang.Object : new java.lang.Object [] { java.lang.Object } ) ; org.springframework.web.reactive.result.method.annotation.WebExchangeDataBinder . validate ( java.lang.Object ) ; } } }  <METHOD_END>
