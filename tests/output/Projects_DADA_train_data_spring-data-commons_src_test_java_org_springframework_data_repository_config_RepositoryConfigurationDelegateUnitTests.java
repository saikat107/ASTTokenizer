<METHOD_START> @ Test public void void ( ) { StandardEnvironment org.springframework.data.repository.config.StandardEnvironment = new StandardEnvironment ( ) ; GenericApplicationContext org.springframework.data.repository.config.GenericApplicationContext = new GenericApplicationContext ( ) ; RepositoryConfigurationSource org.springframework.data.repository.config.RepositoryConfigurationSource = new AnnotationRepositoryConfigurationSource ( new StandardAnnotationMetadata ( org.springframework.data.repository.config.RepositoryConfigurationDelegateUnitTests.TestConfig .class , true ) , EnableRepositories .class , org.springframework.data.repository.config.GenericApplicationContext , org.springframework.data.repository.config.StandardEnvironment ) ; RepositoryConfigurationDelegate org.springframework.data.repository.config.RepositoryConfigurationDelegate = new RepositoryConfigurationDelegate ( org.springframework.data.repository.config.RepositoryConfigurationSource , org.springframework.data.repository.config.GenericApplicationContext , org.springframework.data.repository.config.StandardEnvironment ) ; for ( BeanComponentDefinition org.springframework.data.repository.config.BeanComponentDefinition : org.springframework.data.repository.config.RepositoryConfigurationDelegate . registerRepositoriesIn ( org.springframework.data.repository.config.GenericApplicationContext , org.springframework.data.repository.config.RepositoryConfigurationExtension ) ) { BeanDefinition org.springframework.data.repository.config.BeanDefinition = org.springframework.data.repository.config.BeanComponentDefinition . getBeanDefinition ( ) ; assertThat ( org.springframework.data.repository.config.BeanDefinition . getAttribute ( RepositoryConfigurationDelegate . FACTORY_BEAN_OBJECT_TYPE ) . toString ( ) , endsWith ( STRING ) ) ; } }  <METHOD_END>
