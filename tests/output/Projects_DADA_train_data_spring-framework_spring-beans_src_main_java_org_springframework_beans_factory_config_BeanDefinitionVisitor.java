<METHOD_START> public void ( StringValueResolver org.springframework.beans.factory.config.StringValueResolver ) { Assert . notNull ( org.springframework.beans.factory.config.StringValueResolver , STRING ) ; this . org.springframework.beans.factory.config.StringValueResolver = org.springframework.beans.factory.config.StringValueResolver ; }  <METHOD_END>
<METHOD_START> protected void ( ) {	}  <METHOD_END>
<METHOD_START> public void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { void ( org.springframework.beans.factory.config.BeanDefinition ) ; void ( org.springframework.beans.factory.config.BeanDefinition ) ; void ( org.springframework.beans.factory.config.BeanDefinition ) ; void ( org.springframework.beans.factory.config.BeanDefinition ) ; void ( org.springframework.beans.factory.config.BeanDefinition ) ; void ( org.springframework.beans.factory.config.BeanDefinition . getPropertyValues ( ) ) ; ConstructorArgumentValues org.springframework.beans.factory.config.ConstructorArgumentValues = org.springframework.beans.factory.config.BeanDefinition . getConstructorArgumentValues ( ) ; void ( org.springframework.beans.factory.config.ConstructorArgumentValues . getIndexedArgumentValues ( ) ) ; void ( org.springframework.beans.factory.config.ConstructorArgumentValues . getGenericArgumentValues ( ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.config.BeanDefinition . getParentName ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.config.BeanDefinition . setParentName ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.config.BeanDefinition . getBeanClassName ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.config.BeanDefinition . setBeanClassName ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.config.BeanDefinition . getFactoryBeanName ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.config.BeanDefinition . setFactoryBeanName ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.config.BeanDefinition . getFactoryMethodName ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.config.BeanDefinition . setFactoryMethodName ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( BeanDefinition org.springframework.beans.factory.config.BeanDefinition ) { java.lang.String java.lang.String = org.springframework.beans.factory.config.BeanDefinition . getScope ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.config.BeanDefinition . setScope ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( MutablePropertyValues org.springframework.beans.factory.config.MutablePropertyValues ) { PropertyValue [] org.springframework.beans.factory.config.PropertyValue[] = org.springframework.beans.factory.config.MutablePropertyValues . getPropertyValues ( ) ; for ( PropertyValue org.springframework.beans.factory.config.PropertyValue : org.springframework.beans.factory.config.PropertyValue[] ) { java.lang.Object java.lang.Object = java.lang.Object ( org.springframework.beans.factory.config.PropertyValue . getValue ( ) ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , org.springframework.beans.factory.config.PropertyValue . getValue ( ) ) ) { org.springframework.beans.factory.config.MutablePropertyValues . add ( org.springframework.beans.factory.config.PropertyValue . getName ( ) , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.Integer,ConstructorArgumentValues.ValueHolder> < java.lang.Integer , ConstructorArgumentValues . ConstructorArgumentValues > java.util.Map<java.lang.Integer,ConstructorArgumentValues.ValueHolder> ) { for ( ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder : java.util.Map<java.lang.Integer,ConstructorArgumentValues.ValueHolder> . values ( ) ) { java.lang.Object java.lang.Object = java.lang.Object ( ConstructorArgumentValues.ValueHolder . getValue ( ) ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , ConstructorArgumentValues.ValueHolder . getValue ( ) ) ) { ConstructorArgumentValues.ValueHolder . setValue ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> protected void void ( java.util.List<ConstructorArgumentValues.ValueHolder> < ConstructorArgumentValues . ConstructorArgumentValues > java.util.List<ConstructorArgumentValues.ValueHolder> ) { for ( ConstructorArgumentValues . ConstructorArgumentValues ConstructorArgumentValues.ValueHolder : java.util.List<ConstructorArgumentValues.ValueHolder> ) { java.lang.Object java.lang.Object = java.lang.Object ( ConstructorArgumentValues.ValueHolder . getValue ( ) ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , ConstructorArgumentValues.ValueHolder . getValue ( ) ) ) { ConstructorArgumentValues.ValueHolder . setValue ( java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { if ( java.lang.Object instanceof BeanDefinition ) { void ( ( BeanDefinition ) java.lang.Object ) ; } else if ( java.lang.Object instanceof BeanDefinitionHolder ) { void ( ( ( BeanDefinitionHolder ) java.lang.Object ) . getBeanDefinition ( ) ) ; } else if ( java.lang.Object instanceof RuntimeBeanReference ) { RuntimeBeanReference org.springframework.beans.factory.config.RuntimeBeanReference = ( RuntimeBeanReference ) java.lang.Object ; java.lang.String java.lang.String = java.lang.String ( org.springframework.beans.factory.config.RuntimeBeanReference . getBeanName ( ) ) ; if ( ! java.lang.String . boolean ( org.springframework.beans.factory.config.RuntimeBeanReference . getBeanName ( ) ) ) { return new RuntimeBeanReference ( java.lang.String ) ; } } else if ( java.lang.Object instanceof RuntimeBeanNameReference ) { RuntimeBeanNameReference org.springframework.beans.factory.config.RuntimeBeanNameReference = ( RuntimeBeanNameReference ) java.lang.Object ; java.lang.String java.lang.String = java.lang.String ( org.springframework.beans.factory.config.RuntimeBeanNameReference . getBeanName ( ) ) ; if ( ! java.lang.String . boolean ( org.springframework.beans.factory.config.RuntimeBeanNameReference . getBeanName ( ) ) ) { return new RuntimeBeanNameReference ( java.lang.String ) ; } } else if ( java.lang.Object instanceof java.lang.Object [] ) { void ( ( java.lang.Object [] ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.List ) { void ( ( java.util.List ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Set ) { void ( ( java.util.Set ) java.lang.Object ) ; } else if ( java.lang.Object instanceof java.util.Map ) { void ( ( java.util.Map ) java.lang.Object ) ; } else if ( java.lang.Object instanceof TypedStringValue ) { TypedStringValue org.springframework.beans.factory.config.TypedStringValue = ( TypedStringValue ) java.lang.Object ; java.lang.String java.lang.String = org.springframework.beans.factory.config.TypedStringValue . getValue ( ) ; if ( java.lang.String != null ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; org.springframework.beans.factory.config.TypedStringValue . setValue ( java.lang.String ) ; } } else if ( java.lang.Object instanceof java.lang.String ) { return java.lang.String ( ( java.lang.String ) java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.Object [] java.lang.Object[] ) { for ( int int = NUMBER ; int < java.lang.Object[] . int ; int ++ ) { java.lang.Object java.lang.Object = java.lang.Object[] [ int ] ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.lang.Object[] [ int ] = java.lang.Object ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( java.util.List java.util.List ) { for ( int int = NUMBER ; int < java.util.List . int ( ) ; int ++ ) { java.lang.Object java.lang.Object = java.util.List . java.lang.Object ( int ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; if ( ! ObjectUtils . nullSafeEquals ( java.lang.Object , java.lang.Object ) ) { java.util.List . java.lang.Object ( int , java.lang.Object ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( java.util.Set java.util.Set ) { java.util.Set java.util.Set = new java.util.LinkedHashSet ( ) ; boolean boolean = false ; for ( java.lang.Object java.lang.Object : java.util.Set ) { int int = ( java.lang.Object != null ? java.lang.Object . int ( ) : NUMBER ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; int int = ( java.lang.Object != null ? java.lang.Object . int ( ) : NUMBER ) ; java.util.Set . boolean ( java.lang.Object ) ; boolean = boolean || ( java.lang.Object != java.lang.Object || int != int ) ; } if ( boolean ) { java.util.Set . void ( ) ; java.util.Set . boolean ( java.util.Set ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) protected void void ( java.util.Map<?,?> < ? , ? > java.util.Map<?,?> ) { java.util.Map java.util.Map = new java.util.LinkedHashMap ( ) ; boolean boolean = false ; for ( java.util.Map . java.util.Map.Entry java.util.Map.Entry : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { java.lang.Object java.lang.Object = java.util.Map.Entry . java.lang.Object ( ) ; int int = ( java.lang.Object != null ? java.lang.Object . int ( ) : NUMBER ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; int int = ( java.lang.Object != null ? java.lang.Object . int ( ) : NUMBER ) ; java.lang.Object java.lang.Object = java.util.Map.Entry . java.lang.Object ( ) ; java.lang.Object java.lang.Object = java.lang.Object ( java.lang.Object ) ; java.util.Map . java.lang.Object ( java.lang.Object , java.lang.Object ) ; boolean = boolean || ( java.lang.Object != java.lang.Object || java.lang.Object != java.lang.Object || int != int ) ; } if ( boolean ) { java.util.Map<,> . void ( ) ; java.util.Map<,> . void ( java.util.Map ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( this . org.springframework.beans.factory.config.StringValueResolver == null ) { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } java.lang.String java.lang.String = this . org.springframework.beans.factory.config.StringValueResolver . resolveStringValue ( java.lang.String ) ; return ( java.lang.String . boolean ( java.lang.String ) ? java.lang.String : java.lang.String ) ; }  <METHOD_END>
