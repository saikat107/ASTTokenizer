<METHOD_START> public void ( ListenableFuture < T > org.springframework.cassandra.core.ListenableFuture<T> , PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator ) { Assert . notNull ( org.springframework.cassandra.core.ListenableFuture<T> , STRING ) ; Assert . notNull ( org.springframework.cassandra.core.PersistenceExceptionTranslator , STRING ) ; this . org.springframework.cassandra.core.ListenableFuture<T> = org.springframework.cassandra.core.ListenableFuture<T> ; this . org.springframework.cassandra.core.ListenableFuture<T> = org.springframework.cassandra.core.ListenableFuture ( org.springframework.cassandra.core.ListenableFuture<T> , org.springframework.cassandra.core.PersistenceExceptionTranslator ) ; }  <METHOD_END>
<METHOD_START> private static < T > org.springframework.cassandra.core.ListenableFuture<T> < T > org.springframework.cassandra.core.ListenableFuture<T> ( ListenableFuture < T > org.springframework.cassandra.core.ListenableFuture<T> , PersistenceExceptionTranslator org.springframework.cassandra.core.PersistenceExceptionTranslator ) { SettableListenableFuture < T > org.springframework.cassandra.core.SettableListenableFuture<T> = new SettableListenableFuture <> ( ) ; org.springframework.cassandra.core.ListenableFuture<T> . addCallback ( new ListenableFutureCallback < T > ( ) { @ java.lang.Override public void void ( T T ) { org.springframework.cassandra.core.SettableListenableFuture<T> . set ( T ) ; } @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { DataAccessException org.springframework.cassandra.core.DataAccessException = org.springframework.cassandra.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( ( java.lang.RuntimeException ) java.lang.Throwable ) ; if ( org.springframework.cassandra.core.DataAccessException != null ) { org.springframework.cassandra.core.SettableListenableFuture<T> . setException ( org.springframework.cassandra.core.DataAccessException ) ; return; } } org.springframework.cassandra.core.SettableListenableFuture<T> . setException ( java.lang.Throwable ) ; } } ) ; return org.springframework.cassandra.core.SettableListenableFuture<T> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( T T ) { org.springframework.cassandra.core.SettableListenableFuture<T> . set ( T ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Throwable java.lang.Throwable ) { if ( java.lang.Throwable instanceof java.lang.RuntimeException ) { DataAccessException org.springframework.cassandra.core.DataAccessException = org.springframework.cassandra.core.PersistenceExceptionTranslator . translateExceptionIfPossible ( ( java.lang.RuntimeException ) java.lang.Throwable ) ; if ( org.springframework.cassandra.core.DataAccessException != null ) { org.springframework.cassandra.core.SettableListenableFuture<T> . setException ( org.springframework.cassandra.core.DataAccessException ) ; return; } } org.springframework.cassandra.core.SettableListenableFuture<T> . setException ( java.lang.Throwable ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ListenableFutureCallback < ? super T > org.springframework.cassandra.core.ListenableFutureCallback<? super T> ) { org.springframework.cassandra.core.ListenableFuture<T> . addCallback ( org.springframework.cassandra.core.ListenableFutureCallback<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( SuccessCallback < ? super T > org.springframework.cassandra.core.SuccessCallback<? super T> , FailureCallback org.springframework.cassandra.core.FailureCallback ) { org.springframework.cassandra.core.ListenableFuture<T> . addCallback ( org.springframework.cassandra.core.SuccessCallback<> , org.springframework.cassandra.core.FailureCallback ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( boolean boolean ) { return org.springframework.cassandra.core.ListenableFuture<T> . cancel ( boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.cassandra.core.ListenableFuture<T> . isCancelled ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return org.springframework.cassandra.core.ListenableFuture<T> . isDone ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( ) java.lang.InterruptedException , java.util.concurrent.ExecutionException { return org.springframework.cassandra.core.ListenableFuture<T> . get ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public T T ( long long , java.util.concurrent.TimeUnit java.util.concurrent.TimeUnit ) throws java.lang.InterruptedException , java.util.concurrent.ExecutionException , java.util.concurrent.TimeoutException { return org.springframework.cassandra.core.ListenableFuture<T> . get ( long , java.util.concurrent.TimeUnit ) ; }  <METHOD_END>
