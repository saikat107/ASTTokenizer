<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . boolean = false ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = NotWritablePropertyException .class ) public void void ( ) java.lang.Exception { this . boolean = false ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = BindException .class ) public void void ( ) java.lang.Exception { this . org.springframework.boot.bind.Validator = new SpringValidatorAdapter ( Validation . buildDefaultValidatorFactory ( ) . getValidator ( ) ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; MockPropertySource org.springframework.boot.bind.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( org.springframework.boot.bind.MockPropertySource ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setIgnoreUnknownFields ( false ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; MockPropertySource org.springframework.boot.bind.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( org.springframework.boot.bind.MockPropertySource ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; MockPropertySource org.springframework.boot.bind.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( org.springframework.boot.bind.MockPropertySource ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setResolvePlaceholders ( false ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; MockPropertySource org.springframework.boot.bind.MockPropertySource = new MockPropertySource ( StandardEnvironment . SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MockPropertySource . setProperty ( STRING , STRING ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( org.springframework.boot.bind.MockPropertySource ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setIgnoreUnknownFields ( false ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new SystemEnvironmentPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new RandomValuePropertySource ( ) ) ; void ( ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; this . boolean = false ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new SystemEnvironmentPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new RandomValuePropertySource ( STRING ) ) ; void ( ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . java.lang.String = STRING ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new SystemEnvironmentPropertySource ( STRING , java.util.Collections .< java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( STRING , STRING ) ) ) ; org.springframework.boot.bind.MutablePropertySources . addLast ( new RandomValuePropertySource ( STRING ) ) ; this . boolean = false ; void ( ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo = org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( STRING ) ; assertThat ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo . java.lang.String ) . isEqualTo ( ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( final java.lang.String java.lang.String ) throws java.lang.Exception { void ( ) ; return org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo ( final java.lang.String java.lang.String ) throws java.lang.Exception { java.util.Properties java.util.Properties = PropertiesLoaderUtils . loadProperties ( new ByteArrayResource ( java.lang.String . byte[] ( ) ) ) ; MutablePropertySources org.springframework.boot.bind.MutablePropertySources = new MutablePropertySources ( ) ; org.springframework.boot.bind.MutablePropertySources . addFirst ( new PropertiesPropertySource ( STRING , java.util.Properties ) ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setPropertySources ( org.springframework.boot.bind.MutablePropertySources ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . afterPropertiesSet ( ) ; return this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . getObject ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) java.io.IOException { this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> = new PropertiesConfigurationFactory <> ( org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo .class ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setValidator ( this . org.springframework.boot.bind.Validator ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setTargetName ( this . java.lang.String ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setIgnoreUnknownFields ( this . boolean ) ; this . org.springframework.boot.bind.PropertiesConfigurationFactory<org.springframework.boot.bind.PropertiesConfigurationFactoryTests.Foo> . setMessageSource ( new StaticMessageSource ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
