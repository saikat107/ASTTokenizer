<METHOD_START> public void ( ) { setTransactionSynchronization ( SYNCHRONIZATION_ON_ACTUAL_TRANSACTION ) ; }  <METHOD_END>
<METHOD_START> public void ( SessionFactory org.springframework.data.neo4j.transaction.SessionFactory ) { this(); this . org.springframework.data.neo4j.transaction.SessionFactory = org.springframework.data.neo4j.transaction.SessionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( SessionFactory org.springframework.data.neo4j.transaction.SessionFactory ) { this . org.springframework.data.neo4j.transaction.SessionFactory = org.springframework.data.neo4j.transaction.SessionFactory ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.neo4j.transaction.SessionFactory org.springframework.data.neo4j.transaction.SessionFactory ( ) { return this . org.springframework.data.neo4j.transaction.SessionFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.data.neo4j.transaction.BeanFactory ) throws org.springframework.data.neo4j.transaction.BeansException { if ( org.springframework.data.neo4j.transaction.SessionFactory ( ) == null ) { void ( org.springframework.data.neo4j.transaction.BeanFactory . getBean ( SessionFactory .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.lang.Exception { if ( org.springframework.data.neo4j.transaction.SessionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return org.springframework.data.neo4j.transaction.SessionFactory ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = new org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ( ) ; SessionHolder org.springframework.data.neo4j.transaction.SessionHolder = ( SessionHolder ) TransactionSynchronizationManager . getResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) ) ; if ( org.springframework.data.neo4j.transaction.SessionHolder != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.SessionHolder . getSession ( ) + STRING ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . void ( org.springframework.data.neo4j.transaction.SessionHolder , false ) ; } return org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( java.lang.Object java.lang.Object ) { return ( ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) java.lang.Object ) . boolean ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , TransactionDefinition org.springframework.data.neo4j.transaction.TransactionDefinition ) throws org.springframework.data.neo4j.transaction.TransactionException { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) java.lang.Object ; try { if ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) == null || org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . isSynchronizedWithTransaction ( ) ) { Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.SessionFactory . openSession ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Session + STRING ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . void ( new SessionHolder ( org.springframework.data.neo4j.transaction.Session ) , true ) ; } Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) ; if ( org.springframework.data.neo4j.transaction.TransactionDefinition . getIsolationLevel ( ) != TransactionDefinition . ISOLATION_DEFAULT ) { throw new InvalidIsolationLevelException ( STRING ) ; } if ( org.springframework.data.neo4j.transaction.TransactionDefinition . getPropagationBehavior ( ) != TransactionDefinition . PROPAGATION_REQUIRED ) { throw new IllegalTransactionStateException ( STRING ) ; } Transaction org.springframework.data.neo4j.transaction.Transaction ; if ( org.springframework.data.neo4j.transaction.TransactionDefinition . isReadOnly ( ) && org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Session . beginTransaction ( Transaction . Type . READ_ONLY ) ; } else { org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Session . beginTransaction ( ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . void ( org.springframework.data.neo4j.transaction.Transaction ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Transaction + STRING + org.springframework.data.neo4j.transaction.Session + STRING ) ; } if ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . bindResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) , org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) ) ; } if ( org.springframework.data.neo4j.transaction.TransactionDefinition . isReadOnly ( ) ) { TransactionSynchronizationManager . setCurrentTransactionReadOnly ( true ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . setSynchronizedWithTransaction ( true ) ; } catch ( TransactionException org.springframework.data.neo4j.transaction.TransactionException ) { void ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) ; throw org.springframework.data.neo4j.transaction.TransactionException ; } catch ( java.lang.Throwable java.lang.Throwable ) { void ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) ; throw new CannotCreateTransactionException ( STRING , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> private void void ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) { if ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) ; try { org.springframework.data.neo4j.transaction.Session . getTransaction ( ) . rollback ( ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . debug ( STRING , java.lang.Throwable ) ; } finally { SessionFactoryUtils . closeSession ( org.springframework.data.neo4j.transaction.Session ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . void ( null , false ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) java.lang.Object ; org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . void ( null , false ) ; SessionHolder org.springframework.data.neo4j.transaction.SessionHolder = ( SessionHolder ) TransactionSynchronizationManager . unbindResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) ) ; return new org.springframework.data.neo4j.transaction.Neo4jTransactionManager.SuspendedResourcesHolder ( org.springframework.data.neo4j.transaction.SessionHolder ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.SuspendedResourcesHolder org.springframework.data.neo4j.transaction.Neo4jTransactionManager.SuspendedResourcesHolder = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.SuspendedResourcesHolder ) java.lang.Object ; if ( TransactionSynchronizationManager . hasResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) ) ) { TransactionSynchronizationManager . unbindResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) ) ; } TransactionSynchronizationManager . bindResource ( org.springframework.data.neo4j.transaction.SessionFactory ( ) , org.springframework.data.neo4j.transaction.Neo4jTransactionManager.SuspendedResourcesHolder . org.springframework.data.neo4j.transaction.SessionHolder ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.neo4j.transaction.DefaultTransactionStatus ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) org.springframework.data.neo4j.transaction.DefaultTransactionStatus . getTransaction ( ) ; Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) ; try ( Transaction org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Session . getTransaction ( ) ) { if ( org.springframework.data.neo4j.transaction.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Transaction + STRING + org.springframework.data.neo4j.transaction.Session + STRING ) ; } if ( org.springframework.data.neo4j.transaction.Transaction != null ) { org.springframework.data.neo4j.transaction.Transaction . commit ( ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( java.lang.RuntimeException ) ; throw ( org.springframework.data.neo4j.transaction.DataAccessException != null ? org.springframework.data.neo4j.transaction.DataAccessException : java.lang.RuntimeException ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.neo4j.transaction.DefaultTransactionStatus ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) org.springframework.data.neo4j.transaction.DefaultTransactionStatus . getTransaction ( ) ; Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) ; try ( Transaction org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Session . getTransaction ( ) ) { if ( org.springframework.data.neo4j.transaction.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Transaction + STRING + org.springframework.data.neo4j.transaction.Session + STRING ) ; } if ( org.springframework.data.neo4j.transaction.Transaction != null ) { org.springframework.data.neo4j.transaction.Transaction . rollback ( ) ; } } catch ( java.lang.RuntimeException java.lang.RuntimeException ) { DataAccessException org.springframework.data.neo4j.transaction.DataAccessException = SessionFactoryUtils . convertOgmAccessException ( java.lang.RuntimeException ) ; throw ( org.springframework.data.neo4j.transaction.DataAccessException != null ? org.springframework.data.neo4j.transaction.DataAccessException : java.lang.RuntimeException ) ; } finally { if ( ! org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { org.springframework.data.neo4j.transaction.Session . clear ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( DefaultTransactionStatus org.springframework.data.neo4j.transaction.DefaultTransactionStatus ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) org.springframework.data.neo4j.transaction.DefaultTransactionStatus . getTransaction ( ) ; if ( org.springframework.data.neo4j.transaction.DefaultTransactionStatus . isDebug ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) + STRING ) ; } org.springframework.data.neo4j.transaction.DefaultTransactionStatus . setRollbackOnly ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object ) { org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject = ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject ) java.lang.Object ; if ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { TransactionSynchronizationManager . unbindResourceIfPossible ( org.springframework.data.neo4j.transaction.SessionFactory ( ) ) ; } Transaction org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.Transaction ( ) ; if ( org.springframework.data.neo4j.transaction.Transaction != null && org.springframework.data.neo4j.transaction.Transaction . status ( ) . equals ( Transaction . Status . OPEN ) ) { org.springframework.data.neo4j.transaction.Transaction . close ( ) ; } if ( org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . boolean ( ) ) { Session org.springframework.data.neo4j.transaction.Session = org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . getSession ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.data.neo4j.transaction.Session + STRING ) ; } SessionFactoryUtils . closeSession ( org.springframework.data.neo4j.transaction.Session ) ; } else { logger . debug ( STRING ) ; } org.springframework.data.neo4j.transaction.Neo4jTransactionManager.Neo4jTransactionObject . org.springframework.data.neo4j.transaction.SessionHolder ( ) . clear ( ) ; }  <METHOD_END>
<METHOD_START> void void ( SessionHolder org.springframework.data.neo4j.transaction.SessionHolder , boolean boolean ) { this . org.springframework.data.neo4j.transaction.SessionHolder = org.springframework.data.neo4j.transaction.SessionHolder ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> org.springframework.data.neo4j.transaction.SessionHolder org.springframework.data.neo4j.transaction.SessionHolder ( ) { return this . org.springframework.data.neo4j.transaction.SessionHolder ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> boolean boolean ( ) { return ( this . org.springframework.data.neo4j.transaction.SessionHolder != null && this . org.springframework.data.neo4j.transaction.SessionHolder . isTransactionActive ( ) ) ; }  <METHOD_END>
<METHOD_START> void void ( Transaction org.springframework.data.neo4j.transaction.Transaction ) { this . org.springframework.data.neo4j.transaction.Transaction = org.springframework.data.neo4j.transaction.Transaction ; this . org.springframework.data.neo4j.transaction.SessionHolder . setTransactionActive ( true ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.neo4j.transaction.Transaction org.springframework.data.neo4j.transaction.Transaction ( ) { return this . org.springframework.data.neo4j.transaction.Transaction ; }  <METHOD_END>
<METHOD_START> private void ( SessionHolder org.springframework.data.neo4j.transaction.SessionHolder ) { this . org.springframework.data.neo4j.transaction.SessionHolder = org.springframework.data.neo4j.transaction.SessionHolder ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.neo4j.transaction.SessionHolder org.springframework.data.neo4j.transaction.SessionHolder ( ) { return this . org.springframework.data.neo4j.transaction.SessionHolder ; }  <METHOD_END>
