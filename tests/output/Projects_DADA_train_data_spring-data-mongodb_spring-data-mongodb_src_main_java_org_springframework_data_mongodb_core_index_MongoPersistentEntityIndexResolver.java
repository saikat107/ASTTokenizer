<METHOD_START> public void ( MongoMappingContext org.springframework.data.mongodb.core.index.MongoMappingContext ) { Assert . notNull ( org.springframework.data.mongodb.core.index.MongoMappingContext , STRING ) ; this . org.springframework.data.mongodb.core.index.MongoMappingContext = org.springframework.data.mongodb.core.index.MongoMappingContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Iterable<? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < ? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.lang.Iterable<? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( TypeInformation < ? > org.springframework.data.mongodb.core.index.TypeInformation<?> ) { return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.index.TypeInformation<> ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( final MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { Assert . notNull ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> , STRING ) ; Document org.springframework.data.mongodb.core.index.Document = org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( Document .class ) . orElseThrow ( ( ) new IllegalArgumentException ( STRING ) ) ; Assert . notNull ( org.springframework.data.mongodb.core.index.Document , STRING ) ; final java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> = new java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > ( ) ; java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( STRING , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.Collection<? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; final org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard = new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ( ) ; org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . doWithProperties ( new PropertyHandler < MongoPersistentProperty > ( ) { @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { try { if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getTypeInformation ( ) . getActualType ( ) , org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ) ; } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) ) ; } } } ) ; java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( STRING , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { try { if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getTypeInformation ( ) . getActualType ( ) , org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ) ; } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( final TypeInformation < ? > org.springframework.data.mongodb.core.index.TypeInformation<?> , final java.lang.String java.lang.String , final java.lang.String java.lang.String , final org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) { MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> = org.springframework.data.mongodb.core.index.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.index.TypeInformation<> ) ; final java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> = new java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > ( ) ; java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . doWithProperties ( new PropertyHandler < MongoPersistentProperty > ( ) { @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard . void ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { try { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getTypeInformation ( ) . getActualType ( ) , java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ) ; } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) ) ; } } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } } } ) ; java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard . void ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { try { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getTypeInformation ( ) . getActualType ( ) , java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ) ; } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) ) ; } } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( Indexed .class ) ) { return org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; } else if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( GeoSpatialIndexed .class ) ) { return org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { if ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( CompoundIndexes .class ) == null && org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( CompoundIndex .class ) == null ) { return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( ) ; } return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < ? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.Collection<? extends org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { java.lang.String java.lang.String = org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getType ( ) . getSimpleName ( ) + STRING ; if ( java.lang.String . byte[] ( ) . int > NUMBER ) { java.lang.String [] java.lang.String[] = ClassUtils . getShortNameAsProperty ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getType ( ) ) . split ( STRING ) ; java.lang.String = STRING ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = java.util.Arrays . java.util.List<java.lang.String> ( java.lang.String[] ) . java.util.Iterator<java.lang.String> ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { if ( ! java.util.Iterator<java.lang.String> . boolean ( ) ) { java.lang.String += java.util.Iterator<java.lang.String> . java.lang.String ( ) + STRING ; } else { java.lang.String += ( java.util.Iterator<java.lang.String> . java.lang.String ( ) . char ( NUMBER ) + STRING ) ; } } } TextIndexDefinitionBuilder org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder = new TextIndexDefinitionBuilder ( ) . named ( java.lang.String ) ; if ( StringUtils . hasText ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getLanguage ( ) ) ) { org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . withDefaultLanguage ( org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getLanguage ( ) ) ; } try { void ( STRING , org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> , new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ) , new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ( ) ) ; } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) ) ; } TextIndexDefinition org.springframework.data.mongodb.core.index.TextIndexDefinition = org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . build ( ) ; if ( ! org.springframework.data.mongodb.core.index.TextIndexDefinition . hasFieldSpec ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( ) ; } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( STRING , org.springframework.data.mongodb.core.index.TextIndexDefinition , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getCollection ( ) ) ; return java.util.Collections . java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; }  <METHOD_END>
<METHOD_START> private void void ( final java.lang.String java.lang.String , final TextIndexDefinitionBuilder org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder , final MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> , final org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions , final org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) { org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . doWithProperties ( new PropertyHandler < MongoPersistentProperty > ( ) { @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard . void ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isExplicitLanguageProperty ( ) && ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . withLanguageOverride ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ) ; } java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> < TextIndexed > java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> = org.springframework.data.mongodb.core.index.MongoPersistentProperty . findAnnotation ( TextIndexed .class ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . boolean ( ) || java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) || org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; java.lang.Float java.lang.Float = java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ? java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . get ( ) . weight ( ) : ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ( ) != null ? org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ( ) . getWeight ( ) : NUMBER ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions ; if ( ! org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ( ) ) && java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions = new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy , new TextIndexedFieldSpec ( java.lang.String , java.lang.Float ) ) ; } try { void ( java.lang.String , org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder , org.springframework.data.mongodb.core.index.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getActualType ( ) ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ; } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) ; } catch ( InvalidDataAccessApiUsageException org.springframework.data.mongodb.core.index.InvalidDataAccessApiUsageException ) { org.springframework.data.mongodb.core.index.Logger . info ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getName ( ) ) , org.springframework.data.mongodb.core.index.InvalidDataAccessApiUsageException ) ; } } else if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . boolean ( ) || java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ) { org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . onField ( java.lang.String , java.lang.Float ) ; } } } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard . void ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isExplicitLanguageProperty ( ) && ! StringUtils . hasText ( java.lang.String ) ) { org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . withLanguageOverride ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ) ; } java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> < TextIndexed > java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> = org.springframework.data.mongodb.core.index.MongoPersistentProperty . findAnnotation ( TextIndexed .class ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . boolean ( ) || java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) || org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; java.lang.Float java.lang.Float = java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ? java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . get ( ) . weight ( ) : ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ( ) != null ? org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ( ) . getWeight ( ) : NUMBER ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions ; if ( ! org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ( ) ) && java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ) { org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions = new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy , new TextIndexedFieldSpec ( java.lang.String , java.lang.Float ) ) ; } try { void ( java.lang.String , org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder , org.springframework.data.mongodb.core.index.MongoMappingContext . getRequiredPersistentEntity ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getActualType ( ) ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard ) ; } catch ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) { org.springframework.data.mongodb.core.index.Logger . info ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException . java.lang.String ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ) ; } catch ( InvalidDataAccessApiUsageException org.springframework.data.mongodb.core.index.InvalidDataAccessApiUsageException ) { org.springframework.data.mongodb.core.index.Logger . info ( java.lang.String . java.lang.String ( STRING , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . getName ( ) ) , org.springframework.data.mongodb.core.index.InvalidDataAccessApiUsageException ) ; } } else if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions . boolean ( ) || java.util.Optional<org.springframework.data.mongodb.core.index.TextIndexed> . isPresent ( ) ) { org.springframework.data.mongodb.core.index.TextIndexDefinitionBuilder . onField ( java.lang.String , java.lang.Float ) ; } } }  <METHOD_END>
<METHOD_START> protected java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> = new java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > ( ) ; java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndexes> < CompoundIndexes > java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndexes> = org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( CompoundIndexes .class ) ; if ( java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndexes> . isPresent ( ) ) { for ( CompoundIndex org.springframework.data.mongodb.core.index.CompoundIndex : java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndexes> . get ( ) . value ( ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.CompoundIndex , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; } } java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndex> < CompoundIndex > java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndex> = org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . findAnnotation ( CompoundIndex .class ) ; if ( java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndex> . isPresent ( ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , java.util.Optional<org.springframework.data.mongodb.core.index.CompoundIndex> . get ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntity<> ) ) ; } return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String java.lang.String , java.lang.String java.lang.String , CompoundIndex org.springframework.data.mongodb.core.index.CompoundIndex , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { CompoundIndexDefinition org.springframework.data.mongodb.core.index.CompoundIndexDefinition = new CompoundIndexDefinition ( org.bson.Document ( java.lang.String , org.springframework.data.mongodb.core.index.CompoundIndex . def ( ) ) ) ; if ( ! org.springframework.data.mongodb.core.index.CompoundIndex . useGeneratedName ( ) ) { org.springframework.data.mongodb.core.index.CompoundIndexDefinition . named ( java.lang.String ( org.springframework.data.mongodb.core.index.CompoundIndex . name ( ) , java.lang.String , null ) ) ; } if ( org.springframework.data.mongodb.core.index.CompoundIndex . unique ( ) ) { org.springframework.data.mongodb.core.index.CompoundIndexDefinition . unique ( ) ; } if ( org.springframework.data.mongodb.core.index.CompoundIndex . sparse ( ) ) { org.springframework.data.mongodb.core.index.CompoundIndexDefinition . sparse ( ) ; } if ( org.springframework.data.mongodb.core.index.CompoundIndex . background ( ) ) { org.springframework.data.mongodb.core.index.CompoundIndexDefinition . background ( ) ; } return new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , org.springframework.data.mongodb.core.index.CompoundIndexDefinition , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private org . org.bson . org.bson.Document org.bson.Document ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { if ( ! StringUtils . hasText ( java.lang.String ) && ! StringUtils . hasText ( java.lang.String ) ) { throw new InvalidDataAccessApiUsageException ( STRING ) ; } if ( ! StringUtils . hasText ( java.lang.String ) ) { return new org . org.bson . org.bson ( java.lang.String , NUMBER ) ; } org . org.bson . org.bson org.bson.Document = org . org.bson . Document . parse ( java.lang.String ) ; if ( ! StringUtils . hasText ( java.lang.String ) ) { return org.bson.Document ; } org . org.bson . org.bson org.bson.Document = new org . org.bson . org.bson ( ) ; for ( java.lang.String java.lang.String : org.bson.Document . keySet ( ) ) { org.bson.Document . put ( java.lang.String + STRING + java.lang.String , org.bson.Document . get ( java.lang.String ) ) ; } return org.bson.Document ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> < Indexed > java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> = org.springframework.data.mongodb.core.index.MongoPersistentProperty . findAnnotation ( Indexed .class ) ; if( ! java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . isPresent ( ) ) { return null ; } Index org.springframework.data.mongodb.core.index.Index = new Index ( ) . on ( java.lang.String , IndexDirection . ASCENDING . equals ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . direction ( ) ) ? Sort . Direction . ASC : Sort . Direction . DESC ) ; if ( ! java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . useGeneratedName ( ) ) { org.springframework.data.mongodb.core.index.Index . named ( java.lang.String ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . name ( ) , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ) ; } if ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . unique ( ) ) { org.springframework.data.mongodb.core.index.Index . unique ( ) ; } if ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . sparse ( ) ) { org.springframework.data.mongodb.core.index.Index . sparse ( ) ; } if ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . background ( ) ) { org.springframework.data.mongodb.core.index.Index . background ( ) ; } if ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . expireAfterSeconds ( ) >= NUMBER ) { org.springframework.data.mongodb.core.index.Index . expire ( java.util.Optional<org.springframework.data.mongodb.core.index.Indexed> . get ( ) . expireAfterSeconds ( ) , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; } return new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , org.springframework.data.mongodb.core.index.Index , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> < GeoSpatialIndexed > java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> = org.springframework.data.mongodb.core.index.MongoPersistentProperty . findAnnotation ( GeoSpatialIndexed .class ) ; if( ! java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . isPresent ( ) ) { return null ; } GeospatialIndex org.springframework.data.mongodb.core.index.GeospatialIndex = new GeospatialIndex ( java.lang.String ) ; org.springframework.data.mongodb.core.index.GeospatialIndex . withBits ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . bits ( ) ) ; org.springframework.data.mongodb.core.index.GeospatialIndex . withMin ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . min ( ) ) . withMax ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . max ( ) ) ; if ( ! java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . useGeneratedName ( ) ) { org.springframework.data.mongodb.core.index.GeospatialIndex . named ( java.lang.String ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . name ( ) , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ) ; } org.springframework.data.mongodb.core.index.GeospatialIndex . typed ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . type ( ) ) . withBucketSize ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . bucketSize ( ) ) . withAdditionalField ( java.util.Optional<org.springframework.data.mongodb.core.index.GeoSpatialIndexed> . get ( ) . additionalField ( ) ) ; return new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , org.springframework.data.mongodb.core.index.GeospatialIndex , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( java.lang.String java.lang.String , java.lang.String java.lang.String , MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { java.lang.String java.lang.String = StringUtils . hasText ( java.lang.String ) ? java.lang.String : STRING ; if ( ! StringUtils . hasText ( java.lang.String ) || ( org.springframework.data.mongodb.core.index.MongoPersistentProperty != null && java.lang.String . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ) ) ) { return StringUtils . hasText ( java.lang.String ) ? java.lang.String : java.lang.String ; } if ( StringUtils . hasText ( java.lang.String ) ) { java.lang.String = StringUtils . hasText ( java.lang.String ) ? ( org.springframework.data.mongodb.core.index.MongoPersistentProperty != null ? java.lang.String . java.lang.String ( STRING + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , STRING ) : java.lang.String ) + STRING + java.lang.String : java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ( final java.lang.String java.lang.String , final java.lang.String java.lang.String , MongoPersistentEntity < ? > org.springframework.data.mongodb.core.index.MongoPersistentEntity<?> ) { final java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> = new java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder > ( NUMBER ) ; org.springframework.data.mongodb.core.index.MongoPersistentEntity<> . doWithAssociations ( new AssociationHandler < MongoPersistentProperty > ( ) { @ java.lang.Override public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.index.Association<org.springframework.data.mongodb.core.index.MongoPersistentProperty> ) { MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty = org.springframework.data.mongodb.core.index.Association<org.springframework.data.mongodb.core.index.MongoPersistentProperty> . getInverse ( ) ; java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( GeoSpatialIndexed .class ) || org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( TextIndexed .class ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } } } ) ; return java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Association < MongoPersistentProperty > org.springframework.data.mongodb.core.index.Association<org.springframework.data.mongodb.core.index.MongoPersistentProperty> ) { MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty = org.springframework.data.mongodb.core.index.Association<org.springframework.data.mongodb.core.index.MongoPersistentProperty> . getInverse ( ) ; java.lang.String java.lang.String = ( StringUtils . hasText ( java.lang.String ) ? java.lang.String + STRING : STRING ) + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( GeoSpatialIndexed .class ) || org.springframework.data.mongodb.core.index.MongoPersistentProperty . isAnnotationPresent ( TextIndexed .class ) ) { throw new MappingException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.String ) ) ; } org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ( java.lang.String , java.lang.String , org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder != null ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder> . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.IndexDefinitionHolder ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { this . java.util.Map<java.lang.String,java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path>> = new java.util.LinkedHashMap<java.lang.String,java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path>> < java.lang.String , java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path > > ( ) ; }  <METHOD_END>
<METHOD_START> void void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String java.lang.String ) throws org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException { java.lang.String java.lang.String = java.lang.String ( org.springframework.data.mongodb.core.index.MongoPersistentProperty ) ; if ( java.util.Map<java.lang.String,java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path>> . boolean ( java.lang.String ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path > java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> = java.util.Map<java.lang.String,java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path>> . java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> ( java.lang.String ) ; for ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path : java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> ) { if ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) && org.springframework.data.mongodb.core.index.MongoPersistentProperty . isEntity ( ) ) { java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> . boolean ( new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ) ; throw new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CyclicPropertyReferenceException ( org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) , org.springframework.data.mongodb.core.index.MongoPersistentProperty . getOwner ( ) . getType ( ) , org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path . java.lang.String ( ) ) ; } } java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> . boolean ( new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ) ; } else { java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path > java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> = new java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> < org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path > ( ) ; java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> . boolean ( new org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path ( org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String ) ) ; java.util.Map<java.lang.String,java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path>> . java.util.List<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> ( java.lang.String , java.util.ArrayList<org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.CycleGuard.Path> ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty ) { return org.springframework.data.mongodb.core.index.MongoPersistentProperty . getOwner ( ) . getType ( ) . getSimpleName ( ) + STRING + org.springframework.data.mongodb.core.index.MongoPersistentProperty . getFieldName ( ) ; }  <METHOD_END>
<METHOD_START> void ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String java.lang.String ) { this . org.springframework.data.mongodb.core.index.MongoPersistentProperty = org.springframework.data.mongodb.core.index.MongoPersistentProperty ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> boolean boolean ( MongoPersistentProperty org.springframework.data.mongodb.core.index.MongoPersistentProperty , java.lang.String java.lang.String ) { if ( ! org.springframework.data.mongodb.core.index.MongoPersistentProperty . getOwner ( ) . equals ( this . org.springframework.data.mongodb.core.index.MongoPersistentProperty . getOwner ( ) ) ) { return false ; } return java.lang.String . boolean ( this . java.lang.String ) || java.lang.String . boolean ( this . java.lang.String + STRING ) || java.lang.String . boolean ( STRING + this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . java.lang.Class<?> = java.lang.Class<> ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Class<> != null ? java.lang.Class<> . java.lang.String ( ) : STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String , IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition , java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; this . org.springframework.data.mongodb.core.index.IndexDefinition = org.springframework.data.mongodb.core.index.IndexDefinition ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.IndexDefinition org.springframework.data.mongodb.core.index.IndexDefinition ( ) { return org.springframework.data.mongodb.core.index.IndexDefinition ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( ) { return org.springframework.data.mongodb.core.index.IndexDefinition . getIndexKeys ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org . org.bson . org.bson.Document org.bson.Document ( ) { return org.springframework.data.mongodb.core.index.IndexDefinition . getIndexOptions ( ) ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy , TextIndexedFieldSpec org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ) { this . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy = org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ; this . org.springframework.data.mongodb.core.index.TextIndexedFieldSpec = org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ; }  <METHOD_END>
<METHOD_START> public void ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ) { this( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy , null ); }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ( ) { return org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.core.index.TextIndexedFieldSpec org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ( ) { return org.springframework.data.mongodb.core.index.TextIndexedFieldSpec ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy . boolean ( org.springframework.data.mongodb.core.index.MongoPersistentEntityIndexResolver.TextIndexIncludeOptions.IncludeStrategy ) ; }  <METHOD_END>
