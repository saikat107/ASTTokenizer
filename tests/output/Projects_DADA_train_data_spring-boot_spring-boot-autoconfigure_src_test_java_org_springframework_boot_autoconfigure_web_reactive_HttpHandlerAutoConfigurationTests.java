<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfigurationTests.CustomHttpHandler .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( HttpHandler .class ) ) . hasSize ( NUMBER ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( HttpHandler .class ) ) . isSameAs ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( WebFluxAnnotationAutoConfiguration .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( HttpHandler .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfigurationTests.FunctionalConfig .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( HttpHandler .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfigurationTests.AnnotationConfigWithWebFilters .class ) ; HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( HttpHandler .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.HttpHandler ) . isInstanceOf ( WebHandler .class ) ; WebHandler org.springframework.boot.autoconfigure.web.reactive.WebHandler = ( WebHandler ) org.springframework.boot.autoconfigure.web.reactive.HttpHandler ; while ( org.springframework.boot.autoconfigure.web.reactive.WebHandler instanceof WebHandlerDecorator ) { if ( org.springframework.boot.autoconfigure.web.reactive.WebHandler instanceof FilteringWebHandler ) { FilteringWebHandler org.springframework.boot.autoconfigure.web.reactive.FilteringWebHandler = ( FilteringWebHandler ) org.springframework.boot.autoconfigure.web.reactive.WebHandler ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.FilteringWebHandler . getFilters ( ) ) . containsExactly ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , WebFilter .class ) , this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , WebFilter .class ) , this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , WebFilter .class ) ) ; return; } org.springframework.boot.autoconfigure.web.reactive.WebHandler = ( ( WebHandlerDecorator ) org.springframework.boot.autoconfigure.web.reactive.WebHandler ) . getDelegate ( ) ; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfigurationTests.FunctionalConfigWithWebFilters .class ) ; assertThat ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBeansOfType ( HttpHandler .class ) . size ( ) ) . isEqualTo ( NUMBER ) ; HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler = this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( HttpHandler .class ) ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.HttpHandler ) . isInstanceOf ( WebHandler .class ) ; WebHandler org.springframework.boot.autoconfigure.web.reactive.WebHandler = ( WebHandler ) org.springframework.boot.autoconfigure.web.reactive.HttpHandler ; while ( org.springframework.boot.autoconfigure.web.reactive.WebHandler instanceof WebHandlerDecorator ) { if ( org.springframework.boot.autoconfigure.web.reactive.WebHandler instanceof FilteringWebHandler ) { FilteringWebHandler org.springframework.boot.autoconfigure.web.reactive.FilteringWebHandler = ( FilteringWebHandler ) org.springframework.boot.autoconfigure.web.reactive.WebHandler ; assertThat ( org.springframework.boot.autoconfigure.web.reactive.FilteringWebHandler . getFilters ( ) ) . containsExactly ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . getBean ( STRING , WebFilter .class ) ) ; return; } org.springframework.boot.autoconfigure.web.reactive.WebHandler = ( ( WebHandlerDecorator ) org.springframework.boot.autoconfigure.web.reactive.WebHandler ) . getDelegate ( ) ; } fail ( STRING ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext = new GenericReactiveWebApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext , java.lang.String[] ) ; if ( this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext != null ) { this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . register ( java.lang.Class<> ) ; } this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . register ( HttpHandlerAutoConfiguration .class ) ; this . org.springframework.boot.autoconfigure.web.reactive.GenericReactiveWebApplicationContext . refresh ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.WebFilter org.springframework.boot.autoconfigure.web.reactive.WebFilter ( ) { return mock ( WebFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( Ordered . LOWEST_PRECEDENCE ) public org.springframework.boot.autoconfigure.web.reactive.WebFilter org.springframework.boot.autoconfigure.web.reactive.WebFilter ( ) { return mock ( WebFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean @ Order ( Ordered . HIGHEST_PRECEDENCE ) public org.springframework.boot.autoconfigure.web.reactive.WebFilter org.springframework.boot.autoconfigure.web.reactive.WebFilter ( ) { return mock ( WebFilter .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> < ServerResponse > org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> ( ) { return RouterFunctions . route ( RequestPredicates . GET ( STRING ) , ( serverRequest ) -> null ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> < ServerResponse > org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> ( ) { return RouterFunctions . route ( RequestPredicates . GET ( STRING ) , ( serverRequest ) -> null ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.WebFilter org.springframework.boot.autoconfigure.web.reactive.WebFilter ( ) { return ( serverWebExchange , webFilterChain ) -> null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.HttpHandler org.springframework.boot.autoconfigure.web.reactive.HttpHandler ( ) { return ( serverHttpRequest , serverHttpResponse ) -> null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> < ServerResponse > org.springframework.boot.autoconfigure.web.reactive.RouterFunction<org.springframework.boot.autoconfigure.web.reactive.ServerResponse> ( ) { return RouterFunctions . route ( RequestPredicates . GET ( STRING ) , ( serverRequest ) -> null ) ; }  <METHOD_END>
