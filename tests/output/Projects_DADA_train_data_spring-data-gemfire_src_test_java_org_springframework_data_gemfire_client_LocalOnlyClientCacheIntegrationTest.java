<METHOD_START> @ Before public void void ( ) { assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getName ( ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getFullPath ( ) , is ( equalTo ( java.lang.String . java.lang.String ( STRING , Region . SEPARATOR ) ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getAttributes ( ) , is ( notNullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getDataPolicy ( ) , is ( equalTo ( DataPolicy . NORMAL ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getKeyConstraint ( ) , is ( equalTo ( java.lang.Long .class ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . getAttributes ( ) . getValueConstraint ( ) , is ( equalTo ( java.lang.String .class ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . put ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . put ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . put ( NUMBER , STRING ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . get ( NUMBER ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . get ( NUMBER ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . get ( NUMBER ) , is ( equalTo ( STRING ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; assertThat ( org.springframework.data.gemfire.client.Region<java.lang.Long,java.lang.String> . get ( NUMBER ) , is ( nullValue ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.client.PropertySourcesPlaceholderConfigurer org.springframework.data.gemfire.client.PropertySourcesPlaceholderConfigurer ( ) { return new PropertySourcesPlaceholderConfigurer ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean java.util.Properties java.util.Properties ( @ Value ( STRING ) java.lang.String java.lang.String ) { java.util.Properties java.util.Properties = new java.util.Properties ( ) ; java.util.Properties . java.lang.Object ( STRING , org.springframework.data.gemfire.client.LocalOnlyClientCacheIntegrationTest .class . java.lang.String ( ) ) ; java.util.Properties . java.lang.Object ( STRING , java.lang.String ) ; return java.util.Properties ; }  <METHOD_END>
<METHOD_START> @ Bean org.springframework.data.gemfire.client.ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean ( @ Qualifier ( STRING ) java.util.Properties java.util.Properties ) { ClientCacheFactoryBean org.springframework.data.gemfire.client.ClientCacheFactoryBean = new ClientCacheFactoryBean ( ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setClose ( true ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setProperties ( java.util.Properties ) ; org.springframework.data.gemfire.client.ClientCacheFactoryBean . setUseBeanFactoryLocator ( false ) ; return org.springframework.data.gemfire.client.ClientCacheFactoryBean ; }  <METHOD_END>
<METHOD_START> @ Bean ( name = STRING ) org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> < java.lang.Long , java.lang.String > org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> ( GemFireCache org.springframework.data.gemfire.client.GemFireCache , RegionAttributes < java.lang.Long , java.lang.String > org.springframework.data.gemfire.client.RegionAttributes<java.lang.Long,java.lang.String> ) { ClientRegionFactoryBean < java.lang.Long , java.lang.String > org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> = new ClientRegionFactoryBean <> ( ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> . setCache ( org.springframework.data.gemfire.client.GemFireCache ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> . setAttributes ( org.springframework.data.gemfire.client.RegionAttributes<java.lang.Long,java.lang.String> ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> . setName ( STRING ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> . setPersistent ( false ) ; org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> . setShortcut ( ClientRegionShortcut . LOCAL ) ; return org.springframework.data.gemfire.client.ClientRegionFactoryBean<java.lang.Long,java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ Bean @ java.lang.SuppressWarnings ( STRING ) org.springframework.data.gemfire.client.RegionAttributesFactoryBean org.springframework.data.gemfire.client.RegionAttributesFactoryBean ( ) { RegionAttributesFactoryBean org.springframework.data.gemfire.client.RegionAttributesFactoryBean = new RegionAttributesFactoryBean ( ) ; org.springframework.data.gemfire.client.RegionAttributesFactoryBean . setKeyConstraint ( java.lang.Long .class ) ; org.springframework.data.gemfire.client.RegionAttributesFactoryBean . setValueConstraint ( java.lang.String .class ) ; return org.springframework.data.gemfire.client.RegionAttributesFactoryBean ; }  <METHOD_END>
