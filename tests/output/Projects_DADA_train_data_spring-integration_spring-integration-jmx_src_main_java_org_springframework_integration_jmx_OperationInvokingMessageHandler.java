<METHOD_START> public void void ( javax.management.MBeanServerConnection javax.management.MBeanServerConnection ) { this . javax.management.MBeanServerConnection = javax.management.MBeanServerConnection ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { try { if ( java.lang.String != null ) { this . javax.management.ObjectName = ObjectNameManager . getInstance ( java.lang.String ) ; } } catch ( javax.management.MalformedObjectNameException javax.management.MalformedObjectNameException ) { throw new java.lang.IllegalArgumentException ( javax.management.MalformedObjectNameException ) ; } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . notNull ( this . javax.management.MBeanServerConnection , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.jmx.Message<?> ) { javax.management.ObjectName javax.management.ObjectName = this . javax.management.ObjectName ( org.springframework.integration.jmx.Message<> ) ; java.lang.String java.lang.String = this . java.lang.String ( org.springframework.integration.jmx.Message<> ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( org.springframework.integration.jmx.Message<> ) ; try { javax.management.MBeanInfo javax.management.MBeanInfo = this . javax.management.MBeanServerConnection . javax.management.MBeanInfo ( javax.management.ObjectName ) ; javax.management.MBeanOperationInfo [] javax.management.MBeanOperationInfo[] = javax.management.MBeanInfo . javax.management.MBeanOperationInfo[] ( ) ; boolean boolean = false ; for ( javax.management.MBeanOperationInfo javax.management.MBeanOperationInfo : javax.management.MBeanOperationInfo[] ) { if ( java.lang.String . boolean ( javax.management.MBeanOperationInfo . java.lang.String ( ) ) ) { javax.management.MBeanParameterInfo [] javax.management.MBeanParameterInfo[] = javax.management.MBeanOperationInfo . javax.management.MBeanParameterInfo[] ( ) ; if ( javax.management.MBeanParameterInfo[] . int == NUMBER ) { boolean = true ; } if ( javax.management.MBeanParameterInfo[] . int == java.util.Map<java.lang.String,java.lang.Object> . int ( ) ) { int int = NUMBER ; java.lang.Object [] java.lang.Object[] = new java.lang.Object [ javax.management.MBeanParameterInfo[] . int ] ; java.lang.String [] java.lang.String[] = new java.lang.String [ javax.management.MBeanParameterInfo[] . int ] ; for ( javax.management.MBeanParameterInfo javax.management.MBeanParameterInfo : javax.management.MBeanParameterInfo[] ) { java.lang.Object java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( javax.management.MBeanParameterInfo . java.lang.String ( ) ) ; if ( java.lang.Object == null ) { java.lang.Object = java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING + ( int + NUMBER ) ) ; } if ( java.lang.Object != null && boolean ( java.lang.Object , javax.management.MBeanParameterInfo ) ) { java.lang.Object[] [ int ] = java.lang.Object ; java.lang.String[] [ int ] = javax.management.MBeanParameterInfo . java.lang.String ( ) ; int ++ ; } } if ( int == javax.management.MBeanParameterInfo[] . int ) { return this . javax.management.MBeanServerConnection . java.lang.Object ( javax.management.ObjectName , java.lang.String , java.lang.Object[] , java.lang.String[] ) ; } } } } if ( boolean ) { return this . javax.management.MBeanServerConnection . java.lang.Object ( javax.management.ObjectName , java.lang.String , null , null ) ; } throw new MessagingException ( org.springframework.integration.jmx.Message<> , STRING + java.lang.String + STRING + javax.management.ObjectName + STRING + javax.management.MBeanInfo . java.lang.String ( ) + STRING + java.util.Map<java.lang.String,java.lang.Object> . int ( ) + STRING + java.util.Map<java.lang.String,java.lang.Object> ) ; } catch ( javax.management.JMException javax.management.JMException ) { throw new MessageHandlingException ( org.springframework.integration.jmx.Message<> , STRING + java.lang.String + STRING + javax.management.ObjectName + STRING + STRING + java.util.Map<java.lang.String,java.lang.Object> . int ( ) + STRING + java.util.Map<java.lang.String,java.lang.Object> , javax.management.JMException ) ; } catch ( java.io.IOException java.io.IOException ) { throw new MessageHandlingException ( org.springframework.integration.jmx.Message<> , STRING , java.io.IOException ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.lang.Object java.lang.Object , javax.management.MBeanParameterInfo javax.management.MBeanParameterInfo ) { java.lang.Class<? extends java.lang.Object> < ? extends java.lang.Object > java.lang.Class<? extends java.lang.Object> = java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; if ( java.lang.Class<> . java.lang.String ( ) . boolean ( javax.management.MBeanParameterInfo . java.lang.String ( ) ) ) { return true ; } else { java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolvePrimitiveType ( java.lang.Class<> ) ; return java.lang.Class<> != null && java.lang.Class<> . java.lang.String ( ) . boolean ( javax.management.MBeanParameterInfo . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( Message < ? > org.springframework.integration.jmx.Message<?> ) { javax.management.ObjectName javax.management.ObjectName = this . javax.management.ObjectName ; if ( javax.management.ObjectName == null ) { java.lang.Object java.lang.Object = org.springframework.integration.jmx.Message<> . getHeaders ( ) . get ( JmxHeaders . OBJECT_NAME ) ; if ( java.lang.Object instanceof javax.management.ObjectName ) { javax.management.ObjectName = ( javax.management.ObjectName ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { try { javax.management.ObjectName = ObjectNameManager . getInstance ( java.lang.Object ) ; } catch ( javax.management.MalformedObjectNameException javax.management.MalformedObjectNameException ) { throw new java.lang.IllegalArgumentException ( javax.management.MalformedObjectNameException ) ; } } } Assert . notNull ( javax.management.ObjectName , STRING ) ; return javax.management.ObjectName ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Message < ? > org.springframework.integration.jmx.Message<?> ) { java.lang.String java.lang.String = this . java.lang.String ; if ( java.lang.String == null ) { java.lang.String = org.springframework.integration.jmx.Message<> . getHeaders ( ) . get ( JmxHeaders . OPERATION_NAME , java.lang.String .class ) ; } Assert . notNull ( java.lang.String , STRING ) ; return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING , STRING } ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( Message < ? > org.springframework.integration.jmx.Message<?> ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = null ; if ( org.springframework.integration.jmx.Message<> . getPayload ( ) instanceof java.util.Map ) { java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) org.springframework.integration.jmx.Message<> . getPayload ( ) ; } else if ( org.springframework.integration.jmx.Message<> . getPayload ( ) instanceof java.util.List ) { java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( ( java.util.List ) org.springframework.integration.jmx.Message<> . getPayload ( ) ) ; } else if ( org.springframework.integration.jmx.Message<> . getPayload ( ) != null && org.springframework.integration.jmx.Message<> . getPayload ( ) . getClass ( ) . isArray ( ) ) { java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( org.springframework.integration.jmx.Message<> . getPayload ( ) ) ) ) ; } else if ( org.springframework.integration.jmx.Message<> . getPayload ( ) != null ) { java.util.Map<java.lang.String,java.lang.Object> = this . java.util.Map<java.lang.String,java.lang.Object> ( java.util.Collections . java.util.List ( org.springframework.integration.jmx.Message<> . getPayload ( ) ) ) ; } else { java.util.Map<java.lang.String,java.lang.Object> = java.util.Collections . java.util.Map ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) private java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ( java.util.List java.util.List ) { java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = new java.util.HashMap<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ( ) ; for ( int int = NUMBER ; int < java.util.List . int ( ) ; int ++ ) { java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING + ( int + NUMBER ) , java.util.List . java.lang.Object ( int ) ) ; } return java.util.Map<java.lang.String,java.lang.Object> ; }  <METHOD_END>
