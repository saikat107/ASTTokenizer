<METHOD_START> public void ( ) { super( new MediaType ( STRING , STRING ) , MediaType . ALL ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return byte [] .class == java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( java.lang.Class<? extends byte[]> < ? extends byte [] > java.lang.Class<? extends byte[]> , HttpInputMessage org.springframework.http.converter.HttpInputMessage ) throws java.io.IOException { long long = org.springframework.http.converter.HttpInputMessage . getHeaders ( ) . getContentLength ( ) ; java.io.ByteArrayOutputStream java.io.ByteArrayOutputStream = new java.io.ByteArrayOutputStream ( long >= NUMBER ? ( int ) long : StreamUtils . BUFFER_SIZE ) ; StreamUtils . copy ( org.springframework.http.converter.HttpInputMessage . getBody ( ) , java.io.ByteArrayOutputStream ) ; return java.io.ByteArrayOutputStream . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Long java.lang.Long ( byte [] byte[] , MediaType org.springframework.http.converter.MediaType ) { return ( long ) byte[] . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( byte [] byte[] , HttpOutputMessage org.springframework.http.converter.HttpOutputMessage ) throws java.io.IOException { StreamUtils . copy ( byte[] , org.springframework.http.converter.HttpOutputMessage . getBody ( ) ) ; }  <METHOD_END>
