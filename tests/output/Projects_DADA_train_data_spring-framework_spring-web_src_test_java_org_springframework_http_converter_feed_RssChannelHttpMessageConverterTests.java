<METHOD_START> @ Before public void void ( ) { org.springframework.http.converter.feed.RssChannelHttpMessageConverter = new RssChannelHttpMessageConverter ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.feed.RssChannelHttpMessageConverter . canRead ( Channel .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.feed.RssChannelHttpMessageConverter . canRead ( Channel .class , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertTrue ( org.springframework.http.converter.feed.RssChannelHttpMessageConverter . canWrite ( Channel .class , new MediaType ( STRING , STRING ) ) ) ; assertTrue ( org.springframework.http.converter.feed.RssChannelHttpMessageConverter . canWrite ( Channel .class , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { java.io.InputStream java.io.InputStream = java.lang.Class<? extends org.springframework.http.converter.feed.RssChannelHttpMessageConverterTests> ( ) . java.io.InputStream ( STRING ) ; MockHttpInputMessage org.springframework.http.converter.feed.MockHttpInputMessage = new MockHttpInputMessage ( java.io.InputStream ) ; org.springframework.http.converter.feed.MockHttpInputMessage . getHeaders ( ) . setContentType ( new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ) ; Channel org.springframework.http.converter.feed.Channel = org.springframework.http.converter.feed.RssChannelHttpMessageConverter . read ( Channel .class , org.springframework.http.converter.feed.MockHttpInputMessage ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Channel . getTitle ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Channel . getLink ( ) ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Channel . getDescription ( ) ) ; java.util.List<?> < ? > java.util.List<?> = org.springframework.http.converter.feed.Channel . getItems ( ) ; assertEquals ( NUMBER , java.util.List<> . int ( ) ) ; Item org.springframework.http.converter.feed.Item = ( Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Item . getTitle ( ) ) ; Item org.springframework.http.converter.feed.Item = ( Item ) java.util.List<> . get ( NUMBER ) ; assertEquals ( STRING , org.springframework.http.converter.feed.Item . getTitle ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.xml.sax.SAXException { Channel org.springframework.http.converter.feed.Channel = new Channel ( STRING ) ; org.springframework.http.converter.feed.Channel . setTitle ( STRING ) ; org.springframework.http.converter.feed.Channel . setLink ( STRING ) ; org.springframework.http.converter.feed.Channel . setDescription ( STRING ) ; Item org.springframework.http.converter.feed.Item = new Item ( ) ; org.springframework.http.converter.feed.Item . setTitle ( STRING ) ; Item org.springframework.http.converter.feed.Item = new Item ( ) ; org.springframework.http.converter.feed.Item . setTitle ( STRING ) ; java.util.List<org.springframework.http.converter.feed.Item> < Item > java.util.List<org.springframework.http.converter.feed.Item> = new java.util.ArrayList<org.springframework.http.converter.feed.Item> <> ( NUMBER ) ; java.util.List<org.springframework.http.converter.feed.Item> . add ( org.springframework.http.converter.feed.Item ) ; java.util.List<org.springframework.http.converter.feed.Item> . add ( org.springframework.http.converter.feed.Item ) ; org.springframework.http.converter.feed.Channel . setItems ( java.util.List<org.springframework.http.converter.feed.Item> ) ; MockHttpOutputMessage org.springframework.http.converter.feed.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.feed.RssChannelHttpMessageConverter . write ( org.springframework.http.converter.feed.Channel , null , org.springframework.http.converter.feed.MockHttpOutputMessage ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.feed.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; java.lang.String java.lang.String = STRING + STRING + STRING + STRING + STRING ; assertThat ( org.springframework.http.converter.feed.MockHttpOutputMessage . getBodyAsString ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) , org.springframework.http.converter.feed.CompareMatcher ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException , org.xml.sax.SAXException { Channel org.springframework.http.converter.feed.Channel = new Channel ( STRING ) ; org.springframework.http.converter.feed.Channel . setTitle ( STRING ) ; org.springframework.http.converter.feed.Channel . setLink ( STRING ) ; org.springframework.http.converter.feed.Channel . setDescription ( STRING ) ; java.lang.String java.lang.String = STRING ; org.springframework.http.converter.feed.Channel . setEncoding ( java.lang.String ) ; Item org.springframework.http.converter.feed.Item = new Item ( ) ; org.springframework.http.converter.feed.Item . setTitle ( STRING ) ; MockHttpOutputMessage org.springframework.http.converter.feed.MockHttpOutputMessage = new MockHttpOutputMessage ( ) ; org.springframework.http.converter.feed.RssChannelHttpMessageConverter . write ( org.springframework.http.converter.feed.Channel , null , org.springframework.http.converter.feed.MockHttpOutputMessage ) ; assertEquals ( STRING , new MediaType ( STRING , STRING , java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ) , org.springframework.http.converter.feed.MockHttpOutputMessage . getHeaders ( ) . getContentType ( ) ) ; }  <METHOD_END>
<METHOD_START> private static org.springframework.http.converter.feed.CompareMatcher org.springframework.http.converter.feed.CompareMatcher ( final java.lang.String java.lang.String ) { return CompareMatcher . isSimilarTo ( java.lang.String ) . ignoreWhitespace ( ) ; }  <METHOD_END>
