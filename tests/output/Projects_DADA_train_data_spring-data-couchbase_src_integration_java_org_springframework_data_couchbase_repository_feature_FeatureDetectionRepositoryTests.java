<METHOD_START> @ Before public void void ( ) { Assume . assumeTrue ( org.springframework.data.couchbase.repository.feature.ClusterInfo . getMinVersion ( ) == Version . NO_VERSION ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.feature.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.feature.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.feature.IndexManager ) ; try { org.springframework.data.couchbase.repository.feature.RepositoryFactorySupport . getRepository ( UserRepository .class ) ; fail ( STRING ) ; } catch ( UnsupportedCouchbaseFeatureException org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException ) { assertEquals ( CouchbaseFeature . N1QL , org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException . getFeature ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { RepositoryFactorySupport org.springframework.data.couchbase.repository.feature.RepositoryFactorySupport = new CouchbaseRepositoryFactory ( org.springframework.data.couchbase.repository.feature.RepositoryOperationsMapping , org.springframework.data.couchbase.repository.feature.IndexManager ) ; ViewOnlyUserRepository org.springframework.data.couchbase.repository.feature.ViewOnlyUserRepository = org.springframework.data.couchbase.repository.feature.RepositoryFactorySupport . getRepository ( ViewOnlyUserRepository .class ) ; assertNotNull ( org.springframework.data.couchbase.repository.feature.ViewOnlyUserRepository ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final CouchbaseOperations org.springframework.data.couchbase.repository.feature.CouchbaseOperations = org.springframework.data.couchbase.repository.feature.RepositoryOperationsMapping . getDefault ( ) ; N1qlQuery org.springframework.data.couchbase.repository.feature.N1qlQuery = N1qlQuery . simple ( STRING + org.springframework.data.couchbase.repository.feature.CouchbaseOperations . getCouchbaseBucket ( ) . name ( ) + STRING ) ; try { org.springframework.data.couchbase.repository.feature.CouchbaseOperations . findByN1QL ( org.springframework.data.couchbase.repository.feature.N1qlQuery , User .class ) ; fail ( STRING ) ; } catch ( UnsupportedCouchbaseFeatureException org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException ) { assertEquals ( CouchbaseFeature . N1QL , org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException . getFeature ( ) ) ; } try { org.springframework.data.couchbase.repository.feature.CouchbaseOperations . findByN1QLProjection ( org.springframework.data.couchbase.repository.feature.N1qlQuery , User .class ) ; fail ( STRING ) ; } catch ( UnsupportedCouchbaseFeatureException org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException ) { assertEquals ( CouchbaseFeature . N1QL , org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException . getFeature ( ) ) ; } try { org.springframework.data.couchbase.repository.feature.CouchbaseOperations . queryN1QL ( org.springframework.data.couchbase.repository.feature.N1qlQuery ) ; fail ( STRING ) ; } catch ( UnsupportedCouchbaseFeatureException org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException ) { assertEquals ( CouchbaseFeature . N1QL , org.springframework.data.couchbase.repository.feature.UnsupportedCouchbaseFeatureException . getFeature ( ) ) ; } }  <METHOD_END>
