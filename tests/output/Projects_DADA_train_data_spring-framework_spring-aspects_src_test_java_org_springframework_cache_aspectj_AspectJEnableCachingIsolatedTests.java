<METHOD_START> private void void ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { this . org.springframework.cache.aspectj.ConfigurableApplicationContext = new AnnotationConfigApplicationContext ( java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext != null ) { this . org.springframework.cache.aspectj.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.EnableCachingConfig .class ) ; AnnotationCacheAspect org.springframework.cache.aspectj.AnnotationCacheAspect = this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( AnnotationCacheAspect .class ) ; assertSame ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( STRING , KeyGenerator .class ) , org.springframework.cache.aspectj.AnnotationCacheAspect . getKeyGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.EnableCachingConfig .class ) ; AnnotationCacheAspect org.springframework.cache.aspectj.AnnotationCacheAspect = this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( AnnotationCacheAspect .class ) ; assertSame ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( STRING , CacheErrorHandler .class ) , org.springframework.cache.aspectj.AnnotationCacheAspect . getErrorHandler ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.SingleCacheManagerConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.MultiCacheManagerConfig .class ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.MultiCacheManagerConfigurer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.MultiCacheManagerConfigurer .class , org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.EnableCachingConfig .class ) ; } catch ( BeanCreationException org.springframework.cache.aspectj.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.cache.aspectj.BeanCreationException . getRootCause ( ) ; assertTrue ( java.lang.Throwable instanceof java.lang.IllegalStateException ) ; assertTrue ( org.springframework.cache.aspectj.BeanCreationException . getMessage ( ) . contains ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { try { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.EmptyConfig .class ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { assertTrue ( java.lang.IllegalStateException . java.lang.String ( ) . boolean ( STRING ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test @ Ignore ( STRING ) public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.EmptyConfigSupportConfig .class ) ; AnnotationCacheAspect org.springframework.cache.aspectj.AnnotationCacheAspect = this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( AnnotationCacheAspect .class ) ; assertNotNull ( org.springframework.cache.aspectj.AnnotationCacheAspect . getCacheResolver ( ) ) ; assertEquals ( SimpleCacheResolver .class , org.springframework.cache.aspectj.AnnotationCacheAspect . getCacheResolver ( ) . getClass ( ) ) ; assertSame ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( CacheManager .class ) , ( ( SimpleCacheResolver ) org.springframework.cache.aspectj.AnnotationCacheAspect . getCacheResolver ( ) ) . getCacheManager ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.cache.aspectj.AspectJEnableCachingIsolatedTests.FullCachingConfig .class ) ; AnnotationCacheAspect org.springframework.cache.aspectj.AnnotationCacheAspect = this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( AnnotationCacheAspect .class ) ; assertSame ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.aspectj.AnnotationCacheAspect . getCacheResolver ( ) ) ; assertSame ( this . org.springframework.cache.aspectj.ConfigurableApplicationContext . getBean ( STRING ) , org.springframework.cache.aspectj.AnnotationCacheAspect . getKeyGenerator ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheableService<?> < ? > org.springframework.cache.aspectj.CacheableService<?> ( ) { return new DefaultCacheableService ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheableService<?> < ? > org.springframework.cache.aspectj.CacheableService<?> ( ) { return new AnnotatedClassCacheableService ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.KeyGenerator org.springframework.cache.aspectj.KeyGenerator ( ) { return new SomeKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.CacheErrorHandler org.springframework.cache.aspectj.CacheErrorHandler ( ) { return new SimpleCacheErrorHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.KeyGenerator org.springframework.cache.aspectj.KeyGenerator ( ) { return new SomeCustomKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return CacheTestUtils . createSimpleCacheManager ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return org.springframework.cache.aspectj.CacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.cache.aspectj.KeyGenerator org.springframework.cache.aspectj.KeyGenerator ( ) { return null ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { return new NoOpCacheManager ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.KeyGenerator org.springframework.cache.aspectj.KeyGenerator ( ) { return new SomeKeyGenerator ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override @ Bean public org.springframework.cache.aspectj.CacheResolver org.springframework.cache.aspectj.CacheResolver ( ) { return new NamedCacheResolver ( org.springframework.cache.aspectj.CacheManager ( ) , STRING ) ; }  <METHOD_END>
