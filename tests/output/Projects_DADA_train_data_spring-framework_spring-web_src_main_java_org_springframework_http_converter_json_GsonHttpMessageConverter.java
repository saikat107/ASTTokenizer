<METHOD_START> public void ( ) { this( new Gson ( ) ); }  <METHOD_END>
<METHOD_START> public void ( Gson org.springframework.http.converter.json.Gson ) { void ( org.springframework.http.converter.json.Gson ) ; }  <METHOD_END>
<METHOD_START> public void void ( Gson org.springframework.http.converter.json.Gson ) { Assert . notNull ( org.springframework.http.converter.json.Gson , STRING ) ; this . org.springframework.http.converter.json.Gson = org.springframework.http.converter.json.Gson ; }  <METHOD_END>
<METHOD_START> public org.springframework.http.converter.json.Gson org.springframework.http.converter.json.Gson ( ) { return this . org.springframework.http.converter.json.Gson ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( java.lang.reflect.Type java.lang.reflect.Type , java.io.Reader java.io.Reader ) throws java.lang.Exception { return org.springframework.http.converter.json.Gson ( ) . fromJson ( java.io.Reader , java.lang.reflect.Type ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.Object java.lang.Object , java.lang.reflect.Type java.lang.reflect.Type , java.io.Writer java.io.Writer ) throws java.lang.Exception { if ( java.lang.reflect.Type != null ) { org.springframework.http.converter.json.Gson ( ) . toJson ( java.lang.Object , java.lang.reflect.Type , java.io.Writer ) ; } else { org.springframework.http.converter.json.Gson ( ) . toJson ( java.lang.Object , java.io.Writer ) ; } }  <METHOD_END>
