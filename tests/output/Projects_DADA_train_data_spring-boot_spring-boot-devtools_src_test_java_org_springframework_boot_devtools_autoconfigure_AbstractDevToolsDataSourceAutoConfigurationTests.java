<METHOD_START> @ Test public void void ( ) java.sql.SQLException { ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourcePropertiesConfiguration .class , org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.SingleDataSourceConfiguration .class ) ; javax.sql.DataSource javax.sql.DataSource = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBean ( javax.sql.DataSource .class ) ; java.sql.Statement java.sql.Statement = java.sql.Statement ( javax.sql.DataSource ) ; verify ( java.sql.Statement , times ( NUMBER ) ) . execute ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourcePropertiesConfiguration .class , org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.MultipleDataSourcesConfiguration .class ) ; java.util.Collection<javax.sql.DataSource> < javax.sql.DataSource > java.util.Collection<javax.sql.DataSource> = org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext . getBeansOfType ( javax.sql.DataSource .class ) . values ( ) ; for ( javax.sql.DataSource javax.sql.DataSource : java.util.Collection<javax.sql.DataSource> ) { java.sql.Statement java.sql.Statement = java.sql.Statement ( javax.sql.DataSource ) ; verify ( java.sql.Statement , times ( NUMBER ) ) . execute ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { AnnotationConfigApplicationContext org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; javax.sql.DataSource javax.sql.DataSource = mock ( javax.sql.DataSource .class ) ; AnnotatedGenericBeanDefinition org.springframework.boot.devtools.autoconfigure.AnnotatedGenericBeanDefinition = new AnnotatedGenericBeanDefinition ( javax.sql.DataSource . java.lang.Class<? extends javax.sql.DataSource> ( ) ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . registerBeanDefinition ( STRING , org.springframework.boot.devtools.autoconfigure.AnnotatedGenericBeanDefinition ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . register ( org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourcePropertiesConfiguration .class ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . register ( DevToolsDataSourceAutoConfiguration .class ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . close ( ) ; }  <METHOD_END>
<METHOD_START> protected final java.sql.Statement java.sql.Statement ( javax.sql.DataSource javax.sql.DataSource )			throws java.sql.SQLException { java.sql.Connection java.sql.Connection = mock ( java.sql.Connection .class ) ; java.sql.Statement java.sql.Statement = mock ( java.sql.Statement .class ) ; doReturn ( java.sql.Connection ) . when ( javax.sql.DataSource ) . getConnection ( ) ; given ( java.sql.Connection . java.sql.Statement ( ) ) . willReturn ( java.sql.Statement ) ; return java.sql.Statement ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( null , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { return this . org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.String , null , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext org.springframework.boot.devtools.autoconfigure.ConfigurableApplicationContext ( java.lang.String java.lang.String , java.lang.String java.lang.String , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { AnnotationConfigApplicationContext org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . register ( java.lang.Class<?>[] ) ; org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . register ( DevToolsDataSourceAutoConfiguration .class ) ; if ( java.lang.String != null ) { EnvironmentTestUtils . addEnvironment ( org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext , STRING + java.lang.String ) ; } if ( java.lang.String != null ) { EnvironmentTestUtils . addEnvironment ( org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext , STRING + java.lang.String ) ; } org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.devtools.autoconfigure.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return mock ( javax.sql.DataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return mock ( javax.sql.DataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public javax.sql.DataSource javax.sql.DataSource ( ) { return mock ( javax.sql.DataSource .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourceSpyBeanPostProcessor org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourceSpyBeanPostProcessor ( ) { return new org.springframework.boot.devtools.autoconfigure.AbstractDevToolsDataSourceAutoConfigurationTests.DataSourceSpyBeanPostProcessor ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )				throws org.springframework.boot.devtools.autoconfigure.BeansException { if ( java.lang.Object instanceof javax.sql.DataSource ) { java.lang.Object = spy ( java.lang.Object ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String )				throws org.springframework.boot.devtools.autoconfigure.BeansException { return java.lang.Object ; }  <METHOD_END>
