<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.test.json.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.test.json.ExpectedException . expectMessage ( STRING ) ; new ObjectContent < ExampleObject > ( org.springframework.boot.test.json.ResolvableType , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectContent < ExampleObject > org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> = new ObjectContent <> ( null , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectContent < ExampleObject > org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> = new ObjectContent <> ( org.springframework.boot.test.json.ResolvableType , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> . assertThat ( ) ) . isInstanceOf ( ObjectContentAssert .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectContent < ExampleObject > org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> = new ObjectContent <> ( org.springframework.boot.test.json.ResolvableType , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> . getObject ( ) ) . isEqualTo ( org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectContent < ExampleObject > org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> = new ObjectContent <> ( org.springframework.boot.test.json.ResolvableType , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> . toString ( ) ) . isEqualTo ( STRING + org.springframework.boot.test.json.ExampleObject + STRING + org.springframework.boot.test.json.ResolvableType ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ObjectContent < ExampleObject > org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> = new ObjectContent <> ( null , org.springframework.boot.test.json.ExampleObject ) ; assertThat ( org.springframework.boot.test.json.ObjectContent<org.springframework.boot.test.json.ExampleObject> . toString ( ) ) . isEqualTo ( STRING + org.springframework.boot.test.json.ExampleObject ) ; }  <METHOD_END>
