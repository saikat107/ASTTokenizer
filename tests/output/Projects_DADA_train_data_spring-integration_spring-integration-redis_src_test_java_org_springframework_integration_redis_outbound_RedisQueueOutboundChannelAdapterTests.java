<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final RedisQueueOutboundChannelAdapter org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter = new RedisQueueOutboundChannelAdapter ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = new StringRedisTemplate ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.String , java.lang.Object ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( MessageBuilder . withPayload ( java.util.Date ) . build ( ) ) ; RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.util.Date , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final RedisQueueOutboundChannelAdapter org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter = new RedisQueueOutboundChannelAdapter ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . setExtractPayload ( false ) ; Message < java.lang.String > org.springframework.integration.redis.outbound.Message<java.lang.String> = MessageBuilder . withPayload ( STRING ) . build ( ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( org.springframework.integration.redis.outbound.Message<java.lang.String> ) ; RedisTemplate < java.lang.String , java.lang.Object > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.Object> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( org.springframework.integration.redis.outbound.Message<java.lang.String> , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final RedisQueueOutboundChannelAdapter org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter = new RedisQueueOutboundChannelAdapter ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . setSerializer ( new Jackson2JsonRedisSerializer < java.lang.Object > ( java.lang.Object .class ) ) ; RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = new StringRedisTemplate ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( new GenericMessage < java.lang.Object > ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING , STRING ) ) ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( new GenericMessage < java.lang.Object > ( STRING ) ) ; java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( STRING , java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; GenericMessage < java.lang.Object > org.springframework.integration.redis.outbound.GenericMessage<java.lang.Object> = new GenericMessage < java.lang.Object > ( java.lang.String ) ; this . org.springframework.integration.redis.outbound.MessageChannel . send ( org.springframework.integration.redis.outbound.GenericMessage<java.lang.Object> ) ; RedisTemplate < java.lang.String , java.lang.String > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.String> = new StringRedisTemplate ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.String> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.String> . afterPropertiesSet ( ) ; java.lang.String java.lang.String = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,java.lang.String> . boundListOps ( java.lang.String ) . rightPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.String ) ; InboundMessageMapper < java.lang.String > org.springframework.integration.redis.outbound.InboundMessageMapper<java.lang.String> = new JsonInboundMessageMapper ( java.lang.String .class , new Jackson2JsonMessageParser ( ) ) ; Message < ? > org.springframework.integration.redis.outbound.Message<?> = org.springframework.integration.redis.outbound.InboundMessageMapper<java.lang.String> . toMessage ( java.lang.String ) ; assertEquals ( org.springframework.integration.redis.outbound.GenericMessage<java.lang.Object> . getPayload ( ) , org.springframework.integration.redis.outbound.Message<> . getPayload ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ RedisAvailable public void void ( ) java.lang.Exception { final java.lang.String java.lang.String = STRING ; final RedisQueueOutboundChannelAdapter org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter = new RedisQueueOutboundChannelAdapter ( java.lang.String , this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . setLeftPush ( false ) ; java.lang.String java.lang.String = STRING ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( MessageBuilder . withPayload ( java.lang.String ) . build ( ) ) ; java.util.Date java.util.Date = new java.util.Date ( ) ; org.springframework.integration.redis.outbound.RedisQueueOutboundChannelAdapter . handleMessage ( MessageBuilder . withPayload ( java.util.Date ) . build ( ) ) ; RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = new StringRedisTemplate ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . leftPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.lang.String , java.lang.Object ) ; RedisTemplate < java.lang.String , ? > org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,?> = new RedisTemplate < java.lang.String , java.lang.Object > ( ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setConnectionFactory ( this . org.springframework.integration.redis.outbound.RedisConnectionFactory ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setEnableDefaultSerializer ( false ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setKeySerializer ( new StringRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . setValueSerializer ( new JdkSerializationRedisSerializer ( ) ) ; org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . afterPropertiesSet ( ) ; java.lang.Object java.lang.Object = org.springframework.integration.redis.outbound.RedisTemplate<java.lang.String,> . boundListOps ( java.lang.String ) . leftPop ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ; assertNotNull ( java.lang.Object ) ; assertEquals ( java.util.Date , java.lang.Object ) ; }  <METHOD_END>
