<METHOD_START> @ Before public void void ( ) { this . org.springframework.web.reactive.resource.Cache = new ConcurrentMapCache ( STRING ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> < ResourceResolver > java.util.List<org.springframework.web.reactive.resource.ResourceResolver> = new java.util.ArrayList<org.springframework.web.reactive.resource.ResourceResolver> <> ( ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new CachingResourceResolver ( this . org.springframework.web.reactive.resource.Cache ) ) ; java.util.List<org.springframework.web.reactive.resource.ResourceResolver> . add ( new PathResourceResolver ( ) ) ; this . org.springframework.web.reactive.resource.ResourceResolverChain = new DefaultResourceResolverChain ( java.util.List<org.springframework.web.reactive.resource.ResourceResolver> ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> = new java.util.ArrayList <> ( ) ; this . java.util.List<org.springframework.web.reactive.resource.Resource> . add ( new ClassPathResource ( STRING , java.lang.Class<? extends org.springframework.web.reactive.resource.CachingResourceResolverTests> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; Resource org.springframework.web.reactive.resource.Resource = new ClassPathResource ( STRING + java.lang.String , java.lang.Class<? extends org.springframework.web.reactive.resource.CachingResourceResolverTests> ( ) ) ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; assertEquals ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Resource org.springframework.web.reactive.resource.Resource = Mockito . mock ( Resource .class ) ; this . org.springframework.web.reactive.resource.Cache . put ( CachingResourceResolver . RESOLVED_RESOURCE_CACHE_KEY_PREFIX + STRING , org.springframework.web.reactive.resource.Resource ) ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; assertSame ( org.springframework.web.reactive.resource.Resource , org.springframework.web.reactive.resource.Resource ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( STRING ) . toExchange ( ) ; assertNull ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; this . org.springframework.web.reactive.resource.Cache . put ( CachingResourceResolver . RESOLVED_URL_PATH_CACHE_KEY_PREFIX + STRING , java.lang.String ) ; java.lang.String java.lang.String = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; assertEquals ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { assertNull ( this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveUrlPath ( STRING , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( java.lang.String ) . header ( STRING , STRING ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = CachingResourceResolver . RESOLVED_RESOURCE_CACHE_KEY_PREFIX + java.lang.String + STRING ; assertEquals ( org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.Cache . get ( java.lang.String ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( java.lang.String ) . toExchange ( ) ; Resource org.springframework.web.reactive.resource.Resource = this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ; java.lang.String java.lang.String = CachingResourceResolver . RESOLVED_RESOURCE_CACHE_KEY_PREFIX + java.lang.String ; assertEquals ( org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.Cache . get ( java.lang.String ) . get ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Resource org.springframework.web.reactive.resource.Resource = Mockito . mock ( Resource .class ) ; Resource org.springframework.web.reactive.resource.Resource = Mockito . mock ( Resource .class ) ; this . org.springframework.web.reactive.resource.Cache . put ( CachingResourceResolver . RESOLVED_RESOURCE_CACHE_KEY_PREFIX + STRING , org.springframework.web.reactive.resource.Resource ) ; this . org.springframework.web.reactive.resource.Cache . put ( CachingResourceResolver . RESOLVED_RESOURCE_CACHE_KEY_PREFIX + STRING , org.springframework.web.reactive.resource.Resource ) ; java.lang.String java.lang.String = STRING ; MockServerWebExchange org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( java.lang.String ) . toExchange ( ) ; assertSame ( org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ) ; org.springframework.web.reactive.resource.MockServerWebExchange = MockServerHttpRequest . get ( java.lang.String ) . header ( STRING , STRING ) . toExchange ( ) ; assertSame ( org.springframework.web.reactive.resource.Resource , this . org.springframework.web.reactive.resource.ResourceResolverChain . resolveResource ( org.springframework.web.reactive.resource.MockServerWebExchange , java.lang.String , this . java.util.List<org.springframework.web.reactive.resource.Resource> ) . block ( java.time.Duration ) ) ; }  <METHOD_END>
