<METHOD_START> @ Before public void void ( ) { this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate = new org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receive ( ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalStateException .class ) public void void ( ) { this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receive ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; Message < ? > org.springframework.messaging.core.Message<?> = this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receive ( STRING ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.Message<> ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receiveAndConvert ( java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; java.lang.String java.lang.String = this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receiveAndConvert ( STRING , java.lang.String .class ) ; assertEquals ( STRING , this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . java.lang.String ) ; assertSame ( STRING , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . setMessageConverter ( new GenericMessageConverter ( ) ) ; org.springframework.messaging.core.ExpectedException . expect ( MessageConversionException .class ) ; org.springframework.messaging.core.ExpectedException . expectCause ( isA ( ConversionFailedException .class ) ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receiveAndConvert ( STRING , java.lang.Integer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { Message < ? > org.springframework.messaging.core.Message<?> = new GenericMessage < java.lang.Object > ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . setDefaultDestination ( STRING ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . void ( org.springframework.messaging.core.Message<> ) ; this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . setMessageConverter ( new GenericMessageConverter ( ) ) ; try { this . org.springframework.messaging.core.MessageReceivingTemplateTests.TestMessagingTemplate . receiveAndConvert ( java.io.Writer .class ) ; } catch ( MessageConversionException org.springframework.messaging.core.MessageConversionException ) { assertTrue ( STRING + org.springframework.messaging.core.MessageConversionException . getMessage ( ) + STRING , org.springframework.messaging.core.MessageConversionException . getMessage ( ) . contains ( STRING ) ) ; assertSame ( org.springframework.messaging.core.Message<> , org.springframework.messaging.core.MessageConversionException . getFailedMessage ( ) ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Message < ? > org.springframework.messaging.core.Message<?> ) { this . org.springframework.messaging.core.Message<?> = org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.core.Message<?> ) {		}  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; return this . org.springframework.messaging.core.Message<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.messaging.core.Message<?> < ? > org.springframework.messaging.core.Message<?> ( java.lang.String java.lang.String , Message < ? > org.springframework.messaging.core.Message<?> ) { this . java.lang.String = java.lang.String ; return null ; }  <METHOD_END>
