<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException instanceof UnsatisfiedDependencyException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedPerson .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , ScopedProxyUtils . createScopedProxy ( new BeanDefinitionHolder ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String ) , org.springframework.beans.factory.support.GenericApplicationContext , true ) . getBeanDefinition ( ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedPerson .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.DefaultValueQualifiedPerson .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException instanceof UnsatisfiedDependencyException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.MetaQualifiedFieldTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.MetaQualifiedFieldTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.MetaQualifiedFieldTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.MetaQualifiedFieldTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.MetaQualifiedFieldTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedMethodParameterTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier .class ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithDefaultValue .class ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithDefaultValue .class , STRING ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithDefaultValue .class , STRING ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithDefaultValueTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; AutowireCandidateQualifier org.springframework.beans.factory.support.AutowireCandidateQualifier = new AutowireCandidateQualifier ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifierWithMultipleAttributes .class ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , NUMBER ) ; org.springframework.beans.factory.support.AutowireCandidateQualifier . setAttribute ( STRING , STRING ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( org.springframework.beans.factory.support.AutowireCandidateQualifier ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithMultipleAttributesTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException . getRootCause ( ) instanceof NoSuchBeanDefinitionException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( java.lang.String ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithBaseQualifierDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithBaseQualifierDefaultValueTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithBaseQualifierDefaultValueTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithBaseQualifierDefaultValueTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( java.lang.String , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedFieldWithBaseQualifierDefaultValueTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean = ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean ) org.springframework.beans.factory.support.GenericApplicationContext . getBean ( STRING ) ; assertEquals ( STRING , org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { GenericApplicationContext org.springframework.beans.factory.support.GenericApplicationContext = new GenericApplicationContext ( ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; ConstructorArgumentValues org.springframework.beans.factory.support.ConstructorArgumentValues = new ConstructorArgumentValues ( ) ; org.springframework.beans.factory.support.ConstructorArgumentValues . addGenericArgumentValue ( STRING ) ; RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person .class , org.springframework.beans.factory.support.ConstructorArgumentValues , null ) ; org.springframework.beans.factory.support.RootBeanDefinition . addQualifier ( new AutowireCandidateQualifier ( Qualifier .class , STRING ) ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , org.springframework.beans.factory.support.RootBeanDefinition ) ; org.springframework.beans.factory.support.GenericApplicationContext . registerBeanDefinition ( STRING , new RootBeanDefinition ( org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.QualifiedConstructorArgumentWithBaseQualifierNonDefaultValueTestBean .class ) ) ; AnnotationConfigUtils . registerAnnotationConfigProcessors ( org.springframework.beans.factory.support.GenericApplicationContext ) ; try { org.springframework.beans.factory.support.GenericApplicationContext . refresh ( ) ; fail ( STRING ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { assertTrue ( org.springframework.beans.factory.support.BeanCreationException instanceof UnsatisfiedDependencyException ) ; assertEquals ( STRING , org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ; } }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> @ Autowired public void void ( @ org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ) { this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person = org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( @ org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.TestQualifier org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ) { this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person = org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> @ Autowired public void ( @ Qualifier ( STRING ) org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ) { this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person = org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ( ) { return this . org.springframework.beans.factory.support.QualifierAnnotationAutowireContextTests.Person ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
<METHOD_START> public void ( ) { super( null ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { super( java.lang.String ); }  <METHOD_END>
