<METHOD_START> @ Test public void void ( ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . withSettings ( MockReset . NONE ) ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . NONE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . before ( ) ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . BEFORE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . after ( ) ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . AFTER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . withSettings ( MockReset . BEFORE ) ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . BEFORE ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ExampleService org.springframework.boot.test.mock.mockito.ExampleService = mock ( ExampleService .class , MockReset . apply ( MockReset . AFTER , withSettings ( ) ) ) ; assertThat ( MockReset . get ( org.springframework.boot.test.mock.mockito.ExampleService ) ) . isEqualTo ( MockReset . AFTER ) ; }  <METHOD_END>
