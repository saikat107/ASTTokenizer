<METHOD_START> public void void ( java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> < java.lang.String , TransactionAttribute > java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) { this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> = java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { void ( this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) ; this . boolean = true ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> protected void void ( java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> < java.lang.String , TransactionAttribute > java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) { if ( java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> != null ) { for ( java.util.Map . java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> < java.lang.String , TransactionAttribute > java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> : java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . entrySet ( ) ) { void ( java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . getKey ( ) , java.util.Map.Entry<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> . getValue ( ) ) ; } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { Assert . notNull ( java.lang.String , STRING ) ; int int = java.lang.String . int ( STRING ) ; if ( int == - NUMBER ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = java.lang.String . java.lang.String ( NUMBER , int ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( int + NUMBER ) ; java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolveClassName ( java.lang.String , this . java.lang.ClassLoader ) ; void ( java.lang.Class<> , java.lang.String , org.springframework.transaction.interceptor.TransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String java.lang.String , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.String , STRING ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) + '.' + java.lang.String ; java.lang.reflect.Method [] java.lang.reflect.Method[] = java.lang.Class<> . java.lang.reflect.Method[] ( ) ; java.util.List<java.lang.reflect.Method> < java.lang.reflect.Method > java.util.List<java.lang.reflect.Method> = new java.util.ArrayList<java.lang.reflect.Method> <> ( ) ; for ( java.lang.reflect.Method java.lang.reflect.Method : java.lang.reflect.Method[] ) { if ( boolean ( java.lang.reflect.Method . java.lang.String ( ) , java.lang.String ) ) { java.util.List<java.lang.reflect.Method> . boolean ( java.lang.reflect.Method ) ; } } if ( java.util.List<java.lang.reflect.Method> . boolean ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING + java.lang.Class<> . java.lang.String ( ) + STRING ) ; } for ( java.lang.reflect.Method java.lang.reflect.Method : java.util.List<java.lang.reflect.Method> ) { java.lang.String java.lang.String = this . java.util.Map<java.lang.reflect.Method,java.lang.String> . java.lang.String ( java.lang.reflect.Method ) ; if ( java.lang.String == null || ( ! java.lang.String . boolean ( java.lang.String ) && java.lang.String . int ( ) <= java.lang.String . int ( ) ) ) { if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) && java.lang.String != null ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.reflect.Method + STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } this . java.util.Map<java.lang.reflect.Method,java.lang.String> . java.lang.String ( java.lang.reflect.Method , java.lang.String ) ; void ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; } else { if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.reflect.Method + STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } } }  <METHOD_END>
<METHOD_START> public void void ( java.lang.reflect.Method java.lang.reflect.Method , TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ) { Assert . notNull ( java.lang.reflect.Method , STRING ) ; Assert . notNull ( org.springframework.transaction.interceptor.TransactionAttribute , STRING ) ; if ( org.springframework.transaction.interceptor.Log . isDebugEnabled ( ) ) { org.springframework.transaction.interceptor.Log . debug ( STRING + java.lang.reflect.Method + STRING + org.springframework.transaction.interceptor.TransactionAttribute + STRING ) ; } this . java.util.Map<java.lang.reflect.Method,org.springframework.transaction.interceptor.TransactionAttribute> . put ( java.lang.reflect.Method , org.springframework.transaction.interceptor.TransactionAttribute ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , java.lang.String java.lang.String ) { return PatternMatchUtils . simpleMatch ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.transaction.interceptor.TransactionAttribute org.springframework.transaction.interceptor.TransactionAttribute ( java.lang.reflect.Method java.lang.reflect.Method , java.lang.Class<?> < ? > java.lang.Class<?> ) { if ( this . boolean ) { return this . java.util.Map<java.lang.reflect.Method,org.springframework.transaction.interceptor.TransactionAttribute> . get ( java.lang.reflect.Method ) ; } else { synchronized ( this . java.util.Map<java.lang.reflect.Method,org.springframework.transaction.interceptor.TransactionAttribute> ) { if ( ! this . boolean ) { void ( this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) ; this . boolean = true ; } return this . java.util.Map<java.lang.reflect.Method,org.springframework.transaction.interceptor.TransactionAttribute> . get ( java.lang.reflect.Method ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( ! ( java.lang.Object instanceof org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource ) ) { return false ; } org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource = ( org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource ) java.lang.Object ; return ObjectUtils . nullSafeEquals ( this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> , org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource .class . int ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return java.lang.Class<? extends org.springframework.transaction.interceptor.MethodMapTransactionAttributeSource> ( ) . java.lang.String ( ) + STRING + this . java.util.Map<java.lang.String,org.springframework.transaction.interceptor.TransactionAttribute> ; }  <METHOD_END>
