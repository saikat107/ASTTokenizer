<METHOD_START> @ Test public void void ( ) { try { EntityManagerFactoryUtils . doGetTransactionalEntityManager ( null , null ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; assertNull ( EntityManagerFactoryUtils . doGetTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory , null ) ) ; assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { try { EntityManagerFactory org.springframework.orm.jpa.EntityManagerFactory = mock ( EntityManagerFactory .class ) ; EntityManager org.springframework.orm.jpa.EntityManager = mock ( EntityManager .class ) ; TransactionSynchronizationManager . initSynchronization ( ) ; given ( org.springframework.orm.jpa.EntityManagerFactory . createEntityManager ( ) ) . willReturn ( org.springframework.orm.jpa.EntityManager ) ; assertSame ( org.springframework.orm.jpa.EntityManager , EntityManagerFactoryUtils . doGetTransactionalEntityManager ( org.springframework.orm.jpa.EntityManagerFactory , null ) ) ; assertSame ( org.springframework.orm.jpa.EntityManager , ( ( EntityManagerHolder ) TransactionSynchronizationManager . unbindResource ( org.springframework.orm.jpa.EntityManagerFactory ) ) . getEntityManager ( ) ) ; } finally { TransactionSynchronizationManager . clearSynchronization ( ) ; } assertTrue ( TransactionSynchronizationManager . getResourceMap ( ) . isEmpty ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.IllegalStateException java.lang.IllegalStateException = new java.lang.IllegalStateException ( ) ; DataAccessException org.springframework.orm.jpa.DataAccessException = EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.IllegalStateException ) ; assertSame ( java.lang.IllegalStateException , org.springframework.orm.jpa.DataAccessException . getCause ( ) ) ; assertTrue ( org.springframework.orm.jpa.DataAccessException instanceof InvalidDataAccessApiUsageException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.IllegalArgumentException java.lang.IllegalArgumentException = new java.lang.IllegalArgumentException ( ) ; DataAccessException org.springframework.orm.jpa.DataAccessException = EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.IllegalArgumentException ) ; assertSame ( java.lang.IllegalArgumentException , org.springframework.orm.jpa.DataAccessException . getCause ( ) ) ; assertTrue ( org.springframework.orm.jpa.DataAccessException instanceof InvalidDataAccessApiUsageException ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException = new java.lang.UnsupportedOperationException ( ) ; assertNull ( STRING , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( java.lang.UnsupportedOperationException ) ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { EntityNotFoundException org.springframework.orm.jpa.EntityNotFoundException = new EntityNotFoundException ( ) ; assertSame ( JpaObjectRetrievalFailureException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.EntityNotFoundException ) . getClass ( ) ) ; NoResultException org.springframework.orm.jpa.NoResultException = new NoResultException ( ) ; assertSame ( EmptyResultDataAccessException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.NoResultException ) . getClass ( ) ) ; NonUniqueResultException org.springframework.orm.jpa.NonUniqueResultException = new NonUniqueResultException ( ) ; assertSame ( IncorrectResultSizeDataAccessException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.NonUniqueResultException ) . getClass ( ) ) ; OptimisticLockException org.springframework.orm.jpa.OptimisticLockException = new OptimisticLockException ( ) ; assertSame ( JpaOptimisticLockingFailureException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.OptimisticLockException ) . getClass ( ) ) ; EntityExistsException org.springframework.orm.jpa.EntityExistsException = new EntityExistsException ( STRING ) ; assertSame ( DataIntegrityViolationException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.EntityExistsException ) . getClass ( ) ) ; TransactionRequiredException org.springframework.orm.jpa.TransactionRequiredException = new TransactionRequiredException ( STRING ) ; assertSame ( InvalidDataAccessApiUsageException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.TransactionRequiredException ) . getClass ( ) ) ; PersistenceException org.springframework.orm.jpa.PersistenceException = new PersistenceException ( ) {		} ; assertSame ( JpaSystemException .class , EntityManagerFactoryUtils . convertJpaAccessExceptionIfPossible ( org.springframework.orm.jpa.PersistenceException ) . getClass ( ) ) ; }  <METHOD_END>
