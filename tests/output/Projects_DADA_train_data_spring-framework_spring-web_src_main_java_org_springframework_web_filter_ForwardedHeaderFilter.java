<METHOD_START> @ java.lang.Override protected boolean boolean ( HttpServletRequest org.springframework.web.filter.HttpServletRequest ) throws org.springframework.web.filter.ServletException { java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.filter.HttpServletRequest . getHeaderNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; if ( java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { return false ; } } return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected boolean boolean ( ) { return false ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , HttpServletResponse org.springframework.web.filter.HttpServletResponse , FilterChain org.springframework.web.filter.FilterChain ) throws org.springframework.web.filter.ServletException , java.io.IOException { org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderRequestWrapper org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderRequestWrapper = new org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderRequestWrapper ( org.springframework.web.filter.HttpServletRequest , this . org.springframework.web.filter.UrlPathHelper ) ; org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderResponseWrapper org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderResponseWrapper = new org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderResponseWrapper ( org.springframework.web.filter.HttpServletResponse , org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderRequestWrapper ) ; org.springframework.web.filter.FilterChain . doFilter ( org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderRequestWrapper , org.springframework.web.filter.ForwardedHeaderFilter.ForwardedHeaderResponseWrapper ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpServletRequest org.springframework.web.filter.HttpServletRequest , UrlPathHelper org.springframework.web.filter.UrlPathHelper ) { super( org.springframework.web.filter.HttpServletRequest ); HttpRequest org.springframework.web.filter.HttpRequest = new ServletServerHttpRequest ( org.springframework.web.filter.HttpServletRequest ) ; UriComponents org.springframework.web.filter.UriComponents = UriComponentsBuilder . fromHttpRequest ( org.springframework.web.filter.HttpRequest ) . build ( ) ; int int = org.springframework.web.filter.UriComponents . getPort ( ) ; this . java.lang.String = org.springframework.web.filter.UriComponents . getScheme ( ) ; this . boolean = STRING . boolean ( java.lang.String ) ; this . java.lang.String = org.springframework.web.filter.UriComponents . getHost ( ) ; this . int = ( int == - NUMBER ? ( this . boolean ? NUMBER : NUMBER ) : int ) ; java.lang.String java.lang.String = java.lang.String ( org.springframework.web.filter.HttpServletRequest ) ; this . java.lang.String = ( java.lang.String != null ? java.lang.String : org.springframework.web.filter.HttpServletRequest . getContextPath ( ) ) ; this . java.lang.String = this . java.lang.String + org.springframework.web.filter.UrlPathHelper . getPathWithinApplication ( org.springframework.web.filter.HttpServletRequest ) ; this . java.lang.String = this . java.lang.String + STRING + this . java.lang.String + ( int == - NUMBER ? STRING : STRING + int ) + this . java.lang.String ; this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> = java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( org.springframework.web.filter.HttpServletRequest ) ; }  <METHOD_END>
<METHOD_START> private static java.lang.String java.lang.String ( HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { java.lang.String java.lang.String = null ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.filter.HttpServletRequest . getHeaderNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; if ( STRING . boolean ( java.lang.String ) ) { java.lang.String = org.springframework.web.filter.HttpServletRequest . getHeader ( java.lang.String ) ; } } if ( java.lang.String != null ) { while ( java.lang.String . boolean ( STRING ) ) { java.lang.String = java.lang.String . java.lang.String ( NUMBER , java.lang.String . int ( ) - NUMBER ) ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> private static java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> ( HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> < java.lang.String , java.util.List<java.lang.String> < java.lang.String > > java.util.Map<java.lang.String,java.util.List<java.lang.String>> = new LinkedCaseInsensitiveMap <> ( java.util.Locale . java.util.Locale ) ; java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> = org.springframework.web.filter.HttpServletRequest . getHeaderNames ( ) ; while ( java.util.Enumeration<java.lang.String> . boolean ( ) ) { java.lang.String java.lang.String = java.util.Enumeration<java.lang.String> . java.lang.String ( ) ; if ( ! java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String , java.util.Collections . java.util.ArrayList ( org.springframework.web.filter.HttpServletRequest . getHeaders ( java.lang.String ) ) ) ; } } return java.util.Map<java.lang.String,java.util.List<java.lang.String>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.StringBuffer java.lang.StringBuffer ( ) { return new java.lang.StringBuffer ( this . java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; return ( CollectionUtils . isEmpty ( java.util.List<java.lang.String> ) ? null : java.util.List<java.lang.String> . java.lang.String ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( java.lang.String java.lang.String ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.List<java.lang.String> ( java.lang.String ) ; return ( java.util.Collections . java.util.Enumeration<java.lang.String> ( java.util.List<java.lang.String> != null ? java.util.List<java.lang.String> : java.util.Collections . java.util.Set<java.lang.String> ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Enumeration<java.lang.String> < java.lang.String > java.util.Enumeration<java.lang.String> ( ) { return java.util.Collections . java.util.Enumeration<java.lang.String> ( this . java.util.Map<java.lang.String,java.util.List<java.lang.String>> . java.util.Set<java.lang.String> ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( HttpServletResponse org.springframework.web.filter.HttpServletResponse , HttpServletRequest org.springframework.web.filter.HttpServletRequest ) { super( org.springframework.web.filter.HttpServletResponse ); this . org.springframework.web.filter.HttpServletRequest = org.springframework.web.filter.HttpServletRequest ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws java.io.IOException { UriComponentsBuilder org.springframework.web.filter.UriComponentsBuilder = UriComponentsBuilder . fromUriString ( java.lang.String ) ; if ( org.springframework.web.filter.UriComponentsBuilder . build ( ) . getScheme ( ) != null ) { super. sendRedirect ( java.lang.String ) ; return; } if ( java.lang.String . boolean ( STRING ) ) { java.lang.String java.lang.String = this . org.springframework.web.filter.HttpServletRequest . getScheme ( ) ; super. sendRedirect ( org.springframework.web.filter.UriComponentsBuilder . scheme ( java.lang.String ) . toUriString ( ) ) ; return; } java.lang.String java.lang.String = ( java.lang.String . boolean ( java.lang.String ) ? java.lang.String : StringUtils . applyRelativePath ( this . org.springframework.web.filter.HttpServletRequest . getRequestURI ( ) , java.lang.String ) ) ; java.lang.String java.lang.String = UriComponentsBuilder . fromHttpRequest ( new ServletServerHttpRequest ( this . org.springframework.web.filter.HttpServletRequest ) ) . replacePath ( java.lang.String ) . build ( ) . normalize ( ) . toUriString ( ) ; super. sendRedirect ( java.lang.String ) ; }  <METHOD_END>
