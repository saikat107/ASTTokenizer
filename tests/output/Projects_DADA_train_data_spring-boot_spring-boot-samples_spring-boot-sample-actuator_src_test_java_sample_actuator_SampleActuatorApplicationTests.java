<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getHeaders ( ) ) . doesNotContainKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . UNAUTHORIZED ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( ) ; @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsKey ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.actuator.ResponseEntity<java.lang.String> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . doesNotContain ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.actuator.ResponseEntity<java.lang.String> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.actuator.ResponseEntity<java.lang.String> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING , STRING , STRING ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ) . contains ( STRING , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < java.lang.String > sample.actuator.ResponseEntity<java.lang.String> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.lang.String .class ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) ; java.lang.String java.lang.String = sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { HttpHeaders sample.actuator.HttpHeaders = new HttpHeaders ( ) ; sample.actuator.HttpHeaders . setAccept ( java.util.Arrays . java.util.List ( MediaType . TEXT_HTML ) ) ; HttpEntity < ? > sample.actuator.HttpEntity<?> = new HttpEntity < java.lang.Void > ( sample.actuator.HttpHeaders ) ; ResponseEntity < java.lang.String > sample.actuator.ResponseEntity<java.lang.String> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . exchange ( STRING , HttpMethod . GET , sample.actuator.HttpEntity<> , java.lang.String .class ) ; assertThat ( sample.actuator.ResponseEntity<java.lang.String> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) ; java.lang.String java.lang.String = sample.actuator.ResponseEntity<java.lang.String> . getBody ( ) ; assertThat ( java.lang.String ) . as ( STRING ) . isNotNull ( ) ; assertThat ( java.lang.String ) . contains ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.lang.String .class ) ; @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.List > sample.actuator.ResponseEntity<java.util.List> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.List .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.List> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.List<java.util.Map<java.lang.String,java.lang.Object>> < java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > > java.util.List<java.util.Map<java.lang.String,java.lang.Object>> = sample.actuator.ResponseEntity<java.util.List> . getBody ( ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . java.util.Map<java.lang.String,java.lang.Object> ( java.util.List<java.util.Map<java.lang.String,java.lang.Object>> . int ( ) - NUMBER ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) ( ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ) . java.lang.Object ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . INTERNAL_SERVER_ERROR ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.List > sample.actuator.ResponseEntity<java.util.List> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.List .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.List> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; assertThat ( sample.actuator.ResponseEntity<java.util.List> . getBody ( ) ) . hasSize ( NUMBER ) ; java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = ( java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > ) sample.actuator.ResponseEntity<java.util.List> . getBody ( ) . get ( NUMBER ) ; assertThat ( ( ( java.lang.String ) java.util.Map<java.lang.String,java.lang.Object> . java.lang.Object ( STRING ) ) ) . startsWith ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { @ java.lang.SuppressWarnings ( STRING ) ResponseEntity < java.util.Map > sample.actuator.ResponseEntity<java.util.Map> = this . sample.actuator.TestRestTemplate . withBasicAuth ( STRING , java.lang.String ( ) ) . getForEntity ( STRING , java.util.Map .class ) ; assertThat ( sample.actuator.ResponseEntity<java.util.Map> . getStatusCode ( ) ) . isEqualTo ( HttpStatus . OK ) ; @ java.lang.SuppressWarnings ( STRING ) java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> = sample.actuator.ResponseEntity<java.util.Map> . getBody ( ) ; assertThat ( java.util.Map<java.lang.String,java.lang.Object> ) . containsKey ( STRING + DataSourceProperties .class . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { return this . sample.actuator.SecurityProperties . getUser ( ) . getPassword ( ) ; }  <METHOD_END>
