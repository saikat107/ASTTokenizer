<METHOD_START> private void ( java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> < PatternFormatter > java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> , AnsiElement org.springframework.boot.logging.log4j2.AnsiElement ) { super( STRING , STRING ); this . java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> = java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> ; this . org.springframework.boot.logging.log4j2.AnsiElement = org.springframework.boot.logging.log4j2.AnsiElement ; }  <METHOD_END>
<METHOD_START> public static org.springframework.boot.logging.log4j2.ColorConverter org.springframework.boot.logging.log4j2.ColorConverter ( Configuration org.springframework.boot.logging.log4j2.Configuration , java.lang.String [] java.lang.String[] ) { if ( java.lang.String[] . int < NUMBER ) { LOGGER . error ( STRING + STRING , java.lang.String[] . int ) ; return null ; } if ( java.lang.String[] [ NUMBER ] == null ) { LOGGER . error ( STRING ) ; return null ; } PatternParser org.springframework.boot.logging.log4j2.PatternParser = PatternLayout . createPatternParser ( org.springframework.boot.logging.log4j2.Configuration ) ; java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> < PatternFormatter > java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> = org.springframework.boot.logging.log4j2.PatternParser . parse ( java.lang.String[] [ NUMBER ] ) ; AnsiElement org.springframework.boot.logging.log4j2.AnsiElement = ( java.lang.String[] . int == NUMBER ? null : java.util.Map<java.lang.String,org.springframework.boot.logging.log4j2.AnsiElement> . get ( java.lang.String[] [ NUMBER ] ) ) ; return new org.springframework.boot.logging.log4j2.ColorConverter ( java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> , org.springframework.boot.logging.log4j2.AnsiElement ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { for ( PatternFormatter org.springframework.boot.logging.log4j2.PatternFormatter : this . java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> ) { if ( org.springframework.boot.logging.log4j2.PatternFormatter . handlesThrowable ( ) ) { return true ; } } return super. handlesThrowable ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LogEvent org.springframework.boot.logging.log4j2.LogEvent , java.lang.StringBuilder java.lang.StringBuilder ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; for ( PatternFormatter org.springframework.boot.logging.log4j2.PatternFormatter : this . java.util.List<org.springframework.boot.logging.log4j2.PatternFormatter> ) { org.springframework.boot.logging.log4j2.PatternFormatter . format ( org.springframework.boot.logging.log4j2.LogEvent , java.lang.StringBuilder ) ; } if ( java.lang.StringBuilder . int ( ) > NUMBER ) { AnsiElement org.springframework.boot.logging.log4j2.AnsiElement = this . org.springframework.boot.logging.log4j2.AnsiElement ; if ( org.springframework.boot.logging.log4j2.AnsiElement == null ) { org.springframework.boot.logging.log4j2.AnsiElement = java.util.Map<java.lang.Integer,org.springframework.boot.logging.log4j2.AnsiElement> . get ( org.springframework.boot.logging.log4j2.LogEvent . getLevel ( ) . intLevel ( ) ) ; org.springframework.boot.logging.log4j2.AnsiElement = ( org.springframework.boot.logging.log4j2.AnsiElement == null ? AnsiColor . GREEN : org.springframework.boot.logging.log4j2.AnsiElement ) ; } void ( java.lang.StringBuilder , java.lang.StringBuilder . java.lang.String ( ) , org.springframework.boot.logging.log4j2.AnsiElement ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.StringBuilder java.lang.StringBuilder , java.lang.String java.lang.String , AnsiElement org.springframework.boot.logging.log4j2.AnsiElement ) { java.lang.StringBuilder . java.lang.StringBuilder ( AnsiOutput . toString ( org.springframework.boot.logging.log4j2.AnsiElement , java.lang.String ) ) ; }  <METHOD_END>
