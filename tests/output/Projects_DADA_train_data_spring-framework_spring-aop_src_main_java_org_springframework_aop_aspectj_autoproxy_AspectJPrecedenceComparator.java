<METHOD_START> public void ( ) { this . java.util.Comparator<? super org.springframework.aop.aspectj.autoproxy.Advisor> = AnnotationAwareOrderComparator . INSTANCE ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Comparator<? super org.springframework.aop.aspectj.autoproxy.Advisor> < ? super Advisor > java.util.Comparator<? super org.springframework.aop.aspectj.autoproxy.Advisor> ) { Assert . notNull ( java.util.Comparator<> , STRING ) ; this . java.util.Comparator<? super org.springframework.aop.aspectj.autoproxy.Advisor> = java.util.Comparator<> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor , Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { int int = this . java.util.Comparator<> . int ( org.springframework.aop.aspectj.autoproxy.Advisor , org.springframework.aop.aspectj.autoproxy.Advisor ) ; if ( int == int && boolean ( org.springframework.aop.aspectj.autoproxy.Advisor , org.springframework.aop.aspectj.autoproxy.Advisor ) ) { int = int ( org.springframework.aop.aspectj.autoproxy.Advisor , org.springframework.aop.aspectj.autoproxy.Advisor ) ; } return int ; }  <METHOD_END>
<METHOD_START> private int int ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor , Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { boolean boolean = ( AspectJAopUtils . isAfterAdvice ( org.springframework.aop.aspectj.autoproxy.Advisor ) || AspectJAopUtils . isAfterAdvice ( org.springframework.aop.aspectj.autoproxy.Advisor ) ) ; int int = int ( org.springframework.aop.aspectj.autoproxy.Advisor ) - int ( org.springframework.aop.aspectj.autoproxy.Advisor ) ; if ( boolean ) { if ( int < NUMBER ) { return int ; } else if ( int == NUMBER ) { return int ; } else { return int ; } } else { if ( int < NUMBER ) { return int ; } else if ( int == NUMBER ) { return int ; } else { return int ; } } }  <METHOD_END>
<METHOD_START> private boolean boolean ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor , Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { return ( boolean ( org.springframework.aop.aspectj.autoproxy.Advisor ) && boolean ( org.springframework.aop.aspectj.autoproxy.Advisor ) && java.lang.String ( org.springframework.aop.aspectj.autoproxy.Advisor ) . equals ( java.lang.String ( org.springframework.aop.aspectj.autoproxy.Advisor ) ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { return ( org.springframework.aop.aspectj.autoproxy.Advisor instanceof AspectJPrecedenceInformation || org.springframework.aop.aspectj.autoproxy.Advisor . getAdvice ( ) instanceof AspectJPrecedenceInformation ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { return AspectJAopUtils . getAspectJPrecedenceInformationFor ( org.springframework.aop.aspectj.autoproxy.Advisor ) . getAspectName ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( Advisor org.springframework.aop.aspectj.autoproxy.Advisor ) { AspectJPrecedenceInformation org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceInformation = AspectJAopUtils . getAspectJPrecedenceInformationFor ( org.springframework.aop.aspectj.autoproxy.Advisor ) ; if ( org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceInformation != null ) { return org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceInformation . getDeclarationOrder ( ) ; } else { return NUMBER ; } }  <METHOD_END>
