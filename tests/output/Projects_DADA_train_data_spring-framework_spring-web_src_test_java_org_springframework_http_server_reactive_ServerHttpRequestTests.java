<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Arrays . java.util.List<java.lang.String> ( STRING , STRING ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.String> ( STRING ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { MultiValueMap < java.lang.String , java.lang.String > org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> = org.springframework.http.server.reactive.ServerHttpRequest ( STRING ) . getQueryParams ( ) ; assertEquals ( NUMBER , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . size ( ) ) ; assertEquals ( java.util.Collections . java.util.List<java.lang.Object> ( null ) , org.springframework.http.server.reactive.MultiValueMap<java.lang.String,java.lang.String> . get ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.http.server.reactive.ServerHttpRequest org.springframework.http.server.reactive.ServerHttpRequest ( java.lang.String java.lang.String ) throws java.lang.Exception { HttpServletRequest org.springframework.http.server.reactive.HttpServletRequest = new MockHttpServletRequest ( STRING , java.lang.String ) { @ java.lang.Override public org.springframework.http.server.reactive.ServletInputStream org.springframework.http.server.reactive.ServletInputStream ( ) { return new org.springframework.http.server.reactive.ServerHttpRequestTests.TestServletInputStream ( ) ; } } ; AsyncContext org.springframework.http.server.reactive.AsyncContext = new MockAsyncContext ( org.springframework.http.server.reactive.HttpServletRequest , new MockHttpServletResponse ( ) ) ; return new ServletServerHttpRequest ( org.springframework.http.server.reactive.HttpServletRequest , org.springframework.http.server.reactive.AsyncContext , new DefaultDataBufferFactory ( ) , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.server.reactive.ServletInputStream org.springframework.http.server.reactive.ServletInputStream ( ) { return new org.springframework.http.server.reactive.ServerHttpRequestTests.TestServletInputStream ( ) ; }  <METHOD_END>
<METHOD_START> public void ( ) { super( new java.io.ByteArrayInputStream ( new byte [ NUMBER ] ) ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ReadListener org.springframework.http.server.reactive.ReadListener ) { }  <METHOD_END>
