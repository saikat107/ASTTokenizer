<METHOD_START> public void ( MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> ) { this( org.springframework.integration.selector.MessageProcessor<java.lang.String> , ( MessageProcessor < java.lang.String > ) null ); }  <METHOD_END>
<METHOD_START> public void ( MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> , MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> ) { this( org.springframework.integration.selector.MessageProcessor<java.lang.String> , org.springframework.integration.selector.MessageProcessor<java.lang.String> , new SimpleMetadataStore ( ) ); }  <METHOD_END>
<METHOD_START> public void ( MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> , ConcurrentMetadataStore org.springframework.integration.selector.ConcurrentMetadataStore ) { this( org.springframework.integration.selector.MessageProcessor<java.lang.String> , null , org.springframework.integration.selector.ConcurrentMetadataStore ); }  <METHOD_END>
<METHOD_START> public void ( MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> , MessageProcessor < java.lang.String > org.springframework.integration.selector.MessageProcessor<java.lang.String> , ConcurrentMetadataStore org.springframework.integration.selector.ConcurrentMetadataStore ) { Assert . notNull ( org.springframework.integration.selector.MessageProcessor<java.lang.String> , STRING ) ; Assert . notNull ( org.springframework.integration.selector.ConcurrentMetadataStore , STRING ) ; this . org.springframework.integration.selector.ConcurrentMetadataStore = org.springframework.integration.selector.ConcurrentMetadataStore ; this . org.springframework.integration.selector.MessageProcessor<java.lang.String> = org.springframework.integration.selector.MessageProcessor<java.lang.String> ; this . org.springframework.integration.selector.MessageProcessor<java.lang.String> = org.springframework.integration.selector.MessageProcessor<java.lang.String> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Message < ? > org.springframework.integration.selector.Message<?> ) { java.lang.String java.lang.String = this . org.springframework.integration.selector.MessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.selector.Message<> ) ; java.lang.String java.lang.String = ( this . org.springframework.integration.selector.MessageProcessor<java.lang.String> != null ) ? this . org.springframework.integration.selector.MessageProcessor<java.lang.String> . processMessage ( org.springframework.integration.selector.Message<> ) : java.lang.Long . java.lang.String ( org.springframework.integration.selector.Message<> . getHeaders ( ) . getTimestamp ( ) ) ; return this . org.springframework.integration.selector.ConcurrentMetadataStore . putIfAbsent ( java.lang.String , java.lang.String ) == null ; }  <METHOD_END>
