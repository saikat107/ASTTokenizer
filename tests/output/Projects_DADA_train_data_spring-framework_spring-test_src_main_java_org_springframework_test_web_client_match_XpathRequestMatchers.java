<METHOD_START> protected void ( java.lang.String java.lang.String , java.util.Map<java.lang.String,java.lang.String> < java.lang.String , java.lang.String > java.util.Map<java.lang.String,java.lang.String> , java.lang.Object ... java.lang.Object[] )			throws javax.xml.xpath.XPathExpressionException { this . org.springframework.test.web.client.match.XpathExpectationsHelper = new XpathExpectationsHelper ( java.lang.String , java.util.Map<java.lang.String,java.lang.String> , java.lang.Object[] ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final Matcher < ? super org.w3c.dom.Node > org.springframework.test.web.client.match.Matcher<? super org.w3c.dom.Node> ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNode ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNode ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . exists ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . exists ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . doesNotExist ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . doesNotExist ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final Matcher < java.lang.Integer > org.springframework.test.web.client.match.Matcher<java.lang.Integer> ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<java.lang.Integer> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<java.lang.Integer> ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final int int ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , int ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNodeCount ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , int ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final Matcher < ? super java.lang.String > org.springframework.test.web.client.match.Matcher<? super java.lang.String> ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertString ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertString ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final java.lang.String java.lang.String ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertString ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.String ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertString ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final Matcher < ? super java.lang.Double > org.springframework.test.web.client.match.Matcher<? super java.lang.Double> ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , org.springframework.test.web.client.match.Matcher<> ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final java.lang.Double java.lang.Double ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.Double ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertNumber ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.Double ) ; }  <METHOD_END>
<METHOD_START> public < T > org.springframework.test.web.client.match.RequestMatcher org.springframework.test.web.client.match.RequestMatcher ( final java.lang.Boolean java.lang.Boolean ) { return new org.springframework.test.web.client.match.XpathRequestMatchers.AbstractXpathRequestMatcher ( ) { @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertBoolean ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.Boolean ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception { org.springframework.test.web.client.match.XpathExpectationsHelper . assertBoolean ( org.springframework.test.web.client.match.MockClientHttpRequest . getBodyAsBytes ( ) , java.lang.String , java.lang.Boolean ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public final void void ( ClientHttpRequest org.springframework.test.web.client.match.ClientHttpRequest ) throws java.io.IOException , java.lang.AssertionError { try { MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest = ( MockClientHttpRequest ) org.springframework.test.web.client.match.ClientHttpRequest ; void ( org.springframework.test.web.client.match.MockClientHttpRequest ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.AssertionError ( STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected abstract void void ( MockClientHttpRequest org.springframework.test.web.client.match.MockClientHttpRequest ) throws java.lang.Exception ;  <METHOD_END>
