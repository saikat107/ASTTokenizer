<METHOD_START> private void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.integration.test.matcher.Message<T> < T > org.springframework.integration.test.matcher.Message<T> ( Matcher < T > org.springframework.integration.test.matcher.Matcher<T> ) { return argThat ( new HamcrestArgumentMatcher <> ( hasPayload ( org.springframework.integration.test.matcher.Matcher<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public static < T > org.springframework.integration.test.matcher.Message<T> < T > org.springframework.integration.test.matcher.Message<T> ( T T ) { return argThat ( new HamcrestArgumentMatcher <> ( hasPayload ( T ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.test.matcher.Message<?> < ? > org.springframework.integration.test.matcher.Message<?> ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { return argThat ( new HamcrestArgumentMatcher <> ( hasHeader ( java.lang.String , java.lang.Object ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.test.matcher.Message<?> < ? > org.springframework.integration.test.matcher.Message<?> ( java.lang.String java.lang.String ) { return argThat ( new HamcrestArgumentMatcher <> ( HeaderMatcher . hasHeaderKey ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> public static < T > org.springframework.integration.test.matcher.Message<?> < ? > org.springframework.integration.test.matcher.Message<?> ( java.lang.String java.lang.String , Matcher < T > org.springframework.integration.test.matcher.Matcher<T> ) { return argThat ( new HamcrestArgumentMatcher <> ( HeaderMatcher .< T > hasHeader ( java.lang.String , org.springframework.integration.test.matcher.Matcher<T> ) ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.integration.test.matcher.Message<?> < ? > org.springframework.integration.test.matcher.Message<?> ( java.util.Map<java.lang.String,?> < java.lang.String , ? > java.util.Map<java.lang.String,?> ) { return argThat ( new HamcrestArgumentMatcher <> ( HeaderMatcher . hasAllHeaders ( java.util.Map<java.lang.String,> ) ) ) ; }  <METHOD_END>
