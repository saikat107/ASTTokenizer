<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { void ( org.springframework.integration.aggregator.scenarios.DirectChannel , NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test @ Ignore public void void ( ) java.lang.Exception { void ( org.springframework.integration.aggregator.scenarios.DirectChannel , NUMBER ) ; }  <METHOD_END>
<METHOD_START> private void void ( DirectChannel org.springframework.integration.aggregator.scenarios.DirectChannel , int int ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; java.util.List<java.lang.String> . boolean ( STRING ) ; org.springframework.integration.aggregator.scenarios.QueueChannel . purge ( null ) ; org.springframework.integration.aggregator.scenarios.DirectChannel . send ( MessageBuilder . withPayload ( java.util.List<java.lang.String> ) . setReplyChannel ( org.springframework.integration.aggregator.scenarios.QueueChannel ) . build ( ) ) ; Message < ? > org.springframework.integration.aggregator.scenarios.Message<?> ; int int = NUMBER ; do { org.springframework.integration.aggregator.scenarios.Message<?> = org.springframework.integration.aggregator.scenarios.QueueChannel . receive ( int ) ; if ( null != org.springframework.integration.aggregator.scenarios.Message<> ) { int ++ ; } } while ( null != org.springframework.integration.aggregator.scenarios.Message<> ); Assert . assertEquals ( NUMBER , int ) ; }  <METHOD_END>
