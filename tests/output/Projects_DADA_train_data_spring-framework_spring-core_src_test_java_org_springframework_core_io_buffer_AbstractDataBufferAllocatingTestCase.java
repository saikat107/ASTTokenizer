<METHOD_START> @ Parameterized . Parameterized ( name = STRING ) public static java.lang.Object [] [] java.lang.Object[][] ( ) { return new java.lang.Object [] [] { { new NettyDataBufferFactory ( new UnpooledByteBufAllocator ( true ) ) } , { new NettyDataBufferFactory ( new UnpooledByteBufAllocator ( false ) ) } , { new NettyDataBufferFactory ( new PooledByteBufAllocator ( true ) ) } , { new NettyDataBufferFactory ( new PooledByteBufAllocator ( false ) ) } , { new DefaultDataBufferFactory ( true ) } , { new DefaultDataBufferFactory ( false ) } } ; }  <METHOD_END>
<METHOD_START> protected org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( int int ) { return this . org.springframework.core.io.buffer.DataBufferFactory . allocateBuffer ( int ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.core.io.buffer.DataBuffer org.springframework.core.io.buffer.DataBuffer ( java.lang.String java.lang.String ) { byte [] byte[] = java.lang.String . byte[] ( java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; DataBuffer org.springframework.core.io.buffer.DataBuffer = this . org.springframework.core.io.buffer.DataBufferFactory . allocateBuffer ( byte[] . int ) ; org.springframework.core.io.buffer.DataBuffer . write ( byte[] ) ; return org.springframework.core.io.buffer.DataBuffer ; }  <METHOD_END>
<METHOD_START> protected void void ( DataBuffer ... org.springframework.core.io.buffer.DataBuffer[] ) { java.util.Arrays . java.util.stream.IntStream ( org.springframework.core.io.buffer.DataBuffer[] ) . forEach ( DataBufferUtils :: release ) ; }  <METHOD_END>
<METHOD_START> protected java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> < DataBuffer > java.util.function.Consumer<org.springframework.core.io.buffer.DataBuffer> ( java.lang.String java.lang.String ) { return org.springframework.core.io.buffer.DataBuffer -> { java.lang.String java.lang.String = DataBufferTestUtils . dumpString ( org.springframework.core.io.buffer.DataBuffer , java.nio.charset.StandardCharsets . java.nio.charset.Charset ) ; assertEquals ( java.lang.String , java.lang.String ) ; DataBufferUtils . release ( org.springframework.core.io.buffer.DataBuffer ) ; } ; }  <METHOD_END>
