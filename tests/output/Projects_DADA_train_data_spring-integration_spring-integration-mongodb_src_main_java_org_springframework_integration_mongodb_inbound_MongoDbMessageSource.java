<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.inbound.MongoDbFactory , Expression org.springframework.integration.mongodb.inbound.Expression ) { Assert . notNull ( org.springframework.integration.mongodb.inbound.MongoDbFactory , STRING ) ; Assert . notNull ( org.springframework.integration.mongodb.inbound.Expression , STRING ) ; this . org.springframework.integration.mongodb.inbound.MongoDbFactory = org.springframework.integration.mongodb.inbound.MongoDbFactory ; this . org.springframework.integration.mongodb.inbound.Expression = org.springframework.integration.mongodb.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void ( MongoOperations org.springframework.integration.mongodb.inbound.MongoOperations , Expression org.springframework.integration.mongodb.inbound.Expression ) { Assert . notNull ( org.springframework.integration.mongodb.inbound.MongoOperations , STRING ) ; Assert . notNull ( org.springframework.integration.mongodb.inbound.Expression , STRING ) ; this . org.springframework.integration.mongodb.inbound.MongoOperations = org.springframework.integration.mongodb.inbound.MongoOperations ; this . org.springframework.integration.mongodb.inbound.Expression = org.springframework.integration.mongodb.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mongodb.inbound.Expression ) { Assert . notNull ( org.springframework.integration.mongodb.inbound.Expression , STRING ) ; this . org.springframework.integration.mongodb.inbound.Expression = org.springframework.integration.mongodb.inbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( MongoConverter org.springframework.integration.mongodb.inbound.MongoConverter ) { Assert . isNull ( this . org.springframework.integration.mongodb.inbound.MongoOperations , STRING ) ; this . org.springframework.integration.mongodb.inbound.MongoConverter = org.springframework.integration.mongodb.inbound.MongoConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.lang.Exception { this . org.springframework.integration.mongodb.inbound.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; TypeLocator org.springframework.integration.mongodb.inbound.TypeLocator = this . org.springframework.integration.mongodb.inbound.StandardEvaluationContext . getTypeLocator ( ) ; if ( org.springframework.integration.mongodb.inbound.TypeLocator instanceof StandardTypeLocator ) { ( ( StandardTypeLocator ) org.springframework.integration.mongodb.inbound.TypeLocator ) . registerImport ( STRING ) ; } if ( this . org.springframework.integration.mongodb.inbound.MongoOperations == null ) { this . org.springframework.integration.mongodb.inbound.MongoOperations = new MongoTemplate ( this . org.springframework.integration.mongodb.inbound.MongoDbFactory , this . org.springframework.integration.mongodb.inbound.MongoConverter ) ; } this . boolean = true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.integration.mongodb.inbound.Message<java.lang.Object> < java.lang.Object > org.springframework.integration.mongodb.inbound.Message<java.lang.Object> ( ) { Assert . isTrue ( this . boolean , STRING ) ; Message < java.lang.Object > org.springframework.integration.mongodb.inbound.Message<java.lang.Object> = null ; java.lang.Object java.lang.Object = this . org.springframework.integration.mongodb.inbound.Expression . getValue ( this . org.springframework.integration.mongodb.inbound.StandardEvaluationContext ) ; Assert . notNull ( java.lang.Object , STRING ) ; Query org.springframework.integration.mongodb.inbound.Query ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.mongodb.inbound.Query = new BasicQuery ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Query ) { org.springframework.integration.mongodb.inbound.Query = ( ( Query ) java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } Assert . notNull ( org.springframework.integration.mongodb.inbound.Query , STRING ) ; java.lang.String java.lang.String = this . org.springframework.integration.mongodb.inbound.Expression . getValue ( this . org.springframework.integration.mongodb.inbound.StandardEvaluationContext , java.lang.String .class ) ; Assert . notNull ( java.lang.String , STRING ) ; java.lang.Object java.lang.Object = null ; if ( this . boolean ) { java.lang.Object = this . org.springframework.integration.mongodb.inbound.MongoOperations . findOne ( org.springframework.integration.mongodb.inbound.Query , this . java.lang.Class<> , java.lang.String ) ; } else { java.util.List<?> < ? > java.util.List<?> = this . org.springframework.integration.mongodb.inbound.MongoOperations . find ( org.springframework.integration.mongodb.inbound.Query , this . java.lang.Class<> , java.lang.String ) ; if ( ! CollectionUtils . isEmpty ( java.util.List<> ) ) { java.lang.Object = java.util.List<> ; } } if ( java.lang.Object != null ) { org.springframework.integration.mongodb.inbound.Message<java.lang.Object> = this . getMessageBuilderFactory ( ) . withPayload ( java.lang.Object ) . setHeader ( MongoHeaders . COLLECTION_NAME , java.lang.String ) . build ( ) ; } java.lang.Object java.lang.Object = TransactionSynchronizationManager . getResource ( this ) ; if ( java.lang.Object != null ) { Assert . isInstanceOf ( IntegrationResourceHolder .class , java.lang.Object ) ; ( ( IntegrationResourceHolder ) java.lang.Object ) . addAttribute ( STRING , this . org.springframework.integration.mongodb.inbound.MongoOperations ) ; } return org.springframework.integration.mongodb.inbound.Message<java.lang.Object> ; }  <METHOD_END>
