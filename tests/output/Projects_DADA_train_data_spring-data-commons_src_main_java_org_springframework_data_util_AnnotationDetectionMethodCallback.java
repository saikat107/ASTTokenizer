<METHOD_START> public void ( java.lang.Class<A> < A > java.lang.Class<A> ) { this( java.lang.Class<A> , false ); }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<A> < A > java.lang.Class<A> , boolean boolean ) { Assert . notNull ( java.lang.Class<A> , STRING ) ; this . java.lang.Class<A> = java.lang.Class<A> ; this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public java.lang.reflect.Method java.lang.reflect.Method ( ) { return java.lang.reflect.Method ; }  <METHOD_END>
<METHOD_START> public A A ( ) { return A ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ) { return A != null ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.reflect.Method java.lang.reflect.Method ) throws java.lang.IllegalArgumentException , java.lang.IllegalAccessException { if ( java.lang.reflect.Method != null && ! boolean ) { return; } A A = AnnotatedElementUtils . findMergedAnnotation ( java.lang.reflect.Method , java.lang.Class<A> ) ; if ( A != null ) { if ( java.lang.reflect.Method != null && boolean ) { throw new java.lang.IllegalStateException ( java.lang.String . java.lang.String ( java.lang.String , A . java.lang.Class<? extends java.lang.annotation.Annotation> ( ) . java.lang.String ( ) , java.lang.reflect.Method , java.lang.reflect.Method ) ) ; } this . A = A ; this . java.lang.reflect.Method = java.lang.reflect.Method ; } }  <METHOD_END>
