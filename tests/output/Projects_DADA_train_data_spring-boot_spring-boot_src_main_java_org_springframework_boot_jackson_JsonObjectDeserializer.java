<METHOD_START> @ java.lang.Override public final T T ( JsonParser org.springframework.boot.jackson.JsonParser , DeserializationContext org.springframework.boot.jackson.DeserializationContext )			throws java.io.IOException { try { ObjectCodec org.springframework.boot.jackson.ObjectCodec = org.springframework.boot.jackson.JsonParser . getCodec ( ) ; JsonNode org.springframework.boot.jackson.JsonNode = org.springframework.boot.jackson.ObjectCodec . readTree ( org.springframework.boot.jackson.JsonParser ) ; return T ( org.springframework.boot.jackson.JsonParser , org.springframework.boot.jackson.DeserializationContext , org.springframework.boot.jackson.ObjectCodec , org.springframework.boot.jackson.JsonNode ) ; } catch ( java.lang.Exception java.lang.Exception ) { if ( java.lang.Exception instanceof java.io.IOException ) { throw ( java.io.IOException ) java.lang.Exception ; } throw new JsonMappingException ( org.springframework.boot.jackson.JsonParser , STRING , java.lang.Exception ) ; } }  <METHOD_END>
<METHOD_START> protected abstract T T ( JsonParser org.springframework.boot.jackson.JsonParser , DeserializationContext org.springframework.boot.jackson.DeserializationContext , ObjectCodec org.springframework.boot.jackson.ObjectCodec , JsonNode org.springframework.boot.jackson.JsonNode )					throws java.io.IOException ;  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( { STRING } ) protected final < D > D D ( JsonNode org.springframework.boot.jackson.JsonNode , java.lang.Class<D> < D > java.lang.Class<D> ) { Assert . notNull ( java.lang.Class<D> , STRING ) ; if ( org.springframework.boot.jackson.JsonNode == null ) { return null ; } if ( java.lang.Class<D> == java.lang.String .class ) { return ( D ) org.springframework.boot.jackson.JsonNode . textValue ( ) ; } if ( java.lang.Class<D> == java.lang.Boolean .class ) { return ( D ) java.lang.Boolean . java.lang.Boolean ( org.springframework.boot.jackson.JsonNode . booleanValue ( ) ) ; } if ( java.lang.Class<D> == java.lang.Long .class ) { return ( D ) java.lang.Long . java.lang.Long ( org.springframework.boot.jackson.JsonNode . longValue ( ) ) ; } if ( java.lang.Class<D> == java.lang.Integer .class ) { return ( D ) java.lang.Integer . java.lang.Integer ( org.springframework.boot.jackson.JsonNode . intValue ( ) ) ; } if ( java.lang.Class<D> == java.lang.Short .class ) { return ( D ) java.lang.Short . java.lang.Short ( org.springframework.boot.jackson.JsonNode . shortValue ( ) ) ; } if ( java.lang.Class<D> == java.lang.Double .class ) { return ( D ) java.lang.Double . java.lang.Double ( org.springframework.boot.jackson.JsonNode . doubleValue ( ) ) ; } if ( java.lang.Class<D> == java.lang.Float .class ) { return ( D ) java.lang.Float . java.lang.Float ( org.springframework.boot.jackson.JsonNode . floatValue ( ) ) ; } if ( java.lang.Class<D> == java.math.BigDecimal .class ) { return ( D ) org.springframework.boot.jackson.JsonNode . decimalValue ( ) ; } if ( java.lang.Class<D> == java.math.BigInteger .class ) { return ( D ) org.springframework.boot.jackson.JsonNode . bigIntegerValue ( ) ; } throw new java.lang.IllegalArgumentException ( STRING + java.lang.Class<D> . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> protected final org.springframework.boot.jackson.JsonNode org.springframework.boot.jackson.JsonNode ( JsonNode org.springframework.boot.jackson.JsonNode , java.lang.String java.lang.String ) { Assert . notNull ( org.springframework.boot.jackson.JsonNode , STRING ) ; JsonNode org.springframework.boot.jackson.JsonNode = org.springframework.boot.jackson.JsonNode . get ( java.lang.String ) ; Assert . state ( org.springframework.boot.jackson.JsonNode != null && ! ( org.springframework.boot.jackson.JsonNode instanceof NullNode ) , STRING + java.lang.String + STRING ) ; return org.springframework.boot.jackson.JsonNode ; }  <METHOD_END>
