<METHOD_START> @ java.lang.Override protected org.springframework.cache.aspectj.ApplicationContext org.springframework.cache.aspectj.ApplicationContext ( ) { return new AnnotationConfigApplicationContext ( org.springframework.cache.aspectj.JCacheAspectJJavaConfigTests.EnableCachingConfig .class ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.CacheManager org.springframework.cache.aspectj.CacheManager ( ) { SimpleCacheManager org.springframework.cache.aspectj.SimpleCacheManager = new SimpleCacheManager ( ) ; org.springframework.cache.aspectj.SimpleCacheManager . setCaches ( java.util.Arrays . java.util.List ( org.springframework.cache.aspectj.Cache ( ) , new ConcurrentMapCache ( STRING ) , new ConcurrentMapCache ( STRING ) , new ConcurrentMapCache ( STRING ) ) ) ; return org.springframework.cache.aspectj.SimpleCacheManager ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.AnnotatedJCacheableService org.springframework.cache.aspectj.AnnotatedJCacheableService ( ) { return new AnnotatedJCacheableService ( org.springframework.cache.aspectj.Cache ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.cache.aspectj.Cache org.springframework.cache.aspectj.Cache ( ) { return new ConcurrentMapCache ( STRING ) ; }  <METHOD_END>
