<METHOD_START> public void ( java.io.File java.io.File ) { Assert . notNull ( java.io.File , STRING ) ; this . org.springframework.integration.file.Expression = new LiteralExpression ( java.io.File . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> public void ( Expression org.springframework.integration.file.Expression ) { Assert . notNull ( org.springframework.integration.file.Expression , STRING ) ; this . org.springframework.integration.file.Expression = org.springframework.integration.file.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( FileExistsMode org.springframework.integration.file.FileExistsMode ) { Assert . notNull ( org.springframework.integration.file.FileExistsMode , STRING ) ; this . org.springframework.integration.file.FileExistsMode = org.springframework.integration.file.FileExistsMode ; if ( FileExistsMode . APPEND . equals ( org.springframework.integration.file.FileExistsMode ) || FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) ) { this . org.springframework.integration.file.LockRegistry = this . org.springframework.integration.file.LockRegistry instanceof PassThruLockRegistry ? new DefaultLockRegistry ( ) : this . org.springframework.integration.file.LockRegistry ; } }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( FileNameGenerator org.springframework.integration.file.FileNameGenerator ) { Assert . notNull ( org.springframework.integration.file.FileNameGenerator , STRING ) ; this . org.springframework.integration.file.FileNameGenerator = org.springframework.integration.file.FileNameGenerator ; this . boolean = true ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . isTrue ( java.nio.charset.Charset . boolean ( java.lang.String ) , STRING + java.lang.String + STRING ) ; this . java.nio.charset.Charset = java.nio.charset.Charset . java.nio.charset.Charset ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( int int ) { this . int = int ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TaskScheduler org.springframework.integration.file.TaskScheduler ) { super. setTaskScheduler ( org.springframework.integration.file.TaskScheduler ) ; }  <METHOD_END>
<METHOD_START> public void void ( org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate ) { Assert . notNull ( org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate , STRING ) ; this . org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate = org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { this . org.springframework.integration.file.StandardEvaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; if ( this . org.springframework.integration.file.Expression instanceof LiteralExpression ) { final java.io.File java.io.File = new java.io.File ( this . org.springframework.integration.file.Expression . getValue ( this . org.springframework.integration.file.StandardEvaluationContext , null , java.lang.String .class ) ) ; void ( java.io.File , this . boolean ) ; } Assert . state ( ! ( this . boolean && ( FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) || FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) ) ) , STRING ) ; if ( ! this . boolean && this . org.springframework.integration.file.FileNameGenerator instanceof BeanFactoryAware ) { ( ( BeanFactoryAware ) this . org.springframework.integration.file.FileNameGenerator ) . setBeanFactory ( getBeanFactory ( ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.concurrent.ScheduledFuture<> == null && FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) ) { TaskScheduler org.springframework.integration.file.TaskScheduler = getTaskScheduler ( ) ; Assert . state ( org.springframework.integration.file.TaskScheduler != null , STRING ) ; this . java.util.concurrent.ScheduledFuture<?> = org.springframework.integration.file.TaskScheduler . scheduleAtFixedRate ( new org.springframework.integration.file.FileWritingMessageHandler.Flusher ( ) , this . long / NUMBER ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( this . java.util.concurrent.ScheduledFuture<> != null ) { this . java.util.concurrent.ScheduledFuture<> . boolean ( true ) ; this . java.util.concurrent.ScheduledFuture<?> = null ; } new org.springframework.integration.file.FileWritingMessageHandler.Flusher ( ) . void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . java.util.concurrent.ScheduledFuture<> != null ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , boolean boolean ) { if ( ! java.io.File . boolean ( ) && boolean ) { Assert . isTrue ( java.io.File . boolean ( ) , STRING + java.io.File + STRING ) ; } Assert . isTrue ( java.io.File . boolean ( ) , STRING + java.io.File + STRING ) ; Assert . isTrue ( java.io.File . boolean ( ) , STRING + java.io.File + STRING ) ; Assert . isTrue ( java.nio.file.Files . boolean ( java.io.File . java.nio.file.Path ( ) ) , STRING + java.io.File + STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.file.Message<?> ) { Assert . notNull ( org.springframework.integration.file.Message<> , STRING ) ; java.lang.Object java.lang.Object = org.springframework.integration.file.Message<> . getPayload ( ) ; Assert . notNull ( java.lang.Object , STRING ) ; java.lang.String java.lang.String = this . org.springframework.integration.file.FileNameGenerator . generateFileName ( org.springframework.integration.file.Message<> ) ; java.io.File java.io.File = java.io.File ( org.springframework.integration.file.Message<> ) ; final java.io.File java.io.File = java.io.File ( org.springframework.integration.file.Message<> ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String + this . java.lang.String ) ; java.io.File java.io.File = new java.io.File ( java.io.File , java.lang.String ) ; boolean boolean = java.io.File . boolean ( ) ; if ( boolean && FileExistsMode . FAIL . equals ( this . org.springframework.integration.file.FileExistsMode ) ) { throw new MessageHandlingException ( org.springframework.integration.file.Message<> , STRING + java.io.File . java.lang.String ( ) + STRING ) ; } java.lang.Object java.lang.Object = org.springframework.integration.file.Message<> . getHeaders ( ) . get ( FileHeaders . SET_MODIFIED ) ; if ( java.lang.Object instanceof java.io.File ) { java.lang.Object = ( ( java.io.File ) java.lang.Object ) . long ( ) ; } boolean boolean = ( FileExistsMode . IGNORE . equals ( this . org.springframework.integration.file.FileExistsMode ) && ( boolean || ( StringUtils . hasText ( this . java.lang.String ) && java.io.File . boolean ( ) ) ) ) || ( ( boolean && FileExistsMode . REPLACE_IF_MODIFIED . equals ( this . org.springframework.integration.file.FileExistsMode ) ) && ( java.lang.Object instanceof java.lang.Number && ( ( java.lang.Number ) java.lang.Object ) . long ( ) == java.io.File . long ( ) ) ) ; if ( ! boolean ) { try { if ( ! boolean && java.lang.String . java.lang.String ( STRING , java.util.regex.Matcher . java.lang.String ( java.io.File . java.lang.String ) ) . boolean ( java.io.File . java.lang.String ) ) { java.io.File . java.io.File ( ) . boolean ( ) ; } if ( java.lang.Object instanceof java.io.File ) { java.io.File = java.io.File ( ( java.io.File ) java.lang.Object , java.io.File , java.io.File ) ; } else if ( java.lang.Object instanceof java.io.InputStream ) { java.io.File = java.io.File ( ( java.io.InputStream ) java.lang.Object , java.io.File , java.io.File , java.io.File ) ; } else if ( java.lang.Object instanceof byte [] ) { java.io.File = this . java.io.File ( ( byte [] ) java.lang.Object , java.io.File , java.io.File , java.io.File ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.io.File = this . java.io.File ( ( java.lang.String ) java.lang.Object , java.io.File , java.io.File , java.io.File ) ; } else { throw new java.lang.IllegalArgumentException ( STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) + STRING ) ; } if ( this . boolean ) { if ( java.lang.Object instanceof java.lang.Number ) { java.io.File . boolean ( ( ( java.lang.Number ) java.lang.Object ) . long ( ) ) ; } else { if ( this . org.springframework.integration.file.Log . isWarnEnabled ( ) ) { this . org.springframework.integration.file.Log . warn ( STRING + FileHeaders . SET_MODIFIED + STRING + java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } } } } catch ( java.lang.Exception java.lang.Exception ) { throw new MessageHandlingException ( org.springframework.integration.file.Message<> , STRING , java.lang.Exception ) ; } } if ( ! this . boolean ) { return null ; } if ( java.io.File != null ) { if ( java.io.File == null && java.lang.Object instanceof java.io.File ) { return this . getMessageBuilderFactory ( ) . withPayload ( java.io.File ) . setHeader ( FileHeaders . ORIGINAL_FILE , java.lang.Object ) ; } } return java.io.File ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( Message < ? > org.springframework.integration.file.Message<?> ) { java.lang.Object java.lang.Object = org.springframework.integration.file.Message<> . getHeaders ( ) . get ( FileHeaders . ORIGINAL_FILE ) ; if ( java.lang.Object instanceof java.io.File ) { return ( java.io.File ) java.lang.Object ; } if ( java.lang.Object instanceof java.lang.String ) { return new java.io.File ( ( java.lang.String ) java.lang.Object ) ; } return null ; }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( final java.io.File java.io.File , java.io.File java.io.File , final java.io.File java.io.File ) throws java.io.IOException { if ( ! FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) && this . boolean ) { void ( java.io.File , java.io.File ) ; return java.io.File ; } else { java.io.BufferedInputStream java.io.BufferedInputStream = new java.io.BufferedInputStream ( new java.io.FileInputStream ( java.io.File ) ) ; return java.io.File ( java.io.BufferedInputStream , java.io.File , java.io.File , java.io.File ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( final java.io.InputStream java.io.InputStream , java.io.File java.io.File , java.io.File java.io.File , final java.io.File java.io.File ) throws java.io.IOException { final boolean boolean = FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) || FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) ; if ( boolean ) { final java.io.File java.io.File = this . java.io.File ( java.io.File , java.io.File ) ; final org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.File , false ) ; WhileLockedProcessor org.springframework.integration.file.WhileLockedProcessor = new WhileLockedProcessor ( this . org.springframework.integration.file.LockRegistry , java.io.File . java.lang.String ( ) ) { @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedOutputStream java.io.BufferedOutputStream = null ; try { java.io.BufferedOutputStream = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedOutputStream : java.io.BufferedOutputStream ( java.io.File , true ) ; byte [] byte[] = new byte [ StreamUtils . BUFFER_SIZE ] ; int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { java.io.BufferedOutputStream . void ( byte[] , NUMBER , int ) ; } if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedOutputStream . void ( java.lang.String . byte[] ( ) ) ; } } finally { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {						} try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedOutputStream != null ) { java.io.BufferedOutputStream . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {						} } } } ; org.springframework.integration.file.WhileLockedProcessor . doWhileLocked ( ) ; void ( java.io.File , java.io.File , java.io.File ) ; return java.io.File ; } else { java.io.BufferedOutputStream java.io.BufferedOutputStream = null ; try { java.io.BufferedOutputStream = new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( java.io.File ) , this . int ) ; byte [] byte[] = new byte [ StreamUtils . BUFFER_SIZE ] ; int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { java.io.BufferedOutputStream . void ( byte[] , NUMBER , int ) ; } if ( this . boolean ) { java.io.BufferedOutputStream . void ( java.lang.String . byte[] ( ) ) ; } java.io.BufferedOutputStream . void ( ) ; } finally { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {				} try { if ( java.io.BufferedOutputStream != null ) { java.io.BufferedOutputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) {				} } void ( java.io.File , java.io.File , java.io.File ) ; return java.io.File ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedOutputStream java.io.BufferedOutputStream = null ; try { java.io.BufferedOutputStream = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedOutputStream : java.io.BufferedOutputStream ( java.io.File , true ) ; byte [] byte[] = new byte [ StreamUtils . BUFFER_SIZE ] ; int int = - NUMBER ; while ( ( int = java.io.InputStream . int ( byte[] ) ) != - NUMBER ) { java.io.BufferedOutputStream . void ( byte[] , NUMBER , int ) ; } if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedOutputStream . void ( java.lang.String . byte[] ( ) ) ; } } finally { try { java.io.InputStream . void ( ) ; } catch ( java.io.IOException java.io.IOException ) {						} try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedOutputStream != null ) { java.io.BufferedOutputStream . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {						} } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( final byte [] byte[] , java.io.File java.io.File , java.io.File java.io.File , final java.io.File java.io.File )			throws java.io.IOException { final java.io.File java.io.File = this . java.io.File ( java.io.File , java.io.File ) ; final org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.File , false ) ; final boolean boolean = FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) ; WhileLockedProcessor org.springframework.integration.file.WhileLockedProcessor = new WhileLockedProcessor ( this . org.springframework.integration.file.LockRegistry , java.io.File . java.lang.String ( ) ) { @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedOutputStream java.io.BufferedOutputStream = null ; try { java.io.BufferedOutputStream = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedOutputStream : java.io.BufferedOutputStream ( java.io.File , boolean ) ; java.io.BufferedOutputStream . void ( byte[] ) ; if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedOutputStream . void ( java.lang.String . byte[] ( ) ) ; } } finally { try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedOutputStream != null ) { java.io.BufferedOutputStream . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {					} } } } ; org.springframework.integration.file.WhileLockedProcessor . doWhileLocked ( ) ; this . void ( java.io.File , java.io.File , java.io.File ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedOutputStream java.io.BufferedOutputStream = null ; try { java.io.BufferedOutputStream = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedOutputStream : java.io.BufferedOutputStream ( java.io.File , boolean ) ; java.io.BufferedOutputStream . void ( byte[] ) ; if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedOutputStream . void ( java.lang.String . byte[] ( ) ) ; } } finally { try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedOutputStream != null ) { java.io.BufferedOutputStream . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {					} } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( final java.lang.String java.lang.String , java.io.File java.io.File , java.io.File java.io.File , final java.io.File java.io.File )			throws java.io.IOException { final java.io.File java.io.File = this . java.io.File ( java.io.File , java.io.File ) ; final org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.File , true ) ; final boolean boolean = FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) ; WhileLockedProcessor org.springframework.integration.file.WhileLockedProcessor = new WhileLockedProcessor ( this . org.springframework.integration.file.LockRegistry , java.io.File . java.lang.String ( ) ) { @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedWriter java.io.BufferedWriter = null ; try { java.io.BufferedWriter = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedWriter : java.io.BufferedWriter ( java.io.File , boolean ) ; java.io.BufferedWriter . void ( java.lang.String ) ; if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedWriter . void ( ) ; } } finally { try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedWriter != null ) { java.io.BufferedWriter . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {					} } } } ; org.springframework.integration.file.WhileLockedProcessor . doWhileLocked ( ) ; this . void ( java.io.File , java.io.File , java.io.File ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) java.io.IOException { java.io.BufferedWriter java.io.BufferedWriter = null ; try { java.io.BufferedWriter = org.springframework.integration.file.FileWritingMessageHandler.FileState != null ? org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedWriter : java.io.BufferedWriter ( java.io.File , boolean ) ; java.io.BufferedWriter . void ( java.lang.String ) ; if ( org.springframework.integration.file.FileWritingMessageHandler .this . boolean ) { java.io.BufferedWriter . void ( ) ; } } finally { try { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null || org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ) { if ( java.io.BufferedWriter != null ) { java.io.BufferedWriter . void ( ) ; } void ( java.io.File , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.System . long ( ) ; } } catch ( java.io.IOException java.io.IOException ) {					} } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( java.io.File java.io.File , java.io.File java.io.File ) { final java.io.File java.io.File ; switch ( this . org.springframework.integration.file.FileExistsMode ) { case APPEND : case APPEND_NO_FLUSH : java.io.File = java.io.File ; break; case FAIL : case IGNORE : case REPLACE : case REPLACE_IF_MODIFIED : java.io.File = java.io.File ; break; default: throw new java.lang.IllegalStateException ( STRING + this . org.springframework.integration.file.FileExistsMode ) ; } return java.io.File ; }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File , java.io.File java.io.File ) throws java.io.IOException { if ( ! FileExistsMode . APPEND . equals ( this . org.springframework.integration.file.FileExistsMode ) && ! FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) && StringUtils . hasText ( this . java.lang.String ) ) { this . void ( java.io.File , java.io.File ) ; } if ( this . boolean && java.io.File != null ) { java.io.File . boolean ( ) ; } }  <METHOD_END>
<METHOD_START> private void void ( java.io.File java.io.File , java.io.File java.io.File ) throws java.io.IOException { Assert . notNull ( java.io.File , STRING ) ; Assert . notNull ( java.io.File , STRING ) ; if ( java.io.File . boolean ( ) ) { if ( java.io.File . boolean ( true , false ) && java.io.File . boolean ( ) ) { void ( java.io.File , java.io.File ) ; } else { throw new java.io.IOException ( STRING + java.io.File . java.lang.String ( ) + STRING + java.io.File . java.lang.String ( ) + STRING + java.io.File . java.lang.String ( ) + STRING ) ; } } else { void ( java.io.File , java.io.File ) ; } }  <METHOD_END>
<METHOD_START> private java.io.File java.io.File ( Message < ? > org.springframework.integration.file.Message<?> ) { final java.io.File java.io.File = ExpressionUtils . expressionToFile ( this . org.springframework.integration.file.Expression , this . org.springframework.integration.file.StandardEvaluationContext , org.springframework.integration.file.Message<> , STRING ) ; void ( java.io.File , this . boolean ) ; return java.io.File ; }  <METHOD_END>
<METHOD_START> private synchronized org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState ( final java.io.File java.io.File , boolean boolean )			throws java.io.FileNotFoundException { java.lang.String java.lang.String = java.io.File . java.lang.String ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState ; boolean boolean = FileExistsMode . APPEND_NO_FLUSH . equals ( this . org.springframework.integration.file.FileExistsMode ) ; if ( boolean ) { org.springframework.integration.file.FileWritingMessageHandler.FileState = this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.lang.String ) ; if ( org.springframework.integration.file.FileWritingMessageHandler.FileState != null && ( ( boolean && org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedOutputStream != null ) || ( ! boolean && org.springframework.integration.file.FileWritingMessageHandler.FileState . java.io.BufferedWriter != null ) ) ) { org.springframework.integration.file.FileWritingMessageHandler.FileState . void ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState = null ; this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.lang.String ) ; } if ( org.springframework.integration.file.FileWritingMessageHandler.FileState == null ) { if ( boolean ) { org.springframework.integration.file.FileWritingMessageHandler.FileState = new org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.BufferedWriter ( java.io.File , true ) , this . org.springframework.integration.file.LockRegistry . obtain ( java.io.File . java.lang.String ( ) ) ) ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState = new org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.BufferedOutputStream ( java.io.File , true ) , this . org.springframework.integration.file.LockRegistry . obtain ( java.io.File . java.lang.String ( ) ) ) ; } this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState ) ; } org.springframework.integration.file.FileWritingMessageHandler.FileState . long = java.lang.Long . long ; } else { org.springframework.integration.file.FileWritingMessageHandler.FileState = null ; } return org.springframework.integration.file.FileWritingMessageHandler.FileState ; }  <METHOD_END>
<METHOD_START> protected java.io.BufferedWriter java.io.BufferedWriter ( final java.io.File java.io.File , final boolean boolean ) throws java.io.FileNotFoundException { return new java.io.BufferedWriter ( new java.io.OutputStreamWriter ( new java.io.FileOutputStream ( java.io.File , boolean ) , this . java.nio.charset.Charset ) , this . int ) ; }  <METHOD_END>
<METHOD_START> protected java.io.BufferedOutputStream java.io.BufferedOutputStream ( java.io.File java.io.File , final boolean boolean )			throws java.io.FileNotFoundException { return new java.io.BufferedOutputStream ( new java.io.FileOutputStream ( java.io.File , boolean ) , this . int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Message < ? > org.springframework.integration.file.Message<?> ) { void ( this . org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate , org.springframework.integration.file.Message<> ) ; }  <METHOD_END>
<METHOD_START> public synchronized void void ( org.springframework.integration.file.FileWritingMessageHandler.FlushPredicate org.springframework.integration.file.FileWritingMessageHandler.FlushPredicate ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> = this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( ) ; if ( org.springframework.integration.file.FileWritingMessageHandler.FlushPredicate . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.lang.String ( ) , org.springframework.integration.file.FileWritingMessageHandler.FileState . long , org.springframework.integration.file.FileWritingMessageHandler.FileState . long ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . void ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public synchronized void void ( org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate , Message < ? > org.springframework.integration.file.Message<?> ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> = this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( ) ; if ( org.springframework.integration.file.FileWritingMessageHandler.MessageFlushPredicate . boolean ( java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.lang.String ( ) , org.springframework.integration.file.FileWritingMessageHandler.FileState . long , org.springframework.integration.file.FileWritingMessageHandler.FileState . long , org.springframework.integration.file.Message<> ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . void ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState . void ( ) ; } } }  <METHOD_END>
<METHOD_START> private synchronized void void ( final java.io.File java.io.File , final org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState ) { if ( org.springframework.integration.file.FileWritingMessageHandler.FileState != null ) { this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( java.io.File . java.lang.String ( ) ) ; } }  <METHOD_END>
<METHOD_START> private static void void ( java.io.File java.io.File , java.io.File java.io.File ) throws java.io.IOException { java.nio.file.Files . java.nio.file.Path ( java.io.File . java.nio.file.Path ( ) , java.io.File . java.nio.file.Path ( ) , java.nio.file.StandardCopyOption . java.nio.file.StandardCopyOption ) ; }  <METHOD_END>
<METHOD_START> void ( java.io.BufferedWriter java.io.BufferedWriter , java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ) { this . java.io.BufferedWriter = java.io.BufferedWriter ; this . java.io.BufferedOutputStream = null ; this . java.util.concurrent.locks.Lock = java.util.concurrent.locks.Lock ; }  <METHOD_END>
<METHOD_START> void ( java.io.BufferedOutputStream java.io.BufferedOutputStream , java.util.concurrent.locks.Lock java.util.concurrent.locks.Lock ) { this . java.io.BufferedWriter = null ; this . java.io.BufferedOutputStream = java.io.BufferedOutputStream ; this . java.util.concurrent.locks.Lock = java.util.concurrent.locks.Lock ; }  <METHOD_END>
<METHOD_START> private void void ( ) { try { this . java.util.concurrent.locks.Lock . void ( ) ; try { if ( this . java.io.BufferedWriter != null ) { this . java.io.BufferedWriter . void ( ) ; } else { this . java.io.BufferedOutputStream . void ( ) ; } } catch ( java.io.IOException java.io.IOException ) { } } catch ( java.lang.InterruptedException java.lang.InterruptedException ) { java.lang.Thread . java.lang.Thread ( ) . void ( ) ; } finally { this . java.util.concurrent.locks.Lock . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { synchronized ( org.springframework.integration.file.FileWritingMessageHandler .this ) { long long = org.springframework.integration.file.FileWritingMessageHandler .this . java.util.concurrent.ScheduledFuture<> == null ? java.lang.Long . long : ( java.lang.System . long ( ) - org.springframework.integration.file.FileWritingMessageHandler .this . long ) ; java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> < java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > > java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> = org.springframework.integration.file.FileWritingMessageHandler .this . java.util.Map<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.util.Set<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) . java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> ( ) ; while ( java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . boolean ( ) ) { java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> < java.lang.String , org.springframework.integration.file.FileWritingMessageHandler.FileState > java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> = java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState org.springframework.integration.file.FileWritingMessageHandler.FileState = java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . org.springframework.integration.file.FileWritingMessageHandler.FileState ( ) ; if ( org.springframework.integration.file.FileWritingMessageHandler.FileState . long < long || ( ! org.springframework.integration.file.FileWritingMessageHandler .this . boolean && org.springframework.integration.file.FileWritingMessageHandler.FileState . long < long ) ) { java.util.Iterator<java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState>> . void ( ) ; org.springframework.integration.file.FileWritingMessageHandler.FileState . void ( ) ; if ( org.springframework.integration.file.FileWritingMessageHandler .this . org.springframework.integration.file.Log . isDebugEnabled ( ) ) { org.springframework.integration.file.FileWritingMessageHandler .this . org.springframework.integration.file.Log . debug ( STRING + java.util.Map.Entry<java.lang.String,org.springframework.integration.file.FileWritingMessageHandler.FileState> . java.lang.String ( ) ) ; } } } } }  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.String java.lang.String , long long , long long );  <METHOD_END>
<METHOD_START> boolean boolean ( java.lang.String java.lang.String , long long , long long , Message < ? > org.springframework.integration.file.Message<?> );  <METHOD_END>
<METHOD_START> void ( ) { super(); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , long long , long long , Message < ? > org.springframework.integration.file.Message<?> ) { java.util.regex.Pattern java.util.regex.Pattern ; if ( org.springframework.integration.file.Message<> . getPayload ( ) instanceof java.lang.String ) { java.util.regex.Pattern = java.util.regex.Pattern . java.util.regex.Pattern ( ( java.lang.String ) org.springframework.integration.file.Message<> . getPayload ( ) ) ; } else if ( org.springframework.integration.file.Message<> . getPayload ( ) instanceof java.util.regex.Pattern ) { java.util.regex.Pattern = ( java.util.regex.Pattern ) org.springframework.integration.file.Message<> . getPayload ( ) ; } else { throw new java.lang.IllegalArgumentException ( STRING ) ; } return java.util.regex.Pattern . java.util.regex.Matcher ( java.lang.String ) . boolean ( ) ; }  <METHOD_END>
