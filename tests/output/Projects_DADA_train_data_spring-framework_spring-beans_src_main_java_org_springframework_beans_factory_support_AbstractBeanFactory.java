<METHOD_START> public void ( ) {	}  <METHOD_END>
<METHOD_START> public void ( BeanFactory org.springframework.beans.factory.support.BeanFactory ) { this . org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { return java.lang.Object ( java.lang.String , null , null , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> ) throws org.springframework.beans.factory.support.BeansException { return T ( java.lang.String , java.lang.Class<T> , null , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { return java.lang.Object ( java.lang.String , null , java.lang.Object[] , false ) ; }  <METHOD_END>
<METHOD_START> public < T > T T ( java.lang.String java.lang.String , java.lang.Class<T> < T > java.lang.Class<T> , java.lang.Object ... java.lang.Object[] ) throws org.springframework.beans.factory.support.BeansException { return T ( java.lang.String , java.lang.Class<T> , java.lang.Object[] , false ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected < T > T T ( final java.lang.String java.lang.String , final java.lang.Class<T> < T > java.lang.Class<T> , final java.lang.Object [] java.lang.Object[] , boolean boolean )			throws org.springframework.beans.factory.support.BeansException { final java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.Object java.lang.Object ; java.lang.Object java.lang.Object = getSingleton ( java.lang.String ) ; if ( java.lang.Object != null && java.lang.Object[] == null ) { if ( logger . isDebugEnabled ( ) ) { if ( isSingletonCurrentlyInCreation ( java.lang.String ) ) { logger . debug ( STRING + java.lang.String + STRING ) ; } else { logger . debug ( STRING + java.lang.String + STRING ) ; } } java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , null ) ; } else { if ( boolean ( java.lang.String ) ) { throw new BeanCurrentlyInCreationException ( java.lang.String ) ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null && ! boolean ( java.lang.String ) ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.Object[] != null ) { return ( T ) org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.String , java.lang.Object[] ) ; } else { return org.springframework.beans.factory.support.BeanFactory . getBean ( java.lang.String , java.lang.Class<T> ) ; } } if ( ! boolean ) { void ( java.lang.String ) ; } try { final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; void ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , java.lang.Object[] ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.RootBeanDefinition . getDependsOn ( ) ; if ( java.lang.String[] != null ) { for ( java.lang.String java.lang.String : java.lang.String[] ) { if ( isDependent ( java.lang.String , java.lang.String ) ) { throw new BeanCreationException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } registerDependentBean ( java.lang.String , java.lang.String ) ; java.lang.Object ( java.lang.String ) ; } } if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { java.lang.Object = getSingleton ( java.lang.String , new ObjectFactory < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { try { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { destroySingleton ( java.lang.String ) ; throw org.springframework.beans.factory.support.BeansException ; } } } ) ; java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } else if ( org.springframework.beans.factory.support.RootBeanDefinition . isPrototype ( ) ) { java.lang.Object java.lang.Object = null ; try { void ( java.lang.String ) ; java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } finally { void ( java.lang.String ) ; } java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } else { java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getScope ( ) ; final Scope org.springframework.beans.factory.support.Scope = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.Scope == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } try { java.lang.Object java.lang.Object = org.springframework.beans.factory.support.Scope . get ( java.lang.String , new ObjectFactory < java.lang.Object > ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { void ( java.lang.String ) ; try { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } finally { void ( java.lang.String ) ; } } } ) ; java.lang.Object = java.lang.Object ( java.lang.Object , java.lang.String , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } catch ( java.lang.IllegalStateException java.lang.IllegalStateException ) { throw new BeanCreationException ( java.lang.String , STRING + java.lang.String + STRING + STRING , java.lang.IllegalStateException ) ; } } } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { void ( java.lang.String ) ; throw org.springframework.beans.factory.support.BeansException ; } } if ( java.lang.Class<T> != null && java.lang.Object != null && ! java.lang.Class<T> . boolean ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ) { try { return org.springframework.beans.factory.support.TypeConverter ( ) . convertIfNecessary ( java.lang.Object , java.lang.Class<T> ) ; } catch ( TypeMismatchException org.springframework.beans.factory.support.TypeMismatchException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + ClassUtils . getQualifiedName ( java.lang.Class<T> ) + STRING , org.springframework.beans.factory.support.TypeMismatchException ) ; } throw new BeanNotOfRequiredTypeException ( java.lang.String , java.lang.Class<T> , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } } return ( T ) java.lang.Object ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { try { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } catch ( BeansException org.springframework.beans.factory.support.BeansException ) { destroySingleton ( java.lang.String ) ; throw org.springframework.beans.factory.support.BeansException ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) org.springframework.beans.factory.support.BeansException { void ( java.lang.String ) ; try { return java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object[] ) ; } finally { void ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( containsSingleton ( java.lang.String ) || boolean ( java.lang.String ) ) { return ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) || boolean ( java.lang.String ) ) ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; return ( org.springframework.beans.factory.support.BeanFactory != null && org.springframework.beans.factory.support.BeanFactory . containsBean ( java.lang.String ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof FactoryBean ) { return ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) || ( ( FactoryBean < ? > ) java.lang.Object ) . isSingleton ( ) ) ; } else { return ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ; } } else if ( containsSingleton ( java.lang.String ) ) { return true ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null && ! boolean ( java.lang.String ) ) { return org.springframework.beans.factory.support.BeanFactory . isSingleton ( java.lang.String ( java.lang.String ) ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { if ( boolean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ) { if ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return true ; } FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( FactoryBean < ? > ) java.lang.Object ( FACTORY_BEAN_PREFIX + java.lang.String ) ; return org.springframework.beans.factory.support.FactoryBean<> . isSingleton ( ) ; } else { return ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ; } } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null && ! boolean ( java.lang.String ) ) { return org.springframework.beans.factory.support.BeanFactory . isPrototype ( java.lang.String ( java.lang.String ) ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition . isPrototype ( ) ) { return ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) || boolean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ) ; } if ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return false ; } if ( boolean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ) { final FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( FactoryBean < ? > ) java.lang.Object ( FACTORY_BEAN_PREFIX + java.lang.String ) ; if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { return java.security.AccessController . java.lang.Boolean ( new java.security.PrivilegedAction<java.lang.Boolean> < java.lang.Boolean > ( ) { @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return ( ( org.springframework.beans.factory.support.FactoryBean<> instanceof SmartFactoryBean && ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isPrototype ( ) ) || ! org.springframework.beans.factory.support.FactoryBean<> . isSingleton ( ) ) ; } } , java.security.AccessControlContext ( ) ) ; } else { return ( ( org.springframework.beans.factory.support.FactoryBean<> instanceof SmartFactoryBean && ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isPrototype ( ) ) || ! org.springframework.beans.factory.support.FactoryBean<> . isSingleton ( ) ) ; } } else { return false ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) { return ( ( org.springframework.beans.factory.support.FactoryBean<> instanceof SmartFactoryBean && ( ( SmartFactoryBean < ? > ) org.springframework.beans.factory.support.FactoryBean<> ) . isPrototype ( ) ) || ! org.springframework.beans.factory.support.FactoryBean<> . isSingleton ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , ResolvableType org.springframework.beans.factory.support.ResolvableType ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof FactoryBean ) { if ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( ( FactoryBean < ? > ) java.lang.Object ) ; return ( java.lang.Class<> != null && org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ) ; } else { return org.springframework.beans.factory.support.ResolvableType . isInstance ( java.lang.Object ) ; } } else if ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { if ( org.springframework.beans.factory.support.ResolvableType . isInstance ( java.lang.Object ) ) { return true ; } else if ( org.springframework.beans.factory.support.ResolvableType . hasGenerics ( ) && boolean ( java.lang.String ) ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getTargetType ( ) ; if ( java.lang.Class<> != null && java.lang.Class<> != ClassUtils . getUserClass ( java.lang.Object ) && org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolve ( ) ; return ( java.lang.Class<> == null || java.lang.Class<> . boolean ( java.lang.Object ) ) ; } } } return false ; } else if ( containsSingleton ( java.lang.String ) && ! boolean ( java.lang.String ) ) { return false ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null && ! boolean ( java.lang.String ) ) { return org.springframework.beans.factory.support.BeanFactory . isTypeMatch ( java.lang.String ( java.lang.String ) , org.springframework.beans.factory.support.ResolvableType ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.ResolvableType . resolve ( ) ; if ( java.lang.Class<> == null ) { java.lang.Class<?> = FactoryBean .class ; } java.lang.Class<?> < ? > [] java.lang.Class<?>[] = ( FactoryBean .class == java.lang.Class<> ? new java.lang.Class<?> < ? > [] { java.lang.Class<> } : new java.lang.Class<?> < ? > [] { FactoryBean .class , java.lang.Class<> } ) ; BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = org.springframework.beans.factory.support.RootBeanDefinition . getDecoratedDefinition ( ) ; if ( org.springframework.beans.factory.support.BeanDefinitionHolder != null && ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) , org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanDefinition ( ) , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; if ( java.lang.Class<> != null && ! FactoryBean .class . boolean ( java.lang.Class<> ) ) { return org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ; } } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; if ( java.lang.Class<> == null ) { return false ; } if ( FactoryBean .class . boolean ( java.lang.Class<> ) ) { if ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Class<> == null ) { return false ; } } } else if ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , FactoryBean .class ) ; if ( java.lang.Class<> == null || ! FactoryBean .class . boolean ( java.lang.Class<> ) ) { return false ; } } ResolvableType org.springframework.beans.factory.support.ResolvableType = mbd . targetType ; if ( org.springframework.beans.factory.support.ResolvableType == null ) { org.springframework.beans.factory.support.ResolvableType = mbd . factoryMethodReturnType ; } if ( org.springframework.beans.factory.support.ResolvableType != null && org.springframework.beans.factory.support.ResolvableType . resolve ( ) == java.lang.Class<> ) { return org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( org.springframework.beans.factory.support.ResolvableType ) ; } return org.springframework.beans.factory.support.ResolvableType . isAssignableFrom ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String , java.lang.Class<?> < ? > java.lang.Class<?> ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { return boolean ( java.lang.String , ResolvableType . forRawClass ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; if ( java.lang.Object != null ) { if ( java.lang.Object instanceof FactoryBean && ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return java.lang.Class<?> ( ( FactoryBean < ? > ) java.lang.Object ) ; } else { return java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ; } } else if ( containsSingleton ( java.lang.String ) && ! boolean ( java.lang.String ) ) { return null ; } BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null && ! boolean ( java.lang.String ) ) { return org.springframework.beans.factory.support.BeanFactory . getType ( java.lang.String ( java.lang.String ) ) ; } RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; BeanDefinitionHolder org.springframework.beans.factory.support.BeanDefinitionHolder = org.springframework.beans.factory.support.RootBeanDefinition . getDecoratedDefinition ( ) ; if ( org.springframework.beans.factory.support.BeanDefinitionHolder != null && ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) , org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanDefinition ( ) , org.springframework.beans.factory.support.RootBeanDefinition ) ; java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( org.springframework.beans.factory.support.BeanDefinitionHolder . getBeanName ( ) , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Class<> != null && ! FactoryBean .class . boolean ( java.lang.Class<> ) ) { return java.lang.Class<> ; } } java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( java.lang.Class<> != null && FactoryBean .class . boolean ( java.lang.Class<> ) ) { if ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } else { return java.lang.Class<> ; } } else { return ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ? java.lang.Class<> : null ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> <> ( ) ; boolean boolean = java.lang.String . boolean ( FACTORY_BEAN_PREFIX ) ; java.lang.String java.lang.String = java.lang.String ; if ( boolean ) { java.lang.String = FACTORY_BEAN_PREFIX + java.lang.String ; } if ( ! java.lang.String . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } java.lang.String [] java.lang.String[] = super. getAliases ( java.lang.String ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { java.lang.String java.lang.String = ( boolean ? FACTORY_BEAN_PREFIX : STRING ) + java.lang.String ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { java.util.List<java.lang.String> . boolean ( java.lang.String ) ; } } if ( ! containsSingleton ( java.lang.String ) && ! boolean ( java.lang.String ) ) { BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory != null ) { java.util.List<java.lang.String> . boolean ( java.util.Arrays . java.util.List ( org.springframework.beans.factory.support.BeanFactory . getAliases ( java.lang.String ) ) ) ; } } return StringUtils . toStringArray ( java.util.List<java.lang.String> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.BeanFactory org.springframework.beans.factory.support.BeanFactory ( ) { return this . org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; return ( ( containsSingleton ( java.lang.String ) || boolean ( java.lang.String ) ) && ( ! BeanFactoryUtils . isFactoryDereference ( java.lang.String ) || boolean ( java.lang.String ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanFactory org.springframework.beans.factory.support.BeanFactory ) { if ( this . org.springframework.beans.factory.support.BeanFactory != null && this . org.springframework.beans.factory.support.BeanFactory != org.springframework.beans.factory.support.BeanFactory ) { throw new java.lang.IllegalStateException ( STRING + this . org.springframework.beans.factory.support.BeanFactory ) ; } this . org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = ( java.lang.ClassLoader != null ? java.lang.ClassLoader : ClassUtils . getDefaultClassLoader ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.ClassLoader java.lang.ClassLoader ) { this . java.lang.ClassLoader = java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.ClassLoader java.lang.ClassLoader ( ) { return this . java.lang.ClassLoader ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanExpressionResolver org.springframework.beans.factory.support.BeanExpressionResolver ) { this . org.springframework.beans.factory.support.BeanExpressionResolver = org.springframework.beans.factory.support.BeanExpressionResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.BeanExpressionResolver org.springframework.beans.factory.support.BeanExpressionResolver ( ) { return this . org.springframework.beans.factory.support.BeanExpressionResolver ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConversionService org.springframework.beans.factory.support.ConversionService ) { this . org.springframework.beans.factory.support.ConversionService = org.springframework.beans.factory.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.ConversionService org.springframework.beans.factory.support.ConversionService ( ) { return this . org.springframework.beans.factory.support.ConversionService ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistrar org.springframework.beans.factory.support.PropertyEditorRegistrar ) { Assert . notNull ( org.springframework.beans.factory.support.PropertyEditorRegistrar , STRING ) ; this . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> . add ( org.springframework.beans.factory.support.PropertyEditorRegistrar ) ; }  <METHOD_END>
<METHOD_START> public java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> < PropertyEditorRegistrar > java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> ( ) { return this . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > java.lang.Class<? extends java.beans.PropertyEditor> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.lang.Class<? extends java.beans.PropertyEditor> ( java.lang.Class<> , java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { void ( org.springframework.beans.factory.support.PropertyEditorRegistry ) ; }  <METHOD_END>
<METHOD_START> public java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> < java.lang.Class<?> < ? > , java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > > java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> ( ) { return this . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( TypeConverter org.springframework.beans.factory.support.TypeConverter ) { this . org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.TypeConverter ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.TypeConverter org.springframework.beans.factory.support.TypeConverter ( ) { return this . org.springframework.beans.factory.support.TypeConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.TypeConverter org.springframework.beans.factory.support.TypeConverter ( ) { TypeConverter org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.TypeConverter ( ) ; if ( org.springframework.beans.factory.support.TypeConverter != null ) { return org.springframework.beans.factory.support.TypeConverter ; } else { SimpleTypeConverter org.springframework.beans.factory.support.SimpleTypeConverter = new SimpleTypeConverter ( ) ; org.springframework.beans.factory.support.SimpleTypeConverter . setConversionService ( org.springframework.beans.factory.support.ConversionService ( ) ) ; void ( org.springframework.beans.factory.support.SimpleTypeConverter ) ; return org.springframework.beans.factory.support.SimpleTypeConverter ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( StringValueResolver org.springframework.beans.factory.support.StringValueResolver ) { Assert . notNull ( org.springframework.beans.factory.support.StringValueResolver , STRING ) ; this . java.util.List<org.springframework.beans.factory.support.StringValueResolver> . add ( org.springframework.beans.factory.support.StringValueResolver ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ! this . java.util.List<org.springframework.beans.factory.support.StringValueResolver> . isEmpty ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { if ( java.lang.String == null ) { return null ; } java.lang.String java.lang.String = java.lang.String ; for ( StringValueResolver org.springframework.beans.factory.support.StringValueResolver : this . java.util.List<org.springframework.beans.factory.support.StringValueResolver> ) { java.lang.String = org.springframework.beans.factory.support.StringValueResolver . resolveStringValue ( java.lang.String ) ; if ( java.lang.String == null ) { return null ; } } return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( BeanPostProcessor org.springframework.beans.factory.support.BeanPostProcessor ) { Assert . notNull ( org.springframework.beans.factory.support.BeanPostProcessor , STRING ) ; this . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> . remove ( org.springframework.beans.factory.support.BeanPostProcessor ) ; this . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> . add ( org.springframework.beans.factory.support.BeanPostProcessor ) ; if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof InstantiationAwareBeanPostProcessor ) { this . boolean = true ; } if ( org.springframework.beans.factory.support.BeanPostProcessor instanceof DestructionAwareBeanPostProcessor ) { this . boolean = true ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> . size ( ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> < BeanPostProcessor > java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ( ) { return this . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return this . boolean ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , Scope org.springframework.beans.factory.support.Scope ) { Assert . notNull ( java.lang.String , STRING ) ; Assert . notNull ( org.springframework.beans.factory.support.Scope , STRING ) ; if ( SCOPE_SINGLETON . equals ( java.lang.String ) || SCOPE_PROTOTYPE . equals ( java.lang.String ) ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } Scope org.springframework.beans.factory.support.Scope = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . put ( java.lang.String , org.springframework.beans.factory.support.Scope ) ; if ( org.springframework.beans.factory.support.Scope != null && org.springframework.beans.factory.support.Scope != org.springframework.beans.factory.support.Scope ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.Scope + STRING + org.springframework.beans.factory.support.Scope + STRING ) ; } } else { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + java.lang.String + STRING + org.springframework.beans.factory.support.Scope + STRING ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return StringUtils . toStringArray ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . keySet ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.Scope org.springframework.beans.factory.support.Scope ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; return this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . get ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( SecurityContextProvider org.springframework.beans.factory.support.SecurityContextProvider ) { this . org.springframework.beans.factory.support.SecurityContextProvider = org.springframework.beans.factory.support.SecurityContextProvider ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.AccessControlContext java.security.AccessControlContext ( ) { return ( this . org.springframework.beans.factory.support.SecurityContextProvider != null ? this . org.springframework.beans.factory.support.SecurityContextProvider . getAccessControlContext ( ) : java.security.AccessController . java.security.AccessControlContext ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableBeanFactory org.springframework.beans.factory.support.ConfigurableBeanFactory ) { Assert . notNull ( org.springframework.beans.factory.support.ConfigurableBeanFactory , STRING ) ; void ( org.springframework.beans.factory.support.ConfigurableBeanFactory . getBeanClassLoader ( ) ) ; void ( org.springframework.beans.factory.support.ConfigurableBeanFactory . isCacheBeanMetadata ( ) ) ; void ( org.springframework.beans.factory.support.ConfigurableBeanFactory . getBeanExpressionResolver ( ) ) ; void ( org.springframework.beans.factory.support.ConfigurableBeanFactory . getConversionService ( ) ) ; if ( org.springframework.beans.factory.support.ConfigurableBeanFactory instanceof org.springframework.beans.factory.support.AbstractBeanFactory ) { org.springframework.beans.factory.support.AbstractBeanFactory org.springframework.beans.factory.support.AbstractBeanFactory = ( org.springframework.beans.factory.support.AbstractBeanFactory ) org.springframework.beans.factory.support.ConfigurableBeanFactory ; this . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> . addAll ( org.springframework.beans.factory.support.AbstractBeanFactory . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> ) ; this . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . void ( org.springframework.beans.factory.support.AbstractBeanFactory . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> ) ; this . org.springframework.beans.factory.support.TypeConverter = org.springframework.beans.factory.support.AbstractBeanFactory . org.springframework.beans.factory.support.TypeConverter ; this . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> . addAll ( org.springframework.beans.factory.support.AbstractBeanFactory . java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ) ; this . boolean = this . boolean || org.springframework.beans.factory.support.AbstractBeanFactory . boolean ; this . boolean = this . boolean || org.springframework.beans.factory.support.AbstractBeanFactory . boolean ; this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . putAll ( org.springframework.beans.factory.support.AbstractBeanFactory . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> ) ; this . org.springframework.beans.factory.support.SecurityContextProvider = org.springframework.beans.factory.support.AbstractBeanFactory . org.springframework.beans.factory.support.SecurityContextProvider ; } else { void ( org.springframework.beans.factory.support.ConfigurableBeanFactory . getTypeConverter ( ) ) ; java.lang.String [] java.lang.String[] = org.springframework.beans.factory.support.ConfigurableBeanFactory . getRegisteredScopeNames ( ) ; for ( java.lang.String java.lang.String : java.lang.String[] ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . put ( java.lang.String , org.springframework.beans.factory.support.ConfigurableBeanFactory . getRegisteredScope ( java.lang.String ) ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.beans.factory.support.BeanDefinition org.springframework.beans.factory.support.BeanDefinition ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( ! boolean ( java.lang.String ) && org.springframework.beans.factory.support.BeanFactory ( ) instanceof ConfigurableBeanFactory ) { return ( ( ConfigurableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ( ) ) . getMergedBeanDefinition ( java.lang.String ) ; } return org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.NoSuchBeanDefinitionException { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; java.lang.Object java.lang.Object = getSingleton ( java.lang.String , false ) ; if ( java.lang.Object != null ) { return ( java.lang.Object instanceof FactoryBean ) ; } else if ( containsSingleton ( java.lang.String ) ) { return false ; } if ( ! boolean ( java.lang.String ) && org.springframework.beans.factory.support.BeanFactory ( ) instanceof ConfigurableBeanFactory ) { return ( ( ConfigurableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ( ) ) . isFactoryBean ( java.lang.String ) ; } return boolean ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.String java.lang.String ) { return ( isSingletonCurrentlyInCreation ( java.lang.String ) || boolean ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . java.lang.ThreadLocal<java.lang.Object> . java.lang.Object ( ) ; return ( java.lang.Object != null && ( java.lang.Object . boolean ( java.lang.String ) || ( java.lang.Object instanceof java.util.Set && ( ( java.util.Set<?> < ? > ) java.lang.Object ) . boolean ( java.lang.String ) ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . java.lang.ThreadLocal<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == null ) { this . java.lang.ThreadLocal<java.lang.Object> . void ( java.lang.String ) ; } else if ( java.lang.Object instanceof java.lang.String ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.HashSet<java.lang.String> <> ( NUMBER ) ; java.util.Set<java.lang.String> . boolean ( ( java.lang.String ) java.lang.Object ) ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; this . java.lang.ThreadLocal<java.lang.Object> . void ( java.util.Set<java.lang.String> ) ; } else { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = ( java.util.Set<java.lang.String> < java.lang.String > ) java.lang.Object ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) protected void void ( java.lang.String java.lang.String ) { java.lang.Object java.lang.Object = this . java.lang.ThreadLocal<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object instanceof java.lang.String ) { this . java.lang.ThreadLocal<java.lang.Object> . void ( ) ; } else if ( java.lang.Object instanceof java.util.Set ) { java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = ( java.util.Set<java.lang.String> < java.lang.String > ) java.lang.Object ; java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; if ( java.util.Set<java.lang.String> . boolean ( ) ) { this . java.lang.ThreadLocal<java.lang.Object> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { void ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { new DisposableBeanAdapter ( java.lang.Object , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ( ) , java.security.AccessControlContext ( ) ) . destroy ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) || org.springframework.beans.factory.support.RootBeanDefinition . isPrototype ( ) ) { throw new java.lang.IllegalArgumentException ( STRING + java.lang.String + STRING ) ; } java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getScope ( ) ; Scope org.springframework.beans.factory.support.Scope = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.Scope == null ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String + STRING ) ; } java.lang.Object java.lang.Object = org.springframework.beans.factory.support.Scope . remove ( java.lang.String ) ; if ( java.lang.Object != null ) { void ( java.lang.String , java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ; } }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return canonicalName ( BeanFactoryUtils . transformedBeanName ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.String java.lang.String ( java.lang.String java.lang.String ) { java.lang.String java.lang.String = java.lang.String ( java.lang.String ) ; if ( java.lang.String . boolean ( FACTORY_BEAN_PREFIX ) ) { java.lang.String = FACTORY_BEAN_PREFIX + java.lang.String ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> protected void void ( BeanWrapper org.springframework.beans.factory.support.BeanWrapper ) { org.springframework.beans.factory.support.BeanWrapper . setConversionService ( org.springframework.beans.factory.support.ConversionService ( ) ) ; void ( org.springframework.beans.factory.support.BeanWrapper ) ; }  <METHOD_END>
<METHOD_START> protected void void ( PropertyEditorRegistry org.springframework.beans.factory.support.PropertyEditorRegistry ) { PropertyEditorRegistrySupport org.springframework.beans.factory.support.PropertyEditorRegistrySupport = ( org.springframework.beans.factory.support.PropertyEditorRegistry instanceof PropertyEditorRegistrySupport ? ( PropertyEditorRegistrySupport ) org.springframework.beans.factory.support.PropertyEditorRegistry : null ) ; if ( org.springframework.beans.factory.support.PropertyEditorRegistrySupport != null ) { org.springframework.beans.factory.support.PropertyEditorRegistrySupport . useConfigValueEditors ( ) ; } if ( ! this . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> . isEmpty ( ) ) { for ( PropertyEditorRegistrar org.springframework.beans.factory.support.PropertyEditorRegistrar : this . java.util.Set<org.springframework.beans.factory.support.PropertyEditorRegistrar> ) { try { org.springframework.beans.factory.support.PropertyEditorRegistrar . registerCustomEditors ( org.springframework.beans.factory.support.PropertyEditorRegistry ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { java.lang.Throwable java.lang.Throwable = org.springframework.beans.factory.support.BeanCreationException . getMostSpecificCause ( ) ; if ( java.lang.Throwable instanceof BeanCurrentlyInCreationException ) { BeanCreationException org.springframework.beans.factory.support.BeanCreationException = ( BeanCreationException ) java.lang.Throwable ; if ( isCurrentlyInCreation ( org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.beans.factory.support.PropertyEditorRegistrar . getClass ( ) . getName ( ) + STRING + org.springframework.beans.factory.support.BeanCreationException . getBeanName ( ) + STRING + org.springframework.beans.factory.support.BeanCreationException . getMessage ( ) ) ; } onSuppressedException ( org.springframework.beans.factory.support.BeanCreationException ) ; continue; } } throw org.springframework.beans.factory.support.BeanCreationException ; } } } if ( ! this . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . boolean ( ) ) { for ( java.util.Map . java.util.Map.Entry<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> < java.lang.Class<?> < ? > , java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > > java.util.Map.Entry<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> : this . java.util.Map<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.util.Set<java.util.Map.Entry<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>>> ( ) ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.util.Map.Entry<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.lang.Class<?> ( ) ; java.lang.Class<? extends java.beans.PropertyEditor> < ? extends java.beans.PropertyEditor > java.lang.Class<? extends java.beans.PropertyEditor> = java.util.Map.Entry<java.lang.Class<?>,java.lang.Class<? extends java.beans.PropertyEditor>> . java.lang.Class<? extends java.beans.PropertyEditor> ( ) ; org.springframework.beans.factory.support.PropertyEditorRegistry . registerCustomEditor ( java.lang.Class<> , BeanUtils . instantiateClass ( java.lang.Class<> ) ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> . get ( java.lang.String ) ; if ( org.springframework.beans.factory.support.RootBeanDefinition != null ) { return org.springframework.beans.factory.support.RootBeanDefinition ; } return org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { return org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String , org.springframework.beans.factory.support.BeanDefinition , null ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.beans.factory.support.RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition , BeanDefinition org.springframework.beans.factory.support.BeanDefinition )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> ) { RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition = null ; if ( org.springframework.beans.factory.support.BeanDefinition == null ) { org.springframework.beans.factory.support.RootBeanDefinition = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> . get ( java.lang.String ) ; } if ( org.springframework.beans.factory.support.RootBeanDefinition == null ) { if ( org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) == null ) { if ( org.springframework.beans.factory.support.BeanDefinition instanceof RootBeanDefinition ) { org.springframework.beans.factory.support.RootBeanDefinition = ( ( RootBeanDefinition ) org.springframework.beans.factory.support.BeanDefinition ) . cloneBeanDefinition ( ) ; } else { org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanDefinition ) ; } } else { BeanDefinition org.springframework.beans.factory.support.BeanDefinition ; try { java.lang.String java.lang.String = java.lang.String ( org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) ) ; if ( ! java.lang.String . boolean ( java.lang.String ) ) { org.springframework.beans.factory.support.BeanDefinition = org.springframework.beans.factory.support.BeanDefinition ( java.lang.String ) ; } else { BeanFactory org.springframework.beans.factory.support.BeanFactory = org.springframework.beans.factory.support.BeanFactory ( ) ; if ( org.springframework.beans.factory.support.BeanFactory instanceof ConfigurableBeanFactory ) { org.springframework.beans.factory.support.BeanDefinition = ( ( ConfigurableBeanFactory ) org.springframework.beans.factory.support.BeanFactory ) . getMergedBeanDefinition ( java.lang.String ) ; } else { throw new NoSuchBeanDefinitionException ( java.lang.String , STRING + java.lang.String + STRING + java.lang.String + STRING ) ; } } } catch ( NoSuchBeanDefinitionException org.springframework.beans.factory.support.NoSuchBeanDefinitionException ) { throw new BeanDefinitionStoreException ( org.springframework.beans.factory.support.BeanDefinition . getResourceDescription ( ) , java.lang.String , STRING + org.springframework.beans.factory.support.BeanDefinition . getParentName ( ) + STRING , org.springframework.beans.factory.support.NoSuchBeanDefinitionException ) ; } org.springframework.beans.factory.support.RootBeanDefinition = new RootBeanDefinition ( org.springframework.beans.factory.support.BeanDefinition ) ; org.springframework.beans.factory.support.RootBeanDefinition . overrideFrom ( org.springframework.beans.factory.support.BeanDefinition ) ; } if ( ! StringUtils . hasLength ( org.springframework.beans.factory.support.RootBeanDefinition . getScope ( ) ) ) { org.springframework.beans.factory.support.RootBeanDefinition . setScope ( RootBeanDefinition . SCOPE_SINGLETON ) ; } if ( org.springframework.beans.factory.support.BeanDefinition != null && ! org.springframework.beans.factory.support.BeanDefinition . isSingleton ( ) && org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { org.springframework.beans.factory.support.RootBeanDefinition . setScope ( org.springframework.beans.factory.support.BeanDefinition . getScope ( ) ) ; } if ( org.springframework.beans.factory.support.BeanDefinition == null && boolean ( ) ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> . put ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; } } return org.springframework.beans.factory.support.RootBeanDefinition ; } }  <METHOD_END>
<METHOD_START> protected void void ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String java.lang.String , java.lang.Object [] java.lang.Object[] )			throws org.springframework.beans.factory.support.BeanDefinitionStoreException { if ( org.springframework.beans.factory.support.RootBeanDefinition . isAbstract ( ) ) { throw new BeanIsAbstractException ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> . remove ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( ) { java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> . keySet ( ) . iterator ( ) ; while ( java.util.Iterator<java.lang.String> . boolean ( ) ) { if ( ! boolean ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) ) { java.util.Iterator<java.lang.String> . void ( ) ; } } }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( final RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String java.lang.String , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws org.springframework.beans.factory.support.CannotLoadBeanClassException { try { if ( org.springframework.beans.factory.support.RootBeanDefinition . hasBeanClass ( ) ) { return org.springframework.beans.factory.support.RootBeanDefinition . getBeanClass ( ) ; } if ( java.lang.System . java.lang.SecurityManager ( ) != null ) { return java.security.AccessController . java.lang.Class<?> ( new java.security.PrivilegedExceptionAction<java.lang.Class<?>> < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) java.lang.Exception { return java.lang.Class<?> ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; } } , java.security.AccessControlContext ( ) ) ; } else { return java.lang.Class<?> ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; } } catch ( java.security.PrivilegedActionException java.security.PrivilegedActionException ) { java.lang.ClassNotFoundException java.lang.ClassNotFoundException = ( java.lang.ClassNotFoundException ) java.security.PrivilegedActionException . java.lang.Exception ( ) ; throw new CannotLoadBeanClassException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) , java.lang.ClassNotFoundException ) ; } catch ( java.lang.ClassNotFoundException java.lang.ClassNotFoundException ) { throw new CannotLoadBeanClassException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) , java.lang.ClassNotFoundException ) ; } catch ( java.lang.LinkageError java.lang.LinkageError ) { throw new CannotLoadBeanClassException ( org.springframework.beans.factory.support.RootBeanDefinition . getResourceDescription ( ) , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) , java.lang.LinkageError ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( ) java.lang.Exception { return java.lang.Class<?> ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.Class<?> < ? > java.lang.Class<?> ( RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > ... java.lang.Class<?>[] )			throws java.lang.ClassNotFoundException { java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ( ) ; java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ; if ( ! ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { java.lang.ClassLoader java.lang.ClassLoader = java.lang.ClassLoader ( ) ; if ( java.lang.ClassLoader != null ) { java.lang.ClassLoader = java.lang.ClassLoader ; if ( java.lang.ClassLoader instanceof DecoratingClassLoader ) { DecoratingClassLoader org.springframework.beans.factory.support.DecoratingClassLoader = ( DecoratingClassLoader ) java.lang.ClassLoader ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { org.springframework.beans.factory.support.DecoratingClassLoader . excludeClass ( java.lang.Class<> . java.lang.String ( ) ) ; } } } } java.lang.String java.lang.String = org.springframework.beans.factory.support.RootBeanDefinition . getBeanClassName ( ) ; if ( java.lang.String != null ) { java.lang.Object java.lang.Object = java.lang.Object ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition ) ; if ( ! java.lang.String . boolean ( java.lang.Object ) ) { if ( java.lang.Object instanceof java.lang.Class ) { return ( java.lang.Class<?> < ? > ) java.lang.Object ; } else if ( java.lang.Object instanceof java.lang.String ) { return ClassUtils . forName ( ( java.lang.String ) java.lang.Object , java.lang.ClassLoader ) ; } else { throw new java.lang.IllegalStateException ( STRING + java.lang.Object ) ; } } if ( java.lang.ClassLoader != java.lang.ClassLoader ) { return ClassUtils . forName ( java.lang.String , java.lang.ClassLoader ) ; } } return org.springframework.beans.factory.support.RootBeanDefinition . resolveBeanClass ( java.lang.ClassLoader ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.String java.lang.String , BeanDefinition org.springframework.beans.factory.support.BeanDefinition ) { if ( this . org.springframework.beans.factory.support.BeanExpressionResolver == null ) { return java.lang.String ; } Scope org.springframework.beans.factory.support.Scope = ( org.springframework.beans.factory.support.BeanDefinition != null ? org.springframework.beans.factory.support.Scope ( org.springframework.beans.factory.support.BeanDefinition . getScope ( ) ) : null ) ; return this . org.springframework.beans.factory.support.BeanExpressionResolver . evaluate ( java.lang.String , new BeanExpressionContext ( this , org.springframework.beans.factory.support.Scope ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.beans.factory.support.RootBeanDefinition . getTargetType ( ) ; if ( java.lang.Class<> != null ) { return java.lang.Class<> ; } if ( org.springframework.beans.factory.support.RootBeanDefinition . getFactoryMethodName ( ) != null ) { return null ; } return java.lang.Class<?> ( org.springframework.beans.factory.support.RootBeanDefinition , java.lang.String , java.lang.Class<?>[] ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.lang.Class<?> < ? > java.lang.Class<?> = java.lang.Class<?> ( java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , FactoryBean .class ) ; return ( java.lang.Class<> != null && FactoryBean .class . boolean ( java.lang.Class<> ) ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Class<?> < ? > java.lang.Class<?> ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { return null ; } try { FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = java.lang.Object ( FACTORY_BEAN_PREFIX + java.lang.String , FactoryBean .class , null , true ) ; return java.lang.Class<?> ( org.springframework.beans.factory.support.FactoryBean<> ) ; } catch ( BeanCreationException org.springframework.beans.factory.support.BeanCreationException ) { if ( org.springframework.beans.factory.support.BeanCreationException instanceof BeanCurrentlyInCreationException ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.beans.factory.support.BeanCreationException ) ; } } else if ( org.springframework.beans.factory.support.RootBeanDefinition . isLazyInit ( ) ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STRING + org.springframework.beans.factory.support.BeanCreationException ) ; } } else { if ( logger . isWarnEnabled ( ) ) { logger . warn ( STRING + org.springframework.beans.factory.support.BeanCreationException ) ; } } onSuppressedException ( org.springframework.beans.factory.support.BeanCreationException ) ; return null ; } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { if ( ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> ) { if ( ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { void ( java.lang.String ) ; this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } } } }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String ) { synchronized ( this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.RootBeanDefinition> ) { this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { return this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.String java.lang.String ) { if ( ! this . java.util.Set<java.lang.String> . boolean ( java.lang.String ) ) { removeSingleton ( java.lang.String ) ; return true ; } else { return false ; } }  <METHOD_END>
<METHOD_START> protected boolean boolean ( ) { return ! this . java.util.Set<java.lang.String> . boolean ( ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { if ( BeanFactoryUtils . isFactoryDereference ( java.lang.String ) && ! ( java.lang.Object instanceof FactoryBean ) ) { throw new BeanIsNotAFactoryException ( java.lang.String ( java.lang.String ) , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) ; } if ( ! ( java.lang.Object instanceof FactoryBean ) || BeanFactoryUtils . isFactoryDereference ( java.lang.String ) ) { return java.lang.Object ; } java.lang.Object java.lang.Object = null ; if ( org.springframework.beans.factory.support.RootBeanDefinition == null ) { java.lang.Object = getCachedObjectForFactoryBean ( java.lang.String ) ; } if ( java.lang.Object == null ) { FactoryBean < ? > org.springframework.beans.factory.support.FactoryBean<?> = ( FactoryBean < ? > ) java.lang.Object ; if ( org.springframework.beans.factory.support.RootBeanDefinition == null && boolean ( java.lang.String ) ) { org.springframework.beans.factory.support.RootBeanDefinition = org.springframework.beans.factory.support.RootBeanDefinition ( java.lang.String ) ; } boolean boolean = ( org.springframework.beans.factory.support.RootBeanDefinition != null && org.springframework.beans.factory.support.RootBeanDefinition . isSynthetic ( ) ) ; java.lang.Object = getObjectFromFactoryBean ( org.springframework.beans.factory.support.FactoryBean<> , java.lang.String , ! boolean ) ; } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( java.lang.String java.lang.String ) { return isAlias ( java.lang.String ) || boolean ( java.lang.String ) || hasDependentBean ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected boolean boolean ( java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { return ( java.lang.Object != null && ( DisposableBeanAdapter . hasDestroyMethod ( java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) || ( boolean ( ) && DisposableBeanAdapter . hasApplicableProcessors ( java.lang.Object , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ( ) ) ) ) ) ; }  <METHOD_END>
<METHOD_START> protected void void ( java.lang.String java.lang.String , java.lang.Object java.lang.Object , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition ) { java.security.AccessControlContext java.security.AccessControlContext = ( java.lang.System . java.lang.SecurityManager ( ) != null ? java.security.AccessControlContext ( ) : null ) ; if ( ! org.springframework.beans.factory.support.RootBeanDefinition . isPrototype ( ) && boolean ( java.lang.Object , org.springframework.beans.factory.support.RootBeanDefinition ) ) { if ( org.springframework.beans.factory.support.RootBeanDefinition . isSingleton ( ) ) { registerDisposableBean ( java.lang.String , new DisposableBeanAdapter ( java.lang.Object , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ( ) , java.security.AccessControlContext ) ) ; } else { Scope org.springframework.beans.factory.support.Scope = this . java.util.Map<java.lang.String,org.springframework.beans.factory.support.Scope> . get ( org.springframework.beans.factory.support.RootBeanDefinition . getScope ( ) ) ; if ( org.springframework.beans.factory.support.Scope == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.beans.factory.support.RootBeanDefinition . getScope ( ) + STRING ) ; } org.springframework.beans.factory.support.Scope . registerDestructionCallback ( java.lang.String , new DisposableBeanAdapter ( java.lang.Object , java.lang.String , org.springframework.beans.factory.support.RootBeanDefinition , java.util.List<org.springframework.beans.factory.support.BeanPostProcessor> ( ) , java.security.AccessControlContext ) ) ; } } }  <METHOD_END>
<METHOD_START> protected abstract boolean boolean ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> protected abstract org.springframework.beans.factory.support.BeanDefinition org.springframework.beans.factory.support.BeanDefinition ( java.lang.String java.lang.String ) throws org.springframework.beans.factory.support.BeansException ;  <METHOD_END>
<METHOD_START> protected abstract java.lang.Object java.lang.Object ( java.lang.String java.lang.String , RootBeanDefinition org.springframework.beans.factory.support.RootBeanDefinition , java.lang.Object [] java.lang.Object[] )			throws org.springframework.beans.factory.support.BeanCreationException ;  <METHOD_END>
