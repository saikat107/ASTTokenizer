<METHOD_START> @ Before public void void ( ) javax.management.MalformedObjectNameException { this . javax.management.MBeanServer = java.lang.management.ManagementFactory . javax.management.MBeanServer ( ) ; }  <METHOD_END>
<METHOD_START> @ After public void void ( ) { if ( this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext != null ) { this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext . close ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.MalformedObjectNameException , javax.management.InstanceNotFoundException { void ( ) ; this . org.springframework.boot.autoconfigure.admin.ExpectedException . expect ( javax.management.InstanceNotFoundException .class ) ; this . javax.management.MBeanServer . javax.management.ObjectInstance ( javax.management.ObjectName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { void ( java.lang.String ) ; javax.management.ObjectName javax.management.ObjectName = javax.management.ObjectName ( ) ; javax.management.ObjectInstance javax.management.ObjectInstance = this . javax.management.MBeanServer . javax.management.ObjectInstance ( javax.management.ObjectName ) ; assertThat ( javax.management.ObjectInstance ) . as ( STRING ) . isNotNull ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) javax.management.InstanceNotFoundException { java.lang.String java.lang.String = STRING ; java.lang.System . java.lang.String ( java.lang.String , java.lang.String ) ; try { void ( java.lang.String ) ; try { this . javax.management.MBeanServer . javax.management.ObjectInstance ( javax.management.ObjectName ( java.lang.String ) ) ; } catch ( javax.management.InstanceNotFoundException javax.management.InstanceNotFoundException ) { fail ( STRING ) ; } this . org.springframework.boot.autoconfigure.admin.ExpectedException . expect ( javax.management.InstanceNotFoundException .class ) ; this . javax.management.MBeanServer . javax.management.ObjectInstance ( javax.management.ObjectName ( ) ) ; } finally { java.lang.System . java.lang.String ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = new SpringApplicationBuilder ( ) . sources ( ServletWebServerFactoryAutoConfiguration .class , DispatcherServletAutoConfiguration .class , JmxAutoConfiguration .class , SpringApplicationAdminJmxAutoConfiguration .class ) . run ( STRING + java.lang.String , STRING ) ; assertThat ( this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext ) . isInstanceOf ( ServletWebServerApplicationContext .class ) ; assertThat ( this . javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName ( ) , STRING ) ) . isEqualTo ( java.lang.Boolean . java.lang.Boolean ) ; int int = ( ( ServletWebServerApplicationContext ) this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext ) . getWebServer ( ) . getPort ( ) ; java.lang.String java.lang.String = java.lang.String ( javax.management.ObjectName ( ) , STRING ) ; assertThat ( java.lang.String ) . isEqualTo ( java.lang.String . java.lang.String ( int ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SpringApplicationBuilder org.springframework.boot.autoconfigure.admin.SpringApplicationBuilder = new SpringApplicationBuilder ( ) . web ( WebApplicationType . NONE ) . sources ( JmxAutoConfiguration .class , SpringApplicationAdminJmxAutoConfiguration .class ) ; SpringApplicationBuilder org.springframework.boot.autoconfigure.admin.SpringApplicationBuilder = org.springframework.boot.autoconfigure.admin.SpringApplicationBuilder . child ( JmxAutoConfiguration .class , SpringApplicationAdminJmxAutoConfiguration .class ) . web ( WebApplicationType . NONE ) ; ConfigurableApplicationContext org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = null ; ConfigurableApplicationContext org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = null ; try { org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = org.springframework.boot.autoconfigure.admin.SpringApplicationBuilder . run ( STRING + java.lang.String ) ; org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = org.springframework.boot.autoconfigure.admin.SpringApplicationBuilder . run ( STRING + java.lang.String ) ; BeanFactoryUtils . beanOfType ( org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext . getBeanFactory ( ) , SpringApplicationAdminMXBeanRegistrar .class ) ; this . org.springframework.boot.autoconfigure.admin.ExpectedException . expect ( NoSuchBeanDefinitionException .class ) ; BeanFactoryUtils . beanOfType ( org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext . getBeanFactory ( ) , SpringApplicationAdminMXBeanRegistrar .class ) ; } finally { if ( org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext != null ) { org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext . close ( ) ; } if ( org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext != null ) { org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext . close ( ) ; } } }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( ) { return javax.management.ObjectName ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private javax.management.ObjectName javax.management.ObjectName ( java.lang.String java.lang.String ) { try { return new javax.management.ObjectName ( java.lang.String ) ; } catch ( javax.management.MalformedObjectNameException javax.management.MalformedObjectNameException ) { throw new java.lang.IllegalStateException ( STRING + java.lang.String , javax.management.MalformedObjectNameException ) ; } }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( javax.management.ObjectName javax.management.ObjectName , java.lang.String java.lang.String ) throws java.lang.Exception { return ( java.lang.String ) this . javax.management.MBeanServer . java.lang.Object ( javax.management.ObjectName , STRING , new java.lang.Object [] { java.lang.String } , new java.lang.String [] { java.lang.String .class . java.lang.String ( ) } ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.admin.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.admin.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.admin.AnnotationConfigApplicationContext . register ( JmxAutoConfiguration .class , SpringApplicationAdminJmxAutoConfiguration .class ) ; org.springframework.boot.autoconfigure.admin.AnnotationConfigApplicationContext . refresh ( ) ; this . org.springframework.boot.autoconfigure.admin.ConfigurableApplicationContext = org.springframework.boot.autoconfigure.admin.AnnotationConfigApplicationContext ; }  <METHOD_END>
