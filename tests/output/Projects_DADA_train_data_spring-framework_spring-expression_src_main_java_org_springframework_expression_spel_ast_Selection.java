<METHOD_START> public void ( boolean boolean , int int , int int , SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl ) { super( int , org.springframework.expression.spel.ast.SpelNodeImpl ); Assert . notNull ( org.springframework.expression.spel.ast.SpelNodeImpl , STRING ) ; this . boolean = boolean ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.expression.spel.ast.TypedValue org.springframework.expression.spel.ast.TypedValue ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { return org.springframework.expression.spel.ast.ValueRef ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.expression.spel.ast.ValueRef org.springframework.expression.spel.ast.ValueRef ( ExpressionState org.springframework.expression.spel.ast.ExpressionState ) throws org.springframework.expression.spel.ast.EvaluationException { TypedValue org.springframework.expression.spel.ast.TypedValue = org.springframework.expression.spel.ast.ExpressionState . getActiveContextObject ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.TypedValue . getValue ( ) ; SpelNodeImpl org.springframework.expression.spel.ast.SpelNodeImpl = this . children [ NUMBER ] ; if ( java.lang.Object instanceof java.util.Map ) { java.util.Map<?,?> < ? , ? > java.util.Map<?,?> = ( java.util.Map<?,?> < ? , ? > ) java.lang.Object ; java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ; java.lang.Object java.lang.Object = null ; for ( java.util.Map . java.util.Map.Entry<?,?> < ? , ? > java.util.Map.Entry<?,?> : java.util.Map<,> . java.util.Set<java.util.Map.Entry<,>> ( ) ) { try { TypedValue org.springframework.expression.spel.ast.TypedValue = new TypedValue ( java.util.Map.Entry<,> ) ; org.springframework.expression.spel.ast.ExpressionState . pushActiveContextObject ( org.springframework.expression.spel.ast.TypedValue ) ; org.springframework.expression.spel.ast.ExpressionState . enterScope ( ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Boolean ) { if ( ( java.lang.Boolean ) java.lang.Object ) { if ( this . int == int ) { java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<,> . getKey ( ) , java.util.Map.Entry<,> . getValue ( ) ) ; return new ValueRef . ValueRef ( new TypedValue ( java.util.Map<java.lang.Object,java.lang.Object> ) , this ) ; } java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.util.Map.Entry<,> . getKey ( ) , java.util.Map.Entry<,> . getValue ( ) ) ; java.lang.Object = java.util.Map.Entry<,> . getKey ( ) ; } } else { throw new SpelEvaluationException ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) , SpelMessage . RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN ) ; } } finally { org.springframework.expression.spel.ast.ExpressionState . popActiveContextObject ( ) ; org.springframework.expression.spel.ast.ExpressionState . exitScope ( ) ; } } if ( ( this . int == int || this . int == int ) && java.util.Map<java.lang.Object,java.lang.Object> . boolean ( ) ) { return new ValueRef . ValueRef ( new TypedValue ( null ) , this ) ; } if ( this . int == int ) { java.util.Map<java.lang.Object,java.lang.Object> < java.lang.Object , java.lang.Object > java.util.Map<java.lang.Object,java.lang.Object> = new java.util.HashMap<java.lang.Object,java.lang.Object> <> ( ) ; java.lang.Object java.lang.Object = java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object ) ; java.util.Map<java.lang.Object,java.lang.Object> . java.lang.Object ( java.lang.Object , java.lang.Object ) ; return new ValueRef . ValueRef ( new TypedValue ( java.util.Map<java.lang.Object,java.lang.Object> ) , this ) ; } return new ValueRef . ValueRef ( new TypedValue ( java.util.Map<java.lang.Object,java.lang.Object> ) , this ) ; } if ( java.lang.Object instanceof java.lang.Iterable || ObjectUtils . isArray ( java.lang.Object ) ) { java.lang.Iterable<?> < ? > java.lang.Iterable<?> = ( java.lang.Object instanceof java.lang.Iterable ? ( java.lang.Iterable<?> < ? > ) java.lang.Object : java.util.Arrays . java.util.List ( ObjectUtils . toObjectArray ( java.lang.Object ) ) ) ; java.util.List<java.lang.Object> < java.lang.Object > java.util.List<java.lang.Object> = new java.util.ArrayList<java.lang.Object> <> ( ) ; int int = NUMBER ; for ( java.lang.Object java.lang.Object : java.lang.Iterable<> ) { try { org.springframework.expression.spel.ast.ExpressionState . pushActiveContextObject ( new TypedValue ( java.lang.Object ) ) ; org.springframework.expression.spel.ast.ExpressionState . enterScope ( STRING , int ) ; java.lang.Object java.lang.Object = org.springframework.expression.spel.ast.SpelNodeImpl . getValueInternal ( org.springframework.expression.spel.ast.ExpressionState ) . getValue ( ) ; if ( java.lang.Object instanceof java.lang.Boolean ) { if ( ( java.lang.Boolean ) java.lang.Object ) { if ( this . int == int ) { return new ValueRef . ValueRef ( new TypedValue ( java.lang.Object ) , this ) ; } java.util.List<java.lang.Object> . boolean ( java.lang.Object ) ; } } else { throw new SpelEvaluationException ( org.springframework.expression.spel.ast.SpelNodeImpl . getStartPosition ( ) , SpelMessage . RESULT_OF_SELECTION_CRITERIA_IS_NOT_BOOLEAN ) ; } int ++ ; } finally { org.springframework.expression.spel.ast.ExpressionState . exitScope ( ) ; org.springframework.expression.spel.ast.ExpressionState . popActiveContextObject ( ) ; } } if ( ( this . int == int || this . int == int ) && java.util.List<java.lang.Object> . boolean ( ) ) { return ValueRef . NullValueRef . INSTANCE ; } if ( this . int == int ) { return new ValueRef . ValueRef ( new TypedValue ( java.util.List<java.lang.Object> . java.lang.Object ( java.util.List<java.lang.Object> . int ( ) - NUMBER ) ) , this ) ; } if ( java.lang.Object instanceof java.lang.Iterable ) { return new ValueRef . ValueRef ( new TypedValue ( java.util.List<java.lang.Object> ) , this ) ; } java.lang.Class<?> < ? > java.lang.Class<?> = ClassUtils . resolvePrimitiveIfNecessary ( org.springframework.expression.spel.ast.TypedValue . getTypeDescriptor ( ) . getElementTypeDescriptor ( ) . getType ( ) ) ; java.lang.Object java.lang.Object = java.lang.reflect.Array . java.lang.Object ( java.lang.Class<> , java.util.List<java.lang.Object> . int ( ) ) ; java.lang.System . void ( java.util.List<java.lang.Object> . java.lang.Object[] ( ) , NUMBER , java.lang.Object , NUMBER , java.util.List<java.lang.Object> . int ( ) ) ; return new ValueRef . ValueRef ( new TypedValue ( java.lang.Object ) , this ) ; } if ( java.lang.Object == null ) { if ( this . boolean ) { return ValueRef . NullValueRef . INSTANCE ; } throw new SpelEvaluationException ( getStartPosition ( ) , SpelMessage . INVALID_TYPE_FOR_SELECTION , STRING ) ; } throw new SpelEvaluationException ( getStartPosition ( ) , SpelMessage . INVALID_TYPE_FOR_SELECTION , java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.StringBuilder java.lang.StringBuilder = new java.lang.StringBuilder ( ) ; switch ( this . int ) { case int : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case int : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; case int : java.lang.StringBuilder . java.lang.StringBuilder ( STRING ) ; break; } return java.lang.StringBuilder . java.lang.StringBuilder ( getChild ( NUMBER ) . toStringAST ( ) ) . append ( STRING ) . toString ( ) ; }  <METHOD_END>
