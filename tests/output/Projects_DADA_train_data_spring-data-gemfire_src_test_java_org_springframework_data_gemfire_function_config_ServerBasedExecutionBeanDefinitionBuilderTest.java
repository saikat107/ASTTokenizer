<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { FunctionExecutionConfiguration org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration = mock ( FunctionExecutionConfiguration .class , STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getFunctionExecutionInterface ( ) ) . thenAnswer ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; } } ) ; ServerBasedExecutionBeanDefinitionBuilder org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder = new ServerBasedExecutionBeanDefinitionBuilder ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) { @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; } } ; BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder = org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder . getGemfireFunctionOperationsBeanDefinitionBuilder ( null ) ; assertThat ( org.springframework.data.gemfire.function.config.BeanDefinitionBuilder , is ( notNullValue ( ) ) ) ; AbstractBeanDefinition org.springframework.data.gemfire.function.config.AbstractBeanDefinition = org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getBeanClass ( ) , is ( equalTo ( java.lang.Object .class ) ) ) ; assertThat ( java.lang.String . java.lang.String ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , RuntimeBeanReference .class ) . getValue ( ) ) , containsString ( GemfireConstants . DEFAULT_GEMFIRE_CACHE_NAME ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getFunctionExecutionInterface ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { FunctionExecutionConfiguration org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration = mock ( FunctionExecutionConfiguration .class , STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getFunctionExecutionInterface ( ) ) . thenAnswer ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; } } ) ; ServerBasedExecutionBeanDefinitionBuilder org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder = new ServerBasedExecutionBeanDefinitionBuilder ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) { @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; } } ; BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder = org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder . getGemfireFunctionOperationsBeanDefinitionBuilder ( null ) ; assertThat ( org.springframework.data.gemfire.function.config.BeanDefinitionBuilder , is ( notNullValue ( ) ) ) ; AbstractBeanDefinition org.springframework.data.gemfire.function.config.AbstractBeanDefinition = org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getBeanClass ( ) , is ( equalTo ( java.lang.Object .class ) ) ) ; assertThat ( java.lang.String . java.lang.String ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , RuntimeBeanReference .class ) . getValue ( ) ) , containsString ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getFunctionExecutionInterface ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { FunctionExecutionConfiguration org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration = mock ( FunctionExecutionConfiguration .class , STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( null ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getFunctionExecutionInterface ( ) ) . thenAnswer ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; } } ) ; ServerBasedExecutionBeanDefinitionBuilder org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder = new ServerBasedExecutionBeanDefinitionBuilder ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) { @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; } } ; BeanDefinitionBuilder org.springframework.data.gemfire.function.config.BeanDefinitionBuilder = org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder . getGemfireFunctionOperationsBeanDefinitionBuilder ( null ) ; assertThat ( org.springframework.data.gemfire.function.config.BeanDefinitionBuilder , is ( notNullValue ( ) ) ) ; AbstractBeanDefinition org.springframework.data.gemfire.function.config.AbstractBeanDefinition = org.springframework.data.gemfire.function.config.BeanDefinitionBuilder . getRawBeanDefinition ( ) ; assertThat ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition , is ( notNullValue ( ) ) ) ; assertThat ( ( java.lang.Class<java.lang.Object> < java.lang.Object > ) org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getBeanClass ( ) , is ( equalTo ( java.lang.Object .class ) ) ) ; assertThat ( java.lang.String . java.lang.String ( org.springframework.data.gemfire.function.config.AbstractBeanDefinition . getConstructorArgumentValues ( ) . getArgumentValue ( NUMBER , RuntimeBeanReference .class ) . getValue ( ) ) , containsString ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getFunctionExecutionInterface ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ Test @ java.lang.SuppressWarnings ( STRING ) public void void ( ) { FunctionExecutionConfiguration org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration = mock ( FunctionExecutionConfiguration .class , STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getAttribute ( eq ( STRING ) ) ) . thenReturn ( STRING ) ; when ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration . getFunctionExecutionInterface ( ) ) . thenAnswer ( new Answer < java.lang.Class<?> < ? > > ( ) { @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; } } ) ; ServerBasedExecutionBeanDefinitionBuilder org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder = new ServerBasedExecutionBeanDefinitionBuilder ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration ) { @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; } } ; org.springframework.data.gemfire.function.config.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; org.springframework.data.gemfire.function.config.ExpectedException . expectCause ( is ( nullValue ( java.lang.Throwable .class ) ) ) ; org.springframework.data.gemfire.function.config.ExpectedException . expectMessage ( is ( equalTo ( STRING + STRING ) ) ) ; org.springframework.data.gemfire.function.config.ServerBasedExecutionBeanDefinitionBuilder . getGemfireFunctionOperationsBeanDefinitionBuilder ( null ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getAttribute ( eq ( STRING ) ) ; verify ( org.springframework.data.gemfire.function.config.FunctionExecutionConfiguration , times ( NUMBER ) ) . getFunctionExecutionInterface ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Class<?> < ? > java.lang.Class<?> ( final InvocationOnMock org.springframework.data.gemfire.function.config.InvocationOnMock ) throws java.lang.Throwable { return java.lang.Object .class ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Class<?> < ? > java.lang.Class<?> ( ) { return java.lang.Object .class ; }  <METHOD_END>
