<METHOD_START> @ Test public void void ( ) { JndiPropertySource org.springframework.jndi.JndiPropertySource = new JndiPropertySource ( STRING ) ; assertThat ( org.springframework.jndi.JndiPropertySource . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final SimpleNamingContext org.springframework.jndi.SimpleNamingContext = new SimpleNamingContext ( ) ; org.springframework.jndi.SimpleNamingContext . bind ( STRING , STRING ) ; JndiTemplate org.springframework.jndi.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return org.springframework.jndi.SimpleNamingContext ; } } ; JndiLocatorDelegate org.springframework.jndi.JndiLocatorDelegate = new JndiLocatorDelegate ( ) ; org.springframework.jndi.JndiLocatorDelegate . setResourceRef ( true ) ; org.springframework.jndi.JndiLocatorDelegate . setJndiTemplate ( org.springframework.jndi.JndiTemplate ) ; JndiPropertySource org.springframework.jndi.JndiPropertySource = new JndiPropertySource ( STRING , org.springframework.jndi.JndiLocatorDelegate ) ; assertThat ( org.springframework.jndi.JndiPropertySource . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return org.springframework.jndi.SimpleNamingContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { final SimpleNamingContext org.springframework.jndi.SimpleNamingContext = new SimpleNamingContext ( ) ; org.springframework.jndi.SimpleNamingContext . bind ( STRING , STRING ) ; JndiTemplate org.springframework.jndi.JndiTemplate = new JndiTemplate ( ) { @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return org.springframework.jndi.SimpleNamingContext ; } } ; JndiLocatorDelegate org.springframework.jndi.JndiLocatorDelegate = new JndiLocatorDelegate ( ) ; org.springframework.jndi.JndiLocatorDelegate . setResourceRef ( true ) ; org.springframework.jndi.JndiLocatorDelegate . setJndiTemplate ( org.springframework.jndi.JndiTemplate ) ; JndiPropertySource org.springframework.jndi.JndiPropertySource = new JndiPropertySource ( STRING , org.springframework.jndi.JndiLocatorDelegate ) ; assertThat ( org.springframework.jndi.JndiPropertySource . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected javax.naming.Context javax.naming.Context ( ) javax.naming.NamingException { return org.springframework.jndi.SimpleNamingContext ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JndiLocatorDelegate org.springframework.jndi.JndiLocatorDelegate = new JndiLocatorDelegate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { throw new java.lang.IllegalStateException ( STRING ) ; } } ; org.springframework.jndi.JndiLocatorDelegate . setResourceRef ( true ) ; JndiPropertySource org.springframework.jndi.JndiPropertySource = new JndiPropertySource ( STRING , org.springframework.jndi.JndiLocatorDelegate ) ; assertThat ( org.springframework.jndi.JndiPropertySource . getProperty ( STRING ) , nullValue ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { throw new java.lang.IllegalStateException ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { JndiLocatorDelegate org.springframework.jndi.JndiLocatorDelegate = new JndiLocatorDelegate ( ) { @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertEquals ( STRING , java.lang.String ) ; return STRING ; } } ; org.springframework.jndi.JndiLocatorDelegate . setResourceRef ( false ) ; JndiPropertySource org.springframework.jndi.JndiPropertySource = new JndiPropertySource ( STRING , org.springframework.jndi.JndiLocatorDelegate ) ; assertThat ( org.springframework.jndi.JndiPropertySource . getProperty ( STRING ) , equalTo ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( java.lang.String java.lang.String ) throws javax.naming.NamingException { assertEquals ( STRING , java.lang.String ) ; return STRING ; }  <METHOD_END>
