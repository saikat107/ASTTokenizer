<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> void void ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Random java.util.Random = new java.util.Random ( ) ; java.lang.String java.lang.String = STRING + java.util.Random . int ( ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( java.util.Random . int ( ) ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable = id ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable .class ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isNull ( ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . void ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable = null ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.Integer = java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . put ( STRING , java.lang.Integer = java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . void ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ( java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . put ( STRING , java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . void ( null ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isNull ( ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . void ( null ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingMapIdAndSerializable . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> void void ( java.lang.Integer java.lang.Integer );  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> java.lang.Integer java.lang.Integer ( )  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.util.Random java.util.Random = new java.util.Random ( ) ; java.lang.String java.lang.String = STRING + java.util.Random . int ( ) ; java.lang.Integer java.lang.Integer = new java.lang.Integer ( java.util.Random . int ( ) ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing = id ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing .class ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing instanceof java.io.Serializable ) . isTrue ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing instanceof MapId ) . isTrue ( ) ; MapId org.springframework.data.cassandra.repository.support.MapId = ( MapId ) org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isNull ( ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . void ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing = null ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.Integer = java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapId . put ( STRING , java.lang.Integer = java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isEqualTo ( java.lang.Integer ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.Integer ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . void ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing = org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ( java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) . isSameAs ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapId . put ( STRING , java.lang.String = STRING + java.util.Random . int ( ) ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isEqualTo ( java.lang.String ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isEqualTo ( java.lang.String ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . void ( null ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.String ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isNull ( ) ; org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . void ( null ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.HappyExtendingNothing . java.lang.Integer ( ) ) . isNull ( ) ; assertThat ( org.springframework.data.cassandra.repository.support.MapId . get ( STRING ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> void void ( )  <METHOD_END>
<METHOD_START> java.lang.Object java.lang.Object ( )  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object , java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( java.lang.String java.lang.String );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> void void ( java.lang.Object java.lang.Object );  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { java.lang.Class<?> < ? > [] java.lang.Class<?>[] = new java.lang.Class<?> < ? > [] { org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.IdClass .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.IdExtendingNotMapId .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.LiteralGet .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.GetterReturningVoid .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.GetReturningVoid .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.GetReturningNonSerializable .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.MethodWithMoreThanOneArgument .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.LiteralSet .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.LiteralWith .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.SetterMethodNotReturningVoidOrThis .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.SetMethodNotReturningVoidOrThis .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.WithMethodNotReturningVoidOrThis .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.SetterMethodTakingNonSerializable .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.SetMethodTakingNonSerializable .class , org.springframework.data.cassandra.repository.support.MapIdFactoryUnitTests.WithMethodTakingNonSerializable .class } ; for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { try { validate ( java.lang.Class<> ) ; fail ( STRING + java.lang.Class<> ) ; } catch ( IdInterfaceExceptions org.springframework.data.cassandra.repository.support.IdInterfaceExceptions ) { assertThat ( org.springframework.data.cassandra.repository.support.IdInterfaceExceptions . getCount ( ) ) . isEqualTo ( NUMBER ) ; } } }  <METHOD_END>
