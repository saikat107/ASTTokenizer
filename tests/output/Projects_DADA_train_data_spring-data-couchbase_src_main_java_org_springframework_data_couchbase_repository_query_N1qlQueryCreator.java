<METHOD_START> public void ( PartTree org.springframework.data.couchbase.repository.query.PartTree , ParameterAccessor org.springframework.data.couchbase.repository.query.ParameterAccessor , WherePath org.springframework.data.couchbase.repository.query.WherePath , CouchbaseConverter org.springframework.data.couchbase.repository.query.CouchbaseConverter , CouchbaseQueryMethod org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod ) { super( org.springframework.data.couchbase.repository.query.PartTree , org.springframework.data.couchbase.repository.query.ParameterAccessor ); this . org.springframework.data.couchbase.repository.query.WherePath = org.springframework.data.couchbase.repository.query.WherePath ; this . org.springframework.data.couchbase.repository.query.CouchbaseConverter = org.springframework.data.couchbase.repository.query.CouchbaseConverter ; this . org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod = org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod ; this . org.springframework.data.couchbase.repository.query.ParameterAccessor = org.springframework.data.couchbase.repository.query.ParameterAccessor ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( Part org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { return org.springframework.data.couchbase.repository.query.Expression ( org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( Part org.springframework.data.couchbase.repository.query.Part , Expression org.springframework.data.couchbase.repository.query.Expression , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { if ( org.springframework.data.couchbase.repository.query.Expression == null ) { return org.springframework.data.couchbase.repository.query.Expression ( org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> ) ; } return org.springframework.data.couchbase.repository.query.Expression . and ( org.springframework.data.couchbase.repository.query.Expression ( org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( Expression org.springframework.data.couchbase.repository.query.Expression , Expression org.springframework.data.couchbase.repository.query.Expression ) { return org.springframework.data.couchbase.repository.query.Expression . or ( org.springframework.data.couchbase.repository.query.Expression ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected org.springframework.data.couchbase.repository.query.LimitPath org.springframework.data.couchbase.repository.query.LimitPath ( Expression org.springframework.data.couchbase.repository.query.Expression , Sort org.springframework.data.couchbase.repository.query.Sort ) { Expression org.springframework.data.couchbase.repository.query.Expression = N1qlUtils . createWhereFilterForEntity ( org.springframework.data.couchbase.repository.query.Expression , this . org.springframework.data.couchbase.repository.query.CouchbaseConverter , this . org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . getEntityInformation ( ) ) ; OrderByPath org.springframework.data.couchbase.repository.query.OrderByPath = org.springframework.data.couchbase.repository.query.WherePath . where ( org.springframework.data.couchbase.repository.query.Expression ) ; if ( ( org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . isPageQuery ( ) || org.springframework.data.couchbase.repository.query.CouchbaseQueryMethod . isSliceQuery ( ) ) && org.springframework.data.couchbase.repository.query.ParameterAccessor . getPageable ( ) . isPaged ( ) ) { Pageable org.springframework.data.couchbase.repository.query.Pageable = org.springframework.data.couchbase.repository.query.ParameterAccessor . getPageable ( ) ; org.springframework.data.couchbase.repository.query.Sort = org.springframework.data.couchbase.repository.query.Pageable . getSort ( ) ; } if ( org.springframework.data.couchbase.repository.query.Sort . isSorted ( ) ) { com . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase . com.couchbase [] com.couchbase.client.java.query.dsl.Sort[] = N1qlUtils . createSort ( org.springframework.data.couchbase.repository.query.Sort , org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; return org.springframework.data.couchbase.repository.query.OrderByPath . orderBy ( com.couchbase.client.java.query.dsl.Sort[] ) ; } return org.springframework.data.couchbase.repository.query.OrderByPath ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( Part org.springframework.data.couchbase.repository.query.Part , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { PersistentPropertyPath < CouchbasePersistentProperty > org.springframework.data.couchbase.repository.query.PersistentPropertyPath<org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty> = N1qlUtils . getPathWithAlternativeFieldNames ( this . org.springframework.data.couchbase.repository.query.CouchbaseConverter , org.springframework.data.couchbase.repository.query.Part . getProperty ( ) ) ; ConvertingIterator org.springframework.data.couchbase.repository.query.ConvertingIterator = new ConvertingIterator ( java.util.Iterator<java.lang.Object> , org.springframework.data.couchbase.repository.query.CouchbaseConverter ) ; java.lang.String java.lang.String = N1qlUtils . getDottedPathWithAlternativeFieldNames ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath<org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty> ) ; boolean boolean = false ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.couchbase.repository.query.CouchbaseConverter . getWriteClassFor ( org.springframework.data.couchbase.repository.query.PersistentPropertyPath<org.springframework.data.couchbase.repository.query.CouchbasePersistentProperty> . getLeafProperty ( ) . getType ( ) ) ; boolean boolean = java.lang.Class<> == java.lang.String .class ; if ( org.springframework.data.couchbase.repository.query.Part . shouldIgnoreCase ( ) == Part . IgnoreCaseType . WHEN_POSSIBLE ) { boolean = boolean ; } else if ( org.springframework.data.couchbase.repository.query.Part . shouldIgnoreCase ( ) == Part . IgnoreCaseType . ALWAYS ) { if ( ! boolean ) { throw new java.lang.IllegalArgumentException ( java.lang.String . java.lang.String ( STRING , java.lang.String , java.lang.Class<> ) ) ; } boolean = true ; } return org.springframework.data.couchbase.repository.query.Expression ( org.springframework.data.couchbase.repository.query.Part . getType ( ) , java.lang.String , boolean , org.springframework.data.couchbase.repository.query.ConvertingIterator ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( Part . Part Part.Type , java.lang.String java.lang.String , boolean boolean , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { Expression org.springframework.data.couchbase.repository.query.Expression = boolean ? StringFunctions . lower ( x ( java.lang.String ) ) : x ( java.lang.String ) ; switch ( Part.Type ) { case BETWEEN : return org.springframework.data.couchbase.repository.query.Expression . between ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case IS_NOT_NULL : return org.springframework.data.couchbase.repository.query.Expression . isNotNull ( ) ; case IS_NULL : return org.springframework.data.couchbase.repository.query.Expression . isNull ( ) ; case NEGATING_SIMPLE_PROPERTY : return org.springframework.data.couchbase.repository.query.Expression . ne ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case SIMPLE_PROPERTY : return org.springframework.data.couchbase.repository.query.Expression . eq ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case BEFORE : case LESS_THAN : return org.springframework.data.couchbase.repository.query.Expression . lt ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case LESS_THAN_EQUAL : return org.springframework.data.couchbase.repository.query.Expression . lte ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case GREATER_THAN_EQUAL : return org.springframework.data.couchbase.repository.query.Expression . gte ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case AFTER : case GREATER_THAN : return org.springframework.data.couchbase.repository.query.Expression . gt ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case NOT_LIKE : return org.springframework.data.couchbase.repository.query.Expression . notLike ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case LIKE : return org.springframework.data.couchbase.repository.query.Expression . like ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; case STARTING_WITH : return org.springframework.data.couchbase.repository.query.Expression . like ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean , false , true ) ) ; case ENDING_WITH : return org.springframework.data.couchbase.repository.query.Expression . like ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean , true , false ) ) ; case NOT_CONTAINING : return org.springframework.data.couchbase.repository.query.Expression . notLike ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean , true , true ) ) ; case CONTAINING : return org.springframework.data.couchbase.repository.query.Expression . like ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean , true , true ) ) ; case NOT_IN : return org.springframework.data.couchbase.repository.query.Expression . notIn ( org.springframework.data.couchbase.repository.query.JsonArray ( java.util.Iterator<java.lang.Object> ) ) ; case IN : return org.springframework.data.couchbase.repository.query.Expression . in ( org.springframework.data.couchbase.repository.query.JsonArray ( java.util.Iterator<java.lang.Object> ) ) ; case TRUE : return org.springframework.data.couchbase.repository.query.Expression . eq ( true ) ; case FALSE : return org.springframework.data.couchbase.repository.query.Expression . eq ( false ) ; case REGEX : return org.springframework.data.couchbase.repository.query.Expression ( java.lang.String , java.util.Iterator<java.lang.Object> ) ; case EXISTS : return org.springframework.data.couchbase.repository.query.Expression . isNotMissing ( ) ; case WITHIN : case NEAR : default: throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( java.lang.String java.lang.String , java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; java.lang.String java.lang.String ; if ( java.lang.Object == null ) { java.lang.String = STRING ; } else { java.lang.String = java.lang.String . java.lang.String ( java.lang.Object ) ; } return PatternMatchingFunctions . regexpLike ( java.lang.String , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , boolean boolean ) { return org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) . and ( org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> , boolean ) ) ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , boolean boolean , boolean boolean , boolean boolean ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == null ) { return Expression . NULL ( ) ; } Expression org.springframework.data.couchbase.repository.query.Expression ; if ( java.lang.Object instanceof java.lang.String ) { java.lang.String java.lang.String = ( java.lang.String ) java.lang.Object ; if ( boolean ) { java.lang.String = STRING + java.lang.String ; } if ( boolean ) { java.lang.String = java.lang.String + STRING ; } org.springframework.data.couchbase.repository.query.Expression = s ( java.lang.String ) ; } else { org.springframework.data.couchbase.repository.query.Expression = x ( java.lang.String . java.lang.String ( java.lang.Object ) ) ; } if ( boolean ) { return StringFunctions . lower ( org.springframework.data.couchbase.repository.query.Expression ) ; } return org.springframework.data.couchbase.repository.query.Expression ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.Expression org.springframework.data.couchbase.repository.query.Expression ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> , boolean boolean ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; if ( java.lang.Object == null ) { return Expression . NULL ( ) ; } Expression org.springframework.data.couchbase.repository.query.Expression ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.data.couchbase.repository.query.Expression = s ( ( java.lang.String ) java.lang.Object ) ; } else { org.springframework.data.couchbase.repository.query.Expression = x ( java.lang.String . java.lang.String ( java.lang.Object ) ) ; } if ( boolean ) { return StringFunctions . lower ( org.springframework.data.couchbase.repository.query.Expression ) ; } return org.springframework.data.couchbase.repository.query.Expression ; }  <METHOD_END>
<METHOD_START> protected static org.springframework.data.couchbase.repository.query.JsonArray org.springframework.data.couchbase.repository.query.JsonArray ( java.util.Iterator<java.lang.Object> < java.lang.Object > java.util.Iterator<java.lang.Object> ) { java.lang.Object java.lang.Object = java.util.Iterator<java.lang.Object> . java.lang.Object ( ) ; java.lang.Object [] java.lang.Object[] ; if ( java.lang.Object instanceof java.util.Collection ) { java.lang.Object[] = ( ( java.util.Collection<?> < ? > ) java.lang.Object ) . java.lang.Object[] ( ) ; } else if ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) . boolean ( ) ) { java.lang.Object[] = ( java.lang.Object [] ) java.lang.Object ; } else { java.lang.Object[] = new java.lang.Object [] { java.lang.Object } ; } return JsonArray . from ( java.lang.Object[] ) ; }  <METHOD_END>
