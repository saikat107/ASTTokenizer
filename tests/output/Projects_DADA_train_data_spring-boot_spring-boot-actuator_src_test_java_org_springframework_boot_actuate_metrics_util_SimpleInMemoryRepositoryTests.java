<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; assertThat ( this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . findOne ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . update ( STRING , new Callback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; } } ) ; assertThat ( this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . findOne ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . update ( STRING , new Callback < java.lang.String > ( ) { @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; } } ) ; assertThat ( this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . findOne ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( java.lang.String java.lang.String ) { return STRING ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; assertThat ( ( ( java.util.Collection<?> < ? > ) this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . findAllWithPrefix ( STRING ) ) ) . hasSize ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . set ( STRING , STRING ) ; java.util.Iterator<java.lang.String> < java.lang.String > java.util.Iterator<java.lang.String> = this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.String> . findAllWithPrefix ( STRING ) . iterator ( ) ; assertThat ( java.util.Iterator<java.lang.String> . java.lang.String ( ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.Iterator<java.lang.String> . boolean ( ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { SimpleInMemoryRepository < java.lang.Integer > org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> = new SimpleInMemoryRepository <> ( ) ; java.util.Collection<java.util.concurrent.Callable<java.lang.Boolean>> < java.util.concurrent.Callable<java.lang.Boolean> < java.lang.Boolean > > java.util.Collection<java.util.concurrent.Callable<java.lang.Boolean>> = new java.util.ArrayList<java.util.concurrent.Callable<java.lang.Boolean>> <> ( ) ; for ( int int = NUMBER ; int < NUMBER ; int ++ ) { java.util.Collection<java.util.concurrent.Callable<java.lang.Boolean>> . boolean ( new org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate ( org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> , NUMBER ) ) ; java.util.Collection<java.util.concurrent.Callable<java.lang.Boolean>> . boolean ( new org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate ( org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> , - NUMBER ) ) ; } java.util.List<java.util.concurrent.Future<java.lang.Boolean>> < java.util.concurrent.Future<java.lang.Boolean> < java.lang.Boolean > > java.util.List<java.util.concurrent.Future<java.lang.Boolean>> = java.util.concurrent.Executors . java.util.concurrent.ExecutorService ( NUMBER ) . java.util.List<java.util.concurrent.Future<java.lang.Boolean>> ( java.util.Collection<java.util.concurrent.Callable<java.lang.Boolean>> ) ; for ( java.util.concurrent.Future<java.lang.Boolean> < java.lang.Boolean > java.util.concurrent.Future<java.lang.Boolean> : java.util.List<java.util.concurrent.Future<java.lang.Boolean>> ) { assertThat ( java.util.concurrent.Future<java.lang.Boolean> . java.lang.Boolean ( NUMBER , java.util.concurrent.TimeUnit . java.util.concurrent.TimeUnit ) ) . isTrue ( ) ; } assertThat ( org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> . findOne ( STRING ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> void ( SimpleInMemoryRepository < java.lang.Integer > org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> , int int ) { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> = org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> ; this . int = int ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Boolean java.lang.Boolean ( ) java.lang.Exception { this . org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepository<java.lang.Integer> . update ( STRING , new Callback < java.lang.Integer > ( ) { @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { if ( java.lang.Integer == null ) { return org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate .this . int ; } return java.lang.Integer + org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate .this . int ; } } ) ; return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Integer java.lang.Integer ( java.lang.Integer java.lang.Integer ) { if ( java.lang.Integer == null ) { return org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate .this . int ; } return java.lang.Integer + org.springframework.boot.actuate.metrics.util.SimpleInMemoryRepositoryTests.RepositoryUpdate .this . int ; }  <METHOD_END>
