<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfigurationTests.EmptyConfiguration .class ) ; ConnectionFactory org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory = this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . getBean ( ConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ) . isInstanceOf ( ActiveMQConnectionFactory .class ) ; java.lang.String java.lang.String = ( ( ActiveMQConnectionFactory ) org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ) . getBrokerURL ( ) ; assertThat ( java.lang.String ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfigurationTests.CustomConnectionFactoryConfiguration .class ) ; assertThat ( mockingDetails ( this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . getBean ( ConnectionFactory .class ) ) . isMock ( ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { void ( org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfigurationTests.EmptyConfiguration .class , STRING , STRING , STRING , STRING , STRING , STRING ) ; ConnectionFactory org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory = this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . getBean ( ConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ) . isInstanceOf ( PooledConnectionFactory .class ) ; PooledConnectionFactory org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory = ( PooledConnectionFactory ) org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory . getMaxConnections ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory . getIdleTimeout ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory . getMaximumActiveSessionPerConnection ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory . getTimeBetweenExpirationCheckMillis ( ) ) . isEqualTo ( NUMBER ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.PooledConnectionFactory . getExpiryTimeout ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) org.springframework.boot.autoconfigure.jms.activemq.JMSException { void ( org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfigurationTests.EmptyConfiguration .class , STRING ) ; ConnectionFactory org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory = this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . getBean ( ConnectionFactory .class ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ) . isInstanceOf ( PooledConnectionFactory .class ) ; this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . close ( ) ; assertThat ( org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory . createConnection ( ) ) . isNull ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { this . org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext = org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext ( java.lang.Class<> , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext ( java.lang.Class<?> < ? > java.lang.Class<?> , java.lang.String ... java.lang.String[] ) { AnnotationConfigApplicationContext org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . register ( java.lang.Class<> ) ; org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . register ( ActiveMQAutoConfiguration .class , JmsAutoConfiguration .class ) ; EnvironmentTestUtils . addEnvironment ( org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext , java.lang.String[] ) ; org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext . refresh ( ) ; return org.springframework.boot.autoconfigure.jms.activemq.AnnotationConfigApplicationContext ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory org.springframework.boot.autoconfigure.jms.activemq.ConnectionFactory ( ) { return mock ( ConnectionFactory .class ) ; }  <METHOD_END>
