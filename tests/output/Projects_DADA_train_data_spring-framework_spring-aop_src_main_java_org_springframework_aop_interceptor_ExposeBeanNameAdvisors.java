<METHOD_START> public static java.lang.String java.lang.String ( ) java.lang.IllegalStateException { return java.lang.String ( ExposeInvocationInterceptor . currentInvocation ( ) ) ; }  <METHOD_END>
<METHOD_START> public static java.lang.String java.lang.String ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) throws java.lang.IllegalStateException { if ( ! ( org.springframework.aop.interceptor.MethodInvocation instanceof ProxyMethodInvocation ) ) { throw new java.lang.IllegalArgumentException ( STRING + org.springframework.aop.interceptor.MethodInvocation ) ; } ProxyMethodInvocation org.springframework.aop.interceptor.ProxyMethodInvocation = ( ProxyMethodInvocation ) org.springframework.aop.interceptor.MethodInvocation ; java.lang.String java.lang.String = ( java.lang.String ) org.springframework.aop.interceptor.ProxyMethodInvocation . getUserAttribute ( java.lang.String ) ; if ( java.lang.String == null ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.aop.interceptor.MethodInvocation ) ; } return java.lang.String ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.interceptor.Advisor org.springframework.aop.interceptor.Advisor ( java.lang.String java.lang.String ) { return new DefaultPointcutAdvisor ( new org.springframework.aop.interceptor.ExposeBeanNameAdvisors.ExposeBeanNameInterceptor ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public static org.springframework.aop.interceptor.Advisor org.springframework.aop.interceptor.Advisor ( java.lang.String java.lang.String ) { return new DefaultIntroductionAdvisor ( new org.springframework.aop.interceptor.ExposeBeanNameAdvisors.ExposeBeanNameIntroduction ( java.lang.String ) ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) throws java.lang.Throwable { if ( ! ( org.springframework.aop.interceptor.MethodInvocation instanceof ProxyMethodInvocation ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.aop.interceptor.MethodInvocation ) ; } ProxyMethodInvocation org.springframework.aop.interceptor.ProxyMethodInvocation = ( ProxyMethodInvocation ) org.springframework.aop.interceptor.MethodInvocation ; org.springframework.aop.interceptor.ProxyMethodInvocation . setUserAttribute ( java.lang.String , this . java.lang.String ) ; return org.springframework.aop.interceptor.MethodInvocation . proceed ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.aop.interceptor.MethodInvocation ) throws java.lang.Throwable { if ( ! ( org.springframework.aop.interceptor.MethodInvocation instanceof ProxyMethodInvocation ) ) { throw new java.lang.IllegalStateException ( STRING + org.springframework.aop.interceptor.MethodInvocation ) ; } ProxyMethodInvocation org.springframework.aop.interceptor.ProxyMethodInvocation = ( ProxyMethodInvocation ) org.springframework.aop.interceptor.MethodInvocation ; org.springframework.aop.interceptor.ProxyMethodInvocation . setUserAttribute ( java.lang.String , this . java.lang.String ) ; return super. invoke ( org.springframework.aop.interceptor.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
