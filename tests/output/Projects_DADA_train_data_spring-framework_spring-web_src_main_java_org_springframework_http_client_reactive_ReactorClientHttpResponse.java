<METHOD_START> public void ( HttpClientResponse org.springframework.http.client.reactive.HttpClientResponse ) { this . org.springframework.http.client.reactive.HttpClientResponse = org.springframework.http.client.reactive.HttpClientResponse ; this . org.springframework.http.client.reactive.NettyDataBufferFactory = new NettyDataBufferFactory ( org.springframework.http.client.reactive.HttpClientResponse . channel ( ) . alloc ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.Flux<org.springframework.http.client.reactive.DataBuffer> < DataBuffer > org.springframework.http.client.reactive.Flux<org.springframework.http.client.reactive.DataBuffer> ( ) { return org.springframework.http.client.reactive.HttpClientResponse . receive ( ) . map ( buf -> { buf . retain ( ) ; return dataBufferFactory . wrap ( buf ) ; } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.HttpHeaders org.springframework.http.client.reactive.HttpHeaders ( ) { HttpHeaders org.springframework.http.client.reactive.HttpHeaders = new HttpHeaders ( ) ; this . org.springframework.http.client.reactive.HttpClientResponse . responseHeaders ( ) . entries ( ) . forEach ( e -> headers . add ( e . getKey ( ) , e . getValue ( ) ) ) ; return org.springframework.http.client.reactive.HttpHeaders ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.HttpStatus org.springframework.http.client.reactive.HttpStatus ( ) { return HttpStatus . valueOf ( this . org.springframework.http.client.reactive.HttpClientResponse . status ( ) . code ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.ResponseCookie> < java.lang.String , ResponseCookie > org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.ResponseCookie> ( ) { MultiValueMap < java.lang.String , ResponseCookie > org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.ResponseCookie> = new LinkedMultiValueMap <> ( ) ; this . org.springframework.http.client.reactive.HttpClientResponse . cookies ( ) . values ( ) . stream ( ) . flatMap ( java.util.Collection :: stream ) . forEach ( cookie -> { ResponseCookie responseCookie = ResponseCookie . from ( cookie . name ( ) , cookie . value ( ) ) . domain ( cookie . domain ( ) ) . path ( cookie . path ( ) ) . maxAge ( cookie . maxAge ( ) ) . secure ( cookie . isSecure ( ) ) . httpOnly ( cookie . isHttpOnly ( ) ) . build ( ) ; result . add ( cookie . name ( ) , responseCookie ) ; } ) ; return CollectionUtils . unmodifiableMultiValueMap ( org.springframework.http.client.reactive.MultiValueMap<java.lang.String,org.springframework.http.client.reactive.ResponseCookie> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + this . org.springframework.http.client.reactive.HttpClientResponse . method ( ) . name ( ) + STRING + this . org.springframework.http.client.reactive.HttpClientResponse . uri ( ) + STRING + STRING + org.springframework.http.client.reactive.HttpStatus ( ) + '}' ; }  <METHOD_END>
