<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException {		}  <METHOD_END>
<METHOD_START> @ Before public void void ( ) java.io.IOException { this . org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new Repackager ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new Repackager ( new java.io.File ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; new Repackager ( this . org.springframework.boot.loader.tools.TemporaryFolder . getRoot ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . setMainClass ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.util.jar.Manifest java.util.jar.Manifest = new java.util.jar.Manifest ( ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING , STRING ) ; java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING , STRING ) ; this . org.springframework.boot.loader.tools.TestJarFile . addManifest ( java.util.jar.Manifest ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING + STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; new Repackager ( this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) . repackage ( org.springframework.boot.loader.tools.Libraries ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( new Layouts . Layouts ( ) ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( new Layouts . Layouts ( ) ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( null ) ; assertThat ( boolean ( java.io.File ) ) . isFalse ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; assertThat ( new java.io.File ( java.io.File . java.lang.String ( ) , java.io.File . java.lang.String ( ) + STRING ) ) . exists ( ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . setBackupSource ( false ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; assertThat ( new java.io.File ( java.io.File . java.lang.String ( ) , java.io.File . java.lang.String ( ) + STRING ) ) . doesNotExist ( ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; assertThat ( new java.io.File ( java.io.File . java.lang.String ( ) , java.io.File . java.lang.String ( ) + STRING ) ) . doesNotExist ( ) ; assertThat ( boolean ( java.io.File ) ) . isFalse ( ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( null , org.springframework.boot.loader.tools.Libraries ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( this . org.springframework.boot.loader.tools.TemporaryFolder . getRoot ( ) , org.springframework.boot.loader.tools.Libraries ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ; java.io.File . boolean ( ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class , long ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; final java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; FileCopyUtils . copy ( new byte [] { NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER , NUMBER } , java.io.File ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING + java.io.File . java.lang.String ( ) , java.io.File ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; java.io.File . boolean ( long ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , true ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; } } ) ; assertThat ( boolean ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ) . isTrue ( ) ; assertThat ( boolean ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ) . isTrue ( ) ; assertThat ( boolean ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ) . isFalse ( ) ; java.util.jar.JarEntry java.util.jar.JarEntry = java.util.jar.JarEntry ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ; assertThat ( java.util.jar.JarEntry . long ( ) ) . isEqualTo ( long ) ; java.util.jar.JarEntry = java.util.jar.JarEntry ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ; assertThat ( java.util.jar.JarEntry . java.lang.String ( ) ) . startsWith ( STRING ) ; assertThat ( java.util.jar.JarEntry . java.lang.String ( ) . int ( ) ) . isEqualTo ( NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , true ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalStateException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , false ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , false ) ) ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , false ) ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , false ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; Layout org.springframework.boot.loader.tools.Layout = mock ( Layout .class ) ; final LibraryScope org.springframework.boot.loader.tools.LibraryScope = mock ( LibraryScope .class ) ; given ( org.springframework.boot.loader.tools.Layout . getLauncherClassName ( ) ) . willReturn ( STRING ) ; given ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( anyString ( ) , eq ( org.springframework.boot.loader.tools.LibraryScope ) ) ) . willReturn ( STRING ) ; given ( org.springframework.boot.loader.tools.Layout . getLibraryDestination ( anyString ( ) , eq ( LibraryScope . COMPILE ) ) ) . willReturn ( STRING ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( org.springframework.boot.loader.tools.Layout ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , org.springframework.boot.loader.tools.LibraryScope ) ) ; } } ) ; assertThat ( boolean ( java.io.File , STRING + java.io.File . java.lang.String ( ) ) ) . isTrue ( ) ; assertThat ( java.util.jar.Manifest ( java.io.File ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; assertThat ( java.util.jar.Manifest ( java.io.File ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , org.springframework.boot.loader.tools.LibraryScope ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; Layout org.springframework.boot.loader.tools.Layout = mock ( Layout .class ) ; final LibraryScope org.springframework.boot.loader.tools.LibraryScope = mock ( LibraryScope .class ) ; given ( org.springframework.boot.loader.tools.Layout . getLauncherClassName ( ) ) . willReturn ( STRING ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( org.springframework.boot.loader.tools.Layout ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , org.springframework.boot.loader.tools.LibraryScope ) ) ; } } ) ; assertThat ( java.util.jar.Manifest ( java.io.File ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isNull ( ) ; assertThat ( java.util.jar.Manifest ( java.io.File ) . java.util.jar.Attributes ( ) . java.lang.String ( STRING ) ) . isEqualTo ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , org.springframework.boot.loader.tools.LibraryScope ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) ) . containsKey ( new java.util.jar.Attributes . java.util.jar.Attributes.Name ( STRING ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) ) . containsEntry ( new java.util.jar.Attributes . java.util.jar.Attributes.Name ( STRING ) , STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) ) . containsEntry ( new java.util.jar.Attributes . java.util.jar.Attributes.Name ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( STRING ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.Manifest java.util.jar.Manifest = java.util.jar.Manifest ( java.io.File ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) ) . containsEntry ( new java.util.jar.Attributes . java.util.jar.Attributes.Name ( STRING ) , STRING ) ; assertThat ( java.util.jar.Manifest . java.util.jar.Attributes ( ) ) . containsEntry ( new java.util.jar.Attributes . java.util.jar.Attributes.Name ( STRING ) , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; this . org.springframework.boot.loader.tools.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; this . org.springframework.boot.loader.tools.ExpectedException . expectMessage ( STRING ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( null ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING , java.io.File ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; } } ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING + java.io.File . java.lang.String ( ) ) . int ( ) ) . isEqualTo ( java.util.zip.ZipEntry . int ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) . int ( ) ) . isEqualTo ( java.util.zip.ZipEntry . int ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; LaunchScript org.springframework.boot.loader.tools.LaunchScript = new org.springframework.boot.loader.tools.RepackagerTests.MockLauncherScript ( STRING ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries , org.springframework.boot.loader.tools.LaunchScript ) ; byte [] byte[] = FileCopyUtils . copyToByteArray ( java.io.File ) ; assertThat ( new java.lang.String ( byte[] ) ) . startsWith ( STRING ) ; assertThat ( boolean ( java.io.File ) ) . isFalse ( ) ; assertThat ( boolean ( java.io.File ) ) . isTrue ( ) ; try { assertThat ( java.nio.file.Files . java.util.Set<java.nio.file.attribute.PosixFilePermission> ( java.io.File . java.nio.file.Path ( ) ) ) . contains ( java.nio.file.attribute.PosixFilePermission . java.nio.file.attribute.PosixFilePermission ) ; } catch ( java.lang.UnsupportedOperationException java.lang.UnsupportedOperationException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING + java.io.File . java.lang.String ( ) , org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , true ) ) ; } } ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING + java.io.File . java.lang.String ( ) ) . java.lang.String ( ) ) . startsWith ( STRING ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE , true ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { TestJarFile org.springframework.boot.loader.tools.TestJarFile = new TestJarFile ( this . org.springframework.boot.loader.tools.TemporaryFolder ) ; org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithoutMainMethod .class ) ; final java.io.File java.io.File = org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING + java.io.File . java.lang.String ( ) , org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ) ; this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; long long = java.io.File . long ( ) ; org.springframework.boot.loader.tools.Repackager . repackage ( new Libraries ( ) { @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { java.io.File . boolean ( ) ; java.io.File java.io.File = org.springframework.boot.loader.tools.RepackagerTests .this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; ZipUtil . packEntry ( java.io.File , java.io.File ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; } } ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING + java.io.File . java.lang.String ( ) ) . long ( ) ) . isEqualTo ( long ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LibraryCallback org.springframework.boot.loader.tools.LibraryCallback ) throws java.io.IOException { java.io.File . boolean ( ) ; java.io.File java.io.File = org.springframework.boot.loader.tools.RepackagerTests .this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( ) ; ZipUtil . packEntry ( java.io.File , java.io.File ) ; org.springframework.boot.loader.tools.LibraryCallback . library ( new Library ( java.io.File , LibraryScope . COMPILE ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING , this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNull ( ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File , new org.springframework.boot.loader.tools.RepackagerTests.TestLayoutFactory ( ) ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; java.util.jar.JarFile . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File , new org.springframework.boot.loader.tools.RepackagerTests.TestLayoutFactory ( ) ) ; org.springframework.boot.loader.tools.Repackager . setLayout ( new Layouts . Layouts ( ) ) ; org.springframework.boot.loader.tools.Repackager . repackage ( org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNull ( ) ; java.util.jar.JarFile . void ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { this . org.springframework.boot.loader.tools.TestJarFile . addClass ( STRING , ClassWithMainMethod .class ) ; this . org.springframework.boot.loader.tools.TestJarFile . addFile ( STRING , this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TestJarFile . getFile ( ) ; java.io.File java.io.File = this . org.springframework.boot.loader.tools.TemporaryFolder . newFile ( STRING ) ; Repackager org.springframework.boot.loader.tools.Repackager = new Repackager ( java.io.File ) ; org.springframework.boot.loader.tools.Repackager . repackage ( java.io.File , org.springframework.boot.loader.tools.Libraries ) ; java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNull ( ) ; assertThat ( java.util.jar.JarFile . java.util.zip.ZipEntry ( STRING ) ) . isNotNull ( ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.io.File java.io.File ) throws java.io.IOException { return boolean ( java.io.File , STRING ) && boolean ( java.io.File , STRING ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { return java.util.jar.JarEntry ( java.io.File , java.lang.String ) != null ; }  <METHOD_END>
<METHOD_START> private java.util.jar.JarEntry java.util.jar.JarEntry ( java.io.File java.io.File , java.lang.String java.lang.String ) throws java.io.IOException { java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { return java.util.jar.JarFile . java.util.jar.JarEntry ( java.lang.String ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> private java.util.jar.Manifest java.util.jar.Manifest ( java.io.File java.io.File ) throws java.io.IOException { java.util.jar.JarFile java.util.jar.JarFile = new java.util.jar.JarFile ( java.io.File ) ; try { return java.util.jar.JarFile . java.util.jar.Manifest ( ) ; } finally { java.util.jar.JarFile . void ( ) ; } }  <METHOD_END>
<METHOD_START> void ( java.lang.String java.lang.String ) { this . byte[] = java.lang.String . byte[] ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public byte [] byte[] ( ) { return this . byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.boot.loader.tools.Layout org.springframework.boot.loader.tools.Layout ( java.io.File java.io.File ) { return new org.springframework.boot.loader.tools.RepackagerTests.TestLayout ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( LoaderClassesWriter org.springframework.boot.loader.tools.LoaderClassesWriter ) throws java.io.IOException { org.springframework.boot.loader.tools.LoaderClassesWriter . writeEntry ( STRING , new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) ; }  <METHOD_END>
