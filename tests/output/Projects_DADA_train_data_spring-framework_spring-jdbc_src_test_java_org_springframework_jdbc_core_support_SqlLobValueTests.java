<METHOD_START> @ Before public void void ( ) { MockitoAnnotations . initMocks ( this ) ; java.sql.PreparedStatement = mock ( java.sql.PreparedStatement .class ) ; org.springframework.jdbc.core.support.LobHandler = mock ( LobHandler .class ) ; org.springframework.jdbc.core.support.LobCreator = mock ( LobCreator .class ) ; given ( org.springframework.jdbc.core.support.LobHandler . getLobCreator ( ) ) . willReturn ( org.springframework.jdbc.core.support.LobCreator ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { byte [] byte[] = STRING . byte[] ( ) ; SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( byte[] , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setBlobAsBytes ( java.sql.PreparedStatement , NUMBER , byte[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.lang.String java.lang.String = STRING ; SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( java.lang.String , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setBlobAsBytes ( java.sql.PreparedStatement , NUMBER , java.lang.String . byte[] ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.InputStreamReader ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) , NUMBER ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { java.lang.String java.lang.String = STRING ; SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( java.lang.String , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setClobAsString ( java.sql.PreparedStatement , NUMBER , java.lang.String ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { byte [] byte[] = STRING . byte[] ( ) ; SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.ByteArrayInputStream ( byte[] ) , NUMBER , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setClobAsAsciiStream ( eq ( java.sql.PreparedStatement ) , eq ( NUMBER ) , org.springframework.jdbc.core.support.ArgumentCaptor<java.io.InputStream> . capture ( ) , eq ( NUMBER ) ) ; byte [] byte[] = new byte [ NUMBER ] ; org.springframework.jdbc.core.support.ArgumentCaptor<java.io.InputStream> . getValue ( ) . read ( byte[] ) ; assertThat ( byte[] , equalTo ( byte[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { byte [] byte[] = STRING . byte[] ( ) ; java.io.ByteArrayInputStream java.io.ByteArrayInputStream = new java.io.ByteArrayInputStream ( byte[] ) ; java.io.InputStreamReader java.io.InputStreamReader = new java.io.InputStreamReader ( java.io.ByteArrayInputStream ) ; SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( java.io.InputStreamReader , NUMBER , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setClobAsCharacterStream ( eq ( java.sql.PreparedStatement ) , eq ( NUMBER ) , eq ( java.io.InputStreamReader ) , eq ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING . byte[] ( ) ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; try { org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING . byte[] ( ) ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) , NUMBER ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.InputStreamReader ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) , NUMBER ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING . byte[] ( ) ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) , NUMBER ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( new java.io.InputStreamReader ( new java.io.ByteArrayInputStream ( STRING . byte[] ( ) ) ) , NUMBER ) ; try { org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; fail ( STRING ) ; } catch ( java.lang.IllegalArgumentException java.lang.IllegalArgumentException ) { } }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; org.springframework.jdbc.core.support.SqlLobValue . cleanup ( ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . setClobAsString ( java.sql.PreparedStatement , NUMBER , STRING ) ; verify ( org.springframework.jdbc.core.support.LobCreator ) . close ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.sql.SQLException { SqlLobValue org.springframework.jdbc.core.support.SqlLobValue = new SqlLobValue ( STRING , org.springframework.jdbc.core.support.LobHandler ) ; org.springframework.jdbc.core.support.ExpectedException . expect ( java.lang.IllegalArgumentException .class ) ; org.springframework.jdbc.core.support.SqlLobValue . setTypeValue ( java.sql.PreparedStatement , NUMBER , java.sql.Types . int , STRING ) ; }  <METHOD_END>
