<METHOD_START> @ Test public void void ( ) { RollbackRuleAttribute org.springframework.transaction.interceptor.RollbackRuleAttribute = new RollbackRuleAttribute ( java . lang . java.lang.Exception .class . java.lang.String ( ) ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new java.lang.Exception ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RollbackRuleAttribute org.springframework.transaction.interceptor.RollbackRuleAttribute = new RollbackRuleAttribute ( java.lang.Exception .class ) ; assertEquals ( NUMBER , org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new java.lang.Exception ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RollbackRuleAttribute org.springframework.transaction.interceptor.RollbackRuleAttribute = new RollbackRuleAttribute ( java . io . java.io.IOException .class . java.lang.String ( ) ) ; assertEquals ( - NUMBER , org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new MyRuntimeException ( STRING ) ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RollbackRuleAttribute org.springframework.transaction.interceptor.RollbackRuleAttribute = new RollbackRuleAttribute ( java . lang . java.lang.Exception .class . java.lang.String ( ) ) ; assertThat ( org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new MyRuntimeException ( STRING ) ) , equalTo ( NUMBER ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) { RollbackRuleAttribute org.springframework.transaction.interceptor.RollbackRuleAttribute = new RollbackRuleAttribute ( java . lang . java.lang.Throwable .class . java.lang.String ( ) ) ; assertTrue ( org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new MyRuntimeException ( STRING ) ) > NUMBER ) ; assertTrue ( org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new java.io.IOException ( ) ) > NUMBER ) ; assertTrue ( org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new FatalBeanException ( null , null ) ) > NUMBER ) ; assertTrue ( org.springframework.transaction.interceptor.RollbackRuleAttribute . getDepth ( new java.lang.RuntimeException ( ) ) > NUMBER ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RollbackRuleAttribute ( java.lang.StringBuffer .class ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RollbackRuleAttribute ( ( java.lang.Class<?> < ? > ) null ) ; }  <METHOD_END>
<METHOD_START> @ Test ( expected = java.lang.IllegalArgumentException .class ) public void void ( ) { new RollbackRuleAttribute ( ( java.lang.String ) null ) ; }  <METHOD_END>
