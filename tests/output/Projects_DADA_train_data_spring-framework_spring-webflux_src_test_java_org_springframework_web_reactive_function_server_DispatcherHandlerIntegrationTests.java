<METHOD_START> @ java.lang.Override protected org.springframework.web.reactive.function.server.HttpHandler org.springframework.web.reactive.function.server.HttpHandler ( ) { this . org.springframework.web.reactive.function.server.AnnotationConfigApplicationContext = new AnnotationConfigApplicationContext ( ) ; this . org.springframework.web.reactive.function.server.AnnotationConfigApplicationContext . register ( org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.TestConfiguration .class ) ; this . org.springframework.web.reactive.function.server.AnnotationConfigApplicationContext . refresh ( ) ; DispatcherHandler org.springframework.web.reactive.function.server.DispatcherHandler = new DispatcherHandler ( ) ; org.springframework.web.reactive.function.server.DispatcherHandler . setApplicationContext ( this . org.springframework.web.reactive.function.server.AnnotationConfigApplicationContext ) ; return WebHttpHandlerBuilder . webHandler ( org.springframework.web.reactive.function.server.DispatcherHandler ) . build ( ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ResponseEntity < org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person > org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> = this . org.springframework.web.reactive.function.server.RestTemplate . getForEntity ( STRING + this . port + STRING , org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person .class ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> . getStatusCode ( ) ) ; assertEquals ( STRING , org.springframework.web.reactive.function.server.ResponseEntity<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> . getBody ( ) . getName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.lang.Exception { ParameterizedTypeReference < java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> < org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person > > org.springframework.web.reactive.function.server.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person>> = new ParameterizedTypeReference < java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> < org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person > > ( ) {} ; ResponseEntity < java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> < org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person > > org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person>> = this . org.springframework.web.reactive.function.server.RestTemplate . exchange ( STRING + this . port + STRING , HttpMethod . GET , null , org.springframework.web.reactive.function.server.ParameterizedTypeReference<java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person>> ) ; assertEquals ( HttpStatus . OK , org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person>> . getStatusCode ( ) ) ; java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> < org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person > java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> = org.springframework.web.reactive.function.server.ResponseEntity<java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person>> . getBody ( ) ; assertEquals ( NUMBER , java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> . int ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> . org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ( NUMBER ) . java.lang.String ( ) ) ; assertEquals ( STRING , java.util.List<org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> . org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ( NUMBER ) . java.lang.String ( ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler ( ) { return new org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.function.server.HandlerAdapter org.springframework.web.reactive.function.server.HandlerAdapter ( ) { return new HandlerFunctionAdapter ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.function.server.HandlerMapping org.springframework.web.reactive.function.server.HandlerMapping ( RouterFunction < ? > org.springframework.web.reactive.function.server.RouterFunction<?> , ApplicationContext org.springframework.web.reactive.function.server.ApplicationContext ) { return RouterFunctions . toHandlerMapping ( org.springframework.web.reactive.function.server.RouterFunction<> , new HandlerStrategies ( ) { @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( ) { return ( ) getMessageCodecsConfigurer ( ) . getReaders ( ) . stream ( ) . map ( reader -> ( HttpMessageReader < ? > ) reader ) ; } @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return ( ) getMessageCodecsConfigurer ( ) . getWriters ( ) . stream ( ) . map ( writer -> ( HttpMessageWriter < ? > ) writer ) ; } @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> ( ) { return java.util.stream.Stream :: java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> ; } @ java.lang.Override public java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ( ) { return DefaultHandlerStrategiesBuilder . DEFAULT_LOCALE_RESOLVER ; } } ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>> < HttpMessageReader < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageReader<?>>> ( ) { return ( ) getMessageCodecsConfigurer ( ) . getReaders ( ) . stream ( ) . map ( reader -> ( HttpMessageReader < ? > ) reader ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>> < HttpMessageWriter < ? > > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.HttpMessageWriter<?>>> ( ) { return ( ) getMessageCodecsConfigurer ( ) . getWriters ( ) . stream ( ) . map ( writer -> ( HttpMessageWriter < ? > ) writer ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> < java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> < ViewResolver > > java.util.function.Supplier<java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver>> ( ) { return java.util.stream.Stream :: java.util.stream.Stream<org.springframework.web.reactive.function.server.ViewResolver> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> < ServerRequest , java.util.Optional<java.util.Locale> < java.util.Locale > > java.util.function.Function<org.springframework.web.reactive.function.server.ServerRequest,java.util.Optional<java.util.Locale>> ( ) { return DefaultHandlerStrategiesBuilder . DEFAULT_LOCALE_RESOLVER ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.function.server.RouterFunction<?> < ? > org.springframework.web.reactive.function.server.RouterFunction<?> ( ) { org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler = org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler ( ) ; return route ( RequestPredicates . GET ( STRING ) , org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) . and ( route ( RequestPredicates . GET ( STRING ) , org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.PersonHandler :: org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ) ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.web.reactive.function.server.ServerResponseResultHandler org.springframework.web.reactive.function.server.ServerResponseResultHandler ( ) { return new ServerResponseResultHandler ( ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person = new org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ( STRING ) ; return ServerResponse . ok ( ) . body ( fromObject ( org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> < ServerResponse > org.springframework.web.reactive.function.server.Mono<org.springframework.web.reactive.function.server.ServerResponse> ( ServerRequest org.springframework.web.reactive.function.server.ServerRequest ) { org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person = new org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ( STRING ) ; org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person = new org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ( STRING ) ; return ServerResponse . ok ( ) . body ( fromPublisher ( Flux . just ( org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person , org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ) , org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person .class ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void ( ) {		}  <METHOD_END>
<METHOD_START> public void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return this . java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public void void ( java.lang.String java.lang.String ) { this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( java.lang.Object java.lang.Object ) { if ( this == java.lang.Object ) { return true ; } if ( java.lang.Object == null || java.lang.Class<? extends org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person> ( ) != java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) ) { return false ; } org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person = ( org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person ) java.lang.Object ; return ! ( this . java.lang.String != null ? ! this . java.lang.String . boolean ( org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person . java.lang.String ) : org.springframework.web.reactive.function.server.DispatcherHandlerIntegrationTests.Person . java.lang.String != null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { return this . java.lang.String != null ? this . java.lang.String . int ( ) : NUMBER ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { return STRING + STRING + this . java.lang.String + '\'' + '}' ; }  <METHOD_END>
