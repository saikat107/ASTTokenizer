<METHOD_START> public static synchronized org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ) { Assert . state ( org.springframework.data.gemfire.support.ConfigurableApplicationContext != null , STRING ) ; return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> public static void void ( java.lang.ClassLoader java.lang.ClassLoader ) { if ( org.springframework.data.gemfire.support.ConfigurableApplicationContext == null || ! org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) { java.util.concurrent.atomic.AtomicReference<java.lang.ClassLoader> . void ( java.lang.ClassLoader ) ; } else { throw new java.lang.IllegalStateException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> protected static void void ( ApplicationListener < ContextRefreshedEvent > org.springframework.data.gemfire.support.ApplicationListener<org.springframework.data.gemfire.support.ContextRefreshedEvent> ) { synchronized ( org.springframework.data.gemfire.support.ApplicationEventMulticaster ) { if ( org.springframework.data.gemfire.support.ContextRefreshedEvent != null ) { org.springframework.data.gemfire.support.ApplicationListener<org.springframework.data.gemfire.support.ContextRefreshedEvent> . onApplicationEvent ( org.springframework.data.gemfire.support.ContextRefreshedEvent ) ; } } }  <METHOD_END>
<METHOD_START> public static < T extends org.springframework.data.gemfire.support.ApplicationListener<org.springframework.data.gemfire.support.ContextRefreshedEvent> < ContextRefreshedEvent > > T T ( T T ) { synchronized ( org.springframework.data.gemfire.support.ApplicationEventMulticaster ) { org.springframework.data.gemfire.support.ApplicationEventMulticaster . addApplicationListener ( T ) ; void ( T ) ; } return T ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> public static < T extends org.springframework.data.gemfire.support.ApplicationListener<org.springframework.data.gemfire.support.ContextRefreshedEvent> < ContextRefreshedEvent > > T T ( T T ) { synchronized ( org.springframework.data.gemfire.support.ApplicationEventMulticaster ) { org.springframework.data.gemfire.support.ApplicationEventMulticaster . removeApplicationListener ( T ) ; } return T ; }  <METHOD_END>
<METHOD_START> public static boolean boolean ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return java.util.List<java.lang.Class<?>> . boolean ( java.lang.Class<> ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.Log org.springframework.data.gemfire.support.Log ( ) { return LogFactory . getLog ( java.lang.Class<? extends org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer> ( ) ) ; }  <METHOD_END>
<METHOD_START> private boolean boolean ( java.util.Collection<java.lang.Class<?>> < java.lang.Class<?> < ? > > java.util.Collection<java.lang.Class<?>> , java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { return ! ( CollectionUtils . isEmpty ( java.util.Collection<java.lang.Class<?>> ) && ObjectUtils . isEmpty ( java.lang.String[] ) && ObjectUtils . isEmpty ( java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] , java.lang.String [] java.lang.String[] ) { Assert . isTrue ( boolean ( java.util.List<java.lang.Class<?>> , java.lang.String[] , java.lang.String[] ) , STRING + STRING ) ; java.lang.Class<?> < ? > [] java.lang.Class<?>[] = java.util.List<java.lang.Class<?>> . java.lang.Class<?>[] ( new java.lang.Class<?> < ? > [ java.util.List<java.lang.Class<?>> . int ( ) ] ) ; return org.springframework.data.gemfire.support.ConfigurableApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String[] ) , java.lang.Class<?>[] ) , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String [] java.lang.String[] ) { return ( ObjectUtils . isEmpty ( java.lang.String[] ) ? new AnnotationConfigApplicationContext ( ) : new ClassPathXmlApplicationContext ( java.lang.String[] , false ) ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ) { Assert . notNull ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , STRING ) ; org.springframework.data.gemfire.support.ConfigurableApplicationContext . addApplicationListener ( this ) ; org.springframework.data.gemfire.support.ConfigurableApplicationContext . registerShutdownHook ( ) ; return org.springframework.data.gemfire.support.ConfigurableApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ) { Assert . notNull ( org.springframework.data.gemfire.support.ConfigurableApplicationContext , STRING ) ; org.springframework.data.gemfire.support.ConfigurableApplicationContext . refresh ( ) ; return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext , java.lang.Class<?> < ? > [] java.lang.Class<?>[] ) { if ( org.springframework.data.gemfire.support.ConfigurableApplicationContext instanceof AnnotationConfigApplicationContext && ! ObjectUtils . isEmpty ( java.lang.Class<?>[] ) ) { ( ( AnnotationConfigApplicationContext ) org.springframework.data.gemfire.support.ConfigurableApplicationContext ) . register ( java.lang.Class<?>[] ) ; } return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext , java.lang.String [] java.lang.String[] ) { if ( org.springframework.data.gemfire.support.ConfigurableApplicationContext instanceof AnnotationConfigApplicationContext && ! ObjectUtils . isEmpty ( java.lang.String[] ) ) { ( ( AnnotationConfigApplicationContext ) org.springframework.data.gemfire.support.ConfigurableApplicationContext ) . scan ( java.lang.String[] ) ; } return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> org.springframework.data.gemfire.support.ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ( ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext ) { java.lang.ClassLoader java.lang.ClassLoader = java.util.concurrent.atomic.AtomicReference<java.lang.ClassLoader> . java.lang.ClassLoader ( ) ; if ( org.springframework.data.gemfire.support.ConfigurableApplicationContext instanceof DefaultResourceLoader && java.lang.ClassLoader != null ) { ( ( DefaultResourceLoader ) org.springframework.data.gemfire.support.ConfigurableApplicationContext ) . setClassLoader ( java.lang.ClassLoader ) ; } return org.springframework.data.gemfire.support.ConfigurableApplicationContext ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.util.Properties java.util.Properties ) { try { synchronized ( org.springframework.data.gemfire.support.SpringContextBootstrappingInitializer .class ) { if ( org.springframework.data.gemfire.support.ConfigurableApplicationContext == null || ! org.springframework.data.gemfire.support.ConfigurableApplicationContext . isActive ( ) ) { java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.util.Properties . java.lang.String ( java.lang.String ) ; java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( StringUtils . trimWhitespace ( java.lang.String ) , java.lang.String , java.lang.String ) ; java.lang.String [] java.lang.String[] = StringUtils . delimitedListToStringArray ( StringUtils . trimWhitespace ( java.lang.String ) , java.lang.String , java.lang.String ) ; ConfigurableApplicationContext org.springframework.data.gemfire.support.ConfigurableApplicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ( java.lang.String[] , java.lang.String[] ) ) ) ; Assert . state ( org.springframework.data.gemfire.support.ConfigurableApplicationContext . isRunning ( ) , java.lang.String . java.lang.String ( STRING , java.lang.String ( org.springframework.data.gemfire.support.ConfigurableApplicationContext ) , java.util.Arrays . java.lang.String ( java.lang.String[] ) , java.util.Arrays . java.lang.String ( java.lang.String[] ) ) ) ; org.springframework.data.gemfire.support.ConfigurableApplicationContext = org.springframework.data.gemfire.support.ConfigurableApplicationContext ; } } } catch ( java.lang.Throwable java.lang.Throwable ) { java.lang.String java.lang.String = STRING ; org.springframework.data.gemfire.support.Log . error ( java.lang.String , java.lang.Throwable ) ; throw new ApplicationContextException ( java.lang.String , java.lang.Throwable ) ; } }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( ApplicationContext org.springframework.data.gemfire.support.ApplicationContext ) { return ( org.springframework.data.gemfire.support.ApplicationContext != null ? org.springframework.data.gemfire.support.ApplicationContext . getId ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ApplicationContextEvent org.springframework.data.gemfire.support.ApplicationContextEvent ) { if ( org.springframework.data.gemfire.support.ApplicationContextEvent instanceof ContextRefreshedEvent ) { synchronized ( org.springframework.data.gemfire.support.ApplicationEventMulticaster ) { org.springframework.data.gemfire.support.ContextRefreshedEvent = ( ContextRefreshedEvent ) org.springframework.data.gemfire.support.ApplicationContextEvent ; org.springframework.data.gemfire.support.ApplicationEventMulticaster . multicastEvent ( org.springframework.data.gemfire.support.ApplicationContextEvent ) ; } } else if ( org.springframework.data.gemfire.support.ApplicationContextEvent instanceof ContextClosedEvent ) { synchronized ( org.springframework.data.gemfire.support.ApplicationEventMulticaster ) { org.springframework.data.gemfire.support.ContextRefreshedEvent = null ; } } }  <METHOD_END>
