<METHOD_START> @ Bean @ Primary public org.springframework.boot.autoconfigure.security.AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager ( AuthenticationConfiguration org.springframework.boot.autoconfigure.security.AuthenticationConfiguration ) throws java.lang.Exception { return org.springframework.boot.autoconfigure.security.AuthenticationConfiguration . getAuthenticationManager ( ) ; }  <METHOD_END>
<METHOD_START> @ Bean public static org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.SpringBootAuthenticationConfigurerAdapter org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.SpringBootAuthenticationConfigurerAdapter ( SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties , java.util.List<org.springframework.boot.autoconfigure.security.SecurityPrerequisite> < SecurityPrerequisite > java.util.List<org.springframework.boot.autoconfigure.security.SecurityPrerequisite> ) { return new org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.SpringBootAuthenticationConfigurerAdapter ( org.springframework.boot.autoconfigure.security.SecurityProperties ) ; }  <METHOD_END>
<METHOD_START> @ Bean public org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.AuthenticationManagerConfigurationListener org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.AuthenticationManagerConfigurationListener ( ) { return new org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.AuthenticationManagerConfigurationListener ( ) ; }  <METHOD_END>
<METHOD_START> void ( SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties ) { this . org.springframework.boot.autoconfigure.security.SecurityProperties = org.springframework.boot.autoconfigure.security.SecurityProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) throws java.lang.Exception { org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . apply ( new org.springframework.boot.autoconfigure.security.AuthenticationManagerConfiguration.DefaultInMemoryUserDetailsManagerConfigurer ( this . org.springframework.boot.autoconfigure.security.SecurityProperties ) ) ; }  <METHOD_END>
<METHOD_START> void ( SecurityProperties org.springframework.boot.autoconfigure.security.SecurityProperties ) { this . org.springframework.boot.autoconfigure.security.SecurityProperties = org.springframework.boot.autoconfigure.security.SecurityProperties ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( AuthenticationManagerBuilder org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) throws java.lang.Exception { if ( org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder . isConfigured ( ) ) { return; } User org.springframework.boot.autoconfigure.security.User = this . org.springframework.boot.autoconfigure.security.SecurityProperties . getUser ( ) ; if ( org.springframework.boot.autoconfigure.security.User . isDefaultPassword ( ) ) { org.springframework.boot.autoconfigure.security.Log . info ( java.lang.String . java.lang.String ( STRING , org.springframework.boot.autoconfigure.security.User . getPassword ( ) ) ) ; } java.util.Set<java.lang.String> < java.lang.String > java.util.Set<java.lang.String> = new java.util.LinkedHashSet <> ( org.springframework.boot.autoconfigure.security.User . getRole ( ) ) ; withUser ( org.springframework.boot.autoconfigure.security.User . getName ( ) ) . password ( org.springframework.boot.autoconfigure.security.User . getPassword ( ) ) . roles ( java.util.Set<java.lang.String> . java.lang.String[] ( new java.lang.String [ java.util.Set<java.lang.String> . int ( ) ] ) ) ; void ( org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder , STRING , getUserDetailsService ( ) ) ; super. configure ( org.springframework.boot.autoconfigure.security.AuthenticationManagerBuilder ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.Object java.lang.Object , java.lang.String java.lang.String , java.lang.Object java.lang.Object ) { try { java.lang.reflect.Field java.lang.reflect.Field = ReflectionUtils . findField ( java.lang.Object . java.lang.Class<? extends java.lang.Object> ( ) , java.lang.String ) ; ReflectionUtils . makeAccessible ( java.lang.reflect.Field ) ; ReflectionUtils . setField ( java.lang.reflect.Field , java.lang.Object , java.lang.Object ) ; } catch ( java.lang.Exception java.lang.Exception ) { org.springframework.boot.autoconfigure.security.Log . info ( STRING + java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { try { void ( this . org.springframework.boot.autoconfigure.security.ApplicationContext . getBean ( AuthenticationManager .class ) ) ; } catch ( NoSuchBeanDefinitionException org.springframework.boot.autoconfigure.security.NoSuchBeanDefinitionException ) { } }  <METHOD_END>
<METHOD_START> private void void ( AuthenticationManager org.springframework.boot.autoconfigure.security.AuthenticationManager ) { if ( org.springframework.boot.autoconfigure.security.AuthenticationManager instanceof ProviderManager ) { ( ( ProviderManager ) org.springframework.boot.autoconfigure.security.AuthenticationManager ) . setAuthenticationEventPublisher ( this . org.springframework.boot.autoconfigure.security.AuthenticationEventPublisher ) ; } }  <METHOD_END>
