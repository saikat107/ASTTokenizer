<METHOD_START> public void ( ) { this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> = new java.util.LinkedHashSet<org.springframework.integration.file.filters.FileListFilter<F>> < FileListFilter < F > > ( ) ; }  <METHOD_END>
<METHOD_START> public void ( java.util.Collection<? extends org.springframework.integration.file.filters.FileListFilter<F>> < ? extends FileListFilter < F > > java.util.Collection<? extends org.springframework.integration.file.filters.FileListFilter<F>> ) { this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> = new java.util.LinkedHashSet<org.springframework.integration.file.filters.FileListFilter<F>> < FileListFilter < F > > ( java.util.Collection<> ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) java.io.IOException { for ( FileListFilter < F > org.springframework.integration.file.filters.FileListFilter<F> : this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> ) { if ( org.springframework.integration.file.filters.FileListFilter<F> instanceof java.io.Closeable ) { ( ( java.io.Closeable ) org.springframework.integration.file.filters.FileListFilter<F> ) . void ( ) ; } } }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.filters.CompositeFileListFilter<F> < F > org.springframework.integration.file.filters.CompositeFileListFilter<F> ( FileListFilter < F > org.springframework.integration.file.filters.FileListFilter<F> ) { return this . org.springframework.integration.file.filters.CompositeFileListFilter<F> ( java.util.Collections . java.util.List ( org.springframework.integration.file.filters.FileListFilter<F> ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.integration.file.filters.CompositeFileListFilter<F> < F > org.springframework.integration.file.filters.CompositeFileListFilter<F> ( org.springframework.integration.file.filters.FileListFilter<F> < F > ... org.springframework.integration.file.filters.FileListFilter<F>[] ) { return org.springframework.integration.file.filters.CompositeFileListFilter<F> ( java.util.Arrays . java.util.List ( org.springframework.integration.file.filters.FileListFilter<F>[] ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.integration.file.filters.CompositeFileListFilter<F> < F > org.springframework.integration.file.filters.CompositeFileListFilter<F> ( java.util.Collection<? extends org.springframework.integration.file.filters.FileListFilter<F>> < ? extends FileListFilter < F > > java.util.Collection<? extends org.springframework.integration.file.filters.FileListFilter<F>> ) { for ( FileListFilter < ? extends F > org.springframework.integration.file.filters.FileListFilter<? extends F> : java.util.Collection<> ) { if ( org.springframework.integration.file.filters.FileListFilter<> instanceof InitializingBean ) { try { ( ( InitializingBean ) org.springframework.integration.file.filters.FileListFilter<> ) . afterPropertiesSet ( ) ; } catch ( java.lang.Exception java.lang.Exception ) { throw new java.lang.RuntimeException ( java.lang.Exception ) ; } } } this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> . addAll ( java.util.Collection<> ) ; return this ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<F> < F > java.util.List<F> ( F [] F[] ) { Assert . notNull ( F[] , STRING ) ; java.util.List<F> < F > java.util.List<F> = new java.util.ArrayList<F> < F > ( java.util.Arrays . java.util.List<F> ( F[] ) ) ; for ( FileListFilter < F > org.springframework.integration.file.filters.FileListFilter<F> : this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> ) { java.util.List<F> < F > java.util.List<F> = org.springframework.integration.file.filters.FileListFilter<F> . filterFiles ( F[] ) ; java.util.List<F> . boolean ( java.util.List<F> ) ; } return java.util.List<F> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( F F , java.util.List<F> < F > java.util.List<F> ) { for ( FileListFilter < F > org.springframework.integration.file.filters.FileListFilter<F> : this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> ) { if ( org.springframework.integration.file.filters.FileListFilter<F> instanceof ReversibleFileListFilter ) { ( ( ReversibleFileListFilter < F > ) org.springframework.integration.file.filters.FileListFilter<F> ) . rollback ( F , java.util.List<F> ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( F F ) { boolean boolean = false ; for ( FileListFilter < F > org.springframework.integration.file.filters.FileListFilter<F> : this . java.util.Set<org.springframework.integration.file.filters.FileListFilter<F>> ) { if ( org.springframework.integration.file.filters.FileListFilter<F> instanceof ResettableFileListFilter ) { ( ( ResettableFileListFilter < F > ) org.springframework.integration.file.filters.FileListFilter<F> ) . remove ( F ) ; boolean = true ; } } return boolean ; }  <METHOD_END>
