<METHOD_START> public void ( java.lang.String java.lang.String , SockJsServiceConfig org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , WebSocketHandler org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> < java.lang.String , java.lang.Object > java.util.Map<java.lang.String,java.lang.Object> ) { super( java.lang.String , org.springframework.web.socket.sockjs.transport.session.SockJsServiceConfig , org.springframework.web.socket.sockjs.transport.session.WebSocketHandler , java.util.Map<java.lang.String,java.lang.Object> ); }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.URI java.net.URI ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getUri ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.web.socket.sockjs.transport.session.HttpHeaders org.springframework.web.socket.sockjs.transport.session.HttpHeaders ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getHandshakeHeaders ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.security.Principal java.security.Principal ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getPrincipal ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getLocalAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.net.InetSocketAddress java.net.InetSocketAddress ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getRemoteAddress ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getAcceptedProtocol ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { void ( ) ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . setTextMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getTextMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( int int ) { void ( ) ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . setBinaryMessageSizeLimit ( int ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public int int ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getBinaryMessageSizeLimit ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.List<org.springframework.web.socket.sockjs.transport.session.WebSocketExtension> < WebSocketExtension > java.util.List<org.springframework.web.socket.sockjs.transport.session.WebSocketExtension> ( ) { void ( ) ; return this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . getExtensions ( ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { Assert . state ( this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession != null , STRING ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( ) { return ( this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession instanceof NativeWebSocketSession ? ( ( NativeWebSocketSession ) this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession ) . getNativeSession ( ) : null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < T > T T ( java.lang.Class<T> < T > java.lang.Class<T> ) { return ( this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession instanceof NativeWebSocketSession ? ( ( NativeWebSocketSession ) this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession ) . getNativeSession ( java.lang.Class<T> ) : null ) ; }  <METHOD_END>
<METHOD_START> public void void ( WebSocketSession org.springframework.web.socket.sockjs.transport.session.WebSocketSession ) { synchronized ( this . java.lang.Object ) { this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession = org.springframework.web.socket.sockjs.transport.session.WebSocketSession ; try { delegateConnectionEstablished ( ) ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . sendMessage ( new TextMessage ( SockJsFrame . openFrame ( ) . getContent ( ) ) ) ; while ( ! this . java.util.Queue<java.lang.String> . boolean ( ) ) { writeFrame ( SockJsFrame . messageFrame ( getMessageCodec ( ) , this . java.util.Queue<java.lang.String> . java.lang.String ( ) ) ) ; } scheduleHeartbeat ( ) ; this . boolean = true ; } catch ( java.lang.Throwable java.lang.Throwable ) { tryCloseWithSockJsTransportError ( java.lang.Throwable , CloseStatus . SERVER_ERROR ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( ) { return ( this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession != null && this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . isOpen ( ) && ! this . boolean ) ; }  <METHOD_END>
<METHOD_START> public void void ( TextMessage org.springframework.web.socket.sockjs.transport.session.TextMessage , WebSocketSession org.springframework.web.socket.sockjs.transport.session.WebSocketSession ) throws java.lang.Exception { java.lang.String java.lang.String = org.springframework.web.socket.sockjs.transport.session.TextMessage . getPayload ( ) ; if ( StringUtils . isEmpty ( java.lang.String ) ) { return; } java.lang.String [] java.lang.String[] ; try { java.lang.String[] = getSockJsServiceConfig ( ) . getMessageCodec ( ) . decode ( java.lang.String ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { logger . error ( STRING , java.lang.Throwable ) ; tryCloseWithSockJsTransportError ( java.lang.Throwable , CloseStatus . BAD_DATA ) ; return; } delegateMessages ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( java.lang.String java.lang.String ) throws org.springframework.web.socket.sockjs.transport.session.SockJsTransportFailureException { if ( ! this . boolean ) { synchronized ( this . java.lang.Object ) { if ( ! this . boolean ) { this . java.util.Queue<java.lang.String> . boolean ( java.lang.String ) ; return; } } } cancelHeartbeat ( ) ; writeFrame ( SockJsFrame . messageFrame ( getMessageCodec ( ) , java.lang.String ) ) ; scheduleHeartbeat ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( SockJsFrame org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) throws java.io.IOException { if ( logger . isTraceEnabled ( ) ) { logger . trace ( STRING + org.springframework.web.socket.sockjs.transport.session.SockJsFrame ) ; } TextMessage org.springframework.web.socket.sockjs.transport.session.TextMessage = new TextMessage ( org.springframework.web.socket.sockjs.transport.session.SockJsFrame . getContent ( ) ) ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . sendMessage ( org.springframework.web.socket.sockjs.transport.session.TextMessage ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( CloseStatus org.springframework.web.socket.sockjs.transport.session.CloseStatus ) throws java.io.IOException { if ( boolean ( ) ) { synchronized ( this . java.lang.Object ) { if ( boolean ( ) ) { this . boolean = true ; this . org.springframework.web.socket.sockjs.transport.session.WebSocketSession . close ( org.springframework.web.socket.sockjs.transport.session.CloseStatus ) ; } } } }  <METHOD_END>
