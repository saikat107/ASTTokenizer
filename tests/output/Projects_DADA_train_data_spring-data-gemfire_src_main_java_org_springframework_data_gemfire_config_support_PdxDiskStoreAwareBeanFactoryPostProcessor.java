<METHOD_START> public void ( java.lang.String java.lang.String ) { Assert . hasText ( java.lang.String , STRING ) ; this . java.lang.String = java.lang.String ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( ) { return java.lang.String ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory ) throws org.springframework.data.gemfire.config.support.BeansException { void ( org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , AsyncEventQueue .class , DiskStore .class , Region .class ) ; }  <METHOD_END>
<METHOD_START> private void void ( ConfigurableListableBeanFactory org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory , final java.lang.Class<?> < ? > ... java.lang.Class<?>[] ) { for ( java.lang.Class<?> < ? > java.lang.Class<?> : java.lang.Class<?>[] ) { for ( java.lang.String java.lang.String : org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanNamesForType ( java.lang.Class<> ) ) { if ( ! java.lang.String . boolean ( java.lang.String ( ) ) ) { BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition = org.springframework.data.gemfire.config.support.ConfigurableListableBeanFactory . getBeanDefinition ( java.lang.String ) ; void ( org.springframework.data.gemfire.config.support.BeanDefinition ) ; } } } }  <METHOD_END>
<METHOD_START> private void void ( BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ) { java.lang.String [] java.lang.String[] = ( java.lang.String [] ) ArrayUtils . insert ( java.lang.String[] ( org.springframework.data.gemfire.config.support.BeanDefinition ) , NUMBER , java.lang.String ( ) ) ; org.springframework.data.gemfire.config.support.BeanDefinition . setDependsOn ( java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> private java.lang.String [] java.lang.String[] ( BeanDefinition org.springframework.data.gemfire.config.support.BeanDefinition ) { return SpringUtils . defaultIfNull ( org.springframework.data.gemfire.config.support.BeanDefinition . getDependsOn ( ) , java.lang.String[] ) ; }  <METHOD_END>
