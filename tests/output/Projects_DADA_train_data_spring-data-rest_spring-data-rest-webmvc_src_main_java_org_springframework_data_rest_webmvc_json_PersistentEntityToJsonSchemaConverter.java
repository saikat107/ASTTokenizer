<METHOD_START> public void ( PersistentEntities org.springframework.data.rest.webmvc.json.PersistentEntities , Associations org.springframework.data.rest.webmvc.json.Associations , MessageSourceAccessor org.springframework.data.rest.webmvc.json.MessageSourceAccessor , ObjectMapper org.springframework.data.rest.webmvc.json.ObjectMapper , RepositoryRestConfiguration org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration , org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ValueTypeSchemaPropertyCustomizerFactory org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ValueTypeSchemaPropertyCustomizerFactory ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.PersistentEntities , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.Associations , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.MessageSourceAccessor , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.ObjectMapper , STRING ) ; Assert . notNull ( org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration , STRING ) ; this . org.springframework.data.rest.webmvc.json.PersistentEntities = org.springframework.data.rest.webmvc.json.PersistentEntities ; this . org.springframework.data.rest.webmvc.json.Associations = org.springframework.data.rest.webmvc.json.Associations ; this . org.springframework.data.rest.webmvc.json.ObjectMapper = org.springframework.data.rest.webmvc.json.ObjectMapper ; this . org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration = org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration ; this . org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ValueTypeSchemaPropertyCustomizerFactory = org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ValueTypeSchemaPropertyCustomizerFactory ; this . org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver = new org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.DefaultMessageResolver ( org.springframework.data.rest.webmvc.json.MessageSourceAccessor , org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration ) ; for ( TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> : org.springframework.data.rest.webmvc.json.PersistentEntities . getManagedTypes ( ) ) { java.util.Set<org.springframework.data.rest.webmvc.json.ConvertiblePair> . add ( new ConvertiblePair ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) , JsonSchema .class ) ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( TypeDescriptor org.springframework.data.rest.webmvc.json.TypeDescriptor , TypeDescriptor org.springframework.data.rest.webmvc.json.TypeDescriptor ) { return java.lang.Class .class . boolean ( org.springframework.data.rest.webmvc.json.TypeDescriptor . getType ( ) ) && JsonSchema .class . boolean ( org.springframework.data.rest.webmvc.json.TypeDescriptor . getType ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.util.Set<org.springframework.data.rest.webmvc.json.ConvertiblePair> < ConvertiblePair > java.util.Set<org.springframework.data.rest.webmvc.json.ConvertiblePair> ( ) { return java.util.Set<org.springframework.data.rest.webmvc.json.ConvertiblePair> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.json.JsonSchema org.springframework.data.rest.webmvc.json.JsonSchema ( java.lang.Class<?> < ? > java.lang.Class<?> ) { return ( JsonSchema ) org.springframework.data.rest.webmvc.json.JsonSchema ( java.lang.Class<> , org.springframework.data.rest.webmvc.json.TypeDescriptor , org.springframework.data.rest.webmvc.json.TypeDescriptor ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.webmvc.json.JsonSchema org.springframework.data.rest.webmvc.json.JsonSchema ( java.lang.Object java.lang.Object , TypeDescriptor org.springframework.data.rest.webmvc.json.TypeDescriptor , TypeDescriptor org.springframework.data.rest.webmvc.json.TypeDescriptor ) { final PersistentEntity < ? , ? > org.springframework.data.rest.webmvc.json.PersistentEntity<?,?> = org.springframework.data.rest.webmvc.json.PersistentEntities . getRequiredPersistentEntity ( ( java.lang.Class<?> < ? > ) java.lang.Object ) ; final ResourceMetadata org.springframework.data.rest.webmvc.json.ResourceMetadata = org.springframework.data.rest.webmvc.json.Associations . getMappings ( ) . getMetadataFor ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getType ( ) ) ; Definitions org.springframework.data.rest.webmvc.json.Definitions = new Definitions ( ) ; java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> < AbstractJsonSchemaProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> = java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getType ( ) , org.springframework.data.rest.webmvc.json.ResourceMetadata , org.springframework.data.rest.webmvc.json.Definitions ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver . java.lang.String ( new org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ResolvableType ( org.springframework.data.rest.webmvc.json.PersistentEntity<,> . getType ( ) ) ) ; return new JsonSchema ( java.lang.String , org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver . java.lang.String ( org.springframework.data.rest.webmvc.json.ResourceMetadata . getItemResourceDescription ( ) ) , java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> , org.springframework.data.rest.webmvc.json.Definitions ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> < AbstractJsonSchemaProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( java.lang.Class<?> < ? > java.lang.Class<?> , final ResourceMetadata org.springframework.data.rest.webmvc.json.ResourceMetadata , final Definitions org.springframework.data.rest.webmvc.json.Definitions ) { return org.springframework.data.rest.webmvc.json.PersistentEntities . getPersistentEntity ( java.lang.Class<> ) . map ( entity -> { final JacksonMetadata jackson = new JacksonMetadata ( objectMapper , type ) ; JsonSchemaPropertyRegistrar registrar = new JsonSchemaPropertyRegistrar ( jackson ) ; for ( BeanPropertyDefinition definition : jackson ) { JacksonProperty jacksonProperty = new JacksonProperty ( jackson , entity . getPersistentProperty ( definition . getInternalName ( ) ) , definition ) ; Optional < ? extends PersistentProperty < ? > > prop = entity . getPersistentProperty ( definition . getInternalName ( ) ) ; if ( prop . isPresent ( ) ) { PersistentProperty < ? > persistentProperty = prop . get ( ) ; if ( persistentProperty . isIdProperty ( ) && ! configuration . isIdExposedFor ( type ) ) { continue; } if ( persistentProperty . isVersionProperty ( ) ) { continue; } if ( ! definition . couldSerialize ( ) ) { continue; } } AnnotatedMember primaryMember = definition . getPrimaryMember ( ) ; if ( primaryMember == null ) { continue; } TypeInformation < ? > propertyType = jacksonProperty . getPropertyType ( ) ; TypeInformation < ? > actualPropertyType = propertyType . getActualType ( ) ; Class < ? > rawPropertyType = propertyType . getType ( ) ; JsonSchemaFormat format = configuration . getMetadataConfiguration ( ) . getSchemaFormatFor ( rawPropertyType ) ; ResourceDescription description = prop . map ( it -> getDescriptionFor ( it , metadata ) ) . orElseGet ( ( ) jackson . getFallbackDescription ( metadata , definition ) ) ; JsonSchemaProperty property = jacksonProperty . getSchemaProperty ( description , resolver ) ; if ( format != null ) { registrar . register ( property . withFormat ( format ) , actualPropertyType ) ; continue; } Pattern pattern = configuration . getMetadataConfiguration ( ) . getPatternFor ( rawPropertyType ) ; if ( pattern != null ) { registrar . register ( property . withPattern ( pattern ) , actualPropertyType ) ; continue; } if ( jackson . isValueType ( ) ) { registrar . register ( property . with ( STRING_TYPE_INFORMATION ) , actualPropertyType ) ; continue; } Optionals . ifPresentOrElse ( prop , it -> { if ( configuration . isLookupType ( it . getActualType ( ) ) ) { registrar . register ( property . with ( propertyType ) , actualPropertyType ) ; } else if ( associations . isLinkableAssociation ( it ) ) { registrar . register ( property . asAssociation ( ) , null ) ; } else { if ( it . isEntity ( ) ) { if ( ! definitions . hasDefinitionFor ( propertyType ) ) { definitions . addDefinition ( propertyType , new Item ( propertyType , getNestedPropertiesFor ( it , definitions ) ) ) ; } registrar . register ( property . with ( propertyType , Definitions . getReference ( propertyType ) ) , actualPropertyType ) ; } else { registrar . register ( property . with ( propertyType ) , actualPropertyType ) ; } } } , ( ) registrar . register ( property , actualPropertyType ) ) ; } return registrar . getProperties ( ) ; } ) . orElse ( java.util.Collections . java.util.List<java.lang.Object> ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.Collection<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> < AbstractJsonSchemaProperty < ? > > java.util.Collection<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> , Definitions org.springframework.data.rest.webmvc.json.Definitions ) { if ( ! org.springframework.data.rest.webmvc.json.PersistentProperty<> . isEntity ( ) ) { return java.util.Collections . java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( ) ; } return java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . getActualType ( ) , org.springframework.data.rest.webmvc.json.Associations . getMappings ( ) . getMetadataFor ( org.springframework.data.rest.webmvc.json.PersistentProperty<> . getActualType ( ) ) , org.springframework.data.rest.webmvc.json.Definitions ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.json.ResourceDescription org.springframework.data.rest.webmvc.json.ResourceDescription ( PersistentProperty < ? > org.springframework.data.rest.webmvc.json.PersistentProperty<?> , ResourceMetadata org.springframework.data.rest.webmvc.json.ResourceMetadata ) { ResourceMapping org.springframework.data.rest.webmvc.json.ResourceMapping = org.springframework.data.rest.webmvc.json.ResourceMetadata . getMappingFor ( org.springframework.data.rest.webmvc.json.PersistentProperty<> ) ; return org.springframework.data.rest.webmvc.json.ResourceMapping . getDescription ( ) ; }  <METHOD_END>
<METHOD_START> public void ( JacksonMetadata org.springframework.data.rest.webmvc.json.JacksonMetadata ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.JacksonMetadata , STRING ) ; this . org.springframework.data.rest.webmvc.json.JacksonMetadata = org.springframework.data.rest.webmvc.json.JacksonMetadata ; this . java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> = new java.util.ArrayList<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> < AbstractJsonSchemaProperty < ? > > ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ) { if ( org.springframework.data.rest.webmvc.json.TypeInformation<> == null ) { java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> . add ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty ) ; return; } JsonSerializer < ? > org.springframework.data.rest.webmvc.json.JsonSerializer<?> = org.springframework.data.rest.webmvc.json.JacksonMetadata . getTypeSerializer ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) ; if ( ( org.springframework.data.rest.webmvc.json.JsonSerializer<> instanceof JsonSchemaPropertyCustomizer ) ) { java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> . add ( ( ( JsonSchemaPropertyCustomizer ) org.springframework.data.rest.webmvc.json.JsonSerializer<> ) . customize ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty , org.springframework.data.rest.webmvc.json.TypeInformation<> ) ) ; return; } if ( org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration . isLookupType ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) ) { java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> . add ( org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ValueTypeSchemaPropertyCustomizerFactory . org.springframework.data.rest.webmvc.json.JsonSchemaPropertyCustomizer ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) . customize ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty , org.springframework.data.rest.webmvc.json.TypeInformation<> ) ) ; return; } java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> . add ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> < AbstractJsonSchemaProperty < ? > > java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ( ) { return java.util.List<org.springframework.data.rest.webmvc.json.AbstractJsonSchemaProperty<?>> ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.json.JsonSchemaPropertyCustomizer org.springframework.data.rest.webmvc.json.JsonSchemaPropertyCustomizer ( final java.lang.Class<?> < ? > java.lang.Class<?> ) { return new JsonSchemaPropertyCustomizer ( ) { @ java.lang.Override public org.springframework.data.rest.webmvc.json.JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty ( JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.rest.webmvc.json.RepositoryInvokerFactory . getInvokerFor ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) . invokeFindAll ( ( Sort ) null ) ) { java.util.List<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ; } java.util.Collections . void ( java.util.List<java.lang.String> ) ; return new EnumProperty ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty . getName ( ) , org.springframework.data.rest.webmvc.json.JsonSchemaProperty . getTitle ( ) , java.util.List<java.lang.String> , property . description , true ) ; } } ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public org.springframework.data.rest.webmvc.json.JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty ( JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ) { java.util.List<java.lang.String> < java.lang.String > java.util.List<java.lang.String> = new java.util.ArrayList<java.lang.String> < java.lang.String > ( ) ; for ( java.lang.Object java.lang.Object : org.springframework.data.rest.webmvc.json.RepositoryInvokerFactory . getInvokerFor ( org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ) . invokeFindAll ( ( Sort ) null ) ) { java.util.List<java.lang.String> . boolean ( java.lang.Object . java.lang.String ( ) ) ; } java.util.Collections . void ( java.util.List<java.lang.String> ) ; return new EnumProperty ( org.springframework.data.rest.webmvc.json.JsonSchemaProperty . getName ( ) , org.springframework.data.rest.webmvc.json.JsonSchemaProperty . getTitle ( ) , java.util.List<java.lang.String> , property . description , true ) ; }  <METHOD_END>
<METHOD_START> public void ( BeanPropertyDefinition org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) { super( java.lang.String[] ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) ); }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( BeanPropertyDefinition org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) { Assert . notNull ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition , STRING ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getPrimaryMember ( ) . getDeclaringClass ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getInternalName ( ) . concat ( STRING ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) . java.lang.String ( STRING ) . java.lang.String ( java.lang.String ) ; java.lang.String java.lang.String = java.lang.Class<> . java.lang.String ( ) . java.lang.String ( STRING ) . java.lang.String ( java.lang.String ) ; return new java.lang.String [] { java.lang.String , java.lang.String , java.lang.String } ; }  <METHOD_END>
<METHOD_START> public void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { super( java.lang.String[] ( java.lang.Class<> ) ); }  <METHOD_END>
<METHOD_START> private static java.lang.String [] java.lang.String[] ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; return new java.lang.String [] { java.lang.Class<> . java.lang.String ( ) . java.lang.String ( STRING ) , java.lang.Class<> . java.lang.String ( ) . java.lang.String ( STRING ) } ; }  <METHOD_END>
<METHOD_START> @ java.lang.SuppressWarnings ( STRING ) public org.springframework.data.rest.webmvc.json.TypeInformation<?> < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> ( ) { return java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> ( TypeInformation ) it . getTypeInformation ( ) ) . orElseGet ( ( ) ClassTypeInformation . from ( definition . getPrimaryMember ( ) . getRawType ( ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.rest.webmvc.json.JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty ( ResourceDescription org.springframework.data.rest.webmvc.json.ResourceDescription , org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver ) { JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty = org.springframework.data.rest.webmvc.json.JsonSchemaProperty ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition , org.springframework.data.rest.webmvc.json.TypeInformation<?> ( ) , org.springframework.data.rest.webmvc.json.ResourceDescription , org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver ) ; boolean boolean = ! java.util.Optional<> . boolean ( ) ; boolean boolean = java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> ! it . isWritable ( ) ) . orElse ( false ) ; boolean boolean = java.util.Optional<> . java.util.Optional<java.lang.Object> ( it -> org.springframework.data.rest.webmvc.json.JacksonMetadata . isReadOnly ( it ) ) . orElse ( false ) ; if ( boolean || boolean || boolean ) { org.springframework.data.rest.webmvc.json.JsonSchemaProperty = org.springframework.data.rest.webmvc.json.JsonSchemaProperty . withReadOnly ( ) ; } return org.springframework.data.rest.webmvc.json.JsonSchemaProperty ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.rest.webmvc.json.JsonSchemaProperty org.springframework.data.rest.webmvc.json.JsonSchemaProperty ( BeanPropertyDefinition org.springframework.data.rest.webmvc.json.BeanPropertyDefinition , TypeInformation < ? > org.springframework.data.rest.webmvc.json.TypeInformation<?> , ResourceDescription org.springframework.data.rest.webmvc.json.ResourceDescription , org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver ) { java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . getName ( ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver . java.lang.String ( new org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.ResolvableProperty ( org.springframework.data.rest.webmvc.json.BeanPropertyDefinition ) ) ; java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver . java.lang.String ( org.springframework.data.rest.webmvc.json.ResourceDescription ) ; boolean boolean = org.springframework.data.rest.webmvc.json.BeanPropertyDefinition . isRequired ( ) ; java.lang.Class<?> < ? > java.lang.Class<?> = org.springframework.data.rest.webmvc.json.TypeInformation<> . getType ( ) ; if ( ! java.lang.Class<> . boolean ( ) ) { return new JsonSchemaProperty ( java.lang.String , java.lang.String , java.lang.String , boolean ) . with ( org.springframework.data.rest.webmvc.json.TypeInformation<> ) ; } java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.MessageResolver . java.lang.String ( new DefaultMessageSourceResolvable ( org.springframework.data.rest.webmvc.json.ResourceDescription . getMessage ( ) ) ) ; return new EnumProperty ( java.lang.String , java.lang.String , java.lang.Class<> , org.springframework.data.rest.webmvc.json.ResourceDescription . getDefaultMessage ( ) . equals ( java.lang.String ) ? java.lang.String : java.lang.String , boolean ) ; }  <METHOD_END>
<METHOD_START> java.lang.String java.lang.String ( MessageSourceResolvable org.springframework.data.rest.webmvc.json.MessageSourceResolvable );  <METHOD_END>
<METHOD_START> default java.lang.String java.lang.String ( MessageSourceResolvable org.springframework.data.rest.webmvc.json.MessageSourceResolvable ) { return java.lang.String ( new org.springframework.data.rest.webmvc.json.PersistentEntityToJsonSchemaConverter.DefaultingMessageSourceResolvable ( org.springframework.data.rest.webmvc.json.MessageSourceResolvable ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.String java.lang.String ( MessageSourceResolvable org.springframework.data.rest.webmvc.json.MessageSourceResolvable ) { if ( org.springframework.data.rest.webmvc.json.MessageSourceResolvable == null ) { return null ; } try { return org.springframework.data.rest.webmvc.json.MessageSourceAccessor . getMessage ( org.springframework.data.rest.webmvc.json.MessageSourceResolvable ) ; } catch ( NoSuchMessageException org.springframework.data.rest.webmvc.json.NoSuchMessageException ) { if ( org.springframework.data.rest.webmvc.json.RepositoryRestConfiguration . getMetadataConfiguration ( ) . omitUnresolvableDescriptionKeys ( ) ) { return null ; } else { throw org.springframework.data.rest.webmvc.json.NoSuchMessageException ; } } }  <METHOD_END>
<METHOD_START> public void ( MessageSourceResolvable org.springframework.data.rest.webmvc.json.MessageSourceResolvable ) { this . org.springframework.data.rest.webmvc.json.MessageSourceResolvable = org.springframework.data.rest.webmvc.json.MessageSourceResolvable ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object [] java.lang.Object[] ( ) { return org.springframework.data.rest.webmvc.json.MessageSourceResolvable . getArguments ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String [] java.lang.String[] ( ) { return org.springframework.data.rest.webmvc.json.MessageSourceResolvable . getCodes ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.String java.lang.String ( ) { java.lang.String java.lang.String = org.springframework.data.rest.webmvc.json.MessageSourceResolvable . getDefaultMessage ( ) ; if ( java.lang.String != null ) { return java.lang.String ; } java.lang.String [] java.lang.String[] = java.lang.String[] ( ) [ NUMBER ] . java.lang.String[] ( STRING ) ; java.lang.String java.lang.String = java.lang.String[] [ java.lang.String[] . int - NUMBER ] ; java.lang.String = STRING . boolean ( java.lang.String ) ? java.lang.String[] [ java.lang.String[] . int - NUMBER ] : java.lang.String ; return StringUtils . capitalize ( StringUtils . collectionToDelimitedString ( java.util.Arrays . java.util.List<java.lang.String> ( java.util.regex.Pattern . java.lang.String[] ( java.lang.String ) ) , STRING ) . toLowerCase ( java.util.Locale . java.util.Locale ) ) ; }  <METHOD_END>
