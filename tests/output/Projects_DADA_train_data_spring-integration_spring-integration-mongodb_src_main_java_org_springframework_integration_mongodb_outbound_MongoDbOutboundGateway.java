<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory ) { this( org.springframework.integration.mongodb.outbound.MongoDbFactory , new MappingMongoConverter ( new DefaultDbRefResolver ( org.springframework.integration.mongodb.outbound.MongoDbFactory ) , new MongoMappingContext ( ) ) ); }  <METHOD_END>
<METHOD_START> public void ( MongoDbFactory org.springframework.integration.mongodb.outbound.MongoDbFactory , MongoConverter org.springframework.integration.mongodb.outbound.MongoConverter ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.MongoDbFactory , STRING ) ; Assert . notNull ( org.springframework.integration.mongodb.outbound.MongoConverter , STRING ) ; this . org.springframework.integration.mongodb.outbound.MongoDbFactory = org.springframework.integration.mongodb.outbound.MongoDbFactory ; this . org.springframework.integration.mongodb.outbound.MongoConverter = org.springframework.integration.mongodb.outbound.MongoConverter ; }  <METHOD_END>
<METHOD_START> public void ( MongoOperations org.springframework.integration.mongodb.outbound.MongoOperations ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.MongoOperations , STRING ) ; this . org.springframework.integration.mongodb.outbound.MongoOperations = org.springframework.integration.mongodb.outbound.MongoOperations ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mongodb.outbound.Expression ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.Expression , STRING ) ; this . org.springframework.integration.mongodb.outbound.Expression = org.springframework.integration.mongodb.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.integration.mongodb.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( CollectionCallback < ? > org.springframework.integration.mongodb.outbound.CollectionCallback<?> ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.CollectionCallback<> , STRING ) ; this . org.springframework.integration.mongodb.outbound.CollectionCallback<?> = org.springframework.integration.mongodb.outbound.CollectionCallback<> ; }  <METHOD_END>
<METHOD_START> public void void ( boolean boolean ) { this . boolean = boolean ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Class<?> < ? > java.lang.Class<?> ) { Assert . notNull ( java.lang.Class<> , STRING ) ; this . java.lang.Class<?> = java.lang.Class<> ; }  <METHOD_END>
<METHOD_START> public void void ( Expression org.springframework.integration.mongodb.outbound.Expression ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.Expression , STRING ) ; this . org.springframework.integration.mongodb.outbound.Expression = org.springframework.integration.mongodb.outbound.Expression ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { Assert . notNull ( java.lang.String , STRING ) ; this . org.springframework.integration.mongodb.outbound.Expression = EXPRESSION_PARSER . parseExpression ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> public void void ( MongoConverter org.springframework.integration.mongodb.outbound.MongoConverter ) { Assert . notNull ( org.springframework.integration.mongodb.outbound.MongoConverter , STRING ) ; Assert . isNull ( this . org.springframework.integration.mongodb.outbound.MongoOperations , STRING ) ; this . org.springframework.integration.mongodb.outbound.MongoConverter = org.springframework.integration.mongodb.outbound.MongoConverter ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { Assert . state ( this . org.springframework.integration.mongodb.outbound.Expression != null || this . org.springframework.integration.mongodb.outbound.CollectionCallback<> != null , STRING ) ; Assert . state ( this . org.springframework.integration.mongodb.outbound.Expression != null , STRING ) ; if ( this . org.springframework.integration.mongodb.outbound.Expression != null && this . org.springframework.integration.mongodb.outbound.CollectionCallback<> != null ) { throw new java.lang.IllegalStateException ( STRING ) ; } if ( this . org.springframework.integration.mongodb.outbound.EvaluationContext == null ) { this . org.springframework.integration.mongodb.outbound.EvaluationContext = ExpressionUtils . createStandardEvaluationContext ( this . getBeanFactory ( ) ) ; TypeLocator org.springframework.integration.mongodb.outbound.TypeLocator = this . org.springframework.integration.mongodb.outbound.EvaluationContext . getTypeLocator ( ) ; if ( org.springframework.integration.mongodb.outbound.TypeLocator instanceof StandardTypeLocator ) { ( ( StandardTypeLocator ) org.springframework.integration.mongodb.outbound.TypeLocator ) . registerImport ( Query .class . java.lang.Package ( ) . java.lang.String ( ) ) ; } } if ( this . org.springframework.integration.mongodb.outbound.MongoOperations == null ) { this . org.springframework.integration.mongodb.outbound.MongoOperations = new MongoTemplate ( this . org.springframework.integration.mongodb.outbound.MongoDbFactory , this . org.springframework.integration.mongodb.outbound.MongoConverter ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected java.lang.Object java.lang.Object ( Message < ? > org.springframework.integration.mongodb.outbound.Message<?> ) { java.lang.String java.lang.String = this . org.springframework.integration.mongodb.outbound.Expression . getValue ( this . org.springframework.integration.mongodb.outbound.EvaluationContext , org.springframework.integration.mongodb.outbound.Message<> , java.lang.String .class ) ; java.lang.Object java.lang.Object ; if ( this . org.springframework.integration.mongodb.outbound.CollectionCallback<> != null ) { java.lang.Object = this . org.springframework.integration.mongodb.outbound.MongoOperations . execute ( java.lang.String , this . org.springframework.integration.mongodb.outbound.CollectionCallback<> ) ; } else { Query org.springframework.integration.mongodb.outbound.Query = org.springframework.integration.mongodb.outbound.Query ( org.springframework.integration.mongodb.outbound.Message<> ) ; if ( this . boolean ) { java.lang.Object = this . org.springframework.integration.mongodb.outbound.MongoOperations . findOne ( org.springframework.integration.mongodb.outbound.Query , this . java.lang.Class<> , java.lang.String ) ; } else { java.lang.Object = this . org.springframework.integration.mongodb.outbound.MongoOperations . find ( org.springframework.integration.mongodb.outbound.Query , this . java.lang.Class<> , java.lang.String ) ; } } return java.lang.Object ; }  <METHOD_END>
<METHOD_START> private org.springframework.integration.mongodb.outbound.Query org.springframework.integration.mongodb.outbound.Query ( Message < ? > org.springframework.integration.mongodb.outbound.Message<?> ) { Query org.springframework.integration.mongodb.outbound.Query ; java.lang.Object java.lang.Object = this . org.springframework.integration.mongodb.outbound.Expression . getValue ( this . org.springframework.integration.mongodb.outbound.EvaluationContext , org.springframework.integration.mongodb.outbound.Message<> , java.lang.Object .class ) ; if ( java.lang.Object instanceof java.lang.String ) { org.springframework.integration.mongodb.outbound.Query = new BasicQuery ( ( java.lang.String ) java.lang.Object ) ; } else if ( java.lang.Object instanceof Query ) { org.springframework.integration.mongodb.outbound.Query = ( ( Query ) java.lang.Object ) ; } else { throw new java.lang.IllegalStateException ( STRING + STRING ) ; } return org.springframework.integration.mongodb.outbound.Query ; }  <METHOD_END>
