<METHOD_START> @ Test ( expected = java.io.FileNotFoundException .class ) public void void ( ) java.io.IOException { org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; assertEquals ( NUMBER , resources . length ) ; void ( org.springframework.core.io.support.Resource[] , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; assertEquals ( NUMBER , resources . length ) ; void ( org.springframework.core.io.support.Resource[] , STRING , STRING ) ; }  <METHOD_END>
<METHOD_START> @ Ignore @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; java.util.List<org.springframework.core.io.support.Resource> < Resource > java.util.List<org.springframework.core.io.support.Resource> = new java.util.ArrayList<org.springframework.core.io.support.Resource> <> ( ) ; for ( Resource org.springframework.core.io.support.Resource : org.springframework.core.io.support.Resource[] ) { if ( ! org.springframework.core.io.support.Resource . getFilename ( ) . contains ( STRING ) ) { java.util.List<org.springframework.core.io.support.Resource> . add ( org.springframework.core.io.support.Resource ) ; } } org.springframework.core.io.support.Resource[] = java.util.List<org.springframework.core.io.support.Resource> . toArray ( new Resource [ java.util.List<org.springframework.core.io.support.Resource> . size ( ) ] ) ; void ( org.springframework.core.io.support.Resource[] , STRING , StringUtils . concatenateStringArrays ( java.lang.String[] , java.lang.String[] ) ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; void ( org.springframework.core.io.support.Resource[] , STRING , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; void ( org.springframework.core.io.support.Resource[] , STRING , java.lang.String[] ) ; }  <METHOD_END>
<METHOD_START> @ Test public void void ( ) java.io.IOException { Resource [] org.springframework.core.io.support.Resource[] = org.springframework.core.io.support.PathMatchingResourcePatternResolver . getResources ( STRING ) ; boolean boolean = false ; for ( Resource org.springframework.core.io.support.Resource : org.springframework.core.io.support.Resource[] ) { if ( org.springframework.core.io.support.Resource . getFilename ( ) . equals ( STRING ) ) { boolean = true ; } } assertTrue ( STRING , boolean ) ; }  <METHOD_END>
<METHOD_START> private void void ( Resource [] org.springframework.core.io.support.Resource[] , java.lang.String java.lang.String , java.lang.String ... java.lang.String[] )			throws java.io.IOException { assertEquals ( STRING , java.lang.String[] . int , resources . length ) ; for ( Resource org.springframework.core.io.support.Resource : org.springframework.core.io.support.Resource[] ) { java.lang.String java.lang.String = org.springframework.core.io.support.Resource . getURL ( ) . getProtocol ( ) ; assertEquals ( java.lang.String , java.lang.String ) ; void ( org.springframework.core.io.support.Resource , java.lang.String[] ) ; } }  <METHOD_END>
<METHOD_START> private void void ( Resource org.springframework.core.io.support.Resource , java.lang.String ... java.lang.String[] ) { java.lang.String java.lang.String = org.springframework.core.io.support.Resource . getFilename ( ) ; assertTrue ( org.springframework.core.io.support.Resource + STRING , java.util.Arrays . java.util.stream.Stream<java.lang.String> ( java.lang.String[] ) . boolean ( java.lang.String :: boolean ) ) ; }  <METHOD_END>
