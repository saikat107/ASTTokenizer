<METHOD_START> public void void ( ConnectionFactory org.springframework.jms.remoting.ConnectionFactory ) { this . org.springframework.jms.remoting.ConnectionFactory = org.springframework.jms.remoting.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.ConnectionFactory org.springframework.jms.remoting.ConnectionFactory ( ) { return this . org.springframework.jms.remoting.ConnectionFactory ; }  <METHOD_END>
<METHOD_START> public void void ( Queue org.springframework.jms.remoting.Queue ) { this . java.lang.Object = org.springframework.jms.remoting.Queue ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.String java.lang.String ) { this . java.lang.Object = java.lang.String ; }  <METHOD_END>
<METHOD_START> public void void ( DestinationResolver org.springframework.jms.remoting.DestinationResolver ) { this . org.springframework.jms.remoting.DestinationResolver = ( org.springframework.jms.remoting.DestinationResolver != null ? org.springframework.jms.remoting.DestinationResolver : new DynamicDestinationResolver ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( RemoteInvocationFactory org.springframework.jms.remoting.RemoteInvocationFactory ) { this . org.springframework.jms.remoting.RemoteInvocationFactory = ( org.springframework.jms.remoting.RemoteInvocationFactory != null ? org.springframework.jms.remoting.RemoteInvocationFactory : new DefaultRemoteInvocationFactory ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( MessageConverter org.springframework.jms.remoting.MessageConverter ) { this . org.springframework.jms.remoting.MessageConverter = ( org.springframework.jms.remoting.MessageConverter != null ? org.springframework.jms.remoting.MessageConverter : new SimpleMessageConverter ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( long long ) { this . long = long ; }  <METHOD_END>
<METHOD_START> protected long long ( ) { return this . long ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( ) { if ( org.springframework.jms.remoting.ConnectionFactory ( ) == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } if ( this . java.lang.Object == null ) { throw new java.lang.IllegalArgumentException ( STRING ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public java.lang.Object java.lang.Object ( MethodInvocation org.springframework.jms.remoting.MethodInvocation ) throws java.lang.Throwable { if ( AopUtils . isToStringMethod ( org.springframework.jms.remoting.MethodInvocation . getMethod ( ) ) ) { return STRING + this . java.lang.Object + STRING ; } RemoteInvocation org.springframework.jms.remoting.RemoteInvocation = org.springframework.jms.remoting.RemoteInvocation ( org.springframework.jms.remoting.MethodInvocation ) ; RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ; try { org.springframework.jms.remoting.RemoteInvocationResult = org.springframework.jms.remoting.RemoteInvocationResult ( org.springframework.jms.remoting.RemoteInvocation ) ; } catch ( JMSException org.springframework.jms.remoting.JMSException ) { throw org.springframework.jms.remoting.RemoteAccessException ( org.springframework.jms.remoting.JMSException ) ; } try { return java.lang.Object ( org.springframework.jms.remoting.RemoteInvocationResult ) ; } catch ( java.lang.Throwable java.lang.Throwable ) { if ( org.springframework.jms.remoting.RemoteInvocationResult . hasInvocationTargetException ( ) ) { throw java.lang.Throwable ; } else { throw new RemoteInvocationFailureException ( STRING + org.springframework.jms.remoting.MethodInvocation . getMethod ( ) + STRING + this . java.lang.Object + STRING , java.lang.Throwable ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ( MethodInvocation org.springframework.jms.remoting.MethodInvocation ) { return this . org.springframework.jms.remoting.RemoteInvocationFactory . createRemoteInvocation ( org.springframework.jms.remoting.MethodInvocation ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ( RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ) throws org.springframework.jms.remoting.JMSException { Connection org.springframework.jms.remoting.Connection = org.springframework.jms.remoting.Connection ( ) ; Session org.springframework.jms.remoting.Session = null ; try { org.springframework.jms.remoting.Session = org.springframework.jms.remoting.Session ( org.springframework.jms.remoting.Connection ) ; Queue org.springframework.jms.remoting.Queue = org.springframework.jms.remoting.Queue ( org.springframework.jms.remoting.Session ) ; Message org.springframework.jms.remoting.Message = org.springframework.jms.remoting.Message ( org.springframework.jms.remoting.Session , org.springframework.jms.remoting.RemoteInvocation ) ; org.springframework.jms.remoting.Connection . start ( ) ; Message org.springframework.jms.remoting.Message = org.springframework.jms.remoting.Message ( org.springframework.jms.remoting.Session , org.springframework.jms.remoting.Queue , org.springframework.jms.remoting.Message ) ; if ( org.springframework.jms.remoting.Message != null ) { return org.springframework.jms.remoting.RemoteInvocationResult ( org.springframework.jms.remoting.Message ) ; } else { return org.springframework.jms.remoting.RemoteInvocationResult ( org.springframework.jms.remoting.RemoteInvocation ) ; } } finally { JmsUtils . closeSession ( org.springframework.jms.remoting.Session ) ; ConnectionFactoryUtils . releaseConnection ( org.springframework.jms.remoting.Connection , org.springframework.jms.remoting.ConnectionFactory ( ) , true ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Connection org.springframework.jms.remoting.Connection ( ) org.springframework.jms.remoting.JMSException { return org.springframework.jms.remoting.ConnectionFactory ( ) . createConnection ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Session org.springframework.jms.remoting.Session ( Connection org.springframework.jms.remoting.Connection ) throws org.springframework.jms.remoting.JMSException { return org.springframework.jms.remoting.Connection . createSession ( false , Session . AUTO_ACKNOWLEDGE ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Queue org.springframework.jms.remoting.Queue ( Session org.springframework.jms.remoting.Session ) throws org.springframework.jms.remoting.JMSException { if ( this . java.lang.Object instanceof Queue ) { return ( Queue ) this . java.lang.Object ; } else if ( this . java.lang.Object instanceof java.lang.String ) { return org.springframework.jms.remoting.Queue ( org.springframework.jms.remoting.Session , ( java.lang.String ) this . java.lang.Object ) ; } else { throw new javax . javax.jms . javax.jms ( STRING + this . java.lang.Object + STRING ) ; } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Queue org.springframework.jms.remoting.Queue ( Session org.springframework.jms.remoting.Session , java.lang.String java.lang.String ) throws org.springframework.jms.remoting.JMSException { return ( Queue ) this . org.springframework.jms.remoting.DestinationResolver . resolveDestinationName ( org.springframework.jms.remoting.Session , java.lang.String , false ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ) throws org.springframework.jms.remoting.JMSException { return this . org.springframework.jms.remoting.MessageConverter . toMessage ( org.springframework.jms.remoting.RemoteInvocation , org.springframework.jms.remoting.Session ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.Message org.springframework.jms.remoting.Message ( Session org.springframework.jms.remoting.Session , Queue org.springframework.jms.remoting.Queue , Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { TemporaryQueue org.springframework.jms.remoting.TemporaryQueue = null ; MessageProducer org.springframework.jms.remoting.MessageProducer = null ; MessageConsumer org.springframework.jms.remoting.MessageConsumer = null ; try { org.springframework.jms.remoting.TemporaryQueue = org.springframework.jms.remoting.Session . createTemporaryQueue ( ) ; org.springframework.jms.remoting.MessageProducer = org.springframework.jms.remoting.Session . createProducer ( org.springframework.jms.remoting.Queue ) ; org.springframework.jms.remoting.MessageConsumer = org.springframework.jms.remoting.Session . createConsumer ( org.springframework.jms.remoting.TemporaryQueue ) ; org.springframework.jms.remoting.Message . setJMSReplyTo ( org.springframework.jms.remoting.TemporaryQueue ) ; org.springframework.jms.remoting.MessageProducer . send ( org.springframework.jms.remoting.Message ) ; long long = long ( ) ; return ( long > NUMBER ? org.springframework.jms.remoting.MessageConsumer . receive ( long ) : org.springframework.jms.remoting.MessageConsumer . receive ( ) ) ; } finally { JmsUtils . closeMessageConsumer ( org.springframework.jms.remoting.MessageConsumer ) ; JmsUtils . closeMessageProducer ( org.springframework.jms.remoting.MessageProducer ) ; if ( org.springframework.jms.remoting.TemporaryQueue != null ) { org.springframework.jms.remoting.TemporaryQueue . delete ( ) ; } } }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ( Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { java.lang.Object java.lang.Object = this . org.springframework.jms.remoting.MessageConverter . fromMessage ( org.springframework.jms.remoting.Message ) ; if ( java.lang.Object instanceof RemoteInvocationResult ) { return ( RemoteInvocationResult ) java.lang.Object ; } return org.springframework.jms.remoting.RemoteInvocationResult ( org.springframework.jms.remoting.Message ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ( RemoteInvocation org.springframework.jms.remoting.RemoteInvocation ) { throw new RemoteTimeoutException ( STRING + this . long + STRING + org.springframework.jms.remoting.RemoteInvocation ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ( Message org.springframework.jms.remoting.Message ) throws org.springframework.jms.remoting.JMSException { throw new MessageFormatException ( STRING + org.springframework.jms.remoting.Message ) ; }  <METHOD_END>
<METHOD_START> protected java.lang.Object java.lang.Object ( RemoteInvocationResult org.springframework.jms.remoting.RemoteInvocationResult ) throws java.lang.Throwable { return org.springframework.jms.remoting.RemoteInvocationResult . recreate ( ) ; }  <METHOD_END>
<METHOD_START> protected org.springframework.jms.remoting.RemoteAccessException org.springframework.jms.remoting.RemoteAccessException ( JMSException org.springframework.jms.remoting.JMSException ) { return new RemoteAccessException ( STRING + this . java.lang.Object + STRING , org.springframework.jms.remoting.JMSException ) ; }  <METHOD_END>
