<METHOD_START> public void ( MongoEntityInformation < T , ID > org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , MongoOperations org.springframework.data.mongodb.repository.support.MongoOperations ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> , STRING ) ; Assert . notNull ( org.springframework.data.mongodb.repository.support.MongoOperations , STRING ) ; this . org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> = org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> ; this . org.springframework.data.mongodb.repository.support.MongoOperations = org.springframework.data.mongodb.repository.support.MongoOperations ; }  <METHOD_END>
<METHOD_START> public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; if ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . isNew ( S ) ) { org.springframework.data.mongodb.repository.support.MongoOperations . insert ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; } else { org.springframework.data.mongodb.repository.support.MongoOperations . save ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; } return S ; }  <METHOD_END>
<METHOD_START> public < S extends T > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = java.util.List<S> ( java.lang.Iterable<S> ) ; boolean boolean = true ; for ( S S : java.lang.Iterable<S> ) { if ( boolean && ! org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . isNew ( S ) ) { boolean = false ; } } if ( boolean ) { org.springframework.data.mongodb.repository.support.MongoOperations . insertAll ( java.util.List<S> ) ; } else { for ( S S : java.util.List<S> ) { S ( S ) ; } } return java.util.List<S> ; }  <METHOD_END>
<METHOD_START> public java.util.Optional<T> < T > java.util.Optional<T> ( ID ID ) { Assert . notNull ( ID , STRING ) ; return java.util.Optional . java.util.Optional ( org.springframework.data.mongodb.repository.support.MongoOperations . findById ( ID , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.Query org.springframework.data.mongodb.repository.support.Query ( java.lang.Object java.lang.Object ) { return new Query ( org.springframework.data.mongodb.repository.support.Criteria ( java.lang.Object ) ) ; }  <METHOD_END>
<METHOD_START> private org.springframework.data.mongodb.repository.support.Criteria org.springframework.data.mongodb.repository.support.Criteria ( java.lang.Object java.lang.Object ) { return where ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getIdAttribute ( ) ) . is ( java.lang.Object ) ; }  <METHOD_END>
<METHOD_START> public boolean boolean ( ID ID ) { Assert . notNull ( ID , STRING ) ; return org.springframework.data.mongodb.repository.support.MongoOperations . exists ( org.springframework.data.mongodb.repository.support.Query ( ID ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public long long ( ) { return org.springframework.data.mongodb.repository.support.MongoOperations . getCollection ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) . count ( ) ; }  <METHOD_END>
<METHOD_START> public void void ( ID ID ) { Assert . notNull ( ID , STRING ) ; org.springframework.data.mongodb.repository.support.MongoOperations . remove ( org.springframework.data.mongodb.repository.support.Query ( ID ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( T T ) { Assert . notNull ( T , STRING ) ; void ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getId ( T ) . orElse ( null ) ) ; }  <METHOD_END>
<METHOD_START> public void void ( java.lang.Iterable<? extends T> < ? extends T > java.lang.Iterable<? extends T> ) { Assert . notNull ( java.lang.Iterable<> , STRING ) ; for ( T T : java.lang.Iterable<> ) { void ( T ) ; } }  <METHOD_END>
<METHOD_START> public void void ( ) { org.springframework.data.mongodb.repository.support.MongoOperations . remove ( new Query ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( ) { return java.lang.Iterable<T> ( new Query ( ) ) ; }  <METHOD_END>
<METHOD_START> public java.lang.Iterable<T> < T > java.lang.Iterable<T> ( java.lang.Iterable<ID> < ID > java.lang.Iterable<ID> ) { java.util.Set<ID> < ID > java.util.Set<ID> = new java.util.HashSet<ID> < ID > ( int ( java.lang.Iterable<ID> , NUMBER ) ) ; for ( ID ID : java.lang.Iterable<ID> ) { java.util.Set<ID> . boolean ( ID ) ; } return java.lang.Iterable<T> ( new Query ( new Criteria ( org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getIdAttribute ( ) ) . in ( java.util.Set<ID> ) ) ) ; }  <METHOD_END>
<METHOD_START> public org.springframework.data.mongodb.repository.support.Page<T> < T > org.springframework.data.mongodb.repository.support.Page<T> ( final Pageable org.springframework.data.mongodb.repository.support.Pageable ) { java.lang.Long java.lang.Long = long ( ) ; java.util.List<T> < T > java.util.List<T> = java.lang.Iterable<T> ( new Query ( ) . with ( org.springframework.data.mongodb.repository.support.Pageable ) ) ; return new PageImpl < T > ( java.util.List<T> , org.springframework.data.mongodb.repository.support.Pageable , java.lang.Long ) ; }  <METHOD_END>
<METHOD_START> public java.util.List<T> < T > java.util.List<T> ( Sort org.springframework.data.mongodb.repository.support.Sort ) { return java.lang.Iterable<T> ( new Query ( ) . with ( org.springframework.data.mongodb.repository.support.Sort ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( S S ) { Assert . notNull ( S , STRING ) ; org.springframework.data.mongodb.repository.support.MongoOperations . insert ( S , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; return S ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( java.lang.Iterable<S> < S > java.lang.Iterable<S> ) { Assert . notNull ( java.lang.Iterable<S> , STRING ) ; java.util.List<S> < S > java.util.List<S> = java.util.List<S> ( java.lang.Iterable<S> ) ; if ( java.util.List<S> . boolean ( ) ) { return java.util.List<S> ; } org.springframework.data.mongodb.repository.support.MongoOperations . insertAll ( java.util.List<S> ) ; return java.util.List<S> ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > org.springframework.data.mongodb.repository.support.Page<S> < S > org.springframework.data.mongodb.repository.support.Page<S> ( final Example < S > org.springframework.data.mongodb.repository.support.Example<S> , Pageable org.springframework.data.mongodb.repository.support.Pageable ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; final Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) . with ( org.springframework.data.mongodb.repository.support.Pageable ) ; java.util.List<S> < S > java.util.List<S> = org.springframework.data.mongodb.repository.support.MongoOperations . find ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; return PageableExecutionUtils . getPage ( java.util.List<S> , org.springframework.data.mongodb.repository.support.Pageable , ( ) mongoOperations . count ( q , example . getProbeType ( ) , entityInformation . getCollectionName ( ) ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> , Sort org.springframework.data.mongodb.repository.support.Sort ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; if ( org.springframework.data.mongodb.repository.support.Sort != null ) { org.springframework.data.mongodb.repository.support.Query . with ( org.springframework.data.mongodb.repository.support.Sort ) ; } return org.springframework.data.mongodb.repository.support.MongoOperations . find ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > java.util.List<S> < S > java.util.List<S> ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { return org.springframework.data.mongodb.repository.support.Page ( org.springframework.data.mongodb.repository.support.Example<S> , ( Sort ) null ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > S S ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.MongoOperations . findOne ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > long long ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.MongoOperations . count ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public < S extends T > boolean boolean ( Example < S > org.springframework.data.mongodb.repository.support.Example<S> ) { Assert . notNull ( org.springframework.data.mongodb.repository.support.Example<S> , STRING ) ; Query org.springframework.data.mongodb.repository.support.Query = new Query ( new Criteria ( ) . alike ( org.springframework.data.mongodb.repository.support.Example<S> ) ) ; return org.springframework.data.mongodb.repository.support.MongoOperations . exists ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.Example<S> . getProbeType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> private java.util.List<T> < T > java.util.List<T> ( Query org.springframework.data.mongodb.repository.support.Query ) { if ( org.springframework.data.mongodb.repository.support.Query == null ) { return java.util.Collections . java.util.List<T> ( ) ; } return org.springframework.data.mongodb.repository.support.MongoOperations . find ( org.springframework.data.mongodb.repository.support.Query , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getJavaType ( ) , org.springframework.data.mongodb.repository.support.MongoEntityInformation<T,ID> . getCollectionName ( ) ) ; }  <METHOD_END>
<METHOD_START> private static < T > java.util.List<T> < T > java.util.List<T> ( java.lang.Iterable<T> < T > java.lang.Iterable<T> ) { if ( java.lang.Iterable<T> instanceof java.util.List ) { return ( java.util.List<T> < T > ) java.lang.Iterable<T> ; } int int = int ( java.lang.Iterable<T> , NUMBER ) ; if ( int == NUMBER || java.lang.Iterable<T> == null ) { return java.util.Collections .< T > java.util.List<T> ( ) ; } java.util.List<T> < T > java.util.List<T> = new java.util.ArrayList<T> < T > ( int ) ; for ( T T : java.lang.Iterable<T> ) { java.util.List<T> . boolean ( T ) ; } return java.util.List<T> ; }  <METHOD_END>
<METHOD_START> private static int int ( java.lang.Iterable<?> < ? > java.lang.Iterable<?> , int int ) { return java.lang.Iterable<> == null ? NUMBER : ( java.lang.Iterable<> instanceof java.util.Collection ) ? ( ( java.util.Collection<?> < ? > ) java.lang.Iterable<> ) . int ( ) : int ; }  <METHOD_END>
